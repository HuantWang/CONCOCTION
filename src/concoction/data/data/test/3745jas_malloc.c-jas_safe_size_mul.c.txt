-----label-----
0
-----code-----
inline static bool jas_safe_size_mul(size_t x, size_t y, size_t* result)
{
	/* Check if overflow would occur */
	if (x && y > SIZE_MAX / x) {
		/* Overflow would occur. */
		*result = 0;
		return false;
	}
	*result = x * y;
	return true;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
10,11
10,12
11,12
13,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
21,24
22,23
22,24
23,24
23,25
24,25
26,27
26,28
27,28
29,30
29,31
30,31
32,33
34,35
34,36
35,36
36,37
36,38
37,38
38,39
41,42
43,44
44,45
44,46
45,46
46,47
48,49
48,50
49,50
51,52
53,54
-----nextToken-----
2,4,7,9,12,14,17,19,20,25,28,31,33,39,40,42,47,50,52,54
-----computeFrom-----
23,24
23,25
26,27
26,28
29,30
29,31
36,37
36,38
44,45
44,46
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
inline static bool jas_safe_size_mul(size_t x, size_t y, size_t* result){	/* Check if overflow would occur */	if (x && y > SIZE_MAX / x) {		/* Overflow would occur. */		*result = 0;		return false;	}	*result = x * y;	return true;}
inline static bool
jas_safe_size_mul(size_t x, size_t y, size_t* result)
jas_safe_size_mul
size_t x
size_t
size_t
x
x
size_t y
size_t
size_t
y
y
size_t* result
size_t
size_t
* result
*
result
{	/* Check if overflow would occur */	if (x && y > SIZE_MAX / x) {		/* Overflow would occur. */		*result = 0;		return false;	}	*result = x * y;	return true;}
if (x && y > SIZE_MAX / x) {		/* Overflow would occur. */		*result = 0;		return false;	}
x && y > SIZE_MAX / x
x
x
y > SIZE_MAX / x
y
y
SIZE_MAX / x
SIZE_MAX
SIZE_MAX
x
x
{		/* Overflow would occur. */		*result = 0;		return false;	}
*result = 0;
*result = 0
*result
result
result
0
return false;
false
*result = x * y;
*result = x * y
*result
result
result
x * y
x
x
y
y
return true;
true
-----joern-----
(5,1,0)
(1,2,0)
(3,5,0)
(5,4,0)
(0,1,0)
(5,3,1)
(5,4,1)
(0,1,1)
(1,5,1)
(0,1,2)
(5,4,2)
-----------------------------------
(0,RET)
(1,return malloc(size)
(2,)
(3,size)
(4,size_t size)
(5,malloc(size)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000040000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff1a34ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5f00090100ffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
inline static bool jas_safe_size_mul(size_t x, size_t y, size_t* result) {
*result = x * y;
return true;
=======================
