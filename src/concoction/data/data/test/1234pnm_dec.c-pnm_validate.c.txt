-----label-----
0
-----code-----
int pnm_validate(jas_stream_t *in)
{
	uchar buf[2];
	int i;
	int n;

	assert(JAS_STREAM_MAXPUTBACK >= 2);

	/* Read the first two characters that constitute the signature. */
	if ((n = jas_stream_read(in, buf, 2)) < 0) {
		return -1;
	}
	/* Put these characters back to the stream. */
	for (i = n - 1; i >= 0; --i) {
		if (jas_stream_ungetc(in, buf[i]) == EOF) {
			return -1;
		}
	}
	/* Did we read enough data? */
	if (n < 2) {
		return -1;
	}
	/* Is this the correct signature for a PNM file? */
	if (buf[0] == 'P' && isdigit(buf[1])) {
		return 0;
	}
	return -1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
23,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
44,47
44,48
45,46
47,48
49,50
53,54
54,55
55,56
57,58
57,59
57,60
57,61
58,59
59,60
59,61
60,61
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
76,79
77,78
79,80
81,82
81,83
82,83
84,85
86,87
88,89
89,90
90,91
92,93
92,94
93,94
93,95
94,95
97,98
98,99
99,100
101,102
101,103
102,103
102,104
103,104
103,105
104,105
104,106
105,106
109,110
109,111
110,111
112,113
112,114
113,114
116,117
117,118
119,120
120,121
-----nextToken-----
2,4,7,9,10,15,17,19,22,24,27,29,33,36,37,43,46,48,50,51,52,56,61,64,65,68,69,72,78,80,83,85,87,91,95,96,100,106,107,108,111,114,115,118,121
-----computeFrom-----
34,35
34,36
39,40
39,41
41,42
41,43
59,60
59,61
62,63
62,64
66,67
66,68
75,76
75,77
93,94
93,95
102,103
102,104
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
int pnm_validate(jas_stream_t *in){	uchar buf[2];	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= 2);	/* Read the first two characters that constitute the signature. */	if ((n = jas_stream_read(in, buf, 2)) < 0) {		return -1;	}	/* Put these characters back to the stream. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < 2) {		return -1;	}	/* Is this the correct signature for a PNM file? */	if (buf[0] == 'P' && isdigit(buf[1])) {		return 0;	}	return -1;}
int
pnm_validate(jas_stream_t *in)
pnm_validate
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	uchar buf[2];	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= 2);	/* Read the first two characters that constitute the signature. */	if ((n = jas_stream_read(in, buf, 2)) < 0) {		return -1;	}	/* Put these characters back to the stream. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < 2) {		return -1;	}	/* Is this the correct signature for a PNM file? */	if (buf[0] == 'P' && isdigit(buf[1])) {		return 0;	}	return -1;}
uchar buf[2];
uchar buf[2];
uchar
uchar
buf[2]
buf
[2]
2
int i;
int i;
int
i
i
int n;
int n;
int
n
n
assert(JAS_STREAM_MAXPUTBACK >= 2);
assert(JAS_STREAM_MAXPUTBACK >= 2)
assert
assert
JAS_STREAM_MAXPUTBACK >= 2
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
2
if ((n = jas_stream_read(in, buf, 2)) < 0) {		return -1;	}
(n = jas_stream_read(in, buf, 2)) < 0
(n = jas_stream_read(in, buf, 2))
n = jas_stream_read(in, buf, 2)
n
n
jas_stream_read(in, buf, 2)
jas_stream_read
jas_stream_read
in
in
buf
buf
2
0
{		return -1;	}
return -1;
-1
1
for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
i = n - 1;
i = n - 1
i
i
n - 1
n
n
1
i >= 0
i
i
0
--i
i
i
{		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}
jas_stream_ungetc(in, buf[i]) == EOF
jas_stream_ungetc(in, buf[i])
jas_stream_ungetc
jas_stream_ungetc
in
in
buf[i]
buf
buf
i
i
EOF
EOF
{			return -1;		}
return -1;
-1
1
if (n < 2) {		return -1;	}
n < 2
n
n
2
{		return -1;	}
return -1;
-1
1
if (buf[0] == 'P' && isdigit(buf[1])) {		return 0;	}
buf[0] == 'P' && isdigit(buf[1])
buf[0] == 'P'
buf[0]
buf
buf
0
'P'
isdigit(buf[1])
isdigit
isdigit
buf[1]
buf
buf
1
{		return 0;	}
return 0;
0
return -1;
-1
1
-----joern-----
(110,318,0)
(228,299,0)
(116,270,0)
(261,352,0)
(354,137,0)
(9,137,0)
(29,1,0)
(311,278,0)
(88,55,0)
(298,80,0)
(329,34,0)
(161,60,0)
(202,225,0)
(140,80,0)
(157,61,0)
(63,259,0)
(327,217,0)
(32,125,0)
(278,278,0)
(322,239,0)
(3,147,0)
(204,182,0)
(332,67,0)
(273,352,0)
(265,114,0)
(216,121,0)
(266,148,0)
(85,185,0)
(154,35,0)
(340,305,0)
(27,360,0)
(172,39,0)
(301,237,0)
(300,89,0)
(53,24,0)
(34,329,0)
(138,249,0)
(324,144,0)
(239,162,0)
(166,137,0)
(212,170,0)
(177,34,0)
(18,359,0)
(297,180,0)
(273,154,0)
(316,28,0)
(364,198,0)
(83,330,0)
(24,53,0)
(35,137,0)
(344,352,0)
(209,251,0)
(326,77,0)
(23,237,0)
(269,66,0)
(241,9,0)
(119,264,0)
(220,137,0)
(44,137,0)
(63,121,0)
(0,198,0)
(190,215,0)
(153,327,0)
(90,61,0)
(353,255,0)
(307,270,0)
(235,137,0)
(49,137,0)
(81,72,0)
(272,137,0)
(295,258,0)
(346,123,0)
(261,69,0)
(62,236,0)
(275,190,0)
(328,95,0)
(201,305,0)
(148,51,0)
(293,26,0)
(276,330,0)
(327,36,0)
(252,342,0)
(270,307,0)
(323,274,0)
(53,355,0)
(150,220,0)
(246,305,0)
(127,307,0)
(224,273,0)
(198,123,0)
(41,261,0)
(7,291,0)
(10,49,0)
(160,76,0)
(356,137,0)
(133,10,0)
(107,6,0)
(193,127,0)
(214,253,0)
(28,270,0)
(259,110,0)
(266,270,0)
(335,201,0)
(97,108,0)
(77,83,0)
(305,137,0)
(134,246,0)
(105,113,0)
(331,232,0)
(122,223,0)
(360,226,0)
(199,260,0)
(14,239,0)
(147,352,0)
(319,259,0)
(162,226,0)
(215,144,0)
(189,352,0)
(47,137,0)
(192,83,0)
(155,232,0)
(162,67,0)
(259,63,0)
(130,196,0)
(270,116,0)
(50,345,0)
(108,359,0)
(334,132,0)
(69,261,0)
(208,197,0)
(190,156,0)
(180,359,0)
(129,137,0)
(198,42,0)
(56,217,0)
(223,13,0)
(68,293,0)
(65,226,0)
(342,123,0)
(362,304,0)
(131,203,0)
(282,208,0)
(15,301,0)
(6,347,0)
(304,137,0)
(355,313,0)
(26,123,0)
(255,298,0)
(363,220,0)
(39,83,0)
(151,314,0)
(206,274,0)
(93,144,0)
(84,320,0)
(237,137,0)
(73,95,0)
(162,239,0)
(110,345,0)
(191,137,0)
(88,36,0)
(28,347,0)
(262,121,0)
(88,35,0)
(243,206,0)
(37,28,0)
(158,350,0)
(217,327,0)
(117,225,0)
(198,61,0)
(134,72,0)
(330,83,0)
(236,36,0)
(242,2,0)
(210,1,0)
(281,258,0)
(289,113,0)
(176,5,0)
(333,350,0)
(95,352,0)
(221,88,0)
(292,67,0)
(163,72,0)
(66,304,0)
(291,352,0)
(357,121,0)
(70,189,0)
(257,137,0)
(31,302,0)
(58,198,0)
(309,344,0)
(314,305,0)
(207,197,0)
(173,127,0)
(71,123,0)
(284,176,0)
(293,352,0)
(310,137,0)
(244,215,0)
(280,289,0)
(315,298,0)
(55,298,0)
(259,289,0)
(349,278,0)
(274,352,0)
(227,355,0)
(109,344,0)
(1,262,0)
(302,352,0)
(91,293,0)
(187,198,0)
(21,63,0)
(213,137,0)
(102,302,0)
(232,331,0)
(251,13,0)
(13,256,0)
(24,35,0)
(79,318,0)
(338,13,0)
(143,246,0)
(156,33,0)
(283,110,0)
(307,127,0)
(169,123,0)
(345,358,0)
(167,211,0)
(90,189,0)
(139,182,0)
(321,33,0)
(286,348,0)
(43,88,0)
(271,223,0)
(146,137,0)
(106,325,0)
(12,236,0)
(185,344,0)
(217,345,0)
(181,24,0)
(22,259,0)
(168,33,0)
(83,77,0)
(331,137,0)
(19,134,0)
(194,137,0)
(134,348,0)
(17,313,0)
(9,178,0)
(156,190,0)
(141,168,0)
(152,13,0)
(259,251,0)
(4,168,0)
(16,5,0)
(271,36,0)
(288,90,0)
(96,201,0)
(148,266,0)
(39,278,0)
(219,18,0)
(30,49,0)
(185,347,0)
(145,226,0)
(337,203,0)
(237,69,0)
(343,266,0)
(207,215,0)
(147,198,0)
(341,347,0)
(294,137,0)
(45,261,0)
(71,198,0)
(134,197,0)
(231,142,0)
(205,53,0)
(268,113,0)
(46,255,0)
(1,352,0)
(128,137,0)
(127,352,0)
(86,110,0)
(66,137,0)
(111,357,0)
(266,359,0)
(186,358,0)
(208,348,0)
(18,95,0)
(81,39,0)
(233,147,0)
(254,81,0)
(69,237,0)
(33,156,0)
(278,83,0)
(296,124,0)
(87,215,0)
(223,271,0)
(171,304,0)
(240,202,0)
(179,121,0)
(277,189,0)
(247,266,0)
(250,301,0)
(303,273,0)
(229,5,0)
(165,104,0)
(136,331,0)
(100,66,0)
(259,174,0)
(48,24,0)
(72,134,0)
(24,36,0)
(94,229,0)
(60,352,0)
(304,362,0)
(34,226,0)
(262,1,0)
(232,42,0)
(92,35,0)
(25,207,0)
(259,255,0)
(312,256,0)
(63,270,0)
(184,314,0)
(222,329,0)
(198,71,0)
(159,274,0)
(162,314,0)
(189,90,0)
(329,352,0)
(236,12,0)
(344,185,0)
(54,345,0)
(339,5,0)
(259,5,0)
(291,178,0)
(104,237,0)
(361,180,0)
(57,162,0)
(168,352,0)
(278,197,0)
(20,78,0)
(230,134,0)
(317,71,0)
(289,355,0)
(336,307,0)
(255,203,0)
(182,9,0)
(308,289,0)
(238,271,0)
(95,18,0)
(234,162,0)
(251,350,0)
(33,348,0)
(11,55,0)
(118,348,0)
(98,246,0)
(40,298,0)
(66,220,0)
(55,88,0)
(188,61,0)
(135,362,0)
(206,348,0)
(164,157,0)
(35,154,0)
(330,36,0)
(39,81,0)
(64,39,0)
(33,168,0)
(245,26,0)
(258,229,0)
(198,147,0)
(306,262,0)
(82,89,0)
(290,12,0)
(103,183,0)
(38,318,0)
(74,104,0)
(351,190,0)
(258,352,0)
(178,291,0)
(149,71,0)
(126,259,0)
(200,251,0)
(178,9,0)
(225,137,0)
(120,218,0)
(365,52,0)
(246,134,0)
(287,10,0)
(267,248,0)
(195,63,0)
(26,293,0)
(314,162,0)
(263,198,0)
(154,273,0)
(112,329,0)
(175,355,0)
(101,359,0)
(71,270,0)
(115,359,0)
(59,60,0)
(75,347,0)
(72,81,0)
(8,291,0)
(279,61,0)
(229,258,0)
(99,202,0)
(274,206,0)
(285,174,0)
(353,88,1)
(117,202,1)
(240,49,1)
(357,111,1)
(152,338,1)
(244,87,1)
(168,352,1)
(9,178,1)
(99,240,1)
(261,41,1)
(189,352,1)
(341,75,1)
(104,237,1)
(295,281,1)
(342,123,1)
(346,169,1)
(157,164,1)
(185,347,1)
(198,42,1)
(159,323,1)
(71,270,1)
(1,352,1)
(242,116,1)
(259,110,1)
(50,320,1)
(206,348,1)
(232,42,1)
(259,255,1)
(43,221,1)
(121,179,1)
(21,251,1)
(3,0,1)
(75,225,1)
(243,348,1)
(175,52,1)
(322,57,1)
(343,247,1)
(236,12,1)
(338,183,1)
(277,288,1)
(63,195,1)
(39,83,1)
(150,90,1)
(215,244,1)
(21,289,1)
(219,359,1)
(220,363,1)
(115,101,1)
(308,24,1)
(335,35,1)
(304,362,1)
(259,289,1)
(202,99,1)
(198,61,1)
(281,94,1)
(110,345,1)
(4,321,1)
(302,352,1)
(112,222,1)
(27,162,1)
(251,13,1)
(88,55,1)
(241,237,1)
(101,267,1)
(282,207,1)
(275,351,1)
(359,115,1)
(63,270,1)
(273,303,1)
(168,141,1)
(180,297,1)
(40,249,1)
(155,136,1)
(151,184,1)
(176,284,1)
(46,353,1)
(271,223,1)
(104,165,1)
(29,210,1)
(274,159,1)
(134,72,1)
(302,102,1)
(130,77,1)
(266,343,1)
(273,352,1)
(33,168,1)
(230,246,1)
(110,283,1)
(134,348,1)
(289,280,1)
(311,134,1)
(189,70,1)
(229,5,1)
(19,230,1)
(71,317,1)
(223,122,1)
(107,116,1)
(301,15,1)
(255,298,1)
(71,123,1)
(162,226,1)
(15,250,1)
(201,96,1)
(23,331,1)
(207,25,1)
(109,85,1)
(153,60,1)
(190,215,1)
(188,185,1)
(55,298,1)
(265,198,1)
(31,301,1)
(95,352,1)
(123,346,1)
(126,22,1)
(135,171,1)
(48,302,1)
(101,228,1)
(327,217,1)
(52,365,1)
(279,188,1)
(205,181,1)
(293,91,1)
(293,352,1)
(84,327,1)
(21,255,1)
(35,154,1)
(94,5,1)
(53,205,1)
(163,19,1)
(108,359,1)
(102,31,1)
(10,133,1)
(74,182,1)
(246,305,1)
(149,263,1)
(255,46,1)
(83,330,1)
(87,77,1)
(349,311,1)
(95,328,1)
(63,121,1)
(24,53,1)
(190,275,1)
(169,229,1)
(319,126,1)
(284,262,1)
(86,345,1)
(34,329,1)
(274,352,1)
(336,28,1)
(77,83,1)
(254,39,1)
(39,64,1)
(247,180,1)
(262,121,1)
(259,5,1)
(233,3,1)
(321,190,1)
(91,68,1)
(303,224,1)
(360,226,1)
(329,352,1)
(301,237,1)
(13,152,1)
(342,252,1)
(185,344,1)
(8,241,1)
(250,262,1)
(278,349,1)
(200,209,1)
(351,208,1)
(269,66,1)
(208,348,1)
(226,65,1)
(101,199,1)
(16,182,1)
(73,219,1)
(26,293,1)
(259,63,1)
(70,277,1)
(6,347,1)
(39,278,1)
(98,143,1)
(217,345,1)
(169,206,1)
(252,198,1)
(204,139,1)
(245,123,1)
(238,60,1)
(59,301,1)
(94,176,1)
(101,220,1)
(263,147,1)
(72,81,1)
(286,118,1)
(365,24,1)
(101,242,1)
(55,11,1)
(315,40,1)
(330,36,1)
(251,200,1)
(198,71,1)
(6,107,1)
(33,348,1)
(37,185,1)
(136,304,1)
(217,56,1)
(209,13,1)
(21,110,1)
(344,309,1)
(199,183,1)
(193,173,1)
(156,33,1)
(141,4,1)
(25,278,1)
(259,251,1)
(223,13,1)
(26,123,1)
(245,342,1)
(97,148,1)
(156,190,1)
(28,316,1)
(147,352,1)
(177,226,1)
(14,322,1)
(86,327,1)
(198,147,1)
(179,216,1)
(195,21,1)
(339,16,1)
(360,27,1)
(24,35,1)
(85,347,1)
(24,36,1)
(56,153,1)
(348,286,1)
(53,355,1)
(278,83,1)
(7,8,1)
(122,238,1)
(225,117,1)
(306,121,1)
(165,74,1)
(331,232,1)
(267,236,1)
(169,34,1)
(145,104,1)
(101,130,1)
(305,340,1)
(283,86,1)
(297,361,1)
(1,29,1)
(22,63,1)
(209,271,1)
(362,135,1)
(18,359,1)
(101,296,1)
(364,26,1)
(314,305,1)
(307,127,1)
(178,291,1)
(157,61,1)
(143,156,1)
(288,157,1)
(330,276,1)
(139,90,1)
(345,54,1)
(45,23,1)
(61,279,1)
(187,364,1)
(210,306,1)
(314,151,1)
(323,243,1)
(88,35,1)
(234,314,1)
(262,1,1)
(317,149,1)
(96,335,1)
(64,172,1)
(347,341,1)
(291,352,1)
(116,270,1)
(85,6,1)
(287,305,1)
(49,30,1)
(288,61,1)
(309,109,1)
(184,236,1)
(182,204,1)
(58,187,1)
(12,290,1)
(18,95,1)
(90,189,1)
(81,254,1)
(239,14,1)
(161,59,1)
(289,355,1)
(270,307,1)
(308,355,1)
(344,352,1)
(34,226,1)
(278,278,1)
(298,315,1)
(258,352,1)
(92,9,1)
(148,266,1)
(243,156,1)
(224,92,1)
(11,43,1)
(108,97,1)
(236,36,1)
(111,259,1)
(207,215,1)
(134,246,1)
(290,62,1)
(147,233,1)
(228,320,1)
(77,326,1)
(164,26,1)
(259,319,1)
(66,220,1)
(66,304,1)
(249,138,1)
(192,206,1)
(261,352,1)
(101,265,1)
(101,120,1)
(62,34,1)
(88,36,1)
(306,357,1)
(340,201,1)
(363,150,1)
(276,192,1)
(90,61,1)
(222,177,1)
(41,45,1)
(328,73,1)
(280,308,1)
(127,352,1)
(232,155,1)
(320,84,1)
(183,103,1)
(30,10,1)
(65,145,1)
(162,239,1)
(181,48,1)
(176,5,1)
(219,108,1)
(326,83,1)
(97,180,1)
(229,258,1)
(291,7,1)
(0,58,1)
(353,298,1)
(127,193,1)
(296,249,1)
(208,282,1)
(162,314,1)
(327,36,1)
(69,261,1)
(258,295,1)
(355,227,1)
(5,339,1)
(60,352,1)
(182,9,1)
(198,123,1)
(81,39,1)
(66,100,1)
(172,163,1)
(221,302,1)
(154,273,1)
(266,270,1)
(133,287,1)
(60,161,1)
(357,121,1)
(180,359,1)
(361,18,1)
(271,36,1)
(28,347,1)
(100,18,1)
(237,69,1)
(206,274,1)
(120,52,1)
(351,215,1)
(173,336,1)
(103,271,1)
(216,229,1)
(227,175,1)
(57,234,1)
(138,88,1)
(266,359,1)
(329,112,1)
(177,360,1)
(118,104,1)
(246,98,1)
(54,50,1)
(316,37,1)
(68,245,1)
(198,61,2)
(267,236,2)
(262,88,2)
(46,88,2)
(55,302,2)
(90,189,2)
(21,52,2)
(198,123,2)
(71,270,2)
(103,271,2)
(363,90,2)
(306,229,2)
(280,24,2)
(139,90,2)
(346,206,2)
(210,327,2)
(289,355,2)
(21,271,2)
(259,24,2)
(104,237,2)
(258,352,2)
(327,36,2)
(177,236,2)
(26,229,2)
(271,223,2)
(243,77,2)
(1,88,2)
(357,320,2)
(259,251,2)
(1,271,2)
(206,274,2)
(262,271,2)
(293,352,2)
(22,320,2)
(276,206,2)
(33,190,2)
(134,156,2)
(229,5,2)
(311,156,2)
(73,18,2)
(110,345,2)
(295,262,2)
(110,327,2)
(21,249,2)
(198,147,2)
(327,217,2)
(22,249,2)
(307,127,2)
(353,88,2)
(16,182,2)
(309,116,2)
(169,229,2)
(200,271,2)
(262,183,2)
(265,198,2)
(301,262,2)
(357,52,2)
(210,229,2)
(331,232,2)
(251,271,2)
(271,60,2)
(90,61,2)
(162,226,2)
(357,271,2)
(302,352,2)
(126,52,2)
(207,215,2)
(198,26,2)
(330,36,2)
(29,24,2)
(277,185,2)
(319,249,2)
(84,327,2)
(245,34,2)
(25,156,2)
(48,302,2)
(189,185,2)
(33,168,2)
(28,347,2)
(127,185,2)
(71,26,2)
(98,156,2)
(29,88,2)
(200,183,2)
(147,26,2)
(216,229,2)
(259,327,2)
(357,327,2)
(289,24,2)
(198,71,2)
(116,185,2)
(1,229,2)
(302,301,2)
(52,24,2)
(319,183,2)
(91,206,2)
(259,110,2)
(156,190,2)
(177,104,2)
(60,352,2)
(183,271,2)
(357,121,2)
(1,249,2)
(168,352,2)
(162,239,2)
(58,26,2)
(266,270,2)
(126,327,2)
(63,183,2)
(322,236,2)
(262,249,2)
(86,327,2)
(204,90,2)
(246,305,2)
(168,190,2)
(336,185,2)
(111,24,2)
(112,104,2)
(266,359,2)
(327,60,2)
(252,198,2)
(245,206,2)
(29,183,2)
(24,35,2)
(258,262,2)
(243,104,2)
(195,88,2)
(163,156,2)
(86,320,2)
(111,327,2)
(270,185,2)
(364,26,2)
(306,24,2)
(221,302,2)
(3,26,2)
(123,206,2)
(18,359,2)
(262,24,2)
(269,66,2)
(291,352,2)
(162,314,2)
(157,61,2)
(280,52,2)
(68,229,2)
(195,327,2)
(342,123,2)
(83,206,2)
(81,39,2)
(1,352,2)
(22,327,2)
(193,185,2)
(348,104,2)
(297,18,2)
(262,121,2)
(151,236,2)
(293,34,2)
(273,352,2)
(111,183,2)
(319,320,2)
(88,36,2)
(210,52,2)
(263,26,2)
(107,116,2)
(293,229,2)
(323,104,2)
(274,104,2)
(329,104,2)
(259,249,2)
(63,52,2)
(134,246,2)
(22,52,2)
(56,60,2)
(343,180,2)
(361,18,2)
(130,77,2)
(91,229,2)
(261,352,2)
(63,270,2)
(281,182,2)
(188,185,2)
(28,185,2)
(185,344,2)
(308,52,2)
(63,24,2)
(353,249,2)
(159,77,2)
(43,302,2)
(266,180,2)
(195,320,2)
(277,26,2)
(6,116,2)
(169,206,2)
(176,262,2)
(278,278,2)
(111,320,2)
(345,320,2)
(206,77,2)
(279,185,2)
(149,26,2)
(365,24,2)
(53,302,2)
(31,301,2)
(233,26,2)
(232,42,2)
(81,156,2)
(326,206,2)
(262,320,2)
(315,249,2)
(63,271,2)
(357,24,2)
(148,180,2)
(189,352,2)
(39,278,2)
(259,271,2)
(94,262,2)
(328,18,2)
(288,26,2)
(284,262,2)
(217,60,2)
(239,236,2)
(138,88,2)
(207,156,2)
(245,198,2)
(156,156,2)
(65,104,2)
(37,185,2)
(314,236,2)
(319,52,2)
(259,289,2)
(346,229,2)
(190,156,2)
(307,185,2)
(21,320,2)
(91,198,2)
(87,77,2)
(141,190,2)
(255,249,2)
(274,352,2)
(104,182,2)
(278,156,2)
(34,226,2)
(190,215,2)
(295,182,2)
(308,24,2)
(134,348,2)
(192,206,2)
(91,34,2)
(29,271,2)
(259,52,2)
(208,348,2)
(5,182,2)
(153,60,2)
(62,34,2)
(46,249,2)
(13,183,2)
(9,178,2)
(26,123,2)
(64,156,2)
(245,229,2)
(71,123,2)
(156,77,2)
(255,88,2)
(26,293,2)
(18,95,2)
(270,307,2)
(182,9,2)
(108,18,2)
(238,60,2)
(236,12,2)
(173,185,2)
(21,327,2)
(111,271,2)
(229,258,2)
(29,249,2)
(259,5,2)
(29,320,2)
(22,271,2)
(110,320,2)
(282,156,2)
(251,183,2)
(234,236,2)
(68,206,2)
(66,220,2)
(319,24,2)
(283,327,2)
(306,320,2)
(150,90,2)
(60,301,2)
(304,362,2)
(178,291,2)
(95,352,2)
(198,42,2)
(74,182,2)
(34,236,2)
(275,77,2)
(215,77,2)
(182,90,2)
(15,262,2)
(63,121,2)
(1,183,2)
(236,36,2)
(349,156,2)
(351,77,2)
(59,301,2)
(126,24,2)
(1,320,2)
(330,206,2)
(339,182,2)
(249,88,2)
(165,182,2)
(72,81,2)
(122,60,2)
(126,183,2)
(164,26,2)
(12,34,2)
(246,156,2)
(85,116,2)
(121,229,2)
(147,352,2)
(14,236,2)
(26,206,2)
(187,26,2)
(94,182,2)
(185,116,2)
(161,301,2)
(88,55,2)
(209,183,2)
(323,77,2)
(220,90,2)
(184,236,2)
(346,34,2)
(259,88,2)
(306,52,2)
(316,185,2)
(63,320,2)
(321,190,2)
(195,52,2)
(195,183,2)
(21,24,2)
(319,88,2)
(259,320,2)
(33,348,2)
(293,206,2)
(123,229,2)
(262,52,2)
(127,352,2)
(176,5,2)
(29,327,2)
(26,198,2)
(236,34,2)
(24,53,2)
(24,302,2)
(250,262,2)
(274,77,2)
(357,183,2)
(148,266,2)
(63,249,2)
(34,329,2)
(296,249,2)
(21,183,2)
(34,104,2)
(344,116,2)
(83,330,2)
(55,298,2)
(35,154,2)
(360,226,2)
(228,320,2)
(77,206,2)
(27,236,2)
(126,249,2)
(152,183,2)
(61,185,2)
(222,104,2)
(360,236,2)
(1,52,2)
(70,185,2)
(6,347,2)
(175,52,2)
(206,104,2)
(244,77,2)
(251,13,2)
(242,116,2)
(22,183,2)
(39,156,2)
(77,83,2)
(230,156,2)
(195,249,2)
(111,88,2)
(145,104,2)
(275,156,2)
(169,34,2)
(288,185,2)
(18,18,2)
(210,183,2)
(0,26,2)
(290,34,2)
(222,236,2)
(344,352,2)
(210,88,2)
(69,261,2)
(39,83,2)
(342,198,2)
(185,347,2)
(68,34,2)
(180,359,2)
(88,302,2)
(24,36,2)
(90,26,2)
(209,271,2)
(120,52,2)
(229,182,2)
(1,327,2)
(219,18,2)
(29,229,2)
(118,104,2)
(258,182,2)
(229,262,2)
(306,271,2)
(329,352,2)
(190,77,2)
(108,359,2)
(338,183,2)
(195,271,2)
(70,26,2)
(320,327,2)
(208,156,2)
(53,355,2)
(116,270,2)
(355,52,2)
(293,198,2)
(259,183,2)
(289,52,2)
(237,69,2)
(156,33,2)
(50,320,2)
(189,26,2)
(306,88,2)
(206,348,2)
(306,183,2)
(254,156,2)
(357,88,2)
(199,183,2)
(319,271,2)
(205,302,2)
(63,88,2)
(306,327,2)
(317,26,2)
(247,180,2)
(54,320,2)
(351,156,2)
(210,320,2)
(57,236,2)
(162,236,2)
(172,156,2)
(298,249,2)
(255,298,2)
(210,249,2)
(195,24,2)
(181,302,2)
(281,262,2)
(1,24,2)
(262,229,2)
(19,156,2)
(223,60,2)
(40,249,2)
(217,345,2)
(259,63,2)
(227,52,2)
(210,24,2)
(112,236,2)
(111,249,2)
(123,34,2)
(90,185,2)
(180,18,2)
(111,52,2)
(357,249,2)
(22,88,2)
(301,237,2)
(223,13,2)
(286,104,2)
(66,304,2)
(22,24,2)
(126,88,2)
(210,271,2)
(306,249,2)
(226,104,2)
(29,52,2)
(314,305,2)
(88,35,2)
(26,34,2)
(157,26,2)
(95,18,2)
(134,72,2)
(262,327,2)
(262,1,2)
(154,273,2)
(109,116,2)
(4,190,2)
(329,236,2)
(319,327,2)
(68,198,2)
(126,271,2)
(278,83,2)
(259,255,2)
(179,229,2)
(143,156,2)
(11,302,2)
(21,88,2)
(63,327,2)
(283,320,2)
(271,36,2)
(126,320,2)
(159,104,2)
(102,301,2)
(97,18,2)
(72,156,2)
-----------------------------------
(0,y)
(1,hdr->numcmpts)
(2,)
(3,hdr)
(4,hdr)
(5,x = 0)
(6,++cmptno)
(7,magic)
(8,hdr)
(9,type = pnm_type(hdr->magic)
(10,data[1])
(11,uv)
(12,&uv)
(13,uv = 0)
(14,uv)
(15,PNM_FMT_BIN)
(16,x)
(17,if (!pnm_allowtrunc)
(18,cmptno < hdr->numcmpts)
(19,x)
(20,for (x = 0; x < hdr->width;)
(21,data)
(22,0)
(23,fmt)
(24,pnm_getsint(in, depth, &sv)
(25,n)
(26,cmptno < hdr->numcmpts)
(27,x)
(28,data[cmptno])
(29,numcmpts)
(30,0)
(31,hdr)
(32,if (jas_image_writecmpt(image, cmptno, 0, y, hdr->width, 1,\\n\\t\\t\\t  data[cmptno])
(33,x < hdr->width)
(34,x < hdr->width)
(35,depth = pnm_maxvaltodepth(hdr->maxval)
(36,jas_stream_t *in)
(37,data)
(38,if (pnm_getsintstr(in, &sv)
(39,c >> 7)
(40,uv)
(41,magic)
(42,jas_image_t *image)
(43,depth)
(44,v)
(45,hdr)
(46,uv)
(47,n)
(48,in)
(49,data[1] = 0)
(50,sv)
(51,)
(52,!pnm_allowtrunc)
(53,&sv)
(54,0)
(55,&uv)
(56,sv)
(57,x)
(58,0)
(59,hdr)
(60,hdr->sgnd)
(61,y = 0)
(62,in)
(63,data[cmptno])
(64,7)
(65,0)
(66,return ret;)
(67,)
(68,hdr)
(69,pnm_fmt(hdr->magic)
(70,height)
(71,data[cmptno])
(72,1 - ((c >> 7)
(73,hdr)
(74,fmt)
(75,cmptno)
(76,)
(77,(c = jas_stream_getc(in)
(78,)
(79,sv)
(80,)
(81,(c >> 7)
(82,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(83,c = jas_stream_getc(in)
(84,pnm_allowtrunc)
(85,cmptno)
(86,v)
(87,n)
(88,pnm_getuint(in, depth, &uv)
(89,)
(90,y < hdr->height)
(91,numcmpts)
(92,depth)
(93,if ((c = jas_stream_getc(in)
(94,x)
(95,hdr->numcmpts)
(96,0)
(97,cmptno)
(98,0)
(99,2)
(100,ret)
(101,cmptno)
(102,sgnd)
(103,pnm_allowtrunc)
(104,fmt == PNM_FMT_BIN)
(105,sv)
(106,if (data[cmptno])
(107,cmptno)
(108,++cmptno)
(109,hdr)
(110,v = sv)
(111,cmptno)
(112,width)
(113,)
(114,)
(115,0)
(116,!(data[cmptno] = jas_matrix_create(1, hdr->width)
(117,0)
(118,x)
(119,if (!(data[cmptno] = jas_matrix_create(1, hdr->width)
(120,goto done;)
(121,cmptno = 0)
(122,uv)
(123,cmptno = 0)
(124,)
(125,)
(126,x)
(127,hdr->width)
(128,x)
(129,type)
(130,goto done;)
(131,if (pnm_getuint(in, depth, &uv)
(132,)
(133,1)
(134,jas_matrix_set(data[0], 0, x, 1 - ((c >> 7)
(135,1)
(136,numcmpts)
(137,)
(138,pnm_allowtrunc)
(139,type)
(140,if (!pnm_allowtrunc)
(141,width)
(142,)
(143,data)
(144,)
(145,x)
(146,fmt)
(147,hdr->width)
(148,jas_matrix_destroy(data[cmptno])
(149,data)
(150,ret)
(151,0)
(152,0)
(153,in)
(154,pnm_maxvaltodepth(hdr->maxval)
(155,image)
(156,n > 0 && x < hdr->width)
(157,++y)
(158,uv)
(159,width)
(160,if (fmt == PNM_FMT_BIN)
(161,sgnd)
(162,jas_matrix_set(data[0], 0, x, 1 - uv)
(163,1)
(164,y)
(165,PNM_FMT_BIN)
(166,for (y = 0; y < hdr->height; ++y)
(167,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(168,hdr->width)
(169,cmptno)
(170,)
(171,ret)
(172,c)
(173,hdr)
(174,)
(175,sv)
(176,++x)
(177,x)
(178,pnm_type(hdr->magic)
(179,0)
(180,data[cmptno])
(181,depth)
(182,type == PNM_TYPE_PBM)
(183,!pnm_allowtrunc)
(184,data)
(185,cmptno < hdr->numcmpts)
(186,if (!pnm_allowtrunc)
(187,cmptno)
(188,y)
(189,hdr->height)
(190,n > 0)
(191,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(192,c)
(193,width)
(194,ret)
(195,cmptno)
(196,)
(197,)
(198,jas_image_writecmpt(image, cmptno, 0, y, hdr->width, 1,\\n\\t\\t\\t  data[cmptno])
(199,goto done;)
(200,uv)
(201,data[0])
(202,data[2])
(203,)
(204,PNM_TYPE_PBM)
(205,sv)
(206,x < hdr->width)
(207,--n)
(208,++x)
(209,v)
(210,hdr)
(211,)
(212,for (x = 0; x < hdr->width; ++x)
(213,data)
(214,if (hdr->sgnd)
(215,n = 8)
(216,cmptno)
(217,&sv)
(218,)
(219,cmptno)
(220,ret = 0)
(221,in)
(222,hdr)
(223,&uv)
(224,hdr)
(225,data[2] = 0)
(226,x = 0)
(227,0)
(228,goto done;)
(229,x < hdr->width)
(230,0)
(231,for (x = 0; x < hdr->width; ++x)
(232,jas_image_numcmpts(image)
(233,width)
(234,0)
(235,depth)
(236,pnm_getbitstr(in, &uv)
(237,fmt = pnm_fmt(hdr->magic)
(238,in)
(239,1 - uv)
(240,data)
(241,type)
(242,goto done;)
(243,x)
(244,8)
(245,cmptno)
(246,data[0])
(247,data)
(248,)
(249,!pnm_allowtrunc)
(250,fmt)
(251,v = uv)
(252,cmptno)
(253,)
(254,1)
(255,v = uv)
(256,)
(257,y)
(258,hdr->width)
(259,jas_matrix_set(data[cmptno], 0, x, v)
(260,)
(261,hdr->magic)
(262,cmptno < hdr->numcmpts)
(263,1)
(264,)
(265,goto done;)
(266,data[cmptno])
(267,goto done;)
(268,if (pnm_getsint(in, depth, &sv)
(269,RET)
(270,data[cmptno] = jas_matrix_create(1, hdr->width)
(271,pnm_getuintstr(in, &uv)
(272,c)
(273,hdr->maxval)
(274,hdr->width)
(275,0)
(276,in)
(277,hdr)
(278,c <<= 1)
(279,0)
(280,sv)
(281,hdr)
(282,x)
(283,sv)
(284,x)
(285,if (fmt == PNM_FMT_BIN)
(286,0)
(287,data)
(288,y)
(289,v = sv)
(290,uv)
(291,hdr->magic)
(292,if (pnm_getbitstr(in, &uv)
(293,hdr->numcmpts)
(294,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(295,width)
(296,goto done;)
(297,cmptno)
(298,uv = 0)
(299,)
(300,if (type == PNM_TYPE_PBM)
(301,fmt == PNM_FMT_BIN)
(302,hdr->sgnd)
(303,maxval)
(304,ret = -1)
(305,data[0] = 0)
(306,cmptno)
(307,jas_matrix_create(1, hdr->width)
(308,v)
(309,numcmpts)
(310,numcmpts)
(311,c)
(312,if (!pnm_allowtrunc)
(313,)
(314,data[0])
(315,0)
(316,cmptno)
(317,cmptno)
(318,)
(319,v)
(320,!pnm_allowtrunc)
(321,x)
(322,1)
(323,hdr)
(324,while (n > 0 && x < hdr->width)
(325,)
(326,EOF)
(327,pnm_getsintstr(in, &sv)
(328,numcmpts)
(329,hdr->width)
(330,jas_stream_getc(in)
(331,numcmpts = jas_image_numcmpts(image)
(332,uv)
(333,if (pnm_getuintstr(in, &uv)
(334,if (hdr->sgnd)
(335,data)
(336,1)
(337,uv)
(338,uv)
(339,0)
(340,0)
(341,0)
(342,++cmptno)
(343,cmptno)
(344,hdr->numcmpts)
(345,sv = 0)
(346,0)
(347,cmptno = 0)
(348,x = 0)
(349,1)
(350,)
(351,n)
(352,pnm_hdr_t *hdr)
(353,v)
(354,done:)
(355,sv = 0)
(356,cmptno)
(357,++cmptno)
(358,)
(359,cmptno = 0)
(360,++x)
(361,data)
(362,-1)
(363,0)
(364,image)
(365,pnm_allowtrunc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff9cf9a66300000000ffffffffffffffff32faa66300000000ffffffffffffffff32faa66300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5c00030300ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
int pnm_validate(jas_stream_t *in) {
int i;
int n;
assert(JAS_STREAM_MAXPUTBACK >= 2);
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
return -1;
=======================
