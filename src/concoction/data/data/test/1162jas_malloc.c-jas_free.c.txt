-----label-----
0
-----code-----
void jas_free(void *ptr)
{
	free(ptr);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
11,12
12,13
12,14
13,14
15,16
-----nextToken-----
2,4,6,8,9,14,16
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void jas_free(void *ptr){	free(ptr);}
void
jas_free(void *ptr)
jas_free
void *ptr
void
*ptr
*
ptr
{	free(ptr);}
free(ptr);
free(ptr)
free
free
ptr
ptr
-----joern-----
(7,13,0)
(14,7,0)
(6,16,0)
(7,18,0)
(0,15,0)
(12,17,0)
(9,0,0)
(4,5,0)
(2,17,0)
(4,16,0)
(8,7,0)
(15,17,0)
(10,18,0)
(18,7,0)
(4,15,0)
(5,3,0)
(11,17,0)
(16,17,0)
(1,5,0)
(0,13,0)
(15,0,1)
(6,7,1)
(7,13,1)
(7,18,1)
(4,15,1)
(0,9,1)
(7,8,1)
(5,1,1)
(18,10,1)
(4,5,1)
(10,12,1)
(16,6,1)
(1,7,1)
(4,16,1)
(14,18,1)
(0,13,1)
(8,14,1)
(4,5,2)
(7,13,2)
(4,16,2)
(4,15,2)
(5,7,2)
(6,7,2)
(16,7,2)
(7,18,2)
(1,7,2)
(0,13,2)
-----------------------------------
(0,malloc(size)
(1,0)
(2,if (posix_memalign(&ptr, MEMALLOC_ALIGNMENT, size)
(3,)
(4,RET)
(5,return 0;)
(6,ptr)
(7,posix_memalign(&ptr, MEMALLOC_ALIGNMENT, size)
(8,size)
(9,size)
(10,ptr)
(11,ptr)
(12,abort()
(13,size_t size)
(14,MEMALLOC_ALIGNMENT)
(15,return malloc(size)
(16,return ptr;)
(17,)
(18,&ptr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff9cf9a66300000000ffffffffffffffff21faa66300000000ffffffffffffffff21faa66300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x50000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
void jas_free(void *ptr) {
free(ptr);
=======================
