-----label-----
0
-----code-----
struct zip *
_zip_new(struct zip_error *error)
{
    struct zip *za;

    za = (struct zip *)malloc(sizeof(struct zip));
    if (!za) {
	_zip_error_set(error, ZIP_ER_MEMORY, 0);
	return NULL;
    }

    za->zn = NULL;
    za->zp = NULL;
    _zip_error_init(&za->error);
    za->cdir = NULL;
    za->ch_comment = NULL;
    za->ch_comment_len = -1;
    za->nentry = za->nentry_alloc = 0;
    za->entry = NULL;
    za->nfile = za->nfile_alloc = 0;
    za->file = NULL;
    za->flags = za->ch_flags = 0;
    za->default_password = NULL;
    
    return za;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
13,19
13,20
13,21
13,22
13,23
13,24
13,25
13,26
13,27
13,28
13,29
14,15
15,16
15,17
16,17
18,19
18,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
27,28
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
39,40
39,41
40,41
41,42
43,44
43,45
44,45
45,46
45,47
45,48
45,49
46,47
48,49
50,51
53,54
54,55
56,57
57,58
57,59
58,59
58,60
59,60
62,63
64,65
65,66
65,67
66,67
66,68
67,68
70,71
72,73
73,74
73,75
74,75
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
83,85
84,85
87,88
89,90
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
98,100
99,100
99,101
100,101
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
112,114
113,114
117,118
118,119
118,120
119,120
119,121
120,121
123,124
125,126
126,127
126,128
127,128
127,129
128,129
131,132
131,133
132,133
132,134
133,134
137,138
138,139
138,140
139,140
139,141
140,141
143,144
145,146
146,147
146,148
147,148
147,149
148,149
151,152
151,153
152,153
152,154
153,154
157,158
158,159
158,160
159,160
159,161
160,161
163,164
165,166
166,167
-----nextToken-----
3,5,6,9,11,12,17,19,20,24,28,30,33,37,38,42,47,49,51,52,55,60,61,63,68,69,71,75,79,80,85,86,88,93,94,96,101,102,104,109,110,114,115,116,121,122,124,129,130,134,135,136,141,142,144,149,150,154,155,156,161,162,164,167
-----computeFrom-----
22,23
22,24
57,58
57,59
65,66
65,67
82,83
82,84
90,91
90,92
98,99
98,100
106,107
106,108
111,112
111,113
118,119
118,120
126,127
126,128
131,132
131,133
138,139
138,140
146,147
146,148
151,152
151,153
158,159
158,160
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
struct zip *_zip_new(struct zip_error *error){    struct zip *za;    za = (struct zip *)malloc(sizeof(struct zip));    if (!za) {	_zip_error_set(error, ZIP_ER_MEMORY, 0);	return NULL;    }    za->zn = NULL;    za->zp = NULL;    _zip_error_init(&za->error);    za->cdir = NULL;    za->ch_comment = NULL;    za->ch_comment_len = -1;    za->nentry = za->nentry_alloc = 0;    za->entry = NULL;    za->nfile = za->nfile_alloc = 0;    za->file = NULL;    za->flags = za->ch_flags = 0;    za->default_password = NULL;        return za;}
struct zip
zip
*_zip_new(struct zip_error *error)
*
_zip_new
struct zip_error *error
struct zip_error
zip_error
*error
*
error
{    struct zip *za;    za = (struct zip *)malloc(sizeof(struct zip));    if (!za) {	_zip_error_set(error, ZIP_ER_MEMORY, 0);	return NULL;    }    za->zn = NULL;    za->zp = NULL;    _zip_error_init(&za->error);    za->cdir = NULL;    za->ch_comment = NULL;    za->ch_comment_len = -1;    za->nentry = za->nentry_alloc = 0;    za->entry = NULL;    za->nfile = za->nfile_alloc = 0;    za->file = NULL;    za->flags = za->ch_flags = 0;    za->default_password = NULL;        return za;}
struct zip *za;
struct zip *za;
struct zip
zip
*za
*
za
za = (struct zip *)malloc(sizeof(struct zip));
za = (struct zip *)malloc(sizeof(struct zip))
za
za
(struct zip *)malloc(sizeof(struct zip))
struct zip *
struct zip
zip
*
*
malloc(sizeof(struct zip))
malloc
malloc
sizeof(struct zip)
struct zip
struct zip
zip

if (!za) {	_zip_error_set(error, ZIP_ER_MEMORY, 0);	return NULL;    }
!za
za
za
{	_zip_error_set(error, ZIP_ER_MEMORY, 0);	return NULL;    }
_zip_error_set(error, ZIP_ER_MEMORY, 0);
_zip_error_set(error, ZIP_ER_MEMORY, 0)
_zip_error_set
_zip_error_set
error
error
ZIP_ER_MEMORY
ZIP_ER_MEMORY
0
return NULL;
NULL
NULL
za->zn = NULL;
za->zn = NULL
za->zn
za
za
zn
NULL
NULL
za->zp = NULL;
za->zp = NULL
za->zp
za
za
zp
NULL
NULL
_zip_error_init(&za->error);
_zip_error_init(&za->error)
_zip_error_init
_zip_error_init
&za->error
za->error
za
za
error
za->cdir = NULL;
za->cdir = NULL
za->cdir
za
za
cdir
NULL
NULL
za->ch_comment = NULL;
za->ch_comment = NULL
za->ch_comment
za
za
ch_comment
NULL
NULL
za->ch_comment_len = -1;
za->ch_comment_len = -1
za->ch_comment_len
za
za
ch_comment_len
-1
1
za->nentry = za->nentry_alloc = 0;
za->nentry = za->nentry_alloc = 0
za->nentry
za
za
nentry
za->nentry_alloc = 0
za->nentry_alloc
za
za
nentry_alloc
0
za->entry = NULL;
za->entry = NULL
za->entry
za
za
entry
NULL
NULL
za->nfile = za->nfile_alloc = 0;
za->nfile = za->nfile_alloc = 0
za->nfile
za
za
nfile
za->nfile_alloc = 0
za->nfile_alloc
za
za
nfile_alloc
0
za->file = NULL;
za->file = NULL
za->file
za
za
file
NULL
NULL
za->flags = za->ch_flags = 0;
za->flags = za->ch_flags = 0
za->flags
za
za
flags
za->ch_flags = 0
za->ch_flags
za
za
ch_flags
0
za->default_password = NULL;
za->default_password = NULL
za->default_password
za
za
default_password
NULL
NULL
return za;
za
za
-----joern-----
(49,86,0)
(93,7,0)
(59,72,0)
(46,89,0)
(89,68,0)
(58,14,0)
(39,68,0)
(22,39,0)
(19,61,0)
(61,19,0)
(79,40,0)
(44,72,0)
(24,89,0)
(30,28,0)
(28,56,0)
(33,52,0)
(21,15,0)
(23,89,0)
(5,76,0)
(70,31,0)
(36,75,0)
(82,14,0)
(64,71,0)
(28,80,0)
(68,63,0)
(9,69,0)
(68,39,0)
(74,46,0)
(24,61,0)
(8,46,0)
(77,56,0)
(55,89,0)
(16,24,0)
(48,40,0)
(60,55,0)
(46,41,0)
(38,40,0)
(72,19,0)
(82,89,0)
(79,69,0)
(57,77,0)
(63,68,0)
(92,11,0)
(81,76,0)
(68,89,0)
(85,61,0)
(94,28,0)
(34,9,0)
(41,40,0)
(71,89,0)
(14,58,0)
(37,7,0)
(13,6,0)
(13,77,0)
(18,40,0)
(27,71,0)
(2,40,0)
(76,89,0)
(71,75,0)
(0,22,0)
(35,18,0)
(45,53,0)
(89,40,0)
(87,23,0)
(3,53,0)
(7,89,0)
(43,89,0)
(76,79,0)
(50,89,0)
(10,40,0)
(62,43,0)
(9,89,0)
(84,40,0)
(73,89,0)
(20,9,0)
(55,11,0)
(11,40,0)
(32,73,0)
(14,40,0)
(12,55,0)
(36,40,0)
(54,23,0)
(69,79,0)
(75,71,0)
(7,84,0)
(72,89,0)
(25,41,0)
(6,89,0)
(75,36,0)
(65,89,0)
(90,6,0)
(53,89,0)
(26,82,0)
(19,40,0)
(67,40,0)
(91,69,0)
(29,50,0)
(88,43,0)
(43,58,0)
(53,38,0)
(15,40,0)
(47,84,0)
(31,18,0)
(4,67,0)
(86,15,0)
(42,82,0)
(22,0,0)
(17,24,0)
(52,38,0)
(66,31,0)
(6,40,0)
(50,67,0)
(95,48,0)
(83,58,0)
(38,52,0)
(23,48,0)
(51,50,0)
(78,86,0)
(86,89,0)
(1,28,0)
(39,22,0)
(31,89,0)
(53,89,1)
(43,89,1)
(68,39,1)
(28,80,1)
(66,70,1)
(37,93,1)
(82,89,1)
(14,58,1)
(88,82,1)
(18,35,1)
(22,0,1)
(73,89,1)
(48,95,1)
(77,57,1)
(28,30,1)
(31,66,1)
(71,64,1)
(4,50,1)
(38,52,1)
(11,92,1)
(58,83,1)
(44,59,1)
(1,94,1)
(24,89,1)
(53,3,1)
(93,73,1)
(73,32,1)
(76,89,1)
(25,46,1)
(8,74,1)
(79,69,1)
(70,84,1)
(94,73,1)
(32,89,1)
(52,33,1)
(27,18,1)
(92,55,1)
(46,8,1)
(5,15,1)
(47,7,1)
(85,24,1)
(43,62,1)
(82,42,1)
(51,29,1)
(19,61,1)
(39,22,1)
(90,67,1)
(7,89,1)
(81,5,1)
(33,53,1)
(22,65,1)
(72,89,1)
(13,77,1)
(41,25,1)
(6,89,1)
(57,28,1)
(31,89,1)
(26,38,1)
(74,11,1)
(61,85,1)
(24,17,1)
(84,47,1)
(87,54,1)
(36,75,1)
(17,16,1)
(55,12,1)
(23,89,1)
(83,43,1)
(78,19,1)
(86,89,1)
(34,20,1)
(91,9,1)
(71,89,1)
(46,89,1)
(59,48,1)
(67,4,1)
(55,89,1)
(42,26,1)
(68,63,1)
(76,81,1)
(21,86,1)
(50,51,1)
(72,44,1)
(20,76,1)
(35,31,1)
(49,78,1)
(29,79,1)
(23,87,1)
(50,89,1)
(15,21,1)
(12,60,1)
(7,37,1)
(75,71,1)
(69,91,1)
(86,49,1)
(3,45,1)
(64,27,1)
(60,36,1)
(6,90,1)
(62,88,1)
(9,34,1)
(54,14,1)
(30,1,1)
(45,41,1)
(13,6,1)
(16,72,1)
(95,23,1)
(89,68,1)
(9,89,1)
(69,73,2)
(50,89,2)
(91,73,2)
(73,89,2)
(52,73,2)
(31,89,2)
(62,73,2)
(21,73,2)
(55,73,2)
(67,73,2)
(51,73,2)
(50,73,2)
(66,73,2)
(46,89,2)
(64,73,2)
(37,73,2)
(9,73,2)
(83,73,2)
(23,73,2)
(36,73,2)
(24,73,2)
(25,73,2)
(94,73,2)
(31,73,2)
(87,73,2)
(9,89,2)
(42,73,2)
(35,73,2)
(23,89,2)
(33,73,2)
(53,73,2)
(41,73,2)
(20,73,2)
(39,22,2)
(58,73,2)
(48,73,2)
(15,73,2)
(19,61,2)
(74,73,2)
(1,73,2)
(76,89,2)
(7,73,2)
(38,52,2)
(22,0,2)
(68,39,2)
(29,73,2)
(36,75,2)
(57,73,2)
(75,73,2)
(13,77,2)
(34,73,2)
(6,89,2)
(84,73,2)
(28,80,2)
(17,73,2)
(76,73,2)
(47,73,2)
(26,73,2)
(16,73,2)
(6,73,2)
(13,6,2)
(11,73,2)
(54,73,2)
(77,73,2)
(28,73,2)
(53,89,2)
(88,73,2)
(46,73,2)
(90,73,2)
(12,73,2)
(81,73,2)
(89,68,2)
(82,73,2)
(78,73,2)
(95,73,2)
(59,73,2)
(7,89,2)
(86,89,2)
(71,89,2)
(19,73,2)
(49,73,2)
(72,73,2)
(93,73,2)
(61,73,2)
(82,89,2)
(44,73,2)
(3,73,2)
(8,73,2)
(14,73,2)
(43,73,2)
(18,73,2)
(45,73,2)
(43,89,2)
(27,73,2)
(14,58,2)
(92,73,2)
(68,63,2)
(79,69,2)
(60,73,2)
(55,89,2)
(30,73,2)
(4,73,2)
(79,73,2)
(75,71,2)
(85,73,2)
(38,73,2)
(70,73,2)
(86,73,2)
(71,73,2)
(5,73,2)
(72,89,2)
(24,89,2)
-----------------------------------
(0,struct zip)
(1,ZIP_ER_MEMORY)
(2,if (!za)
(3,ch_comment_len)
(4,NULL)
(5,za)
(6,return za;)
(7,za->zn)
(8,ch_comment)
(9,za->ch_flags)
(10,za)
(11,za->cdir = NULL)
(12,cdir)
(13,RET)
(14,za->nentry = za->nentry_alloc = 0)
(15,za->file = NULL)
(16,za)
(17,nfile_alloc)
(18,za->zp = NULL)
(19,za->nfile = za->nfile_alloc = 0)
(20,za)
(21,NULL)
(22,sizeof(struct zip)
(23,za->entry)
(24,za->nfile_alloc)
(25,NULL)
(26,za)
(27,za)
(28,_zip_error_set(error, ZIP_ER_MEMORY, 0)
(29,za)
(30,0)
(31,za->zp)
(32,za)
(33,1)
(34,ch_flags)
(35,NULL)
(36,_zip_error_init(&za->error)
(37,zn)
(38,za->ch_comment_len = -1)
(39,malloc(sizeof(struct zip)
(40,)
(41,za->ch_comment = NULL)
(42,nentry)
(43,za->nentry_alloc)
(44,nfile)
(45,za)
(46,za->ch_comment)
(47,NULL)
(48,za->entry = NULL)
(49,file)
(50,za->default_password)
(51,default_password)
(52,-1)
(53,za->ch_comment_len)
(54,za)
(55,za->cdir)
(56,)
(57,NULL)
(58,za->nentry_alloc = 0)
(59,za)
(60,za)
(61,za->nfile_alloc = 0)
(62,nentry_alloc)
(63,struct zip *)
(64,error)
(65,za)
(66,zp)
(67,za->default_password = NULL)
(68,(struct zip *)
(69,za->ch_flags = 0)
(70,za)
(71,za->error)
(72,za->nfile)
(73,!za)
(74,za)
(75,&za->error)
(76,za->flags)
(77,return NULL;)
(78,za)
(79,za->flags = za->ch_flags = 0)
(80,struct zip_error *error)
(81,flags)
(82,za->nentry)
(83,0)
(84,za->zn = NULL)
(85,0)
(86,za->file)
(87,entry)
(88,za)
(89,za = (struct zip *)
(90,za)
(91,0)
(92,NULL)
(93,za)
(94,error)
(95,NULL)
-----cfg-----
(7,14)
(11,19)
(13,11)
(14,16)
(15,13)
(16,15)
(19,22)
(19,31)
(22,26)
(26,103)
(28,36)
(29,28)
(31,29)
(33,42)
(34,33)
(36,34)
(38,46)
(39,38)
(40,39)
(42,40)
(43,51)
(44,43)
(46,44)
(48,56)
(49,48)
(51,49)
(53,62)
(54,57)
(56,54)
(57,53)
(59,71)
(60,66)
(62,60)
(63,59)
(64,63)
(66,64)
(68,76)
(69,68)
(71,69)
(73,85)
(74,80)
(76,74)
(77,73)
(78,77)
(80,78)
(82,90)
(83,82)
(85,83)
(87,99)
(88,94)
(90,88)
(91,87)
(92,91)
(94,92)
(96,101)
(97,96)
(99,97)
(101,103)
-----path-----
7,14,16,15,13,11,19,22,26,103
7,14,16,15,13,11,19,31,29,28,36,34,33,42,40,39,38,46,44,43,51,49,48,56,54,57,53,62,60,66,64,63,59,71,69,68,76,74,80,78,77,73,85,83,82,90,88,94,92,91,87,99,97,96,101,103
-----cfgNode-----
5,<global>
6,<empty>
7,struct zip _zip_new (struct zip_error *error)
8,struct zip_error *error
9,<empty>
10,struct zip* za
11,za = (struct zip *)malloc(sizeof(struct zip))
12,za
13,(struct zip *)malloc(sizeof(struct zip))
14,struct zip *
15,malloc(sizeof(struct zip))
16,sizeof(struct zip)
17,struct zip
18,if (!za)
19,!za
20,za
21,<empty>
22,_zip_error_set(error, ZIP_ER_MEMORY, 0)
23,error
24,ZIP_ER_MEMORY
25,0
26,return NULL;
27,NULL
28,za->zn = NULL
29,za->zn
30,za
31,zn
32,NULL
33,za->zp = NULL
34,za->zp
35,za
36,zp
37,NULL
38,_zip_error_init(&za->error)
39,&za->error
40,za->error
41,za
42,error
43,za->cdir = NULL
44,za->cdir
45,za
46,cdir
47,NULL
48,za->ch_comment = NULL
49,za->ch_comment
50,za
51,ch_comment
52,NULL
53,za->ch_comment_len = -1
54,za->ch_comment_len
55,za
56,ch_comment_len
57,-1
58,1
59,za->nentry = za->nentry_alloc = 0
60,za->nentry
61,za
62,nentry
63,za->nentry_alloc = 0
64,za->nentry_alloc
65,za
66,nentry_alloc
67,0
68,za->entry = NULL
69,za->entry
70,za
71,entry
72,NULL
73,za->nfile = za->nfile_alloc = 0
74,za->nfile
75,za
76,nfile
77,za->nfile_alloc = 0
78,za->nfile_alloc
79,za
80,nfile_alloc
81,0
82,za->file = NULL
83,za->file
84,za
85,file
86,NULL
87,za->flags = za->ch_flags = 0
88,za->flags
89,za
90,flags
91,za->ch_flags = 0
92,za->ch_flags
93,za
94,ch_flags
95,0
96,za->default_password = NULL
97,za->default_password
98,za
99,default_password
100,NULL
101,return za;
102,za
103,RET
104,struct zip_error *error
105,RET
106,struct zip _zip_new (struct zip_error *error)
107,struct zip_error *error
108,<empty>
109,struct zip* za
110,za = (struct zip *)malloc(sizeof(struct zip))
111,za
112,(struct zip *)malloc(sizeof(struct zip))
113,struct zip *
114,malloc(sizeof(struct zip))
115,sizeof(struct zip)
116,struct zip
117,if (!za)
118,!za
119,za
120,<empty>
121,_zip_error_set(error, ZIP_ER_MEMORY, 0)
122,error
123,ZIP_ER_MEMORY
124,0
125,return NULL;
126,NULL
127,za->zn = NULL
128,za->zn
129,za
130,zn
131,NULL
132,za->zp = NULL
133,za->zp
134,za
135,zp
136,NULL
137,_zip_error_init(&za->error)
138,&za->error
139,za->error
140,za
141,error
142,za->cdir = NULL
143,za->cdir
144,za
145,cdir
146,NULL
147,za->ch_comment = NULL
148,za->ch_comment
149,za
150,ch_comment
151,NULL
152,za->ch_comment_len = -1
153,za->ch_comment_len
154,za
155,ch_comment_len
156,-1
157,1
158,za->nentry = za->nentry_alloc = 0
159,za->nentry
160,za
161,nentry
162,za->nentry_alloc = 0
163,za->nentry_alloc
164,za
165,nentry_alloc
166,0
167,za->entry = NULL
168,za->entry
169,za
170,entry
171,NULL
172,za->nfile = za->nfile_alloc = 0
173,za->nfile
174,za
175,nfile
176,za->nfile_alloc = 0
177,za->nfile_alloc
178,za
179,nfile_alloc
180,0
181,za->file = NULL
182,za->file
183,za
184,file
185,NULL
186,za->flags = za->ch_flags = 0
187,za->flags
188,za
189,flags
190,za->ch_flags = 0
191,za->ch_flags
192,za
193,ch_flags
194,0
195,za->default_password = NULL
196,za->default_password
197,za
198,default_password
199,NULL
200,return za;
201,za
202,RET
203,struct zip_error *error
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000004000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffb1fd436400000000ffffffffffffffffb0fd436400000000ffffffffffffffffb0fd436400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000504b050601ffffffffffffffffffffffffffffffffff
arg00:0x2d53ff
=========trace=========
struct zip * _zip_new(struct zip_error *error) {
struct zip *za;
za = (struct zip *)malloc(sizeof(struct zip));
za->zn = NULL;
za->zp = NULL;
_zip_error_init(&za->error);
za->cdir = NULL;
za->ch_comment = NULL;
za->ch_comment_len = -1;
za->nentry = za->nentry_alloc = 0;
za->entry = NULL;
za->nfile = za->nfile_alloc = 0;
za->file = NULL;
za->flags = za->ch_flags = 0;
za->default_password = NULL;
return za;
=======================
