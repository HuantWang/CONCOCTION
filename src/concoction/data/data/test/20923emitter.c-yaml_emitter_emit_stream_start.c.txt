-----label-----
0
-----code-----
static int
yaml_emitter_emit_stream_start(yaml_emitter_t *emitter,
        yaml_event_t *event)
{
    if (event->type == YAML_STREAM_START_EVENT)
    {
        if (!emitter->encoding) {
            emitter->encoding = event->data.stream_start.encoding;
        }

        if (!emitter->encoding) {
            emitter->encoding = YAML_UTF8_ENCODING;
        }

        if (emitter->best_indent < 2 || emitter->best_indent > 9) {
            emitter->best_indent  = 2;
        }

        if (emitter->best_width >= 0
                && emitter->best_width <= emitter->best_indent*2) {
            emitter->best_width = 80;
        }

        if (emitter->best_width < 0) {
            emitter->best_width = INT_MAX;
        }
        
        if (!emitter->line_break) {
            emitter->line_break = YAML_LN_BREAK;
        }

        emitter->indent = -1;

        emitter->line = 0;
        emitter->column = 0;
        emitter->whitespace = 1;
        emitter->indention = 1;

        if (emitter->encoding != YAML_UTF8_ENCODING) {
            if (!yaml_emitter_write_bom(emitter))
                return 0;
        }

        emitter->state = YAML_EMIT_FIRST_DOCUMENT_START_STATE;

        return 1;
    }

    return yaml_emitter_set_emitter_error(emitter,
            "expected STREAM-START");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
18,20
19,20
19,21
20,21
20,22
21,22
24,25
26,27
26,28
26,29
26,30
26,31
26,32
26,33
26,34
26,35
26,36
26,37
26,38
26,39
26,40
27,28
27,29
28,29
29,30
29,31
30,31
33,34
34,35
35,36
35,37
36,37
36,38
37,38
40,41
40,42
41,42
41,43
42,43
42,44
43,44
48,49
48,50
49,50
50,51
50,52
51,52
54,55
55,56
56,57
56,58
57,58
57,59
58,59
61,62
63,64
63,65
64,65
64,66
65,66
65,67
66,67
66,68
67,68
71,72
71,73
72,73
72,74
73,74
77,78
78,79
79,80
79,81
80,81
80,82
81,82
85,86
85,87
86,87
86,88
87,88
87,89
88,89
88,90
89,90
93,94
93,95
94,95
94,96
95,96
98,99
98,100
99,100
99,101
100,101
104,105
105,106
106,107
106,108
107,108
107,109
108,109
112,113
112,114
113,114
113,115
114,115
114,116
115,116
119,120
120,121
121,122
121,123
122,123
122,124
123,124
126,127
128,129
128,130
129,130
130,131
130,132
131,132
134,135
135,136
136,137
136,138
137,138
137,139
138,139
141,142
143,144
144,145
144,146
145,146
145,147
146,147
149,150
151,152
152,153
152,154
153,154
153,155
154,155
158,159
159,160
159,161
160,161
160,162
161,162
165,166
166,167
166,168
167,168
167,169
168,169
172,173
173,174
173,175
174,175
174,176
175,176
179,180
179,181
180,181
180,182
181,182
181,183
182,183
185,186
187,188
188,189
188,190
189,190
190,191
190,192
191,192
193,194
195,196
197,198
198,199
198,200
199,200
199,201
200,201
203,204
205,206
207,208
208,209
208,210
208,211
209,210
211,212
-----nextToken-----
2,4,7,9,10,13,15,16,22,23,25,31,32,38,39,44,45,46,47,52,53,59,60,62,68,69,70,74,75,76,82,83,84,90,91,92,96,97,101,102,103,109,110,111,116,117,118,124,125,127,132,133,139,140,142,147,148,150,155,156,157,162,163,164,169,170,171,176,177,178,183,184,186,192,194,196,201,202,204,206,210,212,213
-----computeFrom-----
19,20
19,21
35,36
35,37
56,57
56,58
64,65
64,66
65,66
65,67
71,72
71,73
79,80
79,81
86,87
86,88
87,88
87,89
93,94
93,95
98,99
98,100
106,107
106,108
113,114
113,115
121,122
121,123
136,137
136,138
144,145
144,146
152,153
152,154
159,160
159,161
166,167
166,168
173,174
173,175
180,181
180,182
198,199
198,200
-----guardedBy-----
22,44
75,83
74,82
97,110
101,109
117,125
116,124
183,194
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static intyaml_emitter_emit_stream_start(yaml_emitter_t *emitter,        yaml_event_t *event){    if (event->type == YAML_STREAM_START_EVENT)    {        if (!emitter->encoding) {            emitter->encoding = event->data.stream_start.encoding;        }        if (!emitter->encoding) {            emitter->encoding = YAML_UTF8_ENCODING;        }        if (emitter->best_indent < 2 || emitter->best_indent > 9) {            emitter->best_indent  = 2;        }        if (emitter->best_width >= 0                && emitter->best_width <= emitter->best_indent*2) {            emitter->best_width = 80;        }        if (emitter->best_width < 0) {            emitter->best_width = INT_MAX;        }                if (!emitter->line_break) {            emitter->line_break = YAML_LN_BREAK;        }        emitter->indent = -1;        emitter->line = 0;        emitter->column = 0;        emitter->whitespace = 1;        emitter->indention = 1;        if (emitter->encoding != YAML_UTF8_ENCODING) {            if (!yaml_emitter_write_bom(emitter))                return 0;        }        emitter->state = YAML_EMIT_FIRST_DOCUMENT_START_STATE;        return 1;    }    return yaml_emitter_set_emitter_error(emitter,            "expected STREAM-START");}
static int
yaml_emitter_emit_stream_start(yaml_emitter_t *emitter,        yaml_event_t *event)
yaml_emitter_emit_stream_start
yaml_emitter_t *emitter
yaml_emitter_t
yaml_emitter_t
*emitter
*
emitter
yaml_event_t *event
yaml_event_t
yaml_event_t
*event
*
event
{    if (event->type == YAML_STREAM_START_EVENT)    {        if (!emitter->encoding) {            emitter->encoding = event->data.stream_start.encoding;        }        if (!emitter->encoding) {            emitter->encoding = YAML_UTF8_ENCODING;        }        if (emitter->best_indent < 2 || emitter->best_indent > 9) {            emitter->best_indent  = 2;        }        if (emitter->best_width >= 0                && emitter->best_width <= emitter->best_indent*2) {            emitter->best_width = 80;        }        if (emitter->best_width < 0) {            emitter->best_width = INT_MAX;        }                if (!emitter->line_break) {            emitter->line_break = YAML_LN_BREAK;        }        emitter->indent = -1;        emitter->line = 0;        emitter->column = 0;        emitter->whitespace = 1;        emitter->indention = 1;        if (emitter->encoding != YAML_UTF8_ENCODING) {            if (!yaml_emitter_write_bom(emitter))                return 0;        }        emitter->state = YAML_EMIT_FIRST_DOCUMENT_START_STATE;        return 1;    }    return yaml_emitter_set_emitter_error(emitter,            "expected STREAM-START");}
if (event->type == YAML_STREAM_START_EVENT)    {        if (!emitter->encoding) {            emitter->encoding = event->data.stream_start.encoding;        }        if (!emitter->encoding) {            emitter->encoding = YAML_UTF8_ENCODING;        }        if (emitter->best_indent < 2 || emitter->best_indent > 9) {            emitter->best_indent  = 2;        }        if (emitter->best_width >= 0                && emitter->best_width <= emitter->best_indent*2) {            emitter->best_width = 80;        }        if (emitter->best_width < 0) {            emitter->best_width = INT_MAX;        }                if (!emitter->line_break) {            emitter->line_break = YAML_LN_BREAK;        }        emitter->indent = -1;        emitter->line = 0;        emitter->column = 0;        emitter->whitespace = 1;        emitter->indention = 1;        if (emitter->encoding != YAML_UTF8_ENCODING) {            if (!yaml_emitter_write_bom(emitter))                return 0;        }        emitter->state = YAML_EMIT_FIRST_DOCUMENT_START_STATE;        return 1;    }
event->type == YAML_STREAM_START_EVENT
event->type
event
event
type
YAML_STREAM_START_EVENT
YAML_STREAM_START_EVENT
{        if (!emitter->encoding) {            emitter->encoding = event->data.stream_start.encoding;        }        if (!emitter->encoding) {            emitter->encoding = YAML_UTF8_ENCODING;        }        if (emitter->best_indent < 2 || emitter->best_indent > 9) {            emitter->best_indent  = 2;        }        if (emitter->best_width >= 0                && emitter->best_width <= emitter->best_indent*2) {            emitter->best_width = 80;        }        if (emitter->best_width < 0) {            emitter->best_width = INT_MAX;        }                if (!emitter->line_break) {            emitter->line_break = YAML_LN_BREAK;        }        emitter->indent = -1;        emitter->line = 0;        emitter->column = 0;        emitter->whitespace = 1;        emitter->indention = 1;        if (emitter->encoding != YAML_UTF8_ENCODING) {            if (!yaml_emitter_write_bom(emitter))                return 0;        }        emitter->state = YAML_EMIT_FIRST_DOCUMENT_START_STATE;        return 1;    }
if (!emitter->encoding) {            emitter->encoding = event->data.stream_start.encoding;        }
!emitter->encoding
emitter->encoding
emitter
emitter
encoding
{            emitter->encoding = event->data.stream_start.encoding;        }
emitter->encoding = event->data.stream_start.encoding;
emitter->encoding = event->data.stream_start.encoding
emitter->encoding
emitter
emitter
encoding
event->data.stream_start.encoding
event->data.stream_start
event->data
event
event
data
stream_start
encoding
if (!emitter->encoding) {            emitter->encoding = YAML_UTF8_ENCODING;        }
!emitter->encoding
emitter->encoding
emitter
emitter
encoding
{            emitter->encoding = YAML_UTF8_ENCODING;        }
emitter->encoding = YAML_UTF8_ENCODING;
emitter->encoding = YAML_UTF8_ENCODING
emitter->encoding
emitter
emitter
encoding
YAML_UTF8_ENCODING
YAML_UTF8_ENCODING
if (emitter->best_indent < 2 || emitter->best_indent > 9) {            emitter->best_indent  = 2;        }
emitter->best_indent < 2 || emitter->best_indent > 9
emitter->best_indent < 2
emitter->best_indent
emitter
emitter
best_indent
2
emitter->best_indent > 9
emitter->best_indent
emitter
emitter
best_indent
9
{            emitter->best_indent  = 2;        }
emitter->best_indent  = 2;
emitter->best_indent  = 2
emitter->best_indent
emitter
emitter
best_indent
2
if (emitter->best_width >= 0                && emitter->best_width <= emitter->best_indent*2) {            emitter->best_width = 80;        }
emitter->best_width >= 0                && emitter->best_width <= emitter->best_indent*2
emitter->best_width >= 0
emitter->best_width
emitter
emitter
best_width
0
emitter->best_width <= emitter->best_indent*2
emitter->best_width
emitter
emitter
best_width
emitter->best_indent*2
emitter->best_indent
emitter
emitter
best_indent
2
{            emitter->best_width = 80;        }
emitter->best_width = 80;
emitter->best_width = 80
emitter->best_width
emitter
emitter
best_width
80
if (emitter->best_width < 0) {            emitter->best_width = INT_MAX;        }
emitter->best_width < 0
emitter->best_width
emitter
emitter
best_width
0
{            emitter->best_width = INT_MAX;        }
emitter->best_width = INT_MAX;
emitter->best_width = INT_MAX
emitter->best_width
emitter
emitter
best_width
INT_MAX
INT_MAX
if (!emitter->line_break) {            emitter->line_break = YAML_LN_BREAK;        }
!emitter->line_break
emitter->line_break
emitter
emitter
line_break
{            emitter->line_break = YAML_LN_BREAK;        }
emitter->line_break = YAML_LN_BREAK;
emitter->line_break = YAML_LN_BREAK
emitter->line_break
emitter
emitter
line_break
YAML_LN_BREAK
YAML_LN_BREAK
emitter->indent = -1;
emitter->indent = -1
emitter->indent
emitter
emitter
indent
-1
1
emitter->line = 0;
emitter->line = 0
emitter->line
emitter
emitter
line
0
emitter->column = 0;
emitter->column = 0
emitter->column
emitter
emitter
column
0
emitter->whitespace = 1;
emitter->whitespace = 1
emitter->whitespace
emitter
emitter
whitespace
1
emitter->indention = 1;
emitter->indention = 1
emitter->indention
emitter
emitter
indention
1
if (emitter->encoding != YAML_UTF8_ENCODING) {            if (!yaml_emitter_write_bom(emitter))                return 0;        }
emitter->encoding != YAML_UTF8_ENCODING
emitter->encoding
emitter
emitter
encoding
YAML_UTF8_ENCODING
YAML_UTF8_ENCODING
{            if (!yaml_emitter_write_bom(emitter))                return 0;        }
if (!yaml_emitter_write_bom(emitter))                return 0;
!yaml_emitter_write_bom(emitter)
yaml_emitter_write_bom(emitter)
yaml_emitter_write_bom
yaml_emitter_write_bom
emitter
emitter
return 0;
0
emitter->state = YAML_EMIT_FIRST_DOCUMENT_START_STATE;
emitter->state = YAML_EMIT_FIRST_DOCUMENT_START_STATE
emitter->state
emitter
emitter
state
YAML_EMIT_FIRST_DOCUMENT_START_STATE
YAML_EMIT_FIRST_DOCUMENT_START_STATE
return 1;
1
return yaml_emitter_set_emitter_error(emitter,            "expected STREAM-START");
yaml_emitter_set_emitter_error(emitter,            "expected STREAM-START")
yaml_emitter_set_emitter_error
yaml_emitter_set_emitter_error
emitter
emitter
"expected STREAM-START"
-----joern-----
(308,48,0)
(362,270,0)
(380,349,0)
(267,248,0)
(176,261,0)
(334,388,0)
(119,227,0)
(314,275,0)
(71,239,0)
(131,270,0)
(227,357,0)
(61,48,0)
(204,105,0)
(338,270,0)
(342,293,0)
(279,212,0)
(376,246,0)
(96,93,0)
(111,79,0)
(390,6,0)
(93,379,0)
(266,281,0)
(390,373,0)
(184,313,0)
(330,302,0)
(278,179,0)
(311,362,0)
(8,239,0)
(390,292,0)
(360,255,0)
(14,394,0)
(252,270,0)
(23,270,0)
(261,69,0)
(84,257,0)
(289,270,0)
(390,86,0)
(46,69,0)
(140,139,0)
(155,241,0)
(369,241,0)
(225,353,0)
(51,368,0)
(64,248,0)
(307,235,0)
(102,114,0)
(158,349,0)
(388,77,0)
(94,325,0)
(138,55,0)
(42,248,0)
(323,248,0)
(222,87,0)
(246,376,0)
(154,351,0)
(78,129,0)
(319,80,0)
(345,235,0)
(175,154,0)
(170,131,0)
(371,221,0)
(214,66,0)
(285,338,0)
(378,312,0)
(382,271,0)
(306,235,0)
(390,141,0)
(194,12,0)
(76,15,0)
(361,323,0)
(205,218,0)
(247,330,0)
(330,218,0)
(63,59,0)
(183,373,0)
(199,298,0)
(390,391,0)
(341,197,0)
(47,351,0)
(45,270,0)
(193,80,0)
(142,273,0)
(178,66,0)
(87,12,0)
(294,248,0)
(356,288,0)
(218,2,0)
(31,270,0)
(58,251,0)
(235,7,0)
(230,67,0)
(253,160,0)
(2,351,0)
(95,266,0)
(240,31,0)
(354,341,0)
(38,81,0)
(90,48,0)
(266,354,0)
(264,138,0)
(259,162,0)
(91,227,0)
(104,255,0)
(12,248,0)
(318,255,0)
(34,327,0)
(335,312,0)
(126,66,0)
(182,255,0)
(340,80,0)
(195,23,0)
(307,233,0)
(393,92,0)
(312,270,0)
(23,5,0)
(1,144,0)
(220,332,0)
(100,332,0)
(149,29,0)
(150,17,0)
(48,277,0)
(343,300,0)
(277,48,0)
(313,312,0)
(211,242,0)
(394,248,0)
(390,177,0)
(290,310,0)
(29,248,0)
(129,55,0)
(92,77,0)
(349,380,0)
(123,199,0)
(338,152,0)
(92,393,0)
(152,114,0)
(357,227,0)
(368,186,0)
(313,184,0)
(337,325,0)
(82,270,0)
(394,14,0)
(352,37,0)
(325,144,0)
(359,327,0)
(69,239,0)
(320,327,0)
(232,304,0)
(196,98,0)
(89,180,0)
(217,270,0)
(50,106,0)
(317,217,0)
(136,138,0)
(149,154,0)
(228,255,0)
(4,255,0)
(87,222,0)
(10,346,0)
(291,40,0)
(67,230,0)
(176,248,0)
(80,389,0)
(388,309,0)
(377,26,0)
(188,80,0)
(282,138,0)
(126,26,0)
(304,64,0)
(326,302,0)
(44,101,0)
(302,271,0)
(300,304,0)
(212,55,0)
(367,177,0)
(241,55,0)
(18,362,0)
(120,294,0)
(125,162,0)
(226,255,0)
(301,59,0)
(349,383,0)
(209,48,0)
(312,313,0)
(118,29,0)
(383,372,0)
(30,2,0)
(59,228,0)
(177,98,0)
(31,240,0)
(376,270,0)
(219,359,0)
(390,347,0)
(156,136,0)
(315,293,0)
(166,87,0)
(224,12,0)
(113,136,0)
(250,255,0)
(275,314,0)
(302,330,0)
(272,219,0)
(269,151,0)
(202,292,0)
(385,29,0)
(192,267,0)
(180,270,0)
(375,380,0)
(229,176,0)
(268,86,0)
(27,289,0)
(293,270,0)
(390,9,0)
(379,248,0)
(333,0,0)
(296,82,0)
(362,109,0)
(114,206,0)
(354,266,0)
(85,267,0)
(40,270,0)
(281,266,0)
(341,354,0)
(300,197,0)
(309,55,0)
(324,362,0)
(159,21,0)
(322,353,0)
(350,186,0)
(72,225,0)
(142,293,0)
(79,270,0)
(327,359,0)
(101,332,0)
(54,394,0)
(327,34,0)
(49,63,0)
(33,199,0)
(56,184,0)
(281,21,0)
(69,261,0)
(199,270,0)
(286,248,0)
(221,376,0)
(74,227,0)
(307,225,0)
(184,361,0)
(216,273,0)
(73,179,0)
(312,378,0)
(197,300,0)
(109,362,0)
(115,255,0)
(106,50,0)
(191,179,0)
(215,192,0)
(122,283,0)
(372,55,0)
(146,379,0)
(372,383,0)
(0,270,0)
(16,169,0)
(390,283,0)
(304,300,0)
(390,151,0)
(331,9,0)
(384,213,0)
(217,317,0)
(83,176,0)
(242,26,0)
(239,8,0)
(351,2,0)
(177,17,0)
(286,219,0)
(186,368,0)
(88,59,0)
(197,341,0)
(346,98,0)
(97,40,0)
(249,101,0)
(237,17,0)
(5,23,0)
(77,92,0)
(25,23,0)
(133,216,0)
(66,270,0)
(358,281,0)
(389,80,0)
(297,0,0)
(134,147,0)
(103,314,0)
(163,149,0)
(390,127,0)
(65,55,0)
(35,23,0)
(325,248,0)
(227,270,0)
(128,255,0)
(114,152,0)
(77,388,0)
(167,160,0)
(66,20,0)
(185,386,0)
(55,372,0)
(131,316,0)
(344,213,0)
(339,230,0)
(112,228,0)
(223,141,0)
(168,79,0)
(381,255,0)
(355,45,0)
(210,182,0)
(336,323,0)
(165,64,0)
(310,2,0)
(390,139,0)
(13,80,0)
(43,126,0)
(26,182,0)
(15,8,0)
(200,294,0)
(21,281,0)
(316,131,0)
(265,179,0)
(323,361,0)
(80,270,0)
(171,376,0)
(390,207,0)
(365,42,0)
(29,149,0)
(48,270,0)
(22,180,0)
(256,233,0)
(57,212,0)
(62,309,0)
(63,255,0)
(135,82,0)
(287,388,0)
(3,275,0)
(390,153,0)
(208,289,0)
(181,372,0)
(238,222,0)
(144,325,0)
(52,42,0)
(160,248,0)
(162,26,0)
(267,192,0)
(117,137,0)
(36,230,0)
(40,310,0)
(93,216,0)
(233,222,0)
(199,156,0)
(148,284,0)
(34,55,0)
(379,93,0)
(70,217,0)
(273,142,0)
(32,227,0)
(143,251,0)
(144,169,0)
(390,201,0)
(299,34,0)
(390,288,0)
(136,156,0)
(307,101,0)
(293,142,0)
(388,270,0)
(244,380,0)
(380,248,0)
(239,69,0)
(392,332,0)
(154,149,0)
(15,275,0)
(198,255,0)
(298,199,0)
(169,144,0)
(136,113,0)
(295,286,0)
(42,271,0)
(364,307,0)
(8,15,0)
(164,23,0)
(160,368,0)
(107,362,0)
(366,321,0)
(108,255,0)
(374,26,0)
(390,105,0)
(231,6,0)
(218,330,0)
(110,230,0)
(376,221,0)
(241,199,0)
(19,53,0)
(82,135,0)
(189,197,0)
(219,286,0)
(124,261,0)
(68,309,0)
(106,270,0)
(388,334,0)
(329,207,0)
(40,97,0)
(273,216,0)
(121,252,0)
(174,323,0)
(116,45,0)
(294,314,0)
(263,225,0)
(370,19,0)
(222,233,0)
(145,321,0)
(59,270,0)
(152,338,0)
(351,154,0)
(199,241,0)
(173,267,0)
(79,168,0)
(230,270,0)
(305,230,0)
(310,40,0)
(24,338,0)
(258,379,0)
(254,21,0)
(243,383,0)
(359,219,0)
(203,19,0)
(275,15,0)
(66,126,0)
(276,64,0)
(17,270,0)
(390,37,0)
(172,361,0)
(234,391,0)
(138,136,0)
(221,2,0)
(64,304,0)
(309,388,0)
(45,153,0)
(130,362,0)
(39,286,0)
(271,42,0)
(153,386,0)
(390,81,0)
(245,127,0)
(348,137,0)
(187,394,0)
(383,349,0)
(11,230,0)
(99,48,0)
(60,201,0)
(274,98,0)
(12,87,0)
(368,160,0)
(280,31,0)
(273,341,0)
(289,208,0)
(216,93,0)
(161,2,0)
(328,376,0)
(262,157,0)
(261,176,0)
(314,294,0)
(303,359,0)
(75,251,0)
(17,346,0)
(260,347,0)
(132,23,0)
(41,14,0)
(271,302,0)
(387,354,0)
(390,63,0)
(92,212,0)
(390,284,0)
(307,19,0)
(28,106,0)
(156,199,0)
(361,184,0)
(341,273,0)
(233,255,0)
(236,227,0)
(363,255,0)
(190,161,0)
(20,66,0)
(21,248,0)
(212,92,0)
(205,161,1)
(121,8,1)
(317,217,1)
(310,290,1)
(357,227,1)
(268,67,1)
(31,270,1)
(41,394,1)
(326,271,1)
(146,152,1)
(170,277,1)
(388,270,1)
(252,270,1)
(241,55,1)
(11,305,1)
(68,62,1)
(136,113,1)
(129,55,1)
(390,288,1)
(320,359,1)
(80,270,1)
(272,286,1)
(46,261,1)
(338,270,1)
(230,270,1)
(300,343,1)
(106,28,1)
(189,300,1)
(126,26,1)
(10,17,1)
(72,8,1)
(289,270,1)
(177,367,1)
(391,234,1)
(294,248,1)
(125,242,1)
(126,43,1)
(70,357,1)
(231,316,1)
(154,149,1)
(17,270,1)
(305,36,1)
(351,154,1)
(56,361,1)
(284,148,1)
(138,282,1)
(192,215,1)
(131,170,1)
(306,345,1)
(176,229,1)
(390,63,1)
(177,17,1)
(303,219,1)
(218,330,1)
(207,329,1)
(151,269,1)
(390,201,1)
(282,264,1)
(182,210,1)
(82,270,1)
(227,270,1)
(271,382,1)
(330,247,1)
(91,236,1)
(266,281,1)
(162,26,1)
(93,96,1)
(390,207,1)
(374,218,1)
(204,357,1)
(30,169,1)
(183,135,1)
(280,0,1)
(9,331,1)
(352,240,1)
(236,74,1)
(337,94,1)
(212,279,1)
(379,258,1)
(264,241,1)
(242,26,1)
(372,383,1)
(149,29,1)
(277,48,1)
(261,124,1)
(377,374,1)
(174,336,1)
(281,358,1)
(77,92,1)
(29,248,1)
(40,310,1)
(390,86,1)
(390,37,1)
(365,205,1)
(51,160,1)
(376,270,1)
(119,91,1)
(390,141,1)
(26,377,1)
(347,260,1)
(152,338,1)
(138,55,1)
(64,248,1)
(355,14,1)
(254,197,1)
(200,50,1)
(114,102,1)
(205,2,1)
(312,313,1)
(230,11,1)
(79,111,1)
(358,21,1)
(240,31,1)
(287,5,1)
(286,248,1)
(300,304,1)
(142,293,1)
(186,350,1)
(102,233,1)
(43,178,1)
(96,379,1)
(283,122,1)
(23,270,1)
(350,368,1)
(140,277,1)
(50,106,1)
(376,221,1)
(200,186,1)
(34,327,1)
(66,126,1)
(325,337,1)
(388,77,1)
(20,66,1)
(275,314,1)
(299,55,1)
(367,346,1)
(15,275,1)
(107,135,1)
(92,212,1)
(85,173,1)
(55,372,1)
(210,192,1)
(390,347,1)
(67,230,1)
(311,130,1)
(90,61,1)
(21,248,1)
(215,267,1)
(232,64,1)
(369,155,1)
(116,355,1)
(150,237,1)
(233,222,1)
(354,266,1)
(63,49,1)
(356,97,1)
(390,6,1)
(48,270,1)
(66,214,1)
(373,183,1)
(76,275,1)
(65,225,1)
(334,388,1)
(371,171,1)
(121,34,1)
(60,389,1)
(49,228,1)
(47,154,1)
(243,349,1)
(390,284,1)
(165,276,1)
(114,206,1)
(327,359,1)
(146,235,1)
(286,295,1)
(109,362,1)
(288,356,1)
(219,272,1)
(106,270,1)
(315,273,1)
(125,26,1)
(307,19,1)
(289,27,1)
(195,164,1)
(69,261,1)
(57,309,1)
(18,311,1)
(331,378,1)
(253,167,1)
(304,64,1)
(105,204,1)
(342,315,1)
(188,193,1)
(345,152,1)
(313,184,1)
(296,307,1)
(390,292,1)
(222,87,1)
(390,391,1)
(27,180,1)
(327,320,1)
(276,216,1)
(39,299,1)
(359,219,1)
(293,270,1)
(45,270,1)
(29,118,1)
(161,2,1)
(141,223,1)
(390,139,1)
(304,232,1)
(223,50,1)
(312,270,1)
(361,323,1)
(218,2,1)
(375,65,1)
(26,182,1)
(339,389,1)
(25,195,1)
(94,182,1)
(14,41,1)
(64,165,1)
(249,186,1)
(88,240,1)
(293,342,1)
(79,270,1)
(390,373,1)
(378,312,1)
(23,35,1)
(390,81,1)
(208,289,1)
(237,208,1)
(364,252,1)
(310,2,1)
(239,71,1)
(86,268,1)
(8,239,1)
(74,142,1)
(209,180,1)
(309,68,1)
(144,1,1)
(124,176,1)
(291,218,1)
(153,45,1)
(78,168,1)
(389,80,1)
(390,153,1)
(186,368,1)
(221,2,1)
(190,246,1)
(217,70,1)
(192,267,1)
(82,296,1)
(103,294,1)
(224,256,1)
(131,270,1)
(390,151,1)
(225,263,1)
(394,248,1)
(132,25,1)
(307,235,1)
(71,69,1)
(383,349,1)
(199,270,1)
(184,56,1)
(252,121,1)
(267,248,1)
(34,55,1)
(216,93,1)
(62,287,1)
(368,160,1)
(87,12,1)
(127,245,1)
(194,224,1)
(139,140,1)
(1,325,1)
(152,114,1)
(390,127,1)
(383,243,1)
(382,42,1)
(330,302,1)
(385,30,1)
(163,29,1)
(309,55,1)
(162,259,1)
(323,248,1)
(5,23,1)
(31,280,1)
(167,317,1)
(158,380,1)
(219,286,1)
(144,325,1)
(364,19,1)
(261,176,1)
(307,101,1)
(159,254,1)
(307,233,1)
(181,383,1)
(32,119,1)
(361,172,1)
(123,334,1)
(298,199,1)
(88,307,1)
(324,107,1)
(333,109,1)
(340,101,1)
(314,294,1)
(211,20,1)
(130,324,1)
(59,301,1)
(166,12,1)
(242,211,1)
(290,291,1)
(199,33,1)
(394,187,1)
(362,270,1)
(149,163,1)
(21,159,1)
(33,156,1)
(160,248,1)
(38,334,1)
(302,326,1)
(246,376,1)
(349,380,1)
(3,314,1)
(12,248,1)
(260,168,1)
(59,270,1)
(160,253,1)
(199,156,1)
(168,79,1)
(316,131,1)
(54,192,1)
(380,244,1)
(172,323,1)
(199,241,1)
(256,162,1)
(180,270,1)
(88,0,1)
(161,190,1)
(167,142,1)
(263,72,1)
(307,225,1)
(328,221,1)
(354,387,1)
(120,200,1)
(16,144,1)
(184,361,1)
(203,370,1)
(336,335,1)
(2,351,1)
(281,21,1)
(202,298,1)
(122,317,1)
(136,138,1)
(80,188,1)
(269,5,1)
(197,300,1)
(343,304,1)
(44,249,1)
(335,169,1)
(329,20,1)
(295,39,1)
(222,238,1)
(42,52,1)
(267,85,1)
(390,177,1)
(24,285,1)
(35,132,1)
(217,270,1)
(154,175,1)
(155,123,1)
(171,97,1)
(297,333,1)
(279,57,1)
(69,46,1)
(292,202,1)
(338,24,1)
(214,126,1)
(178,162,1)
(142,273,1)
(110,339,1)
(390,283,1)
(15,76,1)
(376,328,1)
(370,252,1)
(17,150,1)
(271,42,1)
(118,385,1)
(101,44,1)
(221,371,1)
(83,15,1)
(187,54,1)
(52,365,1)
(341,197,1)
(8,15,1)
(193,319,1)
(169,144,1)
(6,231,1)
(27,316,1)
(0,270,1)
(133,93,1)
(13,340,1)
(346,10,1)
(259,125,1)
(323,174,1)
(180,89,1)
(372,181,1)
(244,375,1)
(247,302,1)
(228,112,1)
(239,69,1)
(45,116,1)
(112,59,1)
(307,364,1)
(66,270,1)
(387,266,1)
(89,22,1)
(390,9,1)
(285,114,1)
(30,378,1)
(175,149,1)
(241,369,1)
(349,158,1)
(129,78,1)
(294,120,1)
(176,248,1)
(148,246,1)
(93,379,1)
(314,103,1)
(351,47,1)
(245,109,1)
(111,298,1)
(212,55,1)
(227,32,1)
(40,270,1)
(22,14,1)
(156,136,1)
(368,51,1)
(362,18,1)
(302,271,1)
(42,248,1)
(273,341,1)
(95,281,1)
(135,82,1)
(229,83,1)
(63,59,1)
(61,99,1)
(238,87,1)
(92,393,1)
(87,166,1)
(36,110,1)
(359,303,1)
(325,248,1)
(201,60,1)
(388,309,1)
(48,308,1)
(81,38,1)
(14,394,1)
(299,129,1)
(301,88,1)
(341,354,1)
(234,208,1)
(169,16,1)
(390,105,1)
(380,248,1)
(37,352,1)
(308,90,1)
(197,189,1)
(235,306,1)
(0,297,1)
(97,40,1)
(379,248,1)
(19,203,1)
(319,13,1)
(99,209,1)
(258,146,1)
(273,216,1)
(28,67,1)
(266,95,1)
(275,3,1)
(216,133,1)
(164,34,1)
(12,194,1)
(90,180,2)
(275,186,2)
(76,186,2)
(81,334,2)
(303,168,2)
(200,50,2)
(376,97,2)
(275,314,2)
(141,50,2)
(51,317,2)
(212,5,2)
(367,208,2)
(273,341,2)
(176,186,2)
(357,142,2)
(87,162,2)
(330,302,2)
(302,271,2)
(160,248,2)
(156,136,2)
(218,246,2)
(44,186,2)
(217,357,2)
(66,270,2)
(88,0,2)
(219,8,2)
(253,317,2)
(390,139,2)
(45,14,2)
(22,14,2)
(169,144,2)
(208,180,2)
(324,135,2)
(373,135,2)
(263,8,2)
(276,216,2)
(221,2,2)
(49,240,2)
(62,5,2)
(56,169,2)
(241,55,2)
(154,378,2)
(178,162,2)
(254,216,2)
(331,378,2)
(208,289,2)
(8,50,2)
(164,34,2)
(297,109,2)
(109,362,2)
(388,309,2)
(180,14,2)
(330,169,2)
(116,14,2)
(172,169,2)
(14,192,2)
(298,334,2)
(222,162,2)
(82,270,2)
(327,8,2)
(12,248,2)
(390,177,2)
(346,208,2)
(49,0,2)
(52,378,2)
(365,378,2)
(89,14,2)
(40,270,2)
(368,317,2)
(13,186,2)
(351,378,2)
(176,50,2)
(101,186,2)
(316,277,2)
(341,216,2)
(162,218,2)
(94,192,2)
(228,240,2)
(106,67,2)
(118,169,2)
(358,216,2)
(162,26,2)
(127,109,2)
(259,218,2)
(8,186,2)
(148,246,2)
(390,207,2)
(390,292,2)
(69,186,2)
(268,67,2)
(379,248,2)
(387,216,2)
(21,248,2)
(32,142,2)
(341,354,2)
(285,114,2)
(149,378,2)
(106,270,2)
(112,0,2)
(350,317,2)
(83,50,2)
(197,300,2)
(97,218,2)
(144,192,2)
(216,162,2)
(82,307,2)
(77,92,2)
(307,8,2)
(266,216,2)
(74,142,2)
(242,26,2)
(310,2,2)
(55,8,2)
(334,5,2)
(289,270,2)
(138,334,2)
(12,162,2)
(109,135,2)
(292,298,2)
(218,378,2)
(237,208,2)
(19,252,2)
(167,317,2)
(114,162,2)
(205,246,2)
(349,8,2)
(26,218,2)
(34,327,2)
(149,29,2)
(20,66,2)
(329,20,2)
(328,97,2)
(306,152,2)
(175,169,2)
(105,357,2)
(364,8,2)
(163,169,2)
(1,192,2)
(149,169,2)
(261,50,2)
(67,230,2)
(391,208,2)
(83,186,2)
(92,5,2)
(132,34,2)
(277,180,2)
(197,216,2)
(69,50,2)
(29,169,2)
(68,5,2)
(238,162,2)
(52,169,2)
(39,8,2)
(78,168,2)
(211,20,2)
(103,186,2)
(333,109,2)
(159,216,2)
(245,109,2)
(15,50,2)
(192,267,2)
(59,270,2)
(30,169,2)
(17,208,2)
(207,20,2)
(383,8,2)
(320,8,2)
(204,357,2)
(199,334,2)
(66,162,2)
(352,240,2)
(18,135,2)
(390,141,2)
(111,298,2)
(349,380,2)
(312,270,2)
(20,162,2)
(388,5,2)
(253,142,2)
(103,50,2)
(293,273,2)
(314,294,2)
(316,131,2)
(232,216,2)
(155,334,2)
(41,192,2)
(210,192,2)
(66,126,2)
(14,394,2)
(390,6,2)
(231,316,2)
(313,184,2)
(123,334,2)
(218,2,2)
(388,77,2)
(10,208,2)
(307,233,2)
(340,186,2)
(59,240,2)
(394,192,2)
(390,201,2)
(230,270,2)
(286,248,2)
(0,270,2)
(138,55,2)
(365,169,2)
(110,389,2)
(130,135,2)
(252,270,2)
(177,208,2)
(52,246,2)
(47,169,2)
(47,378,2)
(97,40,2)
(114,206,2)
(119,142,2)
(312,313,2)
(233,222,2)
(247,169,2)
(31,0,2)
(354,266,2)
(327,359,2)
(380,248,2)
(208,316,2)
(377,218,2)
(59,307,2)
(34,8,2)
(37,240,2)
(311,135,2)
(338,114,2)
(308,180,2)
(42,378,2)
(91,142,2)
(8,15,2)
(288,97,2)
(59,0,2)
(355,14,2)
(151,5,2)
(40,218,2)
(46,186,2)
(259,20,2)
(46,50,2)
(284,246,2)
(229,186,2)
(96,162,2)
(166,162,2)
(312,169,2)
(394,248,2)
(167,142,2)
(267,248,2)
(170,277,2)
(49,307,2)
(201,389,2)
(136,334,2)
(205,378,2)
(140,277,2)
(171,97,2)
(330,246,2)
(218,169,2)
(6,316,2)
(79,270,2)
(86,67,2)
(315,273,2)
(224,162,2)
(290,218,2)
(186,142,2)
(351,154,2)
(370,252,2)
(338,270,2)
(131,277,2)
(112,240,2)
(87,12,2)
(216,93,2)
(194,162,2)
(280,0,2)
(228,0,2)
(382,246,2)
(310,218,2)
(202,298,2)
(120,186,2)
(72,8,2)
(390,284,2)
(385,169,2)
(390,283,2)
(309,55,2)
(301,307,2)
(142,293,2)
(271,246,2)
(390,347,2)
(67,389,2)
(152,114,2)
(187,192,2)
(299,8,2)
(158,8,2)
(271,378,2)
(190,246,2)
(385,378,2)
(93,162,2)
(118,378,2)
(222,87,2)
(307,101,2)
(34,168,2)
(279,5,2)
(80,186,2)
(182,192,2)
(152,338,2)
(200,186,2)
(5,23,2)
(2,378,2)
(390,288,2)
(273,216,2)
(246,97,2)
(294,248,2)
(133,162,2)
(122,317,2)
(60,389,2)
(161,246,2)
(136,113,2)
(320,168,2)
(11,389,2)
(379,162,2)
(314,50,2)
(39,168,2)
(121,34,2)
(337,192,2)
(31,270,2)
(266,281,2)
(261,186,2)
(165,216,2)
(34,55,2)
(42,248,2)
(300,216,2)
(372,8,2)
(369,334,2)
(223,50,2)
(15,275,2)
(38,334,2)
(258,162,2)
(293,270,2)
(48,270,2)
(390,9,2)
(236,142,2)
(319,186,2)
(275,50,2)
(390,81,2)
(287,5,2)
(29,378,2)
(294,186,2)
(295,168,2)
(25,34,2)
(286,8,2)
(152,162,2)
(70,357,2)
(246,376,2)
(390,391,2)
(186,368,2)
(356,97,2)
(57,5,2)
(162,20,2)
(239,186,2)
(36,389,2)
(389,186,2)
(26,182,2)
(359,8,2)
(24,114,2)
(76,50,2)
(326,169,2)
(314,186,2)
(374,218,2)
(302,169,2)
(372,383,2)
(390,63,2)
(390,127,2)
(378,169,2)
(390,153,2)
(296,307,2)
(368,142,2)
(334,388,2)
(146,162,2)
(63,0,2)
(240,31,2)
(199,270,2)
(359,219,2)
(390,86,2)
(335,169,2)
(295,8,2)
(71,186,2)
(54,192,2)
(227,270,2)
(27,180,2)
(323,169,2)
(64,216,2)
(390,37,2)
(205,169,2)
(176,248,2)
(79,298,2)
(35,34,2)
(124,186,2)
(227,142,2)
(168,298,2)
(382,169,2)
(61,180,2)
(307,19,2)
(9,378,2)
(168,79,2)
(282,334,2)
(390,373,2)
(271,42,2)
(3,50,2)
(271,169,2)
(239,69,2)
(156,334,2)
(160,317,2)
(2,169,2)
(325,248,2)
(301,0,2)
(0,109,2)
(330,378,2)
(209,180,2)
(135,307,2)
(241,334,2)
(136,138,2)
(289,180,2)
(301,240,2)
(365,246,2)
(300,304,2)
(304,216,2)
(93,379,2)
(193,186,2)
(163,378,2)
(92,212,2)
(299,168,2)
(317,217,2)
(177,17,2)
(307,34,2)
(63,307,2)
(30,378,2)
(378,312,2)
(142,273,2)
(294,50,2)
(107,135,2)
(286,168,2)
(3,186,2)
(42,246,2)
(281,21,2)
(214,162,2)
(126,162,2)
(218,330,2)
(247,246,2)
(28,67,2)
(154,169,2)
(2,351,2)
(217,270,2)
(183,135,2)
(326,246,2)
(272,8,2)
(21,216,2)
(357,227,2)
(189,216,2)
(195,34,2)
(121,8,2)
(380,8,2)
(252,8,2)
(243,8,2)
(343,216,2)
(383,349,2)
(228,307,2)
(169,192,2)
(188,186,2)
(160,142,2)
(327,168,2)
(88,240,2)
(48,180,2)
(63,240,2)
(361,169,2)
(362,270,2)
(17,270,2)
(317,357,2)
(212,55,2)
(102,162,2)
(23,270,2)
(161,2,2)
(181,8,2)
(71,50,2)
(45,270,2)
(272,168,2)
(40,310,2)
(219,286,2)
(345,152,2)
(339,389,2)
(233,162,2)
(8,239,2)
(150,208,2)
(304,64,2)
(283,317,2)
(351,169,2)
(242,20,2)
(336,169,2)
(289,316,2)
(153,14,2)
(244,8,2)
(33,334,2)
(16,192,2)
(199,241,2)
(50,67,2)
(240,0,2)
(298,199,2)
(309,5,2)
(281,216,2)
(247,378,2)
(50,106,2)
(135,82,2)
(239,50,2)
(184,361,2)
(23,34,2)
(120,50,2)
(382,378,2)
(313,169,2)
(325,192,2)
(88,307,2)
(125,20,2)
(273,162,2)
(303,8,2)
(180,270,2)
(55,372,2)
(277,48,2)
(112,307,2)
(307,235,2)
(174,169,2)
(139,277,2)
(342,273,2)
(203,252,2)
(256,162,2)
(129,55,2)
(219,168,2)
(350,142,2)
(326,378,2)
(302,378,2)
(260,168,2)
(323,248,2)
(362,135,2)
(43,162,2)
(95,216,2)
(184,169,2)
(390,105,2)
(376,221,2)
(65,8,2)
(264,334,2)
(359,168,2)
(261,176,2)
(175,378,2)
(124,50,2)
(69,261,2)
(27,316,2)
(142,162,2)
(125,218,2)
(371,97,2)
(252,34,2)
(364,34,2)
(389,80,2)
(51,142,2)
(249,186,2)
(307,225,2)
(186,317,2)
(63,59,2)
(341,197,2)
(390,151,2)
(154,149,2)
(144,325,2)
(230,389,2)
(5,34,2)
(388,270,2)
(99,180,2)
(129,168,2)
(199,156,2)
(80,270,2)
(269,5,2)
(29,248,2)
(92,393,2)
(77,5,2)
(221,97,2)
(235,152,2)
(354,216,2)
(15,186,2)
(234,208,2)
(361,323,2)
(302,246,2)
(126,26,2)
(375,8,2)
(347,168,2)
(42,169,2)
(225,8,2)
(229,50,2)
(131,270,2)
(376,270,2)
(291,218,2)
(305,389,2)
(64,248,2)
(368,160,2)
-----------------------------------
(0,emitter->canonical)
(1,document_start)
(2,tag_directive = event->data.document_start.tag_directives.start)
(3,tag_directives)
(4,if (!implicit)
(5,!yaml_emitter_write_indicator(emitter, "%TAG", 1, 0, 0)
(6,return 0;)
(7,)
(8,event->data.document_start.tag_directives.start\\n                != event->data.document_start.tag_directives.end)
(9,return 0;)
(10,YAML_EMIT_END_STATE)
(11,0)
(12,event->data)
(13,"%YAML")
(14,event->type == YAML_STREAM_END_EVENT)
(15,event->data.document_start.tag_directives.start)
(16,version_directive)
(17,emitter->state)
(18,0)
(19,implicit = 0)
(20,!yaml_emitter_append_tag_directive(emitter, *tag_directive, 1)
(21,event->data)
(22,emitter)
(23,yaml_emitter_write_indicator(emitter, "%TAG", 1, 0, 0)
(24,canonical)
(25,1)
(26,tag_directive = default_tag_directives)
(27,emitter)
(28,emitter)
(29,event->data)
(30,tag_directive)
(31,yaml_emitter_write_indent(emitter)
(32,0)
(33,1)
(34,tag_directive != event->data.document_start.tag_directives.end)
(35,0)
(36,1)
(37,return 0;)
(38,0)
(39,event)
(40,yaml_emitter_analyze_tag_directive(emitter, *tag_directive)
(41,YAML_STREAM_END_EVENT)
(42,event->data)
(43,tag_directive)
(44,0)
(45,yaml_emitter_set_emitter_error(emitter,\\n            "expected DOCUMENT-START or STREAM-END")
(46,tag_directives)
(47,start)
(48,yaml_emitter_write_indicator(emitter, "...", 1, 0, 0)
(49,1)
(50,!yaml_emitter_write_indent(emitter)
(51,document_start)
(52,data)
(53,)
(54,event)
(55,tag_directive = event->data.document_start.tag_directives.start)
(56,version_directive)
(57,tag_directive)
(58,if (emitter->canonical)
(59,emitter->state)
(60,0)
(61,1)
(62,tag_directive)
(63,return 1;)
(64,event->data)
(65,tag_directive)
(66,yaml_emitter_append_tag_directive(emitter, *tag_directive, 1)
(67,!yaml_emitter_write_indicator(emitter, "1.1", 1, 0, 0)
(68,handle)
(69,event->data.document_start.tag_directives)
(70,emitter)
(71,end)
(72,implicit)
(73,if (!yaml_emitter_write_tag_content(emitter, tag_directive->prefix,\\n                            strlen((char *)
(74,emitter)
(75,if (!yaml_emitter_write_indent(emitter)
(76,start)
(77,strlen((char *)
(78,tag_directive)
(79,yaml_emitter_write_indent(emitter)
(80,yaml_emitter_write_indicator(emitter, "%YAML", 1, 0, 0)
(81,return 0;)
(82,yaml_emitter_write_indent(emitter)
(83,event)
(84,if (!yaml_emitter_write_indent(emitter)
(85,type)
(86,return 0;)
(87,event->data.document_start)
(88,emitter)
(89,open_ended)
(90,0)
(91,1)
(92,(char *)
(93,event->data.document_start)
(94,event)
(95,tag_directives)
(96,document_start)
(97,!yaml_emitter_analyze_tag_directive(emitter, *tag_directive)
(98,)
(99,"...")
(100,if (!yaml_emitter_write_indicator(emitter, "1.1", 1, 0, 0)
(101,implicit = 0)
(102,first)
(103,document_start)
(104,if (!first || emitter->canonical)
(105,return 0;)
(106,yaml_emitter_write_indent(emitter)
(107,emitter)
(108,for (tag_directive = default_tag_directives;\\n                tag_directive->handle; tag_directive ++)
(109,!yaml_emitter_write_indicator(emitter, "---", 1, 0, 0)
(110,"1.1")
(111,emitter)
(112,YAML_EMIT_DOCUMENT_CONTENT_STATE)
(113,char *)
(114,!first)
(115,if (event->data.document_start.version_directive)
(116,"expected DOCUMENT-START or STREAM-END")
(117,if (!yaml_emitter_write_indent(emitter)
(118,data)
(119,0)
(120,data)
(121,emitter)
(122,0)
(123,emitter)
(124,document_start)
(125,tag_directive)
(126,*tag_directive)
(127,return 0;)
(128,for (tag_directive = event->data.document_start.tag_directives.start;\\n                tag_directive != event->data.document_start.tag_directives.end;\\n                tag_directive ++)
(129,tag_directive ++)
(130,1)
(131,yaml_emitter_write_indent(emitter)
(132,0)
(133,version_directive)
(134,if (!yaml_emitter_analyze_version_directive(emitter,\\n                        *event->data.document_start.version_directive)
(135,!yaml_emitter_write_indent(emitter)
(136,(char *)
(137,)
(138,tag_directive->prefix)
(139,return 0;)
(140,0)
(141,return 0;)
(142,(event->data.document_start.version_directive ||\\n                    (event->data.document_start.tag_directives.start\\n                     != event->data.document_start.tag_directives.end)
(143,if (!yaml_emitter_write_indicator(emitter, "---", 1, 0, 0)
(144,event->data.document_start)
(145,if (!yaml_emitter_write_indicator(emitter, "...", 1, 0, 0)
(146,event)
(147,)
(148,0)
(149,event->data.document_start)
(150,state)
(151,return 0;)
(152,!first || emitter->canonical)
(153,return yaml_emitter_set_emitter_error(emitter,\\n            "expected DOCUMENT-START or STREAM-END")
(154,event->data.document_start.tag_directives)
(155,tag_directive)
(156,strlen((char *)
(157,)
(158,document_start)
(159,data)
(160,event->data)
(161,tag_directive ++)
(162,tag_directive->handle)
(163,document_start)
(164,emitter)
(165,data)
(166,document_start)
(167,event)
(168,!yaml_emitter_write_indent(emitter)
(169,event->data.document_start.version_directive)
(170,emitter)
(171,emitter)
(172,document_start)
(173,event)
(174,data)
(175,tag_directives)
(176,event->data)
(177,return 1;)
(178,emitter)
(179,)
(180,emitter->open_ended)
(181,start)
(182,default_tag_directives[] = {\\n            {(yaml_char_t *)
(183,0)
(184,event->data.document_start.version_directive)
(185,if (event->type == YAML_DOCUMENT_START_EVENT)
(186,event->data.document_start.version_directive)
(187,type)
(188,0)
(189,start)
(190,tag_directive)
(191,if (!yaml_emitter_write_indent(emitter)
(192,event->type == YAML_DOCUMENT_START_EVENT)
(193,0)
(194,data)
(195,"%TAG")
(196,if (!yaml_emitter_flush(emitter)
(197,event->data.document_start.tag_directives.start)
(198,implicit)
(199,yaml_emitter_write_tag_content(emitter, tag_directive->prefix,\\n                            strlen((char *)
(200,event)
(201,return 0;)
(202,0)
(203,0)
(204,0)
(205,tag_directive)
(206,int first)
(207,return 0;)
(208,!yaml_emitter_flush(emitter)
(209,emitter)
(210,default_tag_directives)
(211,tag_directive)
(212,tag_directive->handle)
(213,)
(214,1)
(215,YAML_DOCUMENT_START_EVENT)
(216,event->data.document_start.version_directive)
(217,yaml_emitter_write_indent(emitter)
(218,tag_directive != event->data.document_start.tag_directives.end)
(219,event->data.document_start)
(220,if (!yaml_emitter_write_indicator(emitter, "%YAML", 1, 0, 0)
(221,*tag_directive)
(222,event->data.document_start.implicit)
(223,0)
(224,event)
(225,implicit = 0)
(226,if ((event->data.document_start.version_directive ||\\n                    (event->data.document_start.tag_directives.start\\n                     != event->data.document_start.tag_directives.end)
(227,yaml_emitter_write_indicator(emitter, "...", 1, 0, 0)
(228,emitter->state = YAML_EMIT_DOCUMENT_CONTENT_STATE)
(229,data)
(230,yaml_emitter_write_indicator(emitter, "1.1", 1, 0, 0)
(231,0)
(232,document_start)
(233,implicit = event->data.document_start.implicit)
(234,0)
(235,implicit = 0)
(236,"...")
(237,emitter)
(238,implicit)
(239,event->data.document_start.tag_directives.end)
(240,!yaml_emitter_write_indent(emitter)
(241,tag_directive->prefix)
(242,tag_directive ++)
(243,tag_directives)
(244,data)
(245,0)
(246,!yaml_emitter_append_tag_directive(emitter, *tag_directive, 0)
(247,end)
(248,yaml_event_t *event)
(249,implicit)
(250,tag_directive)
(251,)
(252,yaml_emitter_check_empty_document(emitter)
(253,data)
(254,event)
(255,)
(256,implicit)
(257,)
(258,data)
(259,handle)
(260,0)
(261,event->data.document_start)
(262,if (!yaml_emitter_append_tag_directive(emitter, *tag_directive, 1)
(263,0)
(264,tag_directive)
(265,if (!yaml_emitter_write_indicator(emitter, "%TAG", 1, 0, 0)
(266,event->data.document_start.tag_directives)
(267,event->type)
(268,0)
(269,0)
(270,yaml_emitter_t *emitter)
(271,event->data.document_start)
(272,document_start)
(273,event->data.document_start.version_directive ||\\n                    (event->data.document_start.tag_directives.start\\n                     != event->data.document_start.tag_directives.end)
(274,if (emitter->open_ended)
(275,event->data.document_start.tag_directives)
(276,event)
(277,!yaml_emitter_write_indicator(emitter, "...", 1, 0, 0)
(278,if (!yaml_emitter_write_tag_handle(emitter, tag_directive->handle,\\n                            strlen((char *)
(279,handle)
(280,emitter)
(281,event->data.document_start)
(282,prefix)
(283,return 0;)
(284,return 0;)
(285,emitter)
(286,event->data)
(287,emitter)
(288,return 0;)
(289,yaml_emitter_flush(emitter)
(290,tag_directive)
(291,emitter)
(292,return 0;)
(293,emitter->open_ended)
(294,event->data)
(295,data)
(296,emitter)
(297,canonical)
(298,!yaml_emitter_write_tag_content(emitter, tag_directive->prefix,\\n                            strlen((char *)
(299,tag_directive)
(300,event->data.document_start.tag_directives)
(301,state)
(302,event->data.document_start.tag_directives)
(303,tag_directives)
(304,event->data.document_start)
(305,0)
(306,0)
(307,!implicit)
(308,0)
(309,tag_directive->handle)
(310,*tag_directive)
(311,0)
(312,yaml_emitter_analyze_version_directive(emitter,\\n                        *event->data.document_start.version_directive)
(313,*event->data.document_start.version_directive)
(314,event->data.document_start)
(315,emitter)
(316,!yaml_emitter_write_indent(emitter)
(317,!yaml_emitter_write_indent(emitter)
(318,default_tag_directives)
(319,1)
(320,end)
(321,)
(322,for (tag_directive = event->data.document_start.tag_directives.start;\\n                    tag_directive != event->data.document_start.tag_directives.end;\\n                    tag_directive ++)
(323,event->data)
(324,"---")
(325,event->data)
(326,tag_directives)
(327,event->data.document_start.tag_directives.end)
(328,0)
(329,0)
(330,event->data.document_start.tag_directives.end)
(331,0)
(332,)
(333,emitter)
(334,!yaml_emitter_write_tag_handle(emitter, tag_directive->handle,\\n                            strlen((char *)
(335,emitter)
(336,event)
(337,data)
(338,emitter->canonical)
(339,emitter)
(340,emitter)
(341,event->data.document_start.tag_directives.start\\n                     != event->data.document_start.tag_directives.end)
(342,open_ended)
(343,tag_directives)
(344,if (!yaml_emitter_append_tag_directive(emitter, *tag_directive, 0)
(345,implicit)
(346,emitter->state = YAML_EMIT_END_STATE)
(347,return 0;)
(348,if (!yaml_emitter_write_indicator(emitter, "...", 1, 0, 0)
(349,event->data.document_start)
(350,version_directive)
(351,event->data.document_start.tag_directives.start)
(352,0)
(353,)
(354,event->data.document_start.tag_directives.end)
(355,emitter)
(356,0)
(357,!yaml_emitter_write_indicator(emitter, "...", 1, 0, 0)
(358,document_start)
(359,event->data.document_start.tag_directives)
(360,if (event->data.document_start.version_directive)
(361,event->data.document_start)
(362,yaml_emitter_write_indicator(emitter, "---", 1, 0, 0)
(363,if (event->data.document_start.tag_directives.start\\n                != event->data.document_start.tag_directives.end)
(364,implicit)
(365,event)
(366,if (!yaml_emitter_write_indent(emitter)
(367,1)
(368,event->data.document_start)
(369,prefix)
(370,implicit)
(371,tag_directive)
(372,event->data.document_start.tag_directives.start)
(373,return 0;)
(374,tag_directive)
(375,event)
(376,yaml_emitter_append_tag_directive(emitter, *tag_directive, 0)
(377,default_tag_directives)
(378,!yaml_emitter_analyze_version_directive(emitter,\\n                        *event->data.document_start.version_directive)
(379,event->data)
(380,event->data)
(381,if (yaml_emitter_check_empty_document(emitter)
(382,document_start)
(383,event->data.document_start.tag_directives)
(384,if (!yaml_emitter_analyze_tag_directive(emitter, *tag_directive)
(385,event)
(386,)
(387,end)
(388,yaml_emitter_write_tag_handle(emitter, tag_directive->handle,\\n                            strlen((char *)
(389,!yaml_emitter_write_indicator(emitter, "%YAML", 1, 0, 0)
(390,RET)
(391,return 0;)
(392,if (!yaml_emitter_write_indent(emitter)
(393,char *)
(394,event->type)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
stdin-stat:0x000800000000000001000000ffffffff0100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff7f8d5a6400000000ffffffffffffffff3d8d5a6400000000ffffffffffffffff3d8d5a6400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
stdin:0xf1808080f1808080f1808080f1808080ef80805c
=========trace=========
static int yaml_emitter_emit_stream_start(yaml_emitter_t *emitter,         yaml_event_t *event) {
if(event->type == YAML_STREAM_START_EVENT)
if(!emitter->encoding)
emitter->encoding = event->data.stream_start.encoding;
if(!emitter->encoding)
emitter->encoding = YAML_UTF8_ENCODING;
if(emitter->best_indent < 2 || emitter->best_indent > 9)
emitter->best_indent  = 2;
if(emitter->best_width >= 0                 && emitter->best_width <= emitter->best_indent*2)
emitter->best_width = 80;
if(!emitter->line_break)
emitter->line_break = YAML_LN_BREAK;
emitter->indent = -1;
emitter->line = 0;
emitter->column = 0;
emitter->whitespace = 1;
emitter->indention = 1;
emitter->state = YAML_EMIT_FIRST_DOCUMENT_START_STATE;
return 1;
=======================
