-----label-----
0
-----code-----
int pnm_validate(jas_stream_t *in)
{
	jas_uchar buf[2];
	int i;
	int n;

	assert(JAS_STREAM_MAXPUTBACK >= 2);

	/* Read the first two characters that constitute the signature. */
	if ((n = jas_stream_read(in, buf, 2)) < 0) {
		return -1;
	}
	/* Put these characters back to the stream. */
	for (i = n - 1; i >= 0; --i) {
		if (jas_stream_ungetc(in, buf[i]) == EOF) {
			return -1;
		}
	}
	/* Did we read enough data? */
	if (n < 2) {
		return -1;
	}
	/* Is this the correct signature for a PNM file? */
	if (buf[0] == 'P' && isdigit(buf[1])) {
		return 0;
	}
	return -1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
23,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
44,47
44,48
45,46
47,48
49,50
53,54
54,55
55,56
57,58
57,59
57,60
57,61
58,59
59,60
59,61
60,61
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
76,79
77,78
79,80
81,82
81,83
82,83
84,85
86,87
88,89
89,90
90,91
92,93
92,94
93,94
93,95
94,95
97,98
98,99
99,100
101,102
101,103
102,103
102,104
103,104
103,105
104,105
104,106
105,106
109,110
109,111
110,111
112,113
112,114
113,114
116,117
117,118
119,120
120,121
-----nextToken-----
2,4,7,9,10,15,17,19,22,24,27,29,33,36,37,43,46,48,50,51,52,56,61,64,65,68,69,72,78,80,83,85,87,91,95,96,100,106,107,108,111,114,115,118,121
-----computeFrom-----
34,35
34,36
39,40
39,41
41,42
41,43
59,60
59,61
62,63
62,64
66,67
66,68
75,76
75,77
93,94
93,95
102,103
102,104
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
int pnm_validate(jas_stream_t *in){	jas_uchar buf[2];	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= 2);	/* Read the first two characters that constitute the signature. */	if ((n = jas_stream_read(in, buf, 2)) < 0) {		return -1;	}	/* Put these characters back to the stream. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < 2) {		return -1;	}	/* Is this the correct signature for a PNM file? */	if (buf[0] == 'P' && isdigit(buf[1])) {		return 0;	}	return -1;}
int
pnm_validate(jas_stream_t *in)
pnm_validate
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	jas_uchar buf[2];	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= 2);	/* Read the first two characters that constitute the signature. */	if ((n = jas_stream_read(in, buf, 2)) < 0) {		return -1;	}	/* Put these characters back to the stream. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < 2) {		return -1;	}	/* Is this the correct signature for a PNM file? */	if (buf[0] == 'P' && isdigit(buf[1])) {		return 0;	}	return -1;}
jas_uchar buf[2];
jas_uchar buf[2];
jas_uchar
jas_uchar
buf[2]
buf
[2]
2
int i;
int i;
int
i
i
int n;
int n;
int
n
n
assert(JAS_STREAM_MAXPUTBACK >= 2);
assert(JAS_STREAM_MAXPUTBACK >= 2)
assert
assert
JAS_STREAM_MAXPUTBACK >= 2
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
2
if ((n = jas_stream_read(in, buf, 2)) < 0) {		return -1;	}
(n = jas_stream_read(in, buf, 2)) < 0
(n = jas_stream_read(in, buf, 2))
n = jas_stream_read(in, buf, 2)
n
n
jas_stream_read(in, buf, 2)
jas_stream_read
jas_stream_read
in
in
buf
buf
2
0
{		return -1;	}
return -1;
-1
1
for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
i = n - 1;
i = n - 1
i
i
n - 1
n
n
1
i >= 0
i
i
0
--i
i
i
{		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}
jas_stream_ungetc(in, buf[i]) == EOF
jas_stream_ungetc(in, buf[i])
jas_stream_ungetc
jas_stream_ungetc
in
in
buf[i]
buf
buf
i
i
EOF
EOF
{			return -1;		}
return -1;
-1
1
if (n < 2) {		return -1;	}
n < 2
n
n
2
{		return -1;	}
return -1;
-1
1
if (buf[0] == 'P' && isdigit(buf[1])) {		return 0;	}
buf[0] == 'P' && isdigit(buf[1])
buf[0] == 'P'
buf[0]
buf
buf
0
'P'
isdigit(buf[1])
isdigit
isdigit
buf[1]
buf
buf
1
{		return 0;	}
return 0;
0
return -1;
-1
1
-----joern-----
(345,2,0)
(221,76,0)
(213,70,0)
(241,52,0)
(100,265,0)
(292,194,0)
(20,55,0)
(114,238,0)
(38,135,0)
(180,196,0)
(7,135,0)
(323,352,0)
(162,41,0)
(284,287,0)
(165,174,0)
(182,345,0)
(110,197,0)
(247,154,0)
(31,288,0)
(372,183,0)
(99,7,0)
(265,100,0)
(145,319,0)
(8,331,0)
(118,329,0)
(17,22,0)
(161,45,0)
(302,2,0)
(266,75,0)
(117,80,0)
(9,338,0)
(166,7,0)
(125,87,0)
(121,163,0)
(362,54,0)
(201,284,0)
(242,41,0)
(200,258,0)
(250,289,0)
(0,135,0)
(361,316,0)
(264,336,0)
(47,288,0)
(336,109,0)
(30,46,0)
(235,45,0)
(76,96,0)
(353,260,0)
(82,225,0)
(159,159,0)
(156,135,0)
(232,197,0)
(358,327,0)
(366,132,0)
(313,300,0)
(176,105,0)
(271,66,0)
(248,87,0)
(42,331,0)
(294,41,0)
(254,0,0)
(285,361,0)
(287,53,0)
(369,169,0)
(295,217,0)
(1,288,0)
(138,191,0)
(196,159,0)
(211,96,0)
(125,59,0)
(50,314,0)
(148,249,0)
(63,238,0)
(236,80,0)
(296,13,0)
(48,223,0)
(119,1,0)
(335,232,0)
(75,331,0)
(231,297,0)
(343,230,0)
(33,248,0)
(113,61,0)
(335,314,0)
(287,284,0)
(208,125,0)
(142,30,0)
(377,230,0)
(170,278,0)
(154,184,0)
(12,55,0)
(132,209,0)
(177,301,0)
(308,294,0)
(339,59,0)
(28,162,0)
(162,156,0)
(341,205,0)
(144,52,0)
(206,135,0)
(65,301,0)
(370,15,0)
(294,95,0)
(260,1,0)
(377,194,0)
(124,288,0)
(206,267,0)
(224,242,0)
(84,114,0)
(373,362,0)
(189,121,0)
(0,42,0)
(141,172,0)
(214,183,0)
(307,352,0)
(312,170,0)
(203,279,0)
(23,41,0)
(19,203,0)
(309,213,0)
(36,305,0)
(121,4,0)
(102,42,0)
(155,198,0)
(340,331,0)
(105,278,0)
(330,333,0)
(263,288,0)
(174,284,0)
(294,308,0)
(54,135,0)
(265,5,0)
(1,338,0)
(274,375,0)
(101,30,0)
(238,114,0)
(240,293,0)
(114,38,0)
(277,259,0)
(97,13,0)
(100,293,0)
(6,308,0)
(175,46,0)
(18,168,0)
(65,135,0)
(172,135,0)
(181,232,0)
(342,113,0)
(70,288,0)
(15,238,0)
(273,0,0)
(190,288,0)
(226,59,0)
(14,87,0)
(325,265,0)
(299,63,0)
(232,121,0)
(129,291,0)
(156,162,0)
(268,184,0)
(249,35,0)
(83,66,0)
(146,171,0)
(4,259,0)
(346,319,0)
(320,16,0)
(159,89,0)
(276,294,0)
(207,113,0)
(355,152,0)
(179,230,0)
(280,172,0)
(158,203,0)
(239,318,0)
(229,70,0)
(301,65,0)
(171,5,0)
(98,4,0)
(199,46,0)
(30,70,0)
(34,279,0)
(364,4,0)
(42,0,0)
(183,214,0)
(291,219,0)
(278,83,0)
(337,288,0)
(327,61,0)
(120,135,0)
(283,292,0)
(275,321,0)
(58,184,0)
(248,225,0)
(133,89,0)
(136,120,0)
(160,288,0)
(304,294,0)
(368,269,0)
(46,30,0)
(16,135,0)
(37,330,0)
(98,198,0)
(147,159,0)
(192,342,0)
(319,288,0)
(53,287,0)
(53,135,0)
(278,288,0)
(338,1,0)
(123,288,0)
(332,35,0)
(67,136,0)
(46,45,0)
(168,314,0)
(73,288,0)
(291,288,0)
(260,288,0)
(187,61,0)
(193,4,0)
(238,43,0)
(89,321,0)
(77,116,0)
(52,169,0)
(185,143,0)
(167,288,0)
(134,330,0)
(26,35,0)
(108,335,0)
(218,331,0)
(115,232,0)
(93,54,0)
(359,78,0)
(350,66,0)
(154,329,0)
(130,259,0)
(237,354,0)
(255,121,0)
(89,171,0)
(289,46,0)
(344,377,0)
(230,70,0)
(120,136,0)
(232,248,0)
(306,326,0)
(281,105,0)
(223,291,0)
(2,345,0)
(194,377,0)
(302,169,0)
(220,267,0)
(298,163,0)
(342,135,0)
(352,219,0)
(111,53,0)
(195,260,0)
(74,118,0)
(261,109,0)
(311,100,0)
(315,174,0)
(196,292,0)
(232,249,0)
(317,294,0)
(335,238,0)
(59,5,0)
(104,39,0)
(71,288,0)
(227,261,0)
(262,355,0)
(214,5,0)
(377,169,0)
(251,117,0)
(290,278,0)
(319,145,0)
(355,331,0)
(270,131,0)
(217,109,0)
(144,135,0)
(69,209,0)
(267,206,0)
(87,96,0)
(157,232,0)
(253,345,0)
(127,294,0)
(347,63,0)
(159,329,0)
(377,329,0)
(66,83,0)
(223,5,0)
(301,269,0)
(371,366,0)
(86,218,0)
(354,45,0)
(172,302,0)
(72,132,0)
(150,361,0)
(94,132,0)
(152,355,0)
(43,238,0)
(173,249,0)
(60,194,0)
(202,288,0)
(212,206,0)
(39,78,0)
(15,269,0)
(46,64,0)
(378,279,0)
(29,16,0)
(243,245,0)
(66,135,0)
(234,156,0)
(128,144,0)
(324,61,0)
(198,98,0)
(27,218,0)
(216,223,0)
(328,169,0)
(282,248,0)
(310,289,0)
(56,288,0)
(54,362,0)
(2,302,0)
(360,144,0)
(51,213,0)
(151,25,0)
(112,377,0)
(351,342,0)
(362,45,0)
(194,292,0)
(232,335,0)
(90,257,0)
(118,169,0)
(318,109,0)
(321,89,0)
(302,172,0)
(365,293,0)
(198,5,0)
(137,355,0)
(349,120,0)
(152,91,0)
(292,196,0)
(294,15,0)
(303,64,0)
(252,105,0)
(103,41,0)
(49,214,0)
(40,308,0)
(284,288,0)
(260,233,0)
(186,269,0)
(374,54,0)
(367,206,0)
(204,79,0)
(88,314,0)
(366,223,0)
(348,233,0)
(249,293,0)
(83,278,0)
(24,233,0)
(57,333,0)
(46,289,0)
(136,314,0)
(363,156,0)
(232,203,0)
(44,10,0)
(13,284,0)
(149,288,0)
(59,291,0)
(85,288,0)
(139,294,0)
(355,238,0)
(228,196,0)
(171,89,0)
(223,366,0)
(308,135,0)
(188,32,0)
(38,114,0)
(113,342,0)
(246,376,0)
(357,65,0)
(233,288,0)
(293,78,0)
(68,222,0)
(3,98,0)
(62,145,0)
(203,132,0)
(32,269,0)
(215,38,0)
(219,352,0)
(219,291,0)
(59,125,0)
(191,209,0)
(106,87,0)
(15,294,0)
(272,302,0)
(286,159,0)
(178,288,0)
(322,80,0)
(122,163,0)
(267,80,0)
(81,277,0)
(256,38,0)
(21,335,0)
(333,288,0)
(316,288,0)
(345,184,0)
(107,65,0)
(52,144,0)
(92,15,0)
(334,153,0)
(105,281,0)
(352,135,0)
(232,80,0)
(210,120,0)
(140,53,0)
(145,95,0)
(244,316,0)
(126,170,0)
(356,153,0)
(184,55,0)
(164,225,0)
(63,61,0)
(281,288,0)
(230,377,0)
(196,89,0)
(11,64,0)
(294,269,0)
(191,138,1)
(152,355,1)
(89,171,1)
(0,135,1)
(15,269,1)
(240,365,1)
(238,114,1)
(360,241,1)
(308,40,1)
(100,311,1)
(148,265,1)
(133,52,1)
(317,304,1)
(327,61,1)
(369,174,1)
(276,308,1)
(121,189,1)
(37,316,1)
(302,169,1)
(287,53,1)
(27,42,1)
(377,230,1)
(266,218,1)
(28,242,1)
(278,83,1)
(223,5,1)
(98,4,1)
(60,112,1)
(371,216,1)
(321,89,1)
(293,240,1)
(307,323,1)
(38,215,1)
(67,168,1)
(373,45,1)
(52,169,1)
(8,231,1)
(277,81,1)
(218,331,1)
(66,271,1)
(154,184,1)
(144,135,1)
(289,310,1)
(80,322,1)
(18,232,1)
(328,369,1)
(207,327,1)
(206,212,1)
(86,27,1)
(51,309,1)
(351,192,1)
(187,333,1)
(290,284,1)
(94,72,1)
(274,261,1)
(57,330,1)
(208,226,1)
(156,234,1)
(13,97,1)
(248,87,1)
(161,235,1)
(128,360,1)
(217,109,1)
(176,252,1)
(84,63,1)
(377,169,1)
(261,109,1)
(362,54,1)
(54,135,1)
(327,358,1)
(267,80,1)
(6,139,1)
(345,253,1)
(255,4,1)
(284,287,1)
(232,248,1)
(120,349,1)
(46,45,1)
(323,129,1)
(242,224,1)
(111,201,1)
(286,377,1)
(188,294,1)
(224,301,1)
(180,60,1)
(40,6,1)
(255,198,1)
(126,162,1)
(43,238,1)
(179,343,1)
(147,286,1)
(271,350,1)
(2,302,1)
(142,214,1)
(324,187,1)
(157,335,1)
(346,1,1)
(247,159,1)
(226,339,1)
(254,102,1)
(168,314,1)
(316,244,1)
(38,135,1)
(162,156,1)
(90,217,1)
(136,120,1)
(364,277,1)
(347,299,1)
(144,128,1)
(292,196,1)
(195,260,1)
(230,70,1)
(136,314,1)
(108,121,1)
(342,135,1)
(185,336,1)
(251,136,1)
(162,41,1)
(340,8,1)
(175,199,1)
(132,94,1)
(262,218,1)
(218,86,1)
(16,29,1)
(365,39,1)
(352,307,1)
(32,188,1)
(2,345,1)
(113,342,1)
(36,43,1)
(81,217,1)
(8,313,1)
(210,67,1)
(325,7,1)
(335,238,1)
(166,99,1)
(294,269,1)
(104,261,1)
(63,61,1)
(174,165,1)
(348,162,1)
(221,318,1)
(232,115,1)
(88,50,1)
(249,173,1)
(207,61,1)
(75,331,1)
(118,169,1)
(199,30,1)
(212,367,1)
(99,13,1)
(232,203,1)
(39,104,1)
(260,353,1)
(139,127,1)
(8,185,1)
(304,301,1)
(150,285,1)
(172,141,1)
(83,66,1)
(7,166,1)
(171,5,1)
(45,161,1)
(102,331,1)
(239,59,1)
(65,135,1)
(322,236,1)
(23,113,1)
(357,107,1)
(361,150,1)
(354,45,1)
(352,135,1)
(315,170,1)
(241,2,1)
(108,203,1)
(291,219,1)
(374,373,1)
(267,206,1)
(75,266,1)
(373,354,1)
(33,282,1)
(177,32,1)
(117,80,1)
(318,239,1)
(336,109,1)
(19,158,1)
(196,228,1)
(310,250,1)
(227,265,1)
(112,344,1)
(282,87,1)
(312,126,1)
(108,249,1)
(29,320,1)
(349,210,1)
(16,135,1)
(275,89,1)
(265,100,1)
(53,135,1)
(319,145,1)
(313,318,1)
(105,278,1)
(70,229,1)
(301,65,1)
(15,370,1)
(249,293,1)
(8,90,1)
(363,28,1)
(102,75,1)
(321,275,1)
(196,89,1)
(229,213,1)
(125,208,1)
(148,293,1)
(223,366,1)
(260,233,1)
(62,346,1)
(216,48,1)
(294,41,1)
(345,184,1)
(283,196,1)
(103,23,1)
(141,280,1)
(253,182,1)
(256,84,1)
(194,292,1)
(330,134,1)
(236,170,1)
(72,191,1)
(248,33,1)
(15,238,1)
(198,98,1)
(98,3,1)
(232,121,1)
(145,95,1)
(250,175,1)
(134,37,1)
(48,16,1)
(273,254,1)
(117,251,1)
(87,14,1)
(320,13,1)
(230,179,1)
(156,135,1)
(355,238,1)
(318,109,1)
(193,364,1)
(165,315,1)
(108,248,1)
(74,154,1)
(42,331,1)
(244,361,1)
(13,284,1)
(59,125,1)
(268,321,1)
(336,264,1)
(52,144,1)
(30,70,1)
(241,169,1)
(159,159,1)
(296,136,1)
(182,184,1)
(7,135,1)
(260,1,1)
(107,177,1)
(67,314,1)
(353,42,1)
(232,249,1)
(294,15,1)
(58,268,1)
(168,18,1)
(1,338,1)
(281,105,1)
(223,291,1)
(59,291,1)
(100,293,1)
(198,5,1)
(265,5,1)
(183,372,1)
(192,207,1)
(280,272,1)
(159,147,1)
(186,52,1)
(242,41,1)
(158,132,1)
(8,44,1)
(49,362,1)
(252,278,1)
(294,308,1)
(177,269,1)
(295,198,1)
(335,314,1)
(129,281,1)
(343,2,1)
(145,62,1)
(159,89,1)
(302,172,1)
(354,237,1)
(8,233,1)
(350,290,1)
(311,325,1)
(93,374,1)
(66,135,1)
(186,267,1)
(342,351,1)
(169,328,1)
(358,43,1)
(182,118,1)
(235,174,1)
(294,95,1)
(214,183,1)
(101,142,1)
(201,319,1)
(184,58,1)
(118,74,1)
(42,0,1)
(113,61,1)
(46,289,1)
(0,273,1)
(174,284,1)
(21,108,1)
(232,80,1)
(59,5,1)
(114,38,1)
(368,186,1)
(146,133,1)
(50,267,1)
(213,51,1)
(170,278,1)
(92,276,1)
(125,87,1)
(28,41,1)
(370,92,1)
(105,176,1)
(232,335,1)
(285,70,1)
(54,93,1)
(8,274,1)
(355,137,1)
(53,140,1)
(362,45,1)
(9,119,1)
(206,135,1)
(219,352,1)
(3,155,1)
(8,36,1)
(272,345,1)
(309,291,1)
(372,49,1)
(333,57,1)
(155,7,1)
(154,247,1)
(269,368,1)
(44,214,1)
(366,371,1)
(63,347,1)
(264,223,1)
(170,312,1)
(121,4,1)
(266,152,1)
(41,103,1)
(261,227,1)
(32,269,1)
(171,146,1)
(140,111,1)
(61,324,1)
(237,46,1)
(338,9,1)
(215,256,1)
(292,283,1)
(186,362,1)
(301,269,1)
(196,159,1)
(203,19,1)
(231,321,1)
(367,220,1)
(14,106,1)
(181,157,1)
(97,296,1)
(335,21,1)
(76,221,1)
(30,101,1)
(214,5,1)
(233,24,1)
(189,255,1)
(138,336,1)
(308,135,1)
(8,306,1)
(282,59,1)
(203,132,1)
(4,193,1)
(228,180,1)
(377,194,1)
(355,331,1)
(299,113,1)
(120,135,1)
(127,317,1)
(173,148,1)
(46,30,1)
(234,363,1)
(106,76,1)
(172,135,1)
(331,340,1)
(65,357,1)
(24,348,1)
(220,80,1)
(366,132,1)
(339,16,1)
(344,230,1)
(314,88,1)
(306,294,1)
(137,262,1)
(115,181,1)
(158,223,1)
(217,295,1)
(220,117,1)
(88,267,2)
(170,162,2)
(336,223,2)
(335,318,2)
(357,52,2)
(177,52,2)
(283,2,2)
(296,136,2)
(67,261,2)
(186,362,2)
(43,113,2)
(335,261,2)
(294,95,2)
(114,113,2)
(23,113,2)
(7,13,2)
(335,314,2)
(50,267,2)
(235,174,2)
(2,302,2)
(36,43,2)
(369,174,2)
(145,95,2)
(177,294,2)
(352,135,2)
(21,318,2)
(267,170,2)
(83,66,2)
(354,214,2)
(136,336,2)
(327,61,2)
(318,59,2)
(232,217,2)
(215,113,2)
(38,135,2)
(349,261,2)
(276,301,2)
(322,170,2)
(108,261,2)
(345,2,2)
(357,267,2)
(103,113,2)
(181,59,2)
(232,198,2)
(158,223,2)
(371,16,2)
(30,70,2)
(84,113,2)
(261,109,2)
(210,223,2)
(269,52,2)
(219,352,2)
(67,59,2)
(179,2,2)
(294,41,2)
(265,5,2)
(223,291,2)
(90,217,2)
(157,261,2)
(224,301,2)
(335,59,2)
(154,184,2)
(223,366,2)
(108,336,2)
(217,198,2)
(18,223,2)
(221,318,2)
(181,318,2)
(293,261,2)
(210,336,2)
(260,233,2)
(86,42,2)
(295,198,2)
(118,169,2)
(363,113,2)
(212,136,2)
(46,45,2)
(21,261,2)
(278,83,2)
(15,238,2)
(144,321,2)
(89,171,2)
(247,2,2)
(203,132,2)
(65,52,2)
(120,261,2)
(274,261,2)
(115,265,2)
(368,267,2)
(210,198,2)
(277,217,2)
(354,45,2)
(345,321,2)
(112,2,2)
(21,59,2)
(249,265,2)
(318,109,2)
(240,261,2)
(181,198,2)
(184,321,2)
(120,217,2)
(226,16,2)
(113,61,2)
(372,362,2)
(54,135,2)
(366,16,2)
(136,217,2)
(45,174,2)
(6,301,2)
(39,261,2)
(21,265,2)
(46,214,2)
(302,169,2)
(115,223,2)
(18,217,2)
(273,42,2)
(168,59,2)
(349,267,2)
(206,170,2)
(349,265,2)
(157,198,2)
(365,261,2)
(311,7,2)
(335,198,2)
(0,135,2)
(2,321,2)
(148,261,2)
(377,194,2)
(345,184,2)
(189,217,2)
(27,42,2)
(18,198,2)
(301,294,2)
(234,301,2)
(15,269,2)
(42,42,2)
(168,261,2)
(165,170,2)
(89,52,2)
(216,16,2)
(254,42,2)
(137,218,2)
(67,318,2)
(171,5,2)
(301,362,2)
(362,214,2)
(301,52,2)
(100,293,2)
(242,41,2)
(18,59,2)
(232,318,2)
(374,214,2)
(93,214,2)
(18,336,2)
(121,4,2)
(146,52,2)
(105,278,2)
(232,59,2)
(108,198,2)
(43,238,2)
(208,16,2)
(52,144,2)
(377,2,2)
(241,321,2)
(136,120,2)
(310,214,2)
(157,336,2)
(253,321,2)
(343,2,2)
(161,174,2)
(162,301,2)
(159,2,2)
(181,223,2)
(349,59,2)
(266,42,2)
(237,214,2)
(81,217,2)
(67,267,2)
(191,336,2)
(59,125,2)
(52,174,2)
(287,53,2)
(67,265,2)
(120,223,2)
(377,169,2)
(104,261,2)
(115,336,2)
(267,206,2)
(127,301,2)
(280,345,2)
(214,5,2)
(267,80,2)
(203,336,2)
(349,336,2)
(349,318,2)
(148,265,2)
(249,261,2)
(289,214,2)
(212,170,2)
(321,89,2)
(115,59,2)
(32,269,2)
(249,293,2)
(181,261,2)
(120,318,2)
(168,336,2)
(18,318,2)
(168,265,2)
(107,52,2)
(363,301,2)
(374,174,2)
(236,170,2)
(217,109,2)
(0,42,2)
(54,174,2)
(65,267,2)
(203,223,2)
(52,169,2)
(108,59,2)
(214,362,2)
(355,218,2)
(15,301,2)
(66,135,2)
(49,362,2)
(319,145,2)
(232,336,2)
(152,218,2)
(41,113,2)
(168,223,2)
(210,318,2)
(248,87,2)
(335,238,2)
(181,336,2)
(355,238,2)
(14,318,2)
(30,214,2)
(188,294,2)
(214,183,2)
(232,223,2)
(207,43,2)
(72,336,2)
(100,7,2)
(108,265,2)
(44,214,2)
(1,338,2)
(231,321,2)
(367,170,2)
(281,105,2)
(206,136,2)
(173,265,2)
(21,223,2)
(120,267,2)
(136,318,2)
(166,13,2)
(314,267,2)
(107,294,2)
(159,159,2)
(120,265,2)
(120,135,2)
(177,267,2)
(183,362,2)
(157,318,2)
(147,2,2)
(189,198,2)
(65,135,2)
(264,223,2)
(198,7,2)
(242,301,2)
(302,345,2)
(282,59,2)
(269,362,2)
(29,13,2)
(94,336,2)
(320,13,2)
(92,301,2)
(118,2,2)
(344,2,2)
(308,135,2)
(21,198,2)
(210,59,2)
(251,136,2)
(349,198,2)
(67,223,2)
(101,214,2)
(2,345,2)
(261,265,2)
(13,136,2)
(136,314,2)
(152,355,2)
(156,113,2)
(206,135,2)
(136,267,2)
(368,52,2)
(87,318,2)
(186,52,2)
(159,89,2)
(182,321,2)
(18,265,2)
(42,0,2)
(162,113,2)
(335,265,2)
(232,249,2)
(255,198,2)
(4,217,2)
(75,331,2)
(362,174,2)
(3,7,2)
(126,162,2)
(364,217,2)
(120,59,2)
(335,336,2)
(349,223,2)
(28,113,2)
(357,362,2)
(21,336,2)
(181,265,2)
(232,121,2)
(218,331,2)
(198,5,2)
(358,43,2)
(115,261,2)
(113,342,2)
(349,217,2)
(128,174,2)
(360,174,2)
(157,265,2)
(33,318,2)
(230,70,2)
(120,198,2)
(339,16,2)
(367,136,2)
(185,336,2)
(136,59,2)
(336,109,2)
(233,162,2)
(198,98,2)
(286,2,2)
(302,172,2)
(260,1,2)
(232,265,2)
(177,362,2)
(115,217,2)
(220,136,2)
(80,170,2)
(168,217,2)
(42,331,2)
(370,301,2)
(59,5,2)
(196,89,2)
(312,162,2)
(232,261,2)
(196,2,2)
(228,2,2)
(348,162,2)
(54,214,2)
(194,292,2)
(141,345,2)
(195,260,2)
(255,217,2)
(157,217,2)
(24,162,2)
(301,269,2)
(114,38,2)
(169,174,2)
(268,321,2)
(115,198,2)
(373,174,2)
(182,2,2)
(93,174,2)
(67,336,2)
(168,198,2)
(106,318,2)
(368,362,2)
(347,113,2)
(125,16,2)
(133,52,2)
(301,267,2)
(108,223,2)
(168,314,2)
(162,156,2)
(75,42,2)
(107,267,2)
(157,59,2)
(173,261,2)
(76,318,2)
(125,87,2)
(48,16,2)
(256,113,2)
(335,217,2)
(136,265,2)
(248,59,2)
(315,170,2)
(327,43,2)
(282,318,2)
(362,54,2)
(67,217,2)
(194,2,2)
(144,135,2)
(313,318,2)
(355,331,2)
(342,43,2)
(174,284,2)
(121,217,2)
(210,217,2)
(67,198,2)
(19,336,2)
(172,135,2)
(294,308,2)
(325,7,2)
(108,217,2)
(107,362,2)
(108,318,2)
(292,196,2)
(250,214,2)
(65,294,2)
(157,223,2)
(284,287,2)
(186,267,2)
(306,294,2)
(138,336,2)
(210,261,2)
(136,261,2)
(317,301,2)
(59,16,2)
(218,42,2)
(18,261,2)
(174,170,2)
(156,301,2)
(154,2,2)
(180,2,2)
(132,336,2)
(175,214,2)
(193,217,2)
(269,267,2)
(291,219,2)
(239,59,2)
(2,2,2)
(156,135,2)
(172,345,2)
(38,113,2)
(98,7,2)
(139,301,2)
(227,265,2)
(292,2,2)
(142,214,2)
(144,174,2)
(267,136,2)
(238,114,2)
(102,42,2)
(238,113,2)
(162,41,2)
(158,336,2)
(117,80,2)
(59,291,2)
(63,61,2)
(128,321,2)
(241,174,2)
(321,52,2)
(373,214,2)
(181,217,2)
(210,265,2)
(232,80,2)
(98,4,2)
(53,135,2)
(275,52,2)
(210,267,2)
(232,335,2)
(301,65,2)
(230,2,2)
(362,45,2)
(7,135,2)
(196,159,2)
(168,318,2)
(52,321,2)
(16,135,2)
(265,100,2)
(232,203,2)
(21,217,2)
(262,218,2)
(40,301,2)
(97,136,2)
(299,113,2)
(220,170,2)
(155,7,2)
(192,43,2)
(46,30,2)
(342,135,2)
(74,2,2)
(335,223,2)
(58,321,2)
(136,223,2)
(232,248,2)
(357,294,2)
(115,318,2)
(19,223,2)
(294,15,2)
(28,301,2)
(13,284,2)
(351,43,2)
(170,278,2)
(136,198,2)
(265,7,2)
(199,214,2)
(223,5,2)
(294,301,2)
(294,269,2)
(360,321,2)
(377,230,2)
(65,362,2)
(248,318,2)
(63,113,2)
(253,2,2)
(223,16,2)
(46,289,2)
(16,13,2)
(272,345,2)
(32,294,2)
(304,301,2)
(234,113,2)
(120,336,2)
(117,136,2)
(171,52,2)
(99,13,2)
(328,174,2)
(121,198,2)
(60,2,2)
(113,43,2)
(33,59,2)
(308,301,2)
(366,132,2)
-----------------------------------
(0,hdr->numcmpts)
(1,ret = -1)
(2,n > 0 && x < hdr->width)
(3,sv)
(4,sv = 0)
(5,jas_stream_t *in)
(6,hdr)
(7,hdr->sgnd)
(8,cmptno)
(9,1)
(10,)
(11,if (pnm_getbitstr(in, &uv)
(12,if ((c = jas_stream_getc(in)
(13,fmt == PNM_FMT_BIN)
(14,0)
(15,data[cmptno])
(16,hdr->sgnd)
(17,if (fmt == PNM_FMT_BIN)
(18,cmptno)
(19,sv)
(20,while (n > 0 && x < hdr->width)
(21,cmptno)
(22,)
(23,y)
(24,0)
(25,)
(26,if (pnm_getuintstr(in, &uv)
(27,data)
(28,y)
(29,sgnd)
(30,data[0])
(31,depth)
(32,++cmptno)
(33,uv)
(34,sv)
(35,)
(36,goto done;)
(37,data)
(38,hdr->width)
(39,jas_eprintf("bad sample data\\n")
(40,width)
(41,y = 0)
(42,cmptno < hdr->numcmpts)
(43,!(data[cmptno] = jas_matrix_create(1, hdr->width)
(44,goto done;)
(45,x = 0)
(46,jas_matrix_set(data[0], 0, x, 1 - uv)
(47,numcmpts)
(48,in)
(49,in)
(50,cmptno)
(51,0)
(52,x < hdr->width)
(53,hdr->magic)
(54,hdr->width)
(55,)
(56,cmptno)
(57,0)
(58,8)
(59,pnm_getuint(in, depth, &uv)
(60,1)
(61,cmptno = 0)
(62,image)
(63,data[cmptno])
(64,)
(65,hdr->numcmpts)
(66,hdr->magic)
(67,cmptno)
(68,if (!(data[cmptno] = jas_matrix_create(1, hdr->width)
(69,if (!allow_trunc)
(70,data[0] = 0)
(71,c)
(72,sv)
(73,data)
(74,x)
(75,++cmptno)
(76,jas_eprintf("bad sample data\\n")
(77,if (hdr->sgnd)
(78,)
(79,)
(80,x = 0)
(81,"bad sample data\\n")
(82,uv)
(83,pnm_type(hdr->magic)
(84,1)
(85,ret)
(86,cmptno)
(87,uv = 0)
(88,0)
(89,c = jas_stream_getc(in)
(90,goto done;)
(91,)
(92,data)
(93,width)
(94,0)
(95,jas_image_t *image)
(96,)
(97,PNM_FMT_BIN)
(98,&sv)
(99,hdr)
(100,&uv)
(101,0)
(102,cmptno)
(103,0)
(104,"bad sample data\\n")
(105,type != PNM_TYPE_INVALID)
(106,uv)
(107,hdr)
(108,data)
(109,int allow_trunc)
(110,if (fmt == PNM_FMT_BIN)
(111,hdr)
(112,x)
(113,cmptno < hdr->numcmpts)
(114,jas_matrix_create(1, hdr->width)
(115,v)
(116,)
(117,++x)
(118,++x)
(119,ret)
(120,hdr->numcmpts)
(121,v = sv)
(122,sv)
(123,n)
(124,x)
(125,&uv)
(126,type)
(127,0)
(128,width)
(129,depth)
(130,if (!allow_trunc)
(131,)
(132,sv = 0)
(133,c)
(134,2)
(135,pnm_hdr_t *hdr)
(136,cmptno < hdr->numcmpts)
(137,cmptno)
(138,"bad sample data\\n")
(139,y)
(140,magic)
(141,width)
(142,data)
(143,)
(144,hdr->width)
(145,jas_image_numcmpts(image)
(146,in)
(147,1)
(148,v)
(149,y)
(150,1)
(151,if (jas_image_writecmpt(image, cmptno, 0, y, hdr->width, 1,\\n\\t\\t\\t  data[cmptno])
(152,jas_matrix_destroy(data[cmptno])
(153,)
(154,--n)
(155,in)
(156,hdr->height)
(157,0)
(158,v)
(159,c <<= 1)
(160,done:)
(161,0)
(162,y < hdr->height)
(163,)
(164,if (pnm_getuint(in, depth, &uv)
(165,PNM_FMT_BIN)
(166,sgnd)
(167,for (y = 0; y < hdr->height; ++y)
(168,++cmptno)
(169,x = 0)
(170,type == PNM_TYPE_PBM)
(171,jas_stream_getc(in)
(172,hdr->width)
(173,uv)
(174,fmt == PNM_FMT_BIN)
(175,x)
(176,PNM_TYPE_INVALID)
(177,cmptno)
(178,type)
(179,0)
(180,c)
(181,x)
(182,n)
(183,&uv)
(184,n = 8)
(185,goto done;)
(186,cmptno)
(187,cmptno)
(188,cmptno)
(189,sv)
(190,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(191,jas_eprintf("bad sample data\\n")
(192,hdr)
(193,0)
(194,1 - ((c >> 7)
(195,RET)
(196,c >> 7)
(197,)
(198,pnm_getsintstr(in, &sv)
(199,0)
(200,for (x = 0; x < hdr->width; ++x)
(201,fmt)
(202,fmt)
(203,v = sv)
(204,for (x = 0; x < hdr->width;)
(205,)
(206,hdr->width)
(207,cmptno)
(208,uv)
(209,)
(210,hdr)
(211,if (!allow_trunc)
(212,width)
(213,data[0])
(214,pnm_getbitstr(in, &uv)
(215,width)
(216,depth)
(217,!allow_trunc)
(218,data[cmptno])
(219,pnm_maxvaltodepth(hdr->maxval)
(220,x)
(221,"bad sample data\\n")
(222,)
(223,pnm_getsint(in, depth, &sv)
(224,y)
(225,)
(226,depth)
(227,allow_trunc)
(228,7)
(229,0)
(230,data[0])
(231,goto done;)
(232,jas_matrix_set(data[cmptno], 0, x, v)
(233,ret = 0)
(234,height)
(235,x)
(236,x)
(237,x)
(238,data[cmptno] = jas_matrix_create(1, hdr->width)
(239,allow_trunc)
(240,0)
(241,x)
(242,++y)
(243,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(244,0)
(245,)
(246,if (data[cmptno])
(247,n)
(248,v = uv)
(249,v = uv)
(250,1)
(251,x)
(252,type)
(253,0)
(254,hdr)
(255,v)
(256,hdr)
(257,)
(258,)
(259,)
(260,return ret;)
(261,!allow_trunc)
(262,data)
(263,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(264,allow_trunc)
(265,pnm_getuintstr(in, &uv)
(266,cmptno)
(267,x < hdr->width)
(268,n)
(269,cmptno = 0)
(270,if (hdr->sgnd)
(271,magic)
(272,x)
(273,numcmpts)
(274,goto done;)
(275,EOF)
(276,1)
(277,jas_eprintf("bad sample data\\n")
(278,type = pnm_type(hdr->magic)
(279,)
(280,hdr)
(281,assert(type != PNM_TYPE_INVALID)
(282,v)
(283,1)
(284,fmt = pnm_fmt(hdr->magic)
(285,data)
(286,c)
(287,pnm_fmt(hdr->magic)
(288,)
(289,1 - uv)
(290,type)
(291,depth = pnm_maxvaltodepth(hdr->maxval)
(292,(c >> 7)
(293,uv = 0)
(294,jas_image_writecmpt(image, cmptno, 0, y, hdr->width, 1,\\n\\t\\t\\t  data[cmptno])
(295,allow_trunc)
(296,fmt)
(297,)
(298,if (pnm_getsintstr(in, &sv)
(299,data)
(300,)
(301,cmptno < hdr->numcmpts)
(302,x < hdr->width)
(303,uv)
(304,image)
(305,)
(306,goto done;)
(307,maxval)
(308,hdr->width)
(309,data)
(310,uv)
(311,uv)
(312,PNM_TYPE_PBM)
(313,goto done;)
(314,cmptno = 0)
(315,fmt)
(316,data[1] = 0)
(317,cmptno)
(318,!allow_trunc)
(319,numcmpts = jas_image_numcmpts(image)
(320,hdr)
(321,(c = jas_stream_getc(in)
(322,0)
(323,hdr)
(324,0)
(325,in)
(326,)
(327,++cmptno)
(328,0)
(329,)
(330,data[2])
(331,cmptno = 0)
(332,uv)
(333,data[2] = 0)
(334,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(335,data[cmptno])
(336,!allow_trunc)
(337,v)
(338,-1)
(339,in)
(340,0)
(341,for (x = 0; x < hdr->width; ++x)
(342,hdr->numcmpts)
(343,data)
(344,0)
(345,n > 0)
(346,numcmpts)
(347,cmptno)
(348,ret)
(349,numcmpts)
(350,hdr)
(351,numcmpts)
(352,hdr->maxval)
(353,ret)
(354,++x)
(355,data[cmptno])
(356,if (type == PNM_TYPE_PBM)
(357,numcmpts)
(358,cmptno)
(359,if (!allow_trunc)
(360,hdr)
(361,data[1])
(362,x < hdr->width)
(363,hdr)
(364,sv)
(365,uv)
(366,&sv)
(367,hdr)
(368,0)
(369,x)
(370,cmptno)
(371,sv)
(372,uv)
(373,x)
(374,hdr)
(375,)
(376,)
(377,jas_matrix_set(data[0], 0, x, 1 - ((c >> 7)
(378,if (pnm_getsint(in, depth, &sv)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffe694ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5f00760000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
int pnm_validate(jas_stream_t *in) {
int i;
int n;
assert(JAS_STREAM_MAXPUTBACK >= 2);
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
return -1;
=======================
