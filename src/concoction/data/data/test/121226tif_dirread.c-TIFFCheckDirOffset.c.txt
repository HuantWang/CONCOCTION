-----label-----
0
-----code-----
static int
TIFFCheckDirOffset(TIFF* tif, uint64 diroff)
{
	uint16 n;

	if (diroff == 0)			/* no more directories */
		return 0;
	if (tif->tif_dirnumber == 65535) {
	    TIFFErrorExt(tif->tif_clientdata, "TIFFCheckDirOffset",
			 "Cannot handle more than 65535 TIFF directories");
	    return 0;
	}

	for (n = 0; n < tif->tif_dirnumber && tif->tif_dirlist; n++) {
		if (tif->tif_dirlist[n] == diroff)
			return 0;
	}

	tif->tif_dirnumber++;

	if (tif->tif_dirlist == NULL || tif->tif_dirnumber > tif->tif_dirlistsize) {
		uint64* new_dirlist;

		/*
		 * XXX: Reduce memory allocation granularity of the dirlist
		 * array.
		 */
		new_dirlist = (uint64*)_TIFFCheckRealloc(tif, tif->tif_dirlist,
		    tif->tif_dirnumber, 2 * sizeof(uint64), "for IFD list");
		if (!new_dirlist)
			return 0;
		if( tif->tif_dirnumber >= 32768 )
		    tif->tif_dirlistsize = 65535;
		else
		    tif->tif_dirlistsize = 2 * tif->tif_dirnumber;
		tif->tif_dirlist = new_dirlist;
	}

	tif->tif_dirlist[tif->tif_dirnumber - 1] = diroff;

	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
17,18
18,19
18,20
19,20
21,22
23,24
23,25
24,25
24,26
25,26
28,29
30,31
30,32
31,32
31,33
32,33
32,34
33,34
37,38
37,39
38,39
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
56,57
56,58
57,58
57,59
58,59
60,61
60,62
61,62
64,65
64,66
65,66
68,69
69,70
71,72
72,73
72,74
73,74
73,75
74,75
74,76
75,76
75,77
76,77
79,80
81,82
83,84
85,86
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
93,95
94,95
94,96
95,96
98,99
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
109,110
109,111
109,112
109,113
109,114
110,111
111,112
111,113
112,113
114,115
114,116
117,118
118,119
118,120
119,120
121,122
121,123
122,123
122,124
123,124
125,126
127,128
127,129
127,130
127,131
127,132
127,133
128,129
130,131
132,133
132,134
133,134
136,137
136,138
137,138
140,141
140,142
142,143
143,144
143,145
144,145
148,149
148,150
149,150
150,151
152,153
154,155
154,156
154,157
155,156
155,157
156,157
156,158
157,158
161,162
162,163
162,164
163,164
163,165
164,165
168,169
169,170
169,171
170,171
170,172
171,172
174,175
174,176
176,177
176,178
177,178
180,181
181,182
181,183
182,183
182,184
183,184
186,187
188,189
189,190
189,191
190,191
190,192
191,192
191,193
192,193
195,196
195,197
196,197
196,198
197,198
201,202
203,204
-----nextToken-----
2,4,7,9,10,13,15,20,22,26,27,29,34,35,36,41,44,45,46,47,49,54,55,59,62,63,66,67,70,77,78,80,82,84,89,90,96,97,99,103,104,107,108,113,115,116,120,124,126,129,131,134,135,138,139,141,145,146,147,151,153,158,159,160,165,166,167,172,173,175,178,179,184,185,187,193,194,198,199,200,202,204
-----computeFrom-----
24,25
24,26
31,32
31,33
52,53
52,54
56,57
56,58
57,58
57,59
73,74
73,75
92,93
92,94
93,94
93,95
100,101
100,102
118,119
118,120
140,141
140,142
155,156
155,157
162,163
162,164
169,170
169,171
174,175
174,176
181,182
181,183
189,190
189,191
195,196
195,197
-----guardedBy-----
34,44
107,184
97,185
108,173
104,179
158,165
-----guardedByNegation-----
158,178
159,179
-----lastLexicalUse-----
158,178
-----jump-----
158,178
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ReturnStatement;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static intTIFFCheckDirOffset(TIFF* tif, uint64 diroff){	uint16 n;	if (diroff == 0)			/* no more directories */		return 0;	if (tif->tif_dirnumber == 65535) {	    TIFFErrorExt(tif->tif_clientdata, "TIFFCheckDirOffset",			 "Cannot handle more than 65535 TIFF directories");	    return 0;	}	for (n = 0; n < tif->tif_dirnumber && tif->tif_dirlist; n++) {		if (tif->tif_dirlist[n] == diroff)			return 0;	}	tif->tif_dirnumber++;	if (tif->tif_dirlist == NULL || tif->tif_dirnumber > tif->tif_dirlistsize) {		uint64* new_dirlist;		/*		 * XXX: Reduce memory allocation granularity of the dirlist		 * array.		 */		new_dirlist = (uint64*)_TIFFCheckRealloc(tif, tif->tif_dirlist,		    tif->tif_dirnumber, 2 * sizeof(uint64), "for IFD list");		if (!new_dirlist)			return 0;		if( tif->tif_dirnumber >= 32768 )		    tif->tif_dirlistsize = 65535;		else		    tif->tif_dirlistsize = 2 * tif->tif_dirnumber;		tif->tif_dirlist = new_dirlist;	}	tif->tif_dirlist[tif->tif_dirnumber - 1] = diroff;	return 1;}
static int
TIFFCheckDirOffset(TIFF* tif, uint64 diroff)
TIFFCheckDirOffset
TIFF* tif
TIFF
TIFF
* tif
*
tif
uint64 diroff
uint64
uint64
diroff
diroff
{	uint16 n;	if (diroff == 0)			/* no more directories */		return 0;	if (tif->tif_dirnumber == 65535) {	    TIFFErrorExt(tif->tif_clientdata, "TIFFCheckDirOffset",			 "Cannot handle more than 65535 TIFF directories");	    return 0;	}	for (n = 0; n < tif->tif_dirnumber && tif->tif_dirlist; n++) {		if (tif->tif_dirlist[n] == diroff)			return 0;	}	tif->tif_dirnumber++;	if (tif->tif_dirlist == NULL || tif->tif_dirnumber > tif->tif_dirlistsize) {		uint64* new_dirlist;		/*		 * XXX: Reduce memory allocation granularity of the dirlist		 * array.		 */		new_dirlist = (uint64*)_TIFFCheckRealloc(tif, tif->tif_dirlist,		    tif->tif_dirnumber, 2 * sizeof(uint64), "for IFD list");		if (!new_dirlist)			return 0;		if( tif->tif_dirnumber >= 32768 )		    tif->tif_dirlistsize = 65535;		else		    tif->tif_dirlistsize = 2 * tif->tif_dirnumber;		tif->tif_dirlist = new_dirlist;	}	tif->tif_dirlist[tif->tif_dirnumber - 1] = diroff;	return 1;}
uint16 n;
uint16 n;
uint16
uint16
n
n
if (diroff == 0)			/* no more directories */		return 0;
diroff == 0
diroff
diroff
0
return 0;
0
if (tif->tif_dirnumber == 65535) {	    TIFFErrorExt(tif->tif_clientdata, "TIFFCheckDirOffset",			 "Cannot handle more than 65535 TIFF directories");	    return 0;	}
tif->tif_dirnumber == 65535
tif->tif_dirnumber
tif
tif
tif_dirnumber
65535
{	    TIFFErrorExt(tif->tif_clientdata, "TIFFCheckDirOffset",			 "Cannot handle more than 65535 TIFF directories");	    return 0;	}
TIFFErrorExt(tif->tif_clientdata, "TIFFCheckDirOffset",			 "Cannot handle more than 65535 TIFF directories");
TIFFErrorExt(tif->tif_clientdata, "TIFFCheckDirOffset",			 "Cannot handle more than 65535 TIFF directories")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
"TIFFCheckDirOffset"
"Cannot handle more than 65535 TIFF directories"
return 0;
0
for (n = 0; n < tif->tif_dirnumber && tif->tif_dirlist; n++) {		if (tif->tif_dirlist[n] == diroff)			return 0;	}
n = 0;
n = 0
n
n
0
n < tif->tif_dirnumber && tif->tif_dirlist
n < tif->tif_dirnumber
n
n
tif->tif_dirnumber
tif
tif
tif_dirnumber
tif->tif_dirlist
tif
tif
tif_dirlist
n++
n
n
{		if (tif->tif_dirlist[n] == diroff)			return 0;	}
if (tif->tif_dirlist[n] == diroff)			return 0;
tif->tif_dirlist[n] == diroff
tif->tif_dirlist[n]
tif->tif_dirlist
tif
tif
tif_dirlist
n
n
diroff
diroff
return 0;
0
tif->tif_dirnumber++;
tif->tif_dirnumber++
tif->tif_dirnumber
tif
tif
tif_dirnumber
if (tif->tif_dirlist == NULL || tif->tif_dirnumber > tif->tif_dirlistsize) {		uint64* new_dirlist;		/*		 * XXX: Reduce memory allocation granularity of the dirlist		 * array.		 */		new_dirlist = (uint64*)_TIFFCheckRealloc(tif, tif->tif_dirlist,		    tif->tif_dirnumber, 2 * sizeof(uint64), "for IFD list");		if (!new_dirlist)			return 0;		if( tif->tif_dirnumber >= 32768 )		    tif->tif_dirlistsize = 65535;		else		    tif->tif_dirlistsize = 2 * tif->tif_dirnumber;		tif->tif_dirlist = new_dirlist;	}
tif->tif_dirlist == NULL || tif->tif_dirnumber > tif->tif_dirlistsize
tif->tif_dirlist == NULL
tif->tif_dirlist
tif
tif
tif_dirlist
NULL
NULL
tif->tif_dirnumber > tif->tif_dirlistsize
tif->tif_dirnumber
tif
tif
tif_dirnumber
tif->tif_dirlistsize
tif
tif
tif_dirlistsize
{		uint64* new_dirlist;		/*		 * XXX: Reduce memory allocation granularity of the dirlist		 * array.		 */		new_dirlist = (uint64*)_TIFFCheckRealloc(tif, tif->tif_dirlist,		    tif->tif_dirnumber, 2 * sizeof(uint64), "for IFD list");		if (!new_dirlist)			return 0;		if( tif->tif_dirnumber >= 32768 )		    tif->tif_dirlistsize = 65535;		else		    tif->tif_dirlistsize = 2 * tif->tif_dirnumber;		tif->tif_dirlist = new_dirlist;	}
uint64* new_dirlist;
uint64* new_dirlist;
uint64
uint64
* new_dirlist
*
new_dirlist
new_dirlist = (uint64*)_TIFFCheckRealloc(tif, tif->tif_dirlist,		    tif->tif_dirnumber, 2 * sizeof(uint64), "for IFD list");
new_dirlist = (uint64*)_TIFFCheckRealloc(tif, tif->tif_dirlist,		    tif->tif_dirnumber, 2 * sizeof(uint64), "for IFD list")
new_dirlist
new_dirlist
(uint64*)_TIFFCheckRealloc(tif, tif->tif_dirlist,		    tif->tif_dirnumber, 2 * sizeof(uint64), "for IFD list")
uint64*
uint64
uint64
*
*
_TIFFCheckRealloc(tif, tif->tif_dirlist,		    tif->tif_dirnumber, 2 * sizeof(uint64), "for IFD list")
_TIFFCheckRealloc
_TIFFCheckRealloc
tif
tif
tif->tif_dirlist
tif
tif
tif_dirlist
tif->tif_dirnumber
tif
tif
tif_dirnumber
2 * sizeof(uint64)
2
sizeof(uint64)
uint64
uint64
uint64

"for IFD list"
if (!new_dirlist)			return 0;
!new_dirlist
new_dirlist
new_dirlist
return 0;
0
if( tif->tif_dirnumber >= 32768 )		    tif->tif_dirlistsize = 65535;		else		    tif->tif_dirlistsize = 2 * tif->tif_dirnumber;
tif->tif_dirnumber >= 32768
tif->tif_dirnumber
tif
tif
tif_dirnumber
32768
tif->tif_dirlistsize = 65535;
tif->tif_dirlistsize = 65535
tif->tif_dirlistsize
tif
tif
tif_dirlistsize
65535
tif->tif_dirlistsize = 2 * tif->tif_dirnumber;
tif->tif_dirlistsize = 2 * tif->tif_dirnumber
tif->tif_dirlistsize
tif
tif
tif_dirlistsize
2 * tif->tif_dirnumber
2
tif->tif_dirnumber
tif
tif
tif_dirnumber
tif->tif_dirlist = new_dirlist;
tif->tif_dirlist = new_dirlist
tif->tif_dirlist
tif
tif
tif_dirlist
new_dirlist
new_dirlist
tif->tif_dirlist[tif->tif_dirnumber - 1] = diroff;
tif->tif_dirlist[tif->tif_dirnumber - 1] = diroff
tif->tif_dirlist[tif->tif_dirnumber - 1]
tif->tif_dirlist
tif
tif
tif_dirlist
tif->tif_dirnumber - 1
tif->tif_dirnumber
tif
tif
tif_dirnumber
1
diroff
diroff
return 1;
1
-----joern-----
(3,10,0)
(7,8,0)
(2,0,0)
(1,8,0)
(4,10,0)
(6,9,0)
(4,0,0)
(8,5,0)
(0,2,1)
(1,7,1)
(8,1,1)
(8,5,1)
(4,10,1)
(4,0,1)
(3,8,1)
(2,8,1)
(10,3,1)
(4,10,2)
(3,8,2)
(10,8,2)
(2,8,2)
(4,0,2)
(0,8,2)
(8,5,2)
-----------------------------------
(0,return(TIFFReadDirEntryErrRange)
(1,TIFF_INT64_MAX)
(2,TIFFReadDirEntryErrRange)
(3,TIFFReadDirEntryErrOk)
(4,RET)
(5,uint64 value)
(6,if (value > TIFF_INT64_MAX)
(7,value)
(8,value > TIFF_INT64_MAX)
(9,)
(10,return(TIFFReadDirEntryErrOk)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff85f6b26300000000ffffffffffffffff94f6b26300000000ffffffffffffffff94f6b26300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x4d4d002a00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
static int TIFFCheckDirOffset(TIFF* tif, uint64 diroff) {
uint16 n;
if(diroff == 0)
return 0;
=======================
