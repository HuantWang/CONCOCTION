-----label-----
0
-----code-----
int jas_image_getfmt(jas_stream_t *in)
{
	jas_image_fmtinfo_t *fmtinfo;
	int found;
	int i;

	/* Check for data in each of the supported formats. */
	found = 0;
	for (i = 0, fmtinfo = jas_image_fmtinfos; i < jas_image_numfmts; ++i,
	  ++fmtinfo) {
		if (fmtinfo->ops.validate) {
			/* Is the input data valid for this format? */
			JAS_DBGLOG(20, ("testing for format %s ... ", fmtinfo->name));
			if (!(*fmtinfo->ops.validate)(in)) {
				JAS_DBGLOG(20, ("test succeeded\n"));
				found = 1;
				break;
			}
			JAS_DBGLOG(20, ("test failed\n"));
		}
	}
	return found ? fmtinfo->id : (-1);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
22,23
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
34,35
34,36
34,37
34,38
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
44,45
46,47
46,48
47,48
49,50
51,52
51,53
52,53
53,54
55,56
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
66,67
66,68
66,69
67,68
68,69
68,70
68,71
69,70
72,73
73,74
73,75
75,76
75,77
76,77
79,80
79,81
80,81
81,82
81,83
82,83
83,84
84,85
84,86
85,86
85,87
86,87
90,91
92,93
92,94
92,95
93,94
94,95
94,96
94,97
95,96
98,99
100,101
101,102
101,103
102,103
106,107
107,108
107,109
107,110
108,109
111,112
113,114
114,115
114,116
114,117
115,116
117,118
117,119
118,119
121,122
122,123
-----nextToken-----
2,4,7,9,10,15,17,18,21,23,26,28,32,33,39,40,43,45,48,50,54,57,63,64,65,70,71,74,77,78,87,88,89,91,96,97,99,103,104,105,109,110,112,116,119,120,123
-----computeFrom-----
30,31
30,32
37,38
37,39
41,42
41,43
46,47
46,48
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;ReturnStatement;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;LiteralExpression;
-----ast_node-----
int jas_image_getfmt(jas_stream_t *in){	jas_image_fmtinfo_t *fmtinfo;	int found;	int i;	/* Check for data in each of the supported formats. */	found = 0;	for (i = 0, fmtinfo = jas_image_fmtinfos; i < jas_image_numfmts; ++i,	  ++fmtinfo) {		if (fmtinfo->ops.validate) {			/* Is the input data valid for this format? */			JAS_DBGLOG(20, ("testing for format %s ... ", fmtinfo->name));			if (!(*fmtinfo->ops.validate)(in)) {				JAS_DBGLOG(20, ("test succeeded\n"));				found = 1;				break;			}			JAS_DBGLOG(20, ("test failed\n"));		}	}	return found ? fmtinfo->id : (-1);}
int
jas_image_getfmt(jas_stream_t *in)
jas_image_getfmt
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	jas_image_fmtinfo_t *fmtinfo;	int found;	int i;	/* Check for data in each of the supported formats. */	found = 0;	for (i = 0, fmtinfo = jas_image_fmtinfos; i < jas_image_numfmts; ++i,	  ++fmtinfo) {		if (fmtinfo->ops.validate) {			/* Is the input data valid for this format? */			JAS_DBGLOG(20, ("testing for format %s ... ", fmtinfo->name));			if (!(*fmtinfo->ops.validate)(in)) {				JAS_DBGLOG(20, ("test succeeded\n"));				found = 1;				break;			}			JAS_DBGLOG(20, ("test failed\n"));		}	}	return found ? fmtinfo->id : (-1);}
jas_image_fmtinfo_t *fmtinfo;
jas_image_fmtinfo_t *fmtinfo;
jas_image_fmtinfo_t
jas_image_fmtinfo_t
*fmtinfo
*
fmtinfo
int found;
int found;
int
found
found
int i;
int i;
int
i
i
found = 0;
found = 0
found
found
0
for (i = 0, fmtinfo = jas_image_fmtinfos; i < jas_image_numfmts; ++i,	  ++fmtinfo) {		if (fmtinfo->ops.validate) {			/* Is the input data valid for this format? */			JAS_DBGLOG(20, ("testing for format %s ... ", fmtinfo->name));			if (!(*fmtinfo->ops.validate)(in)) {				JAS_DBGLOG(20, ("test succeeded\n"));				found = 1;				break;			}			JAS_DBGLOG(20, ("test failed\n"));		}	}
i = 0, fmtinfo = jas_image_fmtinfos;
i = 0, fmtinfo = jas_image_fmtinfos
i = 0
i
i
0
fmtinfo = jas_image_fmtinfos
fmtinfo
fmtinfo
jas_image_fmtinfos
jas_image_fmtinfos
i < jas_image_numfmts
i
i
jas_image_numfmts
jas_image_numfmts
++i,	  ++fmtinfo
++i
i
i
++fmtinfo
fmtinfo
fmtinfo
{		if (fmtinfo->ops.validate) {			/* Is the input data valid for this format? */			JAS_DBGLOG(20, ("testing for format %s ... ", fmtinfo->name));			if (!(*fmtinfo->ops.validate)(in)) {				JAS_DBGLOG(20, ("test succeeded\n"));				found = 1;				break;			}			JAS_DBGLOG(20, ("test failed\n"));		}	}
if (fmtinfo->ops.validate) {			/* Is the input data valid for this format? */			JAS_DBGLOG(20, ("testing for format %s ... ", fmtinfo->name));			if (!(*fmtinfo->ops.validate)(in)) {				JAS_DBGLOG(20, ("test succeeded\n"));				found = 1;				break;			}			JAS_DBGLOG(20, ("test failed\n"));		}
fmtinfo->ops.validate
fmtinfo->ops
fmtinfo
fmtinfo
ops
validate
{			/* Is the input data valid for this format? */			JAS_DBGLOG(20, ("testing for format %s ... ", fmtinfo->name));			if (!(*fmtinfo->ops.validate)(in)) {				JAS_DBGLOG(20, ("test succeeded\n"));				found = 1;				break;			}			JAS_DBGLOG(20, ("test failed\n"));		}
JAS_DBGLOG(20, ("testing for format %s ... ", fmtinfo->name));
JAS_DBGLOG(20, ("testing for format %s ... ", fmtinfo->name))
JAS_DBGLOG
JAS_DBGLOG
20
("testing for format %s ... ", fmtinfo->name)
"testing for format %s ... ", fmtinfo->name
"testing for format %s ... "
fmtinfo->name
fmtinfo
fmtinfo
name
if (!(*fmtinfo->ops.validate)(in)) {				JAS_DBGLOG(20, ("test succeeded\n"));				found = 1;				break;			}
!(*fmtinfo->ops.validate)(in)
(*fmtinfo->ops.validate)(in)
(*fmtinfo->ops.validate)
*fmtinfo->ops.validate
fmtinfo->ops.validate
fmtinfo->ops
fmtinfo
fmtinfo
ops
validate
in
in
{				JAS_DBGLOG(20, ("test succeeded\n"));				found = 1;				break;			}
JAS_DBGLOG(20, ("test succeeded\n"));
JAS_DBGLOG(20, ("test succeeded\n"))
JAS_DBGLOG
JAS_DBGLOG
20
("test succeeded\n")
"test succeeded\n"
found = 1;
found = 1
found
found
1
break;
JAS_DBGLOG(20, ("test failed\n"));
JAS_DBGLOG(20, ("test failed\n"))
JAS_DBGLOG
JAS_DBGLOG
20
("test failed\n")
"test failed\n"
return found ? fmtinfo->id : (-1);
found ? fmtinfo->id : (-1)
found
found
fmtinfo->id
fmtinfo
fmtinfo
id
(-1)
-1
1
-----joern-----
(28,12,0)
(22,23,0)
(30,28,0)
(18,33,0)
(21,0,0)
(10,17,0)
(24,7,0)
(31,17,0)
(0,1,0)
(13,1,0)
(23,17,0)
(16,14,0)
(1,0,0)
(20,26,0)
(5,29,0)
(1,25,0)
(33,28,0)
(2,1,0)
(27,26,0)
(27,4,0)
(6,0,0)
(26,17,0)
(3,14,0)
(5,28,0)
(23,29,0)
(17,12,0)
(32,5,0)
(1,13,0)
(8,4,0)
(4,14,0)
(26,11,0)
(15,14,0)
(0,17,0)
(19,33,0)
(9,28,0)
(5,28,1)
(23,22,1)
(33,28,1)
(10,31,1)
(6,21,1)
(27,26,1)
(33,19,1)
(0,6,1)
(18,17,1)
(26,17,1)
(27,4,1)
(31,28,1)
(1,25,1)
(21,33,1)
(1,2,1)
(8,33,1)
(17,10,1)
(19,18,1)
(13,1,1)
(1,0,1)
(0,17,1)
(28,9,1)
(9,30,1)
(23,17,1)
(2,0,1)
(5,32,1)
(20,13,1)
(18,23,1)
(32,13,1)
(26,20,1)
(22,5,1)
(4,8,1)
(8,33,2)
(2,33,2)
(0,17,2)
(1,0,2)
(32,13,2)
(21,33,2)
(19,13,2)
(33,28,2)
(22,13,2)
(0,33,2)
(13,33,2)
(6,33,2)
(18,13,2)
(26,17,2)
(33,13,2)
(5,13,2)
(26,13,2)
(4,33,2)
(1,33,2)
(27,26,2)
(5,28,2)
(20,13,2)
(27,4,2)
(1,25,2)
(13,1,2)
(23,17,2)
(23,13,2)
-----------------------------------
(0,fmtinfo->name)
(1,strcmp(fmtinfo->name, name)
(2,name)
(3,for (i = 0, fmtinfo = jas_image_fmtinfos; i < jas_image_numfmts; ++i, ++fmtinfo)
(4,return 0;)
(5,++i)
(6,name)
(7,)
(8,0)
(9,0)
(10,jas_image_fmtinfos)
(11,)
(12,)
(13,!strcmp(fmtinfo->name, name)
(14,)
(15,fmtinfo)
(16,i)
(17,fmtinfo = jas_image_fmtinfos)
(18,i)
(19,jas_image_numfmts)
(20,fmtinfo)
(21,fmtinfo)
(22,fmtinfo)
(23,++fmtinfo)
(24,if (!strcmp(fmtinfo->name, name)
(25,const char *name)
(26,return fmtinfo;)
(27,RET)
(28,i = 0)
(29,)
(30,i)
(31,fmtinfo)
(32,i)
(33,i < jas_image_numfmts)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffe694ad6300000000ffffffffffffffffbea0ad6300000000ffffffffffffffffbea0ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x42000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
int jas_image_getfmt(jas_stream_t *in) {
jas_image_fmtinfo_t *fmtinfo;
int found;
int i;
found = 0;
for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo)
if(fmtinfo->ops.validate)
JAS_DBGLOG(20, ('testing for format _s ... ', fmtinfo->name));
JAS_DBGLOG(20, ('test failed '));
for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo)
if(fmtinfo->ops.validate)
JAS_DBGLOG(20, ('testing for format _s ... ', fmtinfo->name));
JAS_DBGLOG(20, ('test failed '));
for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo)
if(fmtinfo->ops.validate)
JAS_DBGLOG(20, ('testing for format _s ... ', fmtinfo->name));
JAS_DBGLOG(20, ('test failed '));
for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo)
if(fmtinfo->ops.validate)
JAS_DBGLOG(20, ('testing for format _s ... ', fmtinfo->name));
JAS_DBGLOG(20, ('test failed '));
for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo)
if(fmtinfo->ops.validate)
JAS_DBGLOG(20, ('testing for format _s ... ', fmtinfo->name));
JAS_DBGLOG(20, ('test failed '));
for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo)
if(fmtinfo->ops.validate)
JAS_DBGLOG(20, ('testing for format _s ... ', fmtinfo->name));
JAS_DBGLOG(20, ('test failed '));
for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo)
if(fmtinfo->ops.validate)
JAS_DBGLOG(20, ('testing for format _s ... ', fmtinfo->name));
JAS_DBGLOG(20, ('test failed '));
for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo)
if(fmtinfo->ops.validate)
JAS_DBGLOG(20, ('testing for format _s ... ', fmtinfo->name));
JAS_DBGLOG(20, ('test failed '));
for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo)
if(fmtinfo->ops.validate)
JAS_DBGLOG(20, ('testing for format _s ... ', fmtinfo->name));
JAS_DBGLOG(20, ('test failed '));
for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo)
if(fmtinfo->ops.validate)
JAS_DBGLOG(20, ('testing for format _s ... ', fmtinfo->name));
JAS_DBGLOG(20, ('test failed '));
return found ? fmtinfo->id : (-1);
=======================
