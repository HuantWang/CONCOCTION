-----label-----
0
-----code-----
int jpc_getzcctxno(int f, int orient)
{
	int h;
	int v;
	int d;
	int n;
	int t;
	int hv;

	/* Avoid compiler warning. */
	n = 0;

	h = ((f & JPC_WSIG) != 0) + ((f & JPC_ESIG) != 0);
	v = ((f & JPC_NSIG) != 0) + ((f & JPC_SSIG) != 0);
	d = ((f & JPC_NWSIG) != 0) + ((f & JPC_NESIG) != 0) + ((f & JPC_SESIG) != 0) + ((f & JPC_SWSIG) != 0);
	switch (orient) {
	case JPC_TSFB_HL:
		t = h;
		h = v;
		v = t;
	case JPC_TSFB_LL:
	case JPC_TSFB_LH:
		if (!h) {
			if (!v) {
				if (!d) {
					n = 0;
				} else if (d == 1) {
					n = 1;
				} else {
					n = 2;
				}
			} else if (v == 1) {
				n = 3;
			} else {
				n = 4;
			}
		} else if (h == 1) {
			if (!v) {
				if (!d) {
					n = 5;
				} else {
					n = 6;
				}
			} else {
				n = 7;
			}
		} else {
			n = 8;
		}
		break;
	case JPC_TSFB_HH:
		hv = h + v;
		if (!d) {
			if (!hv) {
				n = 0;
			} else if (hv == 1) {
				n = 1;
			} else {
				n = 2;
			}
		} else if (d == 1) {
			if (!hv) {
				n = 3;
			} else if (hv == 1) {
				n = 4;
			} else {
				n = 5;
			}
		} else if (d == 2) {
			if (!hv) {
				n = 6;
			} else {
				n = 7;
			}
		} else {
			n = 8;
		}
		break;
	}
	assert(n < JPC_NUMZCCTXS);
	return JPC_ZCCTXNO + n;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
11,12
13,14
13,15
13,16
13,17
13,18
13,19
13,20
13,21
13,22
13,23
13,24
13,25
13,26
14,15
15,16
15,17
17,18
19,20
20,21
20,22
22,23
24,25
25,26
25,27
27,28
29,30
30,31
30,32
32,33
34,35
35,36
35,37
37,38
39,40
40,41
40,42
42,43
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
53,54
53,55
54,55
55,56
55,57
56,57
57,58
57,59
58,59
60,61
63,64
64,65
64,66
65,66
66,67
66,68
67,68
69,70
72,73
73,74
73,75
74,75
76,77
76,78
77,78
78,79
78,80
79,80
80,81
80,82
81,82
83,84
86,87
87,88
87,89
88,89
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
99,100
99,101
100,101
100,102
101,102
101,103
102,103
103,104
103,105
104,105
105,106
105,107
106,107
108,109
111,112
112,113
112,114
113,114
114,115
114,116
115,116
117,118
120,121
121,122
121,123
122,123
123,124
123,125
124,125
126,127
129,130
130,131
130,132
131,132
132,133
132,134
133,134
135,136
138,139
138,140
139,140
141,142
141,143
141,144
141,145
141,146
141,147
141,148
141,149
141,150
141,151
141,152
141,153
142,143
143,144
145,146
146,147
146,148
147,148
149,150
151,152
152,153
152,154
153,154
155,156
157,158
158,159
158,160
159,160
161,162
163,164
164,165
166,167
167,168
169,170
169,171
169,172
170,171
171,172
173,174
174,175
174,176
174,177
175,176
176,177
178,179
179,180
179,181
179,182
180,181
181,182
183,184
184,185
185,186
185,187
186,187
189,190
189,191
189,192
190,191
190,192
191,192
194,195
195,196
196,197
196,198
197,198
200,201
201,202
202,203
202,204
203,204
206,207
206,208
206,209
207,208
207,209
208,209
211,212
212,213
213,214
213,215
214,215
217,218
218,219
219,220
219,221
220,221
223,224
223,225
223,226
224,225
224,226
225,226
228,229
229,230
229,231
229,232
230,231
231,232
233,234
234,235
234,236
234,237
235,236
236,237
238,239
239,240
240,241
240,242
241,242
244,245
245,246
246,247
246,248
247,248
250,251
251,252
252,253
252,254
253,254
256,257
257,258
258,259
258,260
259,260
263,264
264,265
266,267
267,268
267,269
268,269
270,271
270,272
271,272
273,274
275,276
275,277
275,278
276,277
277,278
279,280
280,281
280,282
280,283
281,282
282,283
284,285
285,286
286,287
286,288
287,288
290,291
290,292
290,293
291,292
291,293
292,293
295,296
296,297
297,298
297,299
298,299
301,302
302,303
303,304
303,305
304,305
307,308
307,309
307,310
308,309
308,310
309,310
312,313
313,314
313,315
313,316
314,315
315,316
317,318
318,319
319,320
319,321
320,321
323,324
323,325
323,326
324,325
324,326
325,326
328,329
329,330
330,331
330,332
331,332
334,335
335,336
336,337
336,338
337,338
340,341
340,342
340,343
341,342
341,343
342,343
345,346
346,347
346,348
346,349
347,348
348,349
350,351
351,352
352,353
352,354
353,354
356,357
357,358
358,359
358,360
359,360
362,363
363,364
364,365
364,366
365,366
369,370
370,371
370,372
371,372
373,374
373,375
374,375
376,377
378,379
379,380
379,381
380,381
382,383
-----nextToken-----
2,4,6,8,10,12,16,18,21,23,26,28,31,33,36,38,41,43,47,48,52,59,61,62,68,70,71,75,82,84,85,91,93,94,98,107,109,110,116,118,119,125,127,128,134,136,137,140,144,148,150,154,156,160,162,165,168,172,177,182,187,188,192,193,198,199,204,205,209,210,215,216,221,222,226,227,232,237,242,243,248,249,254,255,260,261,262,265,269,272,274,278,283,288,289,293,294,299,300,305,306,310,311,316,321,322,326,327,332,333,338,339,343,344,349,354,355,360,361,366,367,368,372,375,377,381,383
-----computeFrom-----
45,46
45,47
50,51
50,52
53,54
53,55
55,56
55,57
57,58
57,59
64,65
64,66
66,67
66,68
73,74
73,75
76,77
76,78
78,79
78,80
80,81
80,82
87,88
87,89
89,90
89,91
96,97
96,98
99,100
99,101
100,101
100,102
101,102
101,103
103,104
103,105
105,106
105,107
112,113
112,114
114,115
114,116
121,122
121,123
123,124
123,125
130,131
130,132
132,133
132,134
146,147
146,148
152,153
152,154
158,159
158,160
185,186
185,187
190,191
190,192
196,197
196,198
202,203
202,204
207,208
207,209
213,214
213,215
219,220
219,221
224,225
224,226
240,241
240,242
246,247
246,248
252,253
252,254
258,259
258,260
267,268
267,269
270,271
270,272
286,287
286,288
291,292
291,293
297,298
297,299
303,304
303,305
308,309
308,310
319,320
319,321
324,325
324,326
330,331
330,332
336,337
336,338
341,342
341,343
352,353
352,354
358,359
358,360
364,365
364,366
373,374
373,375
379,380
379,381
-----guardedBy-----
-----guardedByNegation-----
310,343
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
int jpc_getzcctxno(int f, int orient){	int h;	int v;	int d;	int n;	int t;	int hv;	/* Avoid compiler warning. */	n = 0;	h = ((f & JPC_WSIG) != 0) + ((f & JPC_ESIG) != 0);	v = ((f & JPC_NSIG) != 0) + ((f & JPC_SSIG) != 0);	d = ((f & JPC_NWSIG) != 0) + ((f & JPC_NESIG) != 0) + ((f & JPC_SESIG) != 0) + ((f & JPC_SWSIG) != 0);	switch (orient) {	case JPC_TSFB_HL:		t = h;		h = v;		v = t;	case JPC_TSFB_LL:	case JPC_TSFB_LH:		if (!h) {			if (!v) {				if (!d) {					n = 0;				} else if (d == 1) {					n = 1;				} else {					n = 2;				}			} else if (v == 1) {				n = 3;			} else {				n = 4;			}		} else if (h == 1) {			if (!v) {				if (!d) {					n = 5;				} else {					n = 6;				}			} else {				n = 7;			}		} else {			n = 8;		}		break;	case JPC_TSFB_HH:		hv = h + v;		if (!d) {			if (!hv) {				n = 0;			} else if (hv == 1) {				n = 1;			} else {				n = 2;			}		} else if (d == 1) {			if (!hv) {				n = 3;			} else if (hv == 1) {				n = 4;			} else {				n = 5;			}		} else if (d == 2) {			if (!hv) {				n = 6;			} else {				n = 7;			}		} else {			n = 8;		}		break;	}	assert(n < JPC_NUMZCCTXS);	return JPC_ZCCTXNO + n;}
int
jpc_getzcctxno(int f, int orient)
jpc_getzcctxno
int f
int
f
f
int orient
int
orient
orient
{	int h;	int v;	int d;	int n;	int t;	int hv;	/* Avoid compiler warning. */	n = 0;	h = ((f & JPC_WSIG) != 0) + ((f & JPC_ESIG) != 0);	v = ((f & JPC_NSIG) != 0) + ((f & JPC_SSIG) != 0);	d = ((f & JPC_NWSIG) != 0) + ((f & JPC_NESIG) != 0) + ((f & JPC_SESIG) != 0) + ((f & JPC_SWSIG) != 0);	switch (orient) {	case JPC_TSFB_HL:		t = h;		h = v;		v = t;	case JPC_TSFB_LL:	case JPC_TSFB_LH:		if (!h) {			if (!v) {				if (!d) {					n = 0;				} else if (d == 1) {					n = 1;				} else {					n = 2;				}			} else if (v == 1) {				n = 3;			} else {				n = 4;			}		} else if (h == 1) {			if (!v) {				if (!d) {					n = 5;				} else {					n = 6;				}			} else {				n = 7;			}		} else {			n = 8;		}		break;	case JPC_TSFB_HH:		hv = h + v;		if (!d) {			if (!hv) {				n = 0;			} else if (hv == 1) {				n = 1;			} else {				n = 2;			}		} else if (d == 1) {			if (!hv) {				n = 3;			} else if (hv == 1) {				n = 4;			} else {				n = 5;			}		} else if (d == 2) {			if (!hv) {				n = 6;			} else {				n = 7;			}		} else {			n = 8;		}		break;	}	assert(n < JPC_NUMZCCTXS);	return JPC_ZCCTXNO + n;}
int h;
int h;
int
h
h
int v;
int v;
int
v
v
int d;
int d;
int
d
d
int n;
int n;
int
n
n
int t;
int t;
int
t
t
int hv;
int hv;
int
hv
hv
n = 0;
n = 0
n
n
0
h = ((f & JPC_WSIG) != 0) + ((f & JPC_ESIG) != 0);
h = ((f & JPC_WSIG) != 0) + ((f & JPC_ESIG) != 0)
h
h
((f & JPC_WSIG) != 0) + ((f & JPC_ESIG) != 0)
((f & JPC_WSIG) != 0)
(f & JPC_WSIG) != 0
(f & JPC_WSIG)
f & JPC_WSIG
f
f
JPC_WSIG
JPC_WSIG
0
((f & JPC_ESIG) != 0)
(f & JPC_ESIG) != 0
(f & JPC_ESIG)
f & JPC_ESIG
f
f
JPC_ESIG
JPC_ESIG
0
v = ((f & JPC_NSIG) != 0) + ((f & JPC_SSIG) != 0);
v = ((f & JPC_NSIG) != 0) + ((f & JPC_SSIG) != 0)
v
v
((f & JPC_NSIG) != 0) + ((f & JPC_SSIG) != 0)
((f & JPC_NSIG) != 0)
(f & JPC_NSIG) != 0
(f & JPC_NSIG)
f & JPC_NSIG
f
f
JPC_NSIG
JPC_NSIG
0
((f & JPC_SSIG) != 0)
(f & JPC_SSIG) != 0
(f & JPC_SSIG)
f & JPC_SSIG
f
f
JPC_SSIG
JPC_SSIG
0
d = ((f & JPC_NWSIG) != 0) + ((f & JPC_NESIG) != 0) + ((f & JPC_SESIG) != 0) + ((f & JPC_SWSIG) != 0);
d = ((f & JPC_NWSIG) != 0) + ((f & JPC_NESIG) != 0) + ((f & JPC_SESIG) != 0) + ((f & JPC_SWSIG) != 0)
d
d
((f & JPC_NWSIG) != 0) + ((f & JPC_NESIG) != 0) + ((f & JPC_SESIG) != 0) + ((f & JPC_SWSIG) != 0)
((f & JPC_NWSIG) != 0) + ((f & JPC_NESIG) != 0) + ((f & JPC_SESIG) != 0)
((f & JPC_NWSIG) != 0) + ((f & JPC_NESIG) != 0)
((f & JPC_NWSIG) != 0)
(f & JPC_NWSIG) != 0
(f & JPC_NWSIG)
f & JPC_NWSIG
f
f
JPC_NWSIG
JPC_NWSIG
0
((f & JPC_NESIG) != 0)
(f & JPC_NESIG) != 0
(f & JPC_NESIG)
f & JPC_NESIG
f
f
JPC_NESIG
JPC_NESIG
0
((f & JPC_SESIG) != 0)
(f & JPC_SESIG) != 0
(f & JPC_SESIG)
f & JPC_SESIG
f
f
JPC_SESIG
JPC_SESIG
0
((f & JPC_SWSIG) != 0)
(f & JPC_SWSIG) != 0
(f & JPC_SWSIG)
f & JPC_SWSIG
f
f
JPC_SWSIG
JPC_SWSIG
0
switch (orient) {	case JPC_TSFB_HL:		t = h;		h = v;		v = t;	case JPC_TSFB_LL:	case JPC_TSFB_LH:		if (!h) {			if (!v) {				if (!d) {					n = 0;				} else if (d == 1) {					n = 1;				} else {					n = 2;				}			} else if (v == 1) {				n = 3;			} else {				n = 4;			}		} else if (h == 1) {			if (!v) {				if (!d) {					n = 5;				} else {					n = 6;				}			} else {				n = 7;			}		} else {			n = 8;		}		break;	case JPC_TSFB_HH:		hv = h + v;		if (!d) {			if (!hv) {				n = 0;			} else if (hv == 1) {				n = 1;			} else {				n = 2;			}		} else if (d == 1) {			if (!hv) {				n = 3;			} else if (hv == 1) {				n = 4;			} else {				n = 5;			}		} else if (d == 2) {			if (!hv) {				n = 6;			} else {				n = 7;			}		} else {			n = 8;		}		break;	}
orient
orient
{	case JPC_TSFB_HL:		t = h;		h = v;		v = t;	case JPC_TSFB_LL:	case JPC_TSFB_LH:		if (!h) {			if (!v) {				if (!d) {					n = 0;				} else if (d == 1) {					n = 1;				} else {					n = 2;				}			} else if (v == 1) {				n = 3;			} else {				n = 4;			}		} else if (h == 1) {			if (!v) {				if (!d) {					n = 5;				} else {					n = 6;				}			} else {				n = 7;			}		} else {			n = 8;		}		break;	case JPC_TSFB_HH:		hv = h + v;		if (!d) {			if (!hv) {				n = 0;			} else if (hv == 1) {				n = 1;			} else {				n = 2;			}		} else if (d == 1) {			if (!hv) {				n = 3;			} else if (hv == 1) {				n = 4;			} else {				n = 5;			}		} else if (d == 2) {			if (!hv) {				n = 6;			} else {				n = 7;			}		} else {			n = 8;		}		break;	}
case JPC_TSFB_HL:
JPC_TSFB_HL
JPC_TSFB_HL
t = h;
t = h
t
t
h
h
h = v;
h = v
h
h
v
v
v = t;
v = t
v
v
t
t
case JPC_TSFB_LL:
JPC_TSFB_LL
JPC_TSFB_LL
case JPC_TSFB_LH:
JPC_TSFB_LH
JPC_TSFB_LH
if (!h) {			if (!v) {				if (!d) {					n = 0;				} else if (d == 1) {					n = 1;				} else {					n = 2;				}			} else if (v == 1) {				n = 3;			} else {				n = 4;			}		} else if (h == 1) {			if (!v) {				if (!d) {					n = 5;				} else {					n = 6;				}			} else {				n = 7;			}		} else {			n = 8;		}
!h
h
h
{			if (!v) {				if (!d) {					n = 0;				} else if (d == 1) {					n = 1;				} else {					n = 2;				}			} else if (v == 1) {				n = 3;			} else {				n = 4;			}		}
if (!v) {				if (!d) {					n = 0;				} else if (d == 1) {					n = 1;				} else {					n = 2;				}			} else if (v == 1) {				n = 3;			} else {				n = 4;			}
!v
v
v
{				if (!d) {					n = 0;				} else if (d == 1) {					n = 1;				} else {					n = 2;				}			}
if (!d) {					n = 0;				} else if (d == 1) {					n = 1;				} else {					n = 2;				}
!d
d
d
{					n = 0;				}
n = 0;
n = 0
n
n
0
if (d == 1) {					n = 1;				} else {					n = 2;				}
d == 1
d
d
1
{					n = 1;				}
n = 1;
n = 1
n
n
1
{					n = 2;				}
n = 2;
n = 2
n
n
2
if (v == 1) {				n = 3;			} else {				n = 4;			}
v == 1
v
v
1
{				n = 3;			}
n = 3;
n = 3
n
n
3
{				n = 4;			}
n = 4;
n = 4
n
n
4
if (h == 1) {			if (!v) {				if (!d) {					n = 5;				} else {					n = 6;				}			} else {				n = 7;			}		} else {			n = 8;		}
h == 1
h
h
1
{			if (!v) {				if (!d) {					n = 5;				} else {					n = 6;				}			} else {				n = 7;			}		}
if (!v) {				if (!d) {					n = 5;				} else {					n = 6;				}			} else {				n = 7;			}
!v
v
v
{				if (!d) {					n = 5;				} else {					n = 6;				}			}
if (!d) {					n = 5;				} else {					n = 6;				}
!d
d
d
{					n = 5;				}
n = 5;
n = 5
n
n
5
{					n = 6;				}
n = 6;
n = 6
n
n
6
{				n = 7;			}
n = 7;
n = 7
n
n
7
{			n = 8;		}
n = 8;
n = 8
n
n
8
break;
case JPC_TSFB_HH:
JPC_TSFB_HH
JPC_TSFB_HH
hv = h + v;
hv = h + v
hv
hv
h + v
h
h
v
v
if (!d) {			if (!hv) {				n = 0;			} else if (hv == 1) {				n = 1;			} else {				n = 2;			}		} else if (d == 1) {			if (!hv) {				n = 3;			} else if (hv == 1) {				n = 4;			} else {				n = 5;			}		} else if (d == 2) {			if (!hv) {				n = 6;			} else {				n = 7;			}		} else {			n = 8;		}
!d
d
d
{			if (!hv) {				n = 0;			} else if (hv == 1) {				n = 1;			} else {				n = 2;			}		}
if (!hv) {				n = 0;			} else if (hv == 1) {				n = 1;			} else {				n = 2;			}
!hv
hv
hv
{				n = 0;			}
n = 0;
n = 0
n
n
0
if (hv == 1) {				n = 1;			} else {				n = 2;			}
hv == 1
hv
hv
1
{				n = 1;			}
n = 1;
n = 1
n
n
1
{				n = 2;			}
n = 2;
n = 2
n
n
2
if (d == 1) {			if (!hv) {				n = 3;			} else if (hv == 1) {				n = 4;			} else {				n = 5;			}		} else if (d == 2) {			if (!hv) {				n = 6;			} else {				n = 7;			}		} else {			n = 8;		}
d == 1
d
d
1
{			if (!hv) {				n = 3;			} else if (hv == 1) {				n = 4;			} else {				n = 5;			}		}
if (!hv) {				n = 3;			} else if (hv == 1) {				n = 4;			} else {				n = 5;			}
!hv
hv
hv
{				n = 3;			}
n = 3;
n = 3
n
n
3
if (hv == 1) {				n = 4;			} else {				n = 5;			}
hv == 1
hv
hv
1
{				n = 4;			}
n = 4;
n = 4
n
n
4
{				n = 5;			}
n = 5;
n = 5
n
n
5
if (d == 2) {			if (!hv) {				n = 6;			} else {				n = 7;			}		} else {			n = 8;		}
d == 2
d
d
2
{			if (!hv) {				n = 6;			} else {				n = 7;			}		}
if (!hv) {				n = 6;			} else {				n = 7;			}
!hv
hv
hv
{				n = 6;			}
n = 6;
n = 6
n
n
6
{				n = 7;			}
n = 7;
n = 7
n
n
7
{			n = 8;		}
n = 8;
n = 8
n
n
8
break;
assert(n < JPC_NUMZCCTXS);
assert(n < JPC_NUMZCCTXS)
assert
assert
n < JPC_NUMZCCTXS
n
n
JPC_NUMZCCTXS
JPC_NUMZCCTXS
return JPC_ZCCTXNO + n;
JPC_ZCCTXNO + n
JPC_ZCCTXNO
JPC_ZCCTXNO
n
n
-----joern-----
(149,151,0)
(199,220,0)
(79,210,0)
(62,65,0)
(85,31,0)
(151,147,0)
(147,151,0)
(175,23,0)
(135,215,0)
(111,220,0)
(15,79,0)
(166,101,0)
(150,154,0)
(38,18,0)
(56,218,0)
(178,112,0)
(54,141,0)
(187,179,0)
(224,162,0)
(70,130,0)
(28,151,0)
(110,224,0)
(103,136,0)
(19,1,0)
(94,111,0)
(29,161,0)
(175,107,0)
(55,29,0)
(96,134,0)
(18,38,0)
(213,51,0)
(190,189,0)
(185,181,0)
(196,129,0)
(235,134,0)
(31,85,0)
(17,72,0)
(113,115,0)
(197,115,0)
(114,16,0)
(216,0,0)
(49,201,0)
(140,161,0)
(205,162,0)
(61,136,0)
(42,130,0)
(164,0,0)
(161,29,0)
(66,175,0)
(157,164,0)
(94,184,0)
(10,168,0)
(47,130,0)
(71,132,0)
(8,210,0)
(130,42,0)
(209,187,0)
(16,222,0)
(207,154,0)
(3,58,0)
(229,202,0)
(20,101,0)
(159,36,0)
(43,0,0)
(117,28,0)
(154,66,0)
(130,47,0)
(1,101,0)
(92,51,0)
(222,16,0)
(61,189,0)
(137,187,0)
(27,194,0)
(172,131,0)
(131,74,0)
(118,25,0)
(188,117,0)
(171,235,0)
(2,19,0)
(115,74,0)
(193,25,0)
(163,33,0)
(34,51,0)
(167,11,0)
(21,209,0)
(203,215,0)
(107,175,0)
(23,175,0)
(5,128,0)
(123,107,0)
(83,126,0)
(35,109,0)
(138,70,0)
(86,147,0)
(53,99,0)
(130,70,0)
(58,210,0)
(112,0,0)
(134,210,0)
(237,62,0)
(185,134,0)
(177,36,0)
(131,81,0)
(37,11,0)
(145,165,0)
(70,59,0)
(161,140,0)
(16,214,0)
(50,37,0)
(201,101,0)
(155,42,0)
(146,112,0)
(33,134,0)
(195,181,0)
(124,126,0)
(206,126,0)
(41,80,0)
(227,136,0)
(168,101,0)
(47,58,0)
(149,165,0)
(179,187,0)
(144,61,0)
(215,120,0)
(62,0,0)
(66,154,0)
(82,212,0)
(32,106,0)
(122,235,0)
(9,22,0)
(1,19,0)
(231,162,0)
(99,220,0)
(119,179,0)
(167,97,0)
(222,74,0)
(121,185,0)
(192,132,0)
(184,94,0)
(187,137,0)
(58,221,0)
(174,56,0)
(11,37,0)
(44,17,0)
(18,210,0)
(52,159,0)
(38,85,0)
(91,227,0)
(100,50,0)
(149,56,0)
(40,149,0)
(125,214,0)
(108,166,0)
(200,1,0)
(181,210,0)
(52,78,0)
(228,137,0)
(97,167,0)
(204,47,0)
(129,212,0)
(175,66,0)
(2,48,0)
(30,220,0)
(36,159,0)
(209,87,0)
(23,181,0)
(153,198,0)
(134,111,0)
(60,166,0)
(46,222,0)
(147,58,0)
(12,51,0)
(158,74,0)
(135,81,0)
(81,214,0)
(19,2,0)
(59,167,0)
(37,210,0)
(88,31,0)
(24,101,0)
(68,199,0)
(111,134,0)
(223,43,0)
(159,72,0)
(127,129,0)
(238,136,0)
(45,131,0)
(234,99,0)
(221,134,0)
(66,80,0)
(78,210,0)
(109,214,0)
(154,150,0)
(156,149,0)
(211,0,0)
(61,144,0)
(187,209,0)
(64,144,0)
(26,51,0)
(104,224,0)
(57,164,0)
(14,50,0)
(189,162,0)
(95,148,0)
(198,220,0)
(28,117,0)
(151,149,0)
(182,107,0)
(176,199,0)
(81,135,0)
(106,74,0)
(111,94,0)
(232,162,0)
(93,23,0)
(140,8,0)
(87,85,0)
(56,33,0)
(28,17,0)
(76,79,0)
(191,47,0)
(173,222,0)
(25,220,0)
(167,59,0)
(142,212,0)
(165,235,0)
(80,66,0)
(54,65,0)
(181,185,0)
(78,52,0)
(139,33,0)
(81,131,0)
(79,134,0)
(183,109,0)
(4,97,0)
(6,214,0)
(180,51,0)
(206,13,0)
(85,87,0)
(50,220,0)
(203,16,0)
(11,167,0)
(127,220,0)
(137,79,0)
(202,198,0)
(133,184,0)
(201,2,0)
(217,61,0)
(132,136,0)
(160,189,0)
(194,214,0)
(87,209,0)
(233,137,0)
(212,129,0)
(75,203,0)
(152,23,0)
(107,79,0)
(126,162,0)
(235,165,0)
(144,206,0)
(72,17,0)
(170,51,0)
(63,210,0)
(84,74,0)
(148,220,0)
(219,1,0)
(85,38,0)
(164,54,0)
(102,51,0)
(25,18,0)
(221,58,0)
(159,52,0)
(99,78,0)
(39,147,0)
(198,202,0)
(33,56,0)
(65,62,0)
(150,161,0)
(169,51,0)
(116,202,0)
(225,221,0)
(73,51,0)
(215,135,0)
(59,70,0)
(129,127,0)
(89,62,0)
(151,28,0)
(7,51,0)
(161,150,0)
(69,51,0)
(17,28,0)
(126,136,0)
(165,186,0)
(143,220,0)
(236,81,0)
(208,127,0)
(199,8,0)
(189,61,0)
(230,111,0)
(98,131,0)
(72,159,0)
(90,221,0)
(8,140,0)
(65,54,0)
(105,201,0)
(16,203,0)
(226,185,0)
(126,206,0)
(77,205,0)
(222,74,1)
(53,56,1)
(70,138,1)
(162,231,1)
(219,201,1)
(57,157,1)
(225,90,1)
(132,71,1)
(70,130,1)
(139,163,1)
(32,109,1)
(132,136,1)
(204,191,1)
(159,72,1)
(79,76,1)
(149,56,1)
(29,55,1)
(78,52,1)
(47,58,1)
(193,118,1)
(140,161,1)
(145,127,1)
(233,25,1)
(99,220,1)
(112,0,1)
(151,147,1)
(200,219,1)
(182,123,1)
(1,101,1)
(155,47,1)
(56,33,1)
(199,220,1)
(89,164,1)
(238,224,1)
(42,155,1)
(16,214,1)
(166,101,1)
(202,116,1)
(113,197,1)
(231,232,1)
(68,181,1)
(95,37,1)
(98,172,1)
(224,104,1)
(74,84,1)
(52,159,1)
(183,214,1)
(126,124,1)
(72,17,1)
(126,136,1)
(161,29,1)
(195,79,1)
(236,131,1)
(112,146,1)
(47,204,1)
(199,176,1)
(116,229,1)
(45,172,1)
(197,106,1)
(15,134,1)
(168,101,1)
(222,46,1)
(43,223,1)
(189,162,1)
(173,75,1)
(66,175,1)
(55,150,1)
(37,11,1)
(110,162,1)
(206,126,1)
(50,14,1)
(134,111,1)
(221,134,1)
(187,137,1)
(212,82,1)
(111,220,1)
(107,182,1)
(227,136,1)
(43,0,1)
(54,65,1)
(211,216,1)
(205,77,1)
(10,2,1)
(18,38,1)
(16,222,1)
(90,3,1)
(131,74,1)
(80,41,1)
(28,151,1)
(77,132,1)
(230,96,1)
(107,79,1)
(175,23,1)
(226,121,1)
(157,112,1)
(207,66,1)
(227,91,1)
(220,143,1)
(46,173,1)
(4,59,1)
(118,8,1)
(184,133,1)
(91,206,1)
(163,174,1)
(61,136,1)
(21,187,1)
(166,60,1)
(215,135,1)
(131,98,1)
(147,86,1)
(17,28,1)
(104,110,1)
(121,195,1)
(122,171,1)
(214,6,1)
(108,168,1)
(36,177,1)
(106,74,1)
(232,170,1)
(223,54,1)
(109,214,1)
(31,88,1)
(136,103,1)
(146,178,1)
(81,131,1)
(83,144,1)
(235,134,1)
(3,18,1)
(59,70,1)
(183,194,1)
(152,107,1)
(217,189,1)
(61,217,1)
(119,137,1)
(71,192,1)
(65,62,1)
(229,153,1)
(25,220,1)
(228,233,1)
(35,183,1)
(129,212,1)
(147,58,1)
(25,193,1)
(86,39,1)
(154,66,1)
(109,35,1)
(117,188,1)
(87,209,1)
(114,222,1)
(149,40,1)
(187,179,1)
(192,227,1)
(64,132,1)
(125,115,1)
(194,27,1)
(131,45,1)
(123,199,1)
(20,24,1)
(24,112,1)
(203,16,1)
(148,95,1)
(158,166,1)
(28,117,1)
(30,115,1)
(175,107,1)
(150,154,1)
(192,136,1)
(127,220,1)
(198,220,1)
(84,158,1)
(94,184,1)
(62,0,1)
(188,151,1)
(194,214,1)
(50,220,1)
(178,0,1)
(108,101,1)
(110,205,1)
(81,214,1)
(208,58,1)
(17,44,1)
(14,100,1)
(133,230,1)
(165,235,1)
(164,0,1)
(2,19,1)
(101,20,1)
(85,87,1)
(154,207,1)
(126,162,1)
(148,220,1)
(160,190,1)
(196,208,1)
(197,74,1)
(6,125,1)
(105,166,1)
(137,79,1)
(167,97,1)
(181,185,1)
(106,32,1)
(33,139,1)
(124,83,1)
(137,228,1)
(81,236,1)
(100,78,1)
(60,108,1)
(79,134,1)
(82,142,1)
(168,10,1)
(33,134,1)
(67,198,1)
(23,181,1)
(58,221,1)
(156,147,1)
(176,68,1)
(62,237,1)
(41,175,1)
(191,50,1)
(75,109,1)
(144,61,1)
(23,93,1)
(235,122,1)
(198,202,1)
(53,165,1)
(221,225,1)
(11,167,1)
(111,94,1)
(61,189,1)
(159,36,1)
(66,80,1)
(115,74,1)
(143,30,1)
(93,152,1)
(172,203,1)
(189,160,1)
(153,148,1)
(49,105,1)
(99,234,1)
(27,215,1)
(185,226,1)
(237,89,1)
(167,59,1)
(149,165,1)
(0,211,1)
(44,28,1)
(171,145,1)
(130,42,1)
(135,81,1)
(142,196,1)
(153,220,1)
(38,85,1)
(174,127,1)
(179,119,1)
(16,114,1)
(39,99,1)
(88,87,1)
(164,57,1)
(205,162,1)
(8,140,1)
(185,134,1)
(178,43,1)
(151,149,1)
(216,224,1)
(161,150,1)
(201,101,1)
(177,72,1)
(76,15,1)
(96,198,1)
(130,47,1)
(190,64,1)
(19,1,1)
(97,4,1)
(40,156,1)
(115,113,1)
(201,49,1)
(138,130,1)
(127,129,1)
(209,187,1)
(85,31,1)
(234,53,1)
(1,200,1)
(209,21,1)
(103,238,1)
(224,162,1)
(87,198,2)
(119,198,2)
(95,198,2)
(39,198,2)
(150,154,2)
(166,166,2)
(62,112,2)
(165,127,2)
(132,224,2)
(126,162,2)
(235,134,2)
(201,101,2)
(45,172,2)
(176,198,2)
(151,198,2)
(115,74,2)
(82,198,2)
(81,214,2)
(65,112,2)
(14,198,2)
(137,198,2)
(228,198,2)
(195,198,2)
(146,112,2)
(166,101,2)
(140,161,2)
(89,112,2)
(164,112,2)
(33,134,2)
(221,134,2)
(133,198,2)
(66,80,2)
(106,74,2)
(148,220,2)
(32,115,2)
(153,198,2)
(107,79,2)
(205,224,2)
(19,166,2)
(127,198,2)
(111,198,2)
(114,109,2)
(183,109,2)
(206,132,2)
(81,131,2)
(234,198,2)
(212,198,2)
(187,137,2)
(78,52,2)
(71,224,2)
(68,198,2)
(70,130,2)
(148,198,2)
(155,198,2)
(28,198,2)
(221,198,2)
(47,198,2)
(11,167,2)
(225,198,2)
(236,109,2)
(113,115,2)
(126,136,2)
(132,132,2)
(49,166,2)
(11,198,2)
(144,61,2)
(201,166,2)
(91,132,2)
(66,175,2)
(199,220,2)
(193,198,2)
(96,198,2)
(53,198,2)
(77,224,2)
(109,214,2)
(115,115,2)
(60,166,2)
(50,220,2)
(18,38,2)
(179,198,2)
(19,1,2)
(130,42,2)
(167,59,2)
(123,198,2)
(125,115,2)
(147,198,2)
(175,198,2)
(31,198,2)
(97,198,2)
(52,159,2)
(17,28,2)
(130,198,2)
(233,198,2)
(198,220,2)
(151,147,2)
(131,109,2)
(149,56,2)
(149,165,2)
(21,198,2)
(173,109,2)
(175,23,2)
(38,198,2)
(131,74,2)
(80,198,2)
(41,198,2)
(175,107,2)
(99,198,2)
(71,132,2)
(28,117,2)
(8,198,2)
(163,127,2)
(2,19,2)
(204,198,2)
(199,198,2)
(55,198,2)
(189,162,2)
(3,198,2)
(137,79,2)
(85,198,2)
(227,132,2)
(57,112,2)
(226,198,2)
(17,198,2)
(127,220,2)
(184,198,2)
(100,198,2)
(188,198,2)
(85,87,2)
(86,198,2)
(27,109,2)
(190,132,2)
(56,127,2)
(205,162,2)
(116,198,2)
(209,187,2)
(47,58,2)
(111,220,2)
(105,166,2)
(38,85,2)
(132,136,2)
(165,235,2)
(159,72,2)
(78,198,2)
(152,198,2)
(154,66,2)
(185,134,2)
(33,127,2)
(108,166,2)
(88,198,2)
(35,109,2)
(135,81,2)
(160,132,2)
(156,198,2)
(106,115,2)
(194,109,2)
(79,198,2)
(189,132,2)
(147,58,2)
(177,198,2)
(134,198,2)
(44,198,2)
(196,198,2)
(237,112,2)
(107,198,2)
(94,184,2)
(6,115,2)
(103,224,2)
(58,221,2)
(168,166,2)
(215,135,2)
(40,198,2)
(29,198,2)
(224,162,2)
(90,198,2)
(81,109,2)
(66,198,2)
(178,112,2)
(59,70,2)
(129,212,2)
(223,112,2)
(144,132,2)
(109,109,2)
(187,198,2)
(52,198,2)
(214,115,2)
(209,198,2)
(54,112,2)
(161,198,2)
(126,132,2)
(167,97,2)
(208,198,2)
(202,198,2)
(93,198,2)
(16,214,2)
(206,126,2)
(192,132,2)
(235,127,2)
(134,111,2)
(70,198,2)
(200,166,2)
(85,31,2)
(185,198,2)
(130,47,2)
(140,198,2)
(87,209,2)
(28,151,2)
(43,112,2)
(122,127,2)
(61,136,2)
(75,109,2)
(171,127,2)
(54,65,2)
(50,198,2)
(219,166,2)
(183,115,2)
(79,134,2)
(16,109,2)
(121,198,2)
(15,198,2)
(182,198,2)
(117,198,2)
(59,198,2)
(157,112,2)
(25,220,2)
(207,198,2)
(76,198,2)
(194,214,2)
(118,198,2)
(16,222,2)
(110,224,2)
(42,198,2)
(124,132,2)
(65,62,2)
(230,198,2)
(109,115,2)
(72,198,2)
(174,127,2)
(159,198,2)
(198,202,2)
(203,16,2)
(136,224,2)
(222,74,2)
(98,172,2)
(18,198,2)
(151,149,2)
(23,181,2)
(111,94,2)
(159,36,2)
(72,17,2)
(187,179,2)
(217,132,2)
(35,115,2)
(43,0,2)
(145,127,2)
(10,166,2)
(164,0,2)
(142,198,2)
(154,198,2)
(46,109,2)
(191,198,2)
(161,29,2)
(58,198,2)
(192,224,2)
(238,224,2)
(168,101,2)
(161,150,2)
(227,136,2)
(224,224,2)
(23,198,2)
(83,132,2)
(2,166,2)
(198,198,2)
(127,129,2)
(61,132,2)
(94,198,2)
(99,220,2)
(150,198,2)
(129,198,2)
(56,33,2)
(197,115,2)
(61,189,2)
(36,198,2)
(138,198,2)
(139,127,2)
(62,0,2)
(222,109,2)
(64,132,2)
(104,224,2)
(203,109,2)
(149,198,2)
(135,109,2)
(8,140,2)
(229,198,2)
(1,101,2)
(172,109,2)
(215,109,2)
(167,198,2)
(112,112,2)
(25,198,2)
(4,198,2)
(181,198,2)
(181,185,2)
(37,198,2)
(112,0,2)
(37,11,2)
(1,166,2)
-----------------------------------
(0,i = 0)
(1,i << 4)
(2,jpc_scctxnolut[i] = jpc_getscctxno(i << 4)
(3,u)
(4,JPC_NMSEDEC_FRACBITS)
(5,for (i = 0; i < 256; ++i)
(6,0)
(7,for (orient = 0; orient < 4; ++orient)
(8,jpc_signmsedec[i] = jpc_dbltofix(floor((u * u - v * v)
(9,for (i = 0; i < 2048; ++i)
(10,i)
(11,jpc_dbltofix(floor((u * u)
(12,orient)
(13,)
(14,i)
(15,u)
(16,(refine << 11)
(17,(u * u - v * v)
(18,jpc_signmsedec0[i] = jpc_dbltofix(floor((u * u)
(19,jpc_getscctxno(i << 4)
(20,0)
(21,0.5)
(22,)
(23,v * v)
(24,i)
(25,jpc_signmsedec0[i])
(26,t)
(27,i)
(28,(u * u - v * v)
(29,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(30,i)
(31,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(32,refine)
(33,t - 1.5)
(34,refine)
(35,2048)
(36,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(37,jpc_refnmsedec0[i] = jpc_dbltofix(floor((u * u)
(38,jpc_dbltofix(floor((u * u)
(39,u)
(40,v)
(41,JPC_NMSEDEC_FRACBITS)
(42,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(43,++i)
(44,0.5)
(45,JPC_REFINE)
(46,11)
(47,u * u)
(48,)
(49,i)
(50,jpc_refnmsedec0[i])
(51,)
(52,jpc_dbltofix(floor((u * u - v * v)
(53,jpc_refnmsedec)
(54,jpc_spblut[i] = jpc_getspb(i << 4)
(55,JPC_NMSEDEC_FRACBITS)
(56,v = t - 1.5)
(57,i)
(58,u = t - 1.0)
(59,floor((u * u)
(60,256)
(61,(orient << 8)
(62,i << 4)
(63,if (i & (1 << (JPC_NMSEDEC_BITS - 1)
(64,jpc_zcctxnolut)
(65,jpc_getspb(i << 4)
(66,(u * u - v * v)
(67,RET)
(68,jpc_signmsedec)
(69,v)
(70,(u * u)
(71,256)
(72,floor((u * u - v * v)
(73,u)
(74,refine = 0)
(75,jpc_magctxnolut)
(76,t)
(77,orient)
(78,jpc_refnmsedec[i] = jpc_dbltofix(floor((u * u - v * v)
(79,u = t)
(80,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(81,(refine ? JPC_REFINE : 0)
(82,1)
(83,i)
(84,0)
(85,floor((u * u)
(86,u)
(87,floor((u * u)
(88,JPC_NMSEDEC_FRACBITS)
(89,i)
(90,t)
(91,i)
(92,for (refine = 0; refine < 2; ++refine)
(93,v)
(94,jpc_pow2i(-JPC_NMSEDEC_FRACBITS)
(95,i)
(96,t)
(97,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(98,0)
(99,jpc_refnmsedec[i])
(100,jpc_refnmsedec0)
(101,i = 0)
(102,i)
(103,0)
(104,4)
(105,jpc_scctxnolut)
(106,++refine)
(107,u * u)
(108,i)
(109,i < 2048)
(110,orient)
(111,i * jpc_pow2i(-JPC_NMSEDEC_FRACBITS)
(112,i < 256)
(113,2)
(114,i)
(115,refine < 2)
(116,JPC_NMSEDEC_BITS)
(117,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(118,jpc_signmsedec0)
(119,JPC_NMSEDEC_FRACBITS)
(120,)
(121,t)
(122,0.5)
(123,u)
(124,orient)
(125,i)
(126,jpc_getzcctxno(i, orient)
(127,i & (1 << (JPC_NMSEDEC_BITS - 1)
(128,)
(129,1 << (JPC_NMSEDEC_BITS - 1)
(130,(u * u)
(131,refine ? JPC_REFINE : 0)
(132,i < 256)
(133,JPC_NMSEDEC_FRACBITS)
(134,t = i * jpc_pow2i(-JPC_NMSEDEC_FRACBITS)
(135,jpc_getmagctxno((refine ? JPC_REFINE : 0)
(136,i = 0)
(137,u * u)
(138,0.5)
(139,1.5)
(140,jpc_dbltofix(floor((u * u - v * v)
(141,)
(142,JPC_NMSEDEC_BITS)
(143,0)
(144,jpc_zcctxnolut[(orient << 8)
(145,v)
(146,256)
(147,u * u)
(148,++i)
(149,v * v)
(150,floor((u * u - v * v)
(151,u * u - v * v)
(152,v)
(153,i)
(154,(u * u - v * v)
(155,JPC_NMSEDEC_FRACBITS)
(156,v)
(157,jpc_spblut)
(158,refine)
(159,floor((u * u - v * v)
(160,8)
(161,floor((u * u - v * v)
(162,orient = 0)
(163,t)
(164,jpc_spblut[i])
(165,v = t - 0.5)
(166,i < 256)
(167,floor((u * u)
(168,++i)
(169,for (i = 0; i < 256; ++i)
(170,jpc_initmqctxs()
(171,t)
(172,refine)
(173,refine)
(174,v)
(175,u * u - v * v)
(176,i)
(177,JPC_NMSEDEC_FRACBITS)
(178,i)
(179,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(180,for (i = 0; i < 256; ++i)
(181,v = t - 1.5)
(182,u)
(183,i)
(184,-JPC_NMSEDEC_FRACBITS)
(185,t - 1.5)
(186,)
(187,(u * u)
(188,JPC_NMSEDEC_FRACBITS)
(189,orient << 8)
(190,orient)
(191,u)
(192,i)
(193,i)
(194,++i)
(195,v)
(196,1)
(197,refine)
(198,i < (1 << JPC_NMSEDEC_BITS)
(199,jpc_signmsedec[i])
(200,4)
(201,jpc_scctxnolut[i])
(202,1 << JPC_NMSEDEC_BITS)
(203,jpc_magctxnolut[(refine << 11)
(204,u)
(205,++orient)
(206,jpc_zcctxnolut[(orient << 8)
(207,0.5)
(208,i)
(209,(u * u)
(210,)
(211,0)
(212,JPC_NMSEDEC_BITS - 1)
(213,for (i = 0; i < (1 << JPC_NMSEDEC_BITS)
(214,i = 0)
(215,jpc_magctxnolut[(refine << 11)
(216,i)
(217,i)
(218,)
(219,i)
(220,i = 0)
(221,t - 1.0)
(222,refine << 11)
(223,i)
(224,orient < 4)
(225,1.0)
(226,1.5)
(227,++i)
(228,u)
(229,1)
(230,i)
(231,0)
(232,orient)
(233,u)
(234,i)
(235,t - 0.5)
(236,i)
(237,4)
(238,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff9cf9a66300000000ffffffffffffffff21faa66300000000ffffffffffffffff21faa66300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff6000030000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
int jpc_getzcctxno(int f, int orient) {
int h;
int v;
int d;
int n;
int t;
int hv;
n = 0;
h = ((f & JPC_WSIG) != 0) + ((f & JPC_ESIG) != 0);
v = ((f & JPC_NSIG) != 0) + ((f & JPC_SSIG) != 0);
d = ((f & JPC_NWSIG) != 0) + ((f & JPC_NESIG) != 0) + ((f & JPC_SESIG) != 0) + ((f & JPC_SWSIG) != 0);
switch(orient)
hv = h + v;
n = 8;
assert(n < JPC_NUMZCCTXS);
return JPC_ZCCTXNO + n;
=======================
