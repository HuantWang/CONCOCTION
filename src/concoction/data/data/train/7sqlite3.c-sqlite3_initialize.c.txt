-----label-----
0
-----code-----
int sqlite3_initialize(void){
printf("\nfile_name:%s\n",__FILE__);
printf("function_name:%s\n",__func__);
printf("------function start!------\n");
printf("int sqlite3_initialize(void){\n");
  MUTEX_LOGIC( sqlite3_mutex *pMaster; )       /* The main static mutex */
  printf("int rc;\n");
  int rc;                                      /* Result code */
#ifdef SQLITE_EXTRA_INIT
  printf("int bRunExtraInit = 0;\n");
  int bRunExtraInit = 0;                       /* Extra initialization needed */
#endif

#ifdef SQLITE_OMIT_WSD
  printf("rc = sqlite3_wsd_init(4096, 24);\n");
rc = sqlite3_wsd_init(4096, 24);
  if( rc!=SQLITE_OK ){printf("if()\n");
  
    printf("return rc;\n");
    printf("------function end!------\n");
    return rc;
  }
#endif

  /* If SQLite is already completely initialized, then this call
  ** to sqlite3_initialize() should be a no-op.  But the initialization
  ** must be complete.  So isInit must not be set until the very end
  ** of this routine.
  */
  if( sqlite3GlobalConfig.isInit ) return SQLITE_OK;

#ifdef SQLITE_ENABLE_SQLLOG
  printf("{     extern void sqlite3_init_sqllog(void);     sqlite3_init_sqllog();   };\n");
  {
    printf("extern void sqlite3_init_sqllog(void);\n");
    extern void sqlite3_init_sqllog(void);
    printf("sqlite3_init_sqllog();\n");
    sqlite3_init_sqllog();
  }
#endif

  /* Make sure the mutex subsystem is initialized.  If unable to 
  ** initialize the mutex subsystem, return early with the error.
  ** If the system is so sick that we are unable to allocate a mutex,
  ** there is not much SQLite is going to be able to do.
  **
  ** The mutex subsystem must take care of serializing its own
  ** initialization.
  */
  printf("rc = sqlite3MutexInit();\n");
rc = sqlite3MutexInit();
  if( rc ) {printf("if(rc)\n");
  printf("return rc;\n");
  printf("------function end!------\n");
  return rc;}

  /* Initialize the malloc() system and the recursive pInitMutex mutex.
  ** This operation is protected by the STATIC_MASTER mutex.  Note that
  ** MutexAlloc() is called for a static mutex prior to initializing the
  ** malloc subsystem - this implies that the allocation of a static
  ** mutex must not require support from the malloc subsystem.
  */
  MUTEX_LOGIC( pMaster = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER); )
  sqlite3_mutex_enter(pMaster);
  sqlite3GlobalConfig.isMutexInit = 1;
  if( !sqlite3GlobalConfig.isMallocInit ){printf("if(!sqlite3GlobalConfig.isMallocInit)\n");
  
    printf("rc = sqlite3MallocInit();\n");
rc = sqlite3MallocInit();
  }
  if( rc==SQLITE_OK ){printf("if()\n");
  
    sqlite3GlobalConfig.isMallocInit = 1;
    if( !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");
    
      sqlite3GlobalConfig.pInitMutex =
           sqlite3MutexAlloc(SQLITE_MUTEX_RECURSIVE);
      if( sqlite3GlobalConfig.bCoreMutex && !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");
      
        rc = SQLITE_NOMEM;
      }
    }
  }
  if( rc==SQLITE_OK ){printf("if()\n");
  
    sqlite3GlobalConfig.nRefInitMutex++;
  }
  sqlite3_mutex_leave(pMaster);

  /* If rc is not SQLITE_OK at this point, then either the malloc
  ** subsystem could not be initialized or the system failed to allocate
  ** the pInitMutex mutex. Return an error in either case.  */
  if( rc!=SQLITE_OK ){printf("if()\n");
  
    printf("return rc;\n");
    printf("------function end!------\n");
    return rc;
  }

  /* Do the rest of the initialization under the recursive mutex so
  ** that we will be able to handle recursive calls into
  ** sqlite3_initialize().  The recursive calls normally come through
  ** sqlite3_os_init() when it invokes sqlite3_vfs_register(), but other
  ** recursive calls might also be possible.
  **
  ** IMPLEMENTATION-OF: R-00140-37445 SQLite automatically serializes calls
  ** to the xInit method, so the xInit method need not be threadsafe.
  **
  ** The following mutex is what serializes access to the appdef pcache xInit
  ** methods.  The sqlite3_pcache_methods.xInit() all is embedded in the
  ** call to sqlite3PcacheInitialize().
  */
  sqlite3_mutex_enter(sqlite3GlobalConfig.pInitMutex);
  if( sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0 ){printf("if(sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0)\n");
  
    printf("FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);\n");
    FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);
    sqlite3GlobalConfig.inProgress = 1;
    printf("memset(pHash, 0, sizeof(sqlite3GlobalFunctions));\n");
    memset(pHash, 0, sizeof(sqlite3GlobalFunctions));
    printf("sqlite3RegisterGlobalFunctions();\n");
    sqlite3RegisterGlobalFunctions();
    if( sqlite3GlobalConfig.isPCacheInit==0 ){printf("if(sqlite3GlobalConfig.isPCacheInit==0)\n");
    
      printf("rc = sqlite3PcacheInitialize();\n");
rc = sqlite3PcacheInitialize();
    }
    if( rc==SQLITE_OK ){printf("if()\n");
    
      sqlite3GlobalConfig.isPCacheInit = 1;
      printf("rc = sqlite3OsInit();\n");
rc = sqlite3OsInit();
    }
    if( rc==SQLITE_OK ){printf("if()\n");
    
      printf("sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,            sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);\n");
      sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage, 
          sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);
      sqlite3GlobalConfig.isInit = 1;
#ifdef SQLITE_EXTRA_INIT
      printf("bRunExtraInit = 1;\n");
bRunExtraInit = 1;
#endif
    }
    sqlite3GlobalConfig.inProgress = 0;
  }
  sqlite3_mutex_leave(sqlite3GlobalConfig.pInitMutex);

  /* Go back under the static mutex and clean up the recursive
  ** mutex to prevent a resource leak.
  */
  sqlite3_mutex_enter(pMaster);
  sqlite3GlobalConfig.nRefInitMutex--;
  if( sqlite3GlobalConfig.nRefInitMutex<=0 ){printf("if(sqlite3GlobalConfig.nRefInitMutex<=0)\n");
  
    printf("assert( sqlite3GlobalConfig.nRefInitMutex==0 );\n");
    assert( sqlite3GlobalConfig.nRefInitMutex==0 );
    sqlite3_mutex_free(sqlite3GlobalConfig.pInitMutex);
    sqlite3GlobalConfig.pInitMutex = 0;
  }
  sqlite3_mutex_leave(pMaster);

  /* The following is just a sanity check to make sure SQLite has
  ** been compiled correctly.  It is important to run this code, but
  ** we don't want to run it too often and soak up CPU cycles for no
  ** reason.  So we run it once during initialization.
  */
#ifndef NDEBUG
#ifndef SQLITE_OMIT_FLOATING_POINT
  /* This section of code's only "output" is via assert() statements. */
  if ( rc==SQLITE_OK ){
    u64 x = (((u64)1)<<63)-1;
    double y;
    assert(sizeof(x)==8);
    assert(sizeof(x)==sizeof(y));
    memcpy(&y, &x, 8);
    assert( sqlite3IsNaN(y) );
  }
#endif
#endif

  /* Do extra initialization steps requested by the SQLITE_EXTRA_INIT
  ** compile-time option.
  */
#ifdef SQLITE_EXTRA_INIT
  if( bRunExtraInit ){printf("if(bRunExtraInit)\n");
  
    int SQLITE_EXTRA_INIT(const char*);
    rc = SQLITE_EXTRA_INIT(0);
  }
#endif

  printf("return rc;\n");
  printf("------function end!------\n");
  return rc;
printf("------function end!------\n");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
9,32
9,33
9,34
9,35
9,36
9,37
9,38
9,39
9,40
10,11
11,12
11,13
11,14
12,13
16,17
17,18
17,19
17,20
18,19
21,22
23,24
24,25
24,26
25,26
28,29
29,30
29,31
30,31
33,34
34,35
35,36
36,37
36,38
38,39
40,41
40,42
41,42
41,43
42,43
45,46
46,47
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
57,58
58,59
60,61
60,62
61,62
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
70,71
70,72
71,72
74,75
75,76
75,77
76,77
79,80
80,81
82,83
83,84
84,85
85,86
85,87
86,87
86,88
87,88
91,92
91,93
92,93
93,94
93,95
94,95
97,98
97,99
97,100
98,99
99,100
99,101
100,101
103,104
104,105
104,106
105,106
108,109
109,110
109,111
110,111
112,113
113,114
115,116
115,117
116,117
116,118
117,118
119,120
121,122
121,123
121,124
122,123
123,124
123,125
124,125
127,128
128,129
128,130
129,130
129,131
130,131
134,135
134,136
135,136
136,137
136,138
137,138
140,141
140,142
140,143
141,142
142,143
142,144
143,144
146,147
147,148
147,149
148,149
148,150
149,150
152,153
152,154
153,154
155,156
157,158
157,159
158,159
158,160
159,160
159,161
160,161
163,164
164,165
164,166
165,166
168,169
168,170
169,170
170,171
170,172
171,172
174,175
175,176
175,177
176,177
178,179
180,181
180,182
181,182
181,183
182,183
184,185
186,187
186,188
187,188
188,189
188,190
189,190
192,193
193,194
194,195
194,196
195,196
198,199
199,200
199,201
200,201
202,203
203,204
205,206
205,207
206,207
206,208
207,208
209,210
211,212
211,213
211,214
211,215
212,213
213,214
213,215
214,215
217,218
218,219
218,220
219,220
222,223
223,224
223,225
224,225
227,228
228,229
230,231
231,232
231,233
232,233
234,235
234,236
235,236
238,239
238,240
239,240
239,241
240,241
240,242
241,242
241,243
242,243
246,247
246,248
247,248
247,249
248,249
252,253
252,254
252,255
252,256
252,257
252,258
252,259
252,260
252,261
252,262
252,263
252,264
253,254
254,255
254,256
255,256
258,259
259,260
259,261
260,261
263,264
264,265
264,266
265,266
267,268
267,269
267,270
270,271
271,272
272,273
272,274
272,275
273,274
275,276
277,278
279,280
280,281
280,282
281,282
281,283
282,283
286,287
287,288
287,289
288,289
291,292
292,293
292,294
292,295
292,296
293,294
295,296
298,299
299,300
299,301
300,301
303,304
304,305
304,306
305,306
308,309
309,310
310,311
312,313
312,314
313,314
313,315
314,315
314,316
315,316
319,320
319,321
319,322
320,321
321,322
321,323
322,323
325,326
326,327
326,328
327,328
330,331
331,332
331,333
332,333
334,335
335,336
337,338
337,339
338,339
338,340
339,340
341,342
343,344
343,345
343,346
343,347
344,345
345,346
345,347
346,347
349,350
350,351
350,352
351,352
351,353
352,353
356,357
357,358
357,359
358,359
361,362
362,363
362,364
363,364
365,366
366,367
368,369
368,370
369,370
369,371
370,371
372,373
374,375
374,376
374,377
374,378
375,376
376,377
376,378
377,378
380,381
381,382
381,383
382,383
385,386
386,387
386,388
386,389
386,390
387,388
389,390
389,391
390,391
393,394
393,395
394,395
397,398
397,399
398,399
401,402
402,403
402,404
403,404
403,405
404,405
408,409
409,410
409,411
410,411
410,412
411,412
415,416
416,417
416,418
417,418
419,420
419,421
420,421
423,424
424,425
424,426
425,426
427,428
429,430
430,431
431,432
431,433
432,433
435,436
435,437
436,437
436,438
437,438
437,439
438,439
442,443
442,444
442,445
442,446
442,447
443,444
444,445
444,446
445,446
448,449
449,450
449,451
450,451
453,454
454,455
454,456
455,456
457,458
457,459
458,459
458,460
459,460
463,464
464,465
464,466
465,466
467,468
467,469
468,469
471,472
472,473
472,474
473,474
473,475
474,475
478,479
479,480
479,481
480,481
482,483
484,485
484,486
485,486
485,487
486,487
488,489
490,491
490,492
490,493
490,494
490,495
490,496
491,492
492,493
492,494
493,494
495,496
495,497
497,498
498,499
498,500
499,500
500,501
500,502
501,502
502,503
502,504
503,504
503,505
504,505
510,511
511,512
511,513
513,514
515,516
516,517
516,518
517,518
519,520
519,521
520,521
521,522
522,523
525,526
526,527
526,528
527,528
529,530
529,531
530,531
531,532
532,533
534,535
535,536
536,537
538,539
539,540
539,541
539,542
539,543
540,541
542,543
543,544
545,546
546,547
549,550
550,551
550,552
551,552
553,554
553,555
554,555
556,557
558,559
559,560
559,561
560,561
563,564
564,565
564,566
565,566
568,569
569,570
571,572
572,573
572,574
573,574
-----nextToken-----
2,4,6,8,13,14,15,19,20,22,26,27,31,32,37,39,43,44,47,51,52,56,59,62,67,68,72,73,77,78,81,88,89,90,95,96,101,102,106,107,111,114,118,120,125,126,131,132,133,138,139,144,145,150,151,154,156,161,162,166,167,172,173,177,179,183,185,190,191,196,197,201,204,208,210,215,216,220,221,225,226,229,233,236,237,243,244,245,249,250,251,256,257,261,262,266,268,269,274,276,278,283,284,285,289,290,294,296,297,301,302,306,307,311,316,317,318,323,324,328,329,333,336,340,342,347,348,353,354,355,359,360,364,367,371,373,378,379,383,384,388,391,392,395,396,399,400,405,406,407,412,413,414,418,421,422,426,428,433,434,439,440,441,446,447,451,452,456,460,461,462,466,469,470,475,476,477,481,483,487,489,494,496,505,506,507,508,509,512,514,518,523,524,528,533,537,541,544,547,548,552,555,557,561,562,566,567,570,574,575
-----computeFrom-----
54,55
54,56
85,86
85,87
109,110
109,111
116,117
116,118
128,129
128,130
147,148
147,149
158,159
158,160
175,176
175,177
181,182
181,183
206,207
206,208
239,240
239,241
240,241
240,242
246,247
246,248
280,281
280,282
313,314
313,315
331,332
331,333
338,339
338,340
350,351
350,352
362,363
362,364
369,370
369,371
402,403
402,404
409,410
409,411
436,437
436,438
457,458
457,459
472,473
472,474
485,486
485,487
498,499
498,500
500,501
500,502
519,520
519,521
529,530
529,531
-----guardedBy-----
118,177
208,229
250,413
249,412
244,406
340,364
440,461
439,475
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ProblemStatement;ProblemStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ProblemStatement;ProblemStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;LiteralExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
int sqlite3_initialize(void){printf("\nfile_name:%s\n",__FILE__);printf("function_name:%s\n",__func__);printf("------function start!------\n");printf("int sqlite3_initialize(void){\n");  MUTEX_LOGIC( sqlite3_mutex *pMaster; )       /* The main static mutex */  printf("int rc;\n");  int rc;                                      /* Result code */#ifdef SQLITE_EXTRA_INIT  printf("int bRunExtraInit = 0;\n");  int bRunExtraInit = 0;                       /* Extra initialization needed */#endif#ifdef SQLITE_OMIT_WSD  printf("rc = sqlite3_wsd_init(4096, 24);\n");rc = sqlite3_wsd_init(4096, 24);  if( rc!=SQLITE_OK ){printf("if()\n");      printf("return rc;\n");    printf("------function end!------\n");    return rc;  }#endif  /* If SQLite is already completely initialized, then this call  ** to sqlite3_initialize() should be a no-op.  But the initialization  ** must be complete.  So isInit must not be set until the very end  ** of this routine.  */  if( sqlite3GlobalConfig.isInit ) return SQLITE_OK;#ifdef SQLITE_ENABLE_SQLLOG  printf("{     extern void sqlite3_init_sqllog(void);     sqlite3_init_sqllog();   };\n");  {    printf("extern void sqlite3_init_sqllog(void);\n");    extern void sqlite3_init_sqllog(void);    printf("sqlite3_init_sqllog();\n");    sqlite3_init_sqllog();  }#endif  /* Make sure the mutex subsystem is initialized.  If unable to   ** initialize the mutex subsystem, return early with the error.  ** If the system is so sick that we are unable to allocate a mutex,  ** there is not much SQLite is going to be able to do.  **  ** The mutex subsystem must take care of serializing its own  ** initialization.  */  printf("rc = sqlite3MutexInit();\n");rc = sqlite3MutexInit();  if( rc ) {printf("if(rc)\n");  printf("return rc;\n");  printf("------function end!------\n");  return rc;}  /* Initialize the malloc() system and the recursive pInitMutex mutex.  ** This operation is protected by the STATIC_MASTER mutex.  Note that  ** MutexAlloc() is called for a static mutex prior to initializing the  ** malloc subsystem - this implies that the allocation of a static  ** mutex must not require support from the malloc subsystem.  */  MUTEX_LOGIC( pMaster = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER); )  sqlite3_mutex_enter(pMaster);  sqlite3GlobalConfig.isMutexInit = 1;  if( !sqlite3GlobalConfig.isMallocInit ){printf("if(!sqlite3GlobalConfig.isMallocInit)\n");      printf("rc = sqlite3MallocInit();\n");rc = sqlite3MallocInit();  }  if( rc==SQLITE_OK ){printf("if()\n");      sqlite3GlobalConfig.isMallocInit = 1;    if( !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");          sqlite3GlobalConfig.pInitMutex =           sqlite3MutexAlloc(SQLITE_MUTEX_RECURSIVE);      if( sqlite3GlobalConfig.bCoreMutex && !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");              rc = SQLITE_NOMEM;      }    }  }  if( rc==SQLITE_OK ){printf("if()\n");      sqlite3GlobalConfig.nRefInitMutex++;  }  sqlite3_mutex_leave(pMaster);  /* If rc is not SQLITE_OK at this point, then either the malloc  ** subsystem could not be initialized or the system failed to allocate  ** the pInitMutex mutex. Return an error in either case.  */  if( rc!=SQLITE_OK ){printf("if()\n");      printf("return rc;\n");    printf("------function end!------\n");    return rc;  }  /* Do the rest of the initialization under the recursive mutex so  ** that we will be able to handle recursive calls into  ** sqlite3_initialize().  The recursive calls normally come through  ** sqlite3_os_init() when it invokes sqlite3_vfs_register(), but other  ** recursive calls might also be possible.  **  ** IMPLEMENTATION-OF: R-00140-37445 SQLite automatically serializes calls  ** to the xInit method, so the xInit method need not be threadsafe.  **  ** The following mutex is what serializes access to the appdef pcache xInit  ** methods.  The sqlite3_pcache_methods.xInit() all is embedded in the  ** call to sqlite3PcacheInitialize().  */  sqlite3_mutex_enter(sqlite3GlobalConfig.pInitMutex);  if( sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0 ){printf("if(sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0)\n");      printf("FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);\n");    FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);    sqlite3GlobalConfig.inProgress = 1;    printf("memset(pHash, 0, sizeof(sqlite3GlobalFunctions));\n");    memset(pHash, 0, sizeof(sqlite3GlobalFunctions));    printf("sqlite3RegisterGlobalFunctions();\n");    sqlite3RegisterGlobalFunctions();    if( sqlite3GlobalConfig.isPCacheInit==0 ){printf("if(sqlite3GlobalConfig.isPCacheInit==0)\n");          printf("rc = sqlite3PcacheInitialize();\n");rc = sqlite3PcacheInitialize();    }    if( rc==SQLITE_OK ){printf("if()\n");          sqlite3GlobalConfig.isPCacheInit = 1;      printf("rc = sqlite3OsInit();\n");rc = sqlite3OsInit();    }    if( rc==SQLITE_OK ){printf("if()\n");          printf("sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,            sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);\n");      sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,           sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);      sqlite3GlobalConfig.isInit = 1;#ifdef SQLITE_EXTRA_INIT      printf("bRunExtraInit = 1;\n");bRunExtraInit = 1;#endif    }    sqlite3GlobalConfig.inProgress = 0;  }  sqlite3_mutex_leave(sqlite3GlobalConfig.pInitMutex);  /* Go back under the static mutex and clean up the recursive  ** mutex to prevent a resource leak.  */  sqlite3_mutex_enter(pMaster);  sqlite3GlobalConfig.nRefInitMutex--;  if( sqlite3GlobalConfig.nRefInitMutex<=0 ){printf("if(sqlite3GlobalConfig.nRefInitMutex<=0)\n");      printf("assert( sqlite3GlobalConfig.nRefInitMutex==0 );\n");    assert( sqlite3GlobalConfig.nRefInitMutex==0 );    sqlite3_mutex_free(sqlite3GlobalConfig.pInitMutex);    sqlite3GlobalConfig.pInitMutex = 0;  }  sqlite3_mutex_leave(pMaster);  /* The following is just a sanity check to make sure SQLite has  ** been compiled correctly.  It is important to run this code, but  ** we don't want to run it too often and soak up CPU cycles for no  ** reason.  So we run it once during initialization.  */#ifndef NDEBUG#ifndef SQLITE_OMIT_FLOATING_POINT  /* This section of code's only "output" is via assert() statements. */  if ( rc==SQLITE_OK ){    u64 x = (((u64)1)<<63)-1;    double y;    assert(sizeof(x)==8);    assert(sizeof(x)==sizeof(y));    memcpy(&y, &x, 8);    assert( sqlite3IsNaN(y) );  }#endif#endif  /* Do extra initialization steps requested by the SQLITE_EXTRA_INIT  ** compile-time option.  */#ifdef SQLITE_EXTRA_INIT  if( bRunExtraInit ){printf("if(bRunExtraInit)\n");      int SQLITE_EXTRA_INIT(const char*);    rc = SQLITE_EXTRA_INIT(0);  }#endif  printf("return rc;\n");  printf("------function end!------\n");  return rc;printf("------function end!------\n");}
int
sqlite3_initialize(void)
sqlite3_initialize
void
void


{printf("\nfile_name:%s\n",__FILE__);printf("function_name:%s\n",__func__);printf("------function start!------\n");printf("int sqlite3_initialize(void){\n");  MUTEX_LOGIC( sqlite3_mutex *pMaster; )       /* The main static mutex */  printf("int rc;\n");  int rc;                                      /* Result code */#ifdef SQLITE_EXTRA_INIT  printf("int bRunExtraInit = 0;\n");  int bRunExtraInit = 0;                       /* Extra initialization needed */#endif#ifdef SQLITE_OMIT_WSD  printf("rc = sqlite3_wsd_init(4096, 24);\n");rc = sqlite3_wsd_init(4096, 24);  if( rc!=SQLITE_OK ){printf("if()\n");      printf("return rc;\n");    printf("------function end!------\n");    return rc;  }#endif  /* If SQLite is already completely initialized, then this call  ** to sqlite3_initialize() should be a no-op.  But the initialization  ** must be complete.  So isInit must not be set until the very end  ** of this routine.  */  if( sqlite3GlobalConfig.isInit ) return SQLITE_OK;#ifdef SQLITE_ENABLE_SQLLOG  printf("{     extern void sqlite3_init_sqllog(void);     sqlite3_init_sqllog();   };\n");  {    printf("extern void sqlite3_init_sqllog(void);\n");    extern void sqlite3_init_sqllog(void);    printf("sqlite3_init_sqllog();\n");    sqlite3_init_sqllog();  }#endif  /* Make sure the mutex subsystem is initialized.  If unable to   ** initialize the mutex subsystem, return early with the error.  ** If the system is so sick that we are unable to allocate a mutex,  ** there is not much SQLite is going to be able to do.  **  ** The mutex subsystem must take care of serializing its own  ** initialization.  */  printf("rc = sqlite3MutexInit();\n");rc = sqlite3MutexInit();  if( rc ) {printf("if(rc)\n");  printf("return rc;\n");  printf("------function end!------\n");  return rc;}  /* Initialize the malloc() system and the recursive pInitMutex mutex.  ** This operation is protected by the STATIC_MASTER mutex.  Note that  ** MutexAlloc() is called for a static mutex prior to initializing the  ** malloc subsystem - this implies that the allocation of a static  ** mutex must not require support from the malloc subsystem.  */  MUTEX_LOGIC( pMaster = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER); )  sqlite3_mutex_enter(pMaster);  sqlite3GlobalConfig.isMutexInit = 1;  if( !sqlite3GlobalConfig.isMallocInit ){printf("if(!sqlite3GlobalConfig.isMallocInit)\n");      printf("rc = sqlite3MallocInit();\n");rc = sqlite3MallocInit();  }  if( rc==SQLITE_OK ){printf("if()\n");      sqlite3GlobalConfig.isMallocInit = 1;    if( !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");          sqlite3GlobalConfig.pInitMutex =           sqlite3MutexAlloc(SQLITE_MUTEX_RECURSIVE);      if( sqlite3GlobalConfig.bCoreMutex && !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");              rc = SQLITE_NOMEM;      }    }  }  if( rc==SQLITE_OK ){printf("if()\n");      sqlite3GlobalConfig.nRefInitMutex++;  }  sqlite3_mutex_leave(pMaster);  /* If rc is not SQLITE_OK at this point, then either the malloc  ** subsystem could not be initialized or the system failed to allocate  ** the pInitMutex mutex. Return an error in either case.  */  if( rc!=SQLITE_OK ){printf("if()\n");      printf("return rc;\n");    printf("------function end!------\n");    return rc;  }  /* Do the rest of the initialization under the recursive mutex so  ** that we will be able to handle recursive calls into  ** sqlite3_initialize().  The recursive calls normally come through  ** sqlite3_os_init() when it invokes sqlite3_vfs_register(), but other  ** recursive calls might also be possible.  **  ** IMPLEMENTATION-OF: R-00140-37445 SQLite automatically serializes calls  ** to the xInit method, so the xInit method need not be threadsafe.  **  ** The following mutex is what serializes access to the appdef pcache xInit  ** methods.  The sqlite3_pcache_methods.xInit() all is embedded in the  ** call to sqlite3PcacheInitialize().  */  sqlite3_mutex_enter(sqlite3GlobalConfig.pInitMutex);  if( sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0 ){printf("if(sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0)\n");      printf("FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);\n");    FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);    sqlite3GlobalConfig.inProgress = 1;    printf("memset(pHash, 0, sizeof(sqlite3GlobalFunctions));\n");    memset(pHash, 0, sizeof(sqlite3GlobalFunctions));    printf("sqlite3RegisterGlobalFunctions();\n");    sqlite3RegisterGlobalFunctions();    if( sqlite3GlobalConfig.isPCacheInit==0 ){printf("if(sqlite3GlobalConfig.isPCacheInit==0)\n");          printf("rc = sqlite3PcacheInitialize();\n");rc = sqlite3PcacheInitialize();    }    if( rc==SQLITE_OK ){printf("if()\n");          sqlite3GlobalConfig.isPCacheInit = 1;      printf("rc = sqlite3OsInit();\n");rc = sqlite3OsInit();    }    if( rc==SQLITE_OK ){printf("if()\n");          printf("sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,            sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);\n");      sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,           sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);      sqlite3GlobalConfig.isInit = 1;#ifdef SQLITE_EXTRA_INIT      printf("bRunExtraInit = 1;\n");bRunExtraInit = 1;#endif    }    sqlite3GlobalConfig.inProgress = 0;  }  sqlite3_mutex_leave(sqlite3GlobalConfig.pInitMutex);  /* Go back under the static mutex and clean up the recursive  ** mutex to prevent a resource leak.  */  sqlite3_mutex_enter(pMaster);  sqlite3GlobalConfig.nRefInitMutex--;  if( sqlite3GlobalConfig.nRefInitMutex<=0 ){printf("if(sqlite3GlobalConfig.nRefInitMutex<=0)\n");      printf("assert( sqlite3GlobalConfig.nRefInitMutex==0 );\n");    assert( sqlite3GlobalConfig.nRefInitMutex==0 );    sqlite3_mutex_free(sqlite3GlobalConfig.pInitMutex);    sqlite3GlobalConfig.pInitMutex = 0;  }  sqlite3_mutex_leave(pMaster);  /* The following is just a sanity check to make sure SQLite has  ** been compiled correctly.  It is important to run this code, but  ** we don't want to run it too often and soak up CPU cycles for no  ** reason.  So we run it once during initialization.  */#ifndef NDEBUG#ifndef SQLITE_OMIT_FLOATING_POINT  /* This section of code's only "output" is via assert() statements. */  if ( rc==SQLITE_OK ){    u64 x = (((u64)1)<<63)-1;    double y;    assert(sizeof(x)==8);    assert(sizeof(x)==sizeof(y));    memcpy(&y, &x, 8);    assert( sqlite3IsNaN(y) );  }#endif#endif  /* Do extra initialization steps requested by the SQLITE_EXTRA_INIT  ** compile-time option.  */#ifdef SQLITE_EXTRA_INIT  if( bRunExtraInit ){printf("if(bRunExtraInit)\n");      int SQLITE_EXTRA_INIT(const char*);    rc = SQLITE_EXTRA_INIT(0);  }#endif  printf("return rc;\n");  printf("------function end!------\n");  return rc;printf("------function end!------\n");}
printf("\nfile_name:%s\n",__FILE__);
printf("\nfile_name:%s\n",__FILE__)
printf
printf
"\nfile_name:%s\n"
__FILE__
printf("function_name:%s\n",__func__);
printf("function_name:%s\n",__func__)
printf
printf
"function_name:%s\n"
__func__
__func__
printf("------function start!------\n");
printf("------function start!------\n")
printf
printf
"------function start!------\n"
printf("int sqlite3_initialize(void){\n");
printf("int sqlite3_initialize(void){\n")
printf
printf
"int sqlite3_initialize(void){\n"
MUTEX_LOGIC( sqlite3_mutex *pMaster;
)       /* The main static mutex */  printf("int rc;\n");
int rc;
int rc;
int
rc
rc
if( sqlite3GlobalConfig.isInit ) return SQLITE_OK;
sqlite3GlobalConfig.isInit
sqlite3GlobalConfig
sqlite3GlobalConfig
isInit
return SQLITE_OK;
SQLITE_OK
SQLITE_OK
printf("rc = sqlite3MutexInit();\n");
printf("rc = sqlite3MutexInit();\n")
printf
printf
"rc = sqlite3MutexInit();\n"
rc = sqlite3MutexInit();
rc = sqlite3MutexInit()
rc
rc
sqlite3MutexInit()
sqlite3MutexInit
sqlite3MutexInit
if( rc ) {printf("if(rc)\n");  printf("return rc;\n");  printf("------function end!------\n");  return rc;}
rc
rc
{printf("if(rc)\n");  printf("return rc;\n");  printf("------function end!------\n");  return rc;}
printf("if(rc)\n");
printf("if(rc)\n")
printf
printf
"if(rc)\n"
printf("return rc;\n");
printf("return rc;\n")
printf
printf
"return rc;\n"
printf("------function end!------\n");
printf("------function end!------\n")
printf
printf
"------function end!------\n"
return rc;
rc
rc
MUTEX_LOGIC( pMaster = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MASTER);
)  sqlite3_mutex_enter(pMaster);
sqlite3GlobalConfig.isMutexInit = 1;
sqlite3GlobalConfig.isMutexInit = 1
sqlite3GlobalConfig.isMutexInit
sqlite3GlobalConfig
sqlite3GlobalConfig
isMutexInit
1
if( !sqlite3GlobalConfig.isMallocInit ){printf("if(!sqlite3GlobalConfig.isMallocInit)\n");      printf("rc = sqlite3MallocInit();\n");rc = sqlite3MallocInit();  }
!sqlite3GlobalConfig.isMallocInit
sqlite3GlobalConfig.isMallocInit
sqlite3GlobalConfig
sqlite3GlobalConfig
isMallocInit
{printf("if(!sqlite3GlobalConfig.isMallocInit)\n");      printf("rc = sqlite3MallocInit();\n");rc = sqlite3MallocInit();  }
printf("if(!sqlite3GlobalConfig.isMallocInit)\n");
printf("if(!sqlite3GlobalConfig.isMallocInit)\n")
printf
printf
"if(!sqlite3GlobalConfig.isMallocInit)\n"
printf("rc = sqlite3MallocInit();\n");
printf("rc = sqlite3MallocInit();\n")
printf
printf
"rc = sqlite3MallocInit();\n"
rc = sqlite3MallocInit();
rc = sqlite3MallocInit()
rc
rc
sqlite3MallocInit()
sqlite3MallocInit
sqlite3MallocInit
if( rc==SQLITE_OK ){printf("if()\n");      sqlite3GlobalConfig.isMallocInit = 1;    if( !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");          sqlite3GlobalConfig.pInitMutex =           sqlite3MutexAlloc(SQLITE_MUTEX_RECURSIVE);      if( sqlite3GlobalConfig.bCoreMutex && !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");              rc = SQLITE_NOMEM;      }    }  }
rc==SQLITE_OK
rc
rc
SQLITE_OK
SQLITE_OK
{printf("if()\n");      sqlite3GlobalConfig.isMallocInit = 1;    if( !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");          sqlite3GlobalConfig.pInitMutex =           sqlite3MutexAlloc(SQLITE_MUTEX_RECURSIVE);      if( sqlite3GlobalConfig.bCoreMutex && !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");              rc = SQLITE_NOMEM;      }    }  }
printf("if()\n");
printf("if()\n")
printf
printf
"if()\n"
sqlite3GlobalConfig.isMallocInit = 1;
sqlite3GlobalConfig.isMallocInit = 1
sqlite3GlobalConfig.isMallocInit
sqlite3GlobalConfig
sqlite3GlobalConfig
isMallocInit
1
if( !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");          sqlite3GlobalConfig.pInitMutex =           sqlite3MutexAlloc(SQLITE_MUTEX_RECURSIVE);      if( sqlite3GlobalConfig.bCoreMutex && !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");              rc = SQLITE_NOMEM;      }    }
!sqlite3GlobalConfig.pInitMutex
sqlite3GlobalConfig.pInitMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
pInitMutex
{printf("if()\n");          sqlite3GlobalConfig.pInitMutex =           sqlite3MutexAlloc(SQLITE_MUTEX_RECURSIVE);      if( sqlite3GlobalConfig.bCoreMutex && !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");              rc = SQLITE_NOMEM;      }    }
printf("if()\n");
printf("if()\n")
printf
printf
"if()\n"
sqlite3GlobalConfig.pInitMutex =           sqlite3MutexAlloc(SQLITE_MUTEX_RECURSIVE);
sqlite3GlobalConfig.pInitMutex =           sqlite3MutexAlloc(SQLITE_MUTEX_RECURSIVE)
sqlite3GlobalConfig.pInitMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
pInitMutex
sqlite3MutexAlloc(SQLITE_MUTEX_RECURSIVE)
sqlite3MutexAlloc
sqlite3MutexAlloc
SQLITE_MUTEX_RECURSIVE
SQLITE_MUTEX_RECURSIVE
if( sqlite3GlobalConfig.bCoreMutex && !sqlite3GlobalConfig.pInitMutex ){printf("if()\n");              rc = SQLITE_NOMEM;      }
sqlite3GlobalConfig.bCoreMutex && !sqlite3GlobalConfig.pInitMutex
sqlite3GlobalConfig.bCoreMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
bCoreMutex
!sqlite3GlobalConfig.pInitMutex
sqlite3GlobalConfig.pInitMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
pInitMutex
{printf("if()\n");              rc = SQLITE_NOMEM;      }
printf("if()\n");
printf("if()\n")
printf
printf
"if()\n"
rc = SQLITE_NOMEM;
rc = SQLITE_NOMEM
rc
rc
SQLITE_NOMEM
SQLITE_NOMEM
if( rc==SQLITE_OK ){printf("if()\n");      sqlite3GlobalConfig.nRefInitMutex++;  }
rc==SQLITE_OK
rc
rc
SQLITE_OK
SQLITE_OK
{printf("if()\n");      sqlite3GlobalConfig.nRefInitMutex++;  }
printf("if()\n");
printf("if()\n")
printf
printf
"if()\n"
sqlite3GlobalConfig.nRefInitMutex++;
sqlite3GlobalConfig.nRefInitMutex++
sqlite3GlobalConfig.nRefInitMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
nRefInitMutex
sqlite3_mutex_leave(pMaster);
sqlite3_mutex_leave(pMaster);
sqlite3_mutex_leave
sqlite3_mutex_leave
(pMaster)
pMaster
pMaster
if( rc!=SQLITE_OK ){printf("if()\n");      printf("return rc;\n");    printf("------function end!------\n");    return rc;  }
rc!=SQLITE_OK
rc
rc
SQLITE_OK
SQLITE_OK
{printf("if()\n");      printf("return rc;\n");    printf("------function end!------\n");    return rc;  }
printf("if()\n");
printf("if()\n")
printf
printf
"if()\n"
printf("return rc;\n");
printf("return rc;\n")
printf
printf
"return rc;\n"
printf("------function end!------\n");
printf("------function end!------\n")
printf
printf
"------function end!------\n"
return rc;
rc
rc
sqlite3_mutex_enter(sqlite3GlobalConfig.pInitMutex);
sqlite3_mutex_enter(sqlite3GlobalConfig.pInitMutex)
sqlite3_mutex_enter
sqlite3_mutex_enter
sqlite3GlobalConfig.pInitMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
pInitMutex
if( sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0 ){printf("if(sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0)\n");      printf("FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);\n");    FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);    sqlite3GlobalConfig.inProgress = 1;    printf("memset(pHash, 0, sizeof(sqlite3GlobalFunctions));\n");    memset(pHash, 0, sizeof(sqlite3GlobalFunctions));    printf("sqlite3RegisterGlobalFunctions();\n");    sqlite3RegisterGlobalFunctions();    if( sqlite3GlobalConfig.isPCacheInit==0 ){printf("if(sqlite3GlobalConfig.isPCacheInit==0)\n");          printf("rc = sqlite3PcacheInitialize();\n");rc = sqlite3PcacheInitialize();    }    if( rc==SQLITE_OK ){printf("if()\n");          sqlite3GlobalConfig.isPCacheInit = 1;      printf("rc = sqlite3OsInit();\n");rc = sqlite3OsInit();    }    if( rc==SQLITE_OK ){printf("if()\n");          printf("sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,            sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);\n");      sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,           sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);      sqlite3GlobalConfig.isInit = 1;#ifdef SQLITE_EXTRA_INIT      printf("bRunExtraInit = 1;\n");bRunExtraInit = 1;#endif    }    sqlite3GlobalConfig.inProgress = 0;  }
sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0
sqlite3GlobalConfig.isInit==0
sqlite3GlobalConfig.isInit
sqlite3GlobalConfig
sqlite3GlobalConfig
isInit
0
sqlite3GlobalConfig.inProgress==0
sqlite3GlobalConfig.inProgress
sqlite3GlobalConfig
sqlite3GlobalConfig
inProgress
0
{printf("if(sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0)\n");      printf("FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);\n");    FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);    sqlite3GlobalConfig.inProgress = 1;    printf("memset(pHash, 0, sizeof(sqlite3GlobalFunctions));\n");    memset(pHash, 0, sizeof(sqlite3GlobalFunctions));    printf("sqlite3RegisterGlobalFunctions();\n");    sqlite3RegisterGlobalFunctions();    if( sqlite3GlobalConfig.isPCacheInit==0 ){printf("if(sqlite3GlobalConfig.isPCacheInit==0)\n");          printf("rc = sqlite3PcacheInitialize();\n");rc = sqlite3PcacheInitialize();    }    if( rc==SQLITE_OK ){printf("if()\n");          sqlite3GlobalConfig.isPCacheInit = 1;      printf("rc = sqlite3OsInit();\n");rc = sqlite3OsInit();    }    if( rc==SQLITE_OK ){printf("if()\n");          printf("sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,            sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);\n");      sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,           sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);      sqlite3GlobalConfig.isInit = 1;#ifdef SQLITE_EXTRA_INIT      printf("bRunExtraInit = 1;\n");bRunExtraInit = 1;#endif    }    sqlite3GlobalConfig.inProgress = 0;  }
printf("if(sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0)\n");
printf("if(sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0)\n")
printf
printf
"if(sqlite3GlobalConfig.isInit==0 && sqlite3GlobalConfig.inProgress==0)\n"
printf("FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);\n");
printf("FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);\n")
printf
printf
"FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);\n"
FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);
FuncDefHash *pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions);
FuncDefHash
FuncDefHash
*pHash = &GLOBAL(FuncDefHash, sqlite3GlobalFunctions)
*
pHash
= &GLOBAL(FuncDefHash, sqlite3GlobalFunctions)
&GLOBAL(FuncDefHash, sqlite3GlobalFunctions)
GLOBAL(FuncDefHash, sqlite3GlobalFunctions)
GLOBAL
GLOBAL
FuncDefHash
FuncDefHash
sqlite3GlobalFunctions
sqlite3GlobalFunctions
sqlite3GlobalConfig.inProgress = 1;
sqlite3GlobalConfig.inProgress = 1
sqlite3GlobalConfig.inProgress
sqlite3GlobalConfig
sqlite3GlobalConfig
inProgress
1
printf("memset(pHash, 0, sizeof(sqlite3GlobalFunctions));\n");
printf("memset(pHash, 0, sizeof(sqlite3GlobalFunctions));\n")
printf
printf
"memset(pHash, 0, sizeof(sqlite3GlobalFunctions));\n"
memset(pHash, 0, sizeof(sqlite3GlobalFunctions));
memset(pHash, 0, sizeof(sqlite3GlobalFunctions))
memset
memset
pHash
pHash
0
sizeof(sqlite3GlobalFunctions)
sqlite3GlobalFunctions
sqlite3GlobalFunctions
sqlite3GlobalFunctions

printf("sqlite3RegisterGlobalFunctions();\n");
printf("sqlite3RegisterGlobalFunctions();\n")
printf
printf
"sqlite3RegisterGlobalFunctions();\n"
sqlite3RegisterGlobalFunctions();
sqlite3RegisterGlobalFunctions()
sqlite3RegisterGlobalFunctions
sqlite3RegisterGlobalFunctions
if( sqlite3GlobalConfig.isPCacheInit==0 ){printf("if(sqlite3GlobalConfig.isPCacheInit==0)\n");          printf("rc = sqlite3PcacheInitialize();\n");rc = sqlite3PcacheInitialize();    }
sqlite3GlobalConfig.isPCacheInit==0
sqlite3GlobalConfig.isPCacheInit
sqlite3GlobalConfig
sqlite3GlobalConfig
isPCacheInit
0
{printf("if(sqlite3GlobalConfig.isPCacheInit==0)\n");          printf("rc = sqlite3PcacheInitialize();\n");rc = sqlite3PcacheInitialize();    }
printf("if(sqlite3GlobalConfig.isPCacheInit==0)\n");
printf("if(sqlite3GlobalConfig.isPCacheInit==0)\n")
printf
printf
"if(sqlite3GlobalConfig.isPCacheInit==0)\n"
printf("rc = sqlite3PcacheInitialize();\n");
printf("rc = sqlite3PcacheInitialize();\n")
printf
printf
"rc = sqlite3PcacheInitialize();\n"
rc = sqlite3PcacheInitialize();
rc = sqlite3PcacheInitialize()
rc
rc
sqlite3PcacheInitialize()
sqlite3PcacheInitialize
sqlite3PcacheInitialize
if( rc==SQLITE_OK ){printf("if()\n");          sqlite3GlobalConfig.isPCacheInit = 1;      printf("rc = sqlite3OsInit();\n");rc = sqlite3OsInit();    }
rc==SQLITE_OK
rc
rc
SQLITE_OK
SQLITE_OK
{printf("if()\n");          sqlite3GlobalConfig.isPCacheInit = 1;      printf("rc = sqlite3OsInit();\n");rc = sqlite3OsInit();    }
printf("if()\n");
printf("if()\n")
printf
printf
"if()\n"
sqlite3GlobalConfig.isPCacheInit = 1;
sqlite3GlobalConfig.isPCacheInit = 1
sqlite3GlobalConfig.isPCacheInit
sqlite3GlobalConfig
sqlite3GlobalConfig
isPCacheInit
1
printf("rc = sqlite3OsInit();\n");
printf("rc = sqlite3OsInit();\n")
printf
printf
"rc = sqlite3OsInit();\n"
rc = sqlite3OsInit();
rc = sqlite3OsInit()
rc
rc
sqlite3OsInit()
sqlite3OsInit
sqlite3OsInit
if( rc==SQLITE_OK ){printf("if()\n");          printf("sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,            sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);\n");      sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,           sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);      sqlite3GlobalConfig.isInit = 1;#ifdef SQLITE_EXTRA_INIT      printf("bRunExtraInit = 1;\n");bRunExtraInit = 1;#endif    }
rc==SQLITE_OK
rc
rc
SQLITE_OK
SQLITE_OK
{printf("if()\n");          printf("sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,            sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);\n");      sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,           sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);      sqlite3GlobalConfig.isInit = 1;#ifdef SQLITE_EXTRA_INIT      printf("bRunExtraInit = 1;\n");bRunExtraInit = 1;#endif    }
printf("if()\n");
printf("if()\n")
printf
printf
"if()\n"
printf("sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,            sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);\n");
printf("sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,            sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);\n")
printf
printf
"sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,            sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);\n"
sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,           sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage);
sqlite3PCacheBufferSetup( sqlite3GlobalConfig.pPage,           sqlite3GlobalConfig.szPage, sqlite3GlobalConfig.nPage)
sqlite3PCacheBufferSetup
sqlite3PCacheBufferSetup
sqlite3GlobalConfig.pPage
sqlite3GlobalConfig
sqlite3GlobalConfig
pPage
sqlite3GlobalConfig.szPage
sqlite3GlobalConfig
sqlite3GlobalConfig
szPage
sqlite3GlobalConfig.nPage
sqlite3GlobalConfig
sqlite3GlobalConfig
nPage
sqlite3GlobalConfig.isInit = 1;
sqlite3GlobalConfig.isInit = 1
sqlite3GlobalConfig.isInit
sqlite3GlobalConfig
sqlite3GlobalConfig
isInit
1
sqlite3GlobalConfig.inProgress = 0;
sqlite3GlobalConfig.inProgress = 0
sqlite3GlobalConfig.inProgress
sqlite3GlobalConfig
sqlite3GlobalConfig
inProgress
0
sqlite3_mutex_leave(sqlite3GlobalConfig.pInitMutex);
sqlite3_mutex_leave(sqlite3GlobalConfig.pInitMutex)
sqlite3_mutex_leave
sqlite3_mutex_leave
sqlite3GlobalConfig.pInitMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
pInitMutex
sqlite3_mutex_enter(pMaster);
sqlite3_mutex_enter(pMaster)
sqlite3_mutex_enter
sqlite3_mutex_enter
pMaster
pMaster
sqlite3GlobalConfig.nRefInitMutex--;
sqlite3GlobalConfig.nRefInitMutex--
sqlite3GlobalConfig.nRefInitMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
nRefInitMutex
if( sqlite3GlobalConfig.nRefInitMutex<=0 ){printf("if(sqlite3GlobalConfig.nRefInitMutex<=0)\n");      printf("assert( sqlite3GlobalConfig.nRefInitMutex==0 );\n");    assert( sqlite3GlobalConfig.nRefInitMutex==0 );    sqlite3_mutex_free(sqlite3GlobalConfig.pInitMutex);    sqlite3GlobalConfig.pInitMutex = 0;  }
sqlite3GlobalConfig.nRefInitMutex<=0
sqlite3GlobalConfig.nRefInitMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
nRefInitMutex
0
{printf("if(sqlite3GlobalConfig.nRefInitMutex<=0)\n");      printf("assert( sqlite3GlobalConfig.nRefInitMutex==0 );\n");    assert( sqlite3GlobalConfig.nRefInitMutex==0 );    sqlite3_mutex_free(sqlite3GlobalConfig.pInitMutex);    sqlite3GlobalConfig.pInitMutex = 0;  }
printf("if(sqlite3GlobalConfig.nRefInitMutex<=0)\n");
printf("if(sqlite3GlobalConfig.nRefInitMutex<=0)\n")
printf
printf
"if(sqlite3GlobalConfig.nRefInitMutex<=0)\n"
printf("assert( sqlite3GlobalConfig.nRefInitMutex==0 );\n");
printf("assert( sqlite3GlobalConfig.nRefInitMutex==0 );\n")
printf
printf
"assert( sqlite3GlobalConfig.nRefInitMutex==0 );\n"
assert( sqlite3GlobalConfig.nRefInitMutex==0 );
assert( sqlite3GlobalConfig.nRefInitMutex==0 )
assert
assert
sqlite3GlobalConfig.nRefInitMutex==0
sqlite3GlobalConfig.nRefInitMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
nRefInitMutex
0
sqlite3_mutex_free(sqlite3GlobalConfig.pInitMutex);
sqlite3_mutex_free(sqlite3GlobalConfig.pInitMutex)
sqlite3_mutex_free
sqlite3_mutex_free
sqlite3GlobalConfig.pInitMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
pInitMutex
sqlite3GlobalConfig.pInitMutex = 0;
sqlite3GlobalConfig.pInitMutex = 0
sqlite3GlobalConfig.pInitMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
pInitMutex
0
sqlite3_mutex_leave(pMaster);
sqlite3_mutex_leave(pMaster)
sqlite3_mutex_leave
sqlite3_mutex_leave
pMaster
pMaster
if ( rc==SQLITE_OK ){    u64 x = (((u64)1)<<63)-1;    double y;    assert(sizeof(x)==8);    assert(sizeof(x)==sizeof(y));    memcpy(&y, &x, 8);    assert( sqlite3IsNaN(y) );  }
rc==SQLITE_OK
rc
rc
SQLITE_OK
SQLITE_OK
{    u64 x = (((u64)1)<<63)-1;    double y;    assert(sizeof(x)==8);    assert(sizeof(x)==sizeof(y));    memcpy(&y, &x, 8);    assert( sqlite3IsNaN(y) );  }
u64 x = (((u64)1)<<63)-1;
u64 x = (((u64)1)<<63)-1;
u64
u64
x = (((u64)1)<<63)-1
x
= (((u64)1)<<63)-1
(((u64)1)<<63)-1
(((u64)1)<<63)
((u64)1)<<63
((u64)1)
(u64)1
u64
u64
u64

1
63
1
double y;
double y;
double
y
y
assert(sizeof(x)==8);
assert(sizeof(x)==8)
assert
assert
sizeof(x)==8
sizeof(x)
(x)
x
x
8
assert(sizeof(x)==sizeof(y));
assert(sizeof(x)==sizeof(y))
assert
assert
sizeof(x)==sizeof(y)
sizeof(x)
(x)
x
x
sizeof(y)
(y)
y
y
memcpy(&y, &x, 8);
memcpy(&y, &x, 8)
memcpy
memcpy
&y
y
y
&x
x
x
8
assert( sqlite3IsNaN(y) );
assert( sqlite3IsNaN(y) )
assert
assert
sqlite3IsNaN(y)
sqlite3IsNaN
sqlite3IsNaN
y
y
printf("return rc;\n");
printf("return rc;\n")
printf
printf
"return rc;\n"
printf("------function end!------\n");
printf("------function end!------\n")
printf
printf
"------function end!------\n"
return rc;
rc
rc
printf("------function end!------\n");
printf("------function end!------\n")
printf
printf
"------function end!------\n"
-----joern-----
(41,151,0)
(173,190,0)
(163,146,0)
(194,102,0)
(6,64,0)
(93,65,0)
(83,125,0)
(34,15,0)
(193,68,0)
(86,132,0)
(122,1,0)
(74,65,0)
(107,145,0)
(123,107,0)
(38,143,0)
(34,125,0)
(92,10,0)
(180,199,0)
(23,192,0)
(157,140,0)
(153,34,0)
(2,131,0)
(42,6,0)
(15,34,0)
(209,85,0)
(7,74,0)
(156,199,0)
(65,203,0)
(49,184,0)
(164,167,0)
(128,132,0)
(151,138,0)
(30,157,0)
(184,69,0)
(20,69,0)
(188,125,0)
(130,44,0)
(127,88,0)
(64,69,0)
(129,140,0)
(65,161,0)
(89,142,0)
(39,69,0)
(85,125,0)
(91,199,0)
(6,42,0)
(154,69,0)
(174,108,0)
(150,176,0)
(12,209,0)
(27,187,0)
(11,198,0)
(146,195,0)
(148,156,0)
(55,73,0)
(42,61,0)
(65,74,0)
(29,127,0)
(74,7,0)
(179,160,0)
(209,12,0)
(195,146,0)
(186,133,0)
(77,22,0)
(9,199,0)
(139,111,0)
(88,127,0)
(210,199,0)
(146,44,0)
(190,195,0)
(138,135,0)
(124,69,0)
(137,61,0)
(158,116,0)
(135,203,0)
(58,20,0)
(203,67,0)
(162,55,0)
(78,15,0)
(81,203,0)
(155,108,0)
(140,65,0)
(16,72,0)
(15,26,0)
(132,211,0)
(160,179,0)
(206,90,0)
(84,51,0)
(147,136,0)
(103,199,0)
(135,138,0)
(203,199,0)
(19,114,0)
(141,108,0)
(65,140,0)
(209,49,0)
(43,49,0)
(133,118,0)
(123,69,0)
(81,190,0)
(12,69,0)
(56,179,0)
(208,67,0)
(94,68,0)
(104,108,0)
(61,42,0)
(127,140,0)
(115,180,0)
(146,163,0)
(140,199,0)
(122,132,0)
(212,9,0)
(182,107,0)
(85,184,0)
(134,144,0)
(114,141,0)
(117,206,0)
(132,125,0)
(131,195,0)
(169,130,0)
(68,70,0)
(167,108,0)
(192,199,0)
(191,69,0)
(1,70,0)
(105,143,0)
(90,125,0)
(47,72,0)
(119,103,0)
(100,125,0)
(107,182,0)
(211,132,0)
(13,118,0)
(45,127,0)
(22,199,0)
(118,20,0)
(118,133,0)
(4,129,0)
(184,132,0)
(173,125,0)
(116,69,0)
(196,102,0)
(18,131,0)
(97,173,0)
(67,203,0)
(195,69,0)
(175,190,0)
(44,146,0)
(179,187,0)
(206,123,0)
(136,199,0)
(48,1,0)
(79,160,0)
(44,130,0)
(20,118,0)
(152,100,0)
(101,73,0)
(197,88,0)
(51,73,0)
(133,125,0)
(68,108,0)
(126,191,0)
(143,184,0)
(72,144,0)
(113,130,0)
(88,201,0)
(160,125,0)
(132,122,0)
(132,184,0)
(125,73,0)
(6,66,0)
(5,47,0)
(129,4,0)
(87,65,0)
(35,64,0)
(49,209,0)
(183,36,0)
(110,191,0)
(68,184,0)
(72,47,0)
(63,140,0)
(102,125,0)
(99,210,0)
(7,70,0)
(130,125,0)
(151,4,0)
(26,69,0)
(96,85,0)
(75,141,0)
(66,6,0)
(81,25,0)
(111,69,0)
(190,81,0)
(21,7,0)
(53,69,0)
(90,206,0)
(64,6,0)
(166,2,0)
(102,211,0)
(59,160,0)
(112,199,0)
(138,100,0)
(25,69,0)
(71,69,0)
(176,125,0)
(40,20,0)
(118,195,0)
(181,83,0)
(200,2,0)
(95,199,0)
(35,83,0)
(185,104,0)
(178,184,0)
(82,25,0)
(47,125,0)
(157,199,0)
(33,90,0)
(107,123,0)
(17,35,0)
(100,70,0)
(83,35,0)
(52,173,0)
(131,2,0)
(80,61,0)
(182,176,0)
(121,124,0)
(10,199,0)
(1,122,0)
(57,157,0)
(28,202,0)
(62,203,0)
(20,203,0)
(170,154,0)
(36,199,0)
(176,182,0)
(67,161,0)
(2,125,0)
(165,135,0)
(46,90,0)
(168,47,0)
(85,209,0)
(54,207,0)
(202,69,0)
(159,26,0)
(50,39,0)
(205,71,0)
(149,174,0)
(20,161,0)
(157,207,0)
(138,151,0)
(145,107,0)
(106,34,0)
(98,210,0)
(171,69,0)
(37,1,0)
(211,195,0)
(120,85,0)
(0,135,0)
(204,36,0)
(177,211,0)
(3,7,0)
(24,114,0)
(60,207,0)
(125,100,0)
(187,69,0)
(132,203,0)
(114,70,0)
(61,125,0)
(142,69,0)
(172,83,0)
(8,49,0)
(31,133,0)
(144,69,0)
(76,81,0)
(100,138,0)
(4,151,0)
(198,69,0)
(189,129,0)
(109,155,0)
(157,125,0)
(211,102,0)
(207,108,0)
(190,173,0)
(32,176,0)
(35,83,1)
(194,122,1)
(1,48,1)
(173,52,1)
(182,176,1)
(129,140,1)
(39,50,1)
(67,208,1)
(210,98,1)
(49,184,1)
(37,178,1)
(107,145,1)
(208,62,1)
(29,45,1)
(186,31,1)
(88,197,1)
(148,203,1)
(142,89,1)
(166,71,1)
(168,123,1)
(150,32,1)
(76,190,1)
(22,77,1)
(65,93,1)
(206,117,1)
(33,39,1)
(178,202,1)
(6,42,1)
(14,125,1)
(132,128,1)
(157,140,1)
(122,1,1)
(176,125,1)
(81,190,1)
(65,203,1)
(100,70,1)
(106,153,1)
(190,173,1)
(100,138,1)
(132,203,1)
(149,143,1)
(187,27,1)
(51,84,1)
(179,160,1)
(204,183,1)
(139,184,1)
(120,96,1)
(44,130,1)
(31,116,1)
(6,66,1)
(131,2,1)
(184,132,1)
(159,15,1)
(16,47,1)
(2,125,1)
(110,126,1)
(147,10,1)
(107,182,1)
(176,150,1)
(75,114,1)
(21,3,1)
(23,207,1)
(132,125,1)
(42,61,1)
(143,184,1)
(35,17,1)
(55,162,1)
(85,120,1)
(160,59,1)
(26,159,1)
(43,111,1)
(92,180,1)
(151,4,1)
(157,207,1)
(40,118,1)
(138,151,1)
(2,200,1)
(117,90,1)
(133,186,1)
(71,205,1)
(60,167,1)
(88,127,1)
(203,67,1)
(85,184,1)
(154,170,1)
(126,124,1)
(131,18,1)
(20,203,1)
(114,19,1)
(10,92,1)
(136,147,1)
(68,70,1)
(127,140,1)
(129,189,1)
(105,12,1)
(80,35,1)
(89,187,1)
(132,211,1)
(207,54,1)
(9,212,1)
(4,129,1)
(3,63,1)
(84,88,1)
(1,70,1)
(146,44,1)
(88,201,1)
(153,64,1)
(86,211,1)
(79,195,1)
(164,68,1)
(123,107,1)
(206,90,1)
(202,28,1)
(125,100,1)
(54,60,1)
(200,166,1)
(190,195,1)
(41,152,1)
(49,8,1)
(124,121,1)
(170,20,1)
(19,24,1)
(132,122,1)
(11,14,1)
(102,196,1)
(27,179,1)
(209,49,1)
(47,5,1)
(7,21,1)
(61,137,1)
(188,55,1)
(87,74,1)
(189,41,1)
(23,88,1)
(109,174,1)
(81,76,1)
(64,6,1)
(134,72,1)
(81,203,1)
(180,115,1)
(45,140,1)
(162,51,1)
(90,125,1)
(83,181,1)
(38,105,1)
(197,127,1)
(48,37,1)
(65,161,1)
(8,43,1)
(57,103,1)
(137,80,1)
(211,177,1)
(12,209,1)
(83,125,1)
(181,172,1)
(177,102,1)
(119,192,1)
(128,86,1)
(7,70,1)
(85,125,1)
(30,9,1)
(65,74,1)
(211,102,1)
(68,94,1)
(118,133,1)
(25,82,1)
(36,204,1)
(133,125,1)
(173,125,1)
(5,168,1)
(34,125,1)
(67,161,1)
(23,143,1)
(121,198,1)
(61,125,1)
(118,13,1)
(140,65,1)
(155,109,1)
(99,36,1)
(20,118,1)
(68,184,1)
(96,49,1)
(63,156,1)
(143,38,1)
(52,97,1)
(152,188,1)
(17,83,1)
(78,34,1)
(130,113,1)
(20,161,1)
(191,110,1)
(205,191,1)
(135,0,1)
(97,154,1)
(93,87,1)
(138,135,1)
(58,40,1)
(185,141,1)
(34,106,1)
(23,14,1)
(160,125,1)
(103,119,1)
(195,146,1)
(72,47,1)
(32,206,1)
(144,134,1)
(192,23,1)
(165,151,1)
(15,34,1)
(115,210,1)
(15,78,1)
(196,194,1)
(118,195,1)
(174,149,1)
(59,79,1)
(179,56,1)
(18,2,1)
(104,185,1)
(209,85,1)
(157,57,1)
(211,195,1)
(50,26,1)
(146,163,1)
(198,11,1)
(190,175,1)
(56,160,1)
(28,25,1)
(114,70,1)
(13,133,1)
(24,155,1)
(30,157,1)
(111,139,1)
(47,125,1)
(0,165,1)
(102,125,1)
(74,7,1)
(20,58,1)
(127,29,1)
(135,203,1)
(167,164,1)
(77,136,1)
(157,125,1)
(72,16,1)
(158,144,1)
(82,81,1)
(193,104,1)
(113,169,1)
(62,22,1)
(172,142,1)
(130,125,1)
(175,173,1)
(169,131,1)
(141,75,1)
(46,33,1)
(94,193,1)
(156,148,1)
(98,99,1)
(116,158,1)
(90,46,1)
(138,151,2)
(117,14,2)
(179,14,2)
(24,143,2)
(64,6,2)
(41,88,2)
(211,195,2)
(126,14,2)
(65,203,2)
(129,88,2)
(195,14,2)
(129,140,2)
(90,125,2)
(104,143,2)
(32,14,2)
(17,14,2)
(138,135,2)
(85,49,2)
(15,34,2)
(80,14,2)
(130,14,2)
(100,138,2)
(118,14,2)
(146,163,2)
(59,14,2)
(194,14,2)
(75,143,2)
(20,203,2)
(81,203,2)
(186,14,2)
(182,176,2)
(206,90,2)
(181,14,2)
(35,14,2)
(167,143,2)
(4,129,2)
(131,14,2)
(179,160,2)
(130,125,2)
(122,14,2)
(11,14,2)
(114,70,2)
(113,14,2)
(157,125,2)
(67,161,2)
(68,184,2)
(1,70,2)
(71,14,2)
(49,14,2)
(131,2,2)
(172,14,2)
(132,125,2)
(44,130,2)
(169,14,2)
(196,14,2)
(37,14,2)
(58,14,2)
(176,14,2)
(106,14,2)
(206,14,2)
(176,125,2)
(124,14,2)
(12,14,2)
(142,14,2)
(13,14,2)
(1,14,2)
(160,14,2)
(133,125,2)
(46,14,2)
(188,88,2)
(175,14,2)
(153,14,2)
(28,14,2)
(50,14,2)
(34,125,2)
(65,161,2)
(197,127,2)
(34,14,2)
(6,14,2)
(151,88,2)
(94,143,2)
(207,143,2)
(125,88,2)
(82,14,2)
(178,14,2)
(195,146,2)
(152,88,2)
(111,14,2)
(15,14,2)
(86,14,2)
(141,143,2)
(78,14,2)
(88,201,2)
(0,88,2)
(139,14,2)
(205,14,2)
(123,14,2)
(90,14,2)
(52,14,2)
(26,14,2)
(6,42,2)
(105,14,2)
(27,14,2)
(133,14,2)
(146,14,2)
(190,14,2)
(48,14,2)
(177,14,2)
(97,14,2)
(170,14,2)
(209,49,2)
(155,143,2)
(51,88,2)
(134,14,2)
(85,184,2)
(132,122,2)
(203,67,2)
(173,14,2)
(14,88,2)
(38,14,2)
(68,143,2)
(211,102,2)
(166,14,2)
(31,14,2)
(144,14,2)
(120,49,2)
(138,88,2)
(33,14,2)
(122,1,2)
(132,203,2)
(85,125,2)
(81,14,2)
(68,70,2)
(118,195,2)
(135,203,2)
(107,182,2)
(89,14,2)
(96,49,2)
(187,14,2)
(64,14,2)
(140,65,2)
(102,125,2)
(72,47,2)
(47,125,2)
(116,14,2)
(54,143,2)
(184,14,2)
(42,14,2)
(44,14,2)
(168,14,2)
(159,14,2)
(19,143,2)
(137,14,2)
(74,7,2)
(42,61,2)
(193,143,2)
(8,14,2)
(83,14,2)
(35,83,2)
(123,107,2)
(109,143,2)
(65,74,2)
(209,85,2)
(81,190,2)
(190,195,2)
(160,125,2)
(60,143,2)
(132,14,2)
(150,14,2)
(20,161,2)
(61,14,2)
(121,14,2)
(5,14,2)
(173,125,2)
(55,88,2)
(146,44,2)
(191,14,2)
(107,14,2)
(2,14,2)
(118,133,2)
(100,70,2)
(190,173,2)
(114,143,2)
(174,143,2)
(185,143,2)
(25,14,2)
(151,4,2)
(18,14,2)
(76,14,2)
(39,14,2)
(20,14,2)
(43,14,2)
(162,88,2)
(132,211,2)
(56,14,2)
(127,140,2)
(40,14,2)
(72,14,2)
(149,143,2)
(198,14,2)
(184,132,2)
(49,184,2)
(84,88,2)
(100,88,2)
(209,14,2)
(135,88,2)
(4,88,2)
(107,145,2)
(61,125,2)
(128,14,2)
(6,66,2)
(7,70,2)
(157,207,2)
(12,209,2)
(182,14,2)
(79,14,2)
(125,100,2)
(88,127,2)
(16,14,2)
(83,125,2)
(143,14,2)
(211,14,2)
(189,88,2)
(164,143,2)
(20,118,2)
(165,88,2)
(158,14,2)
(2,125,2)
(47,14,2)
(30,157,2)
(102,14,2)
(154,14,2)
(202,14,2)
(110,14,2)
(143,184,2)
(200,14,2)
(157,140,2)
-----------------------------------
(0,1)
(1,db->aCollSeq)
(2,pColl[0])
(3,db)
(4,sizeof(*pColl)
(5,2)
(6,(char*)
(7,db->aCollSeq)
(8,0)
(9,printf("------function end!------\\n")
(10,printf("static CollSeq *findCollSeqEntry(   sqlite3 *db,          /* Database connection */   const char *zName,    /* Name of the collating sequence */   int create            /* Create a new entry if true */ )
(11,"if(pColl)
(12,assert( pDel==0 || pDel==pColl )
(13,zName)
(14,pColl)
(15,pColl[1].enc)
(16,enc)
(17,zName)
(18,zName)
(19,mallocFailed)
(20,memcpy(pColl[0].zName, zName, nName)
(21,aCollSeq)
(22,printf("int nName = sqlite3Strlen30(zName)
(23,"return pColl;\\n")
(24,db)
(25,pColl[0].zName[nName] = 0)
(26,pColl[1].enc = SQLITE_UTF16LE)
(27,SQLITE_UTF8)
(28,"pDel = sqlite3HashInsert(&db->aCollSeq, pColl[0].zName, nName, pColl)
(29,pColl)
(30,RET)
(31,pColl)
(32,pColl)
(33,pColl)
(34,pColl[1])
(35,pColl[1].zName)
(36,printf("\\nfile_name:%s\\n",__FILE__)
(37,db)
(38,0)
(39,printf("pColl[2].zName = (char*)
(40,zName)
(41,3)
(42,&pColl[3])
(43,pDel)
(44,&pColl[3])
(45,0)
(46,2)
(47,pColl[2])
(48,aCollSeq)
(49,pDel==0)
(50,"pColl[2].zName = (char*)
(51,printf("if(0==pColl && create)
(52,0)
(53,if( pDel!=0 )
(54,0)
(55,printf("pColl = sqlite3DbMallocZero(db, 3*sizeof(*pColl)
(56,enc)
(57,pColl)
(58,nName)
(59,0)
(60,pColl)
(61,pColl[3])
(62,nName)
(63,pColl)
(64,pColl[1].zName = (char*)
(65,sqlite3HashFind(&db->aCollSeq, zName, nName)
(66,char*)
(67,sqlite3Strlen30(zName)
(68,sqlite3DbFree(db, pDel)
(69,)
(70,sqlite3 *db)
(71,printf("pColl[0].zName = (char*)
(72,pColl[2].enc)
(73,)
(74,&db->aCollSeq)
(75,1)
(76,nName)
(77,"int nName = sqlite3Strlen30(zName)
(78,enc)
(79,pColl)
(80,pColl)
(81,pColl[0].zName[nName])
(82,0)
(83,pColl[1])
(84,"if(0==pColl && create)
(85,pDel==pColl)
(86,nName)
(87,zName)
(88,0==pColl && create)
(89,"pColl[1].zName = (char*)
(90,pColl[2])
(91,nName)
(92,"static CollSeq *findCollSeqEntry(   sqlite3 *db,          /* Database connection */   const char *zName,    /* Name of the collating sequence */   int create            /* Create a new entry if true */ )
(93,nName)
(94,pDel)
(95,pColl)
(96,pDel)
(97,pColl)
(98,__func__)
(99,"function_name:%s\\n")
(100,sqlite3DbMallocZero(db, 3*sizeof(*pColl)
(101,if( pColl )
(102,pColl[0])
(103,printf("------function end!------\\n")
(104,printf("sqlite3DbFree(db, pDel)
(105,pDel)
(106,1)
(107,(char*)
(108,)
(109,"db->mallocFailed = 1;\\n")
(110,0)
(111,printf("assert( pDel==0 || pDel==pColl )
(112,if( 0==pColl && create )
(113,3)
(114,db->mallocFailed)
(115,"------function start!------\\n")
(116,printf("memcpy(pColl[0].zName, zName, nName)
(117,zName)
(118,pColl[0].zName)
(119,"------function end!------\\n")
(120,pColl)
(121,"CollSeq *pDel = 0;\\n")
(122,&db->aCollSeq)
(123,pColl[2].zName = (char*)
(124,printf("CollSeq *pDel = 0;\\n")
(125,pColl = sqlite3DbMallocZero(db, 3*sizeof(*pColl)
(126,pDel)
(127,0==pColl)
(128,pColl)
(129,*pColl)
(130,pColl[3])
(131,pColl[0].zName)
(132,sqlite3HashInsert(&db->aCollSeq, pColl[0].zName, nName, pColl)
(133,pColl[0])
(134,SQLITE_UTF16BE)
(135,nName + 1)
(136,printf("CollSeq *pColl;\\n")
(137,3)
(138,3*sizeof(*pColl)
(139,"assert( pDel==0 || pDel==pColl )
(140,pColl = sqlite3HashFind(&db->aCollSeq, zName, nName)
(141,db->mallocFailed = 1)
(142,printf("pColl[1].zName = (char*)
(143,pDel!=0)
(144,pColl[2].enc = SQLITE_UTF16BE)
(145,char*)
(146,(char*)
(147,"CollSeq *pColl;\\n")
(148,"pColl = sqlite3HashFind(&db->aCollSeq, zName, nName)
(149,"if(pDel!=0)
(150,3)
(151,3*sizeof(*pColl)
(152,db)
(153,pColl)
(154,printf("pColl[0].zName[nName] = 0;\\n")
(155,printf("db->mallocFailed = 1;\\n")
(156,printf("pColl = sqlite3HashFind(&db->aCollSeq, zName, nName)
(157,return pColl;)
(158,"memcpy(pColl[0].zName, zName, nName)
(159,SQLITE_UTF16LE)
(160,pColl[0])
(161,const char *zName)
(162,"pColl = sqlite3DbMallocZero(db, 3*sizeof(*pColl)
(163,char*)
(164,"pColl = 0;\\n")
(165,nName)
(166,pColl)
(167,printf("pColl = 0;\\n")
(168,pColl)
(169,pColl)
(170,"pColl[0].zName[nName] = 0;\\n")
(171,pDel)
(172,pColl)
(173,pColl[0])
(174,printf("if(pDel!=0)
(175,zName)
(176,pColl[3])
(177,zName)
(178,pDel)
(179,pColl[0].enc)
(180,printf("------function start!------\\n")
(181,1)
(182,&pColl[3])
(183,"\\nfile_name:%s\\n")
(184,pDel = sqlite3HashInsert(&db->aCollSeq, pColl[0].zName, nName, pColl)
(185,"sqlite3DbFree(db, pDel)
(186,0)
(187,pColl[0].enc = SQLITE_UTF8)
(188,pColl)
(189,pColl)
(190,pColl[0].zName)
(191,*pDel = 0)
(192,printf("return pColl;\\n")
(193,db)
(194,pColl)
(195,pColl[0].zName = (char*)
(196,0)
(197,create)
(198,printf("if(pColl)
(199,)
(200,0)
(201,int create)
(202,printf("pDel = sqlite3HashInsert(&db->aCollSeq, pColl[0].zName, nName, pColl)
(203,nName = sqlite3Strlen30(zName)
(204,__FILE__)
(205,"pColl[0].zName = (char*)
(206,pColl[2].zName)
(207,pColl = 0)
(208,zName)
(209,pDel==0 || pDel==pColl)
(210,printf("function_name:%s\\n",__func__)
(211,pColl[0].zName)
(212,"------function end!------\\n")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
stdin-stat:0x000800000000000001000000ffffffff0100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff2ff9366400000000ffffffffffffffff9ff8366400000000ffffffffffffffff9ff8366400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
stdin:0x0b00000000000000000000000000000000000000
=========trace=========
int sqlite3_initialize(void){
int rc;
rc = sqlite3MutexInit();
=======================
