-----label-----
1
-----code-----
static int
yaml_parser_scan_tag_uri(yaml_parser_t *parser, int directive,
        yaml_char_t *head, yaml_mark_t start_mark, yaml_char_t **uri)
{
    size_t length = head ? strlen((char *)head) : 0;
    yaml_string_t string = NULL_STRING;

    if (!STRING_INIT(parser, string, INITIAL_STRING_SIZE)) goto error;

    /* Resize the string to include the head. */

    while (string.end - string.start <= (int)length) {
        if (!yaml_string_extend(&string.start, &string.pointer, &string.end)) {
            parser->error = YAML_MEMORY_ERROR;
            goto error;
        }
    }

    /*
     * Copy the head if needed.
     *
     * Note that we don't copy the leading '!' character.
     */

    if (length > 1) {
        memcpy(string.start, head+1, length-1);
        string.pointer += length-1;
    }

    /* Scan the tag. */

    if (!CACHE(parser, 1)) goto error;

    /*
     * The set of characters that may appear in URI is as follows:
     *
     *      '0'-'9', 'A'-'Z', 'a'-'z', '_', '-', ';', '/', '?', ':', '@', '&',
     *      '=', '+', '$', ',', '.', '!', '~', '*', '\'', '(', ')', '[', ']',
     *      '%'.
     */

    while (IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')
            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')
            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')
            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')
            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')
            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')
            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')
            || CHECK(parser->buffer, '*') || CHECK(parser->buffer, '\'')
            || CHECK(parser->buffer, '(') || CHECK(parser->buffer, ')')
            || CHECK(parser->buffer, '[') || CHECK(parser->buffer, ']')
            || CHECK(parser->buffer, '%'))
    {
        /* Check if it is a URI-escape sequence. */

        if (CHECK(parser->buffer, '%')) {
            if (!yaml_parser_scan_uri_escapes(parser,
                        directive, start_mark, &string)) goto error;
        }
        else {
            if (!READ(parser, string)) goto error;
        }

        length ++;
        if (!CACHE(parser, 1)) goto error;
    }

    /* Check if the tag is non-empty. */

    if (!length) {
        if (!STRING_EXTEND(parser, string))
            goto error;

        yaml_parser_set_scanner_error(parser, directive ?
                "while parsing a %TAG directive" : "while parsing a tag",
                start_mark, "did not find expected tag URI");
        goto error;
    }

    *uri = string.start;

    return 1;

error:
    STRING_DEL(parser, string);
    return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
29,30
29,31
29,32
33,34
33,35
33,36
33,37
33,38
33,39
33,40
33,41
33,42
33,43
33,44
33,45
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
41,44
42,43
44,45
44,46
45,46
47,48
47,49
48,49
48,50
50,51
52,53
55,56
56,57
56,58
57,58
59,60
59,61
61,62
62,63
64,65
64,66
65,66
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
75,76
77,78
77,79
78,79
78,80
79,80
79,81
80,81
80,82
81,82
84,85
84,86
85,86
88,89
88,90
89,90
89,91
92,93
94,95
95,96
95,97
96,97
97,98
97,99
97,100
97,101
98,99
100,101
101,102
101,103
102,103
105,106
106,107
106,108
107,108
110,111
111,112
111,113
112,113
115,116
115,117
116,117
117,118
117,119
118,119
118,120
119,120
122,123
124,125
126,127
126,128
127,128
127,129
128,129
131,132
131,133
132,133
133,134
133,135
133,136
133,137
134,135
136,137
136,138
137,138
140,141
140,142
141,142
144,145
144,146
145,146
148,149
149,150
149,151
150,151
150,152
151,152
154,155
154,156
155,156
158,159
158,160
159,160
160,161
160,162
160,163
161,162
163,164
166,167
168,169
168,170
169,170
169,171
170,171
170,172
171,172
171,173
172,173
172,174
173,174
173,175
174,175
174,176
175,176
175,177
176,177
176,178
177,178
177,179
178,179
178,180
179,180
179,181
180,181
180,182
181,182
181,183
182,183
182,184
183,184
183,185
184,185
184,186
185,186
185,187
186,187
186,188
187,188
187,189
188,189
188,190
189,190
189,191
190,191
192,193
192,194
193,194
196,197
196,198
196,199
197,198
199,200
199,201
200,201
204,205
204,206
204,207
205,206
207,208
207,209
208,209
212,213
212,214
212,215
213,214
215,216
215,217
216,217
220,221
220,222
220,223
221,222
223,224
223,225
224,225
228,229
228,230
228,231
229,230
231,232
231,233
232,233
236,237
236,238
236,239
237,238
239,240
239,241
240,241
244,245
244,246
244,247
245,246
247,248
247,249
248,249
252,253
252,254
252,255
253,254
255,256
255,257
256,257
260,261
260,262
260,263
261,262
263,264
263,265
264,265
268,269
268,270
268,271
269,270
271,272
271,273
272,273
276,277
276,278
276,279
277,278
279,280
279,281
280,281
284,285
284,286
284,287
285,286
287,288
287,289
288,289
292,293
292,294
292,295
293,294
295,296
295,297
296,297
300,301
300,302
300,303
301,302
303,304
303,305
304,305
308,309
308,310
308,311
309,310
311,312
311,313
312,313
316,317
316,318
316,319
317,318
319,320
319,321
320,321
324,325
324,326
324,327
325,326
327,328
327,329
328,329
332,333
332,334
332,335
333,334
335,336
335,337
336,337
340,341
340,342
340,343
341,342
343,344
343,345
344,345
348,349
348,350
348,351
349,350
351,352
351,353
352,353
356,357
356,358
356,359
357,358
357,359
357,360
358,359
358,360
358,361
359,360
361,362
361,363
362,363
366,367
367,368
367,369
368,369
369,370
369,371
369,372
369,373
369,374
370,371
372,373
374,375
376,377
378,379
379,380
381,382
383,384
384,385
384,386
385,386
386,387
386,388
386,389
387,388
389,390
391,392
393,394
395,396
396,397
397,398
399,400
399,401
400,401
401,402
401,403
401,404
402,403
404,405
407,408
409,410
409,411
410,411
411,412
413,414
413,415
413,416
414,415
414,416
415,416
416,417
416,418
416,419
417,418
419,420
421,422
423,424
425,426
426,427
426,428
426,429
426,430
426,431
427,428
429,430
431,432
431,433
431,434
432,433
436,437
439,440
441,442
442,443
442,444
443,444
444,445
446,447
446,448
447,448
450,451
452,453
452,454
454,455
455,456
455,457
455,458
456,457
458,459
460,461
462,463
-----nextToken-----
2,4,7,9,10,12,14,17,19,20,23,25,28,30,31,32,37,39,43,46,49,51,53,54,58,60,63,68,70,72,74,76,82,83,86,87,90,91,93,99,103,104,108,109,113,114,120,121,123,125,129,130,135,138,139,142,143,146,147,152,153,156,157,162,164,165,167,191,194,195,198,201,202,203,206,209,210,211,214,217,218,219,222,225,226,227,230,233,234,235,238,241,242,243,246,249,250,251,254,257,258,259,262,265,266,267,270,273,274,275,278,281,282,283,286,289,290,291,294,297,298,299,302,305,306,307,310,313,314,315,318,321,322,323,326,329,330,331,334,337,338,339,342,345,346,347,350,353,354,355,360,363,364,365,371,373,375,377,380,382,388,390,392,394,398,403,405,406,408,412,418,420,422,424,428,430,433,434,435,437,438,440,445,448,449,451,453,457,459,461,463
-----computeFrom-----
78,79
78,80
79,80
79,81
117,118
117,119
127,128
127,129
140,141
140,142
144,145
144,146
149,150
149,151
154,155
154,156
169,170
169,171
170,171
170,172
171,172
171,173
172,173
172,174
173,174
173,175
174,175
174,176
175,176
175,177
176,177
176,178
177,178
177,179
178,179
178,180
179,180
179,181
180,181
180,182
181,182
181,183
182,183
182,184
183,184
183,185
184,185
184,186
185,186
185,187
186,187
186,188
187,188
187,189
188,189
188,190
442,443
442,444
-----guardedBy-----
129,156
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ConditionalExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;WhileStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;WhileStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static intyaml_parser_scan_tag_uri(yaml_parser_t *parser, int directive,        yaml_char_t *head, yaml_mark_t start_mark, yaml_char_t **uri){    size_t length = head ? strlen((char *)head) : 0;    yaml_string_t string = NULL_STRING;    if (!STRING_INIT(parser, string, INITIAL_STRING_SIZE)) goto error;    /* Resize the string to include the head. */    while (string.end - string.start <= (int)length) {        if (!yaml_string_extend(&string.start, &string.pointer, &string.end)) {            parser->error = YAML_MEMORY_ERROR;            goto error;        }    }    /*     * Copy the head if needed.     *     * Note that we don't copy the leading '!' character.     */    if (length > 1) {        memcpy(string.start, head+1, length-1);        string.pointer += length-1;    }    /* Scan the tag. */    if (!CACHE(parser, 1)) goto error;    /*     * The set of characters that may appear in URI is as follows:     *     *      '0'-'9', 'A'-'Z', 'a'-'z', '_', '-', ';', '/', '?', ':', '@', '&',     *      '=', '+', '$', ',', '.', '!', '~', '*', '\'', '(', ')', '[', ']',     *      '%'.     */    while (IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')            || CHECK(parser->buffer, '*') || CHECK(parser->buffer, '\'')            || CHECK(parser->buffer, '(') || CHECK(parser->buffer, ')')            || CHECK(parser->buffer, '[') || CHECK(parser->buffer, ']')            || CHECK(parser->buffer, '%'))    {        /* Check if it is a URI-escape sequence. */        if (CHECK(parser->buffer, '%')) {            if (!yaml_parser_scan_uri_escapes(parser,                        directive, start_mark, &string)) goto error;        }        else {            if (!READ(parser, string)) goto error;        }        length ++;        if (!CACHE(parser, 1)) goto error;    }    /* Check if the tag is non-empty. */    if (!length) {        if (!STRING_EXTEND(parser, string))            goto error;        yaml_parser_set_scanner_error(parser, directive ?                "while parsing a %TAG directive" : "while parsing a tag",                start_mark, "did not find expected tag URI");        goto error;    }    *uri = string.start;    return 1;error:    STRING_DEL(parser, string);    return 0;}
static int
yaml_parser_scan_tag_uri(yaml_parser_t *parser, int directive,        yaml_char_t *head, yaml_mark_t start_mark, yaml_char_t **uri)
yaml_parser_scan_tag_uri
yaml_parser_t *parser
yaml_parser_t
yaml_parser_t
*parser
*
parser
int directive
int
directive
directive
yaml_char_t *head
yaml_char_t
yaml_char_t
*head
*
head
yaml_mark_t start_mark
yaml_mark_t
yaml_mark_t
start_mark
start_mark
yaml_char_t **uri
yaml_char_t
yaml_char_t
**uri
*
*
uri
{    size_t length = head ? strlen((char *)head) : 0;    yaml_string_t string = NULL_STRING;    if (!STRING_INIT(parser, string, INITIAL_STRING_SIZE)) goto error;    /* Resize the string to include the head. */    while (string.end - string.start <= (int)length) {        if (!yaml_string_extend(&string.start, &string.pointer, &string.end)) {            parser->error = YAML_MEMORY_ERROR;            goto error;        }    }    /*     * Copy the head if needed.     *     * Note that we don't copy the leading '!' character.     */    if (length > 1) {        memcpy(string.start, head+1, length-1);        string.pointer += length-1;    }    /* Scan the tag. */    if (!CACHE(parser, 1)) goto error;    /*     * The set of characters that may appear in URI is as follows:     *     *      '0'-'9', 'A'-'Z', 'a'-'z', '_', '-', ';', '/', '?', ':', '@', '&',     *      '=', '+', '$', ',', '.', '!', '~', '*', '\'', '(', ')', '[', ']',     *      '%'.     */    while (IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')            || CHECK(parser->buffer, '*') || CHECK(parser->buffer, '\'')            || CHECK(parser->buffer, '(') || CHECK(parser->buffer, ')')            || CHECK(parser->buffer, '[') || CHECK(parser->buffer, ']')            || CHECK(parser->buffer, '%'))    {        /* Check if it is a URI-escape sequence. */        if (CHECK(parser->buffer, '%')) {            if (!yaml_parser_scan_uri_escapes(parser,                        directive, start_mark, &string)) goto error;        }        else {            if (!READ(parser, string)) goto error;        }        length ++;        if (!CACHE(parser, 1)) goto error;    }    /* Check if the tag is non-empty. */    if (!length) {        if (!STRING_EXTEND(parser, string))            goto error;        yaml_parser_set_scanner_error(parser, directive ?                "while parsing a %TAG directive" : "while parsing a tag",                start_mark, "did not find expected tag URI");        goto error;    }    *uri = string.start;    return 1;error:    STRING_DEL(parser, string);    return 0;}
size_t length = head ? strlen((char *)head) : 0;
size_t length = head ? strlen((char *)head) : 0;
size_t
size_t
length = head ? strlen((char *)head) : 0
length
= head ? strlen((char *)head) : 0
head ? strlen((char *)head) : 0
head
head
strlen((char *)head)
strlen
strlen
(char *)head
char *
char
*
*
head
head
0
yaml_string_t string = NULL_STRING;
yaml_string_t string = NULL_STRING;
yaml_string_t
yaml_string_t
string = NULL_STRING
string
= NULL_STRING
NULL_STRING
NULL_STRING
if (!STRING_INIT(parser, string, INITIAL_STRING_SIZE)) goto error;
!STRING_INIT(parser, string, INITIAL_STRING_SIZE)
STRING_INIT(parser, string, INITIAL_STRING_SIZE)
STRING_INIT
STRING_INIT
parser
parser
string
string
INITIAL_STRING_SIZE
INITIAL_STRING_SIZE
goto error;
error
while (string.end - string.start <= (int)length) {        if (!yaml_string_extend(&string.start, &string.pointer, &string.end)) {            parser->error = YAML_MEMORY_ERROR;            goto error;        }    }
string.end - string.start <= (int)length
string.end - string.start
string.end
string
string
end
string.start
string
string
start
(int)length
int
int

length
length
{        if (!yaml_string_extend(&string.start, &string.pointer, &string.end)) {            parser->error = YAML_MEMORY_ERROR;            goto error;        }    }
if (!yaml_string_extend(&string.start, &string.pointer, &string.end)) {            parser->error = YAML_MEMORY_ERROR;            goto error;        }
!yaml_string_extend(&string.start, &string.pointer, &string.end)
yaml_string_extend(&string.start, &string.pointer, &string.end)
yaml_string_extend
yaml_string_extend
&string.start
string.start
string
string
start
&string.pointer
string.pointer
string
string
pointer
&string.end
string.end
string
string
end
{            parser->error = YAML_MEMORY_ERROR;            goto error;        }
parser->error = YAML_MEMORY_ERROR;
parser->error = YAML_MEMORY_ERROR
parser->error
parser
parser
error
YAML_MEMORY_ERROR
YAML_MEMORY_ERROR
goto error;
error
if (length > 1) {        memcpy(string.start, head+1, length-1);        string.pointer += length-1;    }
length > 1
length
length
1
{        memcpy(string.start, head+1, length-1);        string.pointer += length-1;    }
memcpy(string.start, head+1, length-1);
memcpy(string.start, head+1, length-1)
memcpy
memcpy
string.start
string
string
start
head+1
head
head
1
length-1
length
length
1
string.pointer += length-1;
string.pointer += length-1
string.pointer
string
string
pointer
length-1
length
length
1
if (!CACHE(parser, 1)) goto error;
!CACHE(parser, 1)
CACHE(parser, 1)
CACHE
CACHE
parser
parser
1
goto error;
error
while (IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')            || CHECK(parser->buffer, '*') || CHECK(parser->buffer, '\'')            || CHECK(parser->buffer, '(') || CHECK(parser->buffer, ')')            || CHECK(parser->buffer, '[') || CHECK(parser->buffer, ']')            || CHECK(parser->buffer, '%'))    {        /* Check if it is a URI-escape sequence. */        if (CHECK(parser->buffer, '%')) {            if (!yaml_parser_scan_uri_escapes(parser,                        directive, start_mark, &string)) goto error;        }        else {            if (!READ(parser, string)) goto error;        }        length ++;        if (!CACHE(parser, 1)) goto error;    }
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')            || CHECK(parser->buffer, '*') || CHECK(parser->buffer, '\'')            || CHECK(parser->buffer, '(') || CHECK(parser->buffer, ')')            || CHECK(parser->buffer, '[') || CHECK(parser->buffer, ']')            || CHECK(parser->buffer, '%')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')            || CHECK(parser->buffer, '*') || CHECK(parser->buffer, '\'')            || CHECK(parser->buffer, '(') || CHECK(parser->buffer, ')')            || CHECK(parser->buffer, '[') || CHECK(parser->buffer, ']')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')            || CHECK(parser->buffer, '*') || CHECK(parser->buffer, '\'')            || CHECK(parser->buffer, '(') || CHECK(parser->buffer, ')')            || CHECK(parser->buffer, '[')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')            || CHECK(parser->buffer, '*') || CHECK(parser->buffer, '\'')            || CHECK(parser->buffer, '(') || CHECK(parser->buffer, ')')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')            || CHECK(parser->buffer, '*') || CHECK(parser->buffer, '\'')            || CHECK(parser->buffer, '(')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')            || CHECK(parser->buffer, '*') || CHECK(parser->buffer, '\'')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')            || CHECK(parser->buffer, '*')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!') || CHECK(parser->buffer, '~')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')            || CHECK(parser->buffer, '!')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',') || CHECK(parser->buffer, '.')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')            || CHECK(parser->buffer, ',')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+') || CHECK(parser->buffer, '$')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')            || CHECK(parser->buffer, '+')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&') || CHECK(parser->buffer, '=')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')            || CHECK(parser->buffer, '&')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':') || CHECK(parser->buffer, '@')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')            || CHECK(parser->buffer, ':')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/') || CHECK(parser->buffer, '?')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')            || CHECK(parser->buffer, '/')
IS_ALPHA(parser->buffer) || CHECK(parser->buffer, ';')
IS_ALPHA(parser->buffer)
IS_ALPHA
IS_ALPHA
parser->buffer
parser
parser
buffer
CHECK(parser->buffer, ';')
CHECK
CHECK
parser->buffer
parser
parser
buffer
';'
CHECK(parser->buffer, '/')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'/'
CHECK(parser->buffer, '?')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'?'
CHECK(parser->buffer, ':')
CHECK
CHECK
parser->buffer
parser
parser
buffer
':'
CHECK(parser->buffer, '@')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'@'
CHECK(parser->buffer, '&')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'&'
CHECK(parser->buffer, '=')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'='
CHECK(parser->buffer, '+')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'+'
CHECK(parser->buffer, '$')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'$'
CHECK(parser->buffer, ',')
CHECK
CHECK
parser->buffer
parser
parser
buffer
','
CHECK(parser->buffer, '.')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'.'
CHECK(parser->buffer, '!')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'!'
CHECK(parser->buffer, '~')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'~'
CHECK(parser->buffer, '*')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'*'
CHECK(parser->buffer, '\'')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'\''
CHECK(parser->buffer, '(')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'('
CHECK(parser->buffer, ')')
CHECK
CHECK
parser->buffer
parser
parser
buffer
')'
CHECK(parser->buffer, '[')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'['
CHECK(parser->buffer, ']')
CHECK
CHECK
parser->buffer
parser
parser
buffer
']'
CHECK(parser->buffer, '%')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'%'
{        /* Check if it is a URI-escape sequence. */        if (CHECK(parser->buffer, '%')) {            if (!yaml_parser_scan_uri_escapes(parser,                        directive, start_mark, &string)) goto error;        }        else {            if (!READ(parser, string)) goto error;        }        length ++;        if (!CACHE(parser, 1)) goto error;    }
if (CHECK(parser->buffer, '%')) {            if (!yaml_parser_scan_uri_escapes(parser,                        directive, start_mark, &string)) goto error;        }        else {            if (!READ(parser, string)) goto error;        }
CHECK(parser->buffer, '%')
CHECK
CHECK
parser->buffer
parser
parser
buffer
'%'
{            if (!yaml_parser_scan_uri_escapes(parser,                        directive, start_mark, &string)) goto error;        }
if (!yaml_parser_scan_uri_escapes(parser,                        directive, start_mark, &string)) goto error;
!yaml_parser_scan_uri_escapes(parser,                        directive, start_mark, &string)
yaml_parser_scan_uri_escapes(parser,                        directive, start_mark, &string)
yaml_parser_scan_uri_escapes
yaml_parser_scan_uri_escapes
parser
parser
directive
directive
start_mark
start_mark
&string
string
string
goto error;
error
{            if (!READ(parser, string)) goto error;        }
if (!READ(parser, string)) goto error;
!READ(parser, string)
READ(parser, string)
READ
READ
parser
parser
string
string
goto error;
error
length ++;
length ++
length
length
if (!CACHE(parser, 1)) goto error;
!CACHE(parser, 1)
CACHE(parser, 1)
CACHE
CACHE
parser
parser
1
goto error;
error
if (!length) {        if (!STRING_EXTEND(parser, string))            goto error;        yaml_parser_set_scanner_error(parser, directive ?                "while parsing a %TAG directive" : "while parsing a tag",                start_mark, "did not find expected tag URI");        goto error;    }
!length
length
length
{        if (!STRING_EXTEND(parser, string))            goto error;        yaml_parser_set_scanner_error(parser, directive ?                "while parsing a %TAG directive" : "while parsing a tag",                start_mark, "did not find expected tag URI");        goto error;    }
if (!STRING_EXTEND(parser, string))            goto error;
!STRING_EXTEND(parser, string)
STRING_EXTEND(parser, string)
STRING_EXTEND
STRING_EXTEND
parser
parser
string
string
goto error;
error
yaml_parser_set_scanner_error(parser, directive ?                "while parsing a %TAG directive" : "while parsing a tag",                start_mark, "did not find expected tag URI");
yaml_parser_set_scanner_error(parser, directive ?                "while parsing a %TAG directive" : "while parsing a tag",                start_mark, "did not find expected tag URI")
yaml_parser_set_scanner_error
yaml_parser_set_scanner_error
parser
parser
directive ?                "while parsing a %TAG directive" : "while parsing a tag"
directive
directive
"while parsing a %TAG directive"
"while parsing a tag"
start_mark
start_mark
"did not find expected tag URI"
goto error;
error
*uri = string.start;
*uri = string.start
*uri
uri
uri
string.start
string
string
start
return 1;
1
error:    STRING_DEL(parser, string);
error
STRING_DEL(parser, string);
STRING_DEL(parser, string)
STRING_DEL
STRING_DEL
parser
parser
string
string
return 0;
0
-----joern-----
(276,395,0)
(868,426,0)
(848,834,0)
(905,221,0)
(427,215,0)
(570,629,0)
(84,734,0)
(286,909,0)
(664,549,0)
(537,95,0)
(702,913,0)
(18,495,0)
(666,578,0)
(841,414,0)
(315,634,0)
(4,754,0)
(300,668,0)
(255,569,0)
(662,668,0)
(406,277,0)
(384,794,0)
(98,572,0)
(536,179,0)
(697,597,0)
(687,395,0)
(203,837,0)
(726,8,0)
(309,853,0)
(147,709,0)
(162,426,0)
(785,270,0)
(906,426,0)
(450,186,0)
(33,597,0)
(192,739,0)
(593,834,0)
(638,338,0)
(705,695,0)
(87,346,0)
(160,543,0)
(675,409,0)
(499,697,0)
(791,911,0)
(66,385,0)
(685,79,0)
(679,709,0)
(897,22,0)
(472,83,0)
(391,477,0)
(514,346,0)
(406,477,0)
(795,708,0)
(674,160,0)
(406,524,0)
(42,215,0)
(260,668,0)
(532,888,0)
(744,543,0)
(495,390,0)
(682,868,0)
(264,338,0)
(913,354,0)
(524,472,0)
(252,766,0)
(531,814,0)
(323,0,0)
(488,898,0)
(238,692,0)
(95,840,0)
(871,210,0)
(692,781,0)
(687,277,0)
(519,320,0)
(99,740,0)
(464,597,0)
(56,361,0)
(79,685,0)
(829,758,0)
(885,668,0)
(563,597,0)
(778,129,0)
(287,597,0)
(630,597,0)
(373,768,0)
(690,629,0)
(149,395,0)
(546,502,0)
(687,273,0)
(163,150,0)
(472,576,0)
(766,597,0)
(406,901,0)
(689,406,0)
(798,385,0)
(566,666,0)
(246,767,0)
(66,426,0)
(339,27,0)
(462,754,0)
(543,160,0)
(713,754,0)
(113,757,0)
(169,427,0)
(406,117,0)
(229,426,0)
(26,103,0)
(431,870,0)
(288,51,0)
(786,288,0)
(525,170,0)
(754,462,0)
(428,852,0)
(186,838,0)
(317,893,0)
(882,811,0)
(3,751,0)
(792,741,0)
(101,820,0)
(669,620,0)
(569,255,0)
(151,464,0)
(890,395,0)
(439,576,0)
(465,621,0)
(265,166,0)
(601,215,0)
(317,395,0)
(738,287,0)
(64,283,0)
(687,369,0)
(406,320,0)
(208,585,0)
(803,439,0)
(583,589,0)
(1,55,0)
(817,171,0)
(684,466,0)
(367,15,0)
(406,303,0)
(340,71,0)
(316,679,0)
(231,29,0)
(780,215,0)
(687,554,0)
(704,895,0)
(589,583,0)
(362,334,0)
(732,867,0)
(893,317,0)
(450,597,0)
(463,758,0)
(46,226,0)
(508,325,0)
(112,334,0)
(756,208,0)
(342,24,0)
(17,346,0)
(854,215,0)
(835,804,0)
(96,733,0)
(794,119,0)
(496,274,0)
(735,786,0)
(122,668,0)
(600,601,0)
(779,757,0)
(8,66,0)
(361,696,0)
(486,745,0)
(30,909,0)
(760,797,0)
(527,82,0)
(748,215,0)
(39,631,0)
(847,402,0)
(904,347,0)
(328,702,0)
(188,395,0)
(196,175,0)
(209,810,0)
(181,881,0)
(678,493,0)
(555,1,0)
(529,188,0)
(277,875,0)
(452,839,0)
(430,33,0)
(892,52,0)
(895,704,0)
(844,293,0)
(588,679,0)
(872,206,0)
(626,478,0)
(610,395,0)
(343,50,0)
(857,577,0)
(368,597,0)
(88,804,0)
(908,29,0)
(754,597,0)
(406,803,0)
(665,880,0)
(557,778,0)
(655,668,0)
(442,531,0)
(637,14,0)
(696,807,0)
(469,255,0)
(473,738,0)
(140,668,0)
(83,251,0)
(161,577,0)
(727,188,0)
(31,200,0)
(85,668,0)
(223,893,0)
(555,797,0)
(721,573,0)
(287,738,0)
(687,477,0)
(306,2,0)
(687,32,0)
(666,523,0)
(687,881,0)
(131,475,0)
(415,504,0)
(899,32,0)
(189,130,0)
(66,8,0)
(222,785,0)
(862,41,0)
(572,98,0)
(842,620,0)
(592,34,0)
(875,668,0)
(268,38,0)
(406,114,0)
(828,520,0)
(65,601,0)
(253,185,0)
(815,7,0)
(29,908,0)
(735,820,0)
(375,406,0)
(711,283,0)
(898,215,0)
(331,597,0)
(661,256,0)
(687,417,0)
(7,815,0)
(411,906,0)
(543,744,0)
(687,681,0)
(521,587,0)
(708,668,0)
(494,394,0)
(522,776,0)
(767,597,0)
(799,433,0)
(71,668,0)
(529,29,0)
(602,147,0)
(342,270,0)
(709,395,0)
(434,226,0)
(518,550,0)
(352,186,0)
(406,721,0)
(45,452,0)
(808,599,0)
(844,597,0)
(288,786,0)
(853,668,0)
(396,241,0)
(509,273,0)
(858,668,0)
(341,668,0)
(406,717,0)
(603,867,0)
(562,346,0)
(478,290,0)
(667,497,0)
(528,226,0)
(827,660,0)
(680,798,0)
(224,909,0)
(820,735,0)
(475,131,0)
(698,801,0)
(109,129,0)
(786,735,0)
(614,433,0)
(802,64,0)
(573,427,0)
(765,290,0)
(799,803,0)
(444,208,0)
(2,334,0)
(720,145,0)
(390,555,0)
(413,426,0)
(654,743,0)
(453,236,0)
(459,215,0)
(234,840,0)
(280,684,0)
(487,480,0)
(80,103,0)
(613,877,0)
(880,385,0)
(873,822,0)
(57,241,0)
(251,83,0)
(130,597,0)
(166,811,0)
(681,784,0)
(406,475,0)
(679,597,0)
(325,597,0)
(406,583,0)
(559,133,0)
(821,629,0)
(874,361,0)
(161,402,0)
(327,875,0)
(730,52,0)
(394,662,0)
(886,668,0)
(734,84,0)
(332,587,0)
(511,23,0)
(221,905,0)
(139,346,0)
(768,668,0)
(170,525,0)
(752,385,0)
(153,395,0)
(279,393,0)
(168,393,0)
(36,563,0)
(219,694,0)
(625,171,0)
(797,40,0)
(162,702,0)
(802,426,0)
(633,188,0)
(344,743,0)
(433,799,0)
(27,339,0)
(58,668,0)
(715,597,0)
(166,290,0)
(639,674,0)
(466,684,0)
(687,524,0)
(272,464,0)
(515,215,0)
(629,690,0)
(687,117,0)
(447,882,0)
(665,488,0)
(183,16,0)
(644,395,0)
(406,395,0)
(463,597,0)
(70,728,0)
(283,576,0)
(813,93,0)
(797,555,0)
(737,668,0)
(197,15,0)
(325,395,0)
(394,494,0)
(866,515,0)
(79,901,0)
(686,630,0)
(428,601,0)
(456,597,0)
(450,567,0)
(608,752,0)
(733,76,0)
(887,552,0)
(267,423,0)
(406,554,0)
(81,597,0)
(156,668,0)
(406,881,0)
(424,743,0)
(262,577,0)
(406,711,0)
(878,224,0)
(687,303,0)
(10,329,0)
(788,829,0)
(448,186,0)
(409,226,0)
(15,597,0)
(774,224,0)
(478,597,0)
(834,347,0)
(16,423,0)
(772,804,0)
(92,255,0)
(406,179,0)
(670,780,0)
(729,395,0)
(565,845,0)
(237,142,0)
(77,194,0)
(406,879,0)
(750,50,0)
(409,597,0)
(52,263,0)
(176,209,0)
(178,215,0)
(242,413,0)
(497,668,0)
(706,464,0)
(389,27,0)
(200,597,0)
(104,395,0)
(676,511,0)
(605,338,0)
(83,472,0)
(35,540,0)
(277,466,0)
(687,179,0)
(90,720,0)
(905,183,0)
(550,597,0)
(725,569,0)
(534,804,0)
(270,342,0)
(308,634,0)
(210,215,0)
(685,215,0)
(646,597,0)
(210,285,0)
(773,767,0)
(787,854,0)
(352,163,0)
(162,385,0)
(879,6,0)
(856,569,0)
(130,215,0)
(672,525,0)
(764,142,0)
(448,597,0)
(67,695,0)
(104,597,0)
(572,117,0)
(483,646,0)
(564,840,0)
(520,668,0)
(421,495,0)
(117,572,0)
(166,71,0)
(643,162,0)
(335,173,0)
(877,188,0)
(714,617,0)
(232,857,0)
(230,175,0)
(259,781,0)
(683,38,0)
(646,395,0)
(274,496,0)
(406,801,0)
(358,695,0)
(500,668,0)
(575,668,0)
(2,720,0)
(418,33,0)
(704,385,0)
(91,497,0)
(687,342,0)
(429,861,0)
(15,371,0)
(0,323,0)
(869,811,0)
(160,1,0)
(106,186,0)
(589,748,0)
(73,338,0)
(40,797,0)
(7,843,0)
(538,679,0)
(699,34,0)
(34,215,0)
(33,173,0)
(363,215,0)
(843,215,0)
(657,807,0)
(635,395,0)
(86,450,0)
(449,459,0)
(746,89,0)
(524,118,0)
(348,668,0)
(671,540,0)
(125,178,0)
(424,303,0)
(711,257,0)
(352,123,0)
(687,852,0)
(298,554,0)
(747,785,0)
(116,697,0)
(165,695,0)
(601,428,0)
(651,494,0)
(881,520,0)
(129,597,0)
(815,185,0)
(569,385,0)
(193,368,0)
(621,465,0)
(535,668,0)
(874,845,0)
(143,786,0)
(102,171,0)
(27,215,0)
(684,215,0)
(674,493,0)
(227,798,0)
(37,844,0)
(174,676,0)
(696,361,0)
(854,352,0)
(359,426,0)
(659,434,0)
(318,597,0)
(906,385,0)
(690,309,0)
(867,668,0)
(616,245,0)
(178,391,0)
(175,215,0)
(194,439,0)
(692,186,0)
(357,492,0)
(604,409,0)
(782,248,0)
(1,160,0)
(32,899,0)
(577,347,0)
(531,215,0)
(132,426,0)
(93,471,0)
(406,342,0)
(147,769,0)
(84,496,0)
(568,748,0)
(793,715,0)
(62,695,0)
(297,331,0)
(271,668,0)
(46,597,0)
(464,530,0)
(809,888,0)
(295,202,0)
(545,733,0)
(352,854,0)
(325,188,0)
(687,183,0)
(720,2,0)
(673,301,0)
(406,465,0)
(718,352,0)
(9,597,0)
(467,744,0)
(455,646,0)
(374,463,0)
(285,210,0)
(687,583,0)
(822,668,0)
(28,346,0)
(182,870,0)
(912,71,0)
(309,690,0)
(269,385,0)
(478,896,0)
(880,723,0)
(511,676,0)
(115,609,0)
(884,692,0)
(436,668,0)
(406,681,0)
(479,752,0)
(446,668,0)
(617,790,0)
(748,589,0)
(619,325,0)
(855,497,0)
(179,536,0)
(731,251,0)
(40,9,0)
(790,914,0)
(54,215,0)
(158,448,0)
(123,42,0)
(333,162,0)
(549,393,0)
(210,226,0)
(640,903,0)
(495,597,0)
(324,395,0)
(406,394,0)
(502,668,0)
(408,668,0)
(131,241,0)
(540,215,0)
(837,903,0)
(865,709,0)
(5,480,0)
(32,565,0)
(618,893,0)
(248,215,0)
(893,597,0)
(569,426,0)
(490,851,0)
(794,597,0)
(345,390,0)
(152,551,0)
(219,133,0)
(549,597,0)
(359,903,0)
(144,758,0)
(307,81,0)
(49,346,0)
(837,565,0)
(623,456,0)
(636,42,0)
(298,54,0)
(256,661,0)
(797,760,0)
(270,785,0)
(369,76,0)
(839,417,0)
(534,597,0)
(607,404,0)
(860,631,0)
(857,562,0)
(877,597,0)
(552,426,0)
(202,668,0)
(820,597,0)
(681,92,0)
(687,914,0)
(89,395,0)
(78,395,0)
(798,194,0)
(417,551,0)
(130,395,0)
(441,820,0)
(525,597,0)
(553,684,0)
(378,40,0)
(555,390,0)
(220,81,0)
(728,597,0)
(599,215,0)
(478,71,0)
(76,733,0)
(501,651,0)
(331,226,0)
(364,745,0)
(716,692,0)
(145,745,0)
(406,309,0)
(75,105,0)
(687,801,0)
(736,599,0)
(406,815,0)
(166,835,0)
(743,424,0)
(647,215,0)
(676,174,0)
(155,695,0)
(128,906,0)
(825,838,0)
(833,802,0)
(868,385,0)
(881,181,0)
(403,426,0)
(110,685,0)
(634,226,0)
(124,898,0)
(294,215,0)
(338,638,0)
(903,837,0)
(94,504,0)
(896,478,0)
(52,597,0)
(320,812,0)
(303,829,0)
(190,287,0)
(142,237,0)
(587,51,0)
(563,817,0)
(9,40,0)
(291,368,0)
(104,226,0)
(497,597,0)
(406,32,0)
(493,597,0)
(89,709,0)
(401,174,0)
(761,434,0)
(850,215,0)
(60,433,0)
(849,550,0)
(135,51,0)
(697,760,0)
(687,465,0)
(334,2,0)
(256,597,0)
(480,597,0)
(703,540,0)
(126,662,0)
(74,850,0)
(416,868,0)
(753,161,0)
(504,597,0)
(400,493,0)
(16,354,0)
(361,874,0)
(141,114,0)
(243,634,0)
(857,402,0)
(816,450,0)
(899,780,0)
(174,51,0)
(312,728,0)
(257,711,0)
(687,717,0)
(221,215,0)
(382,685,0)
(406,603,0)
(406,369,0)
(171,817,0)
(23,511,0)
(817,563,0)
(379,287,0)
(477,391,0)
(406,914,0)
(383,802,0)
(352,587,0)
(290,668,0)
(329,55,0)
(687,803,0)
(726,906,0)
(801,698,0)
(226,395,0)
(517,727,0)
(744,630,0)
(372,27,0)
(687,603,0)
(143,776,0)
(201,294,0)
(598,908,0)
(721,292,0)
(834,597,0)
(257,50,0)
(907,668,0)
(836,405,0)
(717,206,0)
(81,188,0)
(313,236,0)
(217,504,0)
(687,475,0)
(832,135,0)
(519,248,0)
(543,738,0)
(63,534,0)
(547,46,0)
(54,298,0)
(133,385,0)
(648,668,0)
(544,478,0)
(831,843,0)
(23,597,0)
(334,597,0)
(465,874,0)
(754,709,0)
(371,405,0)
(482,850,0)
(92,845,0)
(877,395,0)
(693,363,0)
(798,426,0)
(641,215,0)
(406,417,0)
(27,597,0)
(776,597,0)
(634,597,0)
(294,141,0)
(784,459,0)
(72,331,0)
(496,84,0)
(12,66,0)
(274,620,0)
(694,219,0)
(540,35,0)
(741,668,0)
(554,298,0)
(399,98,0)
(901,22,0)
(687,901,0)
(687,879,0)
(365,668,0)
(649,843,0)
(717,814,0)
(409,909,0)
(651,215,0)
(142,597,0)
(498,129,0)
(355,46,0)
(123,175,0)
(864,346,0)
(646,709,0)
(739,597,0)
(111,597,0)
(210,597,0)
(548,754,0)
(505,776,0)
(251,103,0)
(814,531,0)
(314,445,0)
(727,660,0)
(164,552,0)
(910,529,0)
(550,460,0)
(8,552,0)
(363,6,0)
(370,23,0)
(556,727,0)
(323,215,0)
(624,853,0)
(777,497,0)
(628,248,0)
(129,778,0)
(492,578,0)
(356,735,0)
(802,385,0)
(148,292,0)
(679,215,0)
(586,226,0)
(173,209,0)
(166,236,0)
(185,668,0)
(206,668,0)
(882,578,0)
(360,215,0)
(213,844,0)
(331,395,0)
(103,426,0)
(423,16,0)
(154,760,0)
(839,452,0)
(215,395,0)
(255,92,0)
(392,256,0)
(90,135,0)
(402,393,0)
(801,244,0)
(405,51,0)
(838,186,0)
(461,668,0)
(687,320,0)
(46,215,0)
(541,668,0)
(376,346,0)
(209,173,0)
(171,51,0)
(326,504,0)
(318,758,0)
(844,226,0)
(889,804,0)
(322,453,0)
(247,668,0)
(452,215,0)
(97,794,0)
(273,509,0)
(882,71,0)
(147,597,0)
(121,668,0)
(882,290,0)
(594,54,0)
(806,215,0)
(127,651,0)
(611,819,0)
(141,294,0)
(377,806,0)
(359,385,0)
(629,215,0)
(903,359,0)
(493,674,0)
(803,799,0)
(720,90,0)
(425,515,0)
(103,251,0)
(351,395,0)
(50,257,0)
(293,844,0)
(11,40,0)
(225,854,0)
(404,668,0)
(876,395,0)
(456,666,0)
(712,851,0)
(481,9,0)
(191,301,0)
(734,597,0)
(603,0,0)
(120,540,0)
(583,694,0)
(851,597,0)
(200,304,0)
(207,64,0)
(95,537,0)
(50,215,0)
(595,668,0)
(783,578,0)
(491,98,0)
(824,709,0)
(767,137,0)
(468,775,0)
(760,697,0)
(34,536,0)
(59,219,0)
(107,405,0)
(180,145,0)
(840,215,0)
(24,668,0)
(330,360,0)
(617,215,0)
(435,562,0)
(69,668,0)
(289,530,0)
(433,215,0)
(542,448,0)
(807,385,0)
(863,635,0)
(267,426,0)
(119,794,0)
(385,704,0)
(266,668,0)
(476,471,0)
(687,114,0)
(422,838,0)
(687,711,0)
(870,597,0)
(261,178,0)
(571,221,0)
(284,323,0)
(281,692,0)
(224,597,0)
(512,312,0)
(371,15,0)
(784,681,0)
(412,236,0)
(41,862,0)
(552,8,0)
(895,578,0)
(507,133,0)
(134,806,0)
(167,360,0)
(228,668,0)
(859,319,0)
(278,402,0)
(484,562,0)
(273,911,0)
(312,512,0)
(212,728,0)
(895,766,0)
(454,560,0)
(506,567,0)
(743,215,0)
(901,79,0)
(488,665,0)
(715,393,0)
(515,181,0)
(840,95,0)
(434,862,0)
(267,385,0)
(184,780,0)
(417,839,0)
(448,105,0)
(742,294,0)
(645,734,0)
(360,621,0)
(118,524,0)
(25,880,0)
(123,352,0)
(478,811,0)
(911,668,0)
(387,54,0)
(687,815,0)
(302,405,0)
(642,587,0)
(475,913,0)
(766,895,0)
(254,668,0)
(1,555,0)
(851,712,0)
(540,597,0)
(882,835,0)
(687,721,0)
(183,905,0)
(319,778,0)
(241,215,0)
(480,226,0)
(587,352,0)
(838,597,0)
(205,674,0)
(76,369,0)
(759,171,0)
(843,7,0)
(437,448,0)
(883,668,0)
(459,784,0)
(55,1,0)
(385,245,0)
(198,898,0)
(582,221,0)
(585,208,0)
(337,414,0)
(806,597,0)
(700,668,0)
(438,464,0)
(812,668,0)
(580,835,0)
(620,274,0)
(870,709,0)
(852,822,0)
(55,810,0)
(256,215,0)
(914,790,0)
(504,188,0)
(494,651,0)
(410,267,0)
(537,741,0)
(596,696,0)
(48,42,0)
(740,668,0)
(423,267,0)
(103,385,0)
(497,186,0)
(179,404,0)
(350,668,0)
(398,395,0)
(599,698,0)
(536,34,0)
(749,359,0)
(805,450,0)
(630,744,0)
(503,851,0)
(707,256,0)
(694,845,0)
(214,531,0)
(439,194,0)
(879,708,0)
(406,537,0)
(862,434,0)
(336,81,0)
(635,597,0)
(762,9,0)
(634,315,0)
(677,668,0)
(133,426,0)
(752,426,0)
(722,395,0)
(133,219,0)
(413,385,0)
(208,215,0)
(138,66,0)
(43,352,0)
(100,166,0)
(292,668,0)
(698,599,0)
(426,695,0)
(733,215,0)
(175,123,0)
(235,835,0)
(157,882,0)
(796,804,0)
(244,668,0)
(485,363,0)
(894,346,0)
(688,668,0)
(691,760,0)
(390,495,0)
(98,215,0)
(89,597,0)
(615,427,0)
(591,668,0)
(403,704,0)
(420,267,0)
(818,323,0)
(249,163,0)
(414,215,0)
(161,562,0)
(533,89,0)
(208,597,0)
(301,329,0)
(163,352,0)
(800,511,0)
(745,597,0)
(631,211,0)
(22,668,0)
(296,450,0)
(211,631,0)
(891,142,0)
(282,210,0)
(64,802,0)
(216,46,0)
(806,134,0)
(299,668,0)
(414,509,0)
(480,445,0)
(68,459,0)
(914,502,0)
(457,317,0)
(745,145,0)
(687,309,0)
(177,413,0)
(310,24,0)
(6,363,0)
(466,277,0)
(830,617,0)
(369,202,0)
(728,312,0)
(554,93,0)
(406,183,0)
(790,617,0)
(111,804,0)
(513,46,0)
(224,188,0)
(353,744,0)
(135,90,0)
(814,717,0)
(248,519,0)
(464,186,0)
(366,104,0)
(780,899,0)
(526,679,0)
(590,403,0)
(20,734,0)
(811,668,0)
(391,178,0)
(275,368,0)
(6,879,0)
(405,371,0)
(117,740,0)
(478,835,0)
(160,674,0)
(187,525,0)
(551,668,0)
(724,143,0)
(763,188,0)
(468,597,0)
(652,577,0)
(687,537,0)
(194,798,0)
(810,55,0)
(785,215,0)
(738,543,0)
(81,336,0)
(46,355,0)
(338,188,0)
(510,812,0)
(114,141,0)
(173,33,0)
(114,768,0)
(846,130,0)
(807,696,0)
(204,563,0)
(199,403,0)
(407,735,0)
(118,850,0)
(653,318,0)
(621,360,0)
(427,573,0)
(834,709,0)
(810,209,0)
(727,597,0)
(380,738,0)
(561,111,0)
(352,317,0)
(443,811,0)
(755,612,0)
(233,877,0)
(789,695,0)
(852,428,0)
(303,424,0)
(504,215,0)
(240,766,0)
(504,217,0)
(258,290,0)
(305,806,0)
(769,147,0)
(406,665,0)
(29,529,0)
(320,519,0)
(898,488,0)
(739,395,0)
(679,316,0)
(906,726,0)
(474,668,0)
(19,390,0)
(913,702,0)
(710,748,0)
(406,273,0)
(397,630,0)
(186,395,0)
(902,244,0)
(850,118,0)
(352,395,0)
(181,515,0)
(719,668,0)
(704,403,0)
(329,301,0)
(692,597,0)
(432,83,0)
(552,385,0)
(0,603,0)
(145,720,0)
(689,687,0)
(368,291,0)
(776,143,0)
(311,807,0)
(558,452,0)
(218,143,0)
(778,319,0)
(13,456,0)
(870,82,0)
(509,414,0)
(283,64,0)
(108,147,0)
(631,597,0)
(900,23,0)
(301,597,0)
(584,41,0)
(477,819,0)
(172,687,0)
(42,123,0)
(349,104,0)
(565,837,0)
(406,852,0)
(55,329,0)
(687,665,0)
(622,448,0)
(460,550,0)
(880,426,0)
(656,529,0)
(21,423,0)
(807,426,0)
(819,668,0)
(523,666,0)
(44,862,0)
(650,468,0)
(440,288,0)
(489,359,0)
(666,456,0)
(658,668,0)
(137,767,0)
(8,726,0)
(687,394,0)
(338,597,0)
(786,143,0)
(702,162,0)
(620,597,0)
(53,210,0)
(47,578,0)
(195,844,0)
(241,131,0)
(632,895,0)
(403,385,0)
(263,52,0)
(573,721,0)
(166,835,1)
(442,214,1)
(208,215,1)
(896,478,1)
(389,288,1)
(103,26,1)
(112,362,1)
(34,592,1)
(617,215,1)
(867,732,1)
(288,440,1)
(543,738,1)
(856,469,1)
(581,496,1)
(382,110,1)
(726,8,1)
(406,721,1)
(608,868,1)
(272,438,1)
(265,453,1)
(383,207,1)
(679,709,1)
(306,334,1)
(579,409,1)
(494,651,1)
(733,215,1)
(687,901,1)
(718,43,1)
(449,68,1)
(406,881,1)
(498,109,1)
(158,542,1)
(406,342,1)
(207,711,1)
(463,374,1)
(843,831,1)
(439,194,1)
(467,353,1)
(409,226,1)
(294,742,1)
(477,391,1)
(427,215,1)
(106,462,1)
(866,741,1)
(406,901,1)
(797,40,1)
(316,679,1)
(459,215,1)
(903,359,1)
(247,244,1)
(2,334,1)
(224,878,1)
(698,599,1)
(579,635,1)
(830,319,1)
(540,671,1)
(834,709,1)
(125,768,1)
(599,215,1)
(671,703,1)
(687,815,1)
(63,677,1)
(734,597,1)
(309,690,1)
(625,102,1)
(129,597,1)
(444,756,1)
(131,241,1)
(295,369,1)
(406,183,1)
(720,2,1)
(248,215,1)
(189,458,1)
(633,215,1)
(53,217,1)
(406,114,1)
(387,594,1)
(141,294,1)
(536,34,1)
(806,215,1)
(574,661,1)
(319,778,1)
(406,583,1)
(191,673,1)
(54,215,1)
(727,188,1)
(870,597,1)
(886,24,1)
(178,215,1)
(208,444,1)
(46,597,1)
(404,607,1)
(558,45,1)
(275,193,1)
(855,319,1)
(368,275,1)
(98,215,1)
(882,290,1)
(52,597,1)
(899,780,1)
(686,397,1)
(849,518,1)
(731,103,1)
(244,902,1)
(468,650,1)
(406,554,1)
(66,138,1)
(230,854,1)
(704,895,1)
(29,529,1)
(690,629,1)
(677,811,1)
(135,832,1)
(687,32,1)
(539,211,1)
(629,215,1)
(412,92,1)
(862,44,1)
(63,595,1)
(365,911,1)
(63,299,1)
(162,333,1)
(631,39,1)
(672,187,1)
(143,218,1)
(546,914,1)
(301,597,1)
(256,597,1)
(601,215,1)
(481,390,1)
(738,473,1)
(8,552,1)
(63,266,1)
(167,565,1)
(898,124,1)
(253,815,1)
(810,209,1)
(895,578,1)
(369,76,1)
(685,382,1)
(824,226,1)
(193,318,1)
(427,615,1)
(267,426,1)
(328,475,1)
(163,150,1)
(111,561,1)
(885,662,1)
(528,188,1)
(176,173,1)
(493,597,1)
(794,597,1)
(725,856,1)
(8,66,1)
(508,619,1)
(893,597,1)
(838,597,1)
(409,675,1)
(632,766,1)
(27,597,1)
(103,385,1)
(425,866,1)
(136,111,1)
(352,186,1)
(681,784,1)
(875,327,1)
(815,7,1)
(81,188,1)
(63,58,1)
(496,84,1)
(319,859,1)
(308,857,1)
(773,810,1)
(379,190,1)
(524,118,1)
(224,597,1)
(103,426,1)
(63,688,1)
(566,456,1)
(860,577,1)
(687,303,1)
(452,558,1)
(788,303,1)
(613,130,1)
(752,426,1)
(887,164,1)
(628,782,1)
(478,835,1)
(166,290,1)
(819,611,1)
(882,71,1)
(189,826,1)
(550,597,1)
(851,503,1)
(132,229,1)
(13,882,1)
(340,319,1)
(291,368,1)
(36,204,1)
(409,597,1)
(298,54,1)
(109,134,1)
(914,790,1)
(143,776,1)
(534,597,1)
(712,851,1)
(256,392,1)
(728,70,1)
(692,186,1)
(135,51,1)
(743,215,1)
(161,402,1)
(406,477,1)
(687,309,1)
(407,356,1)
(278,715,1)
(551,152,1)
(406,179,1)
(744,467,1)
(726,906,1)
(798,426,1)
(897,901,1)
(63,247,1)
(493,678,1)
(833,383,1)
(216,513,1)
(2,306,1)
(173,33,1)
(331,226,1)
(515,425,1)
(734,20,1)
(688,740,1)
(503,490,1)
(692,238,1)
(123,42,1)
(550,849,1)
(250,336,1)
(472,83,1)
(801,698,1)
(687,881,1)
(166,71,1)
(651,127,1)
(746,533,1)
(822,873,1)
(760,691,1)
(447,492,1)
(687,803,1)
(302,836,1)
(313,412,1)
(405,51,1)
(184,670,1)
(330,167,1)
(620,669,1)
(687,394,1)
(854,225,1)
(828,881,1)
(674,639,1)
(492,578,1)
(513,547,1)
(332,642,1)
(323,818,1)
(470,339,1)
(406,475,1)
(189,259,1)
(160,674,1)
(893,618,1)
(903,640,1)
(604,224,1)
(1,555,1)
(189,823,1)
(402,847,1)
(197,454,1)
(448,186,1)
(256,215,1)
(196,230,1)
(406,852,1)
(50,215,1)
(882,811,1)
(130,215,1)
(569,725,1)
(857,577,1)
(331,597,1)
(749,203,1)
(497,186,1)
(495,18,1)
(334,597,1)
(453,236,1)
(881,181,1)
(35,540,1)
(706,151,1)
(185,253,1)
(380,287,1)
(544,626,1)
(4,293,1)
(406,681,1)
(100,265,1)
(835,235,1)
(236,313,1)
(480,5,1)
(40,9,1)
(195,213,1)
(540,597,1)
(752,385,1)
(353,630,1)
(580,676,1)
(549,664,1)
(627,217,1)
(501,708,1)
(240,252,1)
(322,200,1)
(678,400,1)
(786,735,1)
(431,182,1)
(217,504,1)
(63,348,1)
(572,98,1)
(557,129,1)
(520,828,1)
(518,371,1)
(844,226,1)
(246,773,1)
(836,15,1)
(484,712,1)
(359,385,1)
(344,339,1)
(531,215,1)
(456,597,1)
(307,834,1)
(687,477,1)
(189,516,1)
(6,363,1)
(403,590,1)
(403,385,1)
(911,791,1)
(753,263,1)
(715,597,1)
(458,293,1)
(74,439,1)
(805,137,1)
(584,862,1)
(639,205,1)
(359,426,1)
(878,774,1)
(559,59,1)
(52,730,1)
(473,380,1)
(908,29,1)
(634,226,1)
(229,136,1)
(659,761,1)
(850,482,1)
(339,27,1)
(413,242,1)
(203,32,1)
(759,102,1)
(666,456,1)
(806,377,1)
(522,505,1)
(697,597,1)
(264,605,1)
(748,568,1)
(802,385,1)
(122,867,1)
(657,311,1)
(166,100,1)
(381,35,1)
(877,233,1)
(157,447,1)
(754,597,1)
(301,191,1)
(130,597,1)
(823,585,1)
(512,312,1)
(400,209,1)
(166,811,1)
(90,720,1)
(549,597,1)
(194,798,1)
(147,709,1)
(189,701,1)
(117,572,1)
(687,475,1)
(424,743,1)
(385,704,1)
(15,367,1)
(189,627,1)
(870,709,1)
(45,319,1)
(419,316,1)
(406,309,1)
(414,215,1)
(857,402,1)
(151,272,1)
(99,117,1)
(433,215,1)
(89,597,1)
(57,396,1)
(807,657,1)
(504,326,1)
(40,378,1)
(696,596,1)
(145,745,1)
(570,319,1)
(510,320,1)
(189,606,1)
(222,319,1)
(24,310,1)
(689,687,1)
(724,776,1)
(642,123,1)
(814,531,1)
(352,123,1)
(640,359,1)
(797,760,1)
(327,277,1)
(261,125,1)
(780,184,1)
(497,597,1)
(844,195,1)
(133,426,1)
(736,808,1)
(391,178,1)
(66,426,1)
(587,51,1)
(662,126,1)
(77,803,1)
(455,483,1)
(371,405,1)
(587,332,1)
(142,597,1)
(371,15,1)
(274,620,1)
(462,754,1)
(305,835,1)
(65,319,1)
(545,319,1)
(603,0,1)
(352,854,1)
(785,747,1)
(555,390,1)
(225,787,1)
(680,77,1)
(119,794,1)
(646,597,1)
(26,80,1)
(408,206,1)
(674,493,1)
(338,73,1)
(451,371,1)
(646,709,1)
(601,600,1)
(735,407,1)
(197,512,1)
(190,744,1)
(235,580,1)
(873,852,1)
(834,848,1)
(519,248,1)
(412,880,1)
(292,148,1)
(865,824,1)
(363,485,1)
(394,494,1)
(547,41,1)
(215,647,1)
(826,237,1)
(456,623,1)
(432,524,1)
(27,215,1)
(288,51,1)
(154,697,1)
(364,486,1)
(717,814,1)
(406,117,1)
(691,154,1)
(716,281,1)
(161,577,1)
(450,186,1)
(406,717,1)
(850,215,1)
(587,521,1)
(258,765,1)
(906,385,1)
(63,885,1)
(624,309,1)
(183,905,1)
(877,188,1)
(448,158,1)
(210,226,1)
(742,201,1)
(738,287,1)
(588,581,1)
(342,270,1)
(908,598,1)
(579,870,1)
(171,51,1)
(174,401,1)
(750,472,1)
(210,215,1)
(189,770,1)
(248,628,1)
(679,538,1)
(20,645,1)
(785,215,1)
(443,319,1)
(337,841,1)
(180,745,1)
(338,597,1)
(11,9,1)
(806,597,1)
(335,33,1)
(511,800,1)
(482,74,1)
(521,642,1)
(761,908,1)
(847,278,1)
(478,597,1)
(687,537,1)
(200,31,1)
(367,197,1)
(452,215,1)
(623,13,1)
(296,816,1)
(410,21,1)
(816,86,1)
(208,597,1)
(687,369,1)
(511,23,1)
(25,665,1)
(189,321,1)
(415,94,1)
(687,114,1)
(556,480,1)
(189,386,1)
(325,188,1)
(94,908,1)
(289,464,1)
(687,172,1)
(181,515,1)
(193,585,1)
(433,60,1)
(192,451,1)
(687,914,1)
(634,597,1)
(63,254,1)
(63,886,1)
(370,900,1)
(120,709,1)
(434,659,1)
(496,274,1)
(857,562,1)
(267,420,1)
(692,597,1)
(771,460,1)
(390,495,1)
(778,129,1)
(687,665,1)
(592,699,1)
(189,61,1)
(654,344,1)
(130,846,1)
(730,892,1)
(406,369,1)
(178,261,1)
(7,843,1)
(735,820,1)
(189,146,1)
(411,128,1)
(63,541,1)
(200,597,1)
(329,10,1)
(673,1,1)
(533,331,1)
(504,597,1)
(418,170,1)
(800,23,1)
(629,821,1)
(59,583,1)
(563,36,1)
(589,748,1)
(768,373,1)
(416,682,1)
(693,202,1)
(600,65,1)
(287,597,1)
(464,597,1)
(63,228,1)
(499,40,1)
(478,290,1)
(818,284,1)
(790,617,1)
(615,169,1)
(687,711,1)
(872,717,1)
(670,694,1)
(526,588,1)
(406,394,1)
(485,693,1)
(19,495,1)
(763,633,1)
(189,289,1)
(405,107,1)
(453,322,1)
(146,712,1)
(701,285,1)
(877,597,1)
(553,319,1)
(583,589,1)
(571,582,1)
(237,142,1)
(687,342,1)
(249,317,1)
(852,428,1)
(868,416,1)
(16,423,1)
(422,106,1)
(32,899,1)
(242,177,1)
(63,907,1)
(573,427,1)
(1,160,1)
(860,315,1)
(634,243,1)
(267,385,1)
(687,524,1)
(406,277,1)
(762,481,1)
(679,597,1)
(300,292,1)
(373,114,1)
(465,621,1)
(754,709,1)
(802,426,1)
(428,601,1)
(368,597,1)
(754,713,1)
(880,385,1)
(405,302,1)
(778,557,1)
(352,718,1)
(874,361,1)
(79,685,1)
(213,37,1)
(89,746,1)
(406,375,1)
(423,267,1)
(811,869,1)
(687,717,1)
(384,97,1)
(162,426,1)
(214,319,1)
(745,597,1)
(71,912,1)
(593,857,1)
(487,355,1)
(492,357,1)
(525,597,1)
(164,882,1)
(63,408,1)
(357,385,1)
(663,170,1)
(114,141,1)
(189,419,1)
(325,508,1)
(412,16,1)
(517,556,1)
(820,441,1)
(41,862,1)
(21,183,1)
(283,64,1)
(63,271,1)
(760,697,1)
(294,215,1)
(813,554,1)
(780,215,1)
(413,426,1)
(189,574,1)
(676,511,1)
(209,173,1)
(22,897,1)
(372,389,1)
(93,813,1)
(764,891,1)
(320,519,1)
(556,93,1)
(457,739,1)
(687,465,1)
(33,597,1)
(177,752,1)
(171,625,1)
(81,220,1)
(129,498,1)
(273,509,1)
(406,320,1)
(83,251,1)
(466,684,1)
(459,449,1)
(0,323,1)
(687,603,1)
(223,457,1)
(687,879,1)
(189,381,1)
(133,385,1)
(92,255,1)
(900,174,1)
(469,681,1)
(64,802,1)
(450,597,1)
(709,865,1)
(171,759,1)
(630,686,1)
(255,569,1)
(579,727,1)
(271,290,1)
(42,215,1)
(18,421,1)
(687,801,1)
(793,549,1)
(108,602,1)
(107,836,1)
(631,597,1)
(420,410,1)
(406,303,1)
(311,56,1)
(266,185,1)
(186,838,1)
(607,179,1)
(162,385,1)
(791,273,1)
(606,119,1)
(766,240,1)
(884,810,1)
(281,884,1)
(252,403,1)
(807,426,1)
(293,844,1)
(360,215,1)
(34,215,1)
(561,534,1)
(505,440,1)
(9,762,1)
(537,95,1)
(231,529,1)
(227,680,1)
(102,563,1)
(251,731,1)
(89,709,1)
(727,597,1)
(596,807,1)
(133,507,1)
(152,417,1)
(787,163,1)
(435,484,1)
(739,192,1)
(406,803,1)
(622,437,1)
(871,53,1)
(617,714,1)
(892,496,1)
(220,307,1)
(174,51,1)
(728,597,1)
(679,215,1)
(848,593,1)
(832,817,1)
(401,90,1)
(198,868,1)
(189,250,1)
(362,145,1)
(687,117,1)
(846,189,1)
(739,597,1)
(555,797,1)
(124,198,1)
(792,537,1)
(352,317,1)
(170,525,1)
(189,239,1)
(288,786,1)
(234,564,1)
(406,815,1)
(175,215,1)
(799,433,1)
(68,874,1)
(232,237,1)
(651,215,1)
(812,510,1)
(880,426,1)
(290,258,1)
(906,426,1)
(104,597,1)
(318,653,1)
(697,116,1)
(699,319,1)
(810,55,1)
(495,597,1)
(913,702,1)
(23,370,1)
(356,820,1)
(239,291,1)
(138,12,1)
(241,57,1)
(172,89,1)
(312,728,1)
(554,298,1)
(104,226,1)
(653,463,1)
(303,424,1)
(882,157,1)
(412,283,1)
(265,236,1)
(110,319,1)
(696,807,1)
(638,338,1)
(160,543,1)
(345,19,1)
(359,489,1)
(882,835,1)
(707,41,1)
(127,501,1)
(798,227,1)
(41,584,1)
(645,460,1)
(46,216,1)
(406,465,1)
(786,143,1)
(863,186,1)
(774,285,1)
(685,215,1)
(646,455,1)
(159,355,1)
(713,548,1)
(664,119,1)
(406,879,1)
(766,597,1)
(460,550,1)
(331,72,1)
(720,145,1)
(636,175,1)
(166,236,1)
(784,459,1)
(147,108,1)
(578,783,1)
(98,491,1)
(228,404,1)
(270,785,1)
(56,465,1)
(375,646,1)
(807,385,1)
(406,801,1)
(895,766,1)
(15,597,1)
(490,137,1)
(212,291,1)
(727,517,1)
(820,597,1)
(687,277,1)
(189,663,1)
(862,434,1)
(666,566,1)
(145,180,1)
(464,186,1)
(27,372,1)
(403,426,1)
(81,597,1)
(525,672,1)
(620,597,1)
(390,345,1)
(84,734,1)
(837,903,1)
(714,830,1)
(63,140,1)
(134,806,1)
(504,188,1)
(684,280,1)
(95,840,1)
(902,801,1)
(626,426,1)
(204,288,1)
(480,226,1)
(687,583,1)
(438,523,1)
(710,413,1)
(747,222,1)
(831,649,1)
(840,215,1)
(233,613,1)
(201,319,1)
(161,562,1)
(509,414,1)
(585,208,1)
(349,325,1)
(649,319,1)
(326,415,1)
(434,226,1)
(406,711,1)
(752,479,1)
(817,171,1)
(803,799,1)
(212,562,1)
(406,603,1)
(756,676,1)
(687,721,1)
(868,385,1)
(396,752,1)
(210,282,1)
(243,308,1)
(333,643,1)
(251,103,1)
(665,488,1)
(388,896,1)
(687,417,1)
(118,850,1)
(29,231,1)
(287,379,1)
(12,552,1)
(782,853,1)
(123,175,1)
(417,839,1)
(808,319,1)
(128,8,1)
(50,343,1)
(563,597,1)
(565,837,1)
(843,215,1)
(464,706,1)
(795,879,1)
(687,183,1)
(602,161,1)
(667,777,1)
(426,132,1)
(741,792,1)
(338,188,1)
(523,666,1)
(491,399,1)
(269,523,1)
(76,733,1)
(733,96,1)
(611,477,1)
(193,136,1)
(377,305,1)
(254,71,1)
(740,99,1)
(397,674,1)
(348,875,1)
(689,406,1)
(502,546,1)
(137,767,1)
(463,597,1)
(715,793,1)
(336,81,1)
(618,223,1)
(352,587,1)
(280,553,1)
(33,430,1)
(352,163,1)
(656,581,1)
(406,417,1)
(399,319,1)
(853,624,1)
(694,219,1)
(169,812,1)
(748,215,1)
(676,174,1)
(765,319,1)
(182,316,1)
(590,199,1)
(882,578,1)
(173,335,1)
(447,578,1)
(277,466,1)
(210,597,1)
(211,631,1)
(101,143,1)
(599,736,1)
(744,630,1)
(661,256,1)
(46,226,1)
(363,215,1)
(43,587,1)
(684,215,1)
(635,597,1)
(46,215,1)
(205,493,1)
(552,385,1)
(475,131,1)
(564,319,1)
(538,526,1)
(895,632,1)
(179,536,1)
(378,11,1)
(454,817,1)
(163,249,1)
(329,301,1)
(870,431,1)
(47,896,1)
(844,597,1)
(777,91,1)
(202,295,1)
(39,860,1)
(595,502,1)
(769,147,1)
(687,852,1)
(279,402,1)
(238,716,1)
(406,32,1)
(531,442,1)
(614,413,1)
(104,366,1)
(406,537,1)
(883,497,1)
(840,234,1)
(192,579,1)
(430,418,1)
(619,352,1)
(794,384,1)
(529,188,1)
(504,215,1)
(907,551,1)
(73,264,1)
(189,771,1)
(507,559,1)
(318,597,1)
(860,468,1)
(647,641,1)
(63,300,1)
(262,652,1)
(221,215,1)
(5,487,1)
(72,297,1)
(829,788,1)
(798,385,1)
(284,319,1)
(542,622,1)
(189,470,1)
(406,914,1)
(838,825,1)
(541,520,1)
(221,571,1)
(197,279,1)
(860,769,1)
(414,337,1)
(478,811,1)
(552,887,1)
(219,133,1)
(643,328,1)
(586,528,1)
(55,329,1)
(325,597,1)
(366,349,1)
(23,597,1)
(189,159,1)
(355,46,1)
(868,426,1)
(489,749,1)
(10,301,1)
(111,597,1)
(80,432,1)
(529,910,1)
(562,435,1)
(687,320,1)
(96,545,1)
(55,1,1)
(468,597,1)
(605,35,1)
(645,211,1)
(334,112,1)
(666,578,1)
(721,573,1)
(869,443,1)
(783,47,1)
(879,6,1)
(480,597,1)
(116,499,1)
(478,544,1)
(497,667,1)
(343,750,1)
(187,579,1)
(209,176,1)
(821,570,1)
(48,636,1)
(682,726,1)
(257,50,1)
(317,893,1)
(732,603,1)
(413,385,1)
(63,365,1)
(898,215,1)
(61,134,1)
(86,805,1)
(687,681,1)
(42,48,1)
(857,232,1)
(839,452,1)
(598,29,1)
(776,522,1)
(841,319,1)
(569,426,1)
(488,898,1)
(582,913,1)
(189,883,1)
(540,215,1)
(406,273,1)
(825,422,1)
(189,539,1)
(702,162,1)
(516,769,1)
(486,135,1)
(44,434,1)
(854,215,1)
(569,385,1)
(479,608,1)
(321,315,1)
(905,221,1)
(552,426,1)
(543,744,1)
(630,597,1)
(189,75,1)
(147,597,1)
(58,822,1)
(226,586,1)
(548,4,1)
(577,262,1)
(126,394,1)
(703,120,1)
(90,135,1)
(901,79,1)
(97,90,1)
(406,524,1)
(441,101,1)
(515,215,1)
(880,25,1)
(360,330,1)
(188,763,1)
(75,448,1)
(218,724,1)
(652,336,1)
(687,273,1)
(148,721,1)
(912,340,1)
(478,71,1)
(386,462,1)
(199,269,1)
(193,166,1)
(621,360,1)
(770,638,1)
(189,388,1)
(568,710,1)
(906,411,1)
(767,597,1)
(189,506,1)
(91,855,1)
(282,871,1)
(60,614,1)
(448,597,1)
(687,179,1)
(711,257,1)
(63,122,1)
(776,597,1)
(310,342,1)
(361,696,1)
(834,597,1)
(743,654,1)
(859,778,1)
(315,634,1)
(650,161,1)
(635,863,1)
(31,166,1)
(175,196,1)
(70,212,1)
(675,604,1)
(392,707,1)
(910,656,1)
(323,215,1)
(708,795,1)
(687,554,1)
(440,512,1)
(206,872,1)
(450,296,1)
(851,597,1)
(161,753,1)
(263,52,1)
(259,692,1)
(891,263,1)
(745,364,1)
(299,22,1)
(37,638,1)
(66,385,1)
(140,819,1)
(506,450,1)
(594,661,1)
(669,842,1)
(421,160,1)
(224,188,1)
(9,597,1)
(802,833,1)
(437,726,1)
(297,877,1)
(142,764,1)
(817,563,1)
(534,63,1)
(241,215,1)
(406,665,1)
(483,104,1)
(374,829,1)
(285,210,1)
(704,403,1)
(767,246,1)
(54,387,1)
(842,84,1)
(166,236,2)
(523,882,2)
(687,638,2)
(877,316,2)
(877,339,2)
(496,84,2)
(453,166,2)
(267,752,2)
(748,215,2)
(81,188,2)
(871,217,2)
(23,174,2)
(368,136,2)
(55,329,2)
(348,319,2)
(406,665,2)
(172,769,2)
(492,523,2)
(716,810,2)
(183,905,2)
(233,237,2)
(656,581,2)
(357,523,2)
(352,587,2)
(666,578,2)
(189,237,2)
(846,315,2)
(352,163,2)
(903,359,2)
(331,315,2)
(533,217,2)
(702,752,2)
(406,475,2)
(496,211,2)
(71,319,2)
(96,319,2)
(116,40,2)
(44,908,2)
(157,523,2)
(410,752,2)
(501,319,2)
(687,810,2)
(687,137,2)
(659,908,2)
(746,35,2)
(573,319,2)
(553,319,2)
(266,319,2)
(807,413,2)
(89,523,2)
(172,319,2)
(406,815,2)
(478,597,2)
(687,852,2)
(172,316,2)
(406,179,2)
(118,413,2)
(450,137,2)
(408,319,2)
(262,336,2)
(733,319,2)
(104,371,2)
(189,285,2)
(778,134,2)
(233,638,2)
(490,137,2)
(130,726,2)
(583,413,2)
(512,712,2)
(687,465,2)
(89,726,2)
(275,339,2)
(687,237,2)
(248,215,2)
(151,523,2)
(834,597,2)
(752,868,2)
(613,291,2)
(898,215,2)
(589,413,2)
(687,523,2)
(89,291,2)
(752,385,2)
(846,285,2)
(665,868,2)
(137,767,2)
(687,477,2)
(906,8,2)
(280,319,2)
(743,339,2)
(676,174,2)
(297,726,2)
(767,597,2)
(810,209,2)
(291,339,2)
(189,460,2)
(406,309,2)
(720,2,2)
(339,27,2)
(206,319,2)
(194,798,2)
(509,414,2)
(761,908,2)
(718,371,2)
(732,319,2)
(27,215,2)
(533,769,2)
(110,319,2)
(870,316,2)
(868,385,2)
(817,288,2)
(257,50,2)
(406,711,2)
(367,512,2)
(746,462,2)
(310,319,2)
(302,836,2)
(70,712,2)
(687,319,2)
(16,423,2)
(911,319,2)
(602,161,2)
(175,579,2)
(211,631,2)
(220,857,2)
(331,316,2)
(312,712,2)
(839,452,2)
(846,896,2)
(272,523,2)
(369,76,2)
(818,319,2)
(8,882,2)
(800,174,2)
(172,170,2)
(760,40,2)
(746,119,2)
(642,371,2)
(678,209,2)
(548,293,2)
(337,319,2)
(331,810,2)
(407,143,2)
(495,597,2)
(368,597,2)
(375,579,2)
(533,119,2)
(21,752,2)
(189,134,2)
(377,676,2)
(837,903,2)
(842,84,2)
(613,316,2)
(617,319,2)
(746,237,2)
(233,293,2)
(844,226,2)
(646,371,2)
(441,143,2)
(546,319,2)
(70,291,2)
(702,162,2)
(449,413,2)
(555,160,2)
(707,41,2)
(852,319,2)
(828,319,2)
(838,462,2)
(524,413,2)
(533,293,2)
(317,371,2)
(233,726,2)
(687,119,2)
(61,134,2)
(746,315,2)
(72,355,2)
(533,35,2)
(881,319,2)
(130,661,2)
(533,319,2)
(846,137,2)
(172,661,2)
(688,319,2)
(60,413,2)
(185,319,2)
(166,166,2)
(538,581,2)
(537,319,2)
(913,752,2)
(414,215,2)
(172,291,2)
(583,589,2)
(331,597,2)
(331,462,2)
(413,385,2)
(786,735,2)
(887,882,2)
(618,371,2)
(699,319,2)
(331,211,2)
(285,210,2)
(6,319,2)
(352,371,2)
(217,504,2)
(746,291,2)
(836,119,2)
(541,319,2)
(687,769,2)
(687,815,2)
(846,217,2)
(130,585,2)
(108,161,2)
(329,301,2)
(497,319,2)
(409,597,2)
(233,523,2)
(464,186,2)
(331,661,2)
(336,857,2)
(613,462,2)
(442,319,2)
(103,426,2)
(631,597,2)
(899,780,2)
(898,868,2)
(613,211,2)
(72,170,2)
(338,597,2)
(4,293,2)
(634,597,2)
(587,371,2)
(160,543,2)
(97,90,2)
(687,901,2)
(687,134,2)
(89,319,2)
(32,899,2)
(438,523,2)
(512,312,2)
(877,137,2)
(720,135,2)
(233,316,2)
(72,726,2)
(230,371,2)
(687,721,2)
(104,579,2)
(243,857,2)
(406,524,2)
(172,137,2)
(692,597,2)
(100,726,2)
(277,319,2)
(31,166,2)
(76,733,2)
(406,371,2)
(636,371,2)
(48,579,2)
(417,839,2)
(390,160,2)
(475,131,2)
(906,385,2)
(892,496,2)
(613,726,2)
(494,651,2)
(84,460,2)
(315,857,2)
(72,896,2)
(122,319,2)
(613,315,2)
(776,597,2)
(359,385,2)
(646,579,2)
(776,440,2)
(406,721,2)
(253,319,2)
(189,315,2)
(802,385,2)
(754,709,2)
(552,385,2)
(50,215,2)
(288,786,2)
(687,726,2)
(349,371,2)
(316,679,2)
(784,413,2)
(319,778,2)
(267,426,2)
(26,413,2)
(141,294,2)
(910,581,2)
(41,862,2)
(877,188,2)
(739,597,2)
(687,661,2)
(320,519,2)
(326,908,2)
(687,170,2)
(172,896,2)
(617,215,2)
(687,309,2)
(738,287,2)
(66,385,2)
(33,597,2)
(687,303,2)
(863,462,2)
(172,211,2)
(176,170,2)
(618,579,2)
(841,319,2)
(787,371,2)
(130,134,2)
(192,371,2)
(89,355,2)
(613,319,2)
(866,319,2)
(36,288,2)
(312,728,2)
(797,390,2)
(89,712,2)
(12,552,2)
(629,215,2)
(297,217,2)
(104,597,2)
(89,597,2)
(183,752,2)
(233,769,2)
(536,34,2)
(160,209,2)
(518,371,2)
(875,319,2)
(283,64,2)
(288,512,2)
(543,744,2)
(293,844,2)
(579,316,2)
(127,319,2)
(622,726,2)
(225,371,2)
(437,726,2)
(130,211,2)
(791,319,2)
(16,752,2)
(95,319,2)
(76,319,2)
(359,426,2)
(477,391,2)
(687,583,2)
(283,413,2)
(382,319,2)
(849,371,2)
(735,143,2)
(352,579,2)
(184,413,2)
(450,597,2)
(624,319,2)
(300,319,2)
(284,319,2)
(356,143,2)
(233,355,2)
(613,339,2)
(90,135,2)
(406,901,2)
(388,896,2)
(130,638,2)
(661,256,2)
(157,896,2)
(533,810,2)
(517,355,2)
(130,291,2)
(600,319,2)
(430,170,2)
(297,661,2)
(209,170,2)
(877,769,2)
(840,215,2)
(502,319,2)
(81,597,2)
(89,460,2)
(142,597,2)
(303,339,2)
(579,462,2)
(172,293,2)
(273,319,2)
(836,512,2)
(166,835,2)
(159,355,2)
(687,315,2)
(130,523,2)
(877,291,2)
(275,726,2)
(297,285,2)
(443,319,2)
(862,908,2)
(773,810,2)
(495,160,2)
(406,583,2)
(833,413,2)
(74,413,2)
(329,1,2)
(788,339,2)
(362,145,2)
(687,665,2)
(189,638,2)
(577,336,2)
(297,585,2)
(492,578,2)
(297,170,2)
(72,119,2)
(371,15,2)
(850,413,2)
(0,319,2)
(486,135,2)
(539,211,2)
(170,579,2)
(746,336,2)
(545,319,2)
(846,293,2)
(742,319,2)
(172,462,2)
(406,32,2)
(406,852,2)
(42,215,2)
(189,585,2)
(444,676,2)
(313,726,2)
(879,319,2)
(294,319,2)
(242,752,2)
(189,316,2)
(846,134,2)
(275,136,2)
(297,137,2)
(601,319,2)
(48,371,2)
(128,8,2)
(696,807,2)
(406,554,2)
(629,319,2)
(160,674,2)
(189,217,2)
(131,241,2)
(760,697,2)
(626,136,2)
(428,319,2)
(331,119,2)
(212,712,2)
(264,35,2)
(649,319,2)
(309,690,2)
(499,40,2)
(189,769,2)
(697,597,2)
(669,84,2)
(130,285,2)
(367,119,2)
(265,726,2)
(331,638,2)
(674,493,2)
(282,217,2)
(503,137,2)
(860,769,2)
(491,319,2)
(613,896,2)
(613,769,2)
(563,597,2)
(549,119,2)
(297,291,2)
(613,460,2)
(200,597,2)
(406,803,2)
(817,171,2)
(869,319,2)
(872,319,2)
(75,726,2)
(210,597,2)
(661,41,2)
(846,712,2)
(599,319,2)
(345,160,2)
(764,263,2)
(850,215,2)
(405,51,2)
(29,581,2)
(54,661,2)
(254,319,2)
(5,355,2)
(468,597,2)
(130,217,2)
(613,119,2)
(569,413,2)
(117,572,2)
(877,712,2)
(731,413,2)
(331,355,2)
(423,752,2)
(187,579,2)
(854,579,2)
(839,319,2)
(130,462,2)
(712,851,2)
(72,336,2)
(325,371,2)
(687,712,2)
(504,908,2)
(814,531,2)
(636,579,2)
(189,355,2)
(193,339,2)
(434,908,2)
(292,319,2)
(412,726,2)
(0,323,2)
(257,413,2)
(721,319,2)
(687,914,2)
(375,371,2)
(468,161,2)
(713,293,2)
(421,160,2)
(323,215,2)
(606,119,2)
(89,285,2)
(631,315,2)
(754,293,2)
(877,585,2)
(746,339,2)
(400,209,2)
(406,477,2)
(211,161,2)
(180,135,2)
(45,319,2)
(109,134,2)
(895,523,2)
(303,424,2)
(423,267,2)
(130,315,2)
(72,319,2)
(133,385,2)
(427,215,2)
(525,579,2)
(448,597,2)
(216,41,2)
(646,709,2)
(533,336,2)
(145,135,2)
(403,385,2)
(464,597,2)
(130,769,2)
(43,371,2)
(315,634,2)
(233,285,2)
(516,769,2)
(533,638,2)
(256,597,2)
(355,41,2)
(450,186,2)
(235,676,2)
(874,361,2)
(746,355,2)
(72,523,2)
(130,810,2)
(794,597,2)
(335,170,2)
(154,40,2)
(47,896,2)
(533,237,2)
(817,563,2)
(385,523,2)
(802,413,2)
(561,319,2)
(401,90,2)
(77,413,2)
(352,123,2)
(574,661,2)
(131,752,2)
(406,303,2)
(798,413,2)
(413,426,2)
(171,51,2)
(210,226,2)
(834,857,2)
(256,41,2)
(424,339,2)
(402,119,2)
(762,390,2)
(846,319,2)
(746,896,2)
(172,119,2)
(308,857,2)
(297,769,2)
(746,585,2)
(478,71,2)
(715,119,2)
(448,726,2)
(596,413,2)
(726,906,2)
(331,285,2)
(815,319,2)
(666,882,2)
(248,319,2)
(533,661,2)
(807,385,2)
(218,440,2)
(256,215,2)
(158,726,2)
(510,319,2)
(480,226,2)
(241,752,2)
(237,142,2)
(411,8,2)
(619,371,2)
(46,226,2)
(536,319,2)
(860,315,2)
(130,597,2)
(404,319,2)
(480,597,2)
(210,215,2)
(182,316,2)
(132,136,2)
(306,145,2)
(406,579,2)
(778,129,2)
(857,562,2)
(877,170,2)
(846,35,2)
(613,137,2)
(32,413,2)
(581,496,2)
(133,413,2)
(564,319,2)
(370,174,2)
(224,188,2)
(654,339,2)
(451,371,2)
(435,712,2)
(189,137,2)
(666,456,2)
(392,41,2)
(325,597,2)
(163,371,2)
(56,413,2)
(233,119,2)
(663,170,2)
(148,319,2)
(540,597,2)
(123,42,2)
(846,237,2)
(846,462,2)
(717,319,2)
(305,676,2)
(840,319,2)
(646,597,2)
(877,336,2)
(100,166,2)
(172,35,2)
(630,597,2)
(652,336,2)
(211,769,2)
(687,603,2)
(694,413,2)
(487,355,2)
(799,413,2)
(690,629,2)
(882,578,2)
(685,215,2)
(552,882,2)
(66,426,2)
(297,316,2)
(823,585,2)
(846,355,2)
(22,319,2)
(886,319,2)
(687,114,2)
(403,523,2)
(89,293,2)
(579,661,2)
(815,7,2)
(189,896,2)
(297,638,2)
(414,319,2)
(418,170,2)
(838,597,2)
(27,288,2)
(908,29,2)
(555,390,2)
(143,776,2)
(534,597,2)
(896,478,2)
(368,726,2)
(680,413,2)
(785,215,2)
(189,661,2)
(172,355,2)
(877,462,2)
(479,868,2)
(334,597,2)
(269,523,2)
(687,881,2)
(317,579,2)
(89,315,2)
(608,868,2)
(379,744,2)
(893,597,2)
(452,215,2)
(37,638,2)
(291,136,2)
(175,215,2)
(687,554,2)
(635,462,2)
(746,285,2)
(854,371,2)
(297,460,2)
(687,801,2)
(406,342,2)
(803,799,2)
(825,462,2)
(224,597,2)
(172,712,2)
(895,766,2)
(913,702,2)
(621,360,2)
(687,460,2)
(533,285,2)
(93,661,2)
(522,440,2)
(590,523,2)
(318,597,2)
(259,810,2)
(903,413,2)
(533,896,2)
(879,6,2)
(580,676,2)
(848,857,2)
(615,319,2)
(162,426,2)
(189,523,2)
(20,460,2)
(533,339,2)
(877,35,2)
(728,597,2)
(251,103,2)
(104,226,2)
(465,621,2)
(413,752,2)
(568,413,2)
(727,597,2)
(877,134,2)
(798,426,2)
(727,355,2)
(297,896,2)
(397,674,2)
(189,712,2)
(704,523,2)
(592,319,2)
(877,638,2)
(433,413,2)
(725,413,2)
(457,579,2)
(533,523,2)
(178,215,2)
(753,263,2)
(812,319,2)
(733,215,2)
(66,552,2)
(232,237,2)
(533,726,2)
(628,319,2)
(360,215,2)
(65,319,2)
(877,285,2)
(340,319,2)
(53,217,2)
(34,319,2)
(727,661,2)
(766,597,2)
(297,35,2)
(696,413,2)
(587,51,2)
(166,71,2)
(494,319,2)
(352,317,2)
(299,319,2)
(20,211,2)
(456,597,2)
(72,134,2)
(202,319,2)
(797,760,2)
(173,170,2)
(768,319,2)
(893,371,2)
(406,369,2)
(819,319,2)
(785,319,2)
(129,134,2)
(509,319,2)
(228,319,2)
(724,440,2)
(130,293,2)
(550,371,2)
(750,413,2)
(880,385,2)
(193,136,2)
(9,390,2)
(460,371,2)
(424,743,2)
(164,882,2)
(777,319,2)
(406,394,2)
(233,336,2)
(406,320,2)
(130,712,2)
(511,174,2)
(484,712,2)
(603,0,2)
(189,291,2)
(342,319,2)
(409,226,2)
(846,339,2)
(687,273,2)
(406,801,2)
(687,183,2)
(746,319,2)
(638,338,2)
(843,215,2)
(508,579,2)
(378,390,2)
(55,1,2)
(89,137,2)
(189,336,2)
(372,288,2)
(914,319,2)
(799,433,2)
(405,119,2)
(482,413,2)
(117,319,2)
(287,744,2)
(877,293,2)
(361,696,2)
(687,320,2)
(380,744,2)
(339,288,2)
(846,810,2)
(877,896,2)
(145,745,2)
(233,462,2)
(613,217,2)
(365,319,2)
(687,291,2)
(740,319,2)
(533,315,2)
(613,661,2)
(746,638,2)
(562,712,2)
(464,523,2)
(786,440,2)
(687,524,2)
(297,315,2)
(810,55,2)
(808,319,2)
(289,523,2)
(795,319,2)
(517,661,2)
(846,726,2)
(89,810,2)
(204,288,2)
(613,170,2)
(899,413,2)
(846,661,2)
(766,523,2)
(233,211,2)
(233,319,2)
(687,336,2)
(201,319,2)
(810,170,2)
(297,134,2)
(679,215,2)
(453,236,2)
(687,285,2)
(146,712,2)
(288,51,2)
(130,339,2)
(745,597,2)
(233,661,2)
(582,752,2)
(7,319,2)
(555,797,2)
(11,390,2)
(496,274,2)
(72,638,2)
(821,319,2)
(508,371,2)
(214,319,2)
(711,413,2)
(138,552,2)
(428,601,2)
(820,597,2)
(851,137,2)
(89,217,2)
(835,676,2)
(415,908,2)
(331,712,2)
(687,417,2)
(712,137,2)
(854,215,2)
(90,817,2)
(399,319,2)
(846,119,2)
(18,160,2)
(599,215,2)
(163,150,2)
(363,319,2)
(119,90,2)
(72,339,2)
(877,661,2)
(846,211,2)
(374,339,2)
(130,460,2)
(638,35,2)
(507,413,2)
(860,336,2)
(456,882,2)
(406,879,2)
(252,523,2)
(790,319,2)
(674,209,2)
(832,817,2)
(152,319,2)
(584,908,2)
(556,661,2)
(72,217,2)
(431,316,2)
(498,134,2)
(290,319,2)
(497,597,2)
(89,134,2)
(807,426,2)
(130,237,2)
(579,285,2)
(72,291,2)
(746,712,2)
(874,413,2)
(189,211,2)
(748,413,2)
(186,838,2)
(142,263,2)
(406,114,2)
(89,336,2)
(279,119,2)
(549,597,2)
(331,339,2)
(295,319,2)
(227,413,2)
(687,32,2)
(72,35,2)
(697,40,2)
(233,339,2)
(338,35,2)
(361,413,2)
(46,41,2)
(882,290,2)
(169,319,2)
(189,810,2)
(43,579,2)
(72,462,2)
(72,661,2)
(34,215,2)
(193,726,2)
(846,170,2)
(692,810,2)
(389,288,2)
(619,579,2)
(265,166,2)
(613,134,2)
(822,319,2)
(371,512,2)
(236,726,2)
(89,896,2)
(746,134,2)
(189,170,2)
(559,413,2)
(480,355,2)
(64,413,2)
(297,339,2)
(554,298,2)
(134,676,2)
(233,810,2)
(359,413,2)
(433,215,2)
(191,1,2)
(434,226,2)
(249,371,2)
(403,426,2)
(829,339,2)
(803,413,2)
(465,413,2)
(543,674,2)
(727,188,2)
(857,237,2)
(691,40,2)
(281,810,2)
(366,371,2)
(870,709,2)
(15,817,2)
(759,102,2)
(406,603,2)
(882,523,2)
(621,413,2)
(172,523,2)
(504,188,2)
(130,170,2)
(550,597,2)
(613,712,2)
(189,293,2)
(352,186,2)
(167,413,2)
(901,79,2)
(782,319,2)
(190,744,2)
(679,709,2)
(531,319,2)
(746,726,2)
(161,263,2)
(331,769,2)
(163,579,2)
(172,810,2)
(877,319,2)
(99,319,2)
(2,334,2)
(89,339,2)
(172,460,2)
(333,752,2)
(246,810,2)
(316,581,2)
(756,676,2)
(331,523,2)
(728,291,2)
(200,166,2)
(102,288,2)
(40,9,2)
(670,413,2)
(837,413,2)
(91,319,2)
(417,319,2)
(353,674,2)
(287,597,2)
(72,211,2)
(46,215,2)
(172,336,2)
(86,137,2)
(301,1,2)
(432,413,2)
(181,319,2)
(857,402,2)
(320,319,2)
(746,661,2)
(588,581,2)
(511,23,2)
(89,769,2)
(211,315,2)
(694,219,2)
(103,413,2)
(867,319,2)
(870,597,2)
(467,674,2)
(319,134,2)
(634,857,2)
(54,215,2)
(687,355,2)
(162,752,2)
(161,402,2)
(89,211,2)
(784,459,2)
(460,550,2)
(439,194,2)
(297,319,2)
(39,769,2)
(174,90,2)
(877,523,2)
(72,460,2)
(98,319,2)
(270,785,2)
(472,413,2)
(298,54,2)
(189,319,2)
(682,726,2)
(203,413,2)
(72,585,2)
(783,896,2)
(298,661,2)
(84,734,2)
(238,810,2)
(52,597,2)
(650,161,2)
(135,51,2)
(524,118,2)
(366,579,2)
(587,579,2)
(391,319,2)
(114,319,2)
(769,161,2)
(844,638,2)
(331,226,2)
(166,726,2)
(579,355,2)
(118,850,2)
(386,462,2)
(631,161,2)
(274,620,2)
(687,711,2)
(497,186,2)
(846,638,2)
(371,405,2)
(318,339,2)
(210,217,2)
(225,579,2)
(640,413,2)
(513,41,2)
(533,316,2)
(571,752,2)
(119,794,2)
(790,617,2)
(89,316,2)
(519,248,2)
(569,385,2)
(692,186,2)
(607,319,2)
(585,676,2)
(752,426,2)
(631,769,2)
(895,578,2)
(769,147,2)
(914,790,2)
(512,291,2)
(846,460,2)
(533,291,2)
(687,717,2)
(172,638,2)
(89,661,2)
(219,133,2)
(746,316,2)
(566,882,2)
(147,161,2)
(877,460,2)
(332,642,2)
(767,810,2)
(103,385,2)
(189,339,2)
(172,285,2)
(39,161,2)
(565,837,2)
(877,211,2)
(208,597,2)
(907,319,2)
(92,413,2)
(241,215,2)
(533,585,2)
(738,744,2)
(195,638,2)
(720,145,2)
(79,319,2)
(273,509,2)
(664,119,2)
(297,810,2)
(475,752,2)
(391,178,2)
(334,145,2)
(877,119,2)
(878,285,2)
(687,342,2)
(589,748,2)
(171,288,2)
(770,638,2)
(137,810,2)
(746,460,2)
(595,319,2)
(331,585,2)
(237,263,2)
(882,835,2)
(101,143,2)
(459,215,2)
(271,319,2)
(862,434,2)
(10,1,2)
(542,726,2)
(585,208,2)
(141,319,2)
(454,817,2)
(343,413,2)
(136,319,2)
(277,466,2)
(523,666,2)
(687,803,2)
(172,217,2)
(294,215,2)
(166,290,2)
(598,581,2)
(186,462,2)
(846,769,2)
(233,217,2)
(710,413,2)
(250,336,2)
(672,579,2)
(112,145,2)
(267,385,2)
(846,336,2)
(834,709,2)
(787,579,2)
(540,215,2)
(687,211,2)
(631,336,2)
(255,569,2)
(746,137,2)
(55,209,2)
(331,293,2)
(221,752,2)
(698,599,2)
(406,681,2)
(846,523,2)
(912,319,2)
(506,137,2)
(859,134,2)
(422,462,2)
(806,597,2)
(806,676,2)
(24,319,2)
(19,160,2)
(613,585,2)
(406,537,2)
(515,319,2)
(244,319,2)
(860,161,2)
(739,371,2)
(297,336,2)
(493,209,2)
(679,581,2)
(543,738,2)
(198,868,2)
(41,908,2)
(846,585,2)
(905,221,2)
(336,81,2)
(240,523,2)
(515,215,2)
(208,215,2)
(217,908,2)
(831,319,2)
(563,288,2)
(551,319,2)
(2,145,2)
(123,175,2)
(730,496,2)
(630,674,2)
(675,285,2)
(161,577,2)
(908,581,2)
(130,119,2)
(258,319,2)
(882,71,2)
(89,237,2)
(613,285,2)
(29,529,2)
(570,319,2)
(331,319,2)
(739,579,2)
(89,170,2)
(565,413,2)
(111,319,2)
(662,319,2)
(394,494,2)
(147,597,2)
(635,597,2)
(381,35,2)
(746,211,2)
(533,170,2)
(383,413,2)
(488,898,2)
(317,893,2)
(736,319,2)
(63,319,2)
(520,319,2)
(114,141,2)
(653,339,2)
(627,217,2)
(15,512,2)
(196,371,2)
(613,355,2)
(690,319,2)
(291,726,2)
(884,810,2)
(390,495,2)
(728,712,2)
(547,41,2)
(643,752,2)
(687,35,2)
(172,339,2)
(439,413,2)
(448,186,2)
(687,879,2)
(172,726,2)
(322,166,2)
(15,597,2)
(297,462,2)
(72,293,2)
(521,642,2)
(844,597,2)
(368,585,2)
(746,293,2)
(496,460,2)
(882,896,2)
(89,638,2)
(466,319,2)
(749,413,2)
(72,712,2)
(440,512,2)
(601,215,2)
(50,413,2)
(463,339,2)
(234,319,2)
(554,661,2)
(746,217,2)
(814,319,2)
(323,319,2)
(813,661,2)
(846,316,2)
(734,597,2)
(130,355,2)
(478,136,2)
(197,512,2)
(830,319,2)
(325,188,2)
(92,255,2)
(297,237,2)
(297,293,2)
(309,319,2)
(801,319,2)
(651,319,2)
(687,475,2)
(130,35,2)
(419,316,2)
(331,237,2)
(593,857,2)
(89,35,2)
(368,339,2)
(111,597,2)
(98,215,2)
(780,215,2)
(771,460,2)
(189,462,2)
(792,319,2)
(572,319,2)
(207,413,2)
(704,403,2)
(409,285,2)
(519,319,2)
(797,40,2)
(331,170,2)
(558,319,2)
(89,585,2)
(605,35,2)
(331,217,2)
(447,896,2)
(905,752,2)
(877,355,2)
(420,752,2)
(774,285,2)
(6,363,2)
(483,579,2)
(902,319,2)
(72,769,2)
(855,319,2)
(754,597,2)
(425,319,2)
(363,215,2)
(687,394,2)
(330,413,2)
(209,173,2)
(533,462,2)
(485,319,2)
(706,523,2)
(406,117,2)
(735,820,2)
(394,319,2)
(233,291,2)
(620,597,2)
(52,496,2)
(458,293,2)
(406,881,2)
(166,811,2)
(129,597,2)
(687,537,2)
(406,277,2)
(123,371,2)
(194,413,2)
(219,413,2)
(843,319,2)
(312,291,2)
(462,754,2)
(687,179,2)
(297,211,2)
(212,291,2)
(462,293,2)
(233,460,2)
(698,319,2)
(174,51,2)
(72,237,2)
(197,119,2)
(613,237,2)
(189,119,2)
(42,371,2)
(179,319,2)
(620,84,2)
(689,406,2)
(645,460,2)
(452,319,2)
(483,371,2)
(331,460,2)
(613,336,2)
(9,597,2)
(533,712,2)
(793,119,2)
(684,215,2)
(72,315,2)
(676,90,2)
(73,35,2)
(744,674,2)
(687,316,2)
(162,385,2)
(856,413,2)
(673,1,2)
(798,385,2)
(23,597,2)
(676,511,2)
(89,462,2)
(64,802,2)
(344,339,2)
(95,840,2)
(325,579,2)
(224,285,2)
(526,581,2)
(130,215,2)
(124,868,2)
(239,291,2)
(681,413,2)
(533,355,2)
(193,585,2)
(331,291,2)
(746,523,2)
(72,810,2)
(665,488,2)
(805,137,2)
(544,136,2)
(846,291,2)
(687,462,2)
(80,413,2)
(8,552,2)
(338,188,2)
(172,237,2)
(196,579,2)
(623,882,2)
(477,319,2)
(89,709,2)
(331,137,2)
(687,339,2)
(230,579,2)
(686,674,2)
(667,319,2)
(297,355,2)
(83,413,2)
(645,211,2)
(189,726,2)
(687,681,2)
(634,226,2)
(504,215,2)
(364,135,2)
(877,315,2)
(233,35,2)
(331,336,2)
(877,726,2)
(406,717,2)
(744,630,2)
(868,726,2)
(83,251,2)
(873,319,2)
(367,817,2)
(741,319,2)
(46,597,2)
(81,857,2)
(59,413,2)
(79,685,2)
(734,460,2)
(192,579,2)
(714,319,2)
(611,319,2)
(687,585,2)
(181,515,2)
(604,285,2)
(455,371,2)
(687,117,2)
(177,752,2)
(90,720,2)
(231,581,2)
(711,257,2)
(263,496,2)
(529,581,2)
(801,698,2)
(233,896,2)
(233,712,2)
(478,835,2)
(853,319,2)
(39,315,2)
(58,319,2)
(614,413,2)
(133,426,2)
(504,597,2)
(107,836,2)
(613,35,2)
(373,319,2)
(681,784,2)
(89,119,2)
(880,868,2)
(885,319,2)
(275,585,2)
(687,217,2)
(233,315,2)
(342,270,2)
(173,33,2)
(311,413,2)
(285,217,2)
(147,709,2)
(679,597,2)
(39,336,2)
(632,523,2)
(416,726,2)
(130,316,2)
(880,426,2)
(172,134,2)
(651,215,2)
(896,136,2)
(223,371,2)
(478,811,2)
(893,579,2)
(293,638,2)
(274,84,2)
(297,523,2)
(877,597,2)
(794,90,2)
(533,134,2)
(291,368,2)
(297,712,2)
(717,814,2)
(721,573,2)
(613,293,2)
(130,137,2)
(25,868,2)
(331,35,2)
(481,390,2)
(233,170,2)
(172,315,2)
(213,638,2)
(745,135,2)
(355,46,2)
(291,585,2)
(130,319,2)
(406,914,2)
(406,273,2)
(466,684,2)
(1,555,2)
(847,119,2)
(489,413,2)
(321,315,2)
(247,319,2)
(533,137,2)
(327,319,2)
(463,597,2)
(877,810,2)
(470,339,2)
(569,426,2)
(297,119,2)
(178,319,2)
(472,83,2)
(352,854,2)
(811,319,2)
(369,319,2)
(1,209,2)
(455,579,2)
(891,263,2)
(331,726,2)
(123,579,2)
(221,215,2)
(426,136,2)
(459,413,2)
(42,579,2)
(852,428,2)
(406,465,2)
(72,137,2)
(594,661,2)
(613,638,2)
(134,806,2)
(349,579,2)
(233,585,2)
(687,277,2)
(130,336,2)
(233,137,2)
(208,676,2)
(786,143,2)
(179,536,2)
(704,895,2)
(229,136,2)
(405,817,2)
(882,811,2)
(685,319,2)
(557,134,2)
(816,137,2)
(8,66,2)
(385,704,2)
(270,319,2)
(826,237,2)
(387,661,2)
(573,427,2)
(473,744,2)
(197,817,2)
(625,102,2)
(868,426,2)
(701,285,2)
(143,440,2)
(806,215,2)
(135,817,2)
(525,597,2)
(161,562,2)
(251,413,2)
(384,90,2)
(743,215,2)
(881,181,2)
(199,523,2)
(613,810,2)
(307,857,2)
(301,597,2)
(263,52,2)
(639,209,2)
(746,769,2)
(537,95,2)
(572,98,2)
(172,585,2)
(371,119,2)
(170,525,2)
(72,316,2)
(27,597,2)
(68,413,2)
(15,119,2)
(360,413,2)
(687,896,2)
(223,579,2)
(331,896,2)
(877,217,2)
(189,35,2)
(780,413,2)
(642,579,2)
(897,319,2)
(836,817,2)
(35,540,2)
(488,868,2)
(857,577,2)
(84,211,2)
(371,817,2)
(278,119,2)
(255,413,2)
(613,523,2)
(33,170,2)
(726,882,2)
(457,371,2)
(40,390,2)
(13,882,2)
(296,137,2)
(851,597,2)
(261,319,2)
(125,319,2)
(693,319,2)
(718,579,2)
(405,512,2)
(746,170,2)
(877,237,2)
(687,369,2)
(529,188,2)
(906,426,2)
(175,371,2)
(883,319,2)
(205,209,2)
(900,174,2)
(687,293,2)
(657,413,2)
(603,319,2)
(140,319,2)
(328,752,2)
(901,319,2)
(505,440,2)
(249,579,2)
(396,752,2)
(1,160,2)
(552,426,2)
(478,290,2)
(708,319,2)
(427,319,2)
(533,211,2)
(331,134,2)
(684,319,2)
(578,896,2)
(447,523,2)
(556,355,2)
(765,319,2)
(677,319,2)
(94,908,2)
(406,183,2)
(820,143,2)
(802,426,2)
(57,752,2)
(7,843,2)
(106,462,2)
(715,597,2)
(746,810,2)
(533,460,2)
(72,285,2)
(130,896,2)
(493,597,2)
(534,319,2)
(469,413,2)
(726,8,2)
(747,319,2)
(211,336,2)
(531,215,2)
(734,211,2)
(406,417,2)
(222,319,2)
(233,134,2)
(126,319,2)
(689,687,2)
-----------------------------------
(0,string.pointer++)
(1,(CHECK_AT(parser->buffer, \'-\', 0)
(2,IS_BREAK_AT(parser->buffer, 1)
(3,if (!READ_LINE(parser, trailing_breaks)
(4,parser)
(5,trailing_breaks)
(6,string.pointer++)
(7,string.pointer++)
(8,value >= 0xD800 && value <= 0xDFFF)
(9,parser->buffer)
(10,3)
(11,\'.\')
(12,value)
(13,parser)
(14,)
(15,parser->buffer)
(16,*(string.pointer++)
(17,if (!CACHE(parser, 2)
(18,buffer)
(19,\'.\')
(20,buffer)
(21,0x80)
(22,*(string.pointer++)
(23,parser->buffer)
(24,*(string.pointer++)
(25,value)
(26,6)
(27,STRING_EXTEND(parser, string)
(28,if (parser->mark.column == 0 &&\\n            ((CHECK_AT(parser->buffer, \'-\', 0)
(29,leading_break.start[0])
(30,if (!JOIN(parser, string, trailing_breaks)
(31,parser)
(32,*(string.pointer++)
(33,parser->mark)
(34,string.pointer)
(35,!STRING_INIT(parser, string, INITIAL_STRING_SIZE)
(36,buffer)
(37,parser)
(38,)
(39,1)
(40,CHECK_AT(parser->buffer, \'.\', 1)
(41,trailing_breaks.start[0] == \'\\0\')
(42,string.start)
(43,start_mark)
(44,0)
(45,string)
(46,JOIN(parser, string, trailing_breaks)
(47,k)
(48,start)
(49,if (leading_blanks)
(50,string.pointer)
(51,int single)
(52,parser->buffer)
(53,parser)
(54,string.pointer)
(55,((CHECK_AT(parser->buffer, \'-\', 0)
(56,0x80)
(57,pointer)
(58,break;)
(59,0xF0)
(60,pointer)
(61,goto error;)
(62,if (!CACHE(parser, code_length)
(63,parser)
(64,0x80 + (value & 0x3F)
(65,string)
(66,value <= 0xDFFF)
(67,k)
(68,string)
(69,case \'P\':)
(70,buffer)
(71,code_length = 2)
(72,trailing_breaks)
(73,INITIAL_STRING_SIZE)
(74,string)
(75,goto error;)
(76,string.pointer++)
(77,0xE0)
(78,string)
(79,string.pointer++)
(80,value)
(81,READ_LINE(parser, leading_break)
(82,)
(83,0x80 + ((value >> 6)
(84,IS_BLANK(parser->buffer)
(85,case \' \':)
(86,"while scanning a quoted scalar")
(87,if (!CACHE(parser, 4)
(88,if (!STRING_EXTEND(parser, string)
(89,STRING_DEL(parser, whitespaces)
(90,!single && CHECK(parser->buffer, \'\\\\\')
(91,"while parsing a quoted scalar")
(92,*(string.pointer++)
(93,*(string.pointer++)
(94,parser)
(95,string.pointer++)
(96,pointer)
(97,parser)
(98,string.pointer)
(99,\'"\')
(100,code_length)
(101,parser)
(102,single)
(103,value >> 6)
(104,STRING_DEL(parser, trailing_breaks)
(105,)
(106,start_mark)
(107,\'"\')
(108,whitespaces)
(109,parser)
(110,string)
(111,SKIP(parser)
(112,buffer)
(113,if (IS_BLANK(parser->buffer)
(114,*(string.pointer++)
(115,if (!leading_blanks)
(116,buffer)
(117,*(string.pointer++)
(118,string.pointer++)
(119,!CACHE(parser, 3)
(120,parser)
(121,case \'_\':)
(122,break;)
(123,string.pointer-string.start)
(124,pointer)
(125,string)
(126,xA9)
(127,pointer)
(128,value)
(129,parser->buffer)
(130,STRING_DEL(parser, string)
(131,string.pointer++)
(132,0)
(133,value >> 18)
(134,!STRING_EXTEND(parser, string)
(135,!single)
(136,code_length)
(137,IS_Z(parser->buffer)
(138,0xDFFF)
(139,while (!IS_BLANKZ(parser->buffer)
(140,break;)
(141,string.pointer++)
(142,CACHE(parser, 2)
(143,CHECK_AT(parser->buffer, \'\\\'\', 0)
(144,if (!STRING_EXTEND(parser, string)
(145,CHECK(parser->buffer, \'\\\\\')
(146,goto error;)
(147,READ(parser, whitespaces)
(148,xA8)
(149,if (!STRING_INIT(parser, trailing_breaks, INITIAL_STRING_SIZE)
(150,yaml_token_t *token)
(151,start_mark)
(152,x07)
(153,error:)
(154,\'.\')
(155,if (value <= 0x7F)
(156,case \'\\t\':)
(157,code_length)
(158,"found invalid Unicode character escape code")
(159,goto error;)
(160,CHECK_AT(parser->buffer, \'-\', 0)
(161,!leading_blanks)
(162,value >> 6)
(163,*token)
(164,value)
(165,for (k = 0; k < code_length; k ++)
(166,k < code_length)
(167,string)
(168,if (!CACHE(parser, 3)
(169,string)
(170,!CACHE(parser, 4)
(171,single ? \'\\\'\' : \'"\')
(172,0)
(173,parser->mark.column)
(174,!single)
(175,string.pointer)
(176,0)
(177,value)
(178,string.pointer)
(179,*(string.pointer++)
(180,\'\\\\\')
(181,string.pointer++)
(182,parser)
(183,*(string.pointer++)
(184,pointer)
(185,*(string.pointer++)
(186,start_mark = parser->mark)
(187,parser)
(188,leading_break = NULL_STRING)
(189,parser)
(190,parser)
(191,buffer)
(192,parser)
(193,parser)
(194,0xE0 + (value >> 12)
(195,INITIAL_STRING_SIZE)
(196,pointer)
(197,parser)
(198,string)
(199,value)
(200,SKIP(parser)
(201,string)
(202,*(string.pointer++)
(203,0x80)
(204,parser)
(205,\'-\')
(206,*(string.pointer++)
(207,0x80)
(208,READ(parser, string)
(209,parser->mark.column == 0)
(210,JOIN(parser, string, trailing_breaks)
(211,!CACHE(parser, 1)
(212,parser)
(213,trailing_breaks)
(214,string)
(215,string = NULL_STRING)
(216,trailing_breaks)
(217,!JOIN(parser, string, leading_break)
(218,0)
(219,0xF0 + (value >> 18)
(220,leading_break)
(221,string.pointer)
(222,string)
(223,parser)
(224,CLEAR(parser, leading_break)
(225,start)
(226,trailing_breaks = NULL_STRING)
(227,12)
(228,break;)
(229,value)
(230,string)
(231,0)
(232,leading_blanks)
(233,leading_break)
(234,pointer)
(235,0)
(236,k = 0)
(237,!CACHE(parser, 2)
(238,"found unexpected document indicator")
(239,goto error;)
(240,buffer)
(241,string.pointer)
(242,0xFFFF)
(243,trailing_breaks)
(244,*(string.pointer++)
(245,)
(246,buffer)
(247,break;)
(248,string.pointer)
(249,token)
(250,goto error;)
(251,(value >> 6)
(252,parser)
(253,x1B)
(254,break;)
(255,0x80 + (value & 0x3F)
(256,STRING_EXTEND(parser, string)
(257,string.pointer++)
(258,4)
(259,goto error;)
(260,case \'"\':)
(261,pointer)
(262,1)
(263,IS_BLANK(parser->buffer)
(264,leading_break)
(265,k)
(266,break;)
(267,value & 0x3F)
(268,if (!CACHE(parser, 2)
(269,value)
(270,string.pointer++)
(271,break;)
(272,"while parsing a quoted scalar")
(273,*(string.pointer++)
(274,IS_BREAK(parser->buffer)
(275,2)
(276,trailing_breaks)
(277,*(string.pointer++)
(278,leading_blanks)
(279,break;)
(280,pointer)
(281,"while scanning a quoted scalar")
(282,trailing_breaks)
(283,*(string.pointer++)
(284,string)
(285,!JOIN(parser, string, trailing_breaks)
(286,if (!JOIN(parser, string, leading_break)
(287,parser->buffer)
(288,single && CHECK_AT(parser->buffer, \'\\\'\', 0)
(289,goto error;)
(290,code_length = 4)
(291,!CACHE(parser, 2)
(292,*(string.pointer++)
(293,!STRING_INIT(parser, trailing_breaks, INITIAL_STRING_SIZE)
(294,string.pointer)
(295,xE2)
(296,"found unexpected end of stream")
(297,parser)
(298,string.pointer++)
(299,break;)
(300,break;)
(301,parser->buffer)
(302,\'\\\'\')
(303,*(string.pointer++)
(304,)
(305,parser)
(306,1)
(307,parser)
(308,parser)
(309,*(string.pointer++)
(310,\'\\0\')
(311,value)
(312,IS_BLANKZ(parser->buffer)
(313,0)
(314,if (!JOIN(parser, string, trailing_breaks)
(315,!READ_LINE(parser, trailing_breaks)
(316,!JOIN(parser, string, whitespaces)
(317,end_mark = parser->mark)
(318,SKIP(parser)
(319,parser->buffer.pointer[1])
(320,*(string.pointer++)
(321,goto error;)
(322,k)
(323,string.pointer)
(324,if (!STRING_INIT(parser, leading_break, INITIAL_STRING_SIZE)
(325,STRING_DEL(parser, leading_break)
(326,leading_break)
(327,x0C)
(328,0xC0)
(329,IS_BLANKZ_AT(parser->buffer, 3)
(330,pointer)
(331,STRING_DEL(parser, trailing_breaks)
(332,YAML_DOUBLE_QUOTED_SCALAR_STYLE)
(333,6)
(334,parser->buffer)
(335,column)
(336,!READ_LINE(parser, leading_break)
(337,pointer)
(338,STRING_INIT(parser, leading_break, INITIAL_STRING_SIZE)
(339,!STRING_EXTEND(parser, string)
(340,code_length)
(341,case \'\\\\\':)
(342,*(string.pointer++)
(343,pointer)
(344,string)
(345,0)
(346,)
(347,)
(348,break;)
(349,parser)
(350,case \'f\':)
(351,whitespaces)
(352,SCALAR_TOKEN_INIT(*token, string.start, string.pointer-string.start,\\n            single ? YAML_SINGLE_QUOTED_SCALAR_STYLE : YAML_DOUBLE_QUOTED_SCALAR_STYLE,\\n            start_mark, end_mark)
(353,\'-\')
(354,)
(355,!JOIN(parser, string, trailing_breaks)
(356,\'\\\'\')
(357,k)
(358,for (k = 0; k < code_length; k ++)
(359,value >> 12)
(360,string.pointer)
(361,0x80 + ((value >> 6)
(362,parser)
(363,string.pointer)
(364,buffer)
(365,break;)
(366,trailing_breaks)
(367,buffer)
(368,CACHE(parser, 2)
(369,*(string.pointer++)
(370,buffer)
(371,CHECK(parser->buffer, single ? \'\\\'\' : \'"\')
(372,string)
(373,xC2)
(374,parser)
(375,1)
(376,if (IS_Z(parser->buffer)
(377,string)
(378,1)
(379,buffer)
(380,\'-\')
(381,goto error;)
(382,pointer)
(383,value)
(384,3)
(385,value = (value << 4)
(386,goto error;)
(387,pointer)
(388,goto error;)
(389,parser)
(390,CHECK_AT(parser->buffer, \'.\', 0)
(391,string.pointer++)
(392,string)
(393,)
(394,*(string.pointer++)
(395,)
(396,string)
(397,parser)
(398,end_mark)
(399,string)
(400,parser)
(401,single)
(402,leading_blanks = 1)
(403,value << 4)
(404,*(string.pointer++)
(405,single ? \'\\\'\' : \'"\')
(406,return 1;)
(407,1)
(408,break;)
(409,CLEAR(parser, trailing_breaks)
(410,value)
(411,0x10FFFF)
(412,k)
(413,value <= 0xFFFF)
(414,string.pointer)
(415,string)
(416,0x7F)
(417,*(string.pointer++)
(418,parser)
(419,goto error;)
(420,0x3F)
(421,parser)
(422,parser)
(423,0x80 + (value & 0x3F)
(424,string.pointer++)
(425,pointer)
(426,value = 0)
(427,string.pointer)
(428,string.pointer++)
(429,if (leading_break.start[0] == \'\\n\')
(430,mark)
(431,whitespaces)
(432,0x80)
(433,string.pointer)
(434,trailing_breaks.start)
(435,0)
(436,case \'v\':)
(437,parser)
(438,parser)
(439,*(string.pointer++)
(440,single)
(441,buffer)
(442,pointer)
(443,code_length)
(444,string)
(445,)
(446,default:)
(447,k)
(448,yaml_parser_set_scanner_error(parser, "while parsing a quoted scalar",\\n                                start_mark, "found invalid Unicode character escape code")
(449,pointer)
(450,yaml_parser_set_scanner_error(parser, "while scanning a quoted scalar",\\n                    start_mark, "found unexpected end of stream")
(451,break;)
(452,string.pointer)
(453,k ++)
(454,break;)
(455,whitespaces)
(456,parser->buffer)
(457,end_mark)
(458,goto error;)
(459,string.pointer)
(460,!CACHE(parser, 1)
(461,case \'L\':)
(462,!STRING_INIT(parser, whitespaces, INITIAL_STRING_SIZE)
(463,SKIP(parser)
(464,yaml_parser_set_scanner_error(parser, "while parsing a quoted scalar",\\n                                    start_mark, "did not find expected hexdecimal number")
(465,*(string.pointer++)
(466,string.pointer++)
(467,1)
(468,SKIP(parser)
(469,0x80)
(470,goto error;)
(471,)
(472,*(string.pointer++)
(473,2)
(474,case \'a\':)
(475,*(string.pointer++)
(476,if (!STRING_EXTEND(parser, string)
(477,*(string.pointer++)
(478,CACHE(parser, code_length)
(479,0x7FF)
(480,CLEAR(parser, trailing_breaks)
(481,parser)
(482,pointer)
(483,parser)
(484,leading_blanks)
(485,pointer)
(486,parser)
(487,parser)
(488,string.pointer++)
(489,12)
(490,parser)
(491,pointer)
(492,k ++)
(493,parser->buffer)
(494,string.pointer++)
(495,parser->buffer)
(496,IS_BLANK(parser->buffer)
(497,yaml_parser_set_scanner_error(parser, "while parsing a quoted scalar",\\n                                start_mark, "found unknown escape character")
(498,buffer)
(499,parser)
(500,case \'N\':)
(501,string)
(502,*(string.pointer++)
(503,2)
(504,JOIN(parser, string, leading_break)
(505,parser)
(506,goto error;)
(507,18)
(508,leading_break)
(509,string.pointer++)
(510,x80)
(511,CHECK(parser->buffer, \'\\\\\')
(512,!IS_BLANKZ(parser->buffer)
(513,string)
(514,if (!CACHE(parser, 1)
(515,string.pointer)
(516,goto error;)
(517,leading_break)
(518,parser)
(519,string.pointer++)
(520,*(string.pointer++)
(521,YAML_SINGLE_QUOTED_SCALAR_STYLE)
(522,buffer)
(523,!IS_HEX_AT(parser->buffer, k)
(524,*(string.pointer++)
(525,CACHE(parser, 4)
(526,string)
(527,if (!JOIN(parser, string, whitespaces)
(528,trailing_breaks)
(529,leading_break.start)
(530,)
(531,string.pointer)
(532,if (!CACHE(parser, 2)
(533,parser)
(534,SKIP(parser)
(535,case \'n\':)
(536,string.pointer++)
(537,*(string.pointer++)
(538,whitespaces)
(539,goto error;)
(540,STRING_INIT(parser, string, INITIAL_STRING_SIZE)
(541,break;)
(542,start_mark)
(543,CHECK_AT(parser->buffer, \'-\', 1)
(544,code_length)
(545,string)
(546,\'\\\'\')
(547,parser)
(548,whitespaces)
(549,SKIP(parser)
(550,CACHE(parser, 1)
(551,*(string.pointer++)
(552,value >= 0xD800)
(553,string)
(554,*(string.pointer++)
(555,CHECK_AT(parser->buffer, \'.\', 0)
(556,parser)
(557,pointer)
(558,pointer)
(559,value)
(560,)
(561,parser)
(562,leading_blanks = 0)
(563,parser->buffer)
(564,string)
(565,*(string.pointer++)
(566,k)
(567,)
(568,pointer)
(569,value & 0x3F)
(570,string)
(571,pointer)
(572,string.pointer++)
(573,string.pointer++)
(574,goto error;)
(575,case \'e\':)
(576,)
(577,leading_blanks = 1)
(578,k = 0)
(579,1)
(580,code_length)
(581,leading_blanks)
(582,string)
(583,*(string.pointer++)
(584,\'\\0\')
(585,!READ(parser, string)
(586,NULL_STRING)
(587,single ? YAML_SINGLE_QUOTED_SCALAR_STYLE : YAML_DOUBLE_QUOTED_SCALAR_STYLE)
(588,parser)
(589,string.pointer++)
(590,4)
(591,case \'r\':)
(592,pointer)
(593,parser)
(594,string)
(595,break;)
(596,0x3F)
(597,yaml_parser_t *parser)
(598,\'\\n\')
(599,string.pointer)
(600,pointer)
(601,string.pointer)
(602,parser)
(603,*(string.pointer++)
(604,parser)
(605,parser)
(606,goto error;)
(607,x0A)
(608,value)
(609,)
(610,while (1)
(611,xA0)
(612,)
(613,parser)
(614,string)
(615,pointer)
(616,if (!IS_HEX_AT(parser->buffer, k)
(617,string.pointer)
(618,mark)
(619,parser)
(620,parser->buffer)
(621,string.pointer++)
(622,"while parsing a quoted scalar")
(623,buffer)
(624,xE2)
(625,\'\\\'\')
(626,parser)
(627,goto error;)
(628,pointer)
(629,string.pointer)
(630,parser->buffer)
(631,CACHE(parser, 1)
(632,k)
(633,leading_break)
(634,READ_LINE(parser, trailing_breaks)
(635,SKIP(parser)
(636,string)
(637,if (!READ(parser, whitespaces)
(638,!STRING_INIT(parser, leading_break, INITIAL_STRING_SIZE)
(639,0)
(640,0x3F)
(641,string)
(642,single)
(643,value)
(644,leading_break)
(645,parser)
(646,STRING_DEL(parser, whitespaces)
(647,NULL_STRING)
(648,case \'t\':)
(649,string)
(650,parser)
(651,string.pointer)
(652,leading_blanks)
(653,parser)
(654,pointer)
(655,case \'b\':)
(656,leading_break)
(657,6)
(658,case \'0\':)
(659,start)
(660,)
(661,!STRING_EXTEND(parser, string)
(662,*(string.pointer++)
(663,goto error;)
(664,parser)
(665,*(string.pointer++)
(666,IS_HEX_AT(parser->buffer, k)
(667,"found unknown escape character")
(668,)
(669,buffer)
(670,string)
(671,INITIAL_STRING_SIZE)
(672,4)
(673,parser)
(674,CHECK_AT(parser->buffer, \'-\', 0)
(675,trailing_breaks)
(676,!single && CHECK(parser->buffer, \'\\\\\')
(677,break;)
(678,buffer)
(679,JOIN(parser, string, whitespaces)
(680,value)
(681,*(string.pointer++)
(682,value)
(683,if (single && CHECK_AT(parser->buffer, \'\\\'\', 0)
(684,string.pointer)
(685,string.pointer)
(686,buffer)
(687,return 0;)
(688,break;)
(689,RET)
(690,string.pointer++)
(691,2)
(692,yaml_parser_set_scanner_error(parser, "while scanning a quoted scalar",\\n                    start_mark, "found unexpected document indicator")
(693,string)
(694,*(string.pointer++)
(695,)
(696,(value >> 6)
(697,parser->buffer)
(698,string.pointer++)
(699,string)
(700,case \'u\':)
(701,goto error;)
(702,0xC0 + (value >> 6)
(703,string)
(704,(value << 4)
(705,if ((value >= 0xD800 && value <= 0xDFFF)
(706,"did not find expected hexdecimal number")
(707,parser)
(708,*(string.pointer++)
(709,whitespaces = NULL_STRING)
(710,string)
(711,*(string.pointer++)
(712,!CACHE(parser, 2)
(713,INITIAL_STRING_SIZE)
(714,pointer)
(715,SKIP_LINE(parser)
(716,start_mark)
(717,*(string.pointer++)
(718,end_mark)
(719,case \'U\':)
(720,CHECK(parser->buffer, \'\\\\\')
(721,*(string.pointer++)
(722,if (!STRING_INIT(parser, string, INITIAL_STRING_SIZE)
(723,)
(724,\'\\\'\')
(725,0x3F)
(726,(value >= 0xD800 && value <= 0xDFFF)
(727,CLEAR(parser, leading_break)
(728,parser->buffer)
(729,leading_blanks)
(730,buffer)
(731,0x3F)
(732,\'\\\\\')
(733,string.pointer)
(734,parser->buffer)
(735,CHECK_AT(parser->buffer, \'\\\'\', 1)
(736,pointer)
(737,case \'x\':)
(738,CHECK_AT(parser->buffer, \'-\', 2)
(739,SKIP(parser)
(740,*(string.pointer++)
(741,*(string.pointer++)
(742,pointer)
(743,string.pointer)
(744,CHECK_AT(parser->buffer, \'-\', 1)
(745,parser->buffer)
(746,whitespaces)
(747,pointer)
(748,string.pointer)
(749,value)
(750,string)
(751,)
(752,value <= 0x7FF)
(753,leading_blanks)
(754,STRING_INIT(parser, whitespaces, INITIAL_STRING_SIZE)
(755,if (!READ(parser, string)
(756,parser)
(757,)
(758,)
(759,\'"\')
(760,CHECK_AT(parser->buffer, \'.\', 2)
(761,trailing_breaks)
(762,buffer)
(763,NULL_STRING)
(764,2)
(765,code_length)
(766,parser->buffer)
(767,parser->buffer)
(768,*(string.pointer++)
(769,!READ(parser, whitespaces)
(770,goto error;)
(771,goto error;)
(772,code_length)
(773,parser)
(774,parser)
(775,)
(776,parser->buffer)
(777,start_mark)
(778,parser->buffer.pointer)
(779,if (!CACHE(parser, 1)
(780,string.pointer)
(781,)
(782,string)
(783,0)
(784,string.pointer++)
(785,string.pointer)
(786,CHECK_AT(parser->buffer, \'\\\'\', 0)
(787,string)
(788,\'\\\'\')
(789,value)
(790,string.pointer++)
(791,x09)
(792,xC2)
(793,parser)
(794,CACHE(parser, 3)
(795,x80)
(796,if (code_length)
(797,CHECK_AT(parser->buffer, \'.\', 1)
(798,value >> 12)
(799,string.pointer++)
(800,\'\\\\\')
(801,*(string.pointer++)
(802,value & 0x3F)
(803,*(string.pointer++)
(804,)
(805,parser)
(806,STRING_EXTEND(parser, string)
(807,value >> 6)
(808,string)
(809,if (!leading_blanks)
(810,parser->mark.column == 0 &&\\n            ((CHECK_AT(parser->buffer, \'-\', 0)
(811,code_length = 8)
(812,*(string.pointer++)
(813,\' \')
(814,string.pointer++)
(815,*(string.pointer++)
(816,start_mark)
(817,CHECK(parser->buffer, single ? \'\\\'\' : \'"\')
(818,pointer)
(819,*(string.pointer++)
(820,parser->buffer)
(821,pointer)
(822,*(string.pointer++)
(823,goto error;)
(824,whitespaces)
(825,mark)
(826,goto error;)
(827,if (trailing_breaks.start[0] == \'\\0\')
(828,x85)
(829,*(string.pointer++)
(830,string)
(831,pointer)
(832,single)
(833,0x3F)
(834,CLEAR(parser, whitespaces)
(835,code_length = 0)
(836,single)
(837,0x80 + ((value >> 12)
(838,parser->mark)
(839,string.pointer++)
(840,string.pointer)
(841,string)
(842,parser)
(843,string.pointer)
(844,STRING_INIT(parser, trailing_breaks, INITIAL_STRING_SIZE)
(845,)
(846,string)
(847,1)
(848,whitespaces)
(849,1)
(850,string.pointer)
(851,CACHE(parser, 2)
(852,*(string.pointer++)
(853,*(string.pointer++)
(854,string.start)
(855,parser)
(856,value)
(857,!leading_blanks)
(858,case \'\\\'\':)
(859,1)
(860,parser)
(861,)
(862,trailing_breaks.start[0])
(863,parser)
(864,if (CHECK(parser->buffer, single ? \'\\\'\' : \'"\')
(865,NULL_STRING)
(866,string)
(867,*(string.pointer++)
(868,value <= 0x7F)
(869,8)
(870,CLEAR(parser, whitespaces)
(871,string)
(872,x0B)
(873,x20)
(874,*(string.pointer++)
(875,*(string.pointer++)
(876,start_mark)
(877,STRING_DEL(parser, leading_break)
(878,leading_break)
(879,*(string.pointer++)
(880,*(string.pointer++)
(881,*(string.pointer++)
(882,k < code_length)
(883,goto error;)
(884,parser)
(885,break;)
(886,break;)
(887,0xD800)
(888,)
(889,switch (parser->buffer.pointer[1])
(890,if (!STRING_INIT(parser, whitespaces, INITIAL_STRING_SIZE)
(891,parser)
(892,parser)
(893,parser->mark)
(894,while (IS_BLANK(parser->buffer)
(895,AS_HEX_AT(parser->buffer, k)
(896,!CACHE(parser, code_length)
(897,x08)
(898,string.pointer)
(899,string.pointer++)
(900,parser)
(901,*(string.pointer++)
(902,x0D)
(903,(value >> 12)
(904,if (!READ_LINE(parser, leading_break)
(905,string.pointer++)
(906,value > 0x10FFFF)
(907,break;)
(908,leading_break.start[0] == \'\\n\')
(909,)
(910,start)
(911,*(string.pointer++)
(912,2)
(913,*(string.pointer++)
(914,*(string.pointer++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000004000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff7f8d5a6400000000ffffffffffffffff3d8d5a6400000000ffffffffffffffff3d8d5a6400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xf3808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080f1808080
=========trace=========
static int yaml_parser_scan_tag_uri(yaml_parser_t *parser, int directive,         yaml_char_t *head, yaml_mark_t start_mark, yaml_char_t **uri) {
size_t length = head ? strlen((char *)head) : 0;
yaml_string_t string = NULL_STRING;
*uri = string.start;
return 1;
=======================
