-----label-----
0
-----code-----
void
TIFFSwabShort(uint16* wp)
{
	register unsigned char* cp = (unsigned char*) wp;
	unsigned char t;
	assert(sizeof(uint16)==2);
	t = cp[1]; cp[1] = cp[0]; cp[0] = t;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
37,38
37,39
38,39
42,43
43,44
43,45
44,45
46,47
46,48
47,48
50,51
51,52
51,53
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
61,63
62,63
62,64
63,64
66,67
-----nextToken-----
2,4,7,9,10,14,16,17,21,23,25,28,30,34,39,40,41,45,48,49,54,55,58,59,64,65,67
-----computeFrom-----
35,36
35,37
43,44
43,45
51,52
51,53
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;
-----ast_node-----
voidTIFFSwabShort(uint16* wp){	register unsigned char* cp = (unsigned char*) wp;	unsigned char t;	assert(sizeof(uint16)==2);	t = cp[1]; cp[1] = cp[0]; cp[0] = t;}
void
TIFFSwabShort(uint16* wp)
TIFFSwabShort
uint16* wp
uint16
uint16
* wp
*
wp
{	register unsigned char* cp = (unsigned char*) wp;	unsigned char t;	assert(sizeof(uint16)==2);	t = cp[1]; cp[1] = cp[0]; cp[0] = t;}
register unsigned char* cp = (unsigned char*) wp;
register unsigned char* cp = (unsigned char*) wp;
register unsigned char
* cp = (unsigned char*) wp
*
cp
= (unsigned char*) wp
(unsigned char*) wp
unsigned char*
unsigned char
*
*
wp
wp
unsigned char t;
unsigned char t;
unsigned char
t
t
assert(sizeof(uint16)==2);
assert(sizeof(uint16)==2)
assert
assert
sizeof(uint16)==2
sizeof(uint16)
uint16
uint16
uint16

2
t = cp[1];
t = cp[1]
t
t
cp[1]
cp
cp
1
cp[1] = cp[0];
cp[1] = cp[0]
cp[1]
cp
cp
1
cp[0]
cp
cp
0
cp[0] = t;
cp[0] = t
cp[0]
cp
cp
0
t
t
-----joern-----
(9,50,0)
(8,34,0)
(83,24,0)
(72,24,0)
(52,57,0)
(77,10,0)
(90,30,0)
(10,62,0)
(26,91,0)
(91,88,0)
(36,44,0)
(29,15,0)
(39,62,0)
(59,71,0)
(28,4,0)
(44,62,0)
(16,22,0)
(30,90,0)
(18,20,0)
(0,62,0)
(30,13,0)
(45,4,0)
(78,85,0)
(7,76,0)
(32,46,0)
(53,75,0)
(46,9,0)
(87,21,0)
(50,62,0)
(62,4,0)
(60,12,0)
(21,4,0)
(48,28,0)
(84,29,0)
(85,28,0)
(29,62,0)
(63,62,0)
(33,15,0)
(12,62,0)
(44,64,0)
(8,27,0)
(49,44,0)
(85,78,0)
(76,71,0)
(44,91,0)
(70,3,0)
(71,4,0)
(50,21,0)
(19,4,0)
(88,10,0)
(1,43,0)
(3,21,0)
(76,62,0)
(43,78,0)
(57,62,0)
(21,20,0)
(64,4,0)
(57,91,0)
(45,39,0)
(67,62,0)
(22,62,0)
(41,39,0)
(58,50,0)
(85,62,0)
(62,17,0)
(65,43,0)
(10,64,0)
(46,20,0)
(38,67,0)
(91,4,0)
(34,8,0)
(67,61,0)
(55,27,0)
(2,29,0)
(5,90,0)
(28,45,0)
(82,85,0)
(68,85,0)
(74,50,0)
(15,29,0)
(73,88,0)
(6,67,0)
(61,4,0)
(24,28,0)
(63,61,0)
(39,78,0)
(86,17,0)
(25,22,0)
(56,75,0)
(17,86,0)
(9,4,0)
(47,45,0)
(31,17,0)
(63,71,0)
(20,4,0)
(15,4,0)
(50,9,0)
(17,62,0)
(22,9,0)
(37,57,0)
(40,30,0)
(35,39,0)
(11,76,0)
(10,88,0)
(46,62,0)
(79,12,0)
(3,62,0)
(23,10,0)
(78,4,0)
(14,46,0)
(20,46,0)
(88,4,0)
(66,63,0)
(61,63,0)
(17,51,0)
(39,45,0)
(43,62,0)
(24,62,0)
(27,8,0)
(42,63,0)
(19,51,0)
(54,75,0)
(34,75,0)
(12,64,0)
(64,44,0)
(29,61,0)
(71,15,0)
(69,3,0)
(81,19,0)
(80,8,0)
(10,62,1)
(79,88,1)
(39,41,1)
(90,5,1)
(70,69,1)
(63,71,1)
(71,59,1)
(33,21,1)
(9,50,1)
(8,80,1)
(2,33,1)
(19,51,1)
(28,48,1)
(67,6,1)
(8,27,1)
(10,64,1)
(20,46,1)
(47,62,1)
(43,65,1)
(37,52,1)
(10,23,1)
(48,24,1)
(81,71,1)
(18,91,1)
(31,0,1)
(46,14,1)
(90,30,1)
(63,66,1)
(60,79,1)
(91,26,1)
(87,3,1)
(80,27,1)
(61,63,1)
(77,73,1)
(38,15,1)
(36,49,1)
(82,43,1)
(30,13,1)
(69,9,1)
(3,70,1)
(17,86,1)
(21,20,1)
(5,30,1)
(68,82,1)
(42,67,1)
(12,62,1)
(1,45,1)
(52,64,1)
(40,19,1)
(17,31,1)
(24,72,1)
(11,7,1)
(19,81,1)
(14,32,1)
(24,62,1)
(64,44,1)
(58,74,1)
(21,87,1)
(85,28,1)
(0,90,1)
(83,78,1)
(85,68,1)
(28,45,1)
(72,83,1)
(29,61,1)
(44,62,1)
(12,60,1)
(66,42,1)
(6,38,1)
(22,62,1)
(67,62,1)
(57,62,1)
(45,39,1)
(57,37,1)
(62,17,1)
(26,57,1)
(23,77,1)
(22,25,1)
(50,58,1)
(34,8,1)
(63,62,1)
(39,62,1)
(49,12,1)
(84,2,1)
(44,91,1)
(27,55,1)
(76,11,1)
(85,62,1)
(73,28,1)
(91,88,1)
(39,78,1)
(65,1,1)
(7,61,1)
(46,62,1)
(25,16,1)
(59,76,1)
(46,9,1)
(30,40,1)
(78,85,1)
(43,62,1)
(41,35,1)
(29,62,1)
(32,18,1)
(29,84,1)
(40,34,1)
(44,36,1)
(76,62,1)
(89,90,1)
(74,22,1)
(17,51,1)
(3,62,1)
(50,62,1)
(50,21,1)
(35,47,1)
(88,10,1)
(16,20,1)
(71,15,1)
(15,29,1)
(49,90,2)
(88,10,2)
(47,90,2)
(70,90,2)
(24,90,2)
(74,90,2)
(88,90,2)
(20,90,2)
(20,46,2)
(3,90,2)
(58,90,2)
(59,90,2)
(44,90,2)
(63,62,2)
(28,45,2)
(79,90,2)
(91,88,2)
(46,62,2)
(41,90,2)
(8,27,2)
(39,90,2)
(46,90,2)
(38,90,2)
(37,90,2)
(25,90,2)
(52,90,2)
(85,90,2)
(78,85,2)
(39,62,2)
(91,90,2)
(17,51,2)
(43,62,2)
(83,90,2)
(10,90,2)
(24,62,2)
(71,90,2)
(62,17,2)
(5,90,2)
(12,62,2)
(81,90,2)
(90,30,2)
(22,90,2)
(3,62,2)
(63,71,2)
(82,90,2)
(21,90,2)
(45,39,2)
(26,90,2)
(16,90,2)
(29,90,2)
(85,28,2)
(43,90,2)
(85,62,2)
(15,29,2)
(29,62,2)
(45,90,2)
(68,90,2)
(17,90,2)
(61,63,2)
(65,90,2)
(19,51,2)
(2,90,2)
(17,86,2)
(10,64,2)
(11,90,2)
(0,90,2)
(12,90,2)
(77,90,2)
(18,90,2)
(90,90,2)
(66,90,2)
(44,62,2)
(29,61,2)
(42,90,2)
(67,90,2)
(40,90,2)
(10,62,2)
(73,90,2)
(31,90,2)
(14,90,2)
(30,90,2)
(34,8,2)
(50,62,2)
(30,13,2)
(19,90,2)
(28,90,2)
(44,91,2)
(9,90,2)
(7,90,2)
(22,62,2)
(1,90,2)
(84,90,2)
(23,90,2)
(50,21,2)
(87,90,2)
(76,90,2)
(64,90,2)
(69,90,2)
(21,20,2)
(35,90,2)
(48,90,2)
(64,44,2)
(57,90,2)
(72,90,2)
(78,90,2)
(67,62,2)
(57,62,2)
(60,90,2)
(36,90,2)
(61,90,2)
(50,90,2)
(32,90,2)
(71,15,2)
(63,90,2)
(62,90,2)
(33,90,2)
(15,90,2)
(76,62,2)
(39,78,2)
(46,9,2)
(9,50,2)
(6,90,2)
-----------------------------------
(0,cp)
(1,cp)
(2,cp)
(3,cp[2])
(4,)
(5,0)
(6,4)
(7,cp)
(8,sizeof(uint64)
(9,cp[5] = cp[2])
(10,cp[6])
(11,3)
(12,cp[6])
(13,tmsize_t n)
(14,5)
(15,t = cp[4])
(16,cp)
(17,(unsigned char *)
(18,t)
(19,lp++)
(20,t = cp[5])
(21,cp[2] = t)
(22,cp[5])
(23,6)
(24,cp[0])
(25,5)
(26,t)
(27,sizeof(uint64)
(28,cp[0] = t)
(29,cp[4])
(30,n--)
(31,lp)
(32,cp)
(33,t)
(34,assert(sizeof(uint64)
(35,cp)
(36,1)
(37,1)
(38,cp)
(39,cp[7])
(40,n)
(41,7)
(42,cp)
(43,cp[7])
(44,cp[1])
(45,t = cp[7])
(46,cp[5])
(47,t)
(48,t)
(49,cp)
(50,cp[2])
(51,register uint64* lp)
(52,cp)
(53,while (n-- > 0)
(54,t)
(55,uint64)
(56,cp)
(57,cp[1])
(58,2)
(59,t)
(60,6)
(61,cp[4] = cp[3])
(62,cp = (unsigned char *)
(63,cp[3])
(64,cp[6] = cp[1])
(65,7)
(66,3)
(67,cp[4])
(68,0)
(69,cp)
(70,2)
(71,cp[3] = t)
(72,0)
(73,t)
(74,cp)
(75,)
(76,cp[3])
(77,cp)
(78,cp[7] = cp[0])
(79,cp)
(80,8)
(81,lp)
(82,cp)
(83,cp)
(84,4)
(85,cp[0])
(86,unsigned char *)
(87,t)
(88,t = cp[6])
(89,RET)
(90,n-- > 0)
(91,cp[1] = t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff54edb46300000000ffffffffffffffff7beeb46300000000ffffffffffffffff7beeb46300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x4d4d002a00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
void TIFFSwabShort(uint16* wp) {
register unsigned char* cp = (unsigned char*) wp;
unsigned char t;
assert(sizeof(uint16)==2);
t = cp[1];
cp[1] = cp[0];
cp[0] = t;
=======================
