-----label-----
0
-----code-----
void
_zip_error_get(struct zip_error *err, int *zep, int *sep)
{
    if (zep)
	*zep = err->zip_err;
    if (sep) {
	if (zip_error_get_sys_type(err->zip_err) != ZIP_ET_NONE)
	    *sep = err->sys_err;
	else
	    *sep = 0;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
18,20
21,22
21,23
22,23
22,24
23,24
25,26
26,27
26,28
27,28
28,29
30,31
30,32
31,32
34,35
34,36
35,36
37,38
38,39
38,40
38,41
39,40
39,41
40,41
40,42
41,42
43,44
43,45
44,45
47,48
49,50
50,51
50,52
51,52
52,53
54,55
54,56
55,56
58,59
59,60
59,61
60,61
61,62
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,20,24,29,32,33,36,42,45,46,48,53,56,57,62,63
-----computeFrom-----
26,27
26,28
39,40
39,41
50,51
50,52
59,60
59,61
-----guardedBy-----
45,56
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void_zip_error_get(struct zip_error *err, int *zep, int *sep){    if (zep)	*zep = err->zip_err;    if (sep) {	if (zip_error_get_sys_type(err->zip_err) != ZIP_ET_NONE)	    *sep = err->sys_err;	else	    *sep = 0;    }}
void
_zip_error_get(struct zip_error *err, int *zep, int *sep)
_zip_error_get
struct zip_error *err
struct zip_error
zip_error
*err
*
err
int *zep
int
*zep
*
zep
int *sep
int
*sep
*
sep
{    if (zep)	*zep = err->zip_err;    if (sep) {	if (zip_error_get_sys_type(err->zip_err) != ZIP_ET_NONE)	    *sep = err->sys_err;	else	    *sep = 0;    }}
if (zep)	*zep = err->zip_err;
zep
zep
*zep = err->zip_err;
*zep = err->zip_err
*zep
zep
zep
err->zip_err
err
err
zip_err
if (sep) {	if (zip_error_get_sys_type(err->zip_err) != ZIP_ET_NONE)	    *sep = err->sys_err;	else	    *sep = 0;    }
sep
sep
{	if (zip_error_get_sys_type(err->zip_err) != ZIP_ET_NONE)	    *sep = err->sys_err;	else	    *sep = 0;    }
if (zip_error_get_sys_type(err->zip_err) != ZIP_ET_NONE)	    *sep = err->sys_err;	else	    *sep = 0;
zip_error_get_sys_type(err->zip_err) != ZIP_ET_NONE
zip_error_get_sys_type(err->zip_err)
zip_error_get_sys_type
zip_error_get_sys_type
err->zip_err
err
err
zip_err
ZIP_ET_NONE
ZIP_ET_NONE
*sep = err->sys_err;
*sep = err->sys_err
*sep
sep
sep
err->sys_err
err
err
sys_err
*sep = 0;
*sep = 0
*sep
sep
sep
0
-----joern-----
(27,15,0)
(32,10,0)
(16,15,0)
(10,17,0)
(7,27,0)
(18,25,0)
(19,5,0)
(6,25,0)
(13,17,0)
(31,32,0)
(23,24,0)
(5,24,0)
(27,28,0)
(22,3,0)
(17,10,0)
(4,9,0)
(17,26,0)
(5,19,0)
(24,26,0)
(30,3,0)
(32,28,0)
(12,17,0)
(0,24,0)
(2,3,0)
(14,4,0)
(29,19,0)
(3,26,0)
(24,5,0)
(4,30,0)
(11,21,0)
(3,30,0)
(5,24,1)
(19,5,1)
(1,8,1)
(14,20,1)
(23,8,1)
(7,19,1)
(3,2,1)
(17,26,1)
(19,29,1)
(27,7,1)
(8,30,1)
(10,17,1)
(15,16,1)
(24,0,1)
(3,26,1)
(16,27,1)
(1,10,1)
(4,14,1)
(22,4,1)
(31,19,1)
(8,20,1)
(29,5,1)
(27,28,1)
(30,3,1)
(4,9,1)
(24,26,1)
(17,12,1)
(12,13,1)
(0,23,1)
(32,31,1)
(2,22,1)
(13,32,1)
(32,28,1)
(1,15,1)
(10,19,2)
(10,17,2)
(29,8,2)
(16,19,2)
(4,20,2)
(15,19,2)
(3,20,2)
(24,8,2)
(12,19,2)
(24,26,2)
(2,20,2)
(13,19,2)
(17,19,2)
(19,5,2)
(5,24,2)
(7,19,2)
(31,19,2)
(30,20,2)
(32,28,2)
(30,3,2)
(14,20,2)
(23,8,2)
(17,26,2)
(3,26,2)
(0,8,2)
(22,20,2)
(19,8,2)
(4,9,2)
(5,8,2)
(27,19,2)
(32,19,2)
(27,28,2)
-----------------------------------
(0,zip_err)
(1,RET)
(2,zip_err)
(3,err->zip_err)
(4,*zep)
(5,zip_error_get_sys_type(err->zip_err)
(6,if (zep)
(7,sep)
(8,sep)
(9,int *zep)
(10,*sep = err->sys_err)
(11,if (zip_error_get_sys_type(err->zip_err)
(12,sys_err)
(13,err)
(14,zep)
(15,*sep = 0)
(16,0)
(17,err->sys_err)
(18,if (sep)
(19,zip_error_get_sys_type(err->zip_err)
(20,zep)
(21,)
(22,err)
(23,err)
(24,err->zip_err)
(25,)
(26,struct zip_error *err)
(27,*sep)
(28,int *sep)
(29,ZIP_ET_NONE)
(30,*zep = err->zip_err)
(31,sep)
(32,*sep)
-----cfg-----
(32,44)
(33,37)
(35,32)
(37,35)
(7,16)
(7,44)
(7,29)
(40,44)
(41,40)
(15,44)
(15,29)
(16,20)
(18,15)
(20,18)
(25,33)
(25,41)
(26,25)
(27,26)
(29,27)
-----path-----
7,16,20,18,15,44
7,16,20,18,15,29,27,26,25,33,37,35,32,44
7,16,20,18,15,29,27,26,25,41,40,44
7,44
7,29,27,26,25,33,37,35,32,44
7,29,27,26,25,41,40,44
-----cfgNode-----
5,<global>
6,<empty>
7,void _zip_error_get (struct zip_error *err,int *zep,int *sep)
8,struct zip_error *err
9,int *zep
10,int *sep
11,<empty>
12,if (zep)
13,zep
14,<empty>
15,*zep = err->zip_err
16,*zep
17,zep
18,err->zip_err
19,err
20,zip_err
21,if (sep)
22,sep
23,<empty>
24,if (zip_error_get_sys_type(err->zip_err) != ZIP_ET_NONE)
25,zip_error_get_sys_type(err->zip_err) != ZIP_ET_NONE
26,zip_error_get_sys_type(err->zip_err)
27,err->zip_err
28,err
29,zip_err
30,ZIP_ET_NONE
31,<empty>
32,*sep = err->sys_err
33,*sep
34,sep
35,err->sys_err
36,err
37,sys_err
38,else
39,<empty>
40,*sep = 0
41,*sep
42,sep
43,0
44,RET
45,struct zip_error *err
46,int *zep
47,int *sep
48,RET
49,void _zip_error_get (struct zip_error *err,int *zep,int *sep)
50,struct zip_error *err
51,int *zep
52,int *sep
53,<empty>
54,if (zep)
55,zep
56,<empty>
57,*zep = err->zip_err
58,*zep
59,zep
60,err->zip_err
61,err
62,zip_err
63,if (sep)
64,sep
65,<empty>
66,if (zip_error_get_sys_type(err->zip_err) != ZIP_ET_NONE)
67,zip_error_get_sys_type(err->zip_err) != ZIP_ET_NONE
68,zip_error_get_sys_type(err->zip_err)
69,err->zip_err
70,err
71,zip_err
72,ZIP_ET_NONE
73,<empty>
74,*sep = err->sys_err
75,*sep
76,sep
77,err->sys_err
78,err
79,sys_err
80,else
81,<empty>
82,*sep = 0
83,*sep
84,sep
85,0
86,RET
87,struct zip_error *err
88,int *zep
89,int *sep
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffb1fd436400000000ffffffffffffffffb0fd436400000000ffffffffffffffffb0fd436400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000504b0506000000000000ffff00000000000000000000
arg00:0x2d76ff
=========trace=========
void _zip_error_get(struct zip_error *err, int *zep, int *sep) {
if(zep)
*zep = err->zip_err;
if(sep)
*sep = 0;
=======================
