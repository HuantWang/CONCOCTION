-----label-----
0
-----code-----
jas_image_t *jpc_decode(jas_stream_t *in, char *optstr)
{
	jpc_dec_importopts_t opts;
	jpc_dec_t *dec;
	jas_image_t *image;

	dec = 0;

	if (jpc_dec_parseopts(optstr, &opts)) {
		goto error;
	}

	jpc_initluts();

	if (!(dec = jpc_dec_create(&opts, in))) {
		goto error;
	}

	/* Do most of the work. */
	if (jpc_dec_decode(dec)) {
		goto error;
	}

	if (jas_image_numcmpts(dec->image) >= 3) {
		jas_image_setclrspc(dec->image, JAS_CLRSPC_SRGB);
		jas_image_setcmpttype(dec->image, 0,
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R));
		jas_image_setcmpttype(dec->image, 1,
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G));
		jas_image_setcmpttype(dec->image, 2,
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B));
	} else {
		jas_image_setclrspc(dec->image, JAS_CLRSPC_SGRAY);
		jas_image_setcmpttype(dec->image, 0,
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y));
	}

	/* Save the return value. */
	image = dec->image;

	/* Stop the image from being discarded. */
	dec->image = 0;

	/* Destroy decoder. */
	jpc_dec_destroy(dec);

	return image;

error:
	if (dec) {
		jpc_dec_destroy(dec);
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
15,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
18,29
18,30
18,31
18,32
18,33
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
34,35
36,37
36,38
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
45,48
46,47
48,49
50,51
51,52
53,54
54,55
56,57
57,58
58,59
60,61
60,62
61,62
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
70,71
72,73
74,75
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
86,87
86,88
86,89
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
96,99
96,100
97,98
98,99
98,100
98,101
99,100
101,102
101,103
102,103
105,106
107,108
108,109
108,110
108,111
108,112
109,110
111,112
111,113
112,113
116,117
116,118
117,118
119,120
121,122
122,123
122,124
122,125
122,126
123,124
125,126
125,127
126,127
130,131
130,132
131,132
133,134
135,136
136,137
136,138
136,139
136,140
137,138
139,140
139,141
140,141
144,145
144,146
145,146
147,148
149,150
149,151
150,151
151,152
151,153
151,154
152,153
154,155
154,156
155,156
158,159
160,161
161,162
161,163
161,164
161,165
162,163
164,165
164,166
165,166
169,170
169,171
170,171
172,173
174,175
175,176
175,177
176,177
178,179
178,180
179,180
182,183
183,184
183,185
184,185
184,186
185,186
189,190
190,191
190,192
191,192
193,194
195,196
196,197
198,199
198,200
200,201
200,202
201,202
203,204
204,205
205,206
205,207
206,207
208,209
210,211
-----nextToken-----
3,5,6,9,11,12,14,16,17,22,24,28,30,31,35,37,38,42,43,47,49,52,55,59,65,68,71,73,76,80,82,85,90,93,94,95,100,103,104,106,110,113,114,115,118,120,124,127,128,129,132,134,138,141,142,143,146,148,153,156,157,159,163,166,167,168,171,173,177,180,181,186,187,188,192,194,197,199,202,207,209,211
-----computeFrom-----
40,41
40,42
63,64
63,65
87,88
87,89
175,176
175,177
183,184
183,185
-----guardedBy-----
94,142
93,141
-----guardedByNegation-----
94,167
93,166
-----lastLexicalUse-----
94,167
93,166
-----jump-----
94,167
93,166
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
jas_image_t *jpc_decode(jas_stream_t *in, char *optstr){	jpc_dec_importopts_t opts;	jpc_dec_t *dec;	jas_image_t *image;	dec = 0;	if (jpc_dec_parseopts(optstr, &opts)) {		goto error;	}	jpc_initluts();	if (!(dec = jpc_dec_create(&opts, in))) {		goto error;	}	/* Do most of the work. */	if (jpc_dec_decode(dec)) {		goto error;	}	if (jas_image_numcmpts(dec->image) >= 3) {		jas_image_setclrspc(dec->image, JAS_CLRSPC_SRGB);		jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R));		jas_image_setcmpttype(dec->image, 1,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G));		jas_image_setcmpttype(dec->image, 2,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B));	} else {		jas_image_setclrspc(dec->image, JAS_CLRSPC_SGRAY);		jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y));	}	/* Save the return value. */	image = dec->image;	/* Stop the image from being discarded. */	dec->image = 0;	/* Destroy decoder. */	jpc_dec_destroy(dec);	return image;error:	if (dec) {		jpc_dec_destroy(dec);	}	return 0;}
jas_image_t
jas_image_t
*jpc_decode(jas_stream_t *in, char *optstr)
*
jpc_decode
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
char *optstr
char
*optstr
*
optstr
{	jpc_dec_importopts_t opts;	jpc_dec_t *dec;	jas_image_t *image;	dec = 0;	if (jpc_dec_parseopts(optstr, &opts)) {		goto error;	}	jpc_initluts();	if (!(dec = jpc_dec_create(&opts, in))) {		goto error;	}	/* Do most of the work. */	if (jpc_dec_decode(dec)) {		goto error;	}	if (jas_image_numcmpts(dec->image) >= 3) {		jas_image_setclrspc(dec->image, JAS_CLRSPC_SRGB);		jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R));		jas_image_setcmpttype(dec->image, 1,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G));		jas_image_setcmpttype(dec->image, 2,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B));	} else {		jas_image_setclrspc(dec->image, JAS_CLRSPC_SGRAY);		jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y));	}	/* Save the return value. */	image = dec->image;	/* Stop the image from being discarded. */	dec->image = 0;	/* Destroy decoder. */	jpc_dec_destroy(dec);	return image;error:	if (dec) {		jpc_dec_destroy(dec);	}	return 0;}
jpc_dec_importopts_t opts;
jpc_dec_importopts_t opts;
jpc_dec_importopts_t
jpc_dec_importopts_t
opts
opts
jpc_dec_t *dec;
jpc_dec_t *dec;
jpc_dec_t
jpc_dec_t
*dec
*
dec
jas_image_t *image;
jas_image_t *image;
jas_image_t
jas_image_t
*image
*
image
dec = 0;
dec = 0
dec
dec
0
if (jpc_dec_parseopts(optstr, &opts)) {		goto error;	}
jpc_dec_parseopts(optstr, &opts)
jpc_dec_parseopts
jpc_dec_parseopts
optstr
optstr
&opts
opts
opts
{		goto error;	}
goto error;
error
jpc_initluts();
jpc_initluts()
jpc_initluts
jpc_initluts
if (!(dec = jpc_dec_create(&opts, in))) {		goto error;	}
!(dec = jpc_dec_create(&opts, in))
(dec = jpc_dec_create(&opts, in))
dec = jpc_dec_create(&opts, in)
dec
dec
jpc_dec_create(&opts, in)
jpc_dec_create
jpc_dec_create
&opts
opts
opts
in
in
{		goto error;	}
goto error;
error
if (jpc_dec_decode(dec)) {		goto error;	}
jpc_dec_decode(dec)
jpc_dec_decode
jpc_dec_decode
dec
dec
{		goto error;	}
goto error;
error
if (jas_image_numcmpts(dec->image) >= 3) {		jas_image_setclrspc(dec->image, JAS_CLRSPC_SRGB);		jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R));		jas_image_setcmpttype(dec->image, 1,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G));		jas_image_setcmpttype(dec->image, 2,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B));	} else {		jas_image_setclrspc(dec->image, JAS_CLRSPC_SGRAY);		jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y));	}
jas_image_numcmpts(dec->image) >= 3
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
3
{		jas_image_setclrspc(dec->image, JAS_CLRSPC_SRGB);		jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R));		jas_image_setcmpttype(dec->image, 1,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G));		jas_image_setcmpttype(dec->image, 2,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B));	}
jas_image_setclrspc(dec->image, JAS_CLRSPC_SRGB);
jas_image_setclrspc(dec->image, JAS_CLRSPC_SRGB)
jas_image_setclrspc
jas_image_setclrspc
dec->image
dec
dec
image
JAS_CLRSPC_SRGB
JAS_CLRSPC_SRGB
jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R));
jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R))
jas_image_setcmpttype
jas_image_setcmpttype
dec->image
dec
dec
image
0
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_RGB_R
JAS_CLRSPC_CHANIND_RGB_R
jas_image_setcmpttype(dec->image, 1,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G));
jas_image_setcmpttype(dec->image, 1,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G))
jas_image_setcmpttype
jas_image_setcmpttype
dec->image
dec
dec
image
1
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_RGB_G
JAS_CLRSPC_CHANIND_RGB_G
jas_image_setcmpttype(dec->image, 2,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B));
jas_image_setcmpttype(dec->image, 2,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))
jas_image_setcmpttype
jas_image_setcmpttype
dec->image
dec
dec
image
2
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_RGB_B
JAS_CLRSPC_CHANIND_RGB_B
{		jas_image_setclrspc(dec->image, JAS_CLRSPC_SGRAY);		jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y));	}
jas_image_setclrspc(dec->image, JAS_CLRSPC_SGRAY);
jas_image_setclrspc(dec->image, JAS_CLRSPC_SGRAY)
jas_image_setclrspc
jas_image_setclrspc
dec->image
dec
dec
image
JAS_CLRSPC_SGRAY
JAS_CLRSPC_SGRAY
jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y));
jas_image_setcmpttype(dec->image, 0,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y))
jas_image_setcmpttype
jas_image_setcmpttype
dec->image
dec
dec
image
0
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_GRAY_Y
JAS_CLRSPC_CHANIND_GRAY_Y
image = dec->image;
image = dec->image
image
image
dec->image
dec
dec
image
dec->image = 0;
dec->image = 0
dec->image
dec
dec
image
0
jpc_dec_destroy(dec);
jpc_dec_destroy(dec)
jpc_dec_destroy
jpc_dec_destroy
dec
dec
return image;
image
image
error:	if (dec) {		jpc_dec_destroy(dec);	}
error
if (dec) {		jpc_dec_destroy(dec);	}
dec
dec
{		jpc_dec_destroy(dec);	}
jpc_dec_destroy(dec);
jpc_dec_destroy(dec)
jpc_dec_destroy
jpc_dec_destroy
dec
dec
return 0;
0
-----joern-----
(120,310,0)
(325,289,0)
(182,302,0)
(333,42,0)
(66,251,0)
(180,224,0)
(340,199,0)
(282,225,0)
(1,119,0)
(171,329,0)
(4,206,0)
(160,90,0)
(248,9,0)
(59,55,0)
(73,141,0)
(41,339,0)
(20,296,0)
(2,187,0)
(22,320,0)
(129,28,0)
(318,327,0)
(148,225,0)
(336,255,0)
(87,251,0)
(3,188,0)
(190,243,0)
(302,301,0)
(5,55,0)
(249,222,0)
(278,251,0)
(293,204,0)
(55,5,0)
(202,162,0)
(279,49,0)
(193,48,0)
(276,10,0)
(333,225,0)
(325,58,0)
(157,286,0)
(101,282,0)
(324,18,0)
(209,249,0)
(28,129,0)
(189,55,0)
(216,256,0)
(81,110,0)
(175,257,0)
(179,3,0)
(133,283,0)
(221,300,0)
(59,348,0)
(208,251,0)
(236,333,0)
(347,161,0)
(53,128,0)
(302,162,0)
(98,117,0)
(178,314,0)
(300,162,0)
(52,29,0)
(219,153,0)
(120,141,0)
(84,132,0)
(161,141,0)
(343,42,0)
(316,272,0)
(25,342,0)
(169,40,0)
(350,137,0)
(353,110,0)
(8,83,0)
(234,103,0)
(347,79,0)
(247,12,0)
(128,321,0)
(140,58,0)
(47,43,0)
(14,55,0)
(308,341,0)
(77,119,0)
(241,225,0)
(338,251,0)
(228,350,0)
(195,272,0)
(16,121,0)
(69,139,0)
(152,79,0)
(63,76,0)
(103,234,0)
(83,58,0)
(134,301,0)
(299,96,0)
(115,140,0)
(255,212,0)
(252,5,0)
(2,141,0)
(93,215,0)
(126,18,0)
(314,55,0)
(307,302,0)
(281,314,0)
(158,291,0)
(36,10,0)
(104,251,0)
(51,137,0)
(75,265,0)
(172,157,0)
(12,141,0)
(174,5,0)
(261,121,0)
(64,191,0)
(212,298,0)
(218,253,0)
(156,297,0)
(39,62,0)
(121,306,0)
(332,251,0)
(3,348,0)
(158,297,0)
(303,148,0)
(9,170,0)
(107,90,0)
(146,321,0)
(223,15,0)
(21,292,0)
(181,289,0)
(45,294,0)
(153,162,0)
(323,331,0)
(8,23,0)
(291,226,0)
(242,55,0)
(224,291,0)
(10,328,0)
(169,188,0)
(18,141,0)
(15,162,0)
(245,234,0)
(24,90,0)
(256,184,0)
(94,251,0)
(108,41,0)
(31,169,0)
(72,129,0)
(296,348,0)
(88,251,0)
(347,62,0)
(255,141,0)
(256,225,0)
(85,148,0)
(11,59,0)
(138,99,0)
(347,128,0)
(125,140,0)
(130,269,0)
(79,141,0)
(244,260,0)
(313,335,0)
(67,59,0)
(242,239,0)
(102,243,0)
(62,141,0)
(90,162,0)
(112,255,0)
(201,319,0)
(354,283,0)
(326,253,0)
(163,58,0)
(290,224,0)
(235,342,0)
(76,138,0)
(161,191,0)
(54,41,0)
(270,284,0)
(262,341,0)
(237,306,0)
(304,128,0)
(86,251,0)
(222,263,0)
(334,269,0)
(273,28,0)
(132,162,0)
(249,141,0)
(305,234,0)
(109,325,0)
(220,151,0)
(90,107,0)
(206,225,0)
(321,176,0)
(280,12,0)
(214,226,0)
(230,262,0)
(153,58,0)
(97,267,0)
(83,8,0)
(149,284,0)
(215,55,0)
(283,133,0)
(154,348,0)
(292,162,0)
(162,127,0)
(352,259,0)
(330,299,0)
(224,226,0)
(187,155,0)
(46,73,0)
(310,96,0)
(5,225,0)
(334,176,0)
(234,348,0)
(212,255,0)
(316,217,0)
(239,242,0)
(207,265,0)
(116,251,0)
(37,79,0)
(78,27,0)
(272,316,0)
(213,275,0)
(347,121,0)
(119,141,0)
(137,194,0)
(98,48,0)
(124,62,0)
(136,286,0)
(264,49,0)
(57,296,0)
(70,177,0)
(243,141,0)
(250,251,0)
(13,284,0)
(121,141,0)
(131,286,0)
(310,120,0)
(185,170,0)
(253,348,0)
(114,110,0)
(97,233,0)
(200,167,0)
(224,290,0)
(184,256,0)
(283,58,0)
(329,58,0)
(184,68,0)
(175,132,0)
(105,83,0)
(259,141,0)
(58,194,0)
(225,328,0)
(297,158,0)
(244,319,0)
(350,215,0)
(229,162,0)
(269,334,0)
(177,298,0)
(74,244,0)
(197,265,0)
(181,137,0)
(128,141,0)
(56,300,0)
(346,347,0)
(296,58,0)
(198,269,0)
(322,275,0)
(170,9,0)
(38,15,0)
(26,28,0)
(95,319,0)
(309,282,0)
(19,49,0)
(183,251,0)
(148,69,0)
(140,125,0)
(166,29,0)
(348,142,0)
(107,49,0)
(164,43,0)
(285,36,0)
(30,167,0)
(111,233,0)
(204,348,0)
(323,329,0)
(113,262,0)
(225,206,0)
(258,10,0)
(349,132,0)
(268,335,0)
(337,100,0)
(36,41,0)
(351,242,0)
(65,48,0)
(41,36,0)
(211,83,0)
(233,348,0)
(306,251,0)
(170,58,0)
(347,262,0)
(144,215,0)
(215,350,0)
(277,249,0)
(335,225,0)
(315,2,0)
(81,17,0)
(34,40,0)
(79,299,0)
(292,17,0)
(240,251,0)
(89,189,0)
(314,178,0)
(48,98,0)
(145,2,0)
(317,27,0)
(118,347,0)
(168,49,0)
(55,122,0)
(106,259,0)
(196,76,0)
(165,251,0)
(187,2,0)
(231,283,0)
(345,73,0)
(133,6,0)
(288,204,0)
(92,158,0)
(205,342,0)
(0,251,0)
(44,266,0)
(341,263,0)
(254,229,0)
(69,148,0)
(295,233,0)
(151,348,0)
(43,58,0)
(344,329,0)
(29,162,0)
(82,275,0)
(123,242,0)
(272,162,0)
(319,122,0)
(266,58,0)
(348,59,0)
(191,155,0)
(262,141,0)
(129,319,0)
(147,151,0)
(186,256,0)
(50,137,0)
(214,291,0)
(103,71,0)
(222,249,0)
(287,206,0)
(269,141,0)
(203,181,0)
(138,76,0)
(33,297,0)
(132,175,0)
(61,284,0)
(162,153,0)
(40,142,0)
(192,314,0)
(91,343,0)
(80,251,0)
(210,275,0)
(294,55,0)
(239,232,0)
(58,296,0)
(173,161,0)
(274,294,0)
(297,162,0)
(312,40,0)
(227,291,0)
(27,225,0)
(48,225,0)
(60,153,0)
(15,290,0)
(301,302,0)
(238,272,0)
(76,162,0)
(286,157,0)
(291,158,0)
(35,170,0)
(110,127,0)
(271,161,0)
(150,284,0)
(167,58,0)
(143,120,0)
(290,15,0)
(286,55,0)
(246,266,0)
(233,97,0)
(32,120,0)
(62,177,0)
(189,260,0)
(28,225,0)
(329,323,0)
(157,40,0)
(311,229,0)
(7,214,0)
(159,140,0)
(9,110,0)
(347,251,0)
(135,81,0)
(206,141,0)
(343,10,0)
(161,141,1)
(259,141,1)
(130,198,1)
(154,40,1)
(175,132,1)
(247,280,1)
(121,16,1)
(206,141,1)
(178,314,1)
(83,105,1)
(11,67,1)
(282,309,1)
(34,178,1)
(48,65,1)
(109,181,1)
(169,31,1)
(239,242,1)
(187,2,1)
(330,79,1)
(83,58,1)
(172,348,1)
(74,239,1)
(1,36,1)
(180,290,1)
(287,4,1)
(201,36,1)
(157,40,1)
(54,108,1)
(72,189,1)
(131,136,1)
(177,70,1)
(272,238,1)
(204,293,1)
(227,301,1)
(245,305,1)
(307,214,1)
(164,323,1)
(55,5,1)
(269,141,1)
(280,73,1)
(152,310,1)
(228,325,1)
(181,137,1)
(27,225,1)
(147,204,1)
(259,106,1)
(297,33,1)
(166,300,1)
(238,195,1)
(252,14,1)
(167,30,1)
(102,190,1)
(59,55,1)
(269,130,1)
(234,245,1)
(30,200,1)
(203,340,1)
(144,228,1)
(286,55,1)
(36,41,1)
(14,319,1)
(244,319,1)
(160,24,1)
(148,85,1)
(282,225,1)
(63,196,1)
(3,179,1)
(350,137,1)
(325,58,1)
(90,160,1)
(354,43,1)
(303,27,1)
(140,159,1)
(73,141,1)
(59,11,1)
(128,53,1)
(31,97,1)
(231,354,1)
(234,348,1)
(189,89,1)
(40,312,1)
(46,243,1)
(277,12,1)
(9,110,1)
(18,141,1)
(304,334,1)
(349,84,1)
(143,259,1)
(242,123,1)
(85,303,1)
(206,287,1)
(89,244,1)
(347,79,1)
(135,29,1)
(171,344,1)
(27,78,1)
(44,43,1)
(151,348,1)
(310,120,1)
(24,301,1)
(283,58,1)
(121,141,1)
(198,119,1)
(340,125,1)
(295,151,1)
(335,268,1)
(62,141,1)
(329,171,1)
(262,141,1)
(351,294,1)
(229,162,1)
(64,161,1)
(48,225,1)
(288,253,1)
(90,162,1)
(204,348,1)
(119,141,1)
(300,162,1)
(70,62,1)
(26,72,1)
(181,203,1)
(272,162,1)
(184,256,1)
(292,21,1)
(172,3,1)
(52,166,1)
(348,59,1)
(163,137,1)
(189,55,1)
(10,258,1)
(33,156,1)
(224,180,1)
(248,292,1)
(74,22,1)
(123,351,1)
(294,45,1)
(148,225,1)
(46,191,1)
(74,294,1)
(262,230,1)
(39,212,1)
(271,173,1)
(132,162,1)
(9,170,1)
(249,141,1)
(302,182,1)
(283,231,1)
(202,110,1)
(35,185,1)
(335,225,1)
(347,161,1)
(16,261,1)
(294,55,1)
(195,229,1)
(301,134,1)
(315,243,1)
(254,311,1)
(341,308,1)
(273,26,1)
(291,158,1)
(314,55,1)
(44,133,1)
(314,192,1)
(129,319,1)
(69,148,1)
(300,221,1)
(134,302,1)
(253,348,1)
(211,266,1)
(58,296,1)
(309,101,1)
(153,58,1)
(333,236,1)
(170,58,1)
(296,348,1)
(323,329,1)
(281,129,1)
(306,237,1)
(249,209,1)
(268,313,1)
(113,222,1)
(326,218,1)
(203,8,1)
(214,291,1)
(8,83,1)
(229,254,1)
(343,91,1)
(353,114,1)
(3,348,1)
(345,46,1)
(196,29,1)
(233,111,1)
(7,224,1)
(329,58,1)
(336,112,1)
(352,341,1)
(212,255,1)
(158,92,1)
(253,326,1)
(316,272,1)
(81,110,1)
(343,10,1)
(186,335,1)
(285,225,1)
(313,282,1)
(288,350,1)
(108,285,1)
(167,58,1)
(124,39,1)
(12,141,1)
(119,77,1)
(193,282,1)
(286,131,1)
(51,253,1)
(79,141,1)
(190,321,1)
(156,227,1)
(162,153,1)
(258,276,1)
(114,125,1)
(106,352,1)
(346,306,1)
(159,115,1)
(12,247,1)
(76,162,1)
(84,300,1)
(47,164,1)
(120,141,1)
(153,60,1)
(334,269,1)
(147,103,1)
(1,18,1)
(224,291,1)
(174,252,1)
(57,20,1)
(266,246,1)
(65,193,1)
(352,12,1)
(36,10,1)
(78,317,1)
(126,324,1)
(101,69,1)
(192,281,1)
(292,162,1)
(120,32,1)
(219,202,1)
(285,333,1)
(77,1,1)
(311,107,1)
(115,350,1)
(261,299,1)
(191,64,1)
(169,40,1)
(218,157,1)
(290,15,1)
(111,295,1)
(203,266,1)
(224,290,1)
(81,135,1)
(333,225,1)
(317,129,1)
(280,177,1)
(158,297,1)
(297,162,1)
(182,307,1)
(91,335,1)
(307,9,1)
(248,162,1)
(56,229,1)
(228,58,1)
(103,234,1)
(91,184,1)
(28,225,1)
(145,315,1)
(256,225,1)
(261,259,1)
(319,95,1)
(299,330,1)
(246,44,1)
(223,291,1)
(21,81,1)
(344,167,1)
(350,215,1)
(347,121,1)
(305,204,1)
(216,186,1)
(37,152,1)
(185,248,1)
(347,62,1)
(190,119,1)
(112,73,1)
(22,178,1)
(157,286,1)
(266,58,1)
(73,345,1)
(164,167,1)
(60,219,1)
(43,58,1)
(135,138,1)
(233,348,1)
(92,297,1)
(243,141,1)
(140,58,1)
(28,273,1)
(15,38,1)
(170,35,1)
(2,145,1)
(166,175,1)
(4,241,1)
(215,93,1)
(18,126,1)
(129,28,1)
(302,162,1)
(308,262,1)
(274,157,1)
(347,128,1)
(5,174,1)
(241,10,1)
(95,201,1)
(312,34,1)
(76,63,1)
(256,216,1)
(293,288,1)
(222,249,1)
(107,90,1)
(214,7,1)
(72,55,1)
(321,146,1)
(215,55,1)
(32,143,1)
(2,141,1)
(243,102,1)
(301,302,1)
(67,154,1)
(225,206,1)
(236,343,1)
(125,140,1)
(105,211,1)
(161,271,1)
(20,163,1)
(325,109,1)
(347,346,1)
(43,47,1)
(138,76,1)
(313,98,1)
(15,162,1)
(347,262,1)
(255,336,1)
(98,48,1)
(29,162,1)
(179,169,1)
(93,144,1)
(242,55,1)
(62,124,1)
(53,304,1)
(173,187,1)
(110,353,1)
(230,113,1)
(5,225,1)
(133,283,1)
(137,50,1)
(41,339,1)
(118,347,1)
(296,57,1)
(136,172,1)
(101,27,1)
(146,128,1)
(29,52,1)
(221,56,1)
(132,349,1)
(50,51,1)
(209,277,1)
(38,223,1)
(151,220,1)
(244,74,1)
(97,233,1)
(128,141,1)
(220,147,1)
(276,18,1)
(255,141,1)
(79,37,1)
(41,54,1)
(31,151,1)
(45,274,1)
(237,121,1)
(56,316,1)
(200,9,1)
(48,225,2)
(271,243,2)
(292,9,2)
(255,141,2)
(268,36,2)
(170,58,2)
(157,178,2)
(349,300,2)
(78,36,2)
(173,243,2)
(9,9,2)
(146,119,2)
(348,178,2)
(107,9,2)
(85,27,2)
(212,73,2)
(140,58,2)
(37,259,2)
(2,141,2)
(283,43,2)
(297,162,2)
(103,204,2)
(335,225,2)
(56,9,2)
(273,36,2)
(274,178,2)
(254,9,2)
(83,58,2)
(108,18,2)
(72,36,2)
(256,335,2)
(290,15,2)
(128,119,2)
(55,5,2)
(134,9,2)
(10,18,2)
(62,141,2)
(350,137,2)
(334,269,2)
(65,282,2)
(185,9,2)
(182,9,2)
(286,55,2)
(230,12,2)
(292,162,2)
(143,259,2)
(131,178,2)
(301,9,2)
(151,157,2)
(175,300,2)
(167,125,2)
(193,282,2)
(34,178,2)
(184,335,2)
(305,204,2)
(79,259,2)
(311,9,2)
(353,125,2)
(3,348,2)
(335,36,2)
(333,225,2)
(35,9,2)
(76,162,2)
(163,253,2)
(286,178,2)
(118,347,2)
(243,141,2)
(153,58,2)
(272,229,2)
(302,301,2)
(304,119,2)
(28,225,2)
(248,9,2)
(228,350,2)
(291,158,2)
(21,9,2)
(216,335,2)
(103,234,2)
(161,141,2)
(187,2,2)
(225,18,2)
(81,110,2)
(43,58,2)
(310,259,2)
(33,301,2)
(15,162,2)
(300,162,2)
(179,157,2)
(125,140,2)
(228,253,2)
(321,119,2)
(307,301,2)
(285,18,2)
(140,350,2)
(169,157,2)
(333,36,2)
(224,301,2)
(189,55,2)
(269,141,2)
(123,294,2)
(282,36,2)
(110,125,2)
(234,348,2)
(51,253,2)
(294,178,2)
(132,162,2)
(162,125,2)
(39,73,2)
(269,119,2)
(185,125,2)
(225,206,2)
(50,253,2)
(177,73,2)
(114,125,2)
(323,167,2)
(90,162,2)
(204,348,2)
(242,55,2)
(354,43,2)
(54,18,2)
(258,18,2)
(133,283,2)
(229,9,2)
(64,243,2)
(162,153,2)
(171,167,2)
(129,129,2)
(184,256,2)
(125,350,2)
(170,9,2)
(326,157,2)
(302,162,2)
(137,253,2)
(233,348,2)
(347,128,2)
(256,225,2)
(214,301,2)
(138,76,2)
(3,157,2)
(198,119,2)
(41,36,2)
(266,125,2)
(290,301,2)
(178,314,2)
(35,125,2)
(294,55,2)
(144,350,2)
(317,36,2)
(38,301,2)
(11,178,2)
(224,291,2)
(295,151,2)
(347,121,2)
(28,36,2)
(273,129,2)
(26,129,2)
(157,157,2)
(98,282,2)
(164,125,2)
(153,125,2)
(154,178,2)
(63,29,2)
(5,36,2)
(160,9,2)
(204,157,2)
(215,253,2)
(53,119,2)
(45,178,2)
(111,151,2)
(93,350,2)
(253,348,2)
(131,157,2)
(97,233,2)
(41,18,2)
(29,162,2)
(191,243,2)
(302,9,2)
(220,157,2)
(221,9,2)
(147,157,2)
(170,125,2)
(325,350,2)
(161,243,2)
(348,59,2)
(59,55,2)
(135,9,2)
(120,259,2)
(97,151,2)
(112,73,2)
(266,58,2)
(182,301,2)
(239,294,2)
(253,157,2)
(174,36,2)
(69,148,2)
(31,157,2)
(249,12,2)
(245,204,2)
(181,137,2)
(215,55,2)
(36,41,2)
(27,36,2)
(334,119,2)
(95,36,2)
(129,28,2)
(222,12,2)
(12,141,2)
(115,350,2)
(55,36,2)
(91,36,2)
(178,129,2)
(132,300,2)
(249,141,2)
(277,12,2)
(101,36,2)
(89,129,2)
(219,125,2)
(281,129,2)
(4,18,2)
(319,36,2)
(206,141,2)
(43,125,2)
(36,36,2)
(27,225,2)
(187,243,2)
(244,129,2)
(128,141,2)
(285,36,2)
(76,29,2)
(347,62,2)
(343,36,2)
(299,259,2)
(2,243,2)
(215,350,2)
(303,27,2)
(202,125,2)
(310,120,2)
(9,110,2)
(272,162,2)
(238,229,2)
(200,125,2)
(330,259,2)
(301,302,2)
(22,178,2)
(336,73,2)
(286,157,2)
(347,161,2)
(314,55,2)
(14,36,2)
(18,141,2)
(144,253,2)
(26,36,2)
(340,125,2)
(329,58,2)
(159,350,2)
(7,301,2)
(312,178,2)
(57,253,2)
(41,339,2)
(233,151,2)
(148,225,2)
(351,294,2)
(130,119,2)
(8,83,2)
(74,129,2)
(129,319,2)
(107,90,2)
(229,162,2)
(347,262,2)
(347,79,2)
(124,73,2)
(15,301,2)
(242,294,2)
(231,43,2)
(47,125,2)
(309,36,2)
(67,178,2)
(181,350,2)
(121,141,2)
(157,40,2)
(20,253,2)
(169,40,2)
(227,301,2)
(255,73,2)
(283,58,2)
(308,12,2)
(59,178,2)
(32,259,2)
(158,301,2)
(252,36,2)
(224,290,2)
(316,272,2)
(120,141,2)
(145,243,2)
(98,48,2)
(60,125,2)
(129,36,2)
(343,10,2)
(287,18,2)
(119,141,2)
(325,58,2)
(93,253,2)
(234,204,2)
(239,242,2)
(84,300,2)
(350,350,2)
(314,129,2)
(341,12,2)
(201,36,2)
(70,73,2)
(52,9,2)
(211,266,2)
(36,18,2)
(301,301,2)
(138,29,2)
(329,167,2)
(300,9,2)
(218,157,2)
(152,259,2)
(307,9,2)
(344,167,2)
(79,141,2)
(72,129,2)
(48,282,2)
(30,125,2)
(156,301,2)
(9,125,2)
(175,132,2)
(54,36,2)
(69,27,2)
(58,253,2)
(166,9,2)
(148,27,2)
(214,291,2)
(297,301,2)
(151,348,2)
(83,266,2)
(9,170,2)
(282,225,2)
(248,125,2)
(259,141,2)
(136,178,2)
(244,319,2)
(158,297,2)
(109,350,2)
(157,286,2)
(276,18,2)
(24,9,2)
(203,350,2)
(315,243,2)
(209,12,2)
(293,157,2)
(350,215,2)
(113,12,2)
(105,266,2)
(134,301,2)
(29,9,2)
(236,36,2)
(58,296,2)
(291,301,2)
(136,157,2)
(262,12,2)
(5,225,2)
(192,129,2)
(196,29,2)
(172,178,2)
(296,348,2)
(40,178,2)
(73,141,2)
(36,10,2)
(172,157,2)
(189,129,2)
(28,129,2)
(222,249,2)
(180,301,2)
(296,253,2)
(350,253,2)
(90,9,2)
(81,9,2)
(206,18,2)
(195,229,2)
(108,36,2)
(316,229,2)
(62,73,2)
(323,329,2)
(44,125,2)
(313,36,2)
(92,301,2)
(186,335,2)
(246,125,2)
(8,266,2)
(241,18,2)
(288,157,2)
(133,43,2)
(223,301,2)
(167,58,2)
(262,141,2)
(212,255,2)
-----------------------------------
(0,prc)
(1,tile)
(2,tile->tcomps)
(3,++band)
(4,tile)
(5,tcomp->rlvls)
(6,)
(7,seg)
(8,jas_free(prc->cblks)
(9,cblkno < prc->numcblks)
(10,compno = 0)
(11,bands)
(12,tile->pkthdrstream)
(13,if (!prc->cblks)
(14,rlvl)
(15,cblk->segs)
(16,state)
(17,)
(18,tile->tcomps)
(19,if (cblk->flags)
(20,band)
(21,cblk)
(22,continue;)
(23,)
(24,cblk)
(25,if (band->prcs)
(26,tcomp)
(27,tcomp->rlvls)
(28,tcomp->numrlvls)
(29,cblk->flags)
(30,incltagtree)
(31,bandno)
(32,pptstab)
(33,segs)
(34,bandno)
(35,numcblks)
(36,compno < dec->numcomps)
(37,pptstab)
(38,segs)
(39,tile)
(40,bandno = 0)
(41,dec->numcomps)
(42,)
(43,prc->numimsbstagtree)
(44,prc)
(45,bands)
(46,tile)
(47,numimsbstagtree)
(48,tcomp->data)
(49,)
(50,0)
(51,prcno)
(52,flags)
(53,cp)
(54,numcomps)
(55,rlvl = tcomp->rlvls)
(56,cblk)
(57,prcs)
(58,prc = band->prcs)
(59,rlvl->bands)
(60,cblks)
(61,if (prc->incltagtree)
(62,tile->pi)
(63,flags)
(64,0)
(65,data)
(66,if (tile->pkthdrstream)
(67,rlvl)
(68,)
(69,jas_free(tcomp->rlvls)
(70,0)
(71,)
(72,rlvlno)
(73,tile->pi)
(74,rlvlno)
(75,if (!rlvl->bands)
(76,cblk->flags)
(77,cp)
(78,rlvls)
(79,tile->pptstab)
(80,if (tile->tcomps)
(81,++cblkno)
(82,if (tcomp->tsfb)
(83,prc->cblks)
(84,cblk)
(85,rlvls)
(86,if (tile->pi)
(87,seg)
(88,cblkno)
(89,rlvl)
(90,cblk->data)
(91,compno)
(92,head)
(93,numprcs)
(94,if (tile->tcomps)
(95,0)
(96,)
(97,jas_free(band->prcs)
(98,jas_matrix_destroy(tcomp->data)
(99,)
(100,)
(101,tcomp)
(102,tcomps)
(103,jas_matrix_destroy(band->data)
(104,rlvlno)
(105,cblks)
(106,pptstab)
(107,jas_matrix_destroy(cblk->data)
(108,dec)
(109,prc)
(110,cblkno = 0)
(111,prcs)
(112,tile)
(113,tile)
(114,cblkno)
(115,prc)
(116,if (tile->pptstab)
(117,)
(118,RET)
(119,tile->cp)
(120,tile->pptstab)
(121,tile->state)
(122,)
(123,bands)
(124,pi)
(125,!prc->cblks)
(126,tcomps)
(127,)
(128,tile->cp)
(129,rlvlno < tcomp->numrlvls)
(130,cp)
(131,numbands)
(132,cblk->nulldec)
(133,jpc_tagtree_destroy(prc->numimsbstagtree)
(134,head)
(135,cblkno)
(136,rlvl)
(137,prcno = 0)
(138,jas_matrix_destroy(cblk->flags)
(139,)
(140,prc->cblks)
(141,jpc_dec_tile_t *tile)
(142,)
(143,tile)
(144,rlvl)
(145,tcomps)
(146,0)
(147,band)
(148,tcomp->rlvls)
(149,if (prc->numimsbstagtree)
(150,for (cblkno = 0, cblk = prc->cblks; cblkno < prc->numcblks; ++cblkno, ++cblk)
(151,band->prcs)
(152,tile)
(153,prc->cblks)
(154,band)
(155,)
(156,cblk)
(157,bandno < rlvl->numbands)
(158,cblk->segs.head)
(159,cblks)
(160,data)
(161,tile->tcomps)
(162,cblk = prc->cblks)
(163,prc)
(164,prc)
(165,prcno)
(166,cblk)
(167,prc->incltagtree)
(168,if (cblk->nulldec)
(169,++bandno)
(170,prc->numcblks)
(171,incltagtree)
(172,bandno)
(173,tile)
(174,rlvls)
(175,jpc_bitstream_close(cblk->nulldec)
(176,)
(177,tile->pi = 0)
(178,!rlvl->bands)
(179,band)
(180,seg)
(181,++prcno)
(182,segs)
(183,band)
(184,jpc_tsfb_destroy(tcomp->tsfb)
(185,prc)
(186,tcomp)
(187,jas_free(tile->tcomps)
(188,)
(189,++rlvl)
(190,tile)
(191,tile->tcomps = 0)
(192,bands)
(193,tcomp)
(194,)
(195,cblk)
(196,cblk)
(197,if (rlvl->bands)
(198,tile)
(199,)
(200,prc)
(201,rlvlno)
(202,cblk)
(203,prcno)
(204,band->data)
(205,if (band->prcs)
(206,tile->tcomps)
(207,for (bandno = 0, band = rlvl->bands; bandno < rlvl->numbands; ++bandno, ++band)
(208,cblk)
(209,pkthdrstream)
(210,for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;\\n\\t\\t  ++rlvlno, ++rlvl)
(211,prc)
(212,jpc_pi_destroy(tile->pi)
(213,if (tcomp->data)
(214,jpc_seg_destroy(seg)
(215,rlvl->numprcs)
(216,tsfb)
(217,)
(218,band)
(219,prc)
(220,prcs)
(221,nulldec)
(222,jas_stream_close(tile->pkthdrstream)
(223,cblk)
(224,jpc_seglist_remove(&cblk->segs, seg)
(225,tcomp = tile->tcomps)
(226,)
(227,seg)
(228,prcno)
(229,cblk->mqdec)
(230,pkthdrstream)
(231,numimsbstagtree)
(232,)
(233,band->prcs)
(234,band->data)
(235,if (band->data)
(236,tcomp)
(237,JPC_TILE_DONE)
(238,mqdec)
(239,jas_free(rlvl->bands)
(240,if (tile->cp)
(241,tcomp)
(242,rlvl->bands)
(243,tile->tcomps)
(244,++rlvlno)
(245,data)
(246,cblks)
(247,pkthdrstream)
(248,cblkno)
(249,tile->pkthdrstream)
(250,bandno)
(251,)
(252,tcomp)
(253,band->prcs)
(254,mqdec)
(255,tile->pi)
(256,tcomp->tsfb)
(257,)
(258,0)
(259,tile->pptstab)
(260,)
(261,tile)
(262,tile->pkthdrstream)
(263,)
(264,if (cblk->mqdec)
(265,)
(266,prc->cblks)
(267,)
(268,tsfb)
(269,tile->cp)
(270,if (prc->cblks)
(271,tcomps)
(272,cblk->mqdec)
(273,numrlvls)
(274,rlvl)
(275,)
(276,compno)
(277,tile)
(278,compno)
(279,while (cblk->segs.head)
(280,tile)
(281,rlvl)
(282,tcomp->data)
(283,prc->numimsbstagtree)
(284,)
(285,compno)
(286,rlvl->numbands)
(287,tcomps)
(288,band)
(289,)
(290,&cblk->segs)
(291,seg = cblk->segs.head)
(292,++cblk)
(293,data)
(294,rlvl->bands)
(295,band)
(296,band->prcs)
(297,cblk->segs)
(298,)
(299,tile->pptstab = 0)
(300,cblk->nulldec)
(301,cblk->segs.head)
(302,cblk->segs)
(303,tcomp)
(304,tile)
(305,band)
(306,tile->state = JPC_TILE_DONE)
(307,cblk)
(308,0)
(309,data)
(310,jpc_ppxstab_destroy(tile->pptstab)
(311,cblk)
(312,0)
(313,tcomp)
(314,rlvl->bands)
(315,tile)
(316,jpc_mqdec_destroy(cblk->mqdec)
(317,tcomp)
(318,for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;\\n\\t  ++compno, ++tcomp)
(319,rlvlno = 0)
(320,)
(321,tile->cp = 0)
(322,if (tcomp->rlvls)
(323,jpc_tagtree_destroy(prc->incltagtree)
(324,tile)
(325,++prc)
(326,prcs)
(327,)
(328,)
(329,prc->incltagtree)
(330,0)
(331,)
(332,tcomp)
(333,++tcomp)
(334,jpc_dec_cp_destroy(tile->cp)
(335,tcomp->tsfb)
(336,pi)
(337,for (prcno = 0, prc = band->prcs; prcno <\\n\\t\\t\\t\\t  rlvl->numprcs; ++prcno, ++prc)
(338,rlvl)
(339,jpc_dec_t *dec)
(340,continue;)
(341,tile->pkthdrstream = 0)
(342,)
(343,++compno)
(344,prc)
(345,pi)
(346,0)
(347,return 0;)
(348,band = rlvl->bands)
(349,nulldec)
(350,prcno <\\n\\t\\t\\t\\t  rlvl->numprcs)
(351,rlvl)
(352,tile)
(353,0)
(354,prc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000001000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff1a34ad6300000000ffffffffffffffff4534ad6300000000ffffffffffffffff4534ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5d00040000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
jas_image_t *jpc_decode(jas_stream_t *in, char *optstr) {
jpc_dec_importopts_t opts;
jpc_dec_t *dec;
jas_image_t *image;
dec = 0;
jpc_initluts();
if(jpc_dec_decode(dec))
goto error;
jpc_dec_destroy(dec);
return 0;
=======================
