-----label-----
0
-----code-----
char *jas_strdup(const char *s)
{
	int n;
	char *p;
	n = strlen(s) + 1;
	if (!(p = jas_malloc(n))) {
		return 0;
	}
	strcpy(p, s);
	return p;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
17,18
18,19
18,20
20,21
20,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
34,35
34,36
35,36
36,37
37,38
37,39
38,39
40,41
40,42
41,42
43,44
45,46
46,47
48,49
49,50
49,51
49,52
50,51
52,53
54,55
56,57
57,58
-----nextToken-----
2,4,5,7,9,10,14,16,19,21,22,26,30,32,33,39,42,44,47,51,53,55,58
-----computeFrom-----
24,25
24,26
27,28
27,29
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
char *jas_strdup(const char *s){	int n;	char *p;	n = strlen(s) + 1;	if (!(p = jas_malloc(n))) {		return 0;	}	strcpy(p, s);	return p;}
char
*jas_strdup(const char *s)
*
jas_strdup
const char *s
const char
*s
*
s
{	int n;	char *p;	n = strlen(s) + 1;	if (!(p = jas_malloc(n))) {		return 0;	}	strcpy(p, s);	return p;}
int n;
int n;
int
n
n
char *p;
char *p;
char
*p
*
p
n = strlen(s) + 1;
n = strlen(s) + 1
n
n
strlen(s) + 1
strlen(s)
strlen
strlen
s
s
1
if (!(p = jas_malloc(n))) {		return 0;	}
!(p = jas_malloc(n))
(p = jas_malloc(n))
p = jas_malloc(n)
p
p
jas_malloc(n)
jas_malloc
jas_malloc
n
n
{		return 0;	}
return 0;
0
strcpy(p, s);
strcpy(p, s)
strcpy
strcpy
p
p
s
s
return p;
p
p
-----joern-----
(6,19,0)
(8,22,0)
(20,9,0)
(17,20,0)
(9,3,0)
(1,5,0)
(17,0,0)
(15,22,0)
(4,17,0)
(0,17,0)
(6,0,0)
(2,13,0)
(3,9,0)
(18,9,0)
(5,0,0)
(6,22,0)
(9,20,0)
(0,12,0)
(14,6,0)
(20,22,0)
(23,13,0)
(12,0,0)
(21,22,0)
(10,6,0)
(2,5,0)
(13,24,0)
(3,19,0)
(5,22,0)
(11,3,0)
(7,20,0)
(16,0,0)
(5,1,1)
(9,3,1)
(12,0,1)
(2,13,1)
(23,12,1)
(17,20,1)
(1,6,1)
(4,16,1)
(5,0,1)
(3,11,1)
(17,4,1)
(6,0,1)
(2,5,1)
(10,14,1)
(16,20,1)
(3,19,1)
(14,12,1)
(6,19,1)
(13,23,1)
(11,7,1)
(9,18,1)
(0,17,1)
(18,3,1)
(20,9,1)
(6,10,1)
(1,12,2)
(2,5,2)
(23,12,2)
(17,20,2)
(14,12,2)
(20,9,2)
(6,19,2)
(6,0,2)
(0,17,2)
(12,0,2)
(5,0,2)
(9,3,2)
(10,12,2)
(13,12,2)
(3,19,2)
(5,12,2)
(6,12,2)
(2,13,2)
-----------------------------------
(0,p = jas_malloc(n)
(1,p)
(2,RET)
(3,strlen(s)
(4,n)
(5,return p;)
(6,strcpy(p, s)
(7,n)
(8,p)
(9,strlen(s)
(10,s)
(11,s)
(12,!(p = jas_malloc(n)
(13,return 0;)
(14,p)
(15,n)
(16,p)
(17,jas_malloc(n)
(18,1)
(19,const char *s)
(20,n = strlen(s)
(21,if (!(p = jas_malloc(n)
(22,)
(23,0)
(24,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff1a34ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5d00030000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
char *jas_strdup(const char *s) {
int n;
char *p;
n = strlen(s) + 1;
strcpy(p, s);
return p;
=======================
