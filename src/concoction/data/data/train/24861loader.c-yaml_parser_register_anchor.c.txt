-----label-----
0
-----code-----
static int
yaml_parser_register_anchor(yaml_parser_t *parser,
        int index, yaml_char_t *anchor)
{
    yaml_alias_data_t data;
    yaml_alias_data_t *alias_data;

    if (!anchor) return 1;

    data.anchor = anchor;
    data.index = index;
    data.mark = parser->document->nodes.start[index-1].start_mark;

    for (alias_data = parser->aliases.start;
            alias_data != parser->aliases.top; alias_data ++) {
        if (strcmp((char *)alias_data->anchor, (char *)anchor) == 0) {
            yaml_free(anchor);
            return yaml_parser_set_composer_error_context(parser,
                    "found duplicate anchor; first occurence",
                    alias_data->mark, "second occurence", data.mark);
        }
    }

    if (!PUSH(parser, parser->aliases, data)) {
        yaml_free(anchor);
        return 0;
    }

    return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
32,34
35,36
35,37
36,37
37,38
39,40
41,42
42,43
42,44
43,44
43,45
44,45
47,48
49,50
50,51
50,52
51,52
51,53
52,53
55,56
57,58
58,59
58,60
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
73,75
74,75
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
83,84
83,85
84,85
84,86
85,86
89,90
89,91
90,91
92,93
92,94
93,94
93,95
94,95
98,99
99,100
101,102
102,103
102,104
103,104
103,105
104,105
104,106
104,107
105,106
107,108
107,109
108,109
108,110
110,111
112,113
112,114
113,114
116,117
116,118
117,118
117,119
119,120
121,122
124,125
124,126
125,126
126,127
126,128
127,128
129,130
131,132
132,133
132,134
132,135
132,136
132,137
132,138
133,134
135,136
138,139
138,140
139,140
143,144
143,145
144,145
147,148
147,149
148,149
149,150
149,151
149,152
149,153
150,151
152,153
154,155
154,156
155,156
158,159
160,161
160,162
161,162
162,163
162,164
163,164
165,166
167,168
169,170
-----nextToken-----
2,4,7,9,10,12,14,17,19,20,25,27,31,33,34,38,40,45,46,48,53,54,56,61,62,69,70,71,72,75,76,77,82,86,87,88,91,95,96,97,100,106,109,111,114,115,118,120,122,123,128,130,134,136,137,140,141,142,145,146,151,153,156,157,159,164,166,168,170
-----computeFrom-----
42,43
42,44
50,51
50,52
58,59
58,60
73,74
73,75
80,81
80,82
89,90
89,91
103,104
103,105
-----guardedBy-----
122,130
114,140
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static intyaml_parser_register_anchor(yaml_parser_t *parser,        int index, yaml_char_t *anchor){    yaml_alias_data_t data;    yaml_alias_data_t *alias_data;    if (!anchor) return 1;    data.anchor = anchor;    data.index = index;    data.mark = parser->document->nodes.start[index-1].start_mark;    for (alias_data = parser->aliases.start;            alias_data != parser->aliases.top; alias_data ++) {        if (strcmp((char *)alias_data->anchor, (char *)anchor) == 0) {            yaml_free(anchor);            return yaml_parser_set_composer_error_context(parser,                    "found duplicate anchor; first occurence",                    alias_data->mark, "second occurence", data.mark);        }    }    if (!PUSH(parser, parser->aliases, data)) {        yaml_free(anchor);        return 0;    }    return 1;}
static int
yaml_parser_register_anchor(yaml_parser_t *parser,        int index, yaml_char_t *anchor)
yaml_parser_register_anchor
yaml_parser_t *parser
yaml_parser_t
yaml_parser_t
*parser
*
parser
int index
int
index
index
yaml_char_t *anchor
yaml_char_t
yaml_char_t
*anchor
*
anchor
{    yaml_alias_data_t data;    yaml_alias_data_t *alias_data;    if (!anchor) return 1;    data.anchor = anchor;    data.index = index;    data.mark = parser->document->nodes.start[index-1].start_mark;    for (alias_data = parser->aliases.start;            alias_data != parser->aliases.top; alias_data ++) {        if (strcmp((char *)alias_data->anchor, (char *)anchor) == 0) {            yaml_free(anchor);            return yaml_parser_set_composer_error_context(parser,                    "found duplicate anchor; first occurence",                    alias_data->mark, "second occurence", data.mark);        }    }    if (!PUSH(parser, parser->aliases, data)) {        yaml_free(anchor);        return 0;    }    return 1;}
yaml_alias_data_t data;
yaml_alias_data_t data;
yaml_alias_data_t
yaml_alias_data_t
data
data
yaml_alias_data_t *alias_data;
yaml_alias_data_t *alias_data;
yaml_alias_data_t
yaml_alias_data_t
*alias_data
*
alias_data
if (!anchor) return 1;
!anchor
anchor
anchor
return 1;
1
data.anchor = anchor;
data.anchor = anchor
data.anchor
data
data
anchor
anchor
anchor
data.index = index;
data.index = index
data.index
data
data
index
index
index
data.mark = parser->document->nodes.start[index-1].start_mark;
data.mark = parser->document->nodes.start[index-1].start_mark
data.mark
data
data
mark
parser->document->nodes.start[index-1].start_mark
parser->document->nodes.start[index-1]
parser->document->nodes.start
parser->document->nodes
parser->document
parser
parser
document
nodes
start
index-1
index
index
1
start_mark
for (alias_data = parser->aliases.start;            alias_data != parser->aliases.top; alias_data ++) {        if (strcmp((char *)alias_data->anchor, (char *)anchor) == 0) {            yaml_free(anchor);            return yaml_parser_set_composer_error_context(parser,                    "found duplicate anchor; first occurence",                    alias_data->mark, "second occurence", data.mark);        }    }
alias_data = parser->aliases.start;
alias_data = parser->aliases.start
alias_data
alias_data
parser->aliases.start
parser->aliases
parser
parser
aliases
start
alias_data != parser->aliases.top
alias_data
alias_data
parser->aliases.top
parser->aliases
parser
parser
aliases
top
alias_data ++
alias_data
alias_data
{        if (strcmp((char *)alias_data->anchor, (char *)anchor) == 0) {            yaml_free(anchor);            return yaml_parser_set_composer_error_context(parser,                    "found duplicate anchor; first occurence",                    alias_data->mark, "second occurence", data.mark);        }    }
if (strcmp((char *)alias_data->anchor, (char *)anchor) == 0) {            yaml_free(anchor);            return yaml_parser_set_composer_error_context(parser,                    "found duplicate anchor; first occurence",                    alias_data->mark, "second occurence", data.mark);        }
strcmp((char *)alias_data->anchor, (char *)anchor) == 0
strcmp((char *)alias_data->anchor, (char *)anchor)
strcmp
strcmp
(char *)alias_data->anchor
char *
char
*
*
alias_data->anchor
alias_data
alias_data
anchor
(char *)anchor
char *
char
*
*
anchor
anchor
0
{            yaml_free(anchor);            return yaml_parser_set_composer_error_context(parser,                    "found duplicate anchor; first occurence",                    alias_data->mark, "second occurence", data.mark);        }
yaml_free(anchor);
yaml_free(anchor)
yaml_free
yaml_free
anchor
anchor
return yaml_parser_set_composer_error_context(parser,                    "found duplicate anchor; first occurence",                    alias_data->mark, "second occurence", data.mark);
yaml_parser_set_composer_error_context(parser,                    "found duplicate anchor; first occurence",                    alias_data->mark, "second occurence", data.mark)
yaml_parser_set_composer_error_context
yaml_parser_set_composer_error_context
parser
parser
"found duplicate anchor; first occurence"
alias_data->mark
alias_data
alias_data
mark
"second occurence"
data.mark
data
data
mark
if (!PUSH(parser, parser->aliases, data)) {        yaml_free(anchor);        return 0;    }
!PUSH(parser, parser->aliases, data)
PUSH(parser, parser->aliases, data)
PUSH
PUSH
parser
parser
parser->aliases
parser
parser
aliases
data
data
{        yaml_free(anchor);        return 0;    }
yaml_free(anchor);
yaml_free(anchor)
yaml_free
yaml_free
anchor
anchor
return 0;
0
return 1;
1
-----joern-----
(51,13,0)
(103,73,0)
(93,15,0)
(51,5,0)
(98,5,0)
(83,14,0)
(35,0,0)
(78,14,0)
(44,132,0)
(56,51,0)
(92,99,0)
(80,39,0)
(72,130,0)
(81,41,0)
(130,65,0)
(108,15,0)
(8,122,0)
(42,20,0)
(7,39,0)
(25,81,0)
(17,99,0)
(6,76,0)
(124,71,0)
(7,102,0)
(28,55,0)
(124,99,0)
(50,70,0)
(47,82,0)
(105,115,0)
(15,54,0)
(38,84,0)
(19,109,0)
(48,36,0)
(131,99,0)
(33,51,0)
(21,81,0)
(90,52,0)
(60,129,0)
(70,97,0)
(31,102,0)
(64,14,0)
(118,20,0)
(91,73,0)
(81,132,0)
(37,49,0)
(25,107,0)
(55,13,0)
(50,92,0)
(112,45,0)
(32,99,0)
(46,130,0)
(97,70,0)
(62,41,0)
(23,99,0)
(40,32,0)
(70,50,0)
(54,15,0)
(69,85,0)
(74,90,0)
(123,2,0)
(6,40,0)
(52,90,0)
(115,121,0)
(78,99,0)
(109,5,0)
(22,99,0)
(41,82,0)
(102,7,0)
(94,35,0)
(104,78,0)
(133,36,0)
(31,0,0)
(111,37,0)
(121,115,0)
(1,99,0)
(36,0,0)
(71,124,0)
(119,59,0)
(59,84,0)
(119,99,0)
(127,121,0)
(84,59,0)
(55,129,0)
(29,31,0)
(71,85,0)
(125,35,0)
(107,41,0)
(27,98,0)
(22,90,0)
(16,37,0)
(76,6,0)
(73,52,0)
(130,5,0)
(126,59,0)
(78,106,0)
(86,88,0)
(53,98,0)
(94,99,0)
(96,50,0)
(88,0,0)
(90,22,0)
(26,7,0)
(3,99,0)
(49,17,0)
(81,13,0)
(85,36,0)
(77,84,0)
(109,19,0)
(88,97,0)
(122,106,0)
(10,44,0)
(68,108,0)
(63,6,0)
(109,30,0)
(82,98,0)
(40,6,0)
(17,2,0)
(78,41,0)
(82,41,0)
(102,31,0)
(107,14,0)
(83,45,0)
(106,22,0)
(3,39,0)
(89,83,0)
(43,132,0)
(25,55,0)
(78,132,0)
(39,3,0)
(84,0,0)
(129,20,0)
(78,13,0)
(101,106,0)
(45,83,0)
(110,76,0)
(52,73,0)
(79,115,0)
(37,5,0)
(55,14,0)
(97,88,0)
(107,129,0)
(85,71,0)
(11,99,0)
(57,71,0)
(18,99,0)
(106,122,0)
(67,35,0)
(13,51,0)
(130,46,0)
(24,97,0)
(58,65,0)
(92,50,0)
(2,17,0)
(75,109,0)
(120,31,0)
(49,37,0)
(116,44,0)
(15,5,0)
(95,2,0)
(100,122,0)
(132,32,0)
(107,13,0)
(36,85,0)
(15,108,0)
(61,70,0)
(78,129,0)
(132,44,0)
(13,94,0)
(44,5,0)
(76,0,0)
(114,19,0)
(34,76,0)
(9,13,0)
(59,119,0)
(98,82,0)
(45,5,0)
(12,88,0)
(14,83,0)
(30,109,0)
(113,102,0)
(41,92,0)
(4,49,0)
(87,107,0)
(55,41,0)
(32,40,0)
(39,7,0)
(25,78,0)
(65,130,0)
(129,124,0)
(122,5,0)
(117,45,0)
(20,129,0)
(35,94,0)
(55,132,0)
(14,3,0)
(121,11,0)
(128,40,0)
(81,129,0)
(66,52,0)
(20,5,0)
(11,121,0)
(78,49,0)
(81,14,0)
(107,132,0)
(128,6,1)
(45,5,1)
(11,121,1)
(55,132,1)
(7,102,1)
(49,4,1)
(78,41,1)
(46,130,1)
(17,2,1)
(15,5,1)
(58,72,1)
(35,67,1)
(124,71,1)
(59,126,1)
(26,102,1)
(54,15,1)
(92,50,1)
(20,5,1)
(78,13,1)
(81,21,1)
(52,73,1)
(98,27,1)
(83,89,1)
(79,30,1)
(85,69,1)
(41,62,1)
(107,132,1)
(57,85,1)
(106,101,1)
(36,0,1)
(106,122,1)
(107,87,1)
(35,0,1)
(100,11,1)
(59,84,1)
(112,32,1)
(119,59,1)
(53,3,1)
(25,78,1)
(78,14,1)
(115,105,1)
(7,26,1)
(66,73,1)
(37,16,1)
(117,112,1)
(122,8,1)
(63,76,1)
(24,88,1)
(43,44,1)
(33,124,1)
(13,9,1)
(121,115,1)
(40,128,1)
(3,39,1)
(52,66,1)
(108,68,1)
(133,129,1)
(67,125,1)
(81,13,1)
(25,55,1)
(55,13,1)
(39,7,1)
(102,113,1)
(126,84,1)
(97,88,1)
(90,74,1)
(85,36,1)
(113,31,1)
(84,38,1)
(73,91,1)
(51,5,1)
(68,93,1)
(129,20,1)
(81,129,1)
(29,14,1)
(103,106,1)
(111,22,1)
(38,77,1)
(19,114,1)
(97,24,1)
(69,36,1)
(78,132,1)
(125,13,1)
(123,49,1)
(88,0,1)
(41,82,1)
(84,0,1)
(61,97,1)
(120,29,1)
(14,83,1)
(13,51,1)
(31,0,1)
(130,5,1)
(65,58,1)
(78,129,1)
(44,5,1)
(40,6,1)
(32,40,1)
(28,46,1)
(127,115,1)
(132,43,1)
(129,60,1)
(93,46,1)
(81,14,1)
(105,79,1)
(55,28,1)
(62,82,1)
(10,116,1)
(107,14,1)
(50,70,1)
(109,19,1)
(16,111,1)
(107,41,1)
(12,86,1)
(89,45,1)
(55,14,1)
(25,81,1)
(15,108,1)
(90,52,1)
(91,103,1)
(51,56,1)
(101,122,1)
(107,13,1)
(56,33,1)
(109,5,1)
(42,92,1)
(78,49,1)
(9,51,1)
(116,119,1)
(88,12,1)
(132,44,1)
(27,53,1)
(22,90,1)
(6,63,1)
(60,20,1)
(47,98,1)
(82,47,1)
(6,76,1)
(44,10,1)
(86,41,1)
(14,64,1)
(130,65,1)
(39,80,1)
(121,127,1)
(94,35,1)
(76,0,1)
(45,117,1)
(8,100,1)
(78,104,1)
(70,61,1)
(31,120,1)
(20,118,1)
(96,70,1)
(49,37,1)
(122,5,1)
(71,57,1)
(4,37,1)
(50,96,1)
(74,52,1)
(25,107,1)
(76,34,1)
(2,95,1)
(107,129,1)
(110,132,1)
(55,129,1)
(48,133,1)
(104,17,1)
(114,75,1)
(70,97,1)
(37,5,1)
(81,41,1)
(81,132,1)
(87,54,1)
(55,41,1)
(36,48,1)
(72,94,1)
(98,5,1)
(64,83,1)
(118,42,1)
(75,54,1)
(102,31,1)
(34,110,1)
(78,106,1)
(21,30,1)
(82,98,1)
(95,123,1)
(80,7,1)
(71,85,1)
(83,45,1)
(30,109,1)
(15,108,2)
(114,54,2)
(93,46,2)
(7,102,2)
(52,73,2)
(20,5,2)
(87,54,2)
(121,30,2)
(104,30,2)
(55,13,2)
(92,50,2)
(49,30,2)
(51,5,2)
(3,39,2)
(55,14,2)
(4,30,2)
(106,122,2)
(16,30,2)
(105,30,2)
(98,5,2)
(78,14,2)
(107,132,2)
(25,55,2)
(124,71,2)
(21,30,2)
(2,30,2)
(109,5,2)
(107,13,2)
(11,30,2)
(74,30,2)
(30,54,2)
(37,30,2)
(109,54,2)
(78,13,2)
(115,30,2)
(76,0,2)
(70,97,2)
(25,78,2)
(52,30,2)
(81,129,2)
(68,46,2)
(6,76,2)
(91,30,2)
(45,5,2)
(55,132,2)
(103,30,2)
(8,30,2)
(17,30,2)
(122,5,2)
(54,46,2)
(25,107,2)
(100,30,2)
(84,0,2)
(49,37,2)
(32,40,2)
(79,30,2)
(78,49,2)
(94,35,2)
(101,30,2)
(107,129,2)
(123,30,2)
(121,115,2)
(111,30,2)
(107,14,2)
(54,15,2)
(107,54,2)
(55,46,2)
(108,46,2)
(78,106,2)
(107,41,2)
(13,51,2)
(37,5,2)
(39,7,2)
(36,0,2)
(78,129,2)
(83,45,2)
(44,5,2)
(81,14,2)
(40,6,2)
(46,130,2)
(122,30,2)
(14,83,2)
(109,19,2)
(28,46,2)
(66,30,2)
(130,5,2)
(95,30,2)
(90,30,2)
(81,132,2)
(85,36,2)
(71,85,2)
(81,41,2)
(22,30,2)
(75,54,2)
(19,54,2)
(17,2,2)
(22,90,2)
(119,59,2)
(55,129,2)
(31,0,2)
(78,30,2)
(129,20,2)
(78,132,2)
(78,41,2)
(90,52,2)
(50,70,2)
(25,81,2)
(11,121,2)
(15,46,2)
(82,98,2)
(127,30,2)
(35,0,2)
(130,65,2)
(41,82,2)
(88,0,2)
(81,30,2)
(97,88,2)
(132,44,2)
(102,31,2)
(81,13,2)
(73,30,2)
(30,109,2)
(15,5,2)
(55,41,2)
(106,30,2)
(59,84,2)
-----------------------------------
(0,yaml_event_t *first_event)
(1,if (!yaml_parser_parse(parser, &event)
(2,event.end_mark)
(3,parser->document->tag_directives.start\\n        = first_event->data.document_start.tag_directives.start)
(4,end_mark)
(5,yaml_parser_t *parser)
(6,first_event->data.document_start)
(7,first_event->data.document_start.tag_directives)
(8,document)
(9,start_mark)
(10,document)
(11,assert(event.type == YAML_DOCUMENT_END_EVENT)
(12,data)
(13,parser->document->start_mark)
(14,parser->document->tag_directives.start)
(15,yaml_parser_load_node(parser, &event)
(16,document)
(17,parser->document->end_mark = event.end_mark)
(18,if (!yaml_parser_load_node(parser, &event)
(19,&event)
(20,parser->document)
(21,0)
(22,parser->document->end_implicit = event.data.document_end.implicit)
(23,event)
(24,document_start)
(25,RET)
(26,tag_directives)
(27,document)
(28,0)
(29,first_event)
(30,!yaml_parser_parse(parser, &event)
(31,first_event->data)
(32,parser->document->version_directive\\n        = first_event->data.document_start.version_directive)
(33,parser)
(34,data)
(35,first_event->start_mark)
(36,first_event->data)
(37,parser->document)
(38,type)
(39,first_event->data.document_start.tag_directives.start)
(40,first_event->data.document_start.version_directive)
(41,parser->document->tag_directives.end)
(42,parser)
(43,version_directive)
(44,parser->document)
(45,parser->document)
(46,!yaml_parser_parse(parser, &event)
(47,tag_directives)
(48,data)
(49,parser->document->end_mark)
(50,first_event->data.document_start.tag_directives.end)
(51,parser->document)
(52,event.data.document_end)
(53,parser)
(54,!yaml_parser_load_node(parser, &event)
(55,return 0;)
(56,document)
(57,implicit)
(58,event)
(59,first_event->type == YAML_DOCUMENT_START_EVENT)
(60,start_implicit)
(61,tag_directives)
(62,end)
(63,document_start)
(64,start)
(65,&event)
(66,document_end)
(67,start_mark)
(68,event)
(69,document_start)
(70,first_event->data.document_start.tag_directives)
(71,first_event->data.document_start.implicit)
(72,parser)
(73,event.data)
(74,implicit)
(75,parser)
(76,first_event->data)
(77,first_event)
(78,return 1;)
(79,event)
(80,start)
(81,return 0;)
(82,parser->document->tag_directives)
(83,parser->document->tag_directives)
(84,first_event->type)
(85,first_event->data.document_start)
(86,first_event)
(87,0)
(88,first_event->data)
(89,tag_directives)
(90,event.data.document_end.implicit)
(91,data)
(92,parser->document->tag_directives.end\\n        = first_event->data.document_start.tag_directives.end)
(93,parser)
(94,parser->document->start_mark = first_event->start_mark)
(95,end_mark)
(96,end)
(97,first_event->data.document_start)
(98,parser->document)
(99,)
(100,parser)
(101,end_implicit)
(102,first_event->data.document_start)
(103,event)
(104,1)
(105,type)
(106,parser->document->end_implicit)
(107,return 0;)
(108,&event)
(109,yaml_parser_parse(parser, &event)
(110,first_event)
(111,parser)
(112,parser)
(113,document_start)
(114,event)
(115,event.type)
(116,parser)
(117,document)
(118,document)
(119,assert(first_event->type == YAML_DOCUMENT_START_EVENT)
(120,data)
(121,event.type == YAML_DOCUMENT_END_EVENT)
(122,parser->document)
(123,event)
(124,parser->document->start_implicit\\n        = first_event->data.document_start.implicit)
(125,first_event)
(126,YAML_DOCUMENT_START_EVENT)
(127,YAML_DOCUMENT_END_EVENT)
(128,version_directive)
(129,parser->document->start_implicit)
(130,yaml_parser_parse(parser, &event)
(131,if (!yaml_parser_parse(parser, &event)
(132,parser->document->version_directive)
(133,first_event)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
stdin-stat:0x000800000000000001000000ffffffff0100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff7f8d5a6400000000ffffffffffffffff3d8d5a6400000000ffffffffffffffff3d8d5a6400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
stdin:0xf1808080f1808080f1808080f1808080ef808021
=========trace=========
static int yaml_parser_register_anchor(yaml_parser_t *parser,         int index, yaml_char_t *anchor) {
yaml_alias_data_t data;
yaml_alias_data_t *alias_data;
if(!anchor)
return 1;
=======================
