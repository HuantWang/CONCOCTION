-----label-----
0
-----code-----
jas_stream_t *jas_stream_memopen(char *buf, int bufsize)
{
	char *new_buf;
	size_t new_bufsize;

	JAS_DBGLOG(100, ("jas_stream_memopen(%p, %d)\n", buf, bufsize));
	if (bufsize < 0) {
		jas_deprecated("negative buffer size for jas_stream_memopen");
	}
	if (buf && bufsize <= 0) {
		// This was never a valid thing to do with the old API.
		jas_eprintf("Invalid use of jas_stream_memopen detected.\n");
		jas_deprecated("A user-provided buffer for "
		  "jas_stream_memopen cannot be growable.\n");
	}
	if (bufsize <= 0) {
		new_bufsize = 0;
		new_buf = 0;
	} else {
		new_bufsize = bufsize;
		new_buf = buf;
	}
	return jas_stream_memopen2(new_buf, new_bufsize);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
9,11
12,13
12,14
14,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
17,18
18,19
18,20
20,21
20,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
30,33
31,32
34,35
35,36
35,37
35,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
46,47
47,48
48,49
48,50
49,50
52,53
52,54
53,54
53,55
54,55
56,57
56,58
57,58
60,61
60,62
61,62
62,63
62,64
63,64
66,67
67,68
67,69
68,69
71,72
71,73
71,74
72,73
72,74
73,74
76,77
76,78
77,78
78,79
78,80
79,80
82,83
83,84
83,85
84,85
87,88
87,89
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
101,104
102,103
104,105
106,107
-----nextToken-----
3,5,6,8,10,11,13,15,19,21,22,26,28,32,33,36,38,40,44,45,50,51,55,58,59,64,65,69,70,74,75,80,81,85,86,91,93,97,99,103,105,107
-----computeFrom-----
42,43
42,44
53,54
53,55
56,57
56,58
72,73
72,74
78,79
78,80
83,84
83,85
89,90
89,91
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
74,93
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
jas_stream_t *jas_stream_memopen(char *buf, int bufsize){	char *new_buf;	size_t new_bufsize;	JAS_DBGLOG(100, ("jas_stream_memopen(%p, %d)\n", buf, bufsize));	if (bufsize < 0) {		jas_deprecated("negative buffer size for jas_stream_memopen");	}	if (buf && bufsize <= 0) {		// This was never a valid thing to do with the old API.		jas_eprintf("Invalid use of jas_stream_memopen detected.\n");		jas_deprecated("A user-provided buffer for "		  "jas_stream_memopen cannot be growable.\n");	}	if (bufsize <= 0) {		new_bufsize = 0;		new_buf = 0;	} else {		new_bufsize = bufsize;		new_buf = buf;	}	return jas_stream_memopen2(new_buf, new_bufsize);}
jas_stream_t
jas_stream_t
*jas_stream_memopen(char *buf, int bufsize)
*
jas_stream_memopen
char *buf
char
*buf
*
buf
int bufsize
int
bufsize
bufsize
{	char *new_buf;	size_t new_bufsize;	JAS_DBGLOG(100, ("jas_stream_memopen(%p, %d)\n", buf, bufsize));	if (bufsize < 0) {		jas_deprecated("negative buffer size for jas_stream_memopen");	}	if (buf && bufsize <= 0) {		// This was never a valid thing to do with the old API.		jas_eprintf("Invalid use of jas_stream_memopen detected.\n");		jas_deprecated("A user-provided buffer for "		  "jas_stream_memopen cannot be growable.\n");	}	if (bufsize <= 0) {		new_bufsize = 0;		new_buf = 0;	} else {		new_bufsize = bufsize;		new_buf = buf;	}	return jas_stream_memopen2(new_buf, new_bufsize);}
char *new_buf;
char *new_buf;
char
*new_buf
*
new_buf
size_t new_bufsize;
size_t new_bufsize;
size_t
size_t
new_bufsize
new_bufsize
JAS_DBGLOG(100, ("jas_stream_memopen(%p, %d)\n", buf, bufsize));
JAS_DBGLOG(100, ("jas_stream_memopen(%p, %d)\n", buf, bufsize))
JAS_DBGLOG
JAS_DBGLOG
100
("jas_stream_memopen(%p, %d)\n", buf, bufsize)
"jas_stream_memopen(%p, %d)\n", buf, bufsize
"jas_stream_memopen(%p, %d)\n"
buf
buf
bufsize
bufsize
if (bufsize < 0) {		jas_deprecated("negative buffer size for jas_stream_memopen");	}
bufsize < 0
bufsize
bufsize
0
{		jas_deprecated("negative buffer size for jas_stream_memopen");	}
jas_deprecated("negative buffer size for jas_stream_memopen");
jas_deprecated("negative buffer size for jas_stream_memopen")
jas_deprecated
jas_deprecated
"negative buffer size for jas_stream_memopen"
if (buf && bufsize <= 0) {		// This was never a valid thing to do with the old API.		jas_eprintf("Invalid use of jas_stream_memopen detected.\n");		jas_deprecated("A user-provided buffer for "		  "jas_stream_memopen cannot be growable.\n");	}
buf && bufsize <= 0
buf
buf
bufsize <= 0
bufsize
bufsize
0
{		// This was never a valid thing to do with the old API.		jas_eprintf("Invalid use of jas_stream_memopen detected.\n");		jas_deprecated("A user-provided buffer for "		  "jas_stream_memopen cannot be growable.\n");	}
jas_eprintf("Invalid use of jas_stream_memopen detected.\n");
jas_eprintf("Invalid use of jas_stream_memopen detected.\n")
jas_eprintf
jas_eprintf
"Invalid use of jas_stream_memopen detected.\n"
jas_deprecated("A user-provided buffer for "		  "jas_stream_memopen cannot be growable.\n");
jas_deprecated("A user-provided buffer for "		  "jas_stream_memopen cannot be growable.\n")
jas_deprecated
jas_deprecated
"A user-provided buffer for "		  "jas_stream_memopen cannot be growable.\n"
if (bufsize <= 0) {		new_bufsize = 0;		new_buf = 0;	} else {		new_bufsize = bufsize;		new_buf = buf;	}
bufsize <= 0
bufsize
bufsize
0
{		new_bufsize = 0;		new_buf = 0;	}
new_bufsize = 0;
new_bufsize = 0
new_bufsize
new_bufsize
0
new_buf = 0;
new_buf = 0
new_buf
new_buf
0
{		new_bufsize = bufsize;		new_buf = buf;	}
new_bufsize = bufsize;
new_bufsize = bufsize
new_bufsize
new_bufsize
bufsize
bufsize
new_buf = buf;
new_buf = buf
new_buf
new_buf
buf
buf
return jas_stream_memopen2(new_buf, new_bufsize);
jas_stream_memopen2(new_buf, new_bufsize)
jas_stream_memopen2
jas_stream_memopen2
new_buf
new_buf
new_bufsize
new_bufsize
-----joern-----
(8,33,0)
(13,49,0)
(30,45,0)
(26,45,0)
(2,24,0)
(41,45,0)
(10,14,0)
(31,43,0)
(19,29,0)
(11,50,0)
(32,49,0)
(36,7,0)
(15,49,0)
(7,21,0)
(12,49,0)
(18,6,0)
(45,2,0)
(2,48,0)
(42,40,0)
(45,6,0)
(50,45,0)
(14,18,0)
(39,43,0)
(14,10,0)
(16,29,0)
(1,18,0)
(9,48,0)
(17,8,0)
(34,24,0)
(38,39,0)
(48,6,0)
(43,0,0)
(45,50,0)
(31,3,0)
(20,10,0)
(27,29,0)
(23,29,0)
(5,47,0)
(4,36,0)
(3,37,0)
(31,47,0)
(29,6,0)
(40,3,0)
(46,17,0)
(31,8,0)
(24,2,0)
(25,2,0)
(47,49,0)
(28,19,0)
(18,14,0)
(29,19,0)
(47,14,0)
(35,14,0)
(31,7,0)
(22,49,0)
(48,2,0)
(44,49,0)
(19,28,1)
(2,48,1)
(40,42,1)
(38,24,1)
(43,39,1)
(35,19,1)
(46,50,1)
(18,1,1)
(5,50,1)
(14,18,1)
(45,6,1)
(26,41,1)
(11,45,1)
(31,3,1)
(31,8,1)
(23,16,1)
(29,6,1)
(31,47,1)
(17,46,1)
(18,6,1)
(41,10,1)
(31,7,1)
(4,19,1)
(24,34,1)
(7,36,1)
(29,27,1)
(8,17,1)
(24,2,1)
(47,14,1)
(48,6,1)
(19,29,1)
(20,14,1)
(34,2,1)
(50,45,1)
(45,30,1)
(47,5,1)
(3,40,1)
(28,29,1)
(10,20,1)
(42,10,1)
(31,43,1)
(36,4,1)
(50,11,1)
(10,14,1)
(9,25,1)
(16,24,1)
(45,2,1)
(27,23,1)
(48,9,1)
(39,38,1)
(30,26,1)
(1,35,1)
(40,10,2)
(17,50,2)
(30,10,2)
(28,24,2)
(5,50,2)
(42,10,2)
(8,50,2)
(38,24,2)
(35,19,2)
(45,10,2)
(29,24,2)
(7,19,2)
(29,6,2)
(19,29,2)
(27,24,2)
(41,10,2)
(16,24,2)
(23,24,2)
(46,50,2)
(50,45,2)
(36,19,2)
(50,10,2)
(39,24,2)
(2,48,2)
(31,7,2)
(45,2,2)
(18,6,2)
(47,50,2)
(31,3,2)
(26,10,2)
(31,47,2)
(47,14,2)
(31,43,2)
(14,19,2)
(10,14,2)
(24,2,2)
(31,8,2)
(20,19,2)
(3,10,2)
(18,19,2)
(48,6,2)
(10,19,2)
(4,19,2)
(1,19,2)
(11,10,2)
(45,6,2)
(14,18,2)
(43,24,2)
(19,24,2)
-----------------------------------
(0,)
(1,stream)
(2,oldpos = jas_stream_tell(stream)
(3,return -1;)
(4,1)
(5,pos)
(6,jas_stream_t *stream)
(7,return -1;)
(8,return -1;)
(9,stream)
(10,(pos = jas_stream_tell(stream)
(11,0)
(12,if ((pos = jas_stream_tell(stream)
(13,pos)
(14,pos = jas_stream_tell(stream)
(15,if (jas_stream_seek(stream, oldpos, SEEK_SET)
(16,stream)
(17,-1)
(18,jas_stream_tell(stream)
(19,jas_stream_seek(stream, 0, SEEK_END)
(20,0)
(21,)
(22,if (jas_stream_seek(stream, 0, SEEK_END)
(23,0)
(24,(oldpos = jas_stream_tell(stream)
(25,oldpos)
(26,oldpos)
(27,SEEK_END)
(28,0)
(29,jas_stream_seek(stream, 0, SEEK_END)
(30,SEEK_SET)
(31,RET)
(32,oldpos)
(33,)
(34,0)
(35,pos)
(36,-1)
(37,)
(38,1)
(39,-1)
(40,-1)
(41,stream)
(42,1)
(43,return -1;)
(44,if ((oldpos = jas_stream_tell(stream)
(45,jas_stream_seek(stream, oldpos, SEEK_SET)
(46,1)
(47,return pos;)
(48,jas_stream_tell(stream)
(49,)
(50,jas_stream_seek(stream, oldpos, SEEK_SET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffe694ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff6000040000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
jas_stream_t *jas_stream_memopen(char *buf, int bufsize) {
char *new_buf;
size_t new_bufsize;
JAS_DBGLOG(100, ('jas_stream_memopen(_p, _d) ', buf, bufsize));
if(bufsize <= 0)
new_bufsize = 0;
new_buf = 0;
return jas_stream_memopen2(new_buf, new_bufsize);
=======================
