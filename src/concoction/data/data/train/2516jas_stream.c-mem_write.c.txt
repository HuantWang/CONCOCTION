-----label-----
0
-----code-----
static int mem_write(jas_stream_obj_t *obj, char *buf, int cnt)
{
	size_t n;
	int ret;
	jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;
	size_t newbufsize;
	size_t newpos;

	assert(buf);
	assert(cnt >= 0);

	JAS_DBGLOG(100, ("mem_write(%p, %p, %d)\n", obj, buf, cnt));
	newpos = m->pos_ + cnt;
	if (newpos > m->bufsize_ && m->growable_) {
		newbufsize = m->bufsize_;
		while (newbufsize < newpos) {
			//newbufsize <<= 1;
			if (!jas_safe_size_mul(newbufsize, 2, &newbufsize)) {
				JAS_DBGLOG(100, ("new buffer size would cause overflow\n"));
				return -1;
			}
		}
		JAS_DBGLOG(100, ("mem_write resizing from %d to %zu\n", m->bufsize_,
		  newbufsize));
		assert(newbufsize > 0);
		if (mem_resize(m, newbufsize)) {
			return -1;
		}
	}
	if (m->pos_ > m->len_) {
		/* The current position is beyond the end of the file, so
		  pad the file to the current position with zeros. */
		n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;
		if (n > 0) {
			memset(&m->buf_[m->len_], 0, n);
			m->len_ += n;
		}
		if (m->pos_ != m->len_) {
			/* The buffer is not big enough. */
			return 0;
		}
	}
	n = m->bufsize_ - m->pos_;
	ret = JAS_MIN(n, cnt);
	if (ret > 0) {
		memcpy(&m->buf_[m->pos_], buf, ret);
		m->pos_ += ret;
	}
	if (m->pos_ > m->len_) {
		m->len_ = m->pos_;
	}
	assert(ret == cnt);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
20,30
20,31
20,32
20,33
20,34
20,35
20,36
20,37
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
42,43
44,45
46,47
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
68,69
70,71
70,72
71,72
74,75
75,76
75,77
75,78
76,77
79,80
80,81
80,82
80,83
80,84
82,83
84,85
86,87
88,89
89,90
89,91
90,91
92,93
92,94
93,94
93,95
94,95
97,98
99,100
99,101
100,101
100,102
101,102
101,103
102,103
104,105
104,106
105,106
108,109
108,110
109,110
112,113
112,114
112,115
112,116
112,117
113,114
114,115
114,116
115,116
117,118
117,119
118,119
121,122
121,123
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
130,131
130,132
130,133
130,134
131,132
133,134
136,137
137,138
139,140
139,141
140,141
141,142
141,143
141,144
142,143
145,146
147,148
148,149
150,151
151,152
151,153
151,154
152,153
155,156
156,157
156,158
156,159
158,159
158,160
159,160
162,163
164,165
165,166
165,167
166,167
168,169
168,170
169,170
172,173
172,174
173,174
173,175
173,176
174,175
176,177
178,179
180,181
181,182
182,183
184,185
184,186
185,186
185,187
186,187
186,188
187,188
190,191
190,192
191,192
194,195
194,196
194,197
195,196
196,197
196,198
197,198
199,200
199,201
200,201
200,202
200,203
201,202
203,204
203,205
204,205
207,208
207,209
208,209
211,212
211,213
212,213
215,216
215,217
216,217
216,218
217,218
220,221
220,222
221,222
222,223
222,224
222,225
222,226
223,224
225,226
226,227
226,228
227,228
227,229
228,229
231,232
231,233
232,233
236,237
238,239
239,240
239,241
240,241
240,242
241,242
244,245
246,247
246,248
247,248
247,249
248,249
248,250
249,250
252,253
252,254
253,254
256,257
257,258
259,260
260,261
260,262
261,262
263,264
263,265
264,265
264,266
265,266
268,269
268,270
269,270
272,273
273,274
273,275
274,275
276,277
276,278
276,279
277,278
279,280
281,282
283,284
283,285
284,285
284,286
285,286
288,289
288,290
289,290
290,291
290,292
290,293
290,294
291,292
293,294
294,295
294,296
295,296
295,297
296,297
299,300
299,301
300,301
303,304
305,306
307,308
308,309
308,310
309,310
309,311
310,311
313,314
315,316
315,317
316,317
316,318
317,318
317,319
318,319
321,322
321,323
322,323
325,326
326,327
327,328
327,329
328,329
328,330
329,330
332,333
332,334
333,334
336,337
337,338
337,339
338,339
340,341
340,342
341,342
343,344
345,346
346,347
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,24,26,29,31,35,37,38,43,45,47,51,53,57,59,63,65,69,72,73,77,78,81,83,85,87,91,95,96,98,103,106,107,110,111,116,119,120,124,126,132,134,135,138,143,144,146,149,153,154,157,160,161,163,167,170,171,175,177,179,183,188,189,192,193,198,202,205,206,209,210,213,214,218,219,224,229,230,233,234,235,237,242,243,245,250,251,254,255,258,262,266,267,270,271,275,278,280,282,286,287,292,297,298,301,302,304,306,311,312,314,319,320,323,324,330,331,334,335,339,342,344,347
-----computeFrom-----
70,71
70,72
89,90
89,91
92,93
92,94
100,101
100,102
101,102
101,103
114,115
114,116
122,123
122,124
168,169
168,170
185,186
185,187
196,197
196,198
199,200
199,201
216,217
216,218
239,240
239,241
247,248
247,249
260,261
260,262
263,264
263,265
273,274
273,275
284,285
284,286
308,309
308,310
316,317
316,318
327,328
327,329
340,341
340,342
-----guardedBy-----
103,126
107,161
110,177
193,255
192,254
189,251
218,245
286,314
324,331
323,334
320,335
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int mem_write(jas_stream_obj_t *obj, char *buf, int cnt){	size_t n;	int ret;	jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;	size_t newbufsize;	size_t newpos;	assert(buf);	assert(cnt >= 0);	JAS_DBGLOG(100, ("mem_write(%p, %p, %d)\n", obj, buf, cnt));	newpos = m->pos_ + cnt;	if (newpos > m->bufsize_ && m->growable_) {		newbufsize = m->bufsize_;		while (newbufsize < newpos) {			//newbufsize <<= 1;			if (!jas_safe_size_mul(newbufsize, 2, &newbufsize)) {				JAS_DBGLOG(100, ("new buffer size would cause overflow\n"));				return -1;			}		}		JAS_DBGLOG(100, ("mem_write resizing from %d to %zu\n", m->bufsize_,		  newbufsize));		assert(newbufsize > 0);		if (mem_resize(m, newbufsize)) {			return -1;		}	}	if (m->pos_ > m->len_) {		/* The current position is beyond the end of the file, so		  pad the file to the current position with zeros. */		n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;		if (n > 0) {			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}		if (m->pos_ != m->len_) {			/* The buffer is not big enough. */			return 0;		}	}	n = m->bufsize_ - m->pos_;	ret = JAS_MIN(n, cnt);	if (ret > 0) {		memcpy(&m->buf_[m->pos_], buf, ret);		m->pos_ += ret;	}	if (m->pos_ > m->len_) {		m->len_ = m->pos_;	}	assert(ret == cnt);	return ret;}
static int
mem_write(jas_stream_obj_t *obj, char *buf, int cnt)
mem_write
jas_stream_obj_t *obj
jas_stream_obj_t
jas_stream_obj_t
*obj
*
obj
char *buf
char
*buf
*
buf
int cnt
int
cnt
cnt
{	size_t n;	int ret;	jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;	size_t newbufsize;	size_t newpos;	assert(buf);	assert(cnt >= 0);	JAS_DBGLOG(100, ("mem_write(%p, %p, %d)\n", obj, buf, cnt));	newpos = m->pos_ + cnt;	if (newpos > m->bufsize_ && m->growable_) {		newbufsize = m->bufsize_;		while (newbufsize < newpos) {			//newbufsize <<= 1;			if (!jas_safe_size_mul(newbufsize, 2, &newbufsize)) {				JAS_DBGLOG(100, ("new buffer size would cause overflow\n"));				return -1;			}		}		JAS_DBGLOG(100, ("mem_write resizing from %d to %zu\n", m->bufsize_,		  newbufsize));		assert(newbufsize > 0);		if (mem_resize(m, newbufsize)) {			return -1;		}	}	if (m->pos_ > m->len_) {		/* The current position is beyond the end of the file, so		  pad the file to the current position with zeros. */		n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;		if (n > 0) {			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}		if (m->pos_ != m->len_) {			/* The buffer is not big enough. */			return 0;		}	}	n = m->bufsize_ - m->pos_;	ret = JAS_MIN(n, cnt);	if (ret > 0) {		memcpy(&m->buf_[m->pos_], buf, ret);		m->pos_ += ret;	}	if (m->pos_ > m->len_) {		m->len_ = m->pos_;	}	assert(ret == cnt);	return ret;}
size_t n;
size_t n;
size_t
size_t
n
n
int ret;
int ret;
int
ret
ret
jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;
jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;
jas_stream_memobj_t
jas_stream_memobj_t
*m = (jas_stream_memobj_t *)obj
*
m
= (jas_stream_memobj_t *)obj
(jas_stream_memobj_t *)obj
jas_stream_memobj_t *
jas_stream_memobj_t
jas_stream_memobj_t
*
*
obj
obj
size_t newbufsize;
size_t newbufsize;
size_t
size_t
newbufsize
newbufsize
size_t newpos;
size_t newpos;
size_t
size_t
newpos
newpos
assert(buf);
assert(buf)
assert
assert
buf
buf
assert(cnt >= 0);
assert(cnt >= 0)
assert
assert
cnt >= 0
cnt
cnt
0
JAS_DBGLOG(100, ("mem_write(%p, %p, %d)\n", obj, buf, cnt));
JAS_DBGLOG(100, ("mem_write(%p, %p, %d)\n", obj, buf, cnt))
JAS_DBGLOG
JAS_DBGLOG
100
("mem_write(%p, %p, %d)\n", obj, buf, cnt)
"mem_write(%p, %p, %d)\n", obj, buf, cnt
"mem_write(%p, %p, %d)\n"
obj
obj
buf
buf
cnt
cnt
newpos = m->pos_ + cnt;
newpos = m->pos_ + cnt
newpos
newpos
m->pos_ + cnt
m->pos_
m
m
pos_
cnt
cnt
if (newpos > m->bufsize_ && m->growable_) {		newbufsize = m->bufsize_;		while (newbufsize < newpos) {			//newbufsize <<= 1;			if (!jas_safe_size_mul(newbufsize, 2, &newbufsize)) {				JAS_DBGLOG(100, ("new buffer size would cause overflow\n"));				return -1;			}		}		JAS_DBGLOG(100, ("mem_write resizing from %d to %zu\n", m->bufsize_,		  newbufsize));		assert(newbufsize > 0);		if (mem_resize(m, newbufsize)) {			return -1;		}	}
newpos > m->bufsize_ && m->growable_
newpos > m->bufsize_
newpos
newpos
m->bufsize_
m
m
bufsize_
m->growable_
m
m
growable_
{		newbufsize = m->bufsize_;		while (newbufsize < newpos) {			//newbufsize <<= 1;			if (!jas_safe_size_mul(newbufsize, 2, &newbufsize)) {				JAS_DBGLOG(100, ("new buffer size would cause overflow\n"));				return -1;			}		}		JAS_DBGLOG(100, ("mem_write resizing from %d to %zu\n", m->bufsize_,		  newbufsize));		assert(newbufsize > 0);		if (mem_resize(m, newbufsize)) {			return -1;		}	}
newbufsize = m->bufsize_;
newbufsize = m->bufsize_
newbufsize
newbufsize
m->bufsize_
m
m
bufsize_
while (newbufsize < newpos) {			//newbufsize <<= 1;			if (!jas_safe_size_mul(newbufsize, 2, &newbufsize)) {				JAS_DBGLOG(100, ("new buffer size would cause overflow\n"));				return -1;			}		}
newbufsize < newpos
newbufsize
newbufsize
newpos
newpos
{			//newbufsize <<= 1;			if (!jas_safe_size_mul(newbufsize, 2, &newbufsize)) {				JAS_DBGLOG(100, ("new buffer size would cause overflow\n"));				return -1;			}		}
if (!jas_safe_size_mul(newbufsize, 2, &newbufsize)) {				JAS_DBGLOG(100, ("new buffer size would cause overflow\n"));				return -1;			}
!jas_safe_size_mul(newbufsize, 2, &newbufsize)
jas_safe_size_mul(newbufsize, 2, &newbufsize)
jas_safe_size_mul
jas_safe_size_mul
newbufsize
newbufsize
2
&newbufsize
newbufsize
newbufsize
{				JAS_DBGLOG(100, ("new buffer size would cause overflow\n"));				return -1;			}
JAS_DBGLOG(100, ("new buffer size would cause overflow\n"));
JAS_DBGLOG(100, ("new buffer size would cause overflow\n"))
JAS_DBGLOG
JAS_DBGLOG
100
("new buffer size would cause overflow\n")
"new buffer size would cause overflow\n"
return -1;
-1
1
JAS_DBGLOG(100, ("mem_write resizing from %d to %zu\n", m->bufsize_,		  newbufsize));
JAS_DBGLOG(100, ("mem_write resizing from %d to %zu\n", m->bufsize_,		  newbufsize))
JAS_DBGLOG
JAS_DBGLOG
100
("mem_write resizing from %d to %zu\n", m->bufsize_,		  newbufsize)
"mem_write resizing from %d to %zu\n", m->bufsize_,		  newbufsize
"mem_write resizing from %d to %zu\n"
m->bufsize_
m
m
bufsize_
newbufsize
newbufsize
assert(newbufsize > 0);
assert(newbufsize > 0)
assert
assert
newbufsize > 0
newbufsize
newbufsize
0
if (mem_resize(m, newbufsize)) {			return -1;		}
mem_resize(m, newbufsize)
mem_resize
mem_resize
m
m
newbufsize
newbufsize
{			return -1;		}
return -1;
-1
1
if (m->pos_ > m->len_) {		/* The current position is beyond the end of the file, so		  pad the file to the current position with zeros. */		n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;		if (n > 0) {			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}		if (m->pos_ != m->len_) {			/* The buffer is not big enough. */			return 0;		}	}
m->pos_ > m->len_
m->pos_
m
m
pos_
m->len_
m
m
len_
{		/* The current position is beyond the end of the file, so		  pad the file to the current position with zeros. */		n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;		if (n > 0) {			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}		if (m->pos_ != m->len_) {			/* The buffer is not big enough. */			return 0;		}	}
n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;
n = JAS_MIN(m->pos_, m->bufsize_) - m->len_
n
n
JAS_MIN(m->pos_, m->bufsize_) - m->len_
JAS_MIN(m->pos_, m->bufsize_)
JAS_MIN
JAS_MIN
m->pos_
m
m
pos_
m->bufsize_
m
m
bufsize_
m->len_
m
m
len_
if (n > 0) {			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}
n > 0
n
n
0
{			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}
memset(&m->buf_[m->len_], 0, n);
memset(&m->buf_[m->len_], 0, n)
memset
memset
&m->buf_[m->len_]
m->buf_[m->len_]
m->buf_
m
m
buf_
m->len_
m
m
len_
0
n
n
m->len_ += n;
m->len_ += n
m->len_
m
m
len_
n
n
if (m->pos_ != m->len_) {			/* The buffer is not big enough. */			return 0;		}
m->pos_ != m->len_
m->pos_
m
m
pos_
m->len_
m
m
len_
{			/* The buffer is not big enough. */			return 0;		}
return 0;
0
n = m->bufsize_ - m->pos_;
n = m->bufsize_ - m->pos_
n
n
m->bufsize_ - m->pos_
m->bufsize_
m
m
bufsize_
m->pos_
m
m
pos_
ret = JAS_MIN(n, cnt);
ret = JAS_MIN(n, cnt)
ret
ret
JAS_MIN(n, cnt)
JAS_MIN
JAS_MIN
n
n
cnt
cnt
if (ret > 0) {		memcpy(&m->buf_[m->pos_], buf, ret);		m->pos_ += ret;	}
ret > 0
ret
ret
0
{		memcpy(&m->buf_[m->pos_], buf, ret);		m->pos_ += ret;	}
memcpy(&m->buf_[m->pos_], buf, ret);
memcpy(&m->buf_[m->pos_], buf, ret)
memcpy
memcpy
&m->buf_[m->pos_]
m->buf_[m->pos_]
m->buf_
m
m
buf_
m->pos_
m
m
pos_
buf
buf
ret
ret
m->pos_ += ret;
m->pos_ += ret
m->pos_
m
m
pos_
ret
ret
if (m->pos_ > m->len_) {		m->len_ = m->pos_;	}
m->pos_ > m->len_
m->pos_
m
m
pos_
m->len_
m
m
len_
{		m->len_ = m->pos_;	}
m->len_ = m->pos_;
m->len_ = m->pos_
m->len_
m
m
len_
m->pos_
m
m
pos_
assert(ret == cnt);
assert(ret == cnt)
assert
assert
ret == cnt
ret
ret
cnt
cnt
return ret;
ret
ret
-----joern-----
(8,33,0)
(13,49,0)
(30,45,0)
(26,45,0)
(2,24,0)
(41,45,0)
(10,14,0)
(31,43,0)
(19,29,0)
(11,50,0)
(32,49,0)
(36,7,0)
(15,49,0)
(7,21,0)
(12,49,0)
(18,6,0)
(45,2,0)
(2,48,0)
(42,40,0)
(45,6,0)
(50,45,0)
(14,18,0)
(39,43,0)
(14,10,0)
(16,29,0)
(1,18,0)
(9,48,0)
(17,8,0)
(34,24,0)
(38,39,0)
(48,6,0)
(43,0,0)
(45,50,0)
(31,3,0)
(20,10,0)
(27,29,0)
(23,29,0)
(5,47,0)
(4,36,0)
(3,37,0)
(31,47,0)
(29,6,0)
(40,3,0)
(46,17,0)
(31,8,0)
(24,2,0)
(25,2,0)
(47,49,0)
(28,19,0)
(18,14,0)
(29,19,0)
(47,14,0)
(35,14,0)
(31,7,0)
(22,49,0)
(48,2,0)
(44,49,0)
(19,28,1)
(2,48,1)
(40,42,1)
(38,24,1)
(43,39,1)
(35,19,1)
(46,50,1)
(18,1,1)
(5,50,1)
(14,18,1)
(45,6,1)
(26,41,1)
(11,45,1)
(31,3,1)
(31,8,1)
(23,16,1)
(29,6,1)
(31,47,1)
(17,46,1)
(18,6,1)
(41,10,1)
(31,7,1)
(4,19,1)
(24,34,1)
(7,36,1)
(29,27,1)
(8,17,1)
(24,2,1)
(47,14,1)
(48,6,1)
(19,29,1)
(20,14,1)
(34,2,1)
(50,45,1)
(45,30,1)
(47,5,1)
(3,40,1)
(28,29,1)
(10,20,1)
(42,10,1)
(31,43,1)
(36,4,1)
(50,11,1)
(10,14,1)
(9,25,1)
(16,24,1)
(45,2,1)
(27,23,1)
(48,9,1)
(39,38,1)
(30,26,1)
(1,35,1)
(40,10,2)
(17,50,2)
(30,10,2)
(28,24,2)
(5,50,2)
(42,10,2)
(8,50,2)
(38,24,2)
(35,19,2)
(45,10,2)
(29,24,2)
(7,19,2)
(29,6,2)
(19,29,2)
(27,24,2)
(41,10,2)
(16,24,2)
(23,24,2)
(46,50,2)
(50,45,2)
(36,19,2)
(50,10,2)
(39,24,2)
(2,48,2)
(31,7,2)
(45,2,2)
(18,6,2)
(47,50,2)
(31,3,2)
(26,10,2)
(31,47,2)
(47,14,2)
(31,43,2)
(14,19,2)
(10,14,2)
(24,2,2)
(31,8,2)
(20,19,2)
(3,10,2)
(18,19,2)
(48,6,2)
(10,19,2)
(4,19,2)
(1,19,2)
(11,10,2)
(45,6,2)
(14,18,2)
(43,24,2)
(19,24,2)
-----------------------------------
(0,)
(1,stream)
(2,oldpos = jas_stream_tell(stream)
(3,return -1;)
(4,1)
(5,pos)
(6,jas_stream_t *stream)
(7,return -1;)
(8,return -1;)
(9,stream)
(10,(pos = jas_stream_tell(stream)
(11,0)
(12,if ((pos = jas_stream_tell(stream)
(13,pos)
(14,pos = jas_stream_tell(stream)
(15,if (jas_stream_seek(stream, oldpos, SEEK_SET)
(16,stream)
(17,-1)
(18,jas_stream_tell(stream)
(19,jas_stream_seek(stream, 0, SEEK_END)
(20,0)
(21,)
(22,if (jas_stream_seek(stream, 0, SEEK_END)
(23,0)
(24,(oldpos = jas_stream_tell(stream)
(25,oldpos)
(26,oldpos)
(27,SEEK_END)
(28,0)
(29,jas_stream_seek(stream, 0, SEEK_END)
(30,SEEK_SET)
(31,RET)
(32,oldpos)
(33,)
(34,0)
(35,pos)
(36,-1)
(37,)
(38,1)
(39,-1)
(40,-1)
(41,stream)
(42,1)
(43,return -1;)
(44,if ((oldpos = jas_stream_tell(stream)
(45,jas_stream_seek(stream, oldpos, SEEK_SET)
(46,1)
(47,return pos;)
(48,jas_stream_tell(stream)
(49,)
(50,jas_stream_seek(stream, oldpos, SEEK_SET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000010000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffe694ad6300000000ffffffffffffffffbea0ad6300000000ffffffffffffffffbea0ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff9100030000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
static int mem_write(jas_stream_obj_t *obj, char *buf, int cnt) {
size_t n;
int ret;
jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;
size_t newbufsize;
size_t newpos;
assert(buf);
assert(cnt >= 0);
JAS_DBGLOG(100, ('mem_write(_p, _p, _d) ', obj, buf, cnt));
newpos = m->pos_ + cnt;
n = m->bufsize_ - m->pos_;
ret = JAS_MIN(n, cnt);
if(ret > 0)
memcpy(&m->buf_[m->pos_], buf, ret);
m->pos_ += ret;
if(m->pos_ > m->len_)
m->len_ = m->pos_;
assert(ret == cnt);
return ret;
=======================
