-----label-----
0
-----code-----
jas_stream_t *jas_stream_memopen2(char *buf, size_t bufsize)
{
	jas_stream_t *stream;
	jas_stream_memobj_t *obj;

	JAS_DBGLOG(100, ("jas_stream_memopen2(%p, %zu)\n", buf, bufsize));

	assert((buf && bufsize > 0) || (!buf));

	if (!(stream = jas_stream_create())) {
		return 0;
	}

	/* A stream associated with a memory buffer is always opened
	for both reading and writing in binary mode. */
	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;

	/* Since the stream data is already resident in memory, buffering
	is not necessary. */
	/* But... It still may be faster to use buffering anyways. */
	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);

	/* Select the operations for a memory stream. */
	stream->ops_ = &jas_stream_memops;

	/* Allocate memory for the underlying memory stream object. */
	if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {
		jas_stream_destroy(stream);
		return 0;
	}
	stream->obj_ = (void *) obj;

	/* Initialize a few important members of the memory stream object. */
	obj->myalloc_ = 0;
	obj->buf_ = 0;

	/* If the buffer size specified is nonpositive, then the buffer
	is allocated internally and automatically grown as needed. */
	if (!bufsize) {
		obj->bufsize_ = 1024;
		obj->growable_ = 1;
	} else {
		obj->bufsize_ = bufsize;
		obj->growable_ = 0;
	}
	if (buf) {
		obj->buf_ = JAS_CAST(unsigned char *, buf);
	} else {
		obj->buf_ = jas_malloc(obj->bufsize_);
		obj->myalloc_ = 1;
	}
	if (!obj->buf_) {
		jas_stream_close(stream);
		return 0;
	}
	JAS_DBGLOG(100, ("jas_stream_memopen2 buffer buf=%p myalloc=%d\n",
	  obj->buf_, obj->myalloc_));

	if (bufsize > 0 && buf) {
		/* If a buffer was supplied by the caller and its length is positive,
		  make the associated buffer data appear in the stream initially. */
		obj->len_ = bufsize;
	} else {
		/* The stream is initially empty. */
		obj->len_ = 0;
	}
	obj->pos_ = 0;
	
	return stream;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
9,11
12,13
12,14
13,14
15,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
33,36
34,35
37,38
38,39
38,40
38,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
49,50
50,51
50,52
51,52
53,54
53,55
54,55
57,58
58,59
59,60
61,62
61,63
62,63
63,64
64,65
64,66
65,66
67,68
68,69
70,71
71,72
73,74
74,75
74,76
75,76
75,77
76,77
79,80
79,81
80,81
80,82
81,82
83,84
85,86
87,88
88,89
88,90
88,91
88,92
88,93
89,90
91,92
93,94
97,98
98,99
98,100
99,100
99,101
100,101
103,104
104,105
106,107
106,108
107,108
108,109
109,110
109,111
110,111
112,113
112,114
113,114
115,116
116,117
116,118
117,118
120,121
120,122
121,122
122,123
122,124
123,124
125,126
127,128
129,130
130,131
130,132
131,132
131,133
132,133
135,136
135,137
136,137
136,138
138,139
140,141
142,143
143,144
143,145
144,145
144,146
145,146
149,150
150,151
150,152
151,152
151,153
152,153
156,157
156,158
156,159
157,158
158,159
160,161
160,162
161,162
162,163
162,164
163,164
163,165
164,165
168,169
169,170
169,171
170,171
170,172
171,172
175,176
175,177
176,177
177,178
177,179
178,179
178,180
179,180
182,183
184,185
185,186
185,187
186,187
186,188
187,188
191,192
191,193
191,194
192,193
194,195
195,196
196,197
196,198
197,198
198,199
198,200
199,200
199,201
200,201
203,204
203,205
204,205
206,207
206,208
207,208
210,211
211,212
211,213
212,213
212,214
213,214
217,218
217,219
218,219
219,220
219,221
220,221
223,224
223,225
224,225
225,226
225,227
226,227
228,229
230,231
232,233
233,234
233,235
233,236
234,235
237,238
238,239
238,240
238,241
240,241
240,242
241,242
244,245
244,246
245,246
248,249
248,250
248,251
249,250
249,251
250,251
250,252
251,252
254,255
256,257
257,258
258,259
258,260
259,260
259,261
260,261
263,264
265,266
266,267
267,268
267,269
268,269
268,270
269,270
273,274
274,275
274,276
275,276
275,277
276,277
280,281
281,282
-----nextToken-----
3,5,6,8,10,11,14,16,21,23,24,28,30,31,35,36,39,41,43,47,52,55,56,60,66,69,72,77,78,82,84,86,90,92,94,95,96,101,102,105,111,114,118,119,124,126,128,133,134,137,139,141,146,147,148,153,154,155,159,165,166,167,172,173,174,180,181,183,188,189,190,193,201,202,205,208,209,214,215,216,221,222,227,229,231,235,236,239,242,243,246,247,252,253,255,261,262,264,270,271,272,277,278,279,282
-----computeFrom-----
48,49
48,50
50,51
50,52
53,54
53,55
64,65
64,66
74,75
74,76
79,80
79,81
80,81
80,82
98,99
98,100
109,110
109,111
130,131
130,132
143,144
143,145
150,151
150,152
162,163
162,164
169,170
169,171
177,178
177,179
185,186
185,187
198,199
198,200
211,212
211,213
249,250
249,251
250,251
250,252
258,259
258,260
267,268
267,269
274,275
274,276
-----guardedBy-----
252,264
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
jas_stream_t *jas_stream_memopen2(char *buf, size_t bufsize){	jas_stream_t *stream;	jas_stream_memobj_t *obj;	JAS_DBGLOG(100, ("jas_stream_memopen2(%p, %zu)\n", buf, bufsize));	assert((buf && bufsize > 0) || (!buf));	if (!(stream = jas_stream_create())) {		return 0;	}	/* A stream associated with a memory buffer is always opened	for both reading and writing in binary mode. */	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;	/* Since the stream data is already resident in memory, buffering	is not necessary. */	/* But... It still may be faster to use buffering anyways. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	/* Select the operations for a memory stream. */	stream->ops_ = &jas_stream_memops;	/* Allocate memory for the underlying memory stream object. */	if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	stream->obj_ = (void *) obj;	/* Initialize a few important members of the memory stream object. */	obj->myalloc_ = 0;	obj->buf_ = 0;	/* If the buffer size specified is nonpositive, then the buffer	is allocated internally and automatically grown as needed. */	if (!bufsize) {		obj->bufsize_ = 1024;		obj->growable_ = 1;	} else {		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}	if (buf) {		obj->buf_ = JAS_CAST(unsigned char *, buf);	} else {		obj->buf_ = jas_malloc(obj->bufsize_);		obj->myalloc_ = 1;	}	if (!obj->buf_) {		jas_stream_close(stream);		return 0;	}	JAS_DBGLOG(100, ("jas_stream_memopen2 buffer buf=%p myalloc=%d\n",	  obj->buf_, obj->myalloc_));	if (bufsize > 0 && buf) {		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	} else {		/* The stream is initially empty. */		obj->len_ = 0;	}	obj->pos_ = 0;		return stream;}
jas_stream_t
jas_stream_t
*jas_stream_memopen2(char *buf, size_t bufsize)
*
jas_stream_memopen2
char *buf
char
*buf
*
buf
size_t bufsize
size_t
size_t
bufsize
bufsize
{	jas_stream_t *stream;	jas_stream_memobj_t *obj;	JAS_DBGLOG(100, ("jas_stream_memopen2(%p, %zu)\n", buf, bufsize));	assert((buf && bufsize > 0) || (!buf));	if (!(stream = jas_stream_create())) {		return 0;	}	/* A stream associated with a memory buffer is always opened	for both reading and writing in binary mode. */	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;	/* Since the stream data is already resident in memory, buffering	is not necessary. */	/* But... It still may be faster to use buffering anyways. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	/* Select the operations for a memory stream. */	stream->ops_ = &jas_stream_memops;	/* Allocate memory for the underlying memory stream object. */	if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	stream->obj_ = (void *) obj;	/* Initialize a few important members of the memory stream object. */	obj->myalloc_ = 0;	obj->buf_ = 0;	/* If the buffer size specified is nonpositive, then the buffer	is allocated internally and automatically grown as needed. */	if (!bufsize) {		obj->bufsize_ = 1024;		obj->growable_ = 1;	} else {		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}	if (buf) {		obj->buf_ = JAS_CAST(unsigned char *, buf);	} else {		obj->buf_ = jas_malloc(obj->bufsize_);		obj->myalloc_ = 1;	}	if (!obj->buf_) {		jas_stream_close(stream);		return 0;	}	JAS_DBGLOG(100, ("jas_stream_memopen2 buffer buf=%p myalloc=%d\n",	  obj->buf_, obj->myalloc_));	if (bufsize > 0 && buf) {		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	} else {		/* The stream is initially empty. */		obj->len_ = 0;	}	obj->pos_ = 0;		return stream;}
jas_stream_t *stream;
jas_stream_t *stream;
jas_stream_t
jas_stream_t
*stream
*
stream
jas_stream_memobj_t *obj;
jas_stream_memobj_t *obj;
jas_stream_memobj_t
jas_stream_memobj_t
*obj
*
obj
JAS_DBGLOG(100, ("jas_stream_memopen2(%p, %zu)\n", buf, bufsize));
JAS_DBGLOG(100, ("jas_stream_memopen2(%p, %zu)\n", buf, bufsize))
JAS_DBGLOG
JAS_DBGLOG
100
("jas_stream_memopen2(%p, %zu)\n", buf, bufsize)
"jas_stream_memopen2(%p, %zu)\n", buf, bufsize
"jas_stream_memopen2(%p, %zu)\n"
buf
buf
bufsize
bufsize
assert((buf && bufsize > 0) || (!buf));
assert((buf && bufsize > 0) || (!buf))
assert
assert
(buf && bufsize > 0) || (!buf)
(buf && bufsize > 0)
buf && bufsize > 0
buf
buf
bufsize > 0
bufsize
bufsize
0
(!buf)
!buf
buf
buf
if (!(stream = jas_stream_create())) {		return 0;	}
!(stream = jas_stream_create())
(stream = jas_stream_create())
stream = jas_stream_create()
stream
stream
jas_stream_create()
jas_stream_create
jas_stream_create
{		return 0;	}
return 0;
0
stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;
stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
stream->openmode_
stream
stream
openmode_
JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
JAS_STREAM_READ | JAS_STREAM_WRITE
JAS_STREAM_READ
JAS_STREAM_READ
JAS_STREAM_WRITE
JAS_STREAM_WRITE
JAS_STREAM_BINARY
JAS_STREAM_BINARY
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0)
jas_stream_initbuf
jas_stream_initbuf
stream
stream
JAS_STREAM_FULLBUF
JAS_STREAM_FULLBUF
0
0
stream->ops_ = &jas_stream_memops;
stream->ops_ = &jas_stream_memops
stream->ops_
stream
stream
ops_
&jas_stream_memops
jas_stream_memops
jas_stream_memops
if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {		jas_stream_destroy(stream);		return 0;	}
!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))
(obj = jas_malloc(sizeof(jas_stream_memobj_t)))
obj = jas_malloc(sizeof(jas_stream_memobj_t))
obj
obj
jas_malloc(sizeof(jas_stream_memobj_t))
jas_malloc
jas_malloc
sizeof(jas_stream_memobj_t)
jas_stream_memobj_t
jas_stream_memobj_t
jas_stream_memobj_t

{		jas_stream_destroy(stream);		return 0;	}
jas_stream_destroy(stream);
jas_stream_destroy(stream)
jas_stream_destroy
jas_stream_destroy
stream
stream
return 0;
0
stream->obj_ = (void *) obj;
stream->obj_ = (void *) obj
stream->obj_
stream
stream
obj_
(void *) obj
void *
void
*
*
obj
obj
obj->myalloc_ = 0;
obj->myalloc_ = 0
obj->myalloc_
obj
obj
myalloc_
0
obj->buf_ = 0;
obj->buf_ = 0
obj->buf_
obj
obj
buf_
0
if (!bufsize) {		obj->bufsize_ = 1024;		obj->growable_ = 1;	} else {		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}
!bufsize
bufsize
bufsize
{		obj->bufsize_ = 1024;		obj->growable_ = 1;	}
obj->bufsize_ = 1024;
obj->bufsize_ = 1024
obj->bufsize_
obj
obj
bufsize_
1024
obj->growable_ = 1;
obj->growable_ = 1
obj->growable_
obj
obj
growable_
1
{		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}
obj->bufsize_ = bufsize;
obj->bufsize_ = bufsize
obj->bufsize_
obj
obj
bufsize_
bufsize
bufsize
obj->growable_ = 0;
obj->growable_ = 0
obj->growable_
obj
obj
growable_
0
if (buf) {		obj->buf_ = JAS_CAST(unsigned char *, buf);	} else {		obj->buf_ = jas_malloc(obj->bufsize_);		obj->myalloc_ = 1;	}
buf
buf
{		obj->buf_ = JAS_CAST(unsigned char *, buf);	}
obj->buf_ = JAS_CAST(unsigned char *, buf);
{		obj->buf_ = jas_malloc(obj->bufsize_);		obj->myalloc_ = 1;	}
obj->buf_ = jas_malloc(obj->bufsize_);
obj->buf_ = jas_malloc(obj->bufsize_)
obj->buf_
obj
obj
buf_
jas_malloc(obj->bufsize_)
jas_malloc
jas_malloc
obj->bufsize_
obj
obj
bufsize_
obj->myalloc_ = 1;
obj->myalloc_ = 1
obj->myalloc_
obj
obj
myalloc_
1
if (!obj->buf_) {		jas_stream_close(stream);		return 0;	}
!obj->buf_
obj->buf_
obj
obj
buf_
{		jas_stream_close(stream);		return 0;	}
jas_stream_close(stream);
jas_stream_close(stream)
jas_stream_close
jas_stream_close
stream
stream
return 0;
0
JAS_DBGLOG(100, ("jas_stream_memopen2 buffer buf=%p myalloc=%d\n",	  obj->buf_, obj->myalloc_));
JAS_DBGLOG(100, ("jas_stream_memopen2 buffer buf=%p myalloc=%d\n",	  obj->buf_, obj->myalloc_))
JAS_DBGLOG
JAS_DBGLOG
100
("jas_stream_memopen2 buffer buf=%p myalloc=%d\n",	  obj->buf_, obj->myalloc_)
"jas_stream_memopen2 buffer buf=%p myalloc=%d\n",	  obj->buf_, obj->myalloc_
"jas_stream_memopen2 buffer buf=%p myalloc=%d\n"
obj->buf_
obj
obj
buf_
obj->myalloc_
obj
obj
myalloc_
if (bufsize > 0 && buf) {		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	} else {		/* The stream is initially empty. */		obj->len_ = 0;	}
bufsize > 0 && buf
bufsize > 0
bufsize
bufsize
0
buf
buf
{		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	}
obj->len_ = bufsize;
obj->len_ = bufsize
obj->len_
obj
obj
len_
bufsize
bufsize
{		/* The stream is initially empty. */		obj->len_ = 0;	}
obj->len_ = 0;
obj->len_ = 0
obj->len_
obj
obj
len_
0
obj->pos_ = 0;
obj->pos_ = 0
obj->pos_
obj
obj
pos_
0
return stream;
stream
stream
-----joern-----
(8,33,0)
(13,49,0)
(30,45,0)
(26,45,0)
(2,24,0)
(41,45,0)
(10,14,0)
(31,43,0)
(19,29,0)
(11,50,0)
(32,49,0)
(36,7,0)
(15,49,0)
(7,21,0)
(12,49,0)
(18,6,0)
(45,2,0)
(2,48,0)
(42,40,0)
(45,6,0)
(50,45,0)
(14,18,0)
(39,43,0)
(14,10,0)
(16,29,0)
(1,18,0)
(9,48,0)
(17,8,0)
(34,24,0)
(38,39,0)
(48,6,0)
(43,0,0)
(45,50,0)
(31,3,0)
(20,10,0)
(27,29,0)
(23,29,0)
(5,47,0)
(4,36,0)
(3,37,0)
(31,47,0)
(29,6,0)
(40,3,0)
(46,17,0)
(31,8,0)
(24,2,0)
(25,2,0)
(47,49,0)
(28,19,0)
(18,14,0)
(29,19,0)
(47,14,0)
(35,14,0)
(31,7,0)
(22,49,0)
(48,2,0)
(44,49,0)
(19,28,1)
(2,48,1)
(40,42,1)
(38,24,1)
(43,39,1)
(35,19,1)
(46,50,1)
(18,1,1)
(5,50,1)
(14,18,1)
(45,6,1)
(26,41,1)
(11,45,1)
(31,3,1)
(31,8,1)
(23,16,1)
(29,6,1)
(31,47,1)
(17,46,1)
(18,6,1)
(41,10,1)
(31,7,1)
(4,19,1)
(24,34,1)
(7,36,1)
(29,27,1)
(8,17,1)
(24,2,1)
(47,14,1)
(48,6,1)
(19,29,1)
(20,14,1)
(34,2,1)
(50,45,1)
(45,30,1)
(47,5,1)
(3,40,1)
(28,29,1)
(10,20,1)
(42,10,1)
(31,43,1)
(36,4,1)
(50,11,1)
(10,14,1)
(9,25,1)
(16,24,1)
(45,2,1)
(27,23,1)
(48,9,1)
(39,38,1)
(30,26,1)
(1,35,1)
(40,10,2)
(17,50,2)
(30,10,2)
(28,24,2)
(5,50,2)
(42,10,2)
(8,50,2)
(38,24,2)
(35,19,2)
(45,10,2)
(29,24,2)
(7,19,2)
(29,6,2)
(19,29,2)
(27,24,2)
(41,10,2)
(16,24,2)
(23,24,2)
(46,50,2)
(50,45,2)
(36,19,2)
(50,10,2)
(39,24,2)
(2,48,2)
(31,7,2)
(45,2,2)
(18,6,2)
(47,50,2)
(31,3,2)
(26,10,2)
(31,47,2)
(47,14,2)
(31,43,2)
(14,19,2)
(10,14,2)
(24,2,2)
(31,8,2)
(20,19,2)
(3,10,2)
(18,19,2)
(48,6,2)
(10,19,2)
(4,19,2)
(1,19,2)
(11,10,2)
(45,6,2)
(14,18,2)
(43,24,2)
(19,24,2)
-----------------------------------
(0,)
(1,stream)
(2,oldpos = jas_stream_tell(stream)
(3,return -1;)
(4,1)
(5,pos)
(6,jas_stream_t *stream)
(7,return -1;)
(8,return -1;)
(9,stream)
(10,(pos = jas_stream_tell(stream)
(11,0)
(12,if ((pos = jas_stream_tell(stream)
(13,pos)
(14,pos = jas_stream_tell(stream)
(15,if (jas_stream_seek(stream, oldpos, SEEK_SET)
(16,stream)
(17,-1)
(18,jas_stream_tell(stream)
(19,jas_stream_seek(stream, 0, SEEK_END)
(20,0)
(21,)
(22,if (jas_stream_seek(stream, 0, SEEK_END)
(23,0)
(24,(oldpos = jas_stream_tell(stream)
(25,oldpos)
(26,oldpos)
(27,SEEK_END)
(28,0)
(29,jas_stream_seek(stream, 0, SEEK_END)
(30,SEEK_SET)
(31,RET)
(32,oldpos)
(33,)
(34,0)
(35,pos)
(36,-1)
(37,)
(38,1)
(39,-1)
(40,-1)
(41,stream)
(42,1)
(43,return -1;)
(44,if ((oldpos = jas_stream_tell(stream)
(45,jas_stream_seek(stream, oldpos, SEEK_SET)
(46,1)
(47,return pos;)
(48,jas_stream_tell(stream)
(49,)
(50,jas_stream_seek(stream, oldpos, SEEK_SET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffe694ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5d00030000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
jas_stream_t *jas_stream_memopen2(char *buf, size_t bufsize) {
jas_stream_t *stream;
jas_stream_memobj_t *obj;
JAS_DBGLOG(100, ('jas_stream_memopen2(_p, _zu) ', buf, bufsize));
assert((buf && bufsize > 0) || (!buf));
stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);
stream->ops_ = &jas_stream_memops;
stream->obj_ = (void *) obj;
obj->myalloc_ = 0;
obj->buf_ = 0;
if(!bufsize)
obj->bufsize_ = 1024;
obj->growable_ = 1;
obj->buf_ = jas_malloc(obj->bufsize_);
obj->myalloc_ = 1;
JAS_DBGLOG(100, ('jas_stream_memopen2 buffer buf=_p myalloc=_d ', 	  obj->buf_, obj->myalloc_));
obj->len_ = 0;
obj->pos_ = 0;
return stream;
=======================
