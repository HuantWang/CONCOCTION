-----label-----
0
-----code-----
int jas_init()
{
	jas_image_fmtops_t fmtops;
	int fmtid;

	fmtid = 0;

#if !defined(EXCLUDE_MIF_SUPPORT)
	fmtops.decode = mif_decode;
	fmtops.encode = mif_encode;
	fmtops.validate = mif_validate;
	jas_image_addfmt(fmtid, "mif", "mif", "My Image Format (MIF)", &fmtops);
	++fmtid;
#endif

#if !defined(EXCLUDE_PNM_SUPPORT)
	fmtops.decode = pnm_decode;
	fmtops.encode = pnm_encode;
	fmtops.validate = pnm_validate;
	jas_image_addfmt(fmtid, "pnm", "pnm", "Portable Graymap/Pixmap (PNM)",
	  &fmtops);
	jas_image_addfmt(fmtid, "pnm", "pgm", "Portable Graymap/Pixmap (PNM)",
	  &fmtops);
	jas_image_addfmt(fmtid, "pnm", "ppm", "Portable Graymap/Pixmap (PNM)",
	  &fmtops);
	++fmtid;
#endif

#if !defined(EXCLUDE_BMP_SUPPORT)
	fmtops.decode = bmp_decode;
	fmtops.encode = bmp_encode;
	fmtops.validate = bmp_validate;
	jas_image_addfmt(fmtid, "bmp", "bmp", "Microsoft Bitmap (BMP)", &fmtops);
	++fmtid;
#endif

#if !defined(EXCLUDE_RAS_SUPPORT)
	fmtops.decode = ras_decode;
	fmtops.encode = ras_encode;
	fmtops.validate = ras_validate;
	jas_image_addfmt(fmtid, "ras", "ras", "Sun Rasterfile (RAS)", &fmtops);
	++fmtid;
#endif

#if !defined(EXCLUDE_JP2_SUPPORT)
	fmtops.decode = jp2_decode;
	fmtops.encode = jp2_encode;
	fmtops.validate = jp2_validate;
	jas_image_addfmt(fmtid, "jp2", "jp2",
	  "JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)", &fmtops);
	++fmtid;
	fmtops.decode = jpc_decode;
	fmtops.encode = jpc_encode;
	fmtops.validate = jpc_validate;
	jas_image_addfmt(fmtid, "jpc", "jpc",
	  "JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)", &fmtops);
	++fmtid;
#endif

#if !defined(EXCLUDE_JPG_SUPPORT)
	fmtops.decode = jpg_decode;
	fmtops.encode = jpg_encode;
	fmtops.validate = jpg_validate;
	jas_image_addfmt(fmtid, "jpg", "jpg", "JPEG (ISO/IEC 10918-1)", &fmtops);
	++fmtid;
#endif

#if !defined(EXCLUDE_PGX_SUPPORT)
	fmtops.decode = pgx_decode;
	fmtops.encode = pgx_encode;
	fmtops.validate = pgx_validate;
	jas_image_addfmt(fmtid, "pgx", "pgx", "JPEG-2000 VM Format (PGX)", &fmtops);
	++fmtid;
#endif

	/* We must not register the JasPer library exit handler until after
	at least one memory allocation is performed.  This is desirable
	as it ensures that the JasPer exit handler is called before the
	debug memory allocator exit handler. */
	atexit(jas_cleanup);

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
5,15
5,16
5,17
5,18
5,19
5,20
5,21
5,22
5,23
5,24
5,25
5,26
5,27
5,28
5,29
5,30
5,31
5,32
5,33
5,34
5,35
5,36
5,37
5,38
5,39
5,40
5,41
5,42
5,43
5,44
5,45
5,46
5,47
5,48
5,49
5,50
5,51
5,52
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
15,16
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
24,26
25,26
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
38,39
39,40
39,41
40,41
40,42
41,42
44,45
46,47
47,48
47,49
47,50
47,51
47,52
47,53
48,49
50,51
55,56
56,57
58,59
59,60
60,61
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
71,72
71,73
72,73
72,74
73,74
76,77
78,79
79,80
79,81
80,81
80,82
81,82
84,85
86,87
87,88
87,89
87,90
87,91
87,92
87,93
88,89
90,91
95,96
96,97
98,99
99,100
99,101
99,102
99,103
99,104
99,105
100,101
102,103
107,108
108,109
110,111
111,112
111,113
111,114
111,115
111,116
111,117
112,113
114,115
119,120
120,121
122,123
123,124
124,125
126,127
127,128
127,129
128,129
128,130
129,130
132,133
134,135
135,136
135,137
136,137
136,138
137,138
140,141
142,143
143,144
143,145
144,145
144,146
145,146
148,149
150,151
151,152
151,153
151,154
151,155
151,156
151,157
152,153
154,155
159,160
160,161
162,163
163,164
164,165
166,167
167,168
167,169
168,169
168,170
169,170
172,173
174,175
175,176
175,177
176,177
176,178
177,178
180,181
182,183
183,184
183,185
184,185
184,186
185,186
188,189
190,191
191,192
191,193
191,194
191,195
191,196
191,197
192,193
194,195
199,200
200,201
202,203
203,204
204,205
206,207
207,208
207,209
208,209
208,210
209,210
212,213
214,215
215,216
215,217
216,217
216,218
217,218
220,221
222,223
223,224
223,225
224,225
224,226
225,226
228,229
230,231
231,232
231,233
231,234
231,235
231,236
231,237
232,233
234,235
239,240
240,241
242,243
243,244
244,245
246,247
247,248
247,249
248,249
248,250
249,250
252,253
254,255
255,256
255,257
256,257
256,258
257,258
260,261
262,263
263,264
263,265
264,265
264,266
265,266
268,269
270,271
271,272
271,273
271,274
271,275
271,276
271,277
272,273
274,275
279,280
280,281
282,283
283,284
284,285
286,287
287,288
287,289
288,289
288,290
289,290
292,293
294,295
295,296
295,297
296,297
296,298
297,298
300,301
302,303
303,304
303,305
304,305
304,306
305,306
308,309
310,311
311,312
311,313
311,314
311,315
311,316
311,317
312,313
314,315
319,320
320,321
322,323
323,324
324,325
326,327
327,328
327,329
328,329
328,330
329,330
332,333
334,335
335,336
335,337
336,337
336,338
337,338
340,341
342,343
343,344
343,345
344,345
344,346
345,346
348,349
350,351
351,352
351,353
351,354
351,355
351,356
351,357
352,353
354,355
359,360
360,361
362,363
363,364
364,365
366,367
367,368
367,369
368,369
370,371
371,372
373,374
-----nextToken-----
2,4,9,11,14,16,20,21,26,27,29,34,35,37,42,43,45,49,51,52,53,54,57,61,66,67,69,74,75,77,82,83,85,89,91,92,93,94,97,101,103,104,105,106,109,113,115,116,117,118,121,125,130,131,133,138,139,141,146,147,149,153,155,156,157,158,161,165,170,171,173,178,179,181,186,187,189,193,195,196,197,198,201,205,210,211,213,218,219,221,226,227,229,233,235,236,237,238,241,245,250,251,253,258,259,261,266,267,269,273,275,276,277,278,281,285,290,291,293,298,299,301,306,307,309,313,315,316,317,318,321,325,330,331,333,338,339,341,346,347,349,353,355,356,357,358,361,365,369,372,374
-----computeFrom-----
18,19
18,20
23,24
23,25
31,32
31,33
39,40
39,41
63,64
63,65
71,72
71,73
79,80
79,81
127,128
127,129
135,136
135,137
143,144
143,145
167,168
167,169
175,176
175,177
183,184
183,185
207,208
207,209
215,216
215,217
223,224
223,225
247,248
247,249
255,256
255,257
263,264
263,265
287,288
287,289
295,296
295,297
303,304
303,305
327,328
327,329
335,336
335,337
343,344
343,345
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int jas_init(){	jas_image_fmtops_t fmtops;	int fmtid;	fmtid = 0;#if !defined(EXCLUDE_MIF_SUPPORT)	fmtops.decode = mif_decode;	fmtops.encode = mif_encode;	fmtops.validate = mif_validate;	jas_image_addfmt(fmtid, "mif", "mif", "My Image Format (MIF)", &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_PNM_SUPPORT)	fmtops.decode = pnm_decode;	fmtops.encode = pnm_encode;	fmtops.validate = pnm_validate;	jas_image_addfmt(fmtid, "pnm", "pnm", "Portable Graymap/Pixmap (PNM)",	  &fmtops);	jas_image_addfmt(fmtid, "pnm", "pgm", "Portable Graymap/Pixmap (PNM)",	  &fmtops);	jas_image_addfmt(fmtid, "pnm", "ppm", "Portable Graymap/Pixmap (PNM)",	  &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_BMP_SUPPORT)	fmtops.decode = bmp_decode;	fmtops.encode = bmp_encode;	fmtops.validate = bmp_validate;	jas_image_addfmt(fmtid, "bmp", "bmp", "Microsoft Bitmap (BMP)", &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_RAS_SUPPORT)	fmtops.decode = ras_decode;	fmtops.encode = ras_encode;	fmtops.validate = ras_validate;	jas_image_addfmt(fmtid, "ras", "ras", "Sun Rasterfile (RAS)", &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_JP2_SUPPORT)	fmtops.decode = jp2_decode;	fmtops.encode = jp2_encode;	fmtops.validate = jp2_validate;	jas_image_addfmt(fmtid, "jp2", "jp2",	  "JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)", &fmtops);	++fmtid;	fmtops.decode = jpc_decode;	fmtops.encode = jpc_encode;	fmtops.validate = jpc_validate;	jas_image_addfmt(fmtid, "jpc", "jpc",	  "JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)", &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_JPG_SUPPORT)	fmtops.decode = jpg_decode;	fmtops.encode = jpg_encode;	fmtops.validate = jpg_validate;	jas_image_addfmt(fmtid, "jpg", "jpg", "JPEG (ISO/IEC 10918-1)", &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_PGX_SUPPORT)	fmtops.decode = pgx_decode;	fmtops.encode = pgx_encode;	fmtops.validate = pgx_validate;	jas_image_addfmt(fmtid, "pgx", "pgx", "JPEG-2000 VM Format (PGX)", &fmtops);	++fmtid;#endif	/* We must not register the JasPer library exit handler until after	at least one memory allocation is performed.  This is desirable	as it ensures that the JasPer exit handler is called before the	debug memory allocator exit handler. */	atexit(jas_cleanup);	return 0;}
int
jas_init()
jas_init
{	jas_image_fmtops_t fmtops;	int fmtid;	fmtid = 0;#if !defined(EXCLUDE_MIF_SUPPORT)	fmtops.decode = mif_decode;	fmtops.encode = mif_encode;	fmtops.validate = mif_validate;	jas_image_addfmt(fmtid, "mif", "mif", "My Image Format (MIF)", &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_PNM_SUPPORT)	fmtops.decode = pnm_decode;	fmtops.encode = pnm_encode;	fmtops.validate = pnm_validate;	jas_image_addfmt(fmtid, "pnm", "pnm", "Portable Graymap/Pixmap (PNM)",	  &fmtops);	jas_image_addfmt(fmtid, "pnm", "pgm", "Portable Graymap/Pixmap (PNM)",	  &fmtops);	jas_image_addfmt(fmtid, "pnm", "ppm", "Portable Graymap/Pixmap (PNM)",	  &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_BMP_SUPPORT)	fmtops.decode = bmp_decode;	fmtops.encode = bmp_encode;	fmtops.validate = bmp_validate;	jas_image_addfmt(fmtid, "bmp", "bmp", "Microsoft Bitmap (BMP)", &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_RAS_SUPPORT)	fmtops.decode = ras_decode;	fmtops.encode = ras_encode;	fmtops.validate = ras_validate;	jas_image_addfmt(fmtid, "ras", "ras", "Sun Rasterfile (RAS)", &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_JP2_SUPPORT)	fmtops.decode = jp2_decode;	fmtops.encode = jp2_encode;	fmtops.validate = jp2_validate;	jas_image_addfmt(fmtid, "jp2", "jp2",	  "JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)", &fmtops);	++fmtid;	fmtops.decode = jpc_decode;	fmtops.encode = jpc_encode;	fmtops.validate = jpc_validate;	jas_image_addfmt(fmtid, "jpc", "jpc",	  "JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)", &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_JPG_SUPPORT)	fmtops.decode = jpg_decode;	fmtops.encode = jpg_encode;	fmtops.validate = jpg_validate;	jas_image_addfmt(fmtid, "jpg", "jpg", "JPEG (ISO/IEC 10918-1)", &fmtops);	++fmtid;#endif#if !defined(EXCLUDE_PGX_SUPPORT)	fmtops.decode = pgx_decode;	fmtops.encode = pgx_encode;	fmtops.validate = pgx_validate;	jas_image_addfmt(fmtid, "pgx", "pgx", "JPEG-2000 VM Format (PGX)", &fmtops);	++fmtid;#endif	/* We must not register the JasPer library exit handler until after	at least one memory allocation is performed.  This is desirable	as it ensures that the JasPer exit handler is called before the	debug memory allocator exit handler. */	atexit(jas_cleanup);	return 0;}
jas_image_fmtops_t fmtops;
jas_image_fmtops_t fmtops;
jas_image_fmtops_t
jas_image_fmtops_t
fmtops
fmtops
int fmtid;
int fmtid;
int
fmtid
fmtid
fmtid = 0;
fmtid = 0
fmtid
fmtid
0
fmtops.decode = mif_decode;
fmtops.decode = mif_decode
fmtops.decode
fmtops
fmtops
decode
mif_decode
mif_decode
fmtops.encode = mif_encode;
fmtops.encode = mif_encode
fmtops.encode
fmtops
fmtops
encode
mif_encode
mif_encode
fmtops.validate = mif_validate;
fmtops.validate = mif_validate
fmtops.validate
fmtops
fmtops
validate
mif_validate
mif_validate
jas_image_addfmt(fmtid, "mif", "mif", "My Image Format (MIF)", &fmtops);
jas_image_addfmt(fmtid, "mif", "mif", "My Image Format (MIF)", &fmtops)
jas_image_addfmt
jas_image_addfmt
fmtid
fmtid
"mif"
"mif"
"My Image Format (MIF)"
&fmtops
fmtops
fmtops
++fmtid;
++fmtid
fmtid
fmtid
fmtops.decode = pnm_decode;
fmtops.decode = pnm_decode
fmtops.decode
fmtops
fmtops
decode
pnm_decode
pnm_decode
fmtops.encode = pnm_encode;
fmtops.encode = pnm_encode
fmtops.encode
fmtops
fmtops
encode
pnm_encode
pnm_encode
fmtops.validate = pnm_validate;
fmtops.validate = pnm_validate
fmtops.validate
fmtops
fmtops
validate
pnm_validate
pnm_validate
jas_image_addfmt(fmtid, "pnm", "pnm", "Portable Graymap/Pixmap (PNM)",	  &fmtops);
jas_image_addfmt(fmtid, "pnm", "pnm", "Portable Graymap/Pixmap (PNM)",	  &fmtops)
jas_image_addfmt
jas_image_addfmt
fmtid
fmtid
"pnm"
"pnm"
"Portable Graymap/Pixmap (PNM)"
&fmtops
fmtops
fmtops
jas_image_addfmt(fmtid, "pnm", "pgm", "Portable Graymap/Pixmap (PNM)",	  &fmtops);
jas_image_addfmt(fmtid, "pnm", "pgm", "Portable Graymap/Pixmap (PNM)",	  &fmtops)
jas_image_addfmt
jas_image_addfmt
fmtid
fmtid
"pnm"
"pgm"
"Portable Graymap/Pixmap (PNM)"
&fmtops
fmtops
fmtops
jas_image_addfmt(fmtid, "pnm", "ppm", "Portable Graymap/Pixmap (PNM)",	  &fmtops);
jas_image_addfmt(fmtid, "pnm", "ppm", "Portable Graymap/Pixmap (PNM)",	  &fmtops)
jas_image_addfmt
jas_image_addfmt
fmtid
fmtid
"pnm"
"ppm"
"Portable Graymap/Pixmap (PNM)"
&fmtops
fmtops
fmtops
++fmtid;
++fmtid
fmtid
fmtid
fmtops.decode = bmp_decode;
fmtops.decode = bmp_decode
fmtops.decode
fmtops
fmtops
decode
bmp_decode
bmp_decode
fmtops.encode = bmp_encode;
fmtops.encode = bmp_encode
fmtops.encode
fmtops
fmtops
encode
bmp_encode
bmp_encode
fmtops.validate = bmp_validate;
fmtops.validate = bmp_validate
fmtops.validate
fmtops
fmtops
validate
bmp_validate
bmp_validate
jas_image_addfmt(fmtid, "bmp", "bmp", "Microsoft Bitmap (BMP)", &fmtops);
jas_image_addfmt(fmtid, "bmp", "bmp", "Microsoft Bitmap (BMP)", &fmtops)
jas_image_addfmt
jas_image_addfmt
fmtid
fmtid
"bmp"
"bmp"
"Microsoft Bitmap (BMP)"
&fmtops
fmtops
fmtops
++fmtid;
++fmtid
fmtid
fmtid
fmtops.decode = ras_decode;
fmtops.decode = ras_decode
fmtops.decode
fmtops
fmtops
decode
ras_decode
ras_decode
fmtops.encode = ras_encode;
fmtops.encode = ras_encode
fmtops.encode
fmtops
fmtops
encode
ras_encode
ras_encode
fmtops.validate = ras_validate;
fmtops.validate = ras_validate
fmtops.validate
fmtops
fmtops
validate
ras_validate
ras_validate
jas_image_addfmt(fmtid, "ras", "ras", "Sun Rasterfile (RAS)", &fmtops);
jas_image_addfmt(fmtid, "ras", "ras", "Sun Rasterfile (RAS)", &fmtops)
jas_image_addfmt
jas_image_addfmt
fmtid
fmtid
"ras"
"ras"
"Sun Rasterfile (RAS)"
&fmtops
fmtops
fmtops
++fmtid;
++fmtid
fmtid
fmtid
fmtops.decode = jp2_decode;
fmtops.decode = jp2_decode
fmtops.decode
fmtops
fmtops
decode
jp2_decode
jp2_decode
fmtops.encode = jp2_encode;
fmtops.encode = jp2_encode
fmtops.encode
fmtops
fmtops
encode
jp2_encode
jp2_encode
fmtops.validate = jp2_validate;
fmtops.validate = jp2_validate
fmtops.validate
fmtops
fmtops
validate
jp2_validate
jp2_validate
jas_image_addfmt(fmtid, "jp2", "jp2",	  "JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)", &fmtops);
jas_image_addfmt(fmtid, "jp2", "jp2",	  "JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)", &fmtops)
jas_image_addfmt
jas_image_addfmt
fmtid
fmtid
"jp2"
"jp2"
"JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)"
&fmtops
fmtops
fmtops
++fmtid;
++fmtid
fmtid
fmtid
fmtops.decode = jpc_decode;
fmtops.decode = jpc_decode
fmtops.decode
fmtops
fmtops
decode
jpc_decode
jpc_decode
fmtops.encode = jpc_encode;
fmtops.encode = jpc_encode
fmtops.encode
fmtops
fmtops
encode
jpc_encode
jpc_encode
fmtops.validate = jpc_validate;
fmtops.validate = jpc_validate
fmtops.validate
fmtops
fmtops
validate
jpc_validate
jpc_validate
jas_image_addfmt(fmtid, "jpc", "jpc",	  "JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)", &fmtops);
jas_image_addfmt(fmtid, "jpc", "jpc",	  "JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)", &fmtops)
jas_image_addfmt
jas_image_addfmt
fmtid
fmtid
"jpc"
"jpc"
"JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)"
&fmtops
fmtops
fmtops
++fmtid;
++fmtid
fmtid
fmtid
fmtops.decode = jpg_decode;
fmtops.decode = jpg_decode
fmtops.decode
fmtops
fmtops
decode
jpg_decode
jpg_decode
fmtops.encode = jpg_encode;
fmtops.encode = jpg_encode
fmtops.encode
fmtops
fmtops
encode
jpg_encode
jpg_encode
fmtops.validate = jpg_validate;
fmtops.validate = jpg_validate
fmtops.validate
fmtops
fmtops
validate
jpg_validate
jpg_validate
jas_image_addfmt(fmtid, "jpg", "jpg", "JPEG (ISO/IEC 10918-1)", &fmtops);
jas_image_addfmt(fmtid, "jpg", "jpg", "JPEG (ISO/IEC 10918-1)", &fmtops)
jas_image_addfmt
jas_image_addfmt
fmtid
fmtid
"jpg"
"jpg"
"JPEG (ISO/IEC 10918-1)"
&fmtops
fmtops
fmtops
++fmtid;
++fmtid
fmtid
fmtid
fmtops.decode = pgx_decode;
fmtops.decode = pgx_decode
fmtops.decode
fmtops
fmtops
decode
pgx_decode
pgx_decode
fmtops.encode = pgx_encode;
fmtops.encode = pgx_encode
fmtops.encode
fmtops
fmtops
encode
pgx_encode
pgx_encode
fmtops.validate = pgx_validate;
fmtops.validate = pgx_validate
fmtops.validate
fmtops
fmtops
validate
pgx_validate
pgx_validate
jas_image_addfmt(fmtid, "pgx", "pgx", "JPEG-2000 VM Format (PGX)", &fmtops);
jas_image_addfmt(fmtid, "pgx", "pgx", "JPEG-2000 VM Format (PGX)", &fmtops)
jas_image_addfmt
jas_image_addfmt
fmtid
fmtid
"pgx"
"pgx"
"JPEG-2000 VM Format (PGX)"
&fmtops
fmtops
fmtops
++fmtid;
++fmtid
fmtid
fmtid
atexit(jas_cleanup);
atexit(jas_cleanup);
atexit
atexit
(jas_cleanup)
jas_cleanup
jas_cleanup
return 0;
0
-----joern-----
(2,1,0)
(0,2,1)
-----------------------------------
(0,RET)
(1,)
(2,jas_image_clearfmts()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000ffffffff0100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff1a34ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
arg03:0x0100ffffff
arg02:0x2d66ff
arg01:0x2d46ff
arg00:0x2d64ff
=========trace=========
int jas_init() {
jas_image_fmtops_t fmtops;
int fmtid;
fmtid = 0;
fmtops.decode = mif_decode;
fmtops.encode = mif_encode;
fmtops.validate = mif_validate;
jas_image_addfmt(fmtid, 'mif', 'mif', 'My Image Format (MIF)', &fmtops);
++fmtid;
fmtops.decode = pnm_decode;
fmtops.encode = pnm_encode;
fmtops.validate = pnm_validate;
jas_image_addfmt(fmtid, 'pnm', 'pnm', 'Portable Graymap/Pixmap (PNM)', 	  &fmtops);
jas_image_addfmt(fmtid, 'pnm', 'pgm', 'Portable Graymap/Pixmap (PNM)', 	  &fmtops);
jas_image_addfmt(fmtid, 'pnm', 'ppm', 'Portable Graymap/Pixmap (PNM)', 	  &fmtops);
++fmtid;
fmtops.decode = bmp_decode;
fmtops.encode = bmp_encode;
fmtops.validate = bmp_validate;
jas_image_addfmt(fmtid, 'bmp', 'bmp', 'Microsoft Bitmap (BMP)', &fmtops);
++fmtid;
fmtops.decode = ras_decode;
fmtops.encode = ras_encode;
fmtops.validate = ras_validate;
jas_image_addfmt(fmtid, 'ras', 'ras', 'Sun Rasterfile (RAS)', &fmtops);
++fmtid;
fmtops.decode = jp2_decode;
fmtops.encode = jp2_encode;
fmtops.validate = jp2_validate;
jas_image_addfmt(fmtid, 'jp2', 'jp2', 	  'JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)', &fmtops);
++fmtid;
fmtops.decode = jpc_decode;
fmtops.encode = jpc_encode;
fmtops.validate = jpc_validate;
jas_image_addfmt(fmtid, 'jpc', 'jpc', 	  'JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)', &fmtops);
++fmtid;
fmtops.decode = jpg_decode;
fmtops.encode = jpg_encode;
fmtops.validate = jpg_validate;
jas_image_addfmt(fmtid, 'jpg', 'jpg', 'JPEG (ISO/IEC 10918-1)', &fmtops);
++fmtid;
fmtops.decode = pgx_decode;
fmtops.encode = pgx_encode;
fmtops.validate = pgx_validate;
jas_image_addfmt(fmtid, 'pgx', 'pgx', 'JPEG-2000 VM Format (PGX)', &fmtops);
++fmtid;
atexit(jas_cleanup);
return 0;
=======================
