-----label-----
0
-----code-----
int bmp_validate(jas_stream_t *in)
{
	int n;
	int i;
	jas_uchar buf[2];

	assert(JAS_STREAM_MAXPUTBACK >= 2);

	/* Read the first two characters that constitute the signature. */
	if ((n = jas_stream_read(in, (char *) buf, 2)) < 0) {
		return -1;
	}
	/* Put the characters read back onto the stream. */
	for (i = n - 1; i >= 0; --i) {
		if (jas_stream_ungetc(in, buf[i]) == EOF) {
			return -1;
		}
	}
	/* Did we read enough characters? */
	if (n < 2) {
		return -1;
	}
	/* Is the signature correct for the BMP format? */
	if (buf[0] == (BMP_MAGIC & 0xff) && buf[1] == (BMP_MAGIC >> 8)) {
		return 0;
	}
	return -1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
15,16
17,18
18,19
18,20
20,21
22,23
23,24
23,25
24,25
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
44,47
44,48
45,46
47,48
49,50
49,51
50,51
50,52
52,53
54,55
58,59
59,60
60,61
62,63
62,64
62,65
62,66
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
72,73
75,76
76,77
78,79
79,80
79,81
80,81
80,82
81,82
81,83
81,84
82,83
84,85
86,87
86,88
87,88
89,90
91,92
93,94
94,95
95,96
97,98
97,99
98,99
98,100
99,100
102,103
103,104
104,105
106,107
106,108
107,108
107,109
108,109
108,110
109,110
109,111
110,111
113,114
114,115
114,116
115,116
118,119
118,120
119,120
119,121
120,121
123,124
124,125
124,126
125,126
128,129
129,130
131,132
132,133
-----nextToken-----
2,4,7,9,10,14,16,19,21,25,27,29,33,36,37,43,46,48,51,53,55,56,57,61,66,69,70,73,74,77,83,85,88,90,92,96,100,101,105,111,112,116,117,121,122,126,127,130,133
-----computeFrom-----
34,35
34,36
39,40
39,41
41,42
41,43
64,65
64,66
67,68
67,69
71,72
71,73
80,81
80,82
98,99
98,100
107,108
107,109
108,109
108,110
114,115
114,116
118,119
118,120
124,125
124,126
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
int bmp_validate(jas_stream_t *in){	int n;	int i;	jas_uchar buf[2];	assert(JAS_STREAM_MAXPUTBACK >= 2);	/* Read the first two characters that constitute the signature. */	if ((n = jas_stream_read(in, (char *) buf, 2)) < 0) {		return -1;	}	/* Put the characters read back onto the stream. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough characters? */	if (n < 2) {		return -1;	}	/* Is the signature correct for the BMP format? */	if (buf[0] == (BMP_MAGIC & 0xff) && buf[1] == (BMP_MAGIC >> 8)) {		return 0;	}	return -1;}
int
bmp_validate(jas_stream_t *in)
bmp_validate
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	int n;	int i;	jas_uchar buf[2];	assert(JAS_STREAM_MAXPUTBACK >= 2);	/* Read the first two characters that constitute the signature. */	if ((n = jas_stream_read(in, (char *) buf, 2)) < 0) {		return -1;	}	/* Put the characters read back onto the stream. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough characters? */	if (n < 2) {		return -1;	}	/* Is the signature correct for the BMP format? */	if (buf[0] == (BMP_MAGIC & 0xff) && buf[1] == (BMP_MAGIC >> 8)) {		return 0;	}	return -1;}
int n;
int n;
int
n
n
int i;
int i;
int
i
i
jas_uchar buf[2];
jas_uchar buf[2];
jas_uchar
jas_uchar
buf[2]
buf
[2]
2
assert(JAS_STREAM_MAXPUTBACK >= 2);
assert(JAS_STREAM_MAXPUTBACK >= 2)
assert
assert
JAS_STREAM_MAXPUTBACK >= 2
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
2
if ((n = jas_stream_read(in, (char *) buf, 2)) < 0) {		return -1;	}
(n = jas_stream_read(in, (char *) buf, 2)) < 0
(n = jas_stream_read(in, (char *) buf, 2))
n = jas_stream_read(in, (char *) buf, 2)
n
n
jas_stream_read(in, (char *) buf, 2)
jas_stream_read
jas_stream_read
in
in
(char *) buf
char *
char
*
*
buf
buf
2
0
{		return -1;	}
return -1;
-1
1
for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
i = n - 1;
i = n - 1
i
i
n - 1
n
n
1
i >= 0
i
i
0
--i
i
i
{		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}
jas_stream_ungetc(in, buf[i]) == EOF
jas_stream_ungetc(in, buf[i])
jas_stream_ungetc
jas_stream_ungetc
in
in
buf[i]
buf
buf
i
i
EOF
EOF
{			return -1;		}
return -1;
-1
1
if (n < 2) {		return -1;	}
n < 2
n
n
2
{		return -1;	}
return -1;
-1
1
if (buf[0] == (BMP_MAGIC & 0xff) && buf[1] == (BMP_MAGIC >> 8)) {		return 0;	}
buf[0] == (BMP_MAGIC & 0xff) && buf[1] == (BMP_MAGIC >> 8)
buf[0] == (BMP_MAGIC & 0xff)
buf[0]
buf
buf
0
(BMP_MAGIC & 0xff)
BMP_MAGIC & 0xff
BMP_MAGIC
BMP_MAGIC
0xff
buf[1] == (BMP_MAGIC >> 8)
buf[1]
buf
buf
1
(BMP_MAGIC >> 8)
BMP_MAGIC >> 8
BMP_MAGIC
BMP_MAGIC
8
{		return 0;	}
return 0;
0
return -1;
-1
1
-----joern-----
(15,68,0)
(69,24,0)
(11,76,0)
(37,57,0)
(57,37,0)
(51,21,0)
(65,21,0)
(66,57,0)
(72,36,0)
(2,78,0)
(20,21,0)
(31,0,0)
(46,60,0)
(62,50,0)
(10,38,0)
(67,23,0)
(50,33,0)
(10,60,0)
(42,59,0)
(71,50,0)
(13,50,0)
(38,12,0)
(76,59,0)
(49,73,0)
(0,64,0)
(6,18,0)
(33,50,0)
(48,59,0)
(9,46,0)
(67,50,0)
(32,69,0)
(54,38,0)
(63,21,0)
(55,7,0)
(41,67,0)
(43,57,0)
(77,23,0)
(52,15,0)
(73,27,0)
(69,32,0)
(3,33,0)
(70,7,0)
(14,21,0)
(26,18,0)
(8,67,0)
(64,21,0)
(23,40,0)
(75,71,0)
(28,22,0)
(10,73,0)
(56,22,0)
(1,21,0)
(45,62,0)
(58,32,0)
(17,72,0)
(15,59,0)
(22,37,0)
(74,4,0)
(19,5,0)
(10,51,0)
(37,22,0)
(59,40,0)
(23,67,0)
(7,69,0)
(10,36,0)
(44,54,0)
(68,15,0)
(24,37,0)
(16,0,0)
(24,69,0)
(59,76,0)
(30,33,0)
(60,47,0)
(76,5,0)
(39,32,0)
(33,76,0)
(35,62,0)
(23,34,0)
(37,24,0)
(36,61,0)
(29,21,0)
(69,7,0)
(59,15,0)
(78,51,0)
(64,0,0)
(25,34,0)
(53,21,0)
(5,76,0)
(34,23,0)
(18,76,0)
(70,32,1)
(5,19,1)
(62,35,1)
(58,39,1)
(59,40,1)
(35,45,1)
(34,25,1)
(23,67,1)
(10,38,1)
(57,43,1)
(15,52,1)
(78,2,1)
(15,68,1)
(42,15,1)
(8,41,1)
(73,49,1)
(72,17,1)
(51,78,1)
(45,50,1)
(5,76,1)
(10,36,1)
(26,62,1)
(69,32,1)
(0,16,1)
(23,40,1)
(52,48,1)
(9,34,1)
(69,7,1)
(67,8,1)
(71,50,1)
(76,59,1)
(39,18,1)
(18,6,1)
(54,44,1)
(60,46,1)
(33,30,1)
(33,76,1)
(24,37,1)
(49,24,1)
(44,18,1)
(75,34,1)
(10,51,1)
(59,15,1)
(48,11,1)
(7,55,1)
(30,3,1)
(41,77,1)
(6,26,1)
(38,54,1)
(28,56,1)
(25,23,1)
(24,69,1)
(34,23,1)
(37,22,1)
(55,70,1)
(56,57,1)
(59,42,1)
(36,72,1)
(67,50,1)
(11,64,1)
(37,57,1)
(10,60,1)
(62,50,1)
(10,73,1)
(16,31,1)
(18,76,1)
(17,5,1)
(3,13,1)
(71,75,1)
(46,9,1)
(77,62,1)
(50,33,1)
(43,66,1)
(2,24,1)
(22,28,1)
(64,0,1)
(66,69,1)
(19,76,1)
(13,5,1)
(45,71,1)
(32,58,1)
(37,22,2)
(22,69,2)
(2,24,2)
(36,5,2)
(75,34,2)
(69,32,2)
(10,73,2)
(66,69,2)
(37,69,2)
(59,15,2)
(62,5,2)
(78,24,2)
(46,34,2)
(34,23,2)
(76,59,2)
(23,67,2)
(10,60,2)
(41,62,2)
(32,18,2)
(24,37,2)
(45,5,2)
(3,5,2)
(71,50,2)
(18,62,2)
(55,18,2)
(72,5,2)
(62,50,2)
(62,34,2)
(18,76,2)
(25,62,2)
(44,18,2)
(34,62,2)
(24,18,2)
(59,40,2)
(23,40,2)
(57,69,2)
(10,51,2)
(51,24,2)
(30,5,2)
(67,62,2)
(54,18,2)
(7,18,2)
(70,18,2)
(67,50,2)
(38,18,2)
(15,68,2)
(60,34,2)
(9,34,2)
(58,18,2)
(23,62,2)
(49,24,2)
(33,76,2)
(6,62,2)
(50,33,2)
(26,62,2)
(50,5,2)
(64,0,2)
(71,34,2)
(8,62,2)
(13,5,2)
(56,69,2)
(77,62,2)
(10,38,2)
(33,5,2)
(35,5,2)
(43,69,2)
(37,57,2)
(69,18,2)
(24,69,2)
(45,34,2)
(10,36,2)
(69,7,2)
(39,18,2)
(35,34,2)
(73,24,2)
(5,76,2)
(28,69,2)
(17,5,2)
-----------------------------------
(0,JAS_STREAM_MAXPUTBACK >= 2)
(1,n)
(2,1)
(3,n)
(4,)
(5,(n = jas_stream_read(in, (char *)
(6,2)
(7,BMP_MAGIC & 0xff)
(8,i)
(9,1)
(10,RET)
(11,n)
(12,)
(13,i)
(14,if ((n = jas_stream_read(in, (char *)
(15,(char *)
(16,2)
(17,1)
(18,n < 2)
(19,0)
(20,buf)
(21,)
(22,BMP_MAGIC >> 8)
(23,jas_stream_ungetc(in, buf[i])
(24,buf[0] == (BMP_MAGIC & 0xff)
(25,EOF)
(26,n)
(27,)
(28,8)
(29,if (n < 2)
(30,1)
(31,JAS_STREAM_MAXPUTBACK)
(32,buf[0])
(33,n - 1)
(34,jas_stream_ungetc(in, buf[i])
(35,0)
(36,return -1;)
(37,buf[1] == (BMP_MAGIC >> 8)
(38,return -1;)
(39,buf)
(40,jas_stream_t *in)
(41,buf)
(42,2)
(43,1)
(44,1)
(45,i)
(46,-1)
(47,)
(48,in)
(49,0)
(50,i = n - 1)
(51,return -1;)
(52,buf)
(53,i)
(54,-1)
(55,0xff)
(56,BMP_MAGIC)
(57,buf[1])
(58,0)
(59,jas_stream_read(in, (char *)
(60,return -1;)
(61,)
(62,i >= 0)
(63,for (i = n - 1; i >= 0; --i)
(64,assert(JAS_STREAM_MAXPUTBACK >= 2)
(65,if (buf[0] == (BMP_MAGIC & 0xff)
(66,buf)
(67,buf[i])
(68,char *)
(69,buf[0] == (BMP_MAGIC & 0xff)
(70,BMP_MAGIC)
(71,--i)
(72,-1)
(73,return 0;)
(74,if (jas_stream_ungetc(in, buf[i])
(75,i)
(76,n = jas_stream_read(in, (char *)
(77,in)
(78,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000040000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffe694ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5f00090000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
int bmp_validate(jas_stream_t *in) {
int n;
int i;
assert(JAS_STREAM_MAXPUTBACK >= 2);
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
return -1;
=======================
