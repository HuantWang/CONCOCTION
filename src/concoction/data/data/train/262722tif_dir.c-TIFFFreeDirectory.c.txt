-----label-----
0
-----code-----
void
TIFFFreeDirectory(TIFF* tif)
{
	TIFFDirectory *td = &tif->tif_dir;
	int            i;

	_TIFFmemset(td->td_fieldsset, 0, FIELD_SETLONGS);
	CleanupField(td_sminsamplevalue);
	CleanupField(td_smaxsamplevalue);
	CleanupField(td_colormap[0]);
	CleanupField(td_colormap[1]);
	CleanupField(td_colormap[2]);
	CleanupField(td_sampleinfo);
	CleanupField(td_subifd);
	CleanupField(td_inknames);
	CleanupField(td_refblackwhite);
	CleanupField(td_transferfunction[0]);
	CleanupField(td_transferfunction[1]);
	CleanupField(td_transferfunction[2]);
	CleanupField(td_stripoffset);
	CleanupField(td_stripbytecount);
	TIFFClrFieldBit(tif, FIELD_YCBCRSUBSAMPLING);
	TIFFClrFieldBit(tif, FIELD_YCBCRPOSITIONING);

	/* Cleanup custom tag values */
	for( i = 0; i < td->td_customValueCount; i++ ) {
		if (td->td_customValues[i].value)
			_TIFFfree(td->td_customValues[i].value);
	}

	td->td_customValueCount = 0;
	CleanupField(td_customValues);

#if defined(DEFER_STRILE_LOAD)
        _TIFFmemset( &(td->td_stripoffset_entry), 0, sizeof(TIFFDirEntry));
        _TIFFmemset( &(td->td_stripbytecount_entry), 0, sizeof(TIFFDirEntry));
#endif        
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
21,23
22,23
25,26
26,27
26,28
28,29
30,31
31,32
31,33
31,34
31,35
32,33
34,35
34,36
35,36
39,40
41,42
42,43
42,44
43,44
45,46
46,47
48,49
49,50
49,51
50,51
52,53
53,54
55,56
56,57
56,58
57,58
59,60
60,61
60,62
62,63
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
76,78
77,78
80,81
81,82
81,83
82,83
84,85
85,86
87,88
88,89
88,90
89,90
91,92
92,93
94,95
95,96
95,97
96,97
98,99
99,100
101,102
102,103
102,104
103,104
105,106
106,107
108,109
109,110
109,111
110,111
112,113
113,114
113,115
115,116
117,118
118,119
118,120
119,120
121,122
121,123
122,123
125,126
126,127
126,128
127,128
129,130
129,131
130,131
133,134
134,135
134,136
135,136
137,138
138,139
140,141
141,142
141,143
142,143
144,145
145,146
147,148
148,149
148,150
148,151
149,150
151,152
153,154
155,156
156,157
156,158
156,159
157,158
159,160
161,162
163,164
163,165
163,166
163,167
164,165
165,166
165,167
166,167
169,170
169,171
170,171
172,173
172,174
173,174
176,177
177,178
179,180
180,181
180,182
181,182
181,183
182,183
182,184
183,184
183,185
184,185
187,188
190,191
191,192
191,193
192,193
194,195
194,196
195,196
195,197
196,197
196,198
197,198
200,201
203,204
204,205
204,206
205,206
205,207
206,207
210,211
211,212
211,213
212,213
214,215
215,216
-----nextToken-----
2,4,7,9,10,15,17,18,23,24,27,29,33,36,37,38,40,44,47,51,54,58,61,63,67,70,71,75,78,79,83,86,90,93,97,100,104,107,111,114,116,120,123,124,128,131,132,136,139,143,146,150,152,154,158,160,162,167,168,171,174,175,178,185,186,188,189,193,198,199,201,202,207,208,209,213,216
-----computeFrom-----
165,166
165,167
169,170
169,171
204,205
204,206
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;
-----ast_node-----
voidTIFFFreeDirectory(TIFF* tif){	TIFFDirectory *td = &tif->tif_dir;	int            i;	_TIFFmemset(td->td_fieldsset, 0, FIELD_SETLONGS);	CleanupField(td_sminsamplevalue);	CleanupField(td_smaxsamplevalue);	CleanupField(td_colormap[0]);	CleanupField(td_colormap[1]);	CleanupField(td_colormap[2]);	CleanupField(td_sampleinfo);	CleanupField(td_subifd);	CleanupField(td_inknames);	CleanupField(td_refblackwhite);	CleanupField(td_transferfunction[0]);	CleanupField(td_transferfunction[1]);	CleanupField(td_transferfunction[2]);	CleanupField(td_stripoffset);	CleanupField(td_stripbytecount);	TIFFClrFieldBit(tif, FIELD_YCBCRSUBSAMPLING);	TIFFClrFieldBit(tif, FIELD_YCBCRPOSITIONING);	/* Cleanup custom tag values */	for( i = 0; i < td->td_customValueCount; i++ ) {		if (td->td_customValues[i].value)			_TIFFfree(td->td_customValues[i].value);	}	td->td_customValueCount = 0;	CleanupField(td_customValues);#if defined(DEFER_STRILE_LOAD)        _TIFFmemset( &(td->td_stripoffset_entry), 0, sizeof(TIFFDirEntry));        _TIFFmemset( &(td->td_stripbytecount_entry), 0, sizeof(TIFFDirEntry));#endif        }
void
TIFFFreeDirectory(TIFF* tif)
TIFFFreeDirectory
TIFF* tif
TIFF
TIFF
* tif
*
tif
{	TIFFDirectory *td = &tif->tif_dir;	int            i;	_TIFFmemset(td->td_fieldsset, 0, FIELD_SETLONGS);	CleanupField(td_sminsamplevalue);	CleanupField(td_smaxsamplevalue);	CleanupField(td_colormap[0]);	CleanupField(td_colormap[1]);	CleanupField(td_colormap[2]);	CleanupField(td_sampleinfo);	CleanupField(td_subifd);	CleanupField(td_inknames);	CleanupField(td_refblackwhite);	CleanupField(td_transferfunction[0]);	CleanupField(td_transferfunction[1]);	CleanupField(td_transferfunction[2]);	CleanupField(td_stripoffset);	CleanupField(td_stripbytecount);	TIFFClrFieldBit(tif, FIELD_YCBCRSUBSAMPLING);	TIFFClrFieldBit(tif, FIELD_YCBCRPOSITIONING);	/* Cleanup custom tag values */	for( i = 0; i < td->td_customValueCount; i++ ) {		if (td->td_customValues[i].value)			_TIFFfree(td->td_customValues[i].value);	}	td->td_customValueCount = 0;	CleanupField(td_customValues);#if defined(DEFER_STRILE_LOAD)        _TIFFmemset( &(td->td_stripoffset_entry), 0, sizeof(TIFFDirEntry));        _TIFFmemset( &(td->td_stripbytecount_entry), 0, sizeof(TIFFDirEntry));#endif        }
TIFFDirectory *td = &tif->tif_dir;
TIFFDirectory *td = &tif->tif_dir;
TIFFDirectory
TIFFDirectory
*td = &tif->tif_dir
*
td
= &tif->tif_dir
&tif->tif_dir
tif->tif_dir
tif
tif
tif_dir
int            i;
int            i;
int
i
i
_TIFFmemset(td->td_fieldsset, 0, FIELD_SETLONGS);
_TIFFmemset(td->td_fieldsset, 0, FIELD_SETLONGS)
_TIFFmemset
_TIFFmemset
td->td_fieldsset
td
td
td_fieldsset
0
FIELD_SETLONGS
FIELD_SETLONGS
CleanupField(td_sminsamplevalue);
CleanupField(td_sminsamplevalue);
CleanupField
CleanupField
(td_sminsamplevalue)
td_sminsamplevalue
td_sminsamplevalue
CleanupField(td_smaxsamplevalue);
CleanupField(td_smaxsamplevalue);
CleanupField
CleanupField
(td_smaxsamplevalue)
td_smaxsamplevalue
td_smaxsamplevalue
CleanupField(td_colormap[0]);
CleanupField(td_colormap[0]);
CleanupField
CleanupField
(td_colormap[0])
td_colormap[0]
td_colormap
[0]
0
CleanupField(td_colormap[1]);
CleanupField(td_colormap[1])
CleanupField
CleanupField
td_colormap[1]
td_colormap
td_colormap
1
CleanupField(td_colormap[2]);
CleanupField(td_colormap[2])
CleanupField
CleanupField
td_colormap[2]
td_colormap
td_colormap
2
CleanupField(td_sampleinfo);
CleanupField(td_sampleinfo);
CleanupField
CleanupField
(td_sampleinfo)
td_sampleinfo
td_sampleinfo
CleanupField(td_subifd);
CleanupField(td_subifd);
CleanupField
CleanupField
(td_subifd)
td_subifd
td_subifd
CleanupField(td_inknames);
CleanupField(td_inknames);
CleanupField
CleanupField
(td_inknames)
td_inknames
td_inknames
CleanupField(td_refblackwhite);
CleanupField(td_refblackwhite);
CleanupField
CleanupField
(td_refblackwhite)
td_refblackwhite
td_refblackwhite
CleanupField(td_transferfunction[0]);
CleanupField(td_transferfunction[0]);
CleanupField
CleanupField
(td_transferfunction[0])
td_transferfunction[0]
td_transferfunction
[0]
0
CleanupField(td_transferfunction[1]);
CleanupField(td_transferfunction[1])
CleanupField
CleanupField
td_transferfunction[1]
td_transferfunction
td_transferfunction
1
CleanupField(td_transferfunction[2]);
CleanupField(td_transferfunction[2])
CleanupField
CleanupField
td_transferfunction[2]
td_transferfunction
td_transferfunction
2
CleanupField(td_stripoffset);
CleanupField(td_stripoffset);
CleanupField
CleanupField
(td_stripoffset)
td_stripoffset
td_stripoffset
CleanupField(td_stripbytecount);
CleanupField(td_stripbytecount);
CleanupField
CleanupField
(td_stripbytecount)
td_stripbytecount
td_stripbytecount
TIFFClrFieldBit(tif, FIELD_YCBCRSUBSAMPLING);
TIFFClrFieldBit(tif, FIELD_YCBCRSUBSAMPLING)
TIFFClrFieldBit
TIFFClrFieldBit
tif
tif
FIELD_YCBCRSUBSAMPLING
FIELD_YCBCRSUBSAMPLING
TIFFClrFieldBit(tif, FIELD_YCBCRPOSITIONING);
TIFFClrFieldBit(tif, FIELD_YCBCRPOSITIONING)
TIFFClrFieldBit
TIFFClrFieldBit
tif
tif
FIELD_YCBCRPOSITIONING
FIELD_YCBCRPOSITIONING
for( i = 0; i < td->td_customValueCount; i++ ) {		if (td->td_customValues[i].value)			_TIFFfree(td->td_customValues[i].value);	}
i = 0;
i = 0
i
i
0
i < td->td_customValueCount
i
i
td->td_customValueCount
td
td
td_customValueCount
i++
i
i
{		if (td->td_customValues[i].value)			_TIFFfree(td->td_customValues[i].value);	}
if (td->td_customValues[i].value)			_TIFFfree(td->td_customValues[i].value);
td->td_customValues[i].value
td->td_customValues[i]
td->td_customValues
td
td
td_customValues
i
i
value
_TIFFfree(td->td_customValues[i].value);
_TIFFfree(td->td_customValues[i].value)
_TIFFfree
_TIFFfree
td->td_customValues[i].value
td->td_customValues[i]
td->td_customValues
td
td
td_customValues
i
i
value
td->td_customValueCount = 0;
td->td_customValueCount = 0
td->td_customValueCount
td
td
td_customValueCount
0
CleanupField(td_customValues);
CleanupField(td_customValues);
CleanupField
CleanupField
(td_customValues)
td_customValues
td_customValues
-----joern-----
(4,9,0)
(6,4,0)
(2,4,0)
(1,4,0)
(4,3,0)
(4,7,0)
(5,4,0)
(4,0,0)
(4,9,1)
(6,5,1)
(8,4,1)
(2,6,1)
(1,2,1)
(4,1,1)
(4,0,1)
(4,7,1)
(4,7,2)
(4,9,2)
(4,0,2)
-----------------------------------
(0,void** vpp)
(1,1)
(2,n)
(3,)
(4,setByteArray(vpp, vp, n, 1)
(5,vpp)
(6,vp)
(7,void* vp)
(8,RET)
(9,uint32 n)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000010000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffc7a1b56300000000ffffffffffffffff56a2b56300000000ffffffffffffffff56a2b56300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x4d4d002a000000080008ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
void TIFFFreeDirectory(TIFF* tif) {
TIFFDirectory *td = &tif->tif_dir;
int            i;
_TIFFmemset(td->td_fieldsset, 0, FIELD_SETLONGS);
CleanupField(td_sminsamplevalue);
CleanupField(td_smaxsamplevalue);
CleanupField(td_colormap[0]);
CleanupField(td_colormap[1]);
CleanupField(td_colormap[2]);
CleanupField(td_sampleinfo);
CleanupField(td_subifd);
CleanupField(td_inknames);
CleanupField(td_refblackwhite);
CleanupField(td_transferfunction[0]);
CleanupField(td_transferfunction[1]);
CleanupField(td_transferfunction[2]);
CleanupField(td_stripoffset);
CleanupField(td_stripbytecount);
TIFFClrFieldBit(tif, FIELD_YCBCRSUBSAMPLING);
TIFFClrFieldBit(tif, FIELD_YCBCRPOSITIONING);
td->td_customValueCount = 0;
CleanupField(td_customValues);
=======================
