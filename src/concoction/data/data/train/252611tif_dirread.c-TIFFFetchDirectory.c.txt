-----label-----
0
-----code-----
static uint16
TIFFFetchDirectory(TIFF* tif, uint64 diroff, TIFFDirEntry** pdir,
                   uint64 *nextdiroff)
{
	static const char module[] = "TIFFFetchDirectory";

	void* origdir;
	uint16 dircount16;
	uint32 dirsize;
	TIFFDirEntry* dir;
	uint8* ma;
	TIFFDirEntry* mb;
	uint16 n;

	assert(pdir);

	tif->tif_diroff = diroff;
	if (nextdiroff)
		*nextdiroff = 0;
	if (!isMapped(tif)) {
		if (!SeekOK(tif, tif->tif_diroff)) {
			TIFFErrorExt(tif->tif_clientdata, module,
				"%s: Seek error accessing TIFF directory",
				tif->tif_name);
			return 0;
		}
		if (!(tif->tif_flags&TIFF_BIGTIFF))
		{
			if (!ReadOK(tif, &dircount16, sizeof (uint16))) {
				TIFFErrorExt(tif->tif_clientdata, module,
				    "%s: Can not read TIFF directory count",
				    tif->tif_name);
				return 0;
			}
			if (tif->tif_flags & TIFF_SWAB)
				TIFFSwabShort(&dircount16);
			if (dircount16>4096)
			{
				TIFFErrorExt(tif->tif_clientdata, module,
				    "Sanity check on directory count failed, this is probably not a valid IFD offset");
				return 0;
			}
			dirsize = 12;
		} else {
			uint64 dircount64;
			if (!ReadOK(tif, &dircount64, sizeof (uint64))) {
				TIFFErrorExt(tif->tif_clientdata, module,
					"%s: Can not read TIFF directory count",
					tif->tif_name);
				return 0;
			}
			if (tif->tif_flags & TIFF_SWAB)
				TIFFSwabLong8(&dircount64);
			if (dircount64>4096)
			{
				TIFFErrorExt(tif->tif_clientdata, module,
				    "Sanity check on directory count failed, this is probably not a valid IFD offset");
				return 0;
			}
			dircount16 = (uint16)dircount64;
			dirsize = 20;
		}
		origdir = _TIFFCheckMalloc(tif, dircount16,
		    dirsize, "to read TIFF directory");
		if (origdir == NULL)
			return 0;
		if (!ReadOK(tif, origdir, (tmsize_t)(dircount16*dirsize))) {
			TIFFErrorExt(tif->tif_clientdata, module,
				"%.100s: Can not read TIFF directory",
				tif->tif_name);
			_TIFFfree(origdir);
			return 0;
		}
		/*
		 * Read offset to next directory for sequential scans if
		 * needed.
		 */
		if (nextdiroff)
		{
			if (!(tif->tif_flags&TIFF_BIGTIFF))
			{
				uint32 nextdiroff32;
				if (!ReadOK(tif, &nextdiroff32, sizeof(uint32)))
					nextdiroff32 = 0;
				if (tif->tif_flags&TIFF_SWAB)
					TIFFSwabLong(&nextdiroff32);
				*nextdiroff=nextdiroff32;
			} else {
				if (!ReadOK(tif, nextdiroff, sizeof(uint64)))
					*nextdiroff = 0;
				if (tif->tif_flags&TIFF_SWAB)
					TIFFSwabLong8(nextdiroff);
			}
		}
	} else {
		tmsize_t m;
		tmsize_t off = (tmsize_t) tif->tif_diroff;
		if ((uint64)off!=tif->tif_diroff)
		{
			TIFFErrorExt(tif->tif_clientdata,module,"Can not read TIFF directory count");
			return(0);
		}

		/*
		 * Check for integer overflow when validating the dir_off,
		 * otherwise a very high offset may cause an OOB read and
		 * crash the client. Make two comparisons instead of
		 *
		 *  off + sizeof(uint16) > tif->tif_size
		 *
		 * to avoid overflow.
		 */
		if (!(tif->tif_flags&TIFF_BIGTIFF))
		{
			m=off+sizeof(uint16);
			if ((m<off)||(m<(tmsize_t)sizeof(uint16))||(m>tif->tif_size)) {
				TIFFErrorExt(tif->tif_clientdata, module,
					"Can not read TIFF directory count");
				return 0;
			} else {
				_TIFFmemcpy(&dircount16, tif->tif_base + off,
					    sizeof(uint16));
			}
			off += sizeof (uint16);
			if (tif->tif_flags & TIFF_SWAB)
				TIFFSwabShort(&dircount16);
			if (dircount16>4096)
			{
				TIFFErrorExt(tif->tif_clientdata, module,
				    "Sanity check on directory count failed, this is probably not a valid IFD offset");
				return 0;
			}
			dirsize = 12;
		}
		else
		{
			tmsize_t m;
			uint64 dircount64;
			m=off+sizeof(uint64);
			if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size)) {
				TIFFErrorExt(tif->tif_clientdata, module,
					"Can not read TIFF directory count");
				return 0;
			} else {
				_TIFFmemcpy(&dircount64, tif->tif_base + off,
					    sizeof(uint64));
			}
			off += sizeof (uint64);
			if (tif->tif_flags & TIFF_SWAB)
				TIFFSwabLong8(&dircount64);
			if (dircount64>4096)
			{
				TIFFErrorExt(tif->tif_clientdata, module,
				    "Sanity check on directory count failed, this is probably not a valid IFD offset");
				return 0;
			}
			dircount16 = (uint16)dircount64;
			dirsize = 20;
		}
		if (dircount16 == 0 )
		{
			TIFFErrorExt(tif->tif_clientdata, module,
			             "Sanity check on directory count failed, zero tag directories not supported");
			return 0;
		}
		origdir = _TIFFCheckMalloc(tif, dircount16,
						dirsize,
						"to read TIFF directory");
		if (origdir == NULL)
			return 0;
		m=off+dircount16*dirsize;
		if ((m<off)||(m<(tmsize_t)(dircount16*dirsize))||(m>tif->tif_size)) {
			TIFFErrorExt(tif->tif_clientdata, module,
				     "Can not read TIFF directory");
			_TIFFfree(origdir);
			return 0;
		} else {
			_TIFFmemcpy(origdir, tif->tif_base + off,
				    dircount16 * dirsize);
		}
		if (nextdiroff) {
			off += dircount16 * dirsize;
			if (!(tif->tif_flags&TIFF_BIGTIFF))
			{
				uint32 nextdiroff32;
				m=off+sizeof(uint32);
				if ((m<off)||(m<(tmsize_t)sizeof(uint32))||(m>tif->tif_size))
					nextdiroff32 = 0;
				else
					_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,
						    sizeof (uint32));
				if (tif->tif_flags&TIFF_SWAB)
					TIFFSwabLong(&nextdiroff32);
				*nextdiroff = nextdiroff32;
			}
			else
			{
				m=off+sizeof(uint64);
				if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size))
					*nextdiroff = 0;
				else
					_TIFFmemcpy(nextdiroff, tif->tif_base + off,
						    sizeof (uint64));
				if (tif->tif_flags&TIFF_SWAB)
					TIFFSwabLong8(nextdiroff);
			}
		}
	}
	dir = (TIFFDirEntry*)_TIFFCheckMalloc(tif, dircount16,
						sizeof(TIFFDirEntry),
						"to read TIFF directory");
	if (dir==0)
	{
		_TIFFfree(origdir);
		return 0;
	}
	ma=(uint8*)origdir;
	mb=dir;
	for (n=0; n<dircount16; n++)
	{
		if (tif->tif_flags&TIFF_SWAB)
			TIFFSwabShort((uint16*)ma);
		mb->tdir_tag=*(uint16*)ma;
		ma+=sizeof(uint16);
		if (tif->tif_flags&TIFF_SWAB)
			TIFFSwabShort((uint16*)ma);
		mb->tdir_type=*(uint16*)ma;
		ma+=sizeof(uint16);
		if (!(tif->tif_flags&TIFF_BIGTIFF))
		{
			if (tif->tif_flags&TIFF_SWAB)
				TIFFSwabLong((uint32*)ma);
			mb->tdir_count=(uint64)(*(uint32*)ma);
			ma+=sizeof(uint32);
			*(uint32*)(&mb->tdir_offset)=*(uint32*)ma;
			ma+=sizeof(uint32);
		}
		else
		{
			if (tif->tif_flags&TIFF_SWAB)
				TIFFSwabLong8((uint64*)ma);
                        mb->tdir_count=TIFFReadUInt64(ma);
			ma+=sizeof(uint64);
			mb->tdir_offset.toff_long8=TIFFReadUInt64(ma);
			ma+=sizeof(uint64);
		}
		mb++;
	}
	_TIFFfree(origdir);
	*pdir = dir;
	return dircount16;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
20,22
20,23
24,25
24,26
25,26
27,28
27,29
30,31
30,32
30,33
30,34
30,35
30,36
30,37
30,38
30,39
30,40
30,41
30,42
30,43
30,44
30,45
30,46
30,47
30,48
30,49
30,50
31,32
32,33
32,34
34,35
34,36
34,37
37,38
39,40
40,41
40,42
42,43
42,44
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
61,63
64,65
65,66
65,67
66,67
68,69
68,70
71,72
72,73
72,74
73,74
75,76
75,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
90,91
91,92
91,93
92,93
92,94
93,94
96,97
98,99
98,100
99,100
101,102
102,103
102,104
103,104
104,105
107,108
107,109
107,110
108,109
109,110
109,111
110,111
112,113
114,115
114,116
114,117
114,118
114,119
114,120
115,116
115,117
116,117
117,118
117,119
117,120
118,119
120,121
122,123
122,124
123,124
126,127
126,128
127,128
128,129
128,130
128,131
128,132
128,133
129,130
131,132
131,133
132,133
135,136
138,139
138,140
139,140
142,143
144,145
144,146
144,147
145,146
146,147
147,148
147,149
148,149
148,150
149,150
152,153
154,155
154,156
154,157
154,158
155,156
155,157
156,157
157,158
157,159
157,160
157,161
158,159
160,161
162,163
163,164
165,166
166,167
166,168
167,168
170,171
170,172
171,172
172,173
172,174
172,175
172,176
172,177
173,174
175,176
175,177
176,177
179,180
182,183
182,184
183,184
186,187
188,189
188,190
189,190
189,191
190,191
190,192
191,192
194,195
196,197
197,198
197,199
198,199
200,201
201,202
203,204
203,205
204,205
204,206
205,206
208,209
208,210
209,210
210,211
210,212
210,213
210,214
211,212
213,214
213,215
214,215
217,218
220,221
222,223
223,224
223,225
224,225
227,228
227,229
227,230
227,231
227,232
227,233
228,229
229,230
229,231
230,231
232,233
234,235
234,236
235,236
236,237
236,238
236,239
236,240
237,238
239,240
241,242
242,243
244,245
245,246
245,247
246,247
249,250
249,251
250,251
251,252
251,253
251,254
251,255
251,256
252,253
254,255
254,256
255,256
258,259
261,262
261,263
262,263
265,266
267,268
267,269
268,269
268,270
269,270
269,271
270,271
273,274
275,276
276,277
276,278
277,278
279,280
280,281
282,283
282,284
283,284
283,285
284,285
287,288
287,289
288,289
289,290
289,291
289,292
289,293
290,291
292,293
292,294
293,294
296,297
299,300
301,302
302,303
302,304
303,304
305,306
305,307
306,307
306,308
307,308
310,311
312,313
313,314
313,315
314,315
317,318
318,319
318,320
319,320
321,322
321,323
321,324
321,325
321,326
322,323
324,325
326,327
328,329
331,332
331,333
332,333
332,334
333,334
335,336
337,338
339,340
339,341
340,341
341,342
341,343
341,344
341,345
342,343
344,345
346,347
348,349
348,350
349,350
350,351
352,353
352,354
353,354
355,356
357,358
357,359
357,360
358,359
359,360
359,361
359,362
359,363
359,364
360,361
362,363
362,364
363,364
366,367
369,370
369,371
370,371
373,374
374,375
374,376
375,376
377,378
379,380
381,382
381,383
382,383
384,385
385,386
385,387
385,388
386,387
387,388
388,389
388,390
389,390
389,391
390,391
393,394
395,396
395,397
395,398
395,399
396,397
397,398
397,399
398,399
400,401
402,403
402,404
403,404
404,405
404,406
404,407
404,408
405,406
407,408
409,410
410,411
412,413
413,414
413,415
414,415
417,418
418,419
418,420
419,420
422,423
422,424
423,424
423,425
424,425
424,426
425,426
428,429
430,431
431,432
431,433
432,433
434,435
435,436
437,438
438,439
438,440
439,440
440,441
442,443
444,445
444,446
445,446
445,447
446,447
447,448
447,449
447,450
447,451
448,449
450,451
452,453
454,455
455,456
455,457
456,457
459,460
460,461
460,462
461,462
462,463
465,466
465,467
466,467
466,468
467,468
467,469
468,469
471,472
473,474
474,475
474,476
475,476
477,478
479,480
479,481
479,482
479,483
479,484
479,485
479,486
479,487
479,488
479,489
480,481
481,482
481,483
482,483
484,485
486,487
487,488
487,489
488,489
490,491
490,492
492,493
493,494
493,495
494,495
494,496
495,496
498,499
498,500
499,500
502,503
502,504
503,504
503,505
504,505
504,506
505,506
505,507
506,507
509,510
511,512
511,513
512,513
515,516
515,517
516,517
517,518
517,519
517,520
517,521
518,519
520,521
520,522
521,522
524,525
527,528
528,529
530,531
530,532
530,533
531,532
532,533
533,534
533,535
534,535
534,536
535,536
538,539
540,541
540,542
540,543
540,544
540,545
540,546
541,542
542,543
542,544
543,544
545,546
545,547
546,547
548,549
549,550
549,551
550,551
553,554
553,555
553,556
554,555
554,556
555,556
555,557
556,557
557,558
557,559
558,559
560,561
562,563
563,564
563,565
564,565
566,567
566,568
567,568
567,569
568,569
571,572
572,573
572,574
573,574
576,577
577,578
577,579
578,579
580,581
580,582
581,582
584,585
584,586
585,586
586,587
586,588
586,589
586,590
587,588
589,590
589,591
590,591
593,594
596,597
598,599
599,600
600,601
600,602
600,603
600,604
601,602
603,604
604,605
606,607
606,608
607,608
607,609
608,609
611,612
613,614
614,615
614,616
615,616
618,619
619,620
619,621
620,621
622,623
623,624
623,625
624,625
627,628
627,629
628,629
628,630
629,630
629,631
630,631
633,634
635,636
636,637
636,638
637,638
639,640
640,641
642,643
642,644
643,644
643,645
644,645
647,648
647,649
648,649
649,650
649,651
649,652
649,653
650,651
652,653
652,654
653,654
656,657
659,660
661,662
662,663
662,664
663,664
666,667
666,668
666,669
666,670
666,671
666,672
666,673
666,674
666,675
667,668
668,669
668,670
669,670
671,672
673,674
674,675
674,676
675,676
677,678
679,680
680,681
680,682
681,682
683,684
683,685
684,685
686,687
687,688
687,689
688,689
691,692
691,693
691,694
692,693
692,694
693,694
693,695
694,695
695,696
695,697
696,697
698,699
700,701
701,702
701,703
702,703
704,705
704,706
705,706
705,707
706,707
709,710
710,711
710,712
711,712
714,715
715,716
715,717
716,717
718,719
718,720
719,720
722,723
722,724
723,724
724,725
724,726
724,727
724,728
725,726
727,728
727,729
728,729
731,732
734,735
736,737
737,738
738,739
738,740
738,741
738,742
739,740
741,742
742,743
744,745
744,746
745,746
745,747
746,747
749,750
751,752
752,753
752,754
753,754
756,757
757,758
757,759
758,759
760,761
761,762
761,763
762,763
765,766
765,767
766,767
766,768
767,768
767,769
768,769
771,772
773,774
774,775
774,776
775,776
777,778
778,779
780,781
780,782
781,782
781,783
782,783
785,786
785,787
786,787
787,788
787,789
787,790
787,791
788,789
790,791
790,792
791,792
794,795
797,798
799,800
800,801
800,802
801,802
803,804
803,805
804,805
804,806
805,806
808,809
810,811
811,812
811,813
812,813
815,816
815,817
816,817
816,818
817,818
820,821
820,822
821,822
822,823
822,824
822,825
822,826
823,824
825,826
825,827
826,827
829,830
832,833
834,835
835,836
835,837
836,837
838,839
838,840
838,841
838,842
838,843
839,840
841,842
843,844
845,846
848,849
848,850
849,850
849,851
850,851
852,853
854,855
856,857
857,858
857,859
858,859
860,861
860,862
861,862
863,864
863,865
864,865
866,867
868,869
868,870
868,871
869,870
869,871
870,871
870,872
871,872
872,873
872,874
873,874
875,876
877,878
878,879
878,880
879,880
881,882
881,883
882,883
883,884
885,886
885,887
886,887
888,889
890,891
891,892
891,893
892,893
894,895
894,896
895,896
898,899
898,900
898,901
899,900
900,901
900,902
900,903
900,904
901,902
903,904
903,905
904,905
907,908
910,911
911,912
911,913
912,913
914,915
916,917
918,919
919,920
920,921
920,922
920,923
920,924
921,922
923,924
925,926
925,927
926,927
926,928
927,928
930,931
932,933
932,934
933,934
935,936
937,938
937,939
938,939
940,941
940,942
941,942
942,943
942,944
943,944
945,946
945,947
946,947
948,949
950,951
950,952
950,953
951,952
952,953
953,954
953,955
954,955
954,956
955,956
958,959
960,961
960,962
960,963
960,964
960,965
961,962
962,963
962,964
963,964
965,966
967,968
968,969
968,970
969,970
971,972
971,973
972,973
974,975
975,976
975,977
976,977
979,980
979,981
979,982
980,981
980,982
981,982
981,983
982,983
983,984
983,985
984,985
986,987
988,989
989,990
989,991
990,991
992,993
992,994
993,994
993,995
994,995
997,998
998,999
998,1000
999,1000
1002,1003
1003,1004
1003,1005
1004,1005
1006,1007
1006,1008
1007,1008
1010,1011
1011,1012
1011,1013
1012,1013
1015,1016
1016,1017
1016,1018
1016,1019
1016,1020
1017,1018
1019,1020
1020,1021
1022,1023
1022,1024
1023,1024
1023,1025
1024,1025
1027,1028
1029,1030
1030,1031
1030,1032
1031,1032
1034,1035
1034,1036
1035,1036
1035,1037
1036,1037
1036,1038
1037,1038
1040,1041
1042,1043
1043,1044
1043,1045
1044,1045
1046,1047
1047,1048
1049,1050
1050,1051
1050,1052
1051,1052
1052,1053
1054,1055
1056,1057
1056,1058
1056,1059
1057,1058
1058,1059
1058,1060
1059,1060
1061,1062
1061,1063
1062,1063
1064,1065
1065,1066
1065,1067
1066,1067
1069,1070
1069,1071
1069,1072
1070,1071
1070,1072
1071,1072
1071,1073
1072,1073
1073,1074
1073,1075
1074,1075
1076,1077
1078,1079
1079,1080
1079,1081
1080,1081
1082,1083
1082,1084
1083,1084
1083,1085
1084,1085
1087,1088
1088,1089
1088,1090
1089,1090
1092,1093
1093,1094
1093,1095
1094,1095
1096,1097
1096,1098
1097,1098
1100,1101
1101,1102
1101,1103
1102,1103
1103,1104
1106,1107
1107,1108
1107,1109
1107,1110
1107,1111
1108,1109
1110,1111
1112,1113
1112,1114
1113,1114
1113,1115
1114,1115
1117,1118
1119,1120
1120,1121
1120,1122
1121,1122
1124,1125
1124,1126
1125,1126
1125,1127
1126,1127
1126,1128
1127,1128
1130,1131
1132,1133
1133,1134
1133,1135
1134,1135
1136,1137
1138,1139
1139,1140
1139,1141
1140,1141
1142,1143
1142,1144
1143,1144
1143,1145
1144,1145
1146,1147
1148,1149
1148,1150
1148,1151
1148,1152
1148,1153
1149,1150
1151,1152
1153,1154
1155,1156
1156,1157
1156,1158
1157,1158
1161,1162
1161,1163
1162,1163
1162,1164
1163,1164
1166,1167
1166,1168
1167,1168
1168,1169
1168,1170
1169,1170
1171,1172
1173,1174
1175,1176
1176,1177
1176,1178
1177,1178
1179,1180
1179,1181
1180,1181
1180,1182
1181,1182
1183,1184
1185,1186
1187,1188
1188,1189
1188,1190
1189,1190
1191,1192
1193,1194
1193,1195
1193,1196
1193,1197
1194,1195
1195,1196
1195,1197
1196,1197
1199,1200
1199,1201
1200,1201
1202,1203
1204,1205
1205,1206
1207,1208
1207,1209
1207,1210
1207,1211
1207,1212
1207,1213
1207,1214
1207,1215
1208,1209
1208,1210
1209,1210
1209,1211
1210,1211
1210,1212
1211,1212
1214,1215
1216,1217
1217,1218
1217,1219
1218,1219
1220,1221
1220,1222
1221,1222
1221,1223
1222,1223
1224,1225
1226,1227
1228,1229
1229,1230
1229,1231
1230,1231
1230,1232
1231,1232
1234,1235
1235,1236
1235,1237
1236,1237
1236,1238
1237,1238
1239,1240
1241,1242
1243,1244
1244,1245
1244,1246
1245,1246
1247,1248
1248,1249
1248,1250
1249,1250
1252,1253
1252,1254
1253,1254
1253,1255
1254,1255
1254,1256
1255,1256
1258,1259
1260,1261
1261,1262
1261,1263
1262,1263
1264,1265
1264,1266
1265,1266
1265,1267
1266,1267
1268,1269
1270,1271
1272,1273
1273,1274
1273,1275
1274,1275
1274,1276
1275,1276
1278,1279
1279,1280
1279,1281
1280,1281
1280,1282
1281,1282
1283,1284
1285,1286
1287,1288
1288,1289
1288,1290
1289,1290
1291,1292
1292,1293
1292,1294
1293,1294
1296,1297
1296,1298
1296,1299
1297,1298
1298,1299
1299,1300
1299,1301
1300,1301
1300,1302
1301,1302
1304,1305
1306,1307
1306,1308
1306,1309
1306,1310
1306,1311
1307,1308
1307,1309
1308,1309
1308,1310
1309,1310
1309,1311
1310,1311
1313,1314
1315,1316
1316,1317
1316,1318
1317,1318
1319,1320
1319,1321
1320,1321
1320,1322
1321,1322
1323,1324
1325,1326
1327,1328
1328,1329
1328,1330
1329,1330
1329,1331
1330,1331
1333,1334
1333,1335
1334,1335
1335,1336
1337,1338
1338,1339
1338,1340
1339,1340
1339,1341
1340,1341
1342,1343
1344,1345
1346,1347
1347,1348
1347,1349
1348,1349
1350,1351
1351,1352
1351,1353
1352,1353
1355,1356
1356,1357
1356,1358
1357,1358
1358,1359
1358,1360
1359,1360
1359,1361
1360,1361
1362,1363
1364,1365
1365,1366
1366,1367
1366,1368
1367,1368
1370,1371
1371,1372
1371,1373
1372,1373
1372,1374
1373,1374
1375,1376
1377,1378
1379,1380
1380,1381
1380,1382
1381,1382
1383,1384
1384,1385
1384,1386
1385,1386
1388,1389
1388,1390
1388,1391
1388,1392
1388,1393
1389,1390
1389,1391
1390,1391
1390,1392
1391,1392
1391,1393
1392,1393
1395,1396
1397,1398
1398,1399
1398,1400
1399,1400
1401,1402
1401,1403
1402,1403
1402,1404
1403,1404
1405,1406
1407,1408
1409,1410
1410,1411
1410,1412
1411,1412
1411,1413
1412,1413
1415,1416
1415,1417
1416,1417
1418,1419
1420,1421
1421,1422
1421,1423
1422,1423
1424,1425
1425,1426
1425,1427
1426,1427
1429,1430
1430,1431
1430,1432
1431,1432
1431,1433
1432,1433
1432,1434
1433,1434
1437,1438
1437,1439
1438,1439
1440,1441
1442,1443
1443,1444
1443,1445
1444,1445
1446,1447
1447,1448
1447,1449
1448,1449
1451,1452
1452,1453
1453,1454
1455,1456
1456,1457
1456,1458
1457,1458
1459,1460
1461,1462
1462,1463
1462,1464
1463,1464
1464,1465
1466,1467
1468,1469
1469,1470
-----nextToken-----
3,5,8,10,11,14,16,19,21,22,23,26,28,29,33,35,36,38,41,43,44,48,50,54,56,60,62,63,67,69,70,74,76,77,81,83,87,89,94,95,97,100,105,106,111,113,119,121,124,125,130,133,134,136,137,140,141,143,150,151,153,159,161,164,168,169,174,177,178,180,181,184,185,187,192,193,195,199,202,206,207,212,215,216,218,219,221,225,226,231,233,238,240,243,247,248,253,256,257,259,260,263,264,266,271,272,274,278,281,285,286,291,294,295,297,298,300,304,308,309,311,315,316,320,323,325,327,329,330,334,336,338,343,345,347,351,354,356,361,364,365,367,368,371,372,376,378,380,383,391,392,394,399,401,406,408,411,415,416,420,421,426,427,429,433,436,441,443,449,451,453,457,458,463,464,469,470,472,476,478,483,485,489,491,496,497,500,501,507,508,510,513,514,519,522,523,525,526,529,536,537,539,544,547,551,552,559,561,565,569,570,574,575,579,582,583,588,591,592,594,595,597,602,605,609,610,612,616,617,621,625,626,631,632,634,638,641,645,646,651,654,655,657,658,660,664,665,670,672,676,678,682,685,689,690,697,699,703,707,708,712,713,717,720,721,726,729,730,732,733,735,740,743,747,748,750,754,755,759,763,764,769,770,772,776,779,783,784,789,792,793,795,796,798,802,806,807,809,813,814,818,819,824,827,828,830,831,833,837,840,842,844,846,847,851,853,855,859,862,865,867,874,876,880,884,887,889,893,896,897,902,905,906,908,909,913,915,917,922,924,928,929,931,934,936,939,944,947,949,956,957,959,964,966,970,973,977,978,985,987,991,995,996,1000,1001,1005,1008,1009,1013,1014,1018,1021,1025,1026,1028,1032,1033,1038,1039,1041,1045,1048,1053,1055,1060,1063,1067,1068,1075,1077,1081,1085,1086,1090,1091,1095,1098,1099,1104,1105,1109,1111,1115,1116,1118,1122,1123,1128,1129,1131,1135,1137,1141,1145,1147,1150,1152,1154,1158,1159,1160,1164,1165,1170,1172,1174,1178,1182,1184,1186,1190,1192,1197,1198,1201,1203,1206,1212,1213,1215,1219,1223,1225,1227,1232,1233,1238,1240,1242,1246,1250,1251,1256,1257,1259,1263,1267,1269,1271,1276,1277,1282,1284,1286,1290,1294,1295,1302,1303,1305,1311,1312,1314,1318,1322,1324,1326,1331,1332,1336,1341,1343,1345,1349,1353,1354,1361,1363,1368,1369,1374,1376,1378,1382,1386,1387,1393,1394,1396,1400,1404,1406,1408,1413,1414,1417,1419,1423,1427,1428,1434,1435,1436,1439,1441,1445,1449,1450,1454,1458,1460,1465,1467,1470
-----computeFrom-----
91,92
91,93
102,103
102,104
147,148
147,149
189,190
189,191
204,205
204,206
223,224
223,225
268,269
268,270
283,284
283,285
302,303
302,304
313,314
313,315
318,319
318,320
332,333
332,334
352,353
352,354
388,389
388,390
418,419
418,420
423,424
423,425
438,439
438,440
460,461
460,462
466,467
466,468
503,504
503,505
533,534
533,535
542,543
542,544
545,546
545,547
554,555
554,556
555,556
555,557
557,558
557,559
563,564
563,565
577,578
577,579
606,607
606,608
619,620
619,621
628,629
628,630
643,644
643,645
662,663
662,664
680,681
680,682
683,684
683,685
692,693
692,694
693,694
693,695
695,696
695,697
701,702
701,703
715,716
715,717
744,745
744,746
757,758
757,759
766,767
766,768
781,782
781,783
800,801
800,802
811,812
811,813
816,817
816,818
835,836
835,837
849,850
849,851
857,858
857,859
860,861
860,862
863,864
863,865
869,870
869,871
870,871
870,872
872,873
872,874
878,879
878,880
885,886
885,887
891,892
891,893
925,926
925,927
932,933
932,934
942,943
942,944
945,946
945,947
953,954
953,955
968,969
968,970
971,972
971,973
980,981
980,982
981,982
981,983
983,984
983,985
989,990
989,991
1003,1004
1003,1005
1011,1012
1011,1013
1022,1023
1022,1024
1035,1036
1035,1037
1050,1051
1050,1052
1058,1059
1058,1060
1061,1062
1061,1063
1070,1071
1070,1072
1071,1072
1071,1073
1073,1074
1073,1075
1079,1080
1079,1081
1093,1094
1093,1095
1101,1102
1101,1103
1112,1113
1112,1114
1125,1126
1125,1127
1139,1140
1139,1141
1162,1163
1162,1164
1176,1177
1176,1178
1188,1189
1188,1190
1195,1196
1195,1197
1199,1200
1199,1201
1209,1210
1209,1211
1229,1230
1229,1231
1244,1245
1244,1246
1253,1254
1253,1255
1273,1274
1273,1275
1288,1289
1288,1290
1299,1300
1299,1301
1308,1309
1308,1310
1328,1329
1328,1330
1347,1348
1347,1349
1356,1357
1356,1358
1380,1381
1380,1382
1390,1391
1390,1392
1410,1411
1410,1412
1421,1422
1421,1423
1430,1431
1430,1432
1443,1444
1443,1445
1462,1463
1462,1464
-----guardedBy-----
513,522
582,591
720,729
896,905
-----guardedByNegation-----
582,609
574,616
561,612
720,747
712,754
699,750
896,928
889,936
887,934
876,931
1008,1025
1000,1032
987,1028
1098,1115
1090,1122
1077,1118
-----lastLexicalUse-----
582,609
720,747
896,928
-----jump-----
582,609
720,747
896,928
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static uint16TIFFFetchDirectory(TIFF* tif, uint64 diroff, TIFFDirEntry** pdir,                   uint64 *nextdiroff){	static const char module[] = "TIFFFetchDirectory";	void* origdir;	uint16 dircount16;	uint32 dirsize;	TIFFDirEntry* dir;	uint8* ma;	TIFFDirEntry* mb;	uint16 n;	assert(pdir);	tif->tif_diroff = diroff;	if (nextdiroff)		*nextdiroff = 0;	if (!isMapped(tif)) {		if (!SeekOK(tif, tif->tif_diroff)) {			TIFFErrorExt(tif->tif_clientdata, module,				"%s: Seek error accessing TIFF directory",				tif->tif_name);			return 0;		}		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			if (!ReadOK(tif, &dircount16, sizeof (uint16))) {				TIFFErrorExt(tif->tif_clientdata, module,				    "%s: Can not read TIFF directory count",				    tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		} else {			uint64 dircount64;			if (!ReadOK(tif, &dircount64, sizeof (uint64))) {				TIFFErrorExt(tif->tif_clientdata, module,					"%s: Can not read TIFF directory count",					tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}		origdir = _TIFFCheckMalloc(tif, dircount16,		    dirsize, "to read TIFF directory");		if (origdir == NULL)			return 0;		if (!ReadOK(tif, origdir, (tmsize_t)(dircount16*dirsize))) {			TIFFErrorExt(tif->tif_clientdata, module,				"%.100s: Can not read TIFF directory",				tif->tif_name);			_TIFFfree(origdir);			return 0;		}		/*		 * Read offset to next directory for sequential scans if		 * needed.		 */		if (nextdiroff)		{			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				if (!ReadOK(tif, &nextdiroff32, sizeof(uint32)))					nextdiroff32 = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff=nextdiroff32;			} else {				if (!ReadOK(tif, nextdiroff, sizeof(uint64)))					*nextdiroff = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}	} else {		tmsize_t m;		tmsize_t off = (tmsize_t) tif->tif_diroff;		if ((uint64)off!=tif->tif_diroff)		{			TIFFErrorExt(tif->tif_clientdata,module,"Can not read TIFF directory count");			return(0);		}		/*		 * Check for integer overflow when validating the dir_off,		 * otherwise a very high offset may cause an OOB read and		 * crash the client. Make two comparisons instead of		 *		 *  off + sizeof(uint16) > tif->tif_size		 *		 * to avoid overflow.		 */		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			m=off+sizeof(uint16);			if ((m<off)||(m<(tmsize_t)sizeof(uint16))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount16, tif->tif_base + off,					    sizeof(uint16));			}			off += sizeof (uint16);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		}		else		{			tmsize_t m;			uint64 dircount64;			m=off+sizeof(uint64);			if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount64, tif->tif_base + off,					    sizeof(uint64));			}			off += sizeof (uint64);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}		if (dircount16 == 0 )		{			TIFFErrorExt(tif->tif_clientdata, module,			             "Sanity check on directory count failed, zero tag directories not supported");			return 0;		}		origdir = _TIFFCheckMalloc(tif, dircount16,						dirsize,						"to read TIFF directory");		if (origdir == NULL)			return 0;		m=off+dircount16*dirsize;		if ((m<off)||(m<(tmsize_t)(dircount16*dirsize))||(m>tif->tif_size)) {			TIFFErrorExt(tif->tif_clientdata, module,				     "Can not read TIFF directory");			_TIFFfree(origdir);			return 0;		} else {			_TIFFmemcpy(origdir, tif->tif_base + off,				    dircount16 * dirsize);		}		if (nextdiroff) {			off += dircount16 * dirsize;			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				m=off+sizeof(uint32);				if ((m<off)||(m<(tmsize_t)sizeof(uint32))||(m>tif->tif_size))					nextdiroff32 = 0;				else					_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,						    sizeof (uint32));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff = nextdiroff32;			}			else			{				m=off+sizeof(uint64);				if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size))					*nextdiroff = 0;				else					_TIFFmemcpy(nextdiroff, tif->tif_base + off,						    sizeof (uint64));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}	}	dir = (TIFFDirEntry*)_TIFFCheckMalloc(tif, dircount16,						sizeof(TIFFDirEntry),						"to read TIFF directory");	if (dir==0)	{		_TIFFfree(origdir);		return 0;	}	ma=(uint8*)origdir;	mb=dir;	for (n=0; n<dircount16; n++)	{		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)ma);		mb->tdir_tag=*(uint16*)ma;		ma+=sizeof(uint16);		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)ma);		mb->tdir_type=*(uint16*)ma;		ma+=sizeof(uint16);		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)ma);			mb->tdir_count=(uint64)(*(uint32*)ma);			ma+=sizeof(uint32);			*(uint32*)(&mb->tdir_offset)=*(uint32*)ma;			ma+=sizeof(uint32);		}		else		{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)ma);                        mb->tdir_count=TIFFReadUInt64(ma);			ma+=sizeof(uint64);			mb->tdir_offset.toff_long8=TIFFReadUInt64(ma);			ma+=sizeof(uint64);		}		mb++;	}	_TIFFfree(origdir);	*pdir = dir;	return dircount16;}
static uint16
uint16
TIFFFetchDirectory(TIFF* tif, uint64 diroff, TIFFDirEntry** pdir,                   uint64 *nextdiroff)
TIFFFetchDirectory
TIFF* tif
TIFF
TIFF
* tif
*
tif
uint64 diroff
uint64
uint64
diroff
diroff
TIFFDirEntry** pdir
TIFFDirEntry
TIFFDirEntry
** pdir
*
*
pdir
uint64 *nextdiroff
uint64
uint64
*nextdiroff
*
nextdiroff
{	static const char module[] = "TIFFFetchDirectory";	void* origdir;	uint16 dircount16;	uint32 dirsize;	TIFFDirEntry* dir;	uint8* ma;	TIFFDirEntry* mb;	uint16 n;	assert(pdir);	tif->tif_diroff = diroff;	if (nextdiroff)		*nextdiroff = 0;	if (!isMapped(tif)) {		if (!SeekOK(tif, tif->tif_diroff)) {			TIFFErrorExt(tif->tif_clientdata, module,				"%s: Seek error accessing TIFF directory",				tif->tif_name);			return 0;		}		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			if (!ReadOK(tif, &dircount16, sizeof (uint16))) {				TIFFErrorExt(tif->tif_clientdata, module,				    "%s: Can not read TIFF directory count",				    tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		} else {			uint64 dircount64;			if (!ReadOK(tif, &dircount64, sizeof (uint64))) {				TIFFErrorExt(tif->tif_clientdata, module,					"%s: Can not read TIFF directory count",					tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}		origdir = _TIFFCheckMalloc(tif, dircount16,		    dirsize, "to read TIFF directory");		if (origdir == NULL)			return 0;		if (!ReadOK(tif, origdir, (tmsize_t)(dircount16*dirsize))) {			TIFFErrorExt(tif->tif_clientdata, module,				"%.100s: Can not read TIFF directory",				tif->tif_name);			_TIFFfree(origdir);			return 0;		}		/*		 * Read offset to next directory for sequential scans if		 * needed.		 */		if (nextdiroff)		{			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				if (!ReadOK(tif, &nextdiroff32, sizeof(uint32)))					nextdiroff32 = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff=nextdiroff32;			} else {				if (!ReadOK(tif, nextdiroff, sizeof(uint64)))					*nextdiroff = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}	} else {		tmsize_t m;		tmsize_t off = (tmsize_t) tif->tif_diroff;		if ((uint64)off!=tif->tif_diroff)		{			TIFFErrorExt(tif->tif_clientdata,module,"Can not read TIFF directory count");			return(0);		}		/*		 * Check for integer overflow when validating the dir_off,		 * otherwise a very high offset may cause an OOB read and		 * crash the client. Make two comparisons instead of		 *		 *  off + sizeof(uint16) > tif->tif_size		 *		 * to avoid overflow.		 */		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			m=off+sizeof(uint16);			if ((m<off)||(m<(tmsize_t)sizeof(uint16))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount16, tif->tif_base + off,					    sizeof(uint16));			}			off += sizeof (uint16);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		}		else		{			tmsize_t m;			uint64 dircount64;			m=off+sizeof(uint64);			if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount64, tif->tif_base + off,					    sizeof(uint64));			}			off += sizeof (uint64);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}		if (dircount16 == 0 )		{			TIFFErrorExt(tif->tif_clientdata, module,			             "Sanity check on directory count failed, zero tag directories not supported");			return 0;		}		origdir = _TIFFCheckMalloc(tif, dircount16,						dirsize,						"to read TIFF directory");		if (origdir == NULL)			return 0;		m=off+dircount16*dirsize;		if ((m<off)||(m<(tmsize_t)(dircount16*dirsize))||(m>tif->tif_size)) {			TIFFErrorExt(tif->tif_clientdata, module,				     "Can not read TIFF directory");			_TIFFfree(origdir);			return 0;		} else {			_TIFFmemcpy(origdir, tif->tif_base + off,				    dircount16 * dirsize);		}		if (nextdiroff) {			off += dircount16 * dirsize;			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				m=off+sizeof(uint32);				if ((m<off)||(m<(tmsize_t)sizeof(uint32))||(m>tif->tif_size))					nextdiroff32 = 0;				else					_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,						    sizeof (uint32));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff = nextdiroff32;			}			else			{				m=off+sizeof(uint64);				if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size))					*nextdiroff = 0;				else					_TIFFmemcpy(nextdiroff, tif->tif_base + off,						    sizeof (uint64));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}	}	dir = (TIFFDirEntry*)_TIFFCheckMalloc(tif, dircount16,						sizeof(TIFFDirEntry),						"to read TIFF directory");	if (dir==0)	{		_TIFFfree(origdir);		return 0;	}	ma=(uint8*)origdir;	mb=dir;	for (n=0; n<dircount16; n++)	{		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)ma);		mb->tdir_tag=*(uint16*)ma;		ma+=sizeof(uint16);		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)ma);		mb->tdir_type=*(uint16*)ma;		ma+=sizeof(uint16);		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)ma);			mb->tdir_count=(uint64)(*(uint32*)ma);			ma+=sizeof(uint32);			*(uint32*)(&mb->tdir_offset)=*(uint32*)ma;			ma+=sizeof(uint32);		}		else		{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)ma);                        mb->tdir_count=TIFFReadUInt64(ma);			ma+=sizeof(uint64);			mb->tdir_offset.toff_long8=TIFFReadUInt64(ma);			ma+=sizeof(uint64);		}		mb++;	}	_TIFFfree(origdir);	*pdir = dir;	return dircount16;}
static const char module[] = "TIFFFetchDirectory";
static const char module[] = "TIFFFetchDirectory";
static const char
module[] = "TIFFFetchDirectory"
module
[]
= "TIFFFetchDirectory"
"TIFFFetchDirectory"
void* origdir;
void* origdir;
void
* origdir
*
origdir
uint16 dircount16;
uint16 dircount16;
uint16
uint16
dircount16
dircount16
uint32 dirsize;
uint32 dirsize;
uint32
uint32
dirsize
dirsize
TIFFDirEntry* dir;
TIFFDirEntry* dir;
TIFFDirEntry
TIFFDirEntry
* dir
*
dir
uint8* ma;
uint8* ma;
uint8
uint8
* ma
*
ma
TIFFDirEntry* mb;
TIFFDirEntry* mb;
TIFFDirEntry
TIFFDirEntry
* mb
*
mb
uint16 n;
uint16 n;
uint16
uint16
n
n
assert(pdir);
assert(pdir)
assert
assert
pdir
pdir
tif->tif_diroff = diroff;
tif->tif_diroff = diroff
tif->tif_diroff
tif
tif
tif_diroff
diroff
diroff
if (nextdiroff)		*nextdiroff = 0;
nextdiroff
nextdiroff
*nextdiroff = 0;
*nextdiroff = 0
*nextdiroff
nextdiroff
nextdiroff
0
if (!isMapped(tif)) {		if (!SeekOK(tif, tif->tif_diroff)) {			TIFFErrorExt(tif->tif_clientdata, module,				"%s: Seek error accessing TIFF directory",				tif->tif_name);			return 0;		}		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			if (!ReadOK(tif, &dircount16, sizeof (uint16))) {				TIFFErrorExt(tif->tif_clientdata, module,				    "%s: Can not read TIFF directory count",				    tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		} else {			uint64 dircount64;			if (!ReadOK(tif, &dircount64, sizeof (uint64))) {				TIFFErrorExt(tif->tif_clientdata, module,					"%s: Can not read TIFF directory count",					tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}		origdir = _TIFFCheckMalloc(tif, dircount16,		    dirsize, "to read TIFF directory");		if (origdir == NULL)			return 0;		if (!ReadOK(tif, origdir, (tmsize_t)(dircount16*dirsize))) {			TIFFErrorExt(tif->tif_clientdata, module,				"%.100s: Can not read TIFF directory",				tif->tif_name);			_TIFFfree(origdir);			return 0;		}		/*		 * Read offset to next directory for sequential scans if		 * needed.		 */		if (nextdiroff)		{			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				if (!ReadOK(tif, &nextdiroff32, sizeof(uint32)))					nextdiroff32 = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff=nextdiroff32;			} else {				if (!ReadOK(tif, nextdiroff, sizeof(uint64)))					*nextdiroff = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}	} else {		tmsize_t m;		tmsize_t off = (tmsize_t) tif->tif_diroff;		if ((uint64)off!=tif->tif_diroff)		{			TIFFErrorExt(tif->tif_clientdata,module,"Can not read TIFF directory count");			return(0);		}		/*		 * Check for integer overflow when validating the dir_off,		 * otherwise a very high offset may cause an OOB read and		 * crash the client. Make two comparisons instead of		 *		 *  off + sizeof(uint16) > tif->tif_size		 *		 * to avoid overflow.		 */		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			m=off+sizeof(uint16);			if ((m<off)||(m<(tmsize_t)sizeof(uint16))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount16, tif->tif_base + off,					    sizeof(uint16));			}			off += sizeof (uint16);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		}		else		{			tmsize_t m;			uint64 dircount64;			m=off+sizeof(uint64);			if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount64, tif->tif_base + off,					    sizeof(uint64));			}			off += sizeof (uint64);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}		if (dircount16 == 0 )		{			TIFFErrorExt(tif->tif_clientdata, module,			             "Sanity check on directory count failed, zero tag directories not supported");			return 0;		}		origdir = _TIFFCheckMalloc(tif, dircount16,						dirsize,						"to read TIFF directory");		if (origdir == NULL)			return 0;		m=off+dircount16*dirsize;		if ((m<off)||(m<(tmsize_t)(dircount16*dirsize))||(m>tif->tif_size)) {			TIFFErrorExt(tif->tif_clientdata, module,				     "Can not read TIFF directory");			_TIFFfree(origdir);			return 0;		} else {			_TIFFmemcpy(origdir, tif->tif_base + off,				    dircount16 * dirsize);		}		if (nextdiroff) {			off += dircount16 * dirsize;			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				m=off+sizeof(uint32);				if ((m<off)||(m<(tmsize_t)sizeof(uint32))||(m>tif->tif_size))					nextdiroff32 = 0;				else					_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,						    sizeof (uint32));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff = nextdiroff32;			}			else			{				m=off+sizeof(uint64);				if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size))					*nextdiroff = 0;				else					_TIFFmemcpy(nextdiroff, tif->tif_base + off,						    sizeof (uint64));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}	}
!isMapped(tif)
isMapped(tif)
isMapped
isMapped
tif
tif
{		if (!SeekOK(tif, tif->tif_diroff)) {			TIFFErrorExt(tif->tif_clientdata, module,				"%s: Seek error accessing TIFF directory",				tif->tif_name);			return 0;		}		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			if (!ReadOK(tif, &dircount16, sizeof (uint16))) {				TIFFErrorExt(tif->tif_clientdata, module,				    "%s: Can not read TIFF directory count",				    tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		} else {			uint64 dircount64;			if (!ReadOK(tif, &dircount64, sizeof (uint64))) {				TIFFErrorExt(tif->tif_clientdata, module,					"%s: Can not read TIFF directory count",					tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}		origdir = _TIFFCheckMalloc(tif, dircount16,		    dirsize, "to read TIFF directory");		if (origdir == NULL)			return 0;		if (!ReadOK(tif, origdir, (tmsize_t)(dircount16*dirsize))) {			TIFFErrorExt(tif->tif_clientdata, module,				"%.100s: Can not read TIFF directory",				tif->tif_name);			_TIFFfree(origdir);			return 0;		}		/*		 * Read offset to next directory for sequential scans if		 * needed.		 */		if (nextdiroff)		{			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				if (!ReadOK(tif, &nextdiroff32, sizeof(uint32)))					nextdiroff32 = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff=nextdiroff32;			} else {				if (!ReadOK(tif, nextdiroff, sizeof(uint64)))					*nextdiroff = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}	}
if (!SeekOK(tif, tif->tif_diroff)) {			TIFFErrorExt(tif->tif_clientdata, module,				"%s: Seek error accessing TIFF directory",				tif->tif_name);			return 0;		}
!SeekOK(tif, tif->tif_diroff)
SeekOK(tif, tif->tif_diroff)
SeekOK
SeekOK
tif
tif
tif->tif_diroff
tif
tif
tif_diroff
{			TIFFErrorExt(tif->tif_clientdata, module,				"%s: Seek error accessing TIFF directory",				tif->tif_name);			return 0;		}
TIFFErrorExt(tif->tif_clientdata, module,				"%s: Seek error accessing TIFF directory",				tif->tif_name);
TIFFErrorExt(tif->tif_clientdata, module,				"%s: Seek error accessing TIFF directory",				tif->tif_name)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"%s: Seek error accessing TIFF directory"
tif->tif_name
tif
tif
tif_name
return 0;
0
if (!(tif->tif_flags&TIFF_BIGTIFF))		{			if (!ReadOK(tif, &dircount16, sizeof (uint16))) {				TIFFErrorExt(tif->tif_clientdata, module,				    "%s: Can not read TIFF directory count",				    tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		} else {			uint64 dircount64;			if (!ReadOK(tif, &dircount64, sizeof (uint64))) {				TIFFErrorExt(tif->tif_clientdata, module,					"%s: Can not read TIFF directory count",					tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}
!(tif->tif_flags&TIFF_BIGTIFF)
(tif->tif_flags&TIFF_BIGTIFF)
tif->tif_flags&TIFF_BIGTIFF
tif->tif_flags
tif
tif
tif_flags
TIFF_BIGTIFF
TIFF_BIGTIFF
{			if (!ReadOK(tif, &dircount16, sizeof (uint16))) {				TIFFErrorExt(tif->tif_clientdata, module,				    "%s: Can not read TIFF directory count",				    tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		}
if (!ReadOK(tif, &dircount16, sizeof (uint16))) {				TIFFErrorExt(tif->tif_clientdata, module,				    "%s: Can not read TIFF directory count",				    tif->tif_name);				return 0;			}
!ReadOK(tif, &dircount16, sizeof (uint16))
ReadOK(tif, &dircount16, sizeof (uint16))
ReadOK
ReadOK
tif
tif
&dircount16
dircount16
dircount16
sizeof (uint16)
uint16
uint16
uint16

{				TIFFErrorExt(tif->tif_clientdata, module,				    "%s: Can not read TIFF directory count",				    tif->tif_name);				return 0;			}
TIFFErrorExt(tif->tif_clientdata, module,				    "%s: Can not read TIFF directory count",				    tif->tif_name);
TIFFErrorExt(tif->tif_clientdata, module,				    "%s: Can not read TIFF directory count",				    tif->tif_name)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"%s: Can not read TIFF directory count"
tif->tif_name
tif
tif
tif_name
return 0;
0
if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);
tif->tif_flags & TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabShort(&dircount16);
TIFFSwabShort(&dircount16)
TIFFSwabShort
TIFFSwabShort
&dircount16
dircount16
dircount16
if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}
dircount16>4096
dircount16
dircount16
4096
{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}
TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");
TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Sanity check on directory count failed, this is probably not a valid IFD offset"
return 0;
0
dirsize = 12;
dirsize = 12
dirsize
dirsize
12
{			uint64 dircount64;			if (!ReadOK(tif, &dircount64, sizeof (uint64))) {				TIFFErrorExt(tif->tif_clientdata, module,					"%s: Can not read TIFF directory count",					tif->tif_name);				return 0;			}			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}
uint64 dircount64;
uint64 dircount64;
uint64
uint64
dircount64
dircount64
if (!ReadOK(tif, &dircount64, sizeof (uint64))) {				TIFFErrorExt(tif->tif_clientdata, module,					"%s: Can not read TIFF directory count",					tif->tif_name);				return 0;			}
!ReadOK(tif, &dircount64, sizeof (uint64))
ReadOK(tif, &dircount64, sizeof (uint64))
ReadOK
ReadOK
tif
tif
&dircount64
dircount64
dircount64
sizeof (uint64)
uint64
uint64
uint64

{				TIFFErrorExt(tif->tif_clientdata, module,					"%s: Can not read TIFF directory count",					tif->tif_name);				return 0;			}
TIFFErrorExt(tif->tif_clientdata, module,					"%s: Can not read TIFF directory count",					tif->tif_name);
TIFFErrorExt(tif->tif_clientdata, module,					"%s: Can not read TIFF directory count",					tif->tif_name)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"%s: Can not read TIFF directory count"
tif->tif_name
tif
tif
tif_name
return 0;
0
if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);
tif->tif_flags & TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong8(&dircount64);
TIFFSwabLong8(&dircount64)
TIFFSwabLong8
TIFFSwabLong8
&dircount64
dircount64
dircount64
if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}
dircount64>4096
dircount64
dircount64
4096
{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}
TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");
TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Sanity check on directory count failed, this is probably not a valid IFD offset"
return 0;
0
dircount16 = (uint16)dircount64;
dircount16 = (uint16)dircount64
dircount16
dircount16
(uint16)dircount64
uint16
uint16
uint16

dircount64
dircount64
dirsize = 20;
dirsize = 20
dirsize
dirsize
20
origdir = _TIFFCheckMalloc(tif, dircount16,		    dirsize, "to read TIFF directory");
origdir = _TIFFCheckMalloc(tif, dircount16,		    dirsize, "to read TIFF directory")
origdir
origdir
_TIFFCheckMalloc(tif, dircount16,		    dirsize, "to read TIFF directory")
_TIFFCheckMalloc
_TIFFCheckMalloc
tif
tif
dircount16
dircount16
dirsize
dirsize
"to read TIFF directory"
if (origdir == NULL)			return 0;
origdir == NULL
origdir
origdir
NULL
NULL
return 0;
0
if (!ReadOK(tif, origdir, (tmsize_t)(dircount16*dirsize))) {			TIFFErrorExt(tif->tif_clientdata, module,				"%.100s: Can not read TIFF directory",				tif->tif_name);			_TIFFfree(origdir);			return 0;		}
!ReadOK(tif, origdir, (tmsize_t)(dircount16*dirsize))
ReadOK(tif, origdir, (tmsize_t)(dircount16*dirsize))
ReadOK
ReadOK
tif
tif
origdir
origdir
(tmsize_t)(dircount16*dirsize)
(tmsize_t)
tmsize_t
tmsize_t
dircount16*dirsize
dircount16
dircount16
dirsize
dirsize
{			TIFFErrorExt(tif->tif_clientdata, module,				"%.100s: Can not read TIFF directory",				tif->tif_name);			_TIFFfree(origdir);			return 0;		}
TIFFErrorExt(tif->tif_clientdata, module,				"%.100s: Can not read TIFF directory",				tif->tif_name);
TIFFErrorExt(tif->tif_clientdata, module,				"%.100s: Can not read TIFF directory",				tif->tif_name)
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"%.100s: Can not read TIFF directory"
tif->tif_name
tif
tif
tif_name
_TIFFfree(origdir);
_TIFFfree(origdir)
_TIFFfree
_TIFFfree
origdir
origdir
return 0;
0
if (nextdiroff)		{			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				if (!ReadOK(tif, &nextdiroff32, sizeof(uint32)))					nextdiroff32 = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff=nextdiroff32;			} else {				if (!ReadOK(tif, nextdiroff, sizeof(uint64)))					*nextdiroff = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}
nextdiroff
nextdiroff
{			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				if (!ReadOK(tif, &nextdiroff32, sizeof(uint32)))					nextdiroff32 = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff=nextdiroff32;			} else {				if (!ReadOK(tif, nextdiroff, sizeof(uint64)))					*nextdiroff = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}
if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				if (!ReadOK(tif, &nextdiroff32, sizeof(uint32)))					nextdiroff32 = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff=nextdiroff32;			} else {				if (!ReadOK(tif, nextdiroff, sizeof(uint64)))					*nextdiroff = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}
!(tif->tif_flags&TIFF_BIGTIFF)
(tif->tif_flags&TIFF_BIGTIFF)
tif->tif_flags&TIFF_BIGTIFF
tif->tif_flags
tif
tif
tif_flags
TIFF_BIGTIFF
TIFF_BIGTIFF
{				uint32 nextdiroff32;				if (!ReadOK(tif, &nextdiroff32, sizeof(uint32)))					nextdiroff32 = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff=nextdiroff32;			}
uint32 nextdiroff32;
uint32 nextdiroff32;
uint32
uint32
nextdiroff32
nextdiroff32
if (!ReadOK(tif, &nextdiroff32, sizeof(uint32)))					nextdiroff32 = 0;
!ReadOK(tif, &nextdiroff32, sizeof(uint32))
ReadOK(tif, &nextdiroff32, sizeof(uint32))
ReadOK
ReadOK
tif
tif
&nextdiroff32
nextdiroff32
nextdiroff32
sizeof(uint32)
uint32
uint32
uint32

nextdiroff32 = 0;
nextdiroff32 = 0
nextdiroff32
nextdiroff32
0
if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong(&nextdiroff32);
TIFFSwabLong(&nextdiroff32)
TIFFSwabLong
TIFFSwabLong
&nextdiroff32
nextdiroff32
nextdiroff32
*nextdiroff=nextdiroff32;
*nextdiroff=nextdiroff32
*nextdiroff
nextdiroff
nextdiroff
nextdiroff32
nextdiroff32
{				if (!ReadOK(tif, nextdiroff, sizeof(uint64)))					*nextdiroff = 0;				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}
if (!ReadOK(tif, nextdiroff, sizeof(uint64)))					*nextdiroff = 0;
!ReadOK(tif, nextdiroff, sizeof(uint64))
ReadOK(tif, nextdiroff, sizeof(uint64))
ReadOK
ReadOK
tif
tif
nextdiroff
nextdiroff
sizeof(uint64)
uint64
uint64
uint64

*nextdiroff = 0;
*nextdiroff = 0
*nextdiroff
nextdiroff
nextdiroff
0
if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong8(nextdiroff);
TIFFSwabLong8(nextdiroff)
TIFFSwabLong8
TIFFSwabLong8
nextdiroff
nextdiroff
{		tmsize_t m;		tmsize_t off = (tmsize_t) tif->tif_diroff;		if ((uint64)off!=tif->tif_diroff)		{			TIFFErrorExt(tif->tif_clientdata,module,"Can not read TIFF directory count");			return(0);		}		/*		 * Check for integer overflow when validating the dir_off,		 * otherwise a very high offset may cause an OOB read and		 * crash the client. Make two comparisons instead of		 *		 *  off + sizeof(uint16) > tif->tif_size		 *		 * to avoid overflow.		 */		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			m=off+sizeof(uint16);			if ((m<off)||(m<(tmsize_t)sizeof(uint16))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount16, tif->tif_base + off,					    sizeof(uint16));			}			off += sizeof (uint16);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		}		else		{			tmsize_t m;			uint64 dircount64;			m=off+sizeof(uint64);			if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount64, tif->tif_base + off,					    sizeof(uint64));			}			off += sizeof (uint64);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}		if (dircount16 == 0 )		{			TIFFErrorExt(tif->tif_clientdata, module,			             "Sanity check on directory count failed, zero tag directories not supported");			return 0;		}		origdir = _TIFFCheckMalloc(tif, dircount16,						dirsize,						"to read TIFF directory");		if (origdir == NULL)			return 0;		m=off+dircount16*dirsize;		if ((m<off)||(m<(tmsize_t)(dircount16*dirsize))||(m>tif->tif_size)) {			TIFFErrorExt(tif->tif_clientdata, module,				     "Can not read TIFF directory");			_TIFFfree(origdir);			return 0;		} else {			_TIFFmemcpy(origdir, tif->tif_base + off,				    dircount16 * dirsize);		}		if (nextdiroff) {			off += dircount16 * dirsize;			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				m=off+sizeof(uint32);				if ((m<off)||(m<(tmsize_t)sizeof(uint32))||(m>tif->tif_size))					nextdiroff32 = 0;				else					_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,						    sizeof (uint32));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff = nextdiroff32;			}			else			{				m=off+sizeof(uint64);				if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size))					*nextdiroff = 0;				else					_TIFFmemcpy(nextdiroff, tif->tif_base + off,						    sizeof (uint64));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}	}
tmsize_t m;
tmsize_t m;
tmsize_t
tmsize_t
m
m
tmsize_t off = (tmsize_t) tif->tif_diroff;
tmsize_t off = (tmsize_t) tif->tif_diroff;
tmsize_t
tmsize_t
off = (tmsize_t) tif->tif_diroff
off
= (tmsize_t) tif->tif_diroff
(tmsize_t) tif->tif_diroff
tmsize_t
tmsize_t
tmsize_t

tif->tif_diroff
tif
tif
tif_diroff
if ((uint64)off!=tif->tif_diroff)		{			TIFFErrorExt(tif->tif_clientdata,module,"Can not read TIFF directory count");			return(0);		}
(uint64)off!=tif->tif_diroff
(uint64)off
uint64
uint64
uint64

off
off
tif->tif_diroff
tif
tif
tif_diroff
{			TIFFErrorExt(tif->tif_clientdata,module,"Can not read TIFF directory count");			return(0);		}
TIFFErrorExt(tif->tif_clientdata,module,"Can not read TIFF directory count");
TIFFErrorExt(tif->tif_clientdata,module,"Can not read TIFF directory count")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Can not read TIFF directory count"
return(0);
(0)
0
if (!(tif->tif_flags&TIFF_BIGTIFF))		{			m=off+sizeof(uint16);			if ((m<off)||(m<(tmsize_t)sizeof(uint16))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount16, tif->tif_base + off,					    sizeof(uint16));			}			off += sizeof (uint16);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		}		else		{			tmsize_t m;			uint64 dircount64;			m=off+sizeof(uint64);			if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount64, tif->tif_base + off,					    sizeof(uint64));			}			off += sizeof (uint64);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}
!(tif->tif_flags&TIFF_BIGTIFF)
(tif->tif_flags&TIFF_BIGTIFF)
tif->tif_flags&TIFF_BIGTIFF
tif->tif_flags
tif
tif
tif_flags
TIFF_BIGTIFF
TIFF_BIGTIFF
{			m=off+sizeof(uint16);			if ((m<off)||(m<(tmsize_t)sizeof(uint16))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount16, tif->tif_base + off,					    sizeof(uint16));			}			off += sizeof (uint16);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);			if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dirsize = 12;		}
m=off+sizeof(uint16);
m=off+sizeof(uint16)
m
m
off+sizeof(uint16)
off
off
sizeof(uint16)
uint16
uint16
uint16

if ((m<off)||(m<(tmsize_t)sizeof(uint16))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount16, tif->tif_base + off,					    sizeof(uint16));			}
(m<off)||(m<(tmsize_t)sizeof(uint16))||(m>tif->tif_size)
(m<off)||(m<(tmsize_t)sizeof(uint16))
(m<off)
m<off
m
m
off
off
(m<(tmsize_t)sizeof(uint16))
m<(tmsize_t)sizeof(uint16)
m
m
(tmsize_t)sizeof(uint16)
tmsize_t
tmsize_t
tmsize_t

sizeof(uint16)
uint16
uint16
uint16

(m>tif->tif_size)
m>tif->tif_size
m
m
tif->tif_size
tif
tif
tif_size
{				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			}
TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");
TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Can not read TIFF directory count"
return 0;
0
{				_TIFFmemcpy(&dircount16, tif->tif_base + off,					    sizeof(uint16));			}
_TIFFmemcpy(&dircount16, tif->tif_base + off,					    sizeof(uint16));
_TIFFmemcpy(&dircount16, tif->tif_base + off,					    sizeof(uint16))
_TIFFmemcpy
_TIFFmemcpy
&dircount16
dircount16
dircount16
tif->tif_base + off
tif->tif_base
tif
tif
tif_base
off
off
sizeof(uint16)
uint16
uint16
uint16

off += sizeof (uint16);
off += sizeof (uint16)
off
off
sizeof (uint16)
uint16
uint16
uint16

if (tif->tif_flags & TIFF_SWAB)				TIFFSwabShort(&dircount16);
tif->tif_flags & TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabShort(&dircount16);
TIFFSwabShort(&dircount16)
TIFFSwabShort
TIFFSwabShort
&dircount16
dircount16
dircount16
if (dircount16>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}
dircount16>4096
dircount16
dircount16
4096
{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}
TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");
TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Sanity check on directory count failed, this is probably not a valid IFD offset"
return 0;
0
dirsize = 12;
dirsize = 12
dirsize
dirsize
12
{			tmsize_t m;			uint64 dircount64;			m=off+sizeof(uint64);			if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount64, tif->tif_base + off,					    sizeof(uint64));			}			off += sizeof (uint64);			if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);			if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}			dircount16 = (uint16)dircount64;			dirsize = 20;		}
tmsize_t m;
tmsize_t m;
tmsize_t
tmsize_t
m
m
uint64 dircount64;
uint64 dircount64;
uint64
uint64
dircount64
dircount64
m=off+sizeof(uint64);
m=off+sizeof(uint64)
m
m
off+sizeof(uint64)
off
off
sizeof(uint64)
uint64
uint64
uint64

if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size)) {				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			} else {				_TIFFmemcpy(&dircount64, tif->tif_base + off,					    sizeof(uint64));			}
(m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size)
(m<off)||(m<(tmsize_t)sizeof(uint64))
(m<off)
m<off
m
m
off
off
(m<(tmsize_t)sizeof(uint64))
m<(tmsize_t)sizeof(uint64)
m
m
(tmsize_t)sizeof(uint64)
tmsize_t
tmsize_t
tmsize_t

sizeof(uint64)
uint64
uint64
uint64

(m>tif->tif_size)
m>tif->tif_size
m
m
tif->tif_size
tif
tif
tif_size
{				TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");				return 0;			}
TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count");
TIFFErrorExt(tif->tif_clientdata, module,					"Can not read TIFF directory count")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Can not read TIFF directory count"
return 0;
0
{				_TIFFmemcpy(&dircount64, tif->tif_base + off,					    sizeof(uint64));			}
_TIFFmemcpy(&dircount64, tif->tif_base + off,					    sizeof(uint64));
_TIFFmemcpy(&dircount64, tif->tif_base + off,					    sizeof(uint64))
_TIFFmemcpy
_TIFFmemcpy
&dircount64
dircount64
dircount64
tif->tif_base + off
tif->tif_base
tif
tif
tif_base
off
off
sizeof(uint64)
uint64
uint64
uint64

off += sizeof (uint64);
off += sizeof (uint64)
off
off
sizeof (uint64)
uint64
uint64
uint64

if (tif->tif_flags & TIFF_SWAB)				TIFFSwabLong8(&dircount64);
tif->tif_flags & TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong8(&dircount64);
TIFFSwabLong8(&dircount64)
TIFFSwabLong8
TIFFSwabLong8
&dircount64
dircount64
dircount64
if (dircount64>4096)			{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}
dircount64>4096
dircount64
dircount64
4096
{				TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");				return 0;			}
TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset");
TIFFErrorExt(tif->tif_clientdata, module,				    "Sanity check on directory count failed, this is probably not a valid IFD offset")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Sanity check on directory count failed, this is probably not a valid IFD offset"
return 0;
0
dircount16 = (uint16)dircount64;
dircount16 = (uint16)dircount64
dircount16
dircount16
(uint16)dircount64
uint16
uint16
uint16

dircount64
dircount64
dirsize = 20;
dirsize = 20
dirsize
dirsize
20
if (dircount16 == 0 )		{			TIFFErrorExt(tif->tif_clientdata, module,			             "Sanity check on directory count failed, zero tag directories not supported");			return 0;		}
dircount16 == 0
dircount16
dircount16
0
{			TIFFErrorExt(tif->tif_clientdata, module,			             "Sanity check on directory count failed, zero tag directories not supported");			return 0;		}
TIFFErrorExt(tif->tif_clientdata, module,			             "Sanity check on directory count failed, zero tag directories not supported");
TIFFErrorExt(tif->tif_clientdata, module,			             "Sanity check on directory count failed, zero tag directories not supported")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Sanity check on directory count failed, zero tag directories not supported"
return 0;
0
origdir = _TIFFCheckMalloc(tif, dircount16,						dirsize,						"to read TIFF directory");
origdir = _TIFFCheckMalloc(tif, dircount16,						dirsize,						"to read TIFF directory")
origdir
origdir
_TIFFCheckMalloc(tif, dircount16,						dirsize,						"to read TIFF directory")
_TIFFCheckMalloc
_TIFFCheckMalloc
tif
tif
dircount16
dircount16
dirsize
dirsize
"to read TIFF directory"
if (origdir == NULL)			return 0;
origdir == NULL
origdir
origdir
NULL
NULL
return 0;
0
m=off+dircount16*dirsize;
m=off+dircount16*dirsize
m
m
off+dircount16*dirsize
off
off
dircount16*dirsize
dircount16
dircount16
dirsize
dirsize
if ((m<off)||(m<(tmsize_t)(dircount16*dirsize))||(m>tif->tif_size)) {			TIFFErrorExt(tif->tif_clientdata, module,				     "Can not read TIFF directory");			_TIFFfree(origdir);			return 0;		} else {			_TIFFmemcpy(origdir, tif->tif_base + off,				    dircount16 * dirsize);		}
(m<off)||(m<(tmsize_t)(dircount16*dirsize))||(m>tif->tif_size)
(m<off)||(m<(tmsize_t)(dircount16*dirsize))
(m<off)
m<off
m
m
off
off
(m<(tmsize_t)(dircount16*dirsize))
m<(tmsize_t)(dircount16*dirsize)
m
m
(tmsize_t)(dircount16*dirsize)
(tmsize_t)
tmsize_t
tmsize_t
dircount16*dirsize
dircount16
dircount16
dirsize
dirsize
(m>tif->tif_size)
m>tif->tif_size
m
m
tif->tif_size
tif
tif
tif_size
{			TIFFErrorExt(tif->tif_clientdata, module,				     "Can not read TIFF directory");			_TIFFfree(origdir);			return 0;		}
TIFFErrorExt(tif->tif_clientdata, module,				     "Can not read TIFF directory");
TIFFErrorExt(tif->tif_clientdata, module,				     "Can not read TIFF directory")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Can not read TIFF directory"
_TIFFfree(origdir);
_TIFFfree(origdir)
_TIFFfree
_TIFFfree
origdir
origdir
return 0;
0
{			_TIFFmemcpy(origdir, tif->tif_base + off,				    dircount16 * dirsize);		}
_TIFFmemcpy(origdir, tif->tif_base + off,				    dircount16 * dirsize);
_TIFFmemcpy(origdir, tif->tif_base + off,				    dircount16 * dirsize)
_TIFFmemcpy
_TIFFmemcpy
origdir
origdir
tif->tif_base + off
tif->tif_base
tif
tif
tif_base
off
off
dircount16 * dirsize
dircount16
dircount16
dirsize
dirsize
if (nextdiroff) {			off += dircount16 * dirsize;			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				m=off+sizeof(uint32);				if ((m<off)||(m<(tmsize_t)sizeof(uint32))||(m>tif->tif_size))					nextdiroff32 = 0;				else					_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,						    sizeof (uint32));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff = nextdiroff32;			}			else			{				m=off+sizeof(uint64);				if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size))					*nextdiroff = 0;				else					_TIFFmemcpy(nextdiroff, tif->tif_base + off,						    sizeof (uint64));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}
nextdiroff
nextdiroff
{			off += dircount16 * dirsize;			if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				m=off+sizeof(uint32);				if ((m<off)||(m<(tmsize_t)sizeof(uint32))||(m>tif->tif_size))					nextdiroff32 = 0;				else					_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,						    sizeof (uint32));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff = nextdiroff32;			}			else			{				m=off+sizeof(uint64);				if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size))					*nextdiroff = 0;				else					_TIFFmemcpy(nextdiroff, tif->tif_base + off,						    sizeof (uint64));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}		}
off += dircount16 * dirsize;
off += dircount16 * dirsize
off
off
dircount16 * dirsize
dircount16
dircount16
dirsize
dirsize
if (!(tif->tif_flags&TIFF_BIGTIFF))			{				uint32 nextdiroff32;				m=off+sizeof(uint32);				if ((m<off)||(m<(tmsize_t)sizeof(uint32))||(m>tif->tif_size))					nextdiroff32 = 0;				else					_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,						    sizeof (uint32));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff = nextdiroff32;			}			else			{				m=off+sizeof(uint64);				if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size))					*nextdiroff = 0;				else					_TIFFmemcpy(nextdiroff, tif->tif_base + off,						    sizeof (uint64));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}
!(tif->tif_flags&TIFF_BIGTIFF)
(tif->tif_flags&TIFF_BIGTIFF)
tif->tif_flags&TIFF_BIGTIFF
tif->tif_flags
tif
tif
tif_flags
TIFF_BIGTIFF
TIFF_BIGTIFF
{				uint32 nextdiroff32;				m=off+sizeof(uint32);				if ((m<off)||(m<(tmsize_t)sizeof(uint32))||(m>tif->tif_size))					nextdiroff32 = 0;				else					_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,						    sizeof (uint32));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);				*nextdiroff = nextdiroff32;			}
uint32 nextdiroff32;
uint32 nextdiroff32;
uint32
uint32
nextdiroff32
nextdiroff32
m=off+sizeof(uint32);
m=off+sizeof(uint32)
m
m
off+sizeof(uint32)
off
off
sizeof(uint32)
uint32
uint32
uint32

if ((m<off)||(m<(tmsize_t)sizeof(uint32))||(m>tif->tif_size))					nextdiroff32 = 0;				else					_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,						    sizeof (uint32));
(m<off)||(m<(tmsize_t)sizeof(uint32))||(m>tif->tif_size)
(m<off)||(m<(tmsize_t)sizeof(uint32))
(m<off)
m<off
m
m
off
off
(m<(tmsize_t)sizeof(uint32))
m<(tmsize_t)sizeof(uint32)
m
m
(tmsize_t)sizeof(uint32)
tmsize_t
tmsize_t
tmsize_t

sizeof(uint32)
uint32
uint32
uint32

(m>tif->tif_size)
m>tif->tif_size
m
m
tif->tif_size
tif
tif
tif_size
nextdiroff32 = 0;
nextdiroff32 = 0
nextdiroff32
nextdiroff32
0
_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,						    sizeof (uint32));
_TIFFmemcpy(&nextdiroff32, tif->tif_base + off,						    sizeof (uint32))
_TIFFmemcpy
_TIFFmemcpy
&nextdiroff32
nextdiroff32
nextdiroff32
tif->tif_base + off
tif->tif_base
tif
tif
tif_base
off
off
sizeof (uint32)
uint32
uint32
uint32

if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong(&nextdiroff32);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong(&nextdiroff32);
TIFFSwabLong(&nextdiroff32)
TIFFSwabLong
TIFFSwabLong
&nextdiroff32
nextdiroff32
nextdiroff32
*nextdiroff = nextdiroff32;
*nextdiroff = nextdiroff32
*nextdiroff
nextdiroff
nextdiroff
nextdiroff32
nextdiroff32
{				m=off+sizeof(uint64);				if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size))					*nextdiroff = 0;				else					_TIFFmemcpy(nextdiroff, tif->tif_base + off,						    sizeof (uint64));				if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);			}
m=off+sizeof(uint64);
m=off+sizeof(uint64)
m
m
off+sizeof(uint64)
off
off
sizeof(uint64)
uint64
uint64
uint64

if ((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size))					*nextdiroff = 0;				else					_TIFFmemcpy(nextdiroff, tif->tif_base + off,						    sizeof (uint64));
(m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size)
(m<off)||(m<(tmsize_t)sizeof(uint64))
(m<off)
m<off
m
m
off
off
(m<(tmsize_t)sizeof(uint64))
m<(tmsize_t)sizeof(uint64)
m
m
(tmsize_t)sizeof(uint64)
tmsize_t
tmsize_t
tmsize_t

sizeof(uint64)
uint64
uint64
uint64

(m>tif->tif_size)
m>tif->tif_size
m
m
tif->tif_size
tif
tif
tif_size
*nextdiroff = 0;
*nextdiroff = 0
*nextdiroff
nextdiroff
nextdiroff
0
_TIFFmemcpy(nextdiroff, tif->tif_base + off,						    sizeof (uint64));
_TIFFmemcpy(nextdiroff, tif->tif_base + off,						    sizeof (uint64))
_TIFFmemcpy
_TIFFmemcpy
nextdiroff
nextdiroff
tif->tif_base + off
tif->tif_base
tif
tif
tif_base
off
off
sizeof (uint64)
uint64
uint64
uint64

if (tif->tif_flags&TIFF_SWAB)					TIFFSwabLong8(nextdiroff);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong8(nextdiroff);
TIFFSwabLong8(nextdiroff)
TIFFSwabLong8
TIFFSwabLong8
nextdiroff
nextdiroff
dir = (TIFFDirEntry*)_TIFFCheckMalloc(tif, dircount16,						sizeof(TIFFDirEntry),						"to read TIFF directory");
dir = (TIFFDirEntry*)_TIFFCheckMalloc(tif, dircount16,						sizeof(TIFFDirEntry),						"to read TIFF directory")
dir
dir
(TIFFDirEntry*)_TIFFCheckMalloc(tif, dircount16,						sizeof(TIFFDirEntry),						"to read TIFF directory")
TIFFDirEntry*
TIFFDirEntry
TIFFDirEntry
*
*
_TIFFCheckMalloc(tif, dircount16,						sizeof(TIFFDirEntry),						"to read TIFF directory")
_TIFFCheckMalloc
_TIFFCheckMalloc
tif
tif
dircount16
dircount16
sizeof(TIFFDirEntry)
TIFFDirEntry
TIFFDirEntry
TIFFDirEntry

"to read TIFF directory"
if (dir==0)	{		_TIFFfree(origdir);		return 0;	}
dir==0
dir
dir
0
{		_TIFFfree(origdir);		return 0;	}
_TIFFfree(origdir);
_TIFFfree(origdir)
_TIFFfree
_TIFFfree
origdir
origdir
return 0;
0
ma=(uint8*)origdir;
ma=(uint8*)origdir
ma
ma
(uint8*)origdir
uint8*
uint8
uint8
*
*
origdir
origdir
mb=dir;
mb=dir
mb
mb
dir
dir
for (n=0; n<dircount16; n++)	{		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)ma);		mb->tdir_tag=*(uint16*)ma;		ma+=sizeof(uint16);		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)ma);		mb->tdir_type=*(uint16*)ma;		ma+=sizeof(uint16);		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)ma);			mb->tdir_count=(uint64)(*(uint32*)ma);			ma+=sizeof(uint32);			*(uint32*)(&mb->tdir_offset)=*(uint32*)ma;			ma+=sizeof(uint32);		}		else		{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)ma);                        mb->tdir_count=TIFFReadUInt64(ma);			ma+=sizeof(uint64);			mb->tdir_offset.toff_long8=TIFFReadUInt64(ma);			ma+=sizeof(uint64);		}		mb++;	}
n=0;
n=0
n
n
0
n<dircount16
n
n
dircount16
dircount16
n++
n
n
{		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)ma);		mb->tdir_tag=*(uint16*)ma;		ma+=sizeof(uint16);		if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)ma);		mb->tdir_type=*(uint16*)ma;		ma+=sizeof(uint16);		if (!(tif->tif_flags&TIFF_BIGTIFF))		{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)ma);			mb->tdir_count=(uint64)(*(uint32*)ma);			ma+=sizeof(uint32);			*(uint32*)(&mb->tdir_offset)=*(uint32*)ma;			ma+=sizeof(uint32);		}		else		{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)ma);                        mb->tdir_count=TIFFReadUInt64(ma);			ma+=sizeof(uint64);			mb->tdir_offset.toff_long8=TIFFReadUInt64(ma);			ma+=sizeof(uint64);		}		mb++;	}
if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)ma);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabShort((uint16*)ma);
TIFFSwabShort((uint16*)ma)
TIFFSwabShort
TIFFSwabShort
(uint16*)ma
uint16*
uint16
uint16
*
*
ma
ma
mb->tdir_tag=*(uint16*)ma;
mb->tdir_tag=*(uint16*)ma
mb->tdir_tag
mb
mb
tdir_tag
*(uint16*)ma
(uint16*)ma
uint16*
uint16
uint16
*
*
ma
ma
ma+=sizeof(uint16);
ma+=sizeof(uint16)
ma
ma
sizeof(uint16)
uint16
uint16
uint16

if (tif->tif_flags&TIFF_SWAB)			TIFFSwabShort((uint16*)ma);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabShort((uint16*)ma);
TIFFSwabShort((uint16*)ma)
TIFFSwabShort
TIFFSwabShort
(uint16*)ma
uint16*
uint16
uint16
*
*
ma
ma
mb->tdir_type=*(uint16*)ma;
mb->tdir_type=*(uint16*)ma
mb->tdir_type
mb
mb
tdir_type
*(uint16*)ma
(uint16*)ma
uint16*
uint16
uint16
*
*
ma
ma
ma+=sizeof(uint16);
ma+=sizeof(uint16)
ma
ma
sizeof(uint16)
uint16
uint16
uint16

if (!(tif->tif_flags&TIFF_BIGTIFF))		{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)ma);			mb->tdir_count=(uint64)(*(uint32*)ma);			ma+=sizeof(uint32);			*(uint32*)(&mb->tdir_offset)=*(uint32*)ma;			ma+=sizeof(uint32);		}		else		{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)ma);                        mb->tdir_count=TIFFReadUInt64(ma);			ma+=sizeof(uint64);			mb->tdir_offset.toff_long8=TIFFReadUInt64(ma);			ma+=sizeof(uint64);		}
!(tif->tif_flags&TIFF_BIGTIFF)
(tif->tif_flags&TIFF_BIGTIFF)
tif->tif_flags&TIFF_BIGTIFF
tif->tif_flags
tif
tif
tif_flags
TIFF_BIGTIFF
TIFF_BIGTIFF
{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)ma);			mb->tdir_count=(uint64)(*(uint32*)ma);			ma+=sizeof(uint32);			*(uint32*)(&mb->tdir_offset)=*(uint32*)ma;			ma+=sizeof(uint32);		}
if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong((uint32*)ma);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong((uint32*)ma);
TIFFSwabLong((uint32*)ma)
TIFFSwabLong
TIFFSwabLong
(uint32*)ma
uint32*
uint32
uint32
*
*
ma
ma
mb->tdir_count=(uint64)(*(uint32*)ma);
mb->tdir_count=(uint64)(*(uint32*)ma)
mb->tdir_count
mb
mb
tdir_count
(uint64)(*(uint32*)ma)
(uint64)
uint64
uint64
*(uint32*)ma
(uint32*)ma
uint32*
uint32
uint32
*
*
ma
ma
ma+=sizeof(uint32);
ma+=sizeof(uint32)
ma
ma
sizeof(uint32)
uint32
uint32
uint32

*(uint32*)(&mb->tdir_offset)=*(uint32*)ma;
*(uint32*)(&mb->tdir_offset)=*(uint32*)ma
*(uint32*)(&mb->tdir_offset)
(uint32*)(&mb->tdir_offset)
uint32*
uint32
uint32
*
*
(&mb->tdir_offset)
&mb->tdir_offset
mb->tdir_offset
mb
mb
tdir_offset
*(uint32*)ma
(uint32*)ma
uint32*
uint32
uint32
*
*
ma
ma
ma+=sizeof(uint32);
ma+=sizeof(uint32)
ma
ma
sizeof(uint32)
uint32
uint32
uint32

{			if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)ma);                        mb->tdir_count=TIFFReadUInt64(ma);			ma+=sizeof(uint64);			mb->tdir_offset.toff_long8=TIFFReadUInt64(ma);			ma+=sizeof(uint64);		}
if (tif->tif_flags&TIFF_SWAB)				TIFFSwabLong8((uint64*)ma);
tif->tif_flags&TIFF_SWAB
tif->tif_flags
tif
tif
tif_flags
TIFF_SWAB
TIFF_SWAB
TIFFSwabLong8((uint64*)ma);
TIFFSwabLong8((uint64*)ma)
TIFFSwabLong8
TIFFSwabLong8
(uint64*)ma
uint64*
uint64
uint64
*
*
ma
ma
mb->tdir_count=TIFFReadUInt64(ma);
mb->tdir_count=TIFFReadUInt64(ma)
mb->tdir_count
mb
mb
tdir_count
TIFFReadUInt64(ma)
TIFFReadUInt64
TIFFReadUInt64
ma
ma
ma+=sizeof(uint64);
ma+=sizeof(uint64)
ma
ma
sizeof(uint64)
uint64
uint64
uint64

mb->tdir_offset.toff_long8=TIFFReadUInt64(ma);
mb->tdir_offset.toff_long8=TIFFReadUInt64(ma)
mb->tdir_offset.toff_long8
mb->tdir_offset
mb
mb
tdir_offset
toff_long8
TIFFReadUInt64(ma)
TIFFReadUInt64
TIFFReadUInt64
ma
ma
ma+=sizeof(uint64);
ma+=sizeof(uint64)
ma
ma
sizeof(uint64)
uint64
uint64
uint64

mb++;
mb++
mb
mb
_TIFFfree(origdir);
_TIFFfree(origdir)
_TIFFfree
_TIFFfree
origdir
origdir
*pdir = dir;
*pdir = dir
*pdir
pdir
pdir
dir
dir
return dircount16;
dircount16
dircount16
-----joern-----
(0,7,0)
(5,8,0)
(5,10,0)
(9,10,0)
(1,4,0)
(2,8,0)
(7,3,0)
(6,7,0)
(5,8,1)
(8,2,1)
(7,0,1)
(0,6,1)
(10,9,1)
(5,10,1)
(2,7,1)
(7,3,1)
(9,7,1)
(5,8,2)
(5,10,2)
(10,7,2)
(7,3,2)
(2,7,2)
(9,7,2)
(8,7,2)
-----------------------------------
(0,TIFF_INT64_MAX)
(1,if (value > TIFF_INT64_MAX)
(2,TIFFReadDirEntryErrOk)
(3,uint64 value)
(4,)
(5,RET)
(6,value)
(7,value > TIFF_INT64_MAX)
(8,return(TIFFReadDirEntryErrOk)
(9,TIFFReadDirEntryErrRange)
(10,return(TIFFReadDirEntryErrRange)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffc7a1b56300000000ffffffffffffffff63a2b56300000000ffffffffffffffff63a2b56300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x4d4d002b00080000000000000000003cffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
static uint16 TIFFFetchDirectory(TIFF* tif, uint64 diroff, TIFFDirEntry** pdir,                    uint64 *nextdiroff) {
static const char module[] = 'TIFFFetchDirectory';
void* origdir;
uint16 dircount16;
uint32 dirsize;
TIFFDirEntry* dir;
uint8* ma;
TIFFDirEntry* mb;
uint16 n;
assert(pdir);
tif->tif_diroff = diroff;
if(nextdiroff)
*nextdiroff = 0;
tmsize_t m;
tmsize_t off = (tmsize_t) tif->tif_diroff;
tmsize_t m;
uint64 dircount64;
m=off+sizeof(uint64);
if((m<off)||(m<(tmsize_t)sizeof(uint64))||(m>tif->tif_size))
TIFFErrorExt(tif->tif_clientdata, module, 					'Can not read TIFF directory count');
return 0;
=======================
