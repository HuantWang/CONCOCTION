-----label-----
0
-----code-----
int pgx_validate(jas_stream_t *in)
{
	uchar buf[PGX_MAGICLEN];
	uint_fast32_t magic;
	int i;
	int n;

	assert(JAS_STREAM_MAXPUTBACK >= PGX_MAGICLEN);

	/* Read the validation data (i.e., the data used for detecting
	  the format). */
	if ((n = jas_stream_read(in, buf, PGX_MAGICLEN)) < 0) {
		return -1;
	}

	/* Put the validation data back onto the stream, so that the
	  stream position will not be changed. */
	for (i = n - 1; i >= 0; --i) {
		if (jas_stream_ungetc(in, buf[i]) == EOF) {
			return -1;
		}
	}

	/* Did we read enough data? */
	if (n < PGX_MAGICLEN) {
		return -1;
	}

	/* Compute the signature value. */
	magic = (buf[0] << 8) | buf[1];

	/* Ensure that the signature is correct for this format. */
	if (magic != PGX_MAGIC) {
		return -1;
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
30,31
32,33
33,34
33,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
49,50
49,51
50,51
52,53
52,54
52,55
52,56
53,54
55,56
57,58
59,60
62,63
63,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
71,72
71,73
72,73
75,76
75,77
76,77
79,80
80,81
82,83
83,84
83,85
84,85
84,86
85,86
85,87
85,88
86,87
88,89
90,91
90,92
91,92
93,94
95,96
97,98
98,99
99,100
101,102
101,103
102,103
102,104
103,104
105,106
107,108
108,109
109,110
111,112
112,113
112,114
113,114
115,116
115,117
116,117
117,118
117,119
118,119
118,120
119,120
123,124
123,125
124,125
127,128
127,129
128,129
128,130
129,130
131,132
133,134
134,135
135,136
137,138
-----nextToken-----
2,4,7,9,10,15,17,20,24,26,29,31,34,36,40,43,45,51,54,56,58,60,61,65,70,73,74,77,78,81,87,89,92,94,96,100,104,106,110,114,120,121,122,125,126,130,132,136,138
-----computeFrom-----
41,42
41,43
47,48
47,49
49,50
49,51
68,69
68,70
71,72
71,73
75,76
75,77
84,85
84,86
102,103
102,104
112,113
112,114
115,116
115,117
117,118
117,119
128,129
128,130
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int pgx_validate(jas_stream_t *in){	uchar buf[PGX_MAGICLEN];	uint_fast32_t magic;	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= PGX_MAGICLEN);	/* Read the validation data (i.e., the data used for detecting	  the format). */	if ((n = jas_stream_read(in, buf, PGX_MAGICLEN)) < 0) {		return -1;	}	/* Put the validation data back onto the stream, so that the	  stream position will not be changed. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < PGX_MAGICLEN) {		return -1;	}	/* Compute the signature value. */	magic = (buf[0] << 8) | buf[1];	/* Ensure that the signature is correct for this format. */	if (magic != PGX_MAGIC) {		return -1;	}	return 0;}
int
pgx_validate(jas_stream_t *in)
pgx_validate
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	uchar buf[PGX_MAGICLEN];	uint_fast32_t magic;	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= PGX_MAGICLEN);	/* Read the validation data (i.e., the data used for detecting	  the format). */	if ((n = jas_stream_read(in, buf, PGX_MAGICLEN)) < 0) {		return -1;	}	/* Put the validation data back onto the stream, so that the	  stream position will not be changed. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < PGX_MAGICLEN) {		return -1;	}	/* Compute the signature value. */	magic = (buf[0] << 8) | buf[1];	/* Ensure that the signature is correct for this format. */	if (magic != PGX_MAGIC) {		return -1;	}	return 0;}
uchar buf[PGX_MAGICLEN];
uchar buf[PGX_MAGICLEN];
uchar
uchar
buf[PGX_MAGICLEN]
buf
[PGX_MAGICLEN]
PGX_MAGICLEN
PGX_MAGICLEN
uint_fast32_t magic;
uint_fast32_t magic;
uint_fast32_t
uint_fast32_t
magic
magic
int i;
int i;
int
i
i
int n;
int n;
int
n
n
assert(JAS_STREAM_MAXPUTBACK >= PGX_MAGICLEN);
assert(JAS_STREAM_MAXPUTBACK >= PGX_MAGICLEN)
assert
assert
JAS_STREAM_MAXPUTBACK >= PGX_MAGICLEN
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
PGX_MAGICLEN
PGX_MAGICLEN
if ((n = jas_stream_read(in, buf, PGX_MAGICLEN)) < 0) {		return -1;	}
(n = jas_stream_read(in, buf, PGX_MAGICLEN)) < 0
(n = jas_stream_read(in, buf, PGX_MAGICLEN))
n = jas_stream_read(in, buf, PGX_MAGICLEN)
n
n
jas_stream_read(in, buf, PGX_MAGICLEN)
jas_stream_read
jas_stream_read
in
in
buf
buf
PGX_MAGICLEN
PGX_MAGICLEN
0
{		return -1;	}
return -1;
-1
1
for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
i = n - 1;
i = n - 1
i
i
n - 1
n
n
1
i >= 0
i
i
0
--i
i
i
{		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}
jas_stream_ungetc(in, buf[i]) == EOF
jas_stream_ungetc(in, buf[i])
jas_stream_ungetc
jas_stream_ungetc
in
in
buf[i]
buf
buf
i
i
EOF
EOF
{			return -1;		}
return -1;
-1
1
if (n < PGX_MAGICLEN) {		return -1;	}
n < PGX_MAGICLEN
n
n
PGX_MAGICLEN
PGX_MAGICLEN
{		return -1;	}
return -1;
-1
1
magic = (buf[0] << 8) | buf[1];
magic = (buf[0] << 8) | buf[1]
magic
magic
(buf[0] << 8) | buf[1]
(buf[0] << 8)
buf[0] << 8
buf[0]
buf
buf
0
8
buf[1]
buf
buf
1
if (magic != PGX_MAGIC) {		return -1;	}
magic != PGX_MAGIC
magic
magic
PGX_MAGIC
PGX_MAGIC
{		return -1;	}
return -1;
-1
1
return 0;
0
-----joern-----
(13,80,0)
(111,12,0)
(5,111,0)
(112,103,0)
(13,73,0)
(71,14,0)
(49,67,0)
(1,26,0)
(61,97,0)
(60,36,0)
(86,61,0)
(94,79,0)
(24,26,0)
(59,19,0)
(33,52,0)
(92,61,0)
(13,36,0)
(18,49,0)
(89,106,0)
(38,80,0)
(9,24,0)
(12,97,0)
(6,88,0)
(67,49,0)
(13,100,0)
(62,89,0)
(22,97,0)
(89,0,0)
(31,74,0)
(20,97,0)
(46,97,0)
(25,97,0)
(95,69,0)
(36,22,0)
(72,100,0)
(14,28,0)
(14,70,0)
(53,103,0)
(19,14,0)
(79,14,0)
(78,97,0)
(27,16,0)
(85,90,0)
(30,15,0)
(99,13,0)
(17,15,0)
(49,14,0)
(93,51,0)
(50,76,0)
(16,97,0)
(40,69,0)
(51,34,0)
(69,34,0)
(37,10,0)
(13,63,0)
(87,97,0)
(41,97,0)
(3,79,0)
(13,52,0)
(45,6,0)
(29,106,0)
(103,14,0)
(4,80,0)
(35,97,0)
(2,97,0)
(49,39,0)
(21,6,0)
(91,10,0)
(8,61,0)
(104,78,0)
(44,91,0)
(84,36,0)
(42,111,0)
(61,14,0)
(3,13,0)
(34,51,0)
(28,14,0)
(80,23,0)
(23,97,0)
(68,63,0)
(34,97,0)
(20,76,0)
(7,98,0)
(10,39,0)
(88,97,0)
(105,106,0)
(57,49,0)
(108,73,0)
(98,97,0)
(11,76,0)
(100,98,0)
(101,107,0)
(61,92,0)
(88,6,0)
(48,78,0)
(52,12,0)
(13,15,0)
(32,97,0)
(15,20,0)
(103,90,0)
(75,52,0)
(13,69,0)
(110,67,0)
(106,97,0)
(63,88,0)
(102,92,0)
(58,97,0)
(54,64,0)
(89,14,0)
(79,97,0)
(43,19,0)
(24,97,0)
(77,56,0)
(76,20,0)
(10,91,0)
(47,22,0)
(12,111,0)
(19,97,0)
(26,24,0)
(73,16,0)
(81,23,0)
(66,100,0)
(109,63,0)
(65,73,0)
(90,103,0)
(96,97,0)
(13,97,0)
(55,51,0)
(70,14,0)
(78,83,0)
(17,30,1)
(68,109,1)
(72,16,1)
(36,84,1)
(21,63,1)
(49,57,1)
(14,70,1)
(81,80,1)
(82,77,1)
(112,34,1)
(49,14,1)
(5,52,1)
(13,63,1)
(37,106,1)
(13,52,1)
(80,4,1)
(12,111,1)
(104,48,1)
(88,6,1)
(42,5,1)
(38,28,1)
(55,93,1)
(93,69,1)
(95,12,1)
(3,79,1)
(4,38,1)
(105,29,1)
(85,53,1)
(79,94,1)
(19,14,1)
(92,102,1)
(77,28,1)
(43,59,1)
(13,100,1)
(13,99,1)
(82,31,1)
(94,61,1)
(59,49,1)
(69,40,1)
(52,75,1)
(103,14,1)
(103,90,1)
(73,108,1)
(111,42,1)
(13,15,1)
(100,66,1)
(61,92,1)
(67,110,1)
(65,22,1)
(30,98,1)
(79,14,1)
(6,45,1)
(47,36,1)
(71,24,1)
(63,68,1)
(54,103,1)
(29,78,1)
(1,9,1)
(75,33,1)
(62,82,1)
(106,105,1)
(10,91,1)
(109,20,1)
(53,112,1)
(31,10,1)
(26,1,1)
(13,73,1)
(10,39,1)
(99,89,1)
(108,65,1)
(84,60,1)
(110,18,1)
(23,81,1)
(16,27,1)
(89,14,1)
(101,49,1)
(60,23,1)
(70,71,1)
(49,39,1)
(102,8,1)
(76,11,1)
(86,19,1)
(27,73,1)
(13,69,1)
(40,95,1)
(82,101,1)
(8,86,1)
(19,43,1)
(50,15,1)
(9,10,1)
(82,54,1)
(33,88,1)
(45,21,1)
(22,47,1)
(51,55,1)
(3,13,1)
(20,76,1)
(13,36,1)
(78,83,1)
(34,51,1)
(66,72,1)
(99,82,1)
(24,26,1)
(91,44,1)
(89,62,1)
(57,67,1)
(78,104,1)
(15,17,1)
(90,85,1)
(18,103,1)
(11,50,1)
(7,100,1)
(44,37,1)
(89,106,1)
(98,7,1)
(28,14,1)
(61,14,1)
(49,67,1)
(13,80,1)
(28,10,2)
(88,6,2)
(14,70,2)
(84,28,2)
(49,67,2)
(18,103,2)
(71,10,2)
(49,14,2)
(8,49,2)
(99,49,2)
(89,106,2)
(79,14,2)
(53,28,2)
(12,111,2)
(101,49,2)
(54,103,2)
(24,10,2)
(34,51,2)
(11,28,2)
(24,26,2)
(13,15,2)
(42,28,2)
(103,90,2)
(27,28,2)
(95,28,2)
(28,14,2)
(109,28,2)
(80,28,2)
(92,49,2)
(5,28,2)
(14,10,2)
(50,28,2)
(78,83,2)
(90,28,2)
(61,49,2)
(99,28,2)
(49,39,2)
(20,76,2)
(70,10,2)
(82,49,2)
(13,80,2)
(49,103,2)
(81,28,2)
(16,28,2)
(61,14,2)
(75,28,2)
(45,28,2)
(108,28,2)
(3,79,2)
(47,28,2)
(1,10,2)
(102,49,2)
(10,39,2)
(103,28,2)
(23,28,2)
(82,28,2)
(13,28,2)
(31,10,2)
(88,28,2)
(13,69,2)
(89,14,2)
(69,28,2)
(17,28,2)
(19,14,2)
(12,28,2)
(99,103,2)
(9,10,2)
(72,28,2)
(13,100,2)
(59,49,2)
(110,103,2)
(100,28,2)
(4,28,2)
(66,28,2)
(7,28,2)
(112,28,2)
(13,10,2)
(13,63,2)
(93,28,2)
(73,28,2)
(68,28,2)
(63,28,2)
(15,28,2)
(20,28,2)
(85,28,2)
(13,103,2)
(30,28,2)
(82,10,2)
(57,103,2)
(36,28,2)
(86,49,2)
(60,28,2)
(43,49,2)
(65,28,2)
(82,103,2)
(103,14,2)
(89,82,2)
(98,28,2)
(22,28,2)
(10,91,2)
(52,28,2)
(21,28,2)
(99,10,2)
(94,49,2)
(55,28,2)
(38,28,2)
(6,28,2)
(62,82,2)
(76,28,2)
(34,28,2)
(61,92,2)
(111,28,2)
(13,49,2)
(13,52,2)
(51,28,2)
(19,49,2)
(77,28,2)
(26,10,2)
(13,73,2)
(40,28,2)
(67,103,2)
(33,28,2)
(3,13,2)
(13,36,2)
(79,49,2)
-----------------------------------
(0,)
(1,hdr)
(2,if (image)
(3,RET)
(4,tlx)
(5,hdr)
(6,hdr.height)
(7,1)
(8,0)
(9,stderr)
(10,pgx_gethdr(in, &hdr)
(11,width)
(12,cmptparm.prec = hdr.prec)
(13,return 0;)
(14,image = jas_image_create0()
(15,cmptparm.width)
(16,cmptparm.hstep = 1)
(17,width)
(18,in)
(19,jas_image_setclrspc(image, JAS_CLRSPC_SGRAY)
(20,cmptparm.width = hdr.width)
(21,hdr)
(22,cmptparm.tly = 0)
(23,cmptparm.tlx = 0)
(24,pgx_dumphdr(stderr, &hdr)
(25,hdr)
(26,&hdr)
(27,1)
(28,!(image = jas_image_create0()
(29,image)
(30,cmptparm)
(31,goto error;)
(32,if (pgx_gethdr(in, &hdr)
(33,cmptparm)
(34,cmptparm.sgnd = hdr.sgnd)
(35,if (pgx_getdata(in, &hdr, image)
(36,cmptparm.tly)
(37,in)
(38,cmptparm)
(39,jas_stream_t *in)
(40,sgnd)
(41,image)
(42,prec)
(43,JAS_CLRSPC_SGRAY)
(44,hdr)
(45,height)
(46,if (!(image = jas_image_create0()
(47,0)
(48,optstr)
(49,pgx_getdata(in, &hdr, image)
(50,hdr)
(51,hdr.sgnd)
(52,cmptparm.prec)
(53,0)
(54,goto error;)
(55,sgnd)
(56,)
(57,image)
(58,cmptparm)
(59,image)
(60,cmptparm)
(61,jas_image_setcmpttype(image, 0,\\n\\t  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y)
(62,image)
(63,cmptparm.height)
(64,)
(65,cmptparm)
(66,vstep)
(67,&hdr)
(68,height)
(69,cmptparm.sgnd)
(70,jas_image_create0()
(71,image)
(72,cmptparm)
(73,cmptparm.hstep)
(74,)
(75,prec)
(76,hdr.width)
(77,goto error;)
(78,optstr = 0)
(79,return image;)
(80,cmptparm.tlx)
(81,0)
(82,image)
(83,char *optstr)
(84,tly)
(85,cmptparm)
(86,image)
(87,error:)
(88,cmptparm.height = hdr.height)
(89,jas_image_destroy(image)
(90,&cmptparm)
(91,&hdr)
(92,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_GRAY_Y)
(93,hdr)
(94,image)
(95,cmptparm)
(96,if (jas_image_addcmpt(image, 0, &cmptparm)
(97,)
(98,cmptparm.vstep = 1)
(99,0)
(100,cmptparm.vstep)
(101,goto error;)
(102,JAS_CLRSPC_CHANIND_GRAY_Y)
(103,jas_image_addcmpt(image, 0, &cmptparm)
(104,0)
(105,0)
(106,image = 0)
(107,)
(108,hstep)
(109,cmptparm)
(110,hdr)
(111,hdr.prec)
(112,image)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000ffffffff0100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff9cf9a66300000000ffffffffffffffffcaf9a66300000000ffffffffffffffffcaf9a66300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
=========trace=========
int pgx_validate(jas_stream_t *in) {
uint_fast32_t magic;
int i;
int n;
assert(JAS_STREAM_MAXPUTBACK >= PGX_MAGICLEN);
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
magic = (buf[0] << 8) | buf[1];
if(magic != PGX_MAGIC)
return -1;
=======================
