-----label-----
0
-----code-----
jas_stream_t *jas_stream_fopen(const char *filename, const char *mode)
{
	jas_stream_t *stream;
	jas_stream_fileobj_t *obj;
	int openflags;

	JAS_DBGLOG(100, ("jas_stream_fopen(\"%s\", \"%s\")\n", filename, mode));

	/* Allocate a stream object. */
	if (!(stream = jas_stream_create())) {
		return 0;
	}

	/* Parse the mode string. */
	stream->openmode_ = jas_strtoopenmode(mode);

	/* Determine the correct flags to use for opening the file. */
	if ((stream->openmode_ & JAS_STREAM_READ) &&
	  (stream->openmode_ & JAS_STREAM_WRITE)) {
		openflags = O_RDWR;
	} else if (stream->openmode_ & JAS_STREAM_READ) {
		openflags = O_RDONLY;
	} else if (stream->openmode_ & JAS_STREAM_WRITE) {
		openflags = O_WRONLY;
	} else {
		openflags = 0;
	}
	if (stream->openmode_ & JAS_STREAM_APPEND) {
		openflags |= O_APPEND;
	}
	if (stream->openmode_ & JAS_STREAM_BINARY) {
		openflags |= O_BINARY;
	}
	if (stream->openmode_ & JAS_STREAM_CREATE) {
		openflags |= O_CREAT | O_TRUNC;
	}

	/* Allocate space for the underlying file stream object. */
	if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {
		jas_stream_destroy(stream);
		return 0;
	}
	obj->fd = -1;
	obj->flags = 0;
	obj->pathname[0] = '\0';
	stream->obj_ = (void *) obj;

	/* Select the operations for a file stream object. */
	stream->ops_ = &jas_stream_fileops;

	/* Open the underlying file. */
	if ((obj->fd = open(filename, openflags, JAS_STREAM_PERMS)) < 0) {
		// Free the underlying file object, since it will not otherwise
		// be freed.
		jas_free(obj);
		jas_stream_destroy(stream);
		return 0;
	}

	/* By default, use full buffering for this type of stream. */
	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);

	return stream;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
9,11
12,13
12,14
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
35,36
37,38
38,39
38,40
38,41
39,40
42,43
43,44
43,45
43,46
45,46
47,48
49,50
49,51
50,51
51,52
52,53
52,54
53,54
55,56
56,57
58,59
59,60
61,62
62,63
62,64
63,64
63,65
64,65
67,68
67,69
68,69
70,71
72,73
72,74
72,75
73,74
73,75
74,75
75,76
75,77
76,77
76,78
77,78
80,81
82,83
83,84
83,85
84,85
84,86
85,86
88,89
90,91
91,92
92,93
92,94
93,94
95,96
97,98
97,99
97,100
98,99
98,100
99,100
99,101
100,101
103,104
105,106
106,107
107,108
107,109
108,109
110,111
112,113
112,114
112,115
113,114
113,115
114,115
114,116
115,116
118,119
120,121
121,122
122,123
122,124
123,124
125,126
127,128
128,129
129,130
129,131
130,131
133,134
133,135
134,135
134,136
135,136
135,137
136,137
139,140
141,142
142,143
143,144
143,145
144,145
146,147
148,149
148,150
149,150
149,151
150,151
150,152
151,152
154,155
156,157
157,158
158,159
158,160
159,160
161,162
163,164
163,165
164,165
164,166
165,166
165,167
166,167
169,170
171,172
172,173
173,174
173,175
174,175
176,177
176,178
177,178
179,180
181,182
181,183
182,183
183,184
184,185
184,186
185,186
187,188
187,189
188,189
190,191
191,192
191,193
192,193
195,196
195,197
196,197
197,198
197,199
198,199
200,201
202,203
204,205
205,206
205,207
206,207
206,208
207,208
210,211
212,213
213,214
213,215
214,215
214,216
215,216
219,220
220,221
220,222
221,222
221,223
222,223
222,224
223,224
228,229
229,230
229,231
230,231
230,232
231,232
234,235
234,236
235,236
235,237
237,238
239,240
241,242
242,243
242,244
243,244
243,245
244,245
247,248
248,249
250,251
250,252
251,252
251,253
252,253
253,254
253,255
254,255
254,256
255,256
258,259
258,260
258,261
258,262
259,260
261,262
263,264
265,266
268,269
268,270
268,271
269,270
270,271
270,272
271,272
273,274
275,276
276,277
276,278
277,278
279,280
281,282
283,284
284,285
284,286
284,287
284,288
284,289
285,286
287,288
289,290
293,294
294,295
-----nextToken-----
3,5,6,8,10,11,13,15,16,21,23,24,28,30,31,34,36,40,41,44,46,48,54,57,60,65,66,69,71,78,79,81,86,87,89,94,96,101,102,104,109,111,116,117,119,124,126,131,132,137,138,140,145,147,152,153,155,160,162,167,168,170,175,178,180,186,189,193,194,199,201,203,208,209,211,216,217,218,224,225,226,227,232,233,236,238,240,245,246,249,256,257,260,262,264,266,267,272,274,278,280,282,286,288,290,291,292,295
-----computeFrom-----
52,53
52,54
62,63
62,64
73,74
73,75
75,76
75,77
83,84
83,85
92,93
92,94
98,99
98,100
107,108
107,109
113,114
113,115
122,123
122,124
129,130
129,131
134,135
134,136
143,144
143,145
149,150
149,151
158,159
158,160
164,165
164,166
173,174
173,175
176,177
176,178
184,185
184,186
205,206
205,207
213,214
213,215
220,221
220,222
229,230
229,231
242,243
242,244
251,252
251,253
253,254
253,255
-----guardedBy-----
256,274
-----guardedByNegation-----
86,116
81,104
87,117
89,119
101,116
102,117
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
jas_stream_t *jas_stream_fopen(const char *filename, const char *mode){	jas_stream_t *stream;	jas_stream_fileobj_t *obj;	int openflags;	JAS_DBGLOG(100, ("jas_stream_fopen(\"%s\", \"%s\")\n", filename, mode));	/* Allocate a stream object. */	if (!(stream = jas_stream_create())) {		return 0;	}	/* Parse the mode string. */	stream->openmode_ = jas_strtoopenmode(mode);	/* Determine the correct flags to use for opening the file. */	if ((stream->openmode_ & JAS_STREAM_READ) &&	  (stream->openmode_ & JAS_STREAM_WRITE)) {		openflags = O_RDWR;	} else if (stream->openmode_ & JAS_STREAM_READ) {		openflags = O_RDONLY;	} else if (stream->openmode_ & JAS_STREAM_WRITE) {		openflags = O_WRONLY;	} else {		openflags = 0;	}	if (stream->openmode_ & JAS_STREAM_APPEND) {		openflags |= O_APPEND;	}	if (stream->openmode_ & JAS_STREAM_BINARY) {		openflags |= O_BINARY;	}	if (stream->openmode_ & JAS_STREAM_CREATE) {		openflags |= O_CREAT | O_TRUNC;	}	/* Allocate space for the underlying file stream object. */	if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	obj->fd = -1;	obj->flags = 0;	obj->pathname[0] = '\0';	stream->obj_ = (void *) obj;	/* Select the operations for a file stream object. */	stream->ops_ = &jas_stream_fileops;	/* Open the underlying file. */	if ((obj->fd = open(filename, openflags, JAS_STREAM_PERMS)) < 0) {		// Free the underlying file object, since it will not otherwise		// be freed.		jas_free(obj);		jas_stream_destroy(stream);		return 0;	}	/* By default, use full buffering for this type of stream. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	return stream;}
jas_stream_t
jas_stream_t
*jas_stream_fopen(const char *filename, const char *mode)
*
jas_stream_fopen
const char *filename
const char
*filename
*
filename
const char *mode
const char
*mode
*
mode
{	jas_stream_t *stream;	jas_stream_fileobj_t *obj;	int openflags;	JAS_DBGLOG(100, ("jas_stream_fopen(\"%s\", \"%s\")\n", filename, mode));	/* Allocate a stream object. */	if (!(stream = jas_stream_create())) {		return 0;	}	/* Parse the mode string. */	stream->openmode_ = jas_strtoopenmode(mode);	/* Determine the correct flags to use for opening the file. */	if ((stream->openmode_ & JAS_STREAM_READ) &&	  (stream->openmode_ & JAS_STREAM_WRITE)) {		openflags = O_RDWR;	} else if (stream->openmode_ & JAS_STREAM_READ) {		openflags = O_RDONLY;	} else if (stream->openmode_ & JAS_STREAM_WRITE) {		openflags = O_WRONLY;	} else {		openflags = 0;	}	if (stream->openmode_ & JAS_STREAM_APPEND) {		openflags |= O_APPEND;	}	if (stream->openmode_ & JAS_STREAM_BINARY) {		openflags |= O_BINARY;	}	if (stream->openmode_ & JAS_STREAM_CREATE) {		openflags |= O_CREAT | O_TRUNC;	}	/* Allocate space for the underlying file stream object. */	if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	obj->fd = -1;	obj->flags = 0;	obj->pathname[0] = '\0';	stream->obj_ = (void *) obj;	/* Select the operations for a file stream object. */	stream->ops_ = &jas_stream_fileops;	/* Open the underlying file. */	if ((obj->fd = open(filename, openflags, JAS_STREAM_PERMS)) < 0) {		// Free the underlying file object, since it will not otherwise		// be freed.		jas_free(obj);		jas_stream_destroy(stream);		return 0;	}	/* By default, use full buffering for this type of stream. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	return stream;}
jas_stream_t *stream;
jas_stream_t *stream;
jas_stream_t
jas_stream_t
*stream
*
stream
jas_stream_fileobj_t *obj;
jas_stream_fileobj_t *obj;
jas_stream_fileobj_t
jas_stream_fileobj_t
*obj
*
obj
int openflags;
int openflags;
int
openflags
openflags
JAS_DBGLOG(100, ("jas_stream_fopen(\"%s\", \"%s\")\n", filename, mode));
JAS_DBGLOG(100, ("jas_stream_fopen(\"%s\", \"%s\")\n", filename, mode))
JAS_DBGLOG
JAS_DBGLOG
100
("jas_stream_fopen(\"%s\", \"%s\")\n", filename, mode)
"jas_stream_fopen(\"%s\", \"%s\")\n", filename, mode
"jas_stream_fopen(\"%s\", \"%s\")\n"
filename
filename
mode
mode
if (!(stream = jas_stream_create())) {		return 0;	}
!(stream = jas_stream_create())
(stream = jas_stream_create())
stream = jas_stream_create()
stream
stream
jas_stream_create()
jas_stream_create
jas_stream_create
{		return 0;	}
return 0;
0
stream->openmode_ = jas_strtoopenmode(mode);
stream->openmode_ = jas_strtoopenmode(mode)
stream->openmode_
stream
stream
openmode_
jas_strtoopenmode(mode)
jas_strtoopenmode
jas_strtoopenmode
mode
mode
if ((stream->openmode_ & JAS_STREAM_READ) &&	  (stream->openmode_ & JAS_STREAM_WRITE)) {		openflags = O_RDWR;	} else if (stream->openmode_ & JAS_STREAM_READ) {		openflags = O_RDONLY;	} else if (stream->openmode_ & JAS_STREAM_WRITE) {		openflags = O_WRONLY;	} else {		openflags = 0;	}
(stream->openmode_ & JAS_STREAM_READ) &&	  (stream->openmode_ & JAS_STREAM_WRITE)
(stream->openmode_ & JAS_STREAM_READ)
stream->openmode_ & JAS_STREAM_READ
stream->openmode_
stream
stream
openmode_
JAS_STREAM_READ
JAS_STREAM_READ
(stream->openmode_ & JAS_STREAM_WRITE)
stream->openmode_ & JAS_STREAM_WRITE
stream->openmode_
stream
stream
openmode_
JAS_STREAM_WRITE
JAS_STREAM_WRITE
{		openflags = O_RDWR;	}
openflags = O_RDWR;
openflags = O_RDWR
openflags
openflags
O_RDWR
O_RDWR
if (stream->openmode_ & JAS_STREAM_READ) {		openflags = O_RDONLY;	} else if (stream->openmode_ & JAS_STREAM_WRITE) {		openflags = O_WRONLY;	} else {		openflags = 0;	}
stream->openmode_ & JAS_STREAM_READ
stream->openmode_
stream
stream
openmode_
JAS_STREAM_READ
JAS_STREAM_READ
{		openflags = O_RDONLY;	}
openflags = O_RDONLY;
openflags = O_RDONLY
openflags
openflags
O_RDONLY
O_RDONLY
if (stream->openmode_ & JAS_STREAM_WRITE) {		openflags = O_WRONLY;	} else {		openflags = 0;	}
stream->openmode_ & JAS_STREAM_WRITE
stream->openmode_
stream
stream
openmode_
JAS_STREAM_WRITE
JAS_STREAM_WRITE
{		openflags = O_WRONLY;	}
openflags = O_WRONLY;
openflags = O_WRONLY
openflags
openflags
O_WRONLY
O_WRONLY
{		openflags = 0;	}
openflags = 0;
openflags = 0
openflags
openflags
0
if (stream->openmode_ & JAS_STREAM_APPEND) {		openflags |= O_APPEND;	}
stream->openmode_ & JAS_STREAM_APPEND
stream->openmode_
stream
stream
openmode_
JAS_STREAM_APPEND
JAS_STREAM_APPEND
{		openflags |= O_APPEND;	}
openflags |= O_APPEND;
openflags |= O_APPEND
openflags
openflags
O_APPEND
O_APPEND
if (stream->openmode_ & JAS_STREAM_BINARY) {		openflags |= O_BINARY;	}
stream->openmode_ & JAS_STREAM_BINARY
stream->openmode_
stream
stream
openmode_
JAS_STREAM_BINARY
JAS_STREAM_BINARY
{		openflags |= O_BINARY;	}
openflags |= O_BINARY;
openflags |= O_BINARY
openflags
openflags
O_BINARY
O_BINARY
if (stream->openmode_ & JAS_STREAM_CREATE) {		openflags |= O_CREAT | O_TRUNC;	}
stream->openmode_ & JAS_STREAM_CREATE
stream->openmode_
stream
stream
openmode_
JAS_STREAM_CREATE
JAS_STREAM_CREATE
{		openflags |= O_CREAT | O_TRUNC;	}
openflags |= O_CREAT | O_TRUNC;
openflags |= O_CREAT | O_TRUNC
openflags
openflags
O_CREAT | O_TRUNC
O_CREAT
O_CREAT
O_TRUNC
O_TRUNC
if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {		jas_stream_destroy(stream);		return 0;	}
!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))
(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))
obj = jas_malloc(sizeof(jas_stream_fileobj_t))
obj
obj
jas_malloc(sizeof(jas_stream_fileobj_t))
jas_malloc
jas_malloc
sizeof(jas_stream_fileobj_t)
jas_stream_fileobj_t
jas_stream_fileobj_t
jas_stream_fileobj_t

{		jas_stream_destroy(stream);		return 0;	}
jas_stream_destroy(stream);
jas_stream_destroy(stream)
jas_stream_destroy
jas_stream_destroy
stream
stream
return 0;
0
obj->fd = -1;
obj->fd = -1
obj->fd
obj
obj
fd
-1
1
obj->flags = 0;
obj->flags = 0
obj->flags
obj
obj
flags
0
obj->pathname[0] = '\0';
obj->pathname[0] = '\0'
obj->pathname[0]
obj->pathname
obj
obj
pathname
0
'\0'
stream->obj_ = (void *) obj;
stream->obj_ = (void *) obj
stream->obj_
stream
stream
obj_
(void *) obj
void *
void
*
*
obj
obj
stream->ops_ = &jas_stream_fileops;
stream->ops_ = &jas_stream_fileops
stream->ops_
stream
stream
ops_
&jas_stream_fileops
jas_stream_fileops
jas_stream_fileops
if ((obj->fd = open(filename, openflags, JAS_STREAM_PERMS)) < 0) {		// Free the underlying file object, since it will not otherwise		// be freed.		jas_free(obj);		jas_stream_destroy(stream);		return 0;	}
(obj->fd = open(filename, openflags, JAS_STREAM_PERMS)) < 0
(obj->fd = open(filename, openflags, JAS_STREAM_PERMS))
obj->fd = open(filename, openflags, JAS_STREAM_PERMS)
obj->fd
obj
obj
fd
open(filename, openflags, JAS_STREAM_PERMS)
open
open
filename
filename
openflags
openflags
JAS_STREAM_PERMS
JAS_STREAM_PERMS
0
{		// Free the underlying file object, since it will not otherwise		// be freed.		jas_free(obj);		jas_stream_destroy(stream);		return 0;	}
jas_free(obj);
jas_free(obj)
jas_free
jas_free
obj
obj
jas_stream_destroy(stream);
jas_stream_destroy(stream)
jas_stream_destroy
jas_stream_destroy
stream
stream
return 0;
0
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0)
jas_stream_initbuf
jas_stream_initbuf
stream
stream
JAS_STREAM_FULLBUF
JAS_STREAM_FULLBUF
0
0
return stream;
stream
stream
-----joern-----
(8,33,0)
(13,49,0)
(30,45,0)
(26,45,0)
(2,24,0)
(41,45,0)
(10,14,0)
(31,43,0)
(19,29,0)
(11,50,0)
(32,49,0)
(36,7,0)
(15,49,0)
(7,21,0)
(12,49,0)
(18,6,0)
(45,2,0)
(2,48,0)
(42,40,0)
(45,6,0)
(50,45,0)
(14,18,0)
(39,43,0)
(14,10,0)
(16,29,0)
(1,18,0)
(9,48,0)
(17,8,0)
(34,24,0)
(38,39,0)
(48,6,0)
(43,0,0)
(45,50,0)
(31,3,0)
(20,10,0)
(27,29,0)
(23,29,0)
(5,47,0)
(4,36,0)
(3,37,0)
(31,47,0)
(29,6,0)
(40,3,0)
(46,17,0)
(31,8,0)
(24,2,0)
(25,2,0)
(47,49,0)
(28,19,0)
(18,14,0)
(29,19,0)
(47,14,0)
(35,14,0)
(31,7,0)
(22,49,0)
(48,2,0)
(44,49,0)
(19,28,1)
(2,48,1)
(40,42,1)
(38,24,1)
(43,39,1)
(35,19,1)
(46,50,1)
(18,1,1)
(5,50,1)
(14,18,1)
(45,6,1)
(26,41,1)
(11,45,1)
(31,3,1)
(31,8,1)
(23,16,1)
(29,6,1)
(31,47,1)
(17,46,1)
(18,6,1)
(41,10,1)
(31,7,1)
(4,19,1)
(24,34,1)
(7,36,1)
(29,27,1)
(8,17,1)
(24,2,1)
(47,14,1)
(48,6,1)
(19,29,1)
(20,14,1)
(34,2,1)
(50,45,1)
(45,30,1)
(47,5,1)
(3,40,1)
(28,29,1)
(10,20,1)
(42,10,1)
(31,43,1)
(36,4,1)
(50,11,1)
(10,14,1)
(9,25,1)
(16,24,1)
(45,2,1)
(27,23,1)
(48,9,1)
(39,38,1)
(30,26,1)
(1,35,1)
(40,10,2)
(17,50,2)
(30,10,2)
(28,24,2)
(5,50,2)
(42,10,2)
(8,50,2)
(38,24,2)
(35,19,2)
(45,10,2)
(29,24,2)
(7,19,2)
(29,6,2)
(19,29,2)
(27,24,2)
(41,10,2)
(16,24,2)
(23,24,2)
(46,50,2)
(50,45,2)
(36,19,2)
(50,10,2)
(39,24,2)
(2,48,2)
(31,7,2)
(45,2,2)
(18,6,2)
(47,50,2)
(31,3,2)
(26,10,2)
(31,47,2)
(47,14,2)
(31,43,2)
(14,19,2)
(10,14,2)
(24,2,2)
(31,8,2)
(20,19,2)
(3,10,2)
(18,19,2)
(48,6,2)
(10,19,2)
(4,19,2)
(1,19,2)
(11,10,2)
(45,6,2)
(14,18,2)
(43,24,2)
(19,24,2)
-----------------------------------
(0,)
(1,stream)
(2,oldpos = jas_stream_tell(stream)
(3,return -1;)
(4,1)
(5,pos)
(6,jas_stream_t *stream)
(7,return -1;)
(8,return -1;)
(9,stream)
(10,(pos = jas_stream_tell(stream)
(11,0)
(12,if ((pos = jas_stream_tell(stream)
(13,pos)
(14,pos = jas_stream_tell(stream)
(15,if (jas_stream_seek(stream, oldpos, SEEK_SET)
(16,stream)
(17,-1)
(18,jas_stream_tell(stream)
(19,jas_stream_seek(stream, 0, SEEK_END)
(20,0)
(21,)
(22,if (jas_stream_seek(stream, 0, SEEK_END)
(23,0)
(24,(oldpos = jas_stream_tell(stream)
(25,oldpos)
(26,oldpos)
(27,SEEK_END)
(28,0)
(29,jas_stream_seek(stream, 0, SEEK_END)
(30,SEEK_SET)
(31,RET)
(32,oldpos)
(33,)
(34,0)
(35,pos)
(36,-1)
(37,)
(38,1)
(39,-1)
(40,-1)
(41,stream)
(42,1)
(43,return -1;)
(44,if ((oldpos = jas_stream_tell(stream)
(45,jas_stream_seek(stream, oldpos, SEEK_SET)
(46,1)
(47,return pos;)
(48,jas_stream_tell(stream)
(49,)
(50,jas_stream_seek(stream, oldpos, SEEK_SET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffe694ad6300000000ffffffffffffffff4095ad6300000000ffffffffffffffff4095ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x42000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
jas_stream_t *jas_stream_fopen(const char *filename, const char *mode) {
jas_stream_t *stream;
jas_stream_fileobj_t *obj;
int openflags;
JAS_DBGLOG(100, ('jas_stream_fopen('_s', '_s') ', filename, mode));
stream->openmode_ = jas_strtoopenmode(mode);
if((stream->openmode_ & JAS_STREAM_READ) && 	  (stream->openmode_ & JAS_STREAM_WRITE))
openflags = O_RDWR;
if(stream->openmode_ & JAS_STREAM_BINARY)
openflags |= O_BINARY;
if(stream->openmode_ & JAS_STREAM_CREATE)
openflags |= O_CREAT | O_TRUNC;
obj->fd = -1;
obj->flags = 0;
obj->pathname[0] = 'stream->obj_ = (void *) obj;
stream->ops_ = &jas_stream_fileops;
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);
return stream;
=======================
