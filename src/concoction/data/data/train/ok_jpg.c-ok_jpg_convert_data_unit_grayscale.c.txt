-----label-----
1
-----code-----
static void ok_jpg_convert_data_unit_grayscale(const uint8_t *y, uint8_t *output,
                                               const int x_inc, const int y_inc,
                                               const int max_width, const int max_height) {
    for (int v = 0; v < max_height; v++) {
        uint8_t *out = output;
        for (int x = 0; x < max_width; x++) {
            out[0] = y[x];
            out[1] = y[x];
            out[2] = y[x];
            out[3] = 0xff;
            out += x_inc;
        }
        y += C_WIDTH;
        output += y_inc;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
23,24
25,26
25,27
27,28
29,30
29,31
31,32
33,34
34,35
34,36
34,37
34,38
35,36
36,37
36,38
38,39
38,40
40,41
42,43
42,44
43,44
45,46
47,48
48,49
50,51
50,52
50,53
50,54
51,52
52,53
52,54
53,54
55,56
55,57
55,58
58,59
59,60
61,62
61,63
61,64
61,65
62,63
63,64
63,65
65,66
65,67
67,68
69,70
69,71
70,71
72,73
74,75
75,76
77,78
77,79
77,80
77,81
77,82
78,79
79,80
79,81
80,81
80,82
81,82
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
91,93
92,93
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
102,104
103,104
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
113,115
114,115
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
130,131
131,132
131,133
132,133
134,135
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,22,24,26,28,30,32,37,39,41,44,46,49,54,56,57,60,64,66,68,71,73,76,82,83,86,88,93,94,97,99,104,105,108,110,115,116,117,121,123,127,129,133,135
-----computeFrom-----
42,43
42,44
69,70
69,71
79,80
79,81
90,91
90,92
101,102
101,103
112,113
112,114
119,120
119,121
125,126
125,127
131,132
131,133
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ForStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ForStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void ok_jpg_convert_data_unit_grayscale(const uint8_t *y, uint8_t *output,                                               const int x_inc, const int y_inc,                                               const int max_width, const int max_height) {    for (int v = 0; v < max_height; v++) {        uint8_t *out = output;        for (int x = 0; x < max_width; x++) {            out[0] = y[x];            out[1] = y[x];            out[2] = y[x];            out[3] = 0xff;            out += x_inc;        }        y += C_WIDTH;        output += y_inc;    }}
static void
ok_jpg_convert_data_unit_grayscale(const uint8_t *y, uint8_t *output,                                               const int x_inc, const int y_inc,                                               const int max_width, const int max_height)
ok_jpg_convert_data_unit_grayscale
const uint8_t *y
const uint8_t
uint8_t
*y
*
y
uint8_t *output
uint8_t
uint8_t
*output
*
output
const int x_inc
const int
x_inc
x_inc
const int y_inc
const int
y_inc
y_inc
const int max_width
const int
max_width
max_width
const int max_height
const int
max_height
max_height
{    for (int v = 0; v < max_height; v++) {        uint8_t *out = output;        for (int x = 0; x < max_width; x++) {            out[0] = y[x];            out[1] = y[x];            out[2] = y[x];            out[3] = 0xff;            out += x_inc;        }        y += C_WIDTH;        output += y_inc;    }}
for (int v = 0; v < max_height; v++) {        uint8_t *out = output;        for (int x = 0; x < max_width; x++) {            out[0] = y[x];            out[1] = y[x];            out[2] = y[x];            out[3] = 0xff;            out += x_inc;        }        y += C_WIDTH;        output += y_inc;    }
int v = 0;
int v = 0;
int
v = 0
v
= 0
0
v < max_height
v
v
max_height
max_height
v++
v
v
{        uint8_t *out = output;        for (int x = 0; x < max_width; x++) {            out[0] = y[x];            out[1] = y[x];            out[2] = y[x];            out[3] = 0xff;            out += x_inc;        }        y += C_WIDTH;        output += y_inc;    }
uint8_t *out = output;
uint8_t *out = output;
uint8_t
uint8_t
*out = output
*
out
= output
output
output
for (int x = 0; x < max_width; x++) {            out[0] = y[x];            out[1] = y[x];            out[2] = y[x];            out[3] = 0xff;            out += x_inc;        }
int x = 0;
int x = 0;
int
x = 0
x
= 0
0
x < max_width
x
x
max_width
max_width
x++
x
x
{            out[0] = y[x];            out[1] = y[x];            out[2] = y[x];            out[3] = 0xff;            out += x_inc;        }
out[0] = y[x];
out[0] = y[x]
out[0]
out
out
0
y[x]
y
y
x
x
out[1] = y[x];
out[1] = y[x]
out[1]
out
out
1
y[x]
y
y
x
x
out[2] = y[x];
out[2] = y[x]
out[2]
out
out
2
y[x]
y
y
x
x
out[3] = 0xff;
out[3] = 0xff
out[3]
out
out
3
0xff
out += x_inc;
out += x_inc
out
out
x_inc
x_inc
y += C_WIDTH;
y += C_WIDTH
y
y
C_WIDTH
C_WIDTH
output += y_inc;
output += y_inc
output
output
y_inc
y_inc
-----joern-----
(5,10,0)
(3,1,0)
(9,10,0)
(4,5,0)
(1,2,0)
(6,1,0)
(7,5,0)
(5,0,0)
(11,5,0)
(1,10,0)
(1,2,1)
(8,5,1)
(4,11,1)
(6,3,1)
(7,1,1)
(5,0,1)
(11,7,1)
(1,6,1)
(5,4,1)
(1,2,2)
(5,0,2)
-----------------------------------
(0,uint8_t *output)
(1,ok_jpg_idct_1d_col_8(input, temp)
(2,const int16_t *input)
(3,input)
(4,output)
(5,ok_jpg_idct_1d_row_16(8, temp, output)
(6,temp)
(7,8)
(8,RET)
(9,temp)
(10,)
(11,temp)
=====================================
----------------dynamic----------------
=======testcase========
max_height:0x00000000
max_width:0x00000000
y_inc:0x00000000
x_inc:0x00000000
output:0x00000000000000000000
y:0x00000000000000000000
model_version:0x01000000
=========trace=========
static void ok_jpg_convert_data_unit_grayscale(const uint8_t *y, uint8_t *output,                                                const int x_inc, const int y_inc,                                                const int max_width, const int max_height) {
=======================
