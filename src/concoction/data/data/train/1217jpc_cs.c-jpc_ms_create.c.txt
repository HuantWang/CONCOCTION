-----label-----
0
-----code-----
jpc_ms_t *jpc_ms_create(int type)
{
	jpc_ms_t *ms;
	jpc_mstabent_t *mstabent;

	if (!(ms = jas_malloc(sizeof(jpc_ms_t)))) {
		return 0;
	}
	ms->id = type;
	ms->len = 0;
	mstabent = jpc_mstab_lookup(ms->id);
	ms->ops = &mstabent->ops;
	memset(&ms->parms, 0, sizeof(jpc_msparms_t));
	return ms;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
26,27
26,28
27,28
28,29
29,30
29,31
30,31
32,33
32,34
33,34
35,36
36,37
36,38
37,38
40,41
41,42
43,44
44,45
44,46
45,46
45,47
46,47
49,50
51,52
52,53
52,54
53,54
53,55
54,55
58,59
59,60
59,61
60,61
62,63
62,64
63,64
65,66
65,67
66,67
69,70
70,71
70,72
71,72
71,73
72,73
75,76
76,77
76,78
77,78
80,81
81,82
81,83
81,84
81,85
82,83
84,85
85,86
85,87
86,87
90,91
91,92
91,93
92,93
95,96
96,97
-----nextToken-----
3,5,6,8,10,15,17,18,22,24,25,31,34,38,39,42,47,48,50,55,56,57,61,64,67,68,73,74,78,79,83,87,88,89,93,94,97
-----computeFrom-----
29,30
29,31
44,45
44,46
52,53
52,54
59,60
59,61
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ReturnStatement;IdExpression;Name;
-----ast_node-----
jpc_ms_t *jpc_ms_create(int type){	jpc_ms_t *ms;	jpc_mstabent_t *mstabent;	if (!(ms = jas_malloc(sizeof(jpc_ms_t)))) {		return 0;	}	ms->id = type;	ms->len = 0;	mstabent = jpc_mstab_lookup(ms->id);	ms->ops = &mstabent->ops;	memset(&ms->parms, 0, sizeof(jpc_msparms_t));	return ms;}
jpc_ms_t
jpc_ms_t
*jpc_ms_create(int type)
*
jpc_ms_create
int type
int
type
type
{	jpc_ms_t *ms;	jpc_mstabent_t *mstabent;	if (!(ms = jas_malloc(sizeof(jpc_ms_t)))) {		return 0;	}	ms->id = type;	ms->len = 0;	mstabent = jpc_mstab_lookup(ms->id);	ms->ops = &mstabent->ops;	memset(&ms->parms, 0, sizeof(jpc_msparms_t));	return ms;}
jpc_ms_t *ms;
jpc_ms_t *ms;
jpc_ms_t
jpc_ms_t
*ms
*
ms
jpc_mstabent_t *mstabent;
jpc_mstabent_t *mstabent;
jpc_mstabent_t
jpc_mstabent_t
*mstabent
*
mstabent
if (!(ms = jas_malloc(sizeof(jpc_ms_t)))) {		return 0;	}
!(ms = jas_malloc(sizeof(jpc_ms_t)))
(ms = jas_malloc(sizeof(jpc_ms_t)))
ms = jas_malloc(sizeof(jpc_ms_t))
ms
ms
jas_malloc(sizeof(jpc_ms_t))
jas_malloc
jas_malloc
sizeof(jpc_ms_t)
jpc_ms_t
jpc_ms_t
jpc_ms_t

{		return 0;	}
return 0;
0
ms->id = type;
ms->id = type
ms->id
ms
ms
id
type
type
ms->len = 0;
ms->len = 0
ms->len
ms
ms
len
0
mstabent = jpc_mstab_lookup(ms->id);
mstabent = jpc_mstab_lookup(ms->id)
mstabent
mstabent
jpc_mstab_lookup(ms->id)
jpc_mstab_lookup
jpc_mstab_lookup
ms->id
ms
ms
id
ms->ops = &mstabent->ops;
ms->ops = &mstabent->ops
ms->ops
ms
ms
ops
&mstabent->ops
mstabent->ops
mstabent
mstabent
ops
memset(&ms->parms, 0, sizeof(jpc_msparms_t));
memset(&ms->parms, 0, sizeof(jpc_msparms_t))
memset
memset
&ms->parms
ms->parms
ms
ms
parms
0
sizeof(jpc_msparms_t)
jpc_msparms_t
jpc_msparms_t
jpc_msparms_t

return ms;
ms
ms
-----joern-----
(62,9,0)
(65,24,0)
(29,65,0)
(38,50,0)
(32,27,0)
(54,68,0)
(32,69,0)
(3,32,0)
(46,69,0)
(23,47,0)
(56,62,0)
(41,7,0)
(39,6,0)
(6,47,0)
(38,24,0)
(70,7,0)
(10,47,0)
(2,63,0)
(15,69,0)
(63,4,0)
(4,24,0)
(9,22,0)
(10,68,0)
(27,69,0)
(45,23,0)
(9,24,0)
(28,9,0)
(62,13,0)
(33,34,0)
(66,54,0)
(49,6,0)
(72,7,0)
(67,50,0)
(69,6,0)
(42,33,0)
(2,16,0)
(57,51,0)
(17,9,0)
(52,32,0)
(63,2,0)
(44,65,0)
(37,22,0)
(54,9,0)
(50,23,0)
(65,29,0)
(11,10,0)
(34,33,0)
(0,58,0)
(51,57,0)
(66,62,0)
(55,51,0)
(12,24,0)
(5,54,0)
(64,9,0)
(32,29,0)
(51,48,0)
(33,1,0)
(61,51,0)
(66,64,0)
(27,16,0)
(53,56,0)
(64,7,0)
(50,38,0)
(6,69,0)
(22,1,0)
(32,48,0)
(24,38,0)
(4,63,0)
(24,7,0)
(36,4,0)
(30,64,0)
(8,27,0)
(25,57,0)
(23,50,0)
(33,58,0)
(69,7,0)
(35,34,0)
(46,1,0)
(43,27,0)
(31,65,0)
(40,7,0)
(14,4,0)
(19,7,0)
(18,46,0)
(60,2,0)
(29,32,0)
(59,0,0)
(20,32,0)
(32,58,0)
(26,23,0)
(2,58,0)
(21,7,0)
(71,5,0)
(46,69,1)
(20,3,1)
(29,65,1)
(57,25,1)
(32,20,1)
(17,33,1)
(44,46,1)
(32,58,1)
(64,30,1)
(2,58,1)
(2,63,1)
(67,23,1)
(49,39,1)
(66,64,1)
(0,59,1)
(26,12,1)
(65,31,1)
(31,44,1)
(9,24,1)
(50,67,1)
(51,55,1)
(25,51,1)
(22,37,1)
(33,34,1)
(53,32,1)
(43,2,1)
(27,69,1)
(30,0,1)
(42,57,1)
(54,9,1)
(10,47,1)
(37,9,1)
(56,53,1)
(62,9,1)
(51,48,1)
(34,35,1)
(18,22,1)
(66,62,1)
(38,50,1)
(45,26,1)
(46,18,1)
(32,29,1)
(54,5,1)
(32,27,1)
(52,29,1)
(64,9,1)
(32,48,1)
(65,24,1)
(57,51,1)
(6,47,1)
(9,28,1)
(4,24,1)
(0,58,1)
(50,23,1)
(24,38,1)
(39,15,1)
(61,69,1)
(71,10,1)
(11,0,1)
(63,4,1)
(60,57,1)
(32,69,1)
(33,58,1)
(6,49,1)
(15,24,1)
(66,54,1)
(27,8,1)
(3,52,1)
(44,27,1)
(23,45,1)
(8,43,1)
(55,61,1)
(28,17,1)
(4,14,1)
(14,36,1)
(10,11,1)
(23,47,1)
(35,42,1)
(69,6,1)
(59,32,1)
(62,56,1)
(5,71,1)
(36,60,1)
(54,9,2)
(4,24,2)
(35,57,2)
(54,0,2)
(59,32,2)
(32,69,2)
(0,32,2)
(64,9,2)
(28,57,2)
(14,57,2)
(46,69,2)
(6,47,2)
(2,57,2)
(37,57,2)
(33,58,2)
(71,0,2)
(36,57,2)
(27,57,2)
(2,63,2)
(32,58,2)
(65,24,2)
(9,24,2)
(29,65,2)
(53,32,2)
(8,57,2)
(69,6,2)
(62,32,2)
(32,27,2)
(9,57,2)
(34,57,2)
(43,57,2)
(50,23,2)
(10,0,2)
(11,0,2)
(64,0,2)
(4,57,2)
(30,0,2)
(66,62,2)
(32,48,2)
(23,47,2)
(66,54,2)
(18,57,2)
(38,50,2)
(60,57,2)
(17,57,2)
(5,0,2)
(56,32,2)
(24,38,2)
(32,29,2)
(33,34,2)
(42,57,2)
(10,47,2)
(46,57,2)
(22,57,2)
(27,69,2)
(63,4,2)
(33,57,2)
(57,51,2)
(62,9,2)
(2,58,2)
(63,57,2)
(0,58,2)
(51,48,2)
(66,64,2)
-----------------------------------
(0,jas_stream_eof(in)
(1,)
(2,jpc_getuint16(in, &qcc->compno)
(3,in)
(4,qcc->compno)
(5,-1)
(6,ms->len)
(7,)
(8,2)
(9,qcc->compno)
(10,jpc_qcc_destroyparms(ms)
(11,ms)
(12,qcc)
(13,)
(14,compno)
(15,len)
(16,)
(17,qcc)
(18,len)
(19,len)
(20,len)
(21,if (jpc_qcx_getcompparms(&qcc->compparms, cstate, in, len)
(22,qcc->compno = tmp)
(23,ms->parms)
(24,*qcc = &ms->parms.qcc)
(25,256)
(26,ms)
(27,len -= 2)
(28,compno)
(29,&qcc->compparms)
(30,0)
(31,compparms)
(32,jpc_qcx_getcompparms(&qcc->compparms, cstate, in, len)
(33,jpc_getuint8(in, &tmp)
(34,&tmp)
(35,tmp)
(36,qcc)
(37,tmp)
(38,&ms->parms.qcc)
(39,ms)
(40,tmp)
(41,if (jas_stream_eof(in)
(42,in)
(43,len)
(44,qcc)
(45,parms)
(46,--len)
(47,jpc_ms_t *ms)
(48,jpc_cstate_t *cstate)
(49,len)
(50,ms->parms.qcc)
(51,cstate->numcomps)
(52,cstate)
(53,1)
(54,return -1;)
(55,numcomps)
(56,-1)
(57,cstate->numcomps <= 256)
(58,jas_stream_t *in)
(59,in)
(60,in)
(61,cstate)
(62,return -1;)
(63,&qcc->compno)
(64,return 0;)
(65,qcc->compparms)
(66,RET)
(67,qcc)
(68,)
(69,len = ms->len)
(70,qcc)
(71,1)
(72,if (cstate->numcomps <= 256)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff9cf9a66300000000ffffffffffffffff32faa66300000000ffffffffffffffff32faa66300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff6100030000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
jpc_ms_t *jpc_ms_create(int type) {
jpc_ms_t *ms;
jpc_mstabent_t *mstabent;
ms->id = type;
ms->len = 0;
mstabent = jpc_mstab_lookup(ms->id);
ms->ops = &mstabent->ops;
memset(&ms->parms, 0, sizeof(jpc_msparms_t));
return ms;
=======================
