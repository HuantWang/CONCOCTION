-----label-----
0
-----code-----
static char *local_getline(char *zLine, FILE *in){
printf("\nfile_name:%s\n",__FILE__);
printf("function_name:%s\n",__func__);
printf("------function start!------\n");
printf("static char *local_getline(char *zLine, FILE *in){\n");
  printf("int nLine = zLine==0 ? 0 : 100;\n");
  int nLine = zLine==0 ? 0 : 100;
  printf("int n = 0;\n");
  int n = 0;

  while( 1 ){printf("while(1)\n");
  
    if( n+100>nLine ){printf("if(n+100>nLine)\n");
    
      printf("nLine = nLine*2 + 100;\n");
nLine = nLine*2 + 100;
      printf("zLine = realloc(zLine, nLine);\n");
zLine = realloc(zLine, nLine);
      if( zLine==0 ) {printf("if(zLine==0)\n");
      printf("return 0;\n");
      printf("------function end!------\n");
      return 0;}
    }
    if( fgets(&zLine[n], nLine - n, in)==0 ){printf("if(fgets(&zLine[n], nLine - n, in)==0)\n");
    
      if( n==0 ){printf("if(n==0)\n");
      
        printf("free(zLine);\n");
        free(zLine);
        printf("return 0;\n");
        printf("------function end!------\n");
        return 0;
      }
      printf("zLine[n] = 0;\n");
zLine[n] = 0;
      break;
    }
    while( zLine[n] ) {printf("while(zLine[n])\n");
    printf("n++;\n");
n++;}
    if( n>0 && zLine[n-1]=='\n' ){printf("if(n>0 && zLine[n-1]==' ')\n");
    
      printf("n--;\n");
n--;
      if( n>0 && zLine[n-1]=='\r' ) {printf("if(n>0 && zLine[n-1]=='\r')\n");
      printf("n--;\n");
n--;}
      printf("zLine[n] = 0;\n");
zLine[n] = 0;
      break;
    }
  }
  printf("return zLine;\n");
  printf("------function end!------\n");
  return zLine;
printf("------function end!------\n");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
6,7
6,8
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
18,19
19,20
19,21
19,22
20,21
24,25
25,26
25,27
25,28
26,27
29,30
31,32
32,33
32,34
33,34
36,37
37,38
37,39
38,39
41,42
42,43
42,44
43,44
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
52,55
53,54
53,55
54,55
59,60
60,61
60,62
61,62
64,65
65,66
65,67
67,68
67,69
69,70
71,72
71,73
73,74
73,75
73,76
73,77
73,78
74,75
75,76
75,77
76,77
79,80
79,81
80,81
80,82
81,82
81,83
82,83
85,86
87,88
87,89
87,90
87,91
87,92
87,93
88,89
89,90
89,91
90,91
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
102,103
102,104
103,104
103,105
104,105
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
117,118
117,119
117,120
118,119
120,121
122,123
124,125
124,126
125,126
125,127
126,127
129,130
129,131
129,132
129,133
130,131
131,132
131,133
132,133
135,136
136,137
136,138
137,138
140,141
141,142
141,143
142,143
145,146
147,148
147,149
148,149
148,150
149,150
149,151
149,152
149,153
150,151
152,153
153,154
153,155
154,155
156,157
158,159
158,160
159,160
161,162
163,164
166,167
166,168
166,169
166,170
166,171
167,168
168,169
168,170
169,170
172,173
172,174
173,174
173,175
174,175
177,178
177,179
177,180
177,181
177,182
177,183
178,179
179,180
179,181
180,181
183,184
184,185
184,186
185,186
188,189
189,190
189,191
190,191
192,193
194,195
195,196
195,197
196,197
199,200
200,201
200,202
201,202
204,205
206,207
207,208
207,209
208,209
211,212
212,213
212,214
213,214
213,215
214,215
216,217
220,221
220,222
221,222
221,223
222,223
224,225
226,227
226,228
226,229
227,228
228,229
228,230
229,230
232,233
233,234
233,235
234,235
237,238
238,239
239,240
241,242
241,243
242,243
242,244
243,244
243,245
244,245
247,248
247,249
248,249
248,250
249,250
251,252
251,253
252,253
256,257
256,258
256,259
256,260
256,261
256,262
256,263
257,258
258,259
258,260
259,260
262,263
263,264
263,265
264,265
267,268
268,269
269,270
271,272
271,273
272,273
272,274
273,274
273,275
274,275
277,278
277,279
278,279
278,280
279,280
281,282
281,283
282,283
286,287
286,288
286,289
287,288
288,289
288,290
289,290
292,293
293,294
293,295
294,295
297,298
298,299
299,300
301,302
302,303
302,304
303,304
306,307
307,308
307,309
308,309
308,310
309,310
311,312
315,316
316,317
316,318
317,318
320,321
321,322
321,323
322,323
325,326
326,327
328,329
329,330
329,331
330,331
-----nextToken-----
2,4,5,7,9,10,13,15,16,21,22,23,27,28,30,34,35,39,40,44,45,48,50,55,56,57,58,62,63,66,68,70,72,77,78,83,84,86,91,92,96,97,101,105,106,107,111,112,116,119,121,123,127,128,133,134,138,139,143,144,146,151,155,157,160,162,164,165,170,171,175,176,181,182,186,187,191,193,197,198,202,203,205,209,210,215,217,218,219,223,225,230,231,235,236,240,245,246,250,253,254,255,260,261,265,266,270,275,276,280,283,284,285,290,291,295,296,300,304,305,310,312,313,314,318,319,323,324,327,331,332
-----computeFrom-----
53,54
53,55
80,81
80,82
81,82
81,83
99,100
99,101
102,103
102,104
103,104
103,105
114,115
114,116
125,126
125,127
148,149
148,150
158,159
158,160
173,174
173,175
212,213
212,214
242,243
242,244
243,244
243,245
247,248
247,249
251,252
251,253
272,273
272,274
273,274
273,275
277,278
277,279
281,282
281,283
307,308
307,309
-----guardedBy-----
86,123
155,215
162,217
250,310
253,312
283,300
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ConditionalExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static char *local_getline(char *zLine, FILE *in){printf("\nfile_name:%s\n",__FILE__);printf("function_name:%s\n",__func__);printf("------function start!------\n");printf("static char *local_getline(char *zLine, FILE *in){\n");  printf("int nLine = zLine==0 ? 0 : 100;\n");  int nLine = zLine==0 ? 0 : 100;  printf("int n = 0;\n");  int n = 0;  while( 1 ){printf("while(1)\n");      if( n+100>nLine ){printf("if(n+100>nLine)\n");          printf("nLine = nLine*2 + 100;\n");nLine = nLine*2 + 100;      printf("zLine = realloc(zLine, nLine);\n");zLine = realloc(zLine, nLine);      if( zLine==0 ) {printf("if(zLine==0)\n");      printf("return 0;\n");      printf("------function end!------\n");      return 0;}    }    if( fgets(&zLine[n], nLine - n, in)==0 ){printf("if(fgets(&zLine[n], nLine - n, in)==0)\n");          if( n==0 ){printf("if(n==0)\n");              printf("free(zLine);\n");        free(zLine);        printf("return 0;\n");        printf("------function end!------\n");        return 0;      }      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }    while( zLine[n] ) {printf("while(zLine[n])\n");    printf("n++;\n");n++;}    if( n>0 && zLine[n-1]=='\n' ){printf("if(n>0 && zLine[n-1]==' ')\n");          printf("n--;\n");n--;      if( n>0 && zLine[n-1]=='\r' ) {printf("if(n>0 && zLine[n-1]=='\r')\n");      printf("n--;\n");n--;}      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }  }  printf("return zLine;\n");  printf("------function end!------\n");  return zLine;printf("------function end!------\n");}
static char
*local_getline(char *zLine, FILE *in)
*
local_getline
char *zLine
char
*zLine
*
zLine
FILE *in
FILE
FILE
*in
*
in
{printf("\nfile_name:%s\n",__FILE__);printf("function_name:%s\n",__func__);printf("------function start!------\n");printf("static char *local_getline(char *zLine, FILE *in){\n");  printf("int nLine = zLine==0 ? 0 : 100;\n");  int nLine = zLine==0 ? 0 : 100;  printf("int n = 0;\n");  int n = 0;  while( 1 ){printf("while(1)\n");      if( n+100>nLine ){printf("if(n+100>nLine)\n");          printf("nLine = nLine*2 + 100;\n");nLine = nLine*2 + 100;      printf("zLine = realloc(zLine, nLine);\n");zLine = realloc(zLine, nLine);      if( zLine==0 ) {printf("if(zLine==0)\n");      printf("return 0;\n");      printf("------function end!------\n");      return 0;}    }    if( fgets(&zLine[n], nLine - n, in)==0 ){printf("if(fgets(&zLine[n], nLine - n, in)==0)\n");          if( n==0 ){printf("if(n==0)\n");              printf("free(zLine);\n");        free(zLine);        printf("return 0;\n");        printf("------function end!------\n");        return 0;      }      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }    while( zLine[n] ) {printf("while(zLine[n])\n");    printf("n++;\n");n++;}    if( n>0 && zLine[n-1]=='\n' ){printf("if(n>0 && zLine[n-1]==' ')\n");          printf("n--;\n");n--;      if( n>0 && zLine[n-1]=='\r' ) {printf("if(n>0 && zLine[n-1]=='\r')\n");      printf("n--;\n");n--;}      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }  }  printf("return zLine;\n");  printf("------function end!------\n");  return zLine;printf("------function end!------\n");}
printf("\nfile_name:%s\n",__FILE__);
printf("\nfile_name:%s\n",__FILE__)
printf
printf
"\nfile_name:%s\n"
__FILE__
printf("function_name:%s\n",__func__);
printf("function_name:%s\n",__func__)
printf
printf
"function_name:%s\n"
__func__
__func__
printf("------function start!------\n");
printf("------function start!------\n")
printf
printf
"------function start!------\n"
printf("static char *local_getline(char *zLine, FILE *in){\n");
printf("static char *local_getline(char *zLine, FILE *in){\n")
printf
printf
"static char *local_getline(char *zLine, FILE *in){\n"
printf("int nLine = zLine==0 ? 0 : 100;\n");
printf("int nLine = zLine==0 ? 0 : 100;\n")
printf
printf
"int nLine = zLine==0 ? 0 : 100;\n"
int nLine = zLine==0 ? 0 : 100;
int nLine = zLine==0 ? 0 : 100;
int
nLine = zLine==0 ? 0 : 100
nLine
= zLine==0 ? 0 : 100
zLine==0 ? 0 : 100
zLine==0
zLine
zLine
0
0
100
printf("int n = 0;\n");
printf("int n = 0;\n")
printf
printf
"int n = 0;\n"
int n = 0;
int n = 0;
int
n = 0
n
= 0
0
while( 1 ){printf("while(1)\n");      if( n+100>nLine ){printf("if(n+100>nLine)\n");          printf("nLine = nLine*2 + 100;\n");nLine = nLine*2 + 100;      printf("zLine = realloc(zLine, nLine);\n");zLine = realloc(zLine, nLine);      if( zLine==0 ) {printf("if(zLine==0)\n");      printf("return 0;\n");      printf("------function end!------\n");      return 0;}    }    if( fgets(&zLine[n], nLine - n, in)==0 ){printf("if(fgets(&zLine[n], nLine - n, in)==0)\n");          if( n==0 ){printf("if(n==0)\n");              printf("free(zLine);\n");        free(zLine);        printf("return 0;\n");        printf("------function end!------\n");        return 0;      }      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }    while( zLine[n] ) {printf("while(zLine[n])\n");    printf("n++;\n");n++;}    if( n>0 && zLine[n-1]=='\n' ){printf("if(n>0 && zLine[n-1]==' ')\n");          printf("n--;\n");n--;      if( n>0 && zLine[n-1]=='\r' ) {printf("if(n>0 && zLine[n-1]=='\r')\n");      printf("n--;\n");n--;}      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }  }
1
{printf("while(1)\n");      if( n+100>nLine ){printf("if(n+100>nLine)\n");          printf("nLine = nLine*2 + 100;\n");nLine = nLine*2 + 100;      printf("zLine = realloc(zLine, nLine);\n");zLine = realloc(zLine, nLine);      if( zLine==0 ) {printf("if(zLine==0)\n");      printf("return 0;\n");      printf("------function end!------\n");      return 0;}    }    if( fgets(&zLine[n], nLine - n, in)==0 ){printf("if(fgets(&zLine[n], nLine - n, in)==0)\n");          if( n==0 ){printf("if(n==0)\n");              printf("free(zLine);\n");        free(zLine);        printf("return 0;\n");        printf("------function end!------\n");        return 0;      }      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }    while( zLine[n] ) {printf("while(zLine[n])\n");    printf("n++;\n");n++;}    if( n>0 && zLine[n-1]=='\n' ){printf("if(n>0 && zLine[n-1]==' ')\n");          printf("n--;\n");n--;      if( n>0 && zLine[n-1]=='\r' ) {printf("if(n>0 && zLine[n-1]=='\r')\n");      printf("n--;\n");n--;}      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }  }
printf("while(1)\n");
printf("while(1)\n")
printf
printf
"while(1)\n"
if( n+100>nLine ){printf("if(n+100>nLine)\n");          printf("nLine = nLine*2 + 100;\n");nLine = nLine*2 + 100;      printf("zLine = realloc(zLine, nLine);\n");zLine = realloc(zLine, nLine);      if( zLine==0 ) {printf("if(zLine==0)\n");      printf("return 0;\n");      printf("------function end!------\n");      return 0;}    }
n+100>nLine
n+100
n
n
100
nLine
nLine
{printf("if(n+100>nLine)\n");          printf("nLine = nLine*2 + 100;\n");nLine = nLine*2 + 100;      printf("zLine = realloc(zLine, nLine);\n");zLine = realloc(zLine, nLine);      if( zLine==0 ) {printf("if(zLine==0)\n");      printf("return 0;\n");      printf("------function end!------\n");      return 0;}    }
printf("if(n+100>nLine)\n");
printf("if(n+100>nLine)\n")
printf
printf
"if(n+100>nLine)\n"
printf("nLine = nLine*2 + 100;\n");
printf("nLine = nLine*2 + 100;\n")
printf
printf
"nLine = nLine*2 + 100;\n"
nLine = nLine*2 + 100;
nLine = nLine*2 + 100
nLine
nLine
nLine*2 + 100
nLine*2
nLine
nLine
2
100
printf("zLine = realloc(zLine, nLine);\n");
printf("zLine = realloc(zLine, nLine);\n")
printf
printf
"zLine = realloc(zLine, nLine);\n"
zLine = realloc(zLine, nLine);
zLine = realloc(zLine, nLine)
zLine
zLine
realloc(zLine, nLine)
realloc
realloc
zLine
zLine
nLine
nLine
if( zLine==0 ) {printf("if(zLine==0)\n");      printf("return 0;\n");      printf("------function end!------\n");      return 0;}
zLine==0
zLine
zLine
0
{printf("if(zLine==0)\n");      printf("return 0;\n");      printf("------function end!------\n");      return 0;}
printf("if(zLine==0)\n");
printf("if(zLine==0)\n")
printf
printf
"if(zLine==0)\n"
printf("return 0;\n");
printf("return 0;\n")
printf
printf
"return 0;\n"
printf("------function end!------\n");
printf("------function end!------\n")
printf
printf
"------function end!------\n"
return 0;
0
if( fgets(&zLine[n], nLine - n, in)==0 ){printf("if(fgets(&zLine[n], nLine - n, in)==0)\n");          if( n==0 ){printf("if(n==0)\n");              printf("free(zLine);\n");        free(zLine);        printf("return 0;\n");        printf("------function end!------\n");        return 0;      }      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }
fgets(&zLine[n], nLine - n, in)==0
fgets(&zLine[n], nLine - n, in)
fgets
fgets
&zLine[n]
zLine[n]
zLine
zLine
n
n
nLine - n
nLine
nLine
n
n
in
in
0
{printf("if(fgets(&zLine[n], nLine - n, in)==0)\n");          if( n==0 ){printf("if(n==0)\n");              printf("free(zLine);\n");        free(zLine);        printf("return 0;\n");        printf("------function end!------\n");        return 0;      }      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }
printf("if(fgets(&zLine[n], nLine - n, in)==0)\n");
printf("if(fgets(&zLine[n], nLine - n, in)==0)\n")
printf
printf
"if(fgets(&zLine[n], nLine - n, in)==0)\n"
if( n==0 ){printf("if(n==0)\n");              printf("free(zLine);\n");        free(zLine);        printf("return 0;\n");        printf("------function end!------\n");        return 0;      }
n==0
n
n
0
{printf("if(n==0)\n");              printf("free(zLine);\n");        free(zLine);        printf("return 0;\n");        printf("------function end!------\n");        return 0;      }
printf("if(n==0)\n");
printf("if(n==0)\n")
printf
printf
"if(n==0)\n"
printf("free(zLine);\n");
printf("free(zLine);\n")
printf
printf
"free(zLine);\n"
free(zLine);
free(zLine)
free
free
zLine
zLine
printf("return 0;\n");
printf("return 0;\n")
printf
printf
"return 0;\n"
printf("------function end!------\n");
printf("------function end!------\n")
printf
printf
"------function end!------\n"
return 0;
0
printf("zLine[n] = 0;\n");
printf("zLine[n] = 0;\n")
printf
printf
"zLine[n] = 0;\n"
zLine[n] = 0;
zLine[n] = 0
zLine[n]
zLine
zLine
n
n
0
break;
while( zLine[n] ) {printf("while(zLine[n])\n");    printf("n++;\n");n++;}
zLine[n]
zLine
zLine
n
n
{printf("while(zLine[n])\n");    printf("n++;\n");n++;}
printf("while(zLine[n])\n");
printf("while(zLine[n])\n")
printf
printf
"while(zLine[n])\n"
printf("n++;\n");
printf("n++;\n")
printf
printf
"n++;\n"
n++;
n++
n
n
if( n>0 && zLine[n-1]=='\n' ){printf("if(n>0 && zLine[n-1]==' ')\n");          printf("n--;\n");n--;      if( n>0 && zLine[n-1]=='\r' ) {printf("if(n>0 && zLine[n-1]=='\r')\n");      printf("n--;\n");n--;}      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }
n>0 && zLine[n-1]=='\n'
n>0
n
n
0
zLine[n-1]=='\n'
zLine[n-1]
zLine
zLine
n-1
n
n
1
'\n'
{printf("if(n>0 && zLine[n-1]==' ')\n");          printf("n--;\n");n--;      if( n>0 && zLine[n-1]=='\r' ) {printf("if(n>0 && zLine[n-1]=='\r')\n");      printf("n--;\n");n--;}      printf("zLine[n] = 0;\n");zLine[n] = 0;      break;    }
printf("if(n>0 && zLine[n-1]==' ')\n");
printf("if(n>0 && zLine[n-1]==' ')\n")
printf
printf
"if(n>0 && zLine[n-1]==' ')\n"
printf("n--;\n");
printf("n--;\n")
printf
printf
"n--;\n"
n--;
n--
n
n
if( n>0 && zLine[n-1]=='\r' ) {printf("if(n>0 && zLine[n-1]=='\r')\n");      printf("n--;\n");n--;}
n>0 && zLine[n-1]=='\r'
n>0
n
n
0
zLine[n-1]=='\r'
zLine[n-1]
zLine
zLine
n-1
n
n
1
'\r'
{printf("if(n>0 && zLine[n-1]=='\r')\n");      printf("n--;\n");n--;}
printf("if(n>0 && zLine[n-1]=='\r')\n");
printf("if(n>0 && zLine[n-1]=='\r')\n")
printf
printf
"if(n>0 && zLine[n-1]=='\r')\n"
printf("n--;\n");
printf("n--;\n")
printf
printf
"n--;\n"
n--;
n--
n
n
printf("zLine[n] = 0;\n");
printf("zLine[n] = 0;\n")
printf
printf
"zLine[n] = 0;\n"
zLine[n] = 0;
zLine[n] = 0
zLine[n]
zLine
zLine
n
n
0
break;
printf("return zLine;\n");
printf("return zLine;\n")
printf
printf
"return zLine;\n"
printf("------function end!------\n");
printf("------function end!------\n")
printf
printf
"------function end!------\n"
return zLine;
zLine
zLine
printf("------function end!------\n");
printf("------function end!------\n")
printf
printf
"------function end!------\n"
-----joern-----
(30,46,0)
(33,18,0)
(27,24,0)
(22,28,0)
(41,37,0)
(36,46,0)
(5,42,0)
(53,24,0)
(36,29,0)
(28,43,0)
(48,24,0)
(15,18,0)
(40,18,0)
(37,41,0)
(46,36,0)
(30,45,0)
(52,29,0)
(4,1,0)
(54,37,0)
(34,25,0)
(28,45,0)
(17,40,0)
(49,55,0)
(42,18,0)
(23,15,0)
(8,50,0)
(3,45,0)
(16,25,0)
(54,35,0)
(20,28,0)
(19,13,0)
(6,24,0)
(21,31,0)
(50,55,0)
(45,28,0)
(51,53,0)
(11,31,0)
(30,24,0)
(38,24,0)
(45,30,0)
(50,24,0)
(7,6,0)
(31,18,0)
(13,18,0)
(1,41,0)
(43,24,0)
(30,37,0)
(26,15,0)
(37,54,0)
(46,44,0)
(46,30,0)
(9,35,0)
(29,36,0)
(35,54,0)
(44,25,0)
(44,46,0)
(10,27,0)
(14,30,0)
(43,39,0)
(56,43,0)
(25,44,0)
(37,30,0)
(32,29,0)
(12,35,0)
(39,43,0)
(55,50,0)
(2,1,0)
(41,1,0)
(54,35,1)
(45,28,1)
(20,14,1)
(43,39,1)
(32,37,1)
(23,26,1)
(34,16,1)
(1,2,1)
(30,37,1)
(53,51,1)
(55,49,1)
(51,43,1)
(15,23,1)
(35,12,1)
(16,36,1)
(27,10,1)
(45,3,1)
(41,1,1)
(26,31,1)
(46,36,1)
(37,54,1)
(22,20,1)
(9,45,1)
(44,25,1)
(13,19,1)
(40,17,1)
(28,43,1)
(3,28,1)
(29,52,1)
(6,7,1)
(39,56,1)
(46,44,1)
(10,6,1)
(28,22,1)
(47,13,1)
(4,54,1)
(52,32,1)
(31,21,1)
(30,46,1)
(19,42,1)
(12,9,1)
(8,53,1)
(14,50,1)
(17,47,1)
(56,27,1)
(36,29,1)
(30,45,1)
(0,40,1)
(37,41,1)
(2,4,1)
(17,30,1)
(42,5,1)
(25,34,1)
(7,47,1)
(50,55,1)
(49,8,1)
(21,11,1)
(5,15,1)
(35,47,2)
(41,1,2)
(45,28,2)
(41,47,2)
(30,45,2)
(46,44,2)
(28,43,2)
(46,36,2)
(32,47,2)
(30,47,2)
(43,47,2)
(50,55,2)
(9,47,2)
(54,47,2)
(36,47,2)
(55,47,2)
(10,47,2)
(50,47,2)
(16,47,2)
(44,47,2)
(28,47,2)
(54,35,2)
(39,47,2)
(30,37,2)
(36,29,2)
(3,47,2)
(29,47,2)
(27,47,2)
(51,47,2)
(52,47,2)
(2,47,2)
(4,47,2)
(1,47,2)
(37,54,2)
(7,47,2)
(56,47,2)
(49,47,2)
(53,47,2)
(30,46,2)
(6,47,2)
(12,47,2)
(22,47,2)
(37,41,2)
(14,47,2)
(20,47,2)
(44,25,2)
(37,47,2)
(8,47,2)
(43,39,2)
(46,47,2)
(45,47,2)
(25,47,2)
(34,47,2)
-----------------------------------
(0,RET)
(1,sEnd.ru_utime)
(2,ru_utime)
(3,0.001)
(4,sEnd)
(5,"------function start!------\\n")
(6,printf("if(enableTimer)
(7,"if(enableTimer)
(8,RUSAGE_SELF)
(9,sBegin)
(10,"struct rusage sEnd;\\n")
(11,"\\nfile_name:%s\\n")
(12,ru_utime)
(13,printf("static void endTimer(void)
(14,"Run Time: real %.3f user %f sys %f\\n")
(15,printf("function_name:%s\\n",__func__)
(16,sEnd)
(17,"------function end!------\\n")
(18,)
(19,"static void endTimer(void)
(20,iEnd)
(21,__FILE__)
(22,iBegin)
(23,__func__)
(24,)
(25,sEnd.ru_stime)
(26,"function_name:%s\\n")
(27,printf("struct rusage sEnd;\\n")
(28,iEnd - iBegin)
(29,sBegin.ru_stime)
(30,printf("Run Time: real %.3f user %f sys %f\\n",\\n       (iEnd - iBegin)
(31,printf("\\nfile_name:%s\\n",__FILE__)
(32,sBegin)
(33,if( enableTimer )
(34,ru_stime)
(35,sBegin.ru_utime)
(36,&sBegin.ru_stime)
(37,timeDiff(&sBegin.ru_utime, &sEnd.ru_utime)
(38,sEnd)
(39,timeOfDay()
(40,printf("------function end!------\\n")
(41,&sEnd.ru_utime)
(42,printf("------function start!------\\n")
(43,iEnd = timeOfDay()
(44,&sEnd.ru_stime)
(45,(iEnd - iBegin)
(46,timeDiff(&sBegin.ru_stime, &sEnd.ru_stime)
(47,enableTimer)
(48,iEnd)
(49,sEnd)
(50,getrusage(RUSAGE_SELF, &sEnd)
(51,"getrusage(RUSAGE_SELF, &sEnd)
(52,ru_stime)
(53,printf("getrusage(RUSAGE_SELF, &sEnd)
(54,&sBegin.ru_utime)
(55,&sEnd)
(56,iEnd)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
stdin-stat:0x000800000000000001000000ffffffff0100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff2ff9366400000000ffffffffffffffff9ff8366400000000ffffffffffffffff9ff8366400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
stdin:0x2e00000000000000000000000000000000000000
=========trace=========
static char *local_getline(char *zLine, FILE *in){
int nLine = zLine==0 ? 0 : 100;
int n = 0;
while(1)
if(fgets(&zLine[n], nLine - n, in)==0)
if(n==0)
free(zLine);
return 0;
=======================
