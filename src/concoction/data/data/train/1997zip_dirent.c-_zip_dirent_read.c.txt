-----label-----
1
-----code-----
zip_int64_t
_zip_dirent_read(zip_dirent_t *zde, zip_source_t *src, zip_buffer_t *buffer, bool local, zip_error_t *error)
{
    zip_uint8_t buf[CDENTRYSIZE];
    zip_uint16_t dostime, dosdate;
    zip_uint32_t size, variable_size;
    zip_uint16_t filename_len, comment_len, ef_len;

    bool from_buffer = (buffer != NULL);

    size = local ? LENTRYSIZE : CDENTRYSIZE;

    if (buffer) {
        if (_zip_buffer_left(buffer) < size) {
            zip_error_set(error, ZIP_ER_NOZIP, 0);
            return -1;
        }
    }
    else {
        if ((buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL) {
            return -1;
        }
    }

    if (memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4) != 0) {
	zip_error_set(error, ZIP_ER_NOZIP, 0);
        if (!from_buffer) {
            _zip_buffer_free(buffer);
        }
	return -1;
    }

    /* convert buffercontents to zip_dirent */

    _zip_dirent_init(zde);
    if (!local)
	zde->version_madeby = _zip_buffer_get_16(buffer);
    else
	zde->version_madeby = 0;
    zde->version_needed = _zip_buffer_get_16(buffer);
    zde->bitflags = _zip_buffer_get_16(buffer);
    zde->comp_method = _zip_buffer_get_16(buffer);

    /* convert to time_t */
    dostime = _zip_buffer_get_16(buffer);
    dosdate = _zip_buffer_get_16(buffer);
    zde->last_mod = _zip_d2u_time(dostime, dosdate);

    zde->crc = _zip_buffer_get_32(buffer);
    zde->comp_size = _zip_buffer_get_32(buffer);
    zde->uncomp_size = _zip_buffer_get_32(buffer);

    filename_len = _zip_buffer_get_16(buffer);
    ef_len = _zip_buffer_get_16(buffer);

    if (local) {
	comment_len = 0;
	zde->disk_number = 0;
	zde->int_attrib = 0;
	zde->ext_attrib = 0;
	zde->offset = 0;
    } else {
	comment_len = _zip_buffer_get_16(buffer);
	zde->disk_number = _zip_buffer_get_16(buffer);
	zde->int_attrib = _zip_buffer_get_16(buffer);
	zde->ext_attrib = _zip_buffer_get_32(buffer);
	zde->offset = _zip_buffer_get_32(buffer);
    }

    if (!_zip_buffer_ok(buffer)) {
        zip_error_set(error, ZIP_ER_INTERNAL, 0);
        if (!from_buffer) {
            _zip_buffer_free(buffer);
        }
        return -1;
    }

    if (zde->bitflags & ZIP_GPBF_ENCRYPTED) {
	if (zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION) {
	    /* TODO */
	    zde->encryption_method = ZIP_EM_UNKNOWN;
	}
	else {
	    zde->encryption_method = ZIP_EM_TRAD_PKWARE;
	}
    }
    else {
	zde->encryption_method = ZIP_EM_NONE;
    }

    zde->filename = NULL;
    zde->extra_fields = NULL;
    zde->comment = NULL;

    variable_size = (zip_uint32_t)filename_len+(zip_uint32_t)ef_len+(zip_uint32_t)comment_len;

    if (from_buffer) {
        if (_zip_buffer_left(buffer) < variable_size) {
            zip_error_set(error, ZIP_ER_INCONS, 0);
            return -1;
        }
    }
    else {
        _zip_buffer_free(buffer);

        if ((buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL) {
            return -1;
        }
    }

    if (filename_len) {
	zde->filename = _zip_read_string(buffer, src, filename_len, 1, error);
        if (!zde->filename) {
            if (zip_error_code_zip(error) == ZIP_ER_EOF) {
                zip_error_set(error, ZIP_ER_INCONS, 0);
            }
            if (!from_buffer) {
                _zip_buffer_free(buffer);
            }
	    return -1;
        }

	if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {
	    if (_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {
		zip_error_set(error, ZIP_ER_INCONS, 0);
                if (!from_buffer) {
                    _zip_buffer_free(buffer);
                }
		return -1;
	    }
	}
    }

    if (ef_len) {
	zip_uint8_t *ef = _zip_read_data(buffer, src, ef_len, 0, error);

        if (ef == NULL) {
            if (!from_buffer) {
                _zip_buffer_free(buffer);
            }
	    return -1;
        }
        if (!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)) {
	    free(ef);
            if (!from_buffer) {
                _zip_buffer_free(buffer);
            }
	    return -1;
	}
	free(ef);
	if (local)
	    zde->local_extra_fields_read = 1;
    }

    if (comment_len) {
	zde->comment = _zip_read_string(buffer, src, comment_len, 0, error);
        if (!zde->comment) {
            if (!from_buffer) {
                _zip_buffer_free(buffer);
            }
	    return -1;
        }
	if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {
	    if (_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {
		zip_error_set(error, ZIP_ER_INCONS, 0);
                if (!from_buffer) {
                    _zip_buffer_free(buffer);
                }
		return -1;
	    }
	}
    }

    zde->filename = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_NAME, zde->filename);
    zde->comment = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_COMMENT, zde->comment);

    /* Zip64 */

    if (zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX || zde->offset == ZIP_UINT32_MAX) {
	zip_uint16_t got_len;
        zip_buffer_t *ef_buffer;
	const zip_uint8_t *ef = _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error);
	/* TODO: if got_len == 0 && !ZIP64_EOCD: no error, 0xffffffff is valid value */
        if (ef == NULL) {
            if (!from_buffer) {
                _zip_buffer_free(buffer);
            }
	    return -1;
        }

        if ((ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL) {
            zip_error_set(error, ZIP_ER_MEMORY, 0);
            if (!from_buffer) {
                _zip_buffer_free(buffer);
            }
            return -1;
        }

	if (zde->uncomp_size == ZIP_UINT32_MAX)
	    zde->uncomp_size = _zip_buffer_get_64(ef_buffer);
	else if (local) {
	    /* From appnote.txt: This entry in the Local header MUST
	       include BOTH original and compressed file size fields. */
            (void)_zip_buffer_skip(ef_buffer, 8); /* error is caught by _zip_buffer_eof() call */
	}
	if (zde->comp_size == ZIP_UINT32_MAX)
	    zde->comp_size = _zip_buffer_get_64(ef_buffer);
	if (!local) {
	    if (zde->offset == ZIP_UINT32_MAX)
		zde->offset = _zip_buffer_get_64(ef_buffer);
	    if (zde->disk_number == ZIP_UINT16_MAX)
		zde->disk_number = _zip_buffer_get_32(buffer);
	}

        if (!_zip_buffer_eof(ef_buffer)) {
            zip_error_set(error, ZIP_ER_INCONS, 0);
            _zip_buffer_free(ef_buffer);
            if (!from_buffer) {
                _zip_buffer_free(buffer);
            }
            return -1;
        }
        _zip_buffer_free(ef_buffer);
    }

    if (!_zip_buffer_ok(buffer)) {
        zip_error_set(error, ZIP_ER_INTERNAL, 0);
        if (!from_buffer) {
            _zip_buffer_free(buffer);
        }
        return -1;
    }
    if (!from_buffer) {
        _zip_buffer_free(buffer);
    }

    /* zip_source_seek / zip_source_tell don't support values > ZIP_INT64_MAX */
    if (zde->offset > ZIP_INT64_MAX) {
	zip_error_set(error, ZIP_ER_SEEK, EFBIG);
	return -1;
    }

    if (!_zip_dirent_process_winzip_aes(zde, error)) {
	if (!from_buffer) {
	    _zip_buffer_free(buffer);
	}
	return -1;
    }

    zde->extra_fields = _zip_ef_remove_internal(zde->extra_fields);

    return (zip_int64_t)(size + variable_size);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
15,17
18,19
18,20
19,20
21,22
21,23
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
34,35
34,36
34,37
34,38
34,39
34,40
34,41
34,42
34,43
34,44
34,45
34,46
34,47
34,48
34,49
34,50
34,51
34,52
34,53
34,54
34,55
34,56
34,57
34,58
34,59
34,60
34,61
34,62
34,63
34,64
34,65
34,66
34,67
34,68
34,69
34,70
34,71
34,72
34,73
34,74
34,75
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
45,48
46,47
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
66,67
68,69
70,71
71,72
71,73
73,74
73,75
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
86,88
86,89
87,88
89,90
91,92
93,94
93,95
93,96
94,95
96,97
97,98
97,99
98,99
98,100
99,100
99,101
100,101
102,103
104,105
106,107
106,108
107,108
108,109
108,110
108,111
108,112
109,110
111,112
113,114
116,117
117,118
119,120
120,121
120,122
121,122
121,123
122,123
123,124
123,125
124,125
126,127
126,128
126,129
126,130
126,131
127,128
129,130
131,132
133,134
135,136
137,138
139,140
140,141
141,142
143,144
143,145
144,145
144,146
145,146
145,147
145,148
145,149
146,147
148,149
148,150
148,151
149,150
151,152
154,155
155,156
155,157
155,158
156,157
158,159
160,161
164,165
164,166
164,167
165,166
166,167
166,168
166,169
166,170
167,168
169,170
171,172
174,175
174,176
175,176
176,177
178,179
179,180
180,181
180,182
181,182
183,184
185,186
186,187
188,189
189,190
189,191
190,191
192,193
194,195
194,196
194,197
195,196
196,197
198,199
199,200
199,201
200,201
200,202
201,202
204,205
204,206
205,206
207,208
209,210
210,211
210,212
211,212
211,213
212,213
216,217
217,218
217,219
218,219
218,220
219,220
222,223
222,224
223,224
225,226
227,228
228,229
228,230
229,230
229,231
230,231
233,234
233,235
234,235
236,237
238,239
239,240
239,241
240,241
240,242
241,242
244,245
244,246
245,246
247,248
249,250
250,251
250,252
251,252
253,254
253,255
254,255
256,257
258,259
259,260
259,261
260,261
262,263
262,264
263,264
265,266
267,268
268,269
268,270
269,270
269,271
270,271
273,274
273,275
273,276
274,275
276,277
278,279
280,281
281,282
281,283
282,283
282,284
283,284
286,287
286,288
287,288
289,290
291,292
292,293
292,294
293,294
293,295
294,295
297,298
297,299
298,299
300,301
302,303
303,304
303,305
304,305
304,306
305,306
308,309
308,310
309,310
311,312
313,314
314,315
314,316
315,316
317,318
317,319
318,319
320,321
322,323
323,324
323,325
324,325
326,327
326,328
327,328
329,330
331,332
331,333
331,334
332,333
334,335
334,336
334,337
334,338
334,339
335,336
336,337
336,338
337,338
340,341
341,342
341,343
342,343
342,344
343,344
347,348
348,349
348,350
349,350
349,351
350,351
354,355
355,356
355,357
356,357
356,358
357,358
361,362
362,363
362,364
363,364
363,365
364,365
368,369
368,370
368,371
368,372
368,373
369,370
370,371
370,372
371,372
373,374
373,375
374,375
376,377
378,379
379,380
379,381
380,381
380,382
381,382
384,385
384,386
385,386
387,388
389,390
390,391
390,392
391,392
391,393
392,393
395,396
395,397
396,397
398,399
400,401
401,402
401,403
402,403
402,404
403,404
406,407
406,408
407,408
409,410
411,412
412,413
412,414
413,414
413,415
414,415
417,418
417,419
418,419
420,421
422,423
422,424
423,424
424,425
424,426
425,426
427,428
429,430
429,431
429,432
430,431
431,432
431,433
431,434
431,435
432,433
434,435
436,437
439,440
439,441
440,441
441,442
443,444
444,445
445,446
445,447
446,447
448,449
450,451
451,452
453,454
453,455
453,456
454,455
454,456
455,456
455,457
456,457
459,460
461,462
462,463
462,464
462,465
463,464
463,465
464,465
464,466
465,466
468,469
470,471
471,472
472,473
472,474
473,474
473,475
474,475
477,478
479,480
480,481
481,482
481,483
482,483
482,484
483,484
486,487
488,489
489,490
490,491
490,492
491,492
491,493
492,493
495,496
497,498
498,499
498,500
499,500
499,501
500,501
503,504
505,506
506,507
506,508
507,508
507,509
508,509
511,512
513,514
514,515
514,516
515,516
515,517
516,517
519,520
521,522
522,523
522,524
523,524
525,526
525,527
526,527
526,528
527,528
527,529
528,529
528,530
529,530
532,533
534,535
534,536
535,536
535,537
536,537
539,540
541,542
541,543
542,543
542,544
543,544
546,547
548,549
548,550
548,551
549,550
551,552
552,553
552,554
553,554
553,555
554,555
554,556
555,556
557,558
559,560
561,562
561,563
562,563
563,564
563,565
563,566
563,567
564,565
566,567
568,569
571,572
572,573
574,575
574,576
575,576
576,577
576,578
577,578
579,580
581,582
581,583
582,583
582,584
583,584
584,585
584,586
585,586
587,588
587,589
587,590
587,591
587,592
588,589
590,591
592,593
594,595
596,597
598,599
600,601
601,602
602,603
604,605
604,606
605,606
607,608
607,609
607,610
608,609
609,610
609,611
610,611
610,612
611,612
614,615
614,616
614,617
614,618
614,619
614,620
615,616
617,618
619,620
621,622
624,625
626,627
626,628
627,628
628,629
628,630
629,630
632,633
632,634
632,635
633,634
633,635
634,635
634,636
635,636
635,637
636,637
638,639
640,641
642,643
643,644
644,645
644,646
644,647
644,648
645,646
647,648
649,650
652,653
652,654
653,654
654,655
656,657
657,658
658,659
658,660
659,660
661,662
663,664
664,665
666,667
666,668
667,668
667,669
668,669
668,670
669,670
672,673
674,675
675,676
675,677
676,677
676,678
677,678
677,679
677,680
678,679
680,681
680,682
681,682
684,685
686,687
688,689
688,690
688,691
689,690
690,691
690,692
690,693
690,694
691,692
693,694
695,696
698,699
698,700
699,700
700,701
702,703
703,704
704,705
704,706
705,706
707,708
709,710
710,711
712,713
712,714
713,714
715,716
715,717
715,718
715,719
715,720
716,717
717,718
717,719
718,719
720,721
720,722
720,723
723,724
724,725
724,726
724,727
724,728
724,729
724,730
725,726
727,728
729,730
731,732
734,735
736,737
736,738
737,738
737,739
738,739
740,741
742,743
742,744
743,744
743,745
744,745
745,746
747,748
748,749
749,750
749,751
750,751
752,753
754,755
755,756
757,758
757,759
758,759
759,760
759,761
759,762
759,763
759,764
759,765
760,761
762,763
764,765
766,767
766,768
766,769
767,768
769,770
771,772
773,774
774,775
774,776
775,776
778,779
780,781
780,782
780,783
781,782
782,783
782,784
783,784
785,786
787,788
787,789
788,789
789,790
791,792
792,793
793,794
793,795
794,795
796,797
798,799
799,800
801,802
802,803
802,804
803,804
805,806
807,808
807,809
808,809
810,811
811,812
811,813
812,813
812,814
813,814
817,818
817,819
818,819
820,821
820,822
820,823
821,822
822,823
822,824
823,824
823,825
824,825
827,828
827,829
827,830
827,831
827,832
827,833
828,829
830,831
832,833
834,835
837,838
839,840
839,841
840,841
841,842
841,843
842,843
845,846
845,847
846,847
846,848
847,848
848,849
850,851
851,852
852,853
852,854
853,854
855,856
857,858
858,859
860,861
860,862
861,862
861,863
862,863
862,864
863,864
866,867
868,869
869,870
869,871
870,871
870,872
871,872
871,873
871,874
872,873
874,875
874,876
875,876
878,879
880,881
882,883
882,884
882,885
883,884
884,885
884,886
884,887
884,888
885,886
887,888
889,890
892,893
892,894
893,894
894,895
896,897
897,898
898,899
898,900
899,900
901,902
903,904
904,905
906,907
907,908
907,909
908,909
908,910
909,910
912,913
912,914
912,915
912,916
913,914
915,916
917,918
919,920
919,921
920,921
923,924
924,925
924,926
925,926
925,927
926,927
929,930
929,931
929,932
929,933
930,931
932,933
934,935
936,937
936,938
937,938
940,941
940,942
941,942
941,943
942,943
942,944
943,944
943,945
944,945
944,946
945,946
948,949
950,951
950,952
951,952
951,953
952,953
955,956
957,958
957,959
958,959
958,960
959,960
962,963
964,965
964,966
964,967
964,968
964,969
964,970
964,971
964,972
964,973
964,974
965,966
966,967
966,968
967,968
969,970
971,972
972,973
972,974
973,974
975,976
975,977
978,979
979,980
979,981
980,981
982,983
982,984
982,985
985,986
986,987
986,988
986,989
986,990
986,991
986,992
986,993
987,988
989,990
989,991
990,991
993,994
994,995
996,997
999,1000
999,1001
999,1002
1000,1001
1002,1003
1004,1005
1006,1007
1008,1009
1008,1010
1009,1010
1009,1011
1010,1011
1012,1013
1014,1015
1014,1016
1015,1016
1015,1017
1016,1017
1017,1018
1019,1020
1020,1021
1021,1022
1021,1023
1022,1023
1024,1025
1026,1027
1027,1028
1029,1030
1029,1031
1030,1031
1030,1032
1031,1032
1032,1033
1032,1034
1033,1034
1035,1036
1035,1037
1035,1038
1036,1037
1038,1039
1038,1040
1039,1040
1039,1041
1040,1041
1042,1043
1044,1045
1046,1047
1048,1049
1050,1051
1050,1052
1050,1053
1051,1052
1052,1053
1052,1054
1052,1055
1052,1056
1053,1054
1055,1056
1057,1058
1060,1061
1060,1062
1061,1062
1062,1063
1064,1065
1065,1066
1066,1067
1066,1068
1067,1068
1069,1070
1071,1072
1072,1073
1074,1075
1074,1076
1074,1077
1075,1076
1075,1077
1076,1077
1076,1078
1077,1078
1080,1081
1082,1083
1083,1084
1083,1085
1084,1085
1084,1086
1085,1086
1088,1089
1088,1090
1089,1090
1091,1092
1093,1094
1093,1095
1094,1095
1096,1097
1097,1098
1098,1099
1098,1100
1099,1100
1099,1101
1102,1103
1102,1104
1102,1105
1103,1104
1105,1106
1108,1109
1108,1110
1109,1110
1109,1111
1110,1111
1110,1112
1111,1112
1114,1115
1116,1117
1117,1118
1117,1119
1118,1119
1118,1120
1119,1120
1122,1123
1122,1124
1123,1124
1125,1126
1127,1128
1127,1129
1128,1129
1129,1130
1131,1132
1131,1133
1132,1133
1132,1134
1133,1134
1133,1135
1134,1135
1134,1136
1135,1136
1138,1139
1140,1141
1141,1142
1141,1143
1142,1143
1142,1144
1143,1144
1146,1147
1146,1148
1147,1148
1149,1150
1151,1152
1151,1153
1152,1153
1152,1154
1153,1154
1153,1155
1154,1155
1157,1158
1159,1160
1160,1161
1160,1162
1161,1162
1161,1163
1162,1163
1165,1166
1165,1167
1166,1167
1168,1169
1170,1171
1170,1172
1171,1172
1172,1173
1172,1174
1173,1174
1175,1176
1177,1178
1177,1179
1177,1180
1177,1181
1178,1179
1179,1180
1179,1181
1179,1182
1179,1183
1180,1181
1182,1183
1184,1185
1187,1188
1188,1189
1188,1190
1189,1190
1191,1192
1193,1194
1193,1195
1194,1195
1195,1196
1197,1198
1198,1199
1199,1200
1199,1201
1200,1201
1202,1203
1204,1205
1205,1206
1207,1208
1208,1209
1208,1210
1209,1210
1211,1212
1213,1214
1213,1215
1214,1215
1215,1216
1215,1217
1216,1217
1218,1219
1220,1221
1220,1222
1220,1223
1221,1222
1222,1223
1222,1224
1222,1225
1222,1226
1223,1224
1225,1226
1227,1228
1230,1231
1230,1232
1231,1232
1232,1233
1234,1235
1235,1236
1236,1237
1236,1238
1237,1238
1239,1240
1241,1242
1242,1243
1244,1245
1244,1246
1245,1246
1246,1247
1248,1249
1249,1250
1250,1251
1250,1252
1251,1252
1253,1254
1255,1256
1255,1257
1256,1257
1256,1258
1257,1258
1257,1259
1258,1259
1261,1262
1263,1264
1263,1265
1264,1265
1265,1266
1265,1267
1265,1268
1265,1269
1266,1267
1268,1269
1270,1271
1272,1273
1274,1275
1275,1276
1277,1278
1277,1279
1278,1279
1279,1280
1279,1281
1279,1282
1280,1281
1282,1283
1284,1285
1286,1287
1286,1288
1287,1288
1287,1289
1288,1289
1289,1290
1291,1292
1292,1293
1293,1294
1293,1295
1294,1295
1296,1297
1298,1299
1299,1300
1301,1302
1302,1303
1302,1304
1303,1304
1303,1305
1304,1305
1307,1308
1307,1309
1308,1309
1310,1311
1310,1312
1311,1312
1314,1315
1315,1316
1315,1317
1316,1317
1317,1318
1319,1320
1319,1321
1320,1321
1322,1323
-----nextToken-----
3,5,8,10,11,14,16,17,20,22,23,25,27,30,32,33,38,40,43,47,49,51,55,57,59,63,65,67,69,72,74,79,81,85,88,90,92,95,101,103,105,110,112,114,115,118,125,128,130,132,134,136,138,142,147,150,152,153,157,159,161,162,163,168,170,172,173,177,182,184,187,191,193,197,202,203,206,208,213,214,215,220,221,224,226,231,232,235,237,242,243,246,248,252,255,257,261,264,266,271,272,275,277,279,284,285,288,290,295,296,299,301,306,307,310,312,316,319,321,325,328,330,333,338,339,344,345,346,351,352,353,358,359,360,365,366,367,372,375,377,382,383,386,388,393,394,397,399,404,405,408,410,415,416,419,421,426,428,433,435,437,438,442,447,449,452,457,458,460,466,467,469,475,476,478,484,485,487,493,494,496,501,502,504,509,510,512,517,518,520,524,530,531,533,537,538,540,544,545,547,550,556,558,560,565,567,569,570,573,578,580,586,589,591,593,595,597,599,603,606,612,613,616,618,620,622,623,625,630,631,637,639,641,646,648,650,651,655,660,662,665,670,671,673,679,682,683,685,687,692,694,696,697,701,706,708,711,714,719,721,722,726,728,730,732,733,735,739,741,746,751,753,756,761,763,765,768,770,772,776,777,779,784,786,790,795,797,800,804,806,809,814,815,816,819,825,826,829,831,833,835,836,838,843,844,849,854,856,859,864,865,867,873,876,877,879,881,886,888,890,891,895,900,902,905,910,911,914,916,918,921,922,927,928,931,933,935,938,939,946,947,949,953,954,956,960,961,963,968,970,974,976,977,981,983,984,988,991,992,995,997,998,1001,1003,1005,1007,1011,1013,1018,1023,1025,1028,1034,1037,1041,1043,1045,1047,1049,1054,1056,1058,1059,1063,1068,1070,1073,1078,1079,1081,1086,1087,1090,1092,1095,1100,1101,1104,1106,1107,1112,1113,1115,1120,1121,1124,1126,1130,1136,1137,1139,1144,1145,1148,1150,1155,1156,1158,1163,1164,1167,1169,1174,1176,1181,1183,1185,1186,1190,1192,1196,1201,1203,1206,1210,1212,1217,1219,1224,1226,1228,1229,1233,1238,1240,1243,1247,1252,1254,1259,1260,1262,1267,1269,1271,1273,1276,1281,1283,1285,1290,1295,1297,1300,1305,1306,1309,1312,1313,1318,1321,1323
-----computeFrom-----
77,78
77,79
83,84
83,85
98,99
98,100
121,122
121,123
123,124
123,125
144,145
144,146
199,200
199,201
210,211
210,212
217,218
217,219
228,229
228,230
239,240
239,241
250,251
250,252
259,260
259,261
268,269
268,270
281,282
281,283
292,293
292,294
303,304
303,305
314,315
314,316
323,324
323,325
336,337
336,338
341,342
341,343
348,349
348,350
355,356
355,357
362,363
362,364
370,371
370,372
379,380
379,381
390,391
390,392
401,402
401,403
412,413
412,414
454,455
454,456
463,464
463,465
472,473
472,474
481,482
481,483
490,491
490,492
498,499
498,500
506,507
506,508
514,515
514,516
522,523
522,524
525,526
525,527
526,527
526,528
553,554
553,555
582,583
582,584
584,585
584,586
609,610
609,611
634,635
634,636
667,668
667,669
676,677
676,678
737,738
737,739
811,812
811,813
822,823
822,824
861,862
861,863
870,871
870,872
907,908
907,909
924,925
924,926
941,942
941,943
942,943
942,944
943,944
943,945
950,951
950,952
957,958
957,959
1009,1010
1009,1011
1030,1031
1030,1032
1032,1033
1032,1034
1075,1076
1075,1077
1083,1084
1083,1085
1109,1110
1109,1111
1117,1118
1117,1119
1133,1134
1133,1135
1141,1142
1141,1143
1152,1153
1152,1154
1160,1161
1160,1162
1256,1257
1256,1258
1302,1303
1302,1304
1319,1320
1319,1321
-----guardedBy-----
152,184
458,467
457,484
466,475
639,648
670,682
864,876
961,1145
963,1139
960,1163
947,1087
954,1121
1078,1086
1079,1087
1112,1120
1113,1121
1137,1145
1136,1144
1156,1164
1155,1163
-----guardedByNegation-----
457,493
466,484
-----lastLexicalUse-----
457,493
466,484
-----jump-----
457,493
466,484
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;ConditionalExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ConditionalExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ConditionalExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
zip_int64_t_zip_dirent_read(zip_dirent_t *zde, zip_source_t *src, zip_buffer_t *buffer, bool local, zip_error_t *error){    zip_uint8_t buf[CDENTRYSIZE];    zip_uint16_t dostime, dosdate;    zip_uint32_t size, variable_size;    zip_uint16_t filename_len, comment_len, ef_len;    bool from_buffer = (buffer != NULL);    size = local ? LENTRYSIZE : CDENTRYSIZE;    if (buffer) {        if (_zip_buffer_left(buffer) < size) {            zip_error_set(error, ZIP_ER_NOZIP, 0);            return -1;        }    }    else {        if ((buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL) {            return -1;        }    }    if (memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4) != 0) {	zip_error_set(error, ZIP_ER_NOZIP, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }	return -1;    }    /* convert buffercontents to zip_dirent */    _zip_dirent_init(zde);    if (!local)	zde->version_madeby = _zip_buffer_get_16(buffer);    else	zde->version_madeby = 0;    zde->version_needed = _zip_buffer_get_16(buffer);    zde->bitflags = _zip_buffer_get_16(buffer);    zde->comp_method = _zip_buffer_get_16(buffer);    /* convert to time_t */    dostime = _zip_buffer_get_16(buffer);    dosdate = _zip_buffer_get_16(buffer);    zde->last_mod = _zip_d2u_time(dostime, dosdate);    zde->crc = _zip_buffer_get_32(buffer);    zde->comp_size = _zip_buffer_get_32(buffer);    zde->uncomp_size = _zip_buffer_get_32(buffer);    filename_len = _zip_buffer_get_16(buffer);    ef_len = _zip_buffer_get_16(buffer);    if (local) {	comment_len = 0;	zde->disk_number = 0;	zde->int_attrib = 0;	zde->ext_attrib = 0;	zde->offset = 0;    } else {	comment_len = _zip_buffer_get_16(buffer);	zde->disk_number = _zip_buffer_get_16(buffer);	zde->int_attrib = _zip_buffer_get_16(buffer);	zde->ext_attrib = _zip_buffer_get_32(buffer);	zde->offset = _zip_buffer_get_32(buffer);    }    if (!_zip_buffer_ok(buffer)) {        zip_error_set(error, ZIP_ER_INTERNAL, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }        return -1;    }    if (zde->bitflags & ZIP_GPBF_ENCRYPTED) {	if (zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION) {	    /* TODO */	    zde->encryption_method = ZIP_EM_UNKNOWN;	}	else {	    zde->encryption_method = ZIP_EM_TRAD_PKWARE;	}    }    else {	zde->encryption_method = ZIP_EM_NONE;    }    zde->filename = NULL;    zde->extra_fields = NULL;    zde->comment = NULL;    variable_size = (zip_uint32_t)filename_len+(zip_uint32_t)ef_len+(zip_uint32_t)comment_len;    if (from_buffer) {        if (_zip_buffer_left(buffer) < variable_size) {            zip_error_set(error, ZIP_ER_INCONS, 0);            return -1;        }    }    else {        _zip_buffer_free(buffer);        if ((buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL) {            return -1;        }    }    if (filename_len) {	zde->filename = _zip_read_string(buffer, src, filename_len, 1, error);        if (!zde->filename) {            if (zip_error_code_zip(error) == ZIP_ER_EOF) {                zip_error_set(error, ZIP_ER_INCONS, 0);            }            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }	if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {	    if (_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}    }    if (ef_len) {	zip_uint8_t *ef = _zip_read_data(buffer, src, ef_len, 0, error);        if (ef == NULL) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }        if (!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)) {	    free(ef);            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;	}	free(ef);	if (local)	    zde->local_extra_fields_read = 1;    }    if (comment_len) {	zde->comment = _zip_read_string(buffer, src, comment_len, 0, error);        if (!zde->comment) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }	if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {	    if (_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}    }    zde->filename = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_NAME, zde->filename);    zde->comment = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_COMMENT, zde->comment);    /* Zip64 */    if (zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX || zde->offset == ZIP_UINT32_MAX) {	zip_uint16_t got_len;        zip_buffer_t *ef_buffer;	const zip_uint8_t *ef = _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error);	/* TODO: if got_len == 0 && !ZIP64_EOCD: no error, 0xffffffff is valid value */        if (ef == NULL) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }        if ((ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL) {            zip_error_set(error, ZIP_ER_MEMORY, 0);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }	if (zde->uncomp_size == ZIP_UINT32_MAX)	    zde->uncomp_size = _zip_buffer_get_64(ef_buffer);	else if (local) {	    /* From appnote.txt: This entry in the Local header MUST	       include BOTH original and compressed file size fields. */            (void)_zip_buffer_skip(ef_buffer, 8); /* error is caught by _zip_buffer_eof() call */	}	if (zde->comp_size == ZIP_UINT32_MAX)	    zde->comp_size = _zip_buffer_get_64(ef_buffer);	if (!local) {	    if (zde->offset == ZIP_UINT32_MAX)		zde->offset = _zip_buffer_get_64(ef_buffer);	    if (zde->disk_number == ZIP_UINT16_MAX)		zde->disk_number = _zip_buffer_get_32(buffer);	}        if (!_zip_buffer_eof(ef_buffer)) {            zip_error_set(error, ZIP_ER_INCONS, 0);            _zip_buffer_free(ef_buffer);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }        _zip_buffer_free(ef_buffer);    }    if (!_zip_buffer_ok(buffer)) {        zip_error_set(error, ZIP_ER_INTERNAL, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }        return -1;    }    if (!from_buffer) {        _zip_buffer_free(buffer);    }    /* zip_source_seek / zip_source_tell don't support values > ZIP_INT64_MAX */    if (zde->offset > ZIP_INT64_MAX) {	zip_error_set(error, ZIP_ER_SEEK, EFBIG);	return -1;    }    if (!_zip_dirent_process_winzip_aes(zde, error)) {	if (!from_buffer) {	    _zip_buffer_free(buffer);	}	return -1;    }    zde->extra_fields = _zip_ef_remove_internal(zde->extra_fields);    return (zip_int64_t)(size + variable_size);}
zip_int64_t
zip_int64_t
_zip_dirent_read(zip_dirent_t *zde, zip_source_t *src, zip_buffer_t *buffer, bool local, zip_error_t *error)
_zip_dirent_read
zip_dirent_t *zde
zip_dirent_t
zip_dirent_t
*zde
*
zde
zip_source_t *src
zip_source_t
zip_source_t
*src
*
src
zip_buffer_t *buffer
zip_buffer_t
zip_buffer_t
*buffer
*
buffer
bool local
bool
local
local
zip_error_t *error
zip_error_t
zip_error_t
*error
*
error
{    zip_uint8_t buf[CDENTRYSIZE];    zip_uint16_t dostime, dosdate;    zip_uint32_t size, variable_size;    zip_uint16_t filename_len, comment_len, ef_len;    bool from_buffer = (buffer != NULL);    size = local ? LENTRYSIZE : CDENTRYSIZE;    if (buffer) {        if (_zip_buffer_left(buffer) < size) {            zip_error_set(error, ZIP_ER_NOZIP, 0);            return -1;        }    }    else {        if ((buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL) {            return -1;        }    }    if (memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4) != 0) {	zip_error_set(error, ZIP_ER_NOZIP, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }	return -1;    }    /* convert buffercontents to zip_dirent */    _zip_dirent_init(zde);    if (!local)	zde->version_madeby = _zip_buffer_get_16(buffer);    else	zde->version_madeby = 0;    zde->version_needed = _zip_buffer_get_16(buffer);    zde->bitflags = _zip_buffer_get_16(buffer);    zde->comp_method = _zip_buffer_get_16(buffer);    /* convert to time_t */    dostime = _zip_buffer_get_16(buffer);    dosdate = _zip_buffer_get_16(buffer);    zde->last_mod = _zip_d2u_time(dostime, dosdate);    zde->crc = _zip_buffer_get_32(buffer);    zde->comp_size = _zip_buffer_get_32(buffer);    zde->uncomp_size = _zip_buffer_get_32(buffer);    filename_len = _zip_buffer_get_16(buffer);    ef_len = _zip_buffer_get_16(buffer);    if (local) {	comment_len = 0;	zde->disk_number = 0;	zde->int_attrib = 0;	zde->ext_attrib = 0;	zde->offset = 0;    } else {	comment_len = _zip_buffer_get_16(buffer);	zde->disk_number = _zip_buffer_get_16(buffer);	zde->int_attrib = _zip_buffer_get_16(buffer);	zde->ext_attrib = _zip_buffer_get_32(buffer);	zde->offset = _zip_buffer_get_32(buffer);    }    if (!_zip_buffer_ok(buffer)) {        zip_error_set(error, ZIP_ER_INTERNAL, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }        return -1;    }    if (zde->bitflags & ZIP_GPBF_ENCRYPTED) {	if (zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION) {	    /* TODO */	    zde->encryption_method = ZIP_EM_UNKNOWN;	}	else {	    zde->encryption_method = ZIP_EM_TRAD_PKWARE;	}    }    else {	zde->encryption_method = ZIP_EM_NONE;    }    zde->filename = NULL;    zde->extra_fields = NULL;    zde->comment = NULL;    variable_size = (zip_uint32_t)filename_len+(zip_uint32_t)ef_len+(zip_uint32_t)comment_len;    if (from_buffer) {        if (_zip_buffer_left(buffer) < variable_size) {            zip_error_set(error, ZIP_ER_INCONS, 0);            return -1;        }    }    else {        _zip_buffer_free(buffer);        if ((buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL) {            return -1;        }    }    if (filename_len) {	zde->filename = _zip_read_string(buffer, src, filename_len, 1, error);        if (!zde->filename) {            if (zip_error_code_zip(error) == ZIP_ER_EOF) {                zip_error_set(error, ZIP_ER_INCONS, 0);            }            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }	if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {	    if (_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}    }    if (ef_len) {	zip_uint8_t *ef = _zip_read_data(buffer, src, ef_len, 0, error);        if (ef == NULL) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }        if (!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)) {	    free(ef);            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;	}	free(ef);	if (local)	    zde->local_extra_fields_read = 1;    }    if (comment_len) {	zde->comment = _zip_read_string(buffer, src, comment_len, 0, error);        if (!zde->comment) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }	if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {	    if (_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}    }    zde->filename = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_NAME, zde->filename);    zde->comment = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_COMMENT, zde->comment);    /* Zip64 */    if (zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX || zde->offset == ZIP_UINT32_MAX) {	zip_uint16_t got_len;        zip_buffer_t *ef_buffer;	const zip_uint8_t *ef = _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error);	/* TODO: if got_len == 0 && !ZIP64_EOCD: no error, 0xffffffff is valid value */        if (ef == NULL) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }        if ((ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL) {            zip_error_set(error, ZIP_ER_MEMORY, 0);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }	if (zde->uncomp_size == ZIP_UINT32_MAX)	    zde->uncomp_size = _zip_buffer_get_64(ef_buffer);	else if (local) {	    /* From appnote.txt: This entry in the Local header MUST	       include BOTH original and compressed file size fields. */            (void)_zip_buffer_skip(ef_buffer, 8); /* error is caught by _zip_buffer_eof() call */	}	if (zde->comp_size == ZIP_UINT32_MAX)	    zde->comp_size = _zip_buffer_get_64(ef_buffer);	if (!local) {	    if (zde->offset == ZIP_UINT32_MAX)		zde->offset = _zip_buffer_get_64(ef_buffer);	    if (zde->disk_number == ZIP_UINT16_MAX)		zde->disk_number = _zip_buffer_get_32(buffer);	}        if (!_zip_buffer_eof(ef_buffer)) {            zip_error_set(error, ZIP_ER_INCONS, 0);            _zip_buffer_free(ef_buffer);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }        _zip_buffer_free(ef_buffer);    }    if (!_zip_buffer_ok(buffer)) {        zip_error_set(error, ZIP_ER_INTERNAL, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }        return -1;    }    if (!from_buffer) {        _zip_buffer_free(buffer);    }    /* zip_source_seek / zip_source_tell don't support values > ZIP_INT64_MAX */    if (zde->offset > ZIP_INT64_MAX) {	zip_error_set(error, ZIP_ER_SEEK, EFBIG);	return -1;    }    if (!_zip_dirent_process_winzip_aes(zde, error)) {	if (!from_buffer) {	    _zip_buffer_free(buffer);	}	return -1;    }    zde->extra_fields = _zip_ef_remove_internal(zde->extra_fields);    return (zip_int64_t)(size + variable_size);}
zip_uint8_t buf[CDENTRYSIZE];
zip_uint8_t buf[CDENTRYSIZE];
zip_uint8_t
zip_uint8_t
buf[CDENTRYSIZE]
buf
[CDENTRYSIZE]
CDENTRYSIZE
CDENTRYSIZE
zip_uint16_t dostime, dosdate;
zip_uint16_t dostime, dosdate;
zip_uint16_t
zip_uint16_t
dostime
dostime
dosdate
dosdate
zip_uint32_t size, variable_size;
zip_uint32_t size, variable_size;
zip_uint32_t
zip_uint32_t
size
size
variable_size
variable_size
zip_uint16_t filename_len, comment_len, ef_len;
zip_uint16_t filename_len, comment_len, ef_len;
zip_uint16_t
zip_uint16_t
filename_len
filename_len
comment_len
comment_len
ef_len
ef_len
bool from_buffer = (buffer != NULL);
bool from_buffer = (buffer != NULL);
bool
from_buffer = (buffer != NULL)
from_buffer
= (buffer != NULL)
(buffer != NULL)
buffer != NULL
buffer
buffer
NULL
NULL
size = local ? LENTRYSIZE : CDENTRYSIZE;
size = local ? LENTRYSIZE : CDENTRYSIZE
size
size
local ? LENTRYSIZE : CDENTRYSIZE
local
local
LENTRYSIZE
LENTRYSIZE
CDENTRYSIZE
CDENTRYSIZE
if (buffer) {        if (_zip_buffer_left(buffer) < size) {            zip_error_set(error, ZIP_ER_NOZIP, 0);            return -1;        }    }    else {        if ((buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL) {            return -1;        }    }
buffer
buffer
{        if (_zip_buffer_left(buffer) < size) {            zip_error_set(error, ZIP_ER_NOZIP, 0);            return -1;        }    }
if (_zip_buffer_left(buffer) < size) {            zip_error_set(error, ZIP_ER_NOZIP, 0);            return -1;        }
_zip_buffer_left(buffer) < size
_zip_buffer_left(buffer)
_zip_buffer_left
_zip_buffer_left
buffer
buffer
size
size
{            zip_error_set(error, ZIP_ER_NOZIP, 0);            return -1;        }
zip_error_set(error, ZIP_ER_NOZIP, 0);
zip_error_set(error, ZIP_ER_NOZIP, 0)
zip_error_set
zip_error_set
error
error
ZIP_ER_NOZIP
ZIP_ER_NOZIP
0
return -1;
-1
1
{        if ((buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL) {            return -1;        }    }
if ((buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL) {            return -1;        }
(buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL
(buffer = _zip_buffer_new_from_source(src, size, buf, error))
buffer = _zip_buffer_new_from_source(src, size, buf, error)
buffer
buffer
_zip_buffer_new_from_source(src, size, buf, error)
_zip_buffer_new_from_source
_zip_buffer_new_from_source
src
src
size
size
buf
buf
error
error
NULL
NULL
{            return -1;        }
return -1;
-1
1
if (memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4) != 0) {	zip_error_set(error, ZIP_ER_NOZIP, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }	return -1;    }
memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4) != 0
memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4)
memcmp
memcmp
_zip_buffer_get(buffer, 4)
_zip_buffer_get
_zip_buffer_get
buffer
buffer
4
(local ? LOCAL_MAGIC : CENTRAL_MAGIC)
local ? LOCAL_MAGIC : CENTRAL_MAGIC
local
local
LOCAL_MAGIC
LOCAL_MAGIC
CENTRAL_MAGIC
CENTRAL_MAGIC
4
0
{	zip_error_set(error, ZIP_ER_NOZIP, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }	return -1;    }
zip_error_set(error, ZIP_ER_NOZIP, 0);
zip_error_set(error, ZIP_ER_NOZIP, 0)
zip_error_set
zip_error_set
error
error
ZIP_ER_NOZIP
ZIP_ER_NOZIP
0
if (!from_buffer) {            _zip_buffer_free(buffer);        }
!from_buffer
from_buffer
from_buffer
{            _zip_buffer_free(buffer);        }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
_zip_dirent_init(zde);
_zip_dirent_init(zde)
_zip_dirent_init
_zip_dirent_init
zde
zde
if (!local)	zde->version_madeby = _zip_buffer_get_16(buffer);    else	zde->version_madeby = 0;
!local
local
local
zde->version_madeby = _zip_buffer_get_16(buffer);
zde->version_madeby = _zip_buffer_get_16(buffer)
zde->version_madeby
zde
zde
version_madeby
_zip_buffer_get_16(buffer)
_zip_buffer_get_16
_zip_buffer_get_16
buffer
buffer
zde->version_madeby = 0;
zde->version_madeby = 0
zde->version_madeby
zde
zde
version_madeby
0
zde->version_needed = _zip_buffer_get_16(buffer);
zde->version_needed = _zip_buffer_get_16(buffer)
zde->version_needed
zde
zde
version_needed
_zip_buffer_get_16(buffer)
_zip_buffer_get_16
_zip_buffer_get_16
buffer
buffer
zde->bitflags = _zip_buffer_get_16(buffer);
zde->bitflags = _zip_buffer_get_16(buffer)
zde->bitflags
zde
zde
bitflags
_zip_buffer_get_16(buffer)
_zip_buffer_get_16
_zip_buffer_get_16
buffer
buffer
zde->comp_method = _zip_buffer_get_16(buffer);
zde->comp_method = _zip_buffer_get_16(buffer)
zde->comp_method
zde
zde
comp_method
_zip_buffer_get_16(buffer)
_zip_buffer_get_16
_zip_buffer_get_16
buffer
buffer
dostime = _zip_buffer_get_16(buffer);
dostime = _zip_buffer_get_16(buffer)
dostime
dostime
_zip_buffer_get_16(buffer)
_zip_buffer_get_16
_zip_buffer_get_16
buffer
buffer
dosdate = _zip_buffer_get_16(buffer);
dosdate = _zip_buffer_get_16(buffer)
dosdate
dosdate
_zip_buffer_get_16(buffer)
_zip_buffer_get_16
_zip_buffer_get_16
buffer
buffer
zde->last_mod = _zip_d2u_time(dostime, dosdate);
zde->last_mod = _zip_d2u_time(dostime, dosdate)
zde->last_mod
zde
zde
last_mod
_zip_d2u_time(dostime, dosdate)
_zip_d2u_time
_zip_d2u_time
dostime
dostime
dosdate
dosdate
zde->crc = _zip_buffer_get_32(buffer);
zde->crc = _zip_buffer_get_32(buffer)
zde->crc
zde
zde
crc
_zip_buffer_get_32(buffer)
_zip_buffer_get_32
_zip_buffer_get_32
buffer
buffer
zde->comp_size = _zip_buffer_get_32(buffer);
zde->comp_size = _zip_buffer_get_32(buffer)
zde->comp_size
zde
zde
comp_size
_zip_buffer_get_32(buffer)
_zip_buffer_get_32
_zip_buffer_get_32
buffer
buffer
zde->uncomp_size = _zip_buffer_get_32(buffer);
zde->uncomp_size = _zip_buffer_get_32(buffer)
zde->uncomp_size
zde
zde
uncomp_size
_zip_buffer_get_32(buffer)
_zip_buffer_get_32
_zip_buffer_get_32
buffer
buffer
filename_len = _zip_buffer_get_16(buffer);
filename_len = _zip_buffer_get_16(buffer)
filename_len
filename_len
_zip_buffer_get_16(buffer)
_zip_buffer_get_16
_zip_buffer_get_16
buffer
buffer
ef_len = _zip_buffer_get_16(buffer);
ef_len = _zip_buffer_get_16(buffer)
ef_len
ef_len
_zip_buffer_get_16(buffer)
_zip_buffer_get_16
_zip_buffer_get_16
buffer
buffer
if (local) {	comment_len = 0;	zde->disk_number = 0;	zde->int_attrib = 0;	zde->ext_attrib = 0;	zde->offset = 0;    } else {	comment_len = _zip_buffer_get_16(buffer);	zde->disk_number = _zip_buffer_get_16(buffer);	zde->int_attrib = _zip_buffer_get_16(buffer);	zde->ext_attrib = _zip_buffer_get_32(buffer);	zde->offset = _zip_buffer_get_32(buffer);    }
local
local
{	comment_len = 0;	zde->disk_number = 0;	zde->int_attrib = 0;	zde->ext_attrib = 0;	zde->offset = 0;    }
comment_len = 0;
comment_len = 0
comment_len
comment_len
0
zde->disk_number = 0;
zde->disk_number = 0
zde->disk_number
zde
zde
disk_number
0
zde->int_attrib = 0;
zde->int_attrib = 0
zde->int_attrib
zde
zde
int_attrib
0
zde->ext_attrib = 0;
zde->ext_attrib = 0
zde->ext_attrib
zde
zde
ext_attrib
0
zde->offset = 0;
zde->offset = 0
zde->offset
zde
zde
offset
0
{	comment_len = _zip_buffer_get_16(buffer);	zde->disk_number = _zip_buffer_get_16(buffer);	zde->int_attrib = _zip_buffer_get_16(buffer);	zde->ext_attrib = _zip_buffer_get_32(buffer);	zde->offset = _zip_buffer_get_32(buffer);    }
comment_len = _zip_buffer_get_16(buffer);
comment_len = _zip_buffer_get_16(buffer)
comment_len
comment_len
_zip_buffer_get_16(buffer)
_zip_buffer_get_16
_zip_buffer_get_16
buffer
buffer
zde->disk_number = _zip_buffer_get_16(buffer);
zde->disk_number = _zip_buffer_get_16(buffer)
zde->disk_number
zde
zde
disk_number
_zip_buffer_get_16(buffer)
_zip_buffer_get_16
_zip_buffer_get_16
buffer
buffer
zde->int_attrib = _zip_buffer_get_16(buffer);
zde->int_attrib = _zip_buffer_get_16(buffer)
zde->int_attrib
zde
zde
int_attrib
_zip_buffer_get_16(buffer)
_zip_buffer_get_16
_zip_buffer_get_16
buffer
buffer
zde->ext_attrib = _zip_buffer_get_32(buffer);
zde->ext_attrib = _zip_buffer_get_32(buffer)
zde->ext_attrib
zde
zde
ext_attrib
_zip_buffer_get_32(buffer)
_zip_buffer_get_32
_zip_buffer_get_32
buffer
buffer
zde->offset = _zip_buffer_get_32(buffer);
zde->offset = _zip_buffer_get_32(buffer)
zde->offset
zde
zde
offset
_zip_buffer_get_32(buffer)
_zip_buffer_get_32
_zip_buffer_get_32
buffer
buffer
if (!_zip_buffer_ok(buffer)) {        zip_error_set(error, ZIP_ER_INTERNAL, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }        return -1;    }
!_zip_buffer_ok(buffer)
_zip_buffer_ok(buffer)
_zip_buffer_ok
_zip_buffer_ok
buffer
buffer
{        zip_error_set(error, ZIP_ER_INTERNAL, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }        return -1;    }
zip_error_set(error, ZIP_ER_INTERNAL, 0);
zip_error_set(error, ZIP_ER_INTERNAL, 0)
zip_error_set
zip_error_set
error
error
ZIP_ER_INTERNAL
ZIP_ER_INTERNAL
0
if (!from_buffer) {            _zip_buffer_free(buffer);        }
!from_buffer
from_buffer
from_buffer
{            _zip_buffer_free(buffer);        }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
if (zde->bitflags & ZIP_GPBF_ENCRYPTED) {	if (zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION) {	    /* TODO */	    zde->encryption_method = ZIP_EM_UNKNOWN;	}	else {	    zde->encryption_method = ZIP_EM_TRAD_PKWARE;	}    }    else {	zde->encryption_method = ZIP_EM_NONE;    }
zde->bitflags & ZIP_GPBF_ENCRYPTED
zde->bitflags
zde
zde
bitflags
ZIP_GPBF_ENCRYPTED
ZIP_GPBF_ENCRYPTED
{	if (zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION) {	    /* TODO */	    zde->encryption_method = ZIP_EM_UNKNOWN;	}	else {	    zde->encryption_method = ZIP_EM_TRAD_PKWARE;	}    }
if (zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION) {	    /* TODO */	    zde->encryption_method = ZIP_EM_UNKNOWN;	}	else {	    zde->encryption_method = ZIP_EM_TRAD_PKWARE;	}
zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION
zde->bitflags
zde
zde
bitflags
ZIP_GPBF_STRONG_ENCRYPTION
ZIP_GPBF_STRONG_ENCRYPTION
{	    /* TODO */	    zde->encryption_method = ZIP_EM_UNKNOWN;	}
zde->encryption_method = ZIP_EM_UNKNOWN;
zde->encryption_method = ZIP_EM_UNKNOWN
zde->encryption_method
zde
zde
encryption_method
ZIP_EM_UNKNOWN
ZIP_EM_UNKNOWN
{	    zde->encryption_method = ZIP_EM_TRAD_PKWARE;	}
zde->encryption_method = ZIP_EM_TRAD_PKWARE;
zde->encryption_method = ZIP_EM_TRAD_PKWARE
zde->encryption_method
zde
zde
encryption_method
ZIP_EM_TRAD_PKWARE
ZIP_EM_TRAD_PKWARE
{	zde->encryption_method = ZIP_EM_NONE;    }
zde->encryption_method = ZIP_EM_NONE;
zde->encryption_method = ZIP_EM_NONE
zde->encryption_method
zde
zde
encryption_method
ZIP_EM_NONE
ZIP_EM_NONE
zde->filename = NULL;
zde->filename = NULL
zde->filename
zde
zde
filename
NULL
NULL
zde->extra_fields = NULL;
zde->extra_fields = NULL
zde->extra_fields
zde
zde
extra_fields
NULL
NULL
zde->comment = NULL;
zde->comment = NULL
zde->comment
zde
zde
comment
NULL
NULL
variable_size = (zip_uint32_t)filename_len+(zip_uint32_t)ef_len+(zip_uint32_t)comment_len;
variable_size = (zip_uint32_t)filename_len+(zip_uint32_t)ef_len+(zip_uint32_t)comment_len
variable_size
variable_size
(zip_uint32_t)filename_len+(zip_uint32_t)ef_len+(zip_uint32_t)comment_len
(zip_uint32_t)filename_len+(zip_uint32_t)ef_len
(zip_uint32_t)filename_len
zip_uint32_t
zip_uint32_t
zip_uint32_t

filename_len
filename_len
(zip_uint32_t)ef_len
zip_uint32_t
zip_uint32_t
zip_uint32_t

ef_len
ef_len
(zip_uint32_t)comment_len
zip_uint32_t
zip_uint32_t
zip_uint32_t

comment_len
comment_len
if (from_buffer) {        if (_zip_buffer_left(buffer) < variable_size) {            zip_error_set(error, ZIP_ER_INCONS, 0);            return -1;        }    }    else {        _zip_buffer_free(buffer);        if ((buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL) {            return -1;        }    }
from_buffer
from_buffer
{        if (_zip_buffer_left(buffer) < variable_size) {            zip_error_set(error, ZIP_ER_INCONS, 0);            return -1;        }    }
if (_zip_buffer_left(buffer) < variable_size) {            zip_error_set(error, ZIP_ER_INCONS, 0);            return -1;        }
_zip_buffer_left(buffer) < variable_size
_zip_buffer_left(buffer)
_zip_buffer_left
_zip_buffer_left
buffer
buffer
variable_size
variable_size
{            zip_error_set(error, ZIP_ER_INCONS, 0);            return -1;        }
zip_error_set(error, ZIP_ER_INCONS, 0);
zip_error_set(error, ZIP_ER_INCONS, 0)
zip_error_set
zip_error_set
error
error
ZIP_ER_INCONS
ZIP_ER_INCONS
0
return -1;
-1
1
{        _zip_buffer_free(buffer);        if ((buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL) {            return -1;        }    }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
if ((buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL) {            return -1;        }
(buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL
(buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error))
buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)
buffer
buffer
_zip_buffer_new_from_source(src, variable_size, NULL, error)
_zip_buffer_new_from_source
_zip_buffer_new_from_source
src
src
variable_size
variable_size
NULL
NULL
error
error
NULL
NULL
{            return -1;        }
return -1;
-1
1
if (filename_len) {	zde->filename = _zip_read_string(buffer, src, filename_len, 1, error);        if (!zde->filename) {            if (zip_error_code_zip(error) == ZIP_ER_EOF) {                zip_error_set(error, ZIP_ER_INCONS, 0);            }            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }	if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {	    if (_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}    }
filename_len
filename_len
{	zde->filename = _zip_read_string(buffer, src, filename_len, 1, error);        if (!zde->filename) {            if (zip_error_code_zip(error) == ZIP_ER_EOF) {                zip_error_set(error, ZIP_ER_INCONS, 0);            }            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }	if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {	    if (_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}    }
zde->filename = _zip_read_string(buffer, src, filename_len, 1, error);
zde->filename = _zip_read_string(buffer, src, filename_len, 1, error)
zde->filename
zde
zde
filename
_zip_read_string(buffer, src, filename_len, 1, error)
_zip_read_string
_zip_read_string
buffer
buffer
src
src
filename_len
filename_len
1
error
error
if (!zde->filename) {            if (zip_error_code_zip(error) == ZIP_ER_EOF) {                zip_error_set(error, ZIP_ER_INCONS, 0);            }            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }
!zde->filename
zde->filename
zde
zde
filename
{            if (zip_error_code_zip(error) == ZIP_ER_EOF) {                zip_error_set(error, ZIP_ER_INCONS, 0);            }            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }
if (zip_error_code_zip(error) == ZIP_ER_EOF) {                zip_error_set(error, ZIP_ER_INCONS, 0);            }
zip_error_code_zip(error) == ZIP_ER_EOF
zip_error_code_zip(error)
zip_error_code_zip
zip_error_code_zip
error
error
ZIP_ER_EOF
ZIP_ER_EOF
{                zip_error_set(error, ZIP_ER_INCONS, 0);            }
zip_error_set(error, ZIP_ER_INCONS, 0);
zip_error_set(error, ZIP_ER_INCONS, 0)
zip_error_set
zip_error_set
error
error
ZIP_ER_INCONS
ZIP_ER_INCONS
0
if (!from_buffer) {                _zip_buffer_free(buffer);            }
!from_buffer
from_buffer
from_buffer
{                _zip_buffer_free(buffer);            }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {	    if (_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}
zde->bitflags & ZIP_GPBF_ENCODING_UTF_8
zde->bitflags
zde
zde
bitflags
ZIP_GPBF_ENCODING_UTF_8
ZIP_GPBF_ENCODING_UTF_8
{	    if (_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}
if (_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }
_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR
_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN)
_zip_guess_encoding
_zip_guess_encoding
zde->filename
zde
zde
filename
ZIP_ENCODING_UTF8_KNOWN
ZIP_ENCODING_UTF8_KNOWN
ZIP_ENCODING_ERROR
ZIP_ENCODING_ERROR
{		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }
zip_error_set(error, ZIP_ER_INCONS, 0);
zip_error_set(error, ZIP_ER_INCONS, 0)
zip_error_set
zip_error_set
error
error
ZIP_ER_INCONS
ZIP_ER_INCONS
0
if (!from_buffer) {                    _zip_buffer_free(buffer);                }
!from_buffer
from_buffer
from_buffer
{                    _zip_buffer_free(buffer);                }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
if (ef_len) {	zip_uint8_t *ef = _zip_read_data(buffer, src, ef_len, 0, error);        if (ef == NULL) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }        if (!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)) {	    free(ef);            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;	}	free(ef);	if (local)	    zde->local_extra_fields_read = 1;    }
ef_len
ef_len
{	zip_uint8_t *ef = _zip_read_data(buffer, src, ef_len, 0, error);        if (ef == NULL) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }        if (!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)) {	    free(ef);            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;	}	free(ef);	if (local)	    zde->local_extra_fields_read = 1;    }
zip_uint8_t *ef = _zip_read_data(buffer, src, ef_len, 0, error);
zip_uint8_t *ef = _zip_read_data(buffer, src, ef_len, 0, error);
zip_uint8_t
zip_uint8_t
*ef = _zip_read_data(buffer, src, ef_len, 0, error)
*
ef
= _zip_read_data(buffer, src, ef_len, 0, error)
_zip_read_data(buffer, src, ef_len, 0, error)
_zip_read_data
_zip_read_data
buffer
buffer
src
src
ef_len
ef_len
0
error
error
if (ef == NULL) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }
ef == NULL
ef
ef
NULL
NULL
{            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }
if (!from_buffer) {                _zip_buffer_free(buffer);            }
!from_buffer
from_buffer
from_buffer
{                _zip_buffer_free(buffer);            }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
if (!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)) {	    free(ef);            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;	}
!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)
_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)
_zip_ef_parse
_zip_ef_parse
ef
ef
ef_len
ef_len
local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL
local
local
ZIP_EF_LOCAL
ZIP_EF_LOCAL
ZIP_EF_CENTRAL
ZIP_EF_CENTRAL
&zde->extra_fields
zde->extra_fields
zde
zde
extra_fields
error
error
{	    free(ef);            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;	}
free(ef);
free(ef)
free
free
ef
ef
if (!from_buffer) {                _zip_buffer_free(buffer);            }
!from_buffer
from_buffer
from_buffer
{                _zip_buffer_free(buffer);            }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
free(ef);
free(ef)
free
free
ef
ef
if (local)	    zde->local_extra_fields_read = 1;
local
local
zde->local_extra_fields_read = 1;
zde->local_extra_fields_read = 1
zde->local_extra_fields_read
zde
zde
local_extra_fields_read
1
if (comment_len) {	zde->comment = _zip_read_string(buffer, src, comment_len, 0, error);        if (!zde->comment) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }	if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {	    if (_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}    }
comment_len
comment_len
{	zde->comment = _zip_read_string(buffer, src, comment_len, 0, error);        if (!zde->comment) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }	if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {	    if (_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}    }
zde->comment = _zip_read_string(buffer, src, comment_len, 0, error);
zde->comment = _zip_read_string(buffer, src, comment_len, 0, error)
zde->comment
zde
zde
comment
_zip_read_string(buffer, src, comment_len, 0, error)
_zip_read_string
_zip_read_string
buffer
buffer
src
src
comment_len
comment_len
0
error
error
if (!zde->comment) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }
!zde->comment
zde->comment
zde
zde
comment
{            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }
if (!from_buffer) {                _zip_buffer_free(buffer);            }
!from_buffer
from_buffer
from_buffer
{                _zip_buffer_free(buffer);            }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {	    if (_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}
zde->bitflags & ZIP_GPBF_ENCODING_UTF_8
zde->bitflags
zde
zde
bitflags
ZIP_GPBF_ENCODING_UTF_8
ZIP_GPBF_ENCODING_UTF_8
{	    if (_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }	}
if (_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }
_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR
_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN)
_zip_guess_encoding
_zip_guess_encoding
zde->comment
zde
zde
comment
ZIP_ENCODING_UTF8_KNOWN
ZIP_ENCODING_UTF8_KNOWN
ZIP_ENCODING_ERROR
ZIP_ENCODING_ERROR
{		zip_error_set(error, ZIP_ER_INCONS, 0);                if (!from_buffer) {                    _zip_buffer_free(buffer);                }		return -1;	    }
zip_error_set(error, ZIP_ER_INCONS, 0);
zip_error_set(error, ZIP_ER_INCONS, 0)
zip_error_set
zip_error_set
error
error
ZIP_ER_INCONS
ZIP_ER_INCONS
0
if (!from_buffer) {                    _zip_buffer_free(buffer);                }
!from_buffer
from_buffer
from_buffer
{                    _zip_buffer_free(buffer);                }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
zde->filename = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_NAME, zde->filename);
zde->filename = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_NAME, zde->filename)
zde->filename
zde
zde
filename
_zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_NAME, zde->filename)
_zip_dirent_process_ef_utf_8
_zip_dirent_process_ef_utf_8
zde
zde
ZIP_EF_UTF_8_NAME
ZIP_EF_UTF_8_NAME
zde->filename
zde
zde
filename
zde->comment = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_COMMENT, zde->comment);
zde->comment = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_COMMENT, zde->comment)
zde->comment
zde
zde
comment
_zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_COMMENT, zde->comment)
_zip_dirent_process_ef_utf_8
_zip_dirent_process_ef_utf_8
zde
zde
ZIP_EF_UTF_8_COMMENT
ZIP_EF_UTF_8_COMMENT
zde->comment
zde
zde
comment
if (zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX || zde->offset == ZIP_UINT32_MAX) {	zip_uint16_t got_len;        zip_buffer_t *ef_buffer;	const zip_uint8_t *ef = _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error);	/* TODO: if got_len == 0 && !ZIP64_EOCD: no error, 0xffffffff is valid value */        if (ef == NULL) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }        if ((ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL) {            zip_error_set(error, ZIP_ER_MEMORY, 0);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }	if (zde->uncomp_size == ZIP_UINT32_MAX)	    zde->uncomp_size = _zip_buffer_get_64(ef_buffer);	else if (local) {	    /* From appnote.txt: This entry in the Local header MUST	       include BOTH original and compressed file size fields. */            (void)_zip_buffer_skip(ef_buffer, 8); /* error is caught by _zip_buffer_eof() call */	}	if (zde->comp_size == ZIP_UINT32_MAX)	    zde->comp_size = _zip_buffer_get_64(ef_buffer);	if (!local) {	    if (zde->offset == ZIP_UINT32_MAX)		zde->offset = _zip_buffer_get_64(ef_buffer);	    if (zde->disk_number == ZIP_UINT16_MAX)		zde->disk_number = _zip_buffer_get_32(buffer);	}        if (!_zip_buffer_eof(ef_buffer)) {            zip_error_set(error, ZIP_ER_INCONS, 0);            _zip_buffer_free(ef_buffer);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }        _zip_buffer_free(ef_buffer);    }
zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX || zde->offset == ZIP_UINT32_MAX
zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX
zde->uncomp_size == ZIP_UINT32_MAX
zde->uncomp_size
zde
zde
uncomp_size
ZIP_UINT32_MAX
ZIP_UINT32_MAX
zde->comp_size == ZIP_UINT32_MAX
zde->comp_size
zde
zde
comp_size
ZIP_UINT32_MAX
ZIP_UINT32_MAX
zde->offset == ZIP_UINT32_MAX
zde->offset
zde
zde
offset
ZIP_UINT32_MAX
ZIP_UINT32_MAX
{	zip_uint16_t got_len;        zip_buffer_t *ef_buffer;	const zip_uint8_t *ef = _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error);	/* TODO: if got_len == 0 && !ZIP64_EOCD: no error, 0xffffffff is valid value */        if (ef == NULL) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }        if ((ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL) {            zip_error_set(error, ZIP_ER_MEMORY, 0);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }	if (zde->uncomp_size == ZIP_UINT32_MAX)	    zde->uncomp_size = _zip_buffer_get_64(ef_buffer);	else if (local) {	    /* From appnote.txt: This entry in the Local header MUST	       include BOTH original and compressed file size fields. */            (void)_zip_buffer_skip(ef_buffer, 8); /* error is caught by _zip_buffer_eof() call */	}	if (zde->comp_size == ZIP_UINT32_MAX)	    zde->comp_size = _zip_buffer_get_64(ef_buffer);	if (!local) {	    if (zde->offset == ZIP_UINT32_MAX)		zde->offset = _zip_buffer_get_64(ef_buffer);	    if (zde->disk_number == ZIP_UINT16_MAX)		zde->disk_number = _zip_buffer_get_32(buffer);	}        if (!_zip_buffer_eof(ef_buffer)) {            zip_error_set(error, ZIP_ER_INCONS, 0);            _zip_buffer_free(ef_buffer);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }        _zip_buffer_free(ef_buffer);    }
zip_uint16_t got_len;
zip_uint16_t got_len;
zip_uint16_t
zip_uint16_t
got_len
got_len
zip_buffer_t *ef_buffer;
zip_buffer_t *ef_buffer;
zip_buffer_t
zip_buffer_t
*ef_buffer
*
ef_buffer
const zip_uint8_t *ef = _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error);
const zip_uint8_t *ef = _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error);
const zip_uint8_t
zip_uint8_t
*ef = _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error)
*
ef
= _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error)
_zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error)
_zip_ef_get_by_id
_zip_ef_get_by_id
zde->extra_fields
zde
zde
extra_fields
&got_len
got_len
got_len
ZIP_EF_ZIP64
ZIP_EF_ZIP64
0
local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL
local
local
ZIP_EF_LOCAL
ZIP_EF_LOCAL
ZIP_EF_CENTRAL
ZIP_EF_CENTRAL
error
error
if (ef == NULL) {            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }
ef == NULL
ef
ef
NULL
NULL
{            if (!from_buffer) {                _zip_buffer_free(buffer);            }	    return -1;        }
if (!from_buffer) {                _zip_buffer_free(buffer);            }
!from_buffer
from_buffer
from_buffer
{                _zip_buffer_free(buffer);            }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
if ((ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL) {            zip_error_set(error, ZIP_ER_MEMORY, 0);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }
(ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL
(ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len))
ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)
ef_buffer
ef_buffer
_zip_buffer_new((zip_uint8_t *)ef, got_len)
_zip_buffer_new
_zip_buffer_new
(zip_uint8_t *)ef
zip_uint8_t *
zip_uint8_t
zip_uint8_t
*
*
ef
ef
got_len
got_len
NULL
NULL
{            zip_error_set(error, ZIP_ER_MEMORY, 0);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }
zip_error_set(error, ZIP_ER_MEMORY, 0);
zip_error_set(error, ZIP_ER_MEMORY, 0)
zip_error_set
zip_error_set
error
error
ZIP_ER_MEMORY
ZIP_ER_MEMORY
0
if (!from_buffer) {                _zip_buffer_free(buffer);            }
!from_buffer
from_buffer
from_buffer
{                _zip_buffer_free(buffer);            }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
if (zde->uncomp_size == ZIP_UINT32_MAX)	    zde->uncomp_size = _zip_buffer_get_64(ef_buffer);	else if (local) {	    /* From appnote.txt: This entry in the Local header MUST	       include BOTH original and compressed file size fields. */            (void)_zip_buffer_skip(ef_buffer, 8); /* error is caught by _zip_buffer_eof() call */	}
zde->uncomp_size == ZIP_UINT32_MAX
zde->uncomp_size
zde
zde
uncomp_size
ZIP_UINT32_MAX
ZIP_UINT32_MAX
zde->uncomp_size = _zip_buffer_get_64(ef_buffer);
zde->uncomp_size = _zip_buffer_get_64(ef_buffer)
zde->uncomp_size
zde
zde
uncomp_size
_zip_buffer_get_64(ef_buffer)
_zip_buffer_get_64
_zip_buffer_get_64
ef_buffer
ef_buffer
if (local) {	    /* From appnote.txt: This entry in the Local header MUST	       include BOTH original and compressed file size fields. */            (void)_zip_buffer_skip(ef_buffer, 8); /* error is caught by _zip_buffer_eof() call */	}
local
local
{	    /* From appnote.txt: This entry in the Local header MUST	       include BOTH original and compressed file size fields. */            (void)_zip_buffer_skip(ef_buffer, 8); /* error is caught by _zip_buffer_eof() call */	}
(void)_zip_buffer_skip(ef_buffer, 8);
(void)_zip_buffer_skip(ef_buffer, 8)
void
void

_zip_buffer_skip(ef_buffer, 8)
_zip_buffer_skip
_zip_buffer_skip
ef_buffer
ef_buffer
8
if (zde->comp_size == ZIP_UINT32_MAX)	    zde->comp_size = _zip_buffer_get_64(ef_buffer);
zde->comp_size == ZIP_UINT32_MAX
zde->comp_size
zde
zde
comp_size
ZIP_UINT32_MAX
ZIP_UINT32_MAX
zde->comp_size = _zip_buffer_get_64(ef_buffer);
zde->comp_size = _zip_buffer_get_64(ef_buffer)
zde->comp_size
zde
zde
comp_size
_zip_buffer_get_64(ef_buffer)
_zip_buffer_get_64
_zip_buffer_get_64
ef_buffer
ef_buffer
if (!local) {	    if (zde->offset == ZIP_UINT32_MAX)		zde->offset = _zip_buffer_get_64(ef_buffer);	    if (zde->disk_number == ZIP_UINT16_MAX)		zde->disk_number = _zip_buffer_get_32(buffer);	}
!local
local
local
{	    if (zde->offset == ZIP_UINT32_MAX)		zde->offset = _zip_buffer_get_64(ef_buffer);	    if (zde->disk_number == ZIP_UINT16_MAX)		zde->disk_number = _zip_buffer_get_32(buffer);	}
if (zde->offset == ZIP_UINT32_MAX)		zde->offset = _zip_buffer_get_64(ef_buffer);
zde->offset == ZIP_UINT32_MAX
zde->offset
zde
zde
offset
ZIP_UINT32_MAX
ZIP_UINT32_MAX
zde->offset = _zip_buffer_get_64(ef_buffer);
zde->offset = _zip_buffer_get_64(ef_buffer)
zde->offset
zde
zde
offset
_zip_buffer_get_64(ef_buffer)
_zip_buffer_get_64
_zip_buffer_get_64
ef_buffer
ef_buffer
if (zde->disk_number == ZIP_UINT16_MAX)		zde->disk_number = _zip_buffer_get_32(buffer);
zde->disk_number == ZIP_UINT16_MAX
zde->disk_number
zde
zde
disk_number
ZIP_UINT16_MAX
ZIP_UINT16_MAX
zde->disk_number = _zip_buffer_get_32(buffer);
zde->disk_number = _zip_buffer_get_32(buffer)
zde->disk_number
zde
zde
disk_number
_zip_buffer_get_32(buffer)
_zip_buffer_get_32
_zip_buffer_get_32
buffer
buffer
if (!_zip_buffer_eof(ef_buffer)) {            zip_error_set(error, ZIP_ER_INCONS, 0);            _zip_buffer_free(ef_buffer);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }
!_zip_buffer_eof(ef_buffer)
_zip_buffer_eof(ef_buffer)
_zip_buffer_eof
_zip_buffer_eof
ef_buffer
ef_buffer
{            zip_error_set(error, ZIP_ER_INCONS, 0);            _zip_buffer_free(ef_buffer);            if (!from_buffer) {                _zip_buffer_free(buffer);            }            return -1;        }
zip_error_set(error, ZIP_ER_INCONS, 0);
zip_error_set(error, ZIP_ER_INCONS, 0)
zip_error_set
zip_error_set
error
error
ZIP_ER_INCONS
ZIP_ER_INCONS
0
_zip_buffer_free(ef_buffer);
_zip_buffer_free(ef_buffer)
_zip_buffer_free
_zip_buffer_free
ef_buffer
ef_buffer
if (!from_buffer) {                _zip_buffer_free(buffer);            }
!from_buffer
from_buffer
from_buffer
{                _zip_buffer_free(buffer);            }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
_zip_buffer_free(ef_buffer);
_zip_buffer_free(ef_buffer)
_zip_buffer_free
_zip_buffer_free
ef_buffer
ef_buffer
if (!_zip_buffer_ok(buffer)) {        zip_error_set(error, ZIP_ER_INTERNAL, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }        return -1;    }
!_zip_buffer_ok(buffer)
_zip_buffer_ok(buffer)
_zip_buffer_ok
_zip_buffer_ok
buffer
buffer
{        zip_error_set(error, ZIP_ER_INTERNAL, 0);        if (!from_buffer) {            _zip_buffer_free(buffer);        }        return -1;    }
zip_error_set(error, ZIP_ER_INTERNAL, 0);
zip_error_set(error, ZIP_ER_INTERNAL, 0)
zip_error_set
zip_error_set
error
error
ZIP_ER_INTERNAL
ZIP_ER_INTERNAL
0
if (!from_buffer) {            _zip_buffer_free(buffer);        }
!from_buffer
from_buffer
from_buffer
{            _zip_buffer_free(buffer);        }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
if (!from_buffer) {        _zip_buffer_free(buffer);    }
!from_buffer
from_buffer
from_buffer
{        _zip_buffer_free(buffer);    }
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
if (zde->offset > ZIP_INT64_MAX) {	zip_error_set(error, ZIP_ER_SEEK, EFBIG);	return -1;    }
zde->offset > ZIP_INT64_MAX
zde->offset
zde
zde
offset
ZIP_INT64_MAX
ZIP_INT64_MAX
{	zip_error_set(error, ZIP_ER_SEEK, EFBIG);	return -1;    }
zip_error_set(error, ZIP_ER_SEEK, EFBIG);
zip_error_set(error, ZIP_ER_SEEK, EFBIG)
zip_error_set
zip_error_set
error
error
ZIP_ER_SEEK
ZIP_ER_SEEK
EFBIG
EFBIG
return -1;
-1
1
if (!_zip_dirent_process_winzip_aes(zde, error)) {	if (!from_buffer) {	    _zip_buffer_free(buffer);	}	return -1;    }
!_zip_dirent_process_winzip_aes(zde, error)
_zip_dirent_process_winzip_aes(zde, error)
_zip_dirent_process_winzip_aes
_zip_dirent_process_winzip_aes
zde
zde
error
error
{	if (!from_buffer) {	    _zip_buffer_free(buffer);	}	return -1;    }
if (!from_buffer) {	    _zip_buffer_free(buffer);	}
!from_buffer
from_buffer
from_buffer
{	    _zip_buffer_free(buffer);	}
_zip_buffer_free(buffer);
_zip_buffer_free(buffer)
_zip_buffer_free
_zip_buffer_free
buffer
buffer
return -1;
-1
1
zde->extra_fields = _zip_ef_remove_internal(zde->extra_fields);
zde->extra_fields = _zip_ef_remove_internal(zde->extra_fields)
zde->extra_fields
zde
zde
extra_fields
_zip_ef_remove_internal(zde->extra_fields)
_zip_ef_remove_internal
_zip_ef_remove_internal
zde->extra_fields
zde
zde
extra_fields
return (zip_int64_t)(size + variable_size);
(zip_int64_t)(size + variable_size)
(zip_int64_t)
zip_int64_t
zip_int64_t
size + variable_size
size
size
variable_size
variable_size
-----joern-----
(8,16,0)
(18,12,0)
(8,10,0)
(19,25,0)
(23,24,0)
(1,2,0)
(28,10,0)
(5,14,0)
(34,33,0)
(21,30,0)
(26,25,0)
(28,12,0)
(24,19,0)
(3,33,0)
(4,12,0)
(9,33,0)
(19,24,0)
(24,14,0)
(16,14,0)
(27,9,0)
(6,25,0)
(33,9,0)
(15,19,0)
(29,10,0)
(33,14,0)
(9,13,0)
(30,14,0)
(30,10,0)
(11,24,0)
(12,28,0)
(32,10,0)
(22,6,0)
(0,25,0)
(16,8,0)
(17,5,0)
(31,16,0)
(13,9,0)
(9,25,0)
(20,16,0)
(12,14,0)
(7,10,0)
(2,5,1)
(6,25,1)
(31,19,1)
(9,25,1)
(24,23,1)
(4,18,1)
(11,15,1)
(20,31,1)
(12,4,1)
(21,28,1)
(30,21,1)
(30,14,1)
(9,33,1)
(19,24,1)
(25,0,1)
(27,33,1)
(1,30,1)
(12,14,1)
(15,25,1)
(33,14,1)
(24,14,1)
(6,22,1)
(16,14,1)
(33,3,1)
(5,14,1)
(23,11,1)
(26,5,1)
(8,16,1)
(13,9,1)
(3,34,1)
(34,19,1)
(16,20,1)
(28,12,1)
(22,13,1)
(18,8,1)
(1,2,1)
(9,27,1)
(15,6,1)
(5,17,1)
(0,26,1)
(19,25,1)
(11,5,2)
(0,5,2)
(31,5,2)
(34,19,2)
(9,25,2)
(6,25,2)
(9,19,2)
(15,19,2)
(28,5,2)
(4,5,2)
(3,19,2)
(19,5,2)
(23,19,2)
(21,5,2)
(28,12,2)
(8,5,2)
(24,5,2)
(16,5,2)
(19,24,2)
(15,5,2)
(22,19,2)
(27,19,2)
(33,19,2)
(20,5,2)
(2,5,2)
(16,14,2)
(25,5,2)
(12,5,2)
(19,19,2)
(13,9,2)
(19,25,2)
(24,14,2)
(33,14,2)
(24,19,2)
(9,33,2)
(5,14,2)
(30,14,2)
(8,16,2)
(12,14,2)
(30,5,2)
(6,19,2)
(18,5,2)
(23,5,2)
(1,2,2)
(11,19,2)
(13,19,2)
(26,5,2)
-----------------------------------
(0,0)
(1,RET)
(2,return;)
(3,entry)
(4,comment)
(5,!cd)
(6,i++)
(7,if (!cd)
(8,free(cd->entry)
(9,cd->entry+i)
(10,)
(11,cd)
(12,cd->comment)
(13,_zip_entry_finalize(cd->entry+i)
(14,zip_cdir_t *cd)
(15,i)
(16,cd->entry)
(17,cd)
(18,cd)
(19,i<cd->nentry)
(20,entry)
(21,cd)
(22,i)
(23,nentry)
(24,cd->nentry)
(25,i=0)
(26,i)
(27,i)
(28,_zip_string_free(cd->comment)
(29,i)
(30,free(cd)
(31,cd)
(32,for (i=0; i<cd->nentry; i++)
(33,cd->entry)
(34,cd)
-----cfg-----
(512,517)
(517,520)
(517,523)
(7,25)
(520,523)
(522,774)
(523,522)
(525,538)
(526,534)
(528,526)
(529,525)
(532,529)
(534,532)
(23,30)
(535,551)
(536,544)
(25,23)
(538,536)
(539,535)
(28,39)
(28,56)
(30,28)
(542,539)
(544,542)
(546,572)
(546,710)
(547,546)
(547,561)
(548,547)
(548,556)
(549,548)
(38,43)
(38,69)
(39,38)
(551,549)
(553,547)
(554,553)
(43,48)
(556,554)
(558,546)
(559,558)
(47,774)
(48,47)
(561,559)
(53,64)
(53,69)
(54,53)
(567,583)
(56,54)
(569,567)
(570,573)
(572,570)
(573,577)
(63,774)
(64,63)
(577,569)
(67,79)
(67,92)
(68,67)
(69,72)
(583,588)
(583,602)
(72,68)
(588,591)
(588,594)
(79,84)
(591,594)
(593,774)
(594,593)
(84,87)
(84,90)
(597,607)
(597,624)
(598,597)
(87,90)
(600,598)
(89,774)
(601,600)
(90,89)
(602,601)
(92,95)
(95,101)
(95,109)
(607,612)
(98,114)
(99,102)
(612,615)
(612,618)
(101,99)
(102,98)
(615,618)
(617,774)
(106,114)
(618,617)
(107,106)
(621,630)
(621,639)
(621,647)
(109,107)
(622,621)
(111,120)
(112,115)
(624,622)
(114,112)
(115,111)
(627,647)
(628,631)
(117,126)
(118,121)
(630,628)
(631,627)
(120,118)
(121,117)
(123,131)
(124,127)
(126,124)
(638,647)
(127,123)
(639,640)
(640,638)
(129,135)
(131,129)
(644,653)
(644,657)
(133,140)
(645,644)
(135,133)
(647,645)
(137,147)
(138,141)
(650,657)
(651,654)
(140,138)
(141,137)
(653,651)
(654,650)
(144,153)
(145,148)
(657,664)
(657,688)
(147,145)
(148,144)
(661,670)
(661,677)
(150,159)
(662,661)
(151,154)
(664,662)
(153,151)
(154,150)
(667,677)
(156,164)
(668,671)
(157,160)
(670,668)
(159,157)
(671,667)
(160,156)
(162,168)
(674,683)
(674,688)
(675,674)
(164,162)
(677,675)
(166,173)
(166,200)
(168,166)
(680,688)
(681,684)
(683,681)
(684,680)
(173,179)
(687,691)
(687,706)
(176,184)
(688,687)
(177,176)
(179,177)
(691,695)
(181,189)
(182,181)
(695,698)
(184,182)
(186,194)
(698,701)
(698,704)
(187,186)
(189,187)
(701,704)
(191,228)
(703,774)
(192,191)
(704,703)
(706,710)
(194,192)
(709,713)
(709,727)
(710,709)
(198,205)
(200,198)
(713,718)
(202,211)
(203,206)
(205,203)
(718,721)
(718,724)
(206,202)
(208,217)
(209,212)
(721,724)
(723,774)
(211,209)
(724,723)
(212,208)
(214,223)
(727,730)
(727,736)
(215,218)
(217,215)
(730,736)
(218,214)
(220,228)
(733,739)
(733,748)
(221,224)
(734,733)
(223,221)
(736,734)
(224,220)
(227,231)
(227,248)
(739,744)
(228,227)
(231,236)
(743,774)
(744,743)
(747,753)
(747,764)
(748,747)
(236,239)
(236,242)
(239,242)
(241,774)
(753,756)
(753,759)
(242,241)
(756,759)
(245,255)
(245,275)
(246,245)
(758,774)
(759,758)
(248,246)
(761,771)
(762,768)
(764,762)
(252,261)
(252,268)
(765,761)
(253,252)
(766,765)
(255,253)
(768,766)
(769,774)
(770,769)
(258,280)
(771,770)
(259,258)
(261,259)
(265,280)
(266,265)
(268,266)
(272,280)
(273,272)
(275,273)
(277,285)
(278,277)
(280,278)
(282,290)
(283,282)
(285,283)
(287,297)
(288,287)
(290,288)
(292,310)
(292,323)
(294,292)
(295,303)
(296,300)
(297,296)
(299,295)
(300,299)
(302,294)
(303,302)
(309,314)
(309,345)
(309,412)
(309,474)
(309,528)
(310,309)
(314,319)
(318,774)
(319,318)
(323,329)
(326,337)
(326,345)
(326,412)
(326,474)
(326,528)
(327,326)
(329,327)
(336,774)
(337,336)
(342,356)
(343,346)
(345,343)
(346,342)
(353,360)
(353,381)
(354,353)
(356,354)
(359,364)
(359,369)
(360,359)
(364,369)
(369,372)
(369,375)
(372,375)
(374,774)
(375,374)
(378,389)
(378,412)
(378,474)
(378,528)
(379,378)
(381,379)
(385,393)
(385,412)
(385,474)
(385,528)
(386,385)
(387,386)
(389,387)
(393,398)
(398,401)
(398,404)
(401,404)
(403,774)
(404,403)
(410,419)
(412,410)
(419,424)
(419,437)
(424,427)
(424,430)
(427,430)
(429,774)
(430,429)
(433,447)
(433,458)
(434,433)
(437,444)
(441,434)
(442,441)
(444,442)
(447,450)
(450,453)
(450,456)
(453,456)
(455,774)
(456,455)
(458,466)
(458,474)
(458,528)
(463,474)
(463,528)
(464,463)
(466,464)
(471,485)
(472,475)
(474,472)
(475,471)
(482,488)
(482,500)
(483,482)
(485,483)
(488,491)
(488,494)
(491,494)
(493,774)
(494,493)
(497,508)
(497,528)
(498,497)
(500,498)
(504,512)
(504,528)
(505,504)
(506,505)
(508,506)
-----path-----
7,25,23,30,28,39,38,43,48,47,774
7,25,23,30,28,39,38,69,72,68,67,79,84,87,90,89,774
7,25,23,30,28,39,38,69,72,68,67,79,84,90,89,774
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,231,236,239,242,241,774
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,231,236,242,241,774
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318,774
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346,342
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,437
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475,471
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534,532
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337,336
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345,343
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474,472
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528,526
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318,774
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346,342
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,437
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475,471
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534,532
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337,336
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345,343
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474,472
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528,526
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318,774
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346,342,356,354,353
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,427,430,429
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,430,429,774
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,437,444,442,441
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475,471,485,483,482
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534,532,529,525,538
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337,336,774
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345,343,346,342,356
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419,424,427
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419,424,430
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419,437,444
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474,472,475,471,485
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528,526,534,532,529
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,231,236,239,242,241,774
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,231,236,242,241,774
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526
7,25,23,30,28,39,38,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,231,236,239,242,241,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,231,236,242,241,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346,342,356
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,427
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,430
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,437,444
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475,471,485
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534,532,529
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337,336,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345,343,346
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474,472,475
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528,526,534
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346,342,356
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,427
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,430
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,437,444
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475,471,485
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534,532,529
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337,336,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345,343,346
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474,472,475
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528,526,534
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346,342,356,354,353,360
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346,342,356,354,353,381
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,427,430,429,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,430,429,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,437,444,442,441,434
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475,471,485,483,482,488
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475,471,485,483,482,500
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534,532,529,525,538,536
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337,336,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345,343,346,342,356,354
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419,424,427,430
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419,424,430,429
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419,437,444,442
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474,472,475,471,485,483
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528,526,534,532,529,525
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,231,236,239,242,241,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,231,236,242,241,774
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474
7,25,23,30,28,39,38,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528
7,25,23,30,28,56,54,53,64,63,774
7,25,23,30,28,56,54,53,69,72,68,67,79,84,87,90,89,774
7,25,23,30,28,56,54,53,69,72,68,67,79,84,90,89,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,231,236,239,242,241,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,231,236,242,241,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346,342,356,354
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,427,430
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,430,429
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,437,444,442
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475,471,485,483
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534,532,529,525
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337,336,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345,343,346,342
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419,424
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419,437
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474,472,475,471
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528,526,534,532
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,231,236,239,242,241,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,231,236,242,241,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528
7,25,23,30,28,56,54,53,69,72,68,67,92,95,101,99,102,98,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,231,236,239,242,241,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,231,236,242,241,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346,342
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,437
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475,471
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534,532
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337,336
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345,343
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474,472
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528,526
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346,342
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,437
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475,471
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534,532
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337,336
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345,343
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474,472
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528,526
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319,318,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343,346,342,356,354,353
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,427,430,429
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,424,430,429,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410,419,437,444,442,441
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472,475,471,485,483,482
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526,534,532,529,525,538
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,337,336,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,345,343,346,342,356
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419,424,427
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419,424,430
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,412,410,419,437,444
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,474,472,475,471,485
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,173,179,177,176,184,182,181,189,187,186,194,192,191,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326,528,526,534,532,529
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,231,236,239,242,241,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,231,236,242,241,774
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,261,259,258,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,255,253,252,268,266,265,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,314,319
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,345,343
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,412,410
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,474,472
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,310,309,528,526
7,25,23,30,28,56,54,53,69,72,68,67,92,95,109,107,106,114,112,115,111,120,118,121,117,126,124,127,123,131,129,135,133,140,138,141,137,147,145,148,144,153,151,154,150,159,157,160,156,164,162,168,166,200,198,205,203,206,202,211,209,212,208,217,215,218,214,223,221,224,220,228,227,248,246,245,275,273,272,280,278,277,285,283,282,290,288,287,297,296,300,299,295,303,302,294,292,323,329,327,326
-----cfgNode-----
5,<global>
6,<empty>
7,zip_int64_t _zip_dirent_read (zip_dirent_t *zde,zip_source_t *src,zip_buffer_t *buffer,bool local,zip_error_t *error)
8,zip_dirent_t *zde
9,zip_source_t *src
10,zip_buffer_t *buffer
11,bool local
12,zip_error_t *error
13,<empty>
14,zip_uint8_t[] buf
15,zip_uint16_t dostime
16,zip_uint16_t dosdate
17,zip_uint32_t size
18,zip_uint32_t variable_size
19,zip_uint16_t filename_len
20,zip_uint16_t comment_len
21,zip_uint16_t ef_len
22,bool from_buffer
23,from_buffer = (buffer != NULL)
24,from_buffer
25,buffer != NULL
26,buffer
27,NULL
28,size = local ? LENTRYSIZE : CDENTRYSIZE
29,size
30,local ? LENTRYSIZE : CDENTRYSIZE
31,local
32,LENTRYSIZE
33,CDENTRYSIZE
34,if (buffer)
35,buffer
36,<empty>
37,if (_zip_buffer_left(buffer) < size)
38,_zip_buffer_left(buffer) < size
39,_zip_buffer_left(buffer)
40,buffer
41,size
42,<empty>
43,zip_error_set(error, ZIP_ER_NOZIP, 0)
44,error
45,ZIP_ER_NOZIP
46,0
47,return -1;
48,-1
49,1
50,else
51,<empty>
52,if ((buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL)
53,(buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL
54,buffer = _zip_buffer_new_from_source(src, size, buf, error)
55,buffer
56,_zip_buffer_new_from_source(src, size, buf, error)
57,src
58,size
59,buf
60,error
61,NULL
62,<empty>
63,return -1;
64,-1
65,1
66,if (memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4) != 0)
67,memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4) != 0
68,memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4)
69,_zip_buffer_get(buffer, 4)
70,buffer
71,4
72,local ? LOCAL_MAGIC : CENTRAL_MAGIC
73,local
74,LOCAL_MAGIC
75,CENTRAL_MAGIC
76,4
77,0
78,<empty>
79,zip_error_set(error, ZIP_ER_NOZIP, 0)
80,error
81,ZIP_ER_NOZIP
82,0
83,if (!from_buffer)
84,!from_buffer
85,from_buffer
86,<empty>
87,_zip_buffer_free(buffer)
88,buffer
89,return -1;
90,-1
91,1
92,_zip_dirent_init(zde)
93,zde
94,if (!local)
95,!local
96,local
97,<empty>
98,zde->version_madeby = _zip_buffer_get_16(buffer)
99,zde->version_madeby
100,zde
101,version_madeby
102,_zip_buffer_get_16(buffer)
103,buffer
104,else
105,<empty>
106,zde->version_madeby = 0
107,zde->version_madeby
108,zde
109,version_madeby
110,0
111,zde->version_needed = _zip_buffer_get_16(buffer)
112,zde->version_needed
113,zde
114,version_needed
115,_zip_buffer_get_16(buffer)
116,buffer
117,zde->bitflags = _zip_buffer_get_16(buffer)
118,zde->bitflags
119,zde
120,bitflags
121,_zip_buffer_get_16(buffer)
122,buffer
123,zde->comp_method = _zip_buffer_get_16(buffer)
124,zde->comp_method
125,zde
126,comp_method
127,_zip_buffer_get_16(buffer)
128,buffer
129,dostime = _zip_buffer_get_16(buffer)
130,dostime
131,_zip_buffer_get_16(buffer)
132,buffer
133,dosdate = _zip_buffer_get_16(buffer)
134,dosdate
135,_zip_buffer_get_16(buffer)
136,buffer
137,zde->last_mod = _zip_d2u_time(dostime, dosdate)
138,zde->last_mod
139,zde
140,last_mod
141,_zip_d2u_time(dostime, dosdate)
142,dostime
143,dosdate
144,zde->crc = _zip_buffer_get_32(buffer)
145,zde->crc
146,zde
147,crc
148,_zip_buffer_get_32(buffer)
149,buffer
150,zde->comp_size = _zip_buffer_get_32(buffer)
151,zde->comp_size
152,zde
153,comp_size
154,_zip_buffer_get_32(buffer)
155,buffer
156,zde->uncomp_size = _zip_buffer_get_32(buffer)
157,zde->uncomp_size
158,zde
159,uncomp_size
160,_zip_buffer_get_32(buffer)
161,buffer
162,filename_len = _zip_buffer_get_16(buffer)
163,filename_len
164,_zip_buffer_get_16(buffer)
165,buffer
166,ef_len = _zip_buffer_get_16(buffer)
167,ef_len
168,_zip_buffer_get_16(buffer)
169,buffer
170,if (local)
171,local
172,<empty>
173,comment_len = 0
174,comment_len
175,0
176,zde->disk_number = 0
177,zde->disk_number
178,zde
179,disk_number
180,0
181,zde->int_attrib = 0
182,zde->int_attrib
183,zde
184,int_attrib
185,0
186,zde->ext_attrib = 0
187,zde->ext_attrib
188,zde
189,ext_attrib
190,0
191,zde->offset = 0
192,zde->offset
193,zde
194,offset
195,0
196,else
197,<empty>
198,comment_len = _zip_buffer_get_16(buffer)
199,comment_len
200,_zip_buffer_get_16(buffer)
201,buffer
202,zde->disk_number = _zip_buffer_get_16(buffer)
203,zde->disk_number
204,zde
205,disk_number
206,_zip_buffer_get_16(buffer)
207,buffer
208,zde->int_attrib = _zip_buffer_get_16(buffer)
209,zde->int_attrib
210,zde
211,int_attrib
212,_zip_buffer_get_16(buffer)
213,buffer
214,zde->ext_attrib = _zip_buffer_get_32(buffer)
215,zde->ext_attrib
216,zde
217,ext_attrib
218,_zip_buffer_get_32(buffer)
219,buffer
220,zde->offset = _zip_buffer_get_32(buffer)
221,zde->offset
222,zde
223,offset
224,_zip_buffer_get_32(buffer)
225,buffer
226,if (!_zip_buffer_ok(buffer))
227,!_zip_buffer_ok(buffer)
228,_zip_buffer_ok(buffer)
229,buffer
230,<empty>
231,zip_error_set(error, ZIP_ER_INTERNAL, 0)
232,error
233,ZIP_ER_INTERNAL
234,0
235,if (!from_buffer)
236,!from_buffer
237,from_buffer
238,<empty>
239,_zip_buffer_free(buffer)
240,buffer
241,return -1;
242,-1
243,1
244,if (zde->bitflags & ZIP_GPBF_ENCRYPTED)
245,zde->bitflags & ZIP_GPBF_ENCRYPTED
246,zde->bitflags
247,zde
248,bitflags
249,ZIP_GPBF_ENCRYPTED
250,<empty>
251,if (zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION)
252,zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION
253,zde->bitflags
254,zde
255,bitflags
256,ZIP_GPBF_STRONG_ENCRYPTION
257,<empty>
258,zde->encryption_method = ZIP_EM_UNKNOWN
259,zde->encryption_method
260,zde
261,encryption_method
262,ZIP_EM_UNKNOWN
263,else
264,<empty>
265,zde->encryption_method = ZIP_EM_TRAD_PKWARE
266,zde->encryption_method
267,zde
268,encryption_method
269,ZIP_EM_TRAD_PKWARE
270,else
271,<empty>
272,zde->encryption_method = ZIP_EM_NONE
273,zde->encryption_method
274,zde
275,encryption_method
276,ZIP_EM_NONE
277,zde->filename = NULL
278,zde->filename
279,zde
280,filename
281,NULL
282,zde->extra_fields = NULL
283,zde->extra_fields
284,zde
285,extra_fields
286,NULL
287,zde->comment = NULL
288,zde->comment
289,zde
290,comment
291,NULL
292,variable_size = (zip_uint32_t)filename_len+(zip_uint32_t)ef_len+(zip_uint32_t)comment_len
293,variable_size
294,(zip_uint32_t)filename_len+(zip_uint32_t)ef_len+(zip_uint32_t)comment_len
295,(zip_uint32_t)filename_len+(zip_uint32_t)ef_len
296,(zip_uint32_t)filename_len
297,zip_uint32_t
298,filename_len
299,(zip_uint32_t)ef_len
300,zip_uint32_t
301,ef_len
302,(zip_uint32_t)comment_len
303,zip_uint32_t
304,comment_len
305,if (from_buffer)
306,from_buffer
307,<empty>
308,if (_zip_buffer_left(buffer) < variable_size)
309,_zip_buffer_left(buffer) < variable_size
310,_zip_buffer_left(buffer)
311,buffer
312,variable_size
313,<empty>
314,zip_error_set(error, ZIP_ER_INCONS, 0)
315,error
316,ZIP_ER_INCONS
317,0
318,return -1;
319,-1
320,1
321,else
322,<empty>
323,_zip_buffer_free(buffer)
324,buffer
325,if ((buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL)
326,(buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL
327,buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)
328,buffer
329,_zip_buffer_new_from_source(src, variable_size, NULL, error)
330,src
331,variable_size
332,NULL
333,error
334,NULL
335,<empty>
336,return -1;
337,-1
338,1
339,if (filename_len)
340,filename_len
341,<empty>
342,zde->filename = _zip_read_string(buffer, src, filename_len, 1, error)
343,zde->filename
344,zde
345,filename
346,_zip_read_string(buffer, src, filename_len, 1, error)
347,buffer
348,src
349,filename_len
350,1
351,error
352,if (!zde->filename)
353,!zde->filename
354,zde->filename
355,zde
356,filename
357,<empty>
358,if (zip_error_code_zip(error) == ZIP_ER_EOF)
359,zip_error_code_zip(error) == ZIP_ER_EOF
360,zip_error_code_zip(error)
361,error
362,ZIP_ER_EOF
363,<empty>
364,zip_error_set(error, ZIP_ER_INCONS, 0)
365,error
366,ZIP_ER_INCONS
367,0
368,if (!from_buffer)
369,!from_buffer
370,from_buffer
371,<empty>
372,_zip_buffer_free(buffer)
373,buffer
374,return -1;
375,-1
376,1
377,if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8)
378,zde->bitflags & ZIP_GPBF_ENCODING_UTF_8
379,zde->bitflags
380,zde
381,bitflags
382,ZIP_GPBF_ENCODING_UTF_8
383,<empty>
384,if (_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR)
385,_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR
386,_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN)
387,zde->filename
388,zde
389,filename
390,ZIP_ENCODING_UTF8_KNOWN
391,ZIP_ENCODING_ERROR
392,<empty>
393,zip_error_set(error, ZIP_ER_INCONS, 0)
394,error
395,ZIP_ER_INCONS
396,0
397,if (!from_buffer)
398,!from_buffer
399,from_buffer
400,<empty>
401,_zip_buffer_free(buffer)
402,buffer
403,return -1;
404,-1
405,1
406,if (ef_len)
407,ef_len
408,<empty>
409,zip_uint8_t* ef
410,*ef = _zip_read_data(buffer, src, ef_len, 0, error)
411,ef
412,_zip_read_data(buffer, src, ef_len, 0, error)
413,buffer
414,src
415,ef_len
416,0
417,error
418,if (ef == NULL)
419,ef == NULL
420,ef
421,NULL
422,<empty>
423,if (!from_buffer)
424,!from_buffer
425,from_buffer
426,<empty>
427,_zip_buffer_free(buffer)
428,buffer
429,return -1;
430,-1
431,1
432,if (!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error))
433,!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)
434,_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)
435,ef
436,ef_len
437,local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL
438,local
439,ZIP_EF_LOCAL
440,ZIP_EF_CENTRAL
441,&zde->extra_fields
442,zde->extra_fields
443,zde
444,extra_fields
445,error
446,<empty>
447,free(ef)
448,ef
449,if (!from_buffer)
450,!from_buffer
451,from_buffer
452,<empty>
453,_zip_buffer_free(buffer)
454,buffer
455,return -1;
456,-1
457,1
458,free(ef)
459,ef
460,if (local)
461,local
462,<empty>
463,zde->local_extra_fields_read = 1
464,zde->local_extra_fields_read
465,zde
466,local_extra_fields_read
467,1
468,if (comment_len)
469,comment_len
470,<empty>
471,zde->comment = _zip_read_string(buffer, src, comment_len, 0, error)
472,zde->comment
473,zde
474,comment
475,_zip_read_string(buffer, src, comment_len, 0, error)
476,buffer
477,src
478,comment_len
479,0
480,error
481,if (!zde->comment)
482,!zde->comment
483,zde->comment
484,zde
485,comment
486,<empty>
487,if (!from_buffer)
488,!from_buffer
489,from_buffer
490,<empty>
491,_zip_buffer_free(buffer)
492,buffer
493,return -1;
494,-1
495,1
496,if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8)
497,zde->bitflags & ZIP_GPBF_ENCODING_UTF_8
498,zde->bitflags
499,zde
500,bitflags
501,ZIP_GPBF_ENCODING_UTF_8
502,<empty>
503,if (_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR)
504,_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR
505,_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN)
506,zde->comment
507,zde
508,comment
509,ZIP_ENCODING_UTF8_KNOWN
510,ZIP_ENCODING_ERROR
511,<empty>
512,zip_error_set(error, ZIP_ER_INCONS, 0)
513,error
514,ZIP_ER_INCONS
515,0
516,if (!from_buffer)
517,!from_buffer
518,from_buffer
519,<empty>
520,_zip_buffer_free(buffer)
521,buffer
522,return -1;
523,-1
524,1
525,zde->filename = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_NAME, zde->filename)
526,zde->filename
527,zde
528,filename
529,_zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_NAME, zde->filename)
530,zde
531,ZIP_EF_UTF_8_NAME
532,zde->filename
533,zde
534,filename
535,zde->comment = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_COMMENT, zde->comment)
536,zde->comment
537,zde
538,comment
539,_zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_COMMENT, zde->comment)
540,zde
541,ZIP_EF_UTF_8_COMMENT
542,zde->comment
543,zde
544,comment
545,if (zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX || zde->offset == ZIP_UINT32_MAX)
546,zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX || zde->offset == ZIP_UINT32_MAX
547,zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX
548,zde->uncomp_size == ZIP_UINT32_MAX
549,zde->uncomp_size
550,zde
551,uncomp_size
552,ZIP_UINT32_MAX
553,zde->comp_size == ZIP_UINT32_MAX
554,zde->comp_size
555,zde
556,comp_size
557,ZIP_UINT32_MAX
558,zde->offset == ZIP_UINT32_MAX
559,zde->offset
560,zde
561,offset
562,ZIP_UINT32_MAX
563,<empty>
564,zip_uint16_t got_len
565,zip_buffer_t* ef_buffer
566,const zip_uint8_t* ef
567,*ef = _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error)
568,ef
569,_zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error)
570,zde->extra_fields
571,zde
572,extra_fields
573,&got_len
574,got_len
575,ZIP_EF_ZIP64
576,0
577,local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL
578,local
579,ZIP_EF_LOCAL
580,ZIP_EF_CENTRAL
581,error
582,if (ef == NULL)
583,ef == NULL
584,ef
585,NULL
586,<empty>
587,if (!from_buffer)
588,!from_buffer
589,from_buffer
590,<empty>
591,_zip_buffer_free(buffer)
592,buffer
593,return -1;
594,-1
595,1
596,if ((ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL)
597,(ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL
598,ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)
599,ef_buffer
600,_zip_buffer_new((zip_uint8_t *)ef, got_len)
601,(zip_uint8_t *)ef
602,zip_uint8_t *
603,ef
604,got_len
605,NULL
606,<empty>
607,zip_error_set(error, ZIP_ER_MEMORY, 0)
608,error
609,ZIP_ER_MEMORY
610,0
611,if (!from_buffer)
612,!from_buffer
613,from_buffer
614,<empty>
615,_zip_buffer_free(buffer)
616,buffer
617,return -1;
618,-1
619,1
620,if (zde->uncomp_size == ZIP_UINT32_MAX)
621,zde->uncomp_size == ZIP_UINT32_MAX
622,zde->uncomp_size
623,zde
624,uncomp_size
625,ZIP_UINT32_MAX
626,<empty>
627,zde->uncomp_size = _zip_buffer_get_64(ef_buffer)
628,zde->uncomp_size
629,zde
630,uncomp_size
631,_zip_buffer_get_64(ef_buffer)
632,ef_buffer
633,else
634,<empty>
635,if (local)
636,local
637,<empty>
638,(void)_zip_buffer_skip(ef_buffer, 8)
639,void
640,_zip_buffer_skip(ef_buffer, 8)
641,ef_buffer
642,8
643,if (zde->comp_size == ZIP_UINT32_MAX)
644,zde->comp_size == ZIP_UINT32_MAX
645,zde->comp_size
646,zde
647,comp_size
648,ZIP_UINT32_MAX
649,<empty>
650,zde->comp_size = _zip_buffer_get_64(ef_buffer)
651,zde->comp_size
652,zde
653,comp_size
654,_zip_buffer_get_64(ef_buffer)
655,ef_buffer
656,if (!local)
657,!local
658,local
659,<empty>
660,if (zde->offset == ZIP_UINT32_MAX)
661,zde->offset == ZIP_UINT32_MAX
662,zde->offset
663,zde
664,offset
665,ZIP_UINT32_MAX
666,<empty>
667,zde->offset = _zip_buffer_get_64(ef_buffer)
668,zde->offset
669,zde
670,offset
671,_zip_buffer_get_64(ef_buffer)
672,ef_buffer
673,if (zde->disk_number == ZIP_UINT16_MAX)
674,zde->disk_number == ZIP_UINT16_MAX
675,zde->disk_number
676,zde
677,disk_number
678,ZIP_UINT16_MAX
679,<empty>
680,zde->disk_number = _zip_buffer_get_32(buffer)
681,zde->disk_number
682,zde
683,disk_number
684,_zip_buffer_get_32(buffer)
685,buffer
686,if (!_zip_buffer_eof(ef_buffer))
687,!_zip_buffer_eof(ef_buffer)
688,_zip_buffer_eof(ef_buffer)
689,ef_buffer
690,<empty>
691,zip_error_set(error, ZIP_ER_INCONS, 0)
692,error
693,ZIP_ER_INCONS
694,0
695,_zip_buffer_free(ef_buffer)
696,ef_buffer
697,if (!from_buffer)
698,!from_buffer
699,from_buffer
700,<empty>
701,_zip_buffer_free(buffer)
702,buffer
703,return -1;
704,-1
705,1
706,_zip_buffer_free(ef_buffer)
707,ef_buffer
708,if (!_zip_buffer_ok(buffer))
709,!_zip_buffer_ok(buffer)
710,_zip_buffer_ok(buffer)
711,buffer
712,<empty>
713,zip_error_set(error, ZIP_ER_INTERNAL, 0)
714,error
715,ZIP_ER_INTERNAL
716,0
717,if (!from_buffer)
718,!from_buffer
719,from_buffer
720,<empty>
721,_zip_buffer_free(buffer)
722,buffer
723,return -1;
724,-1
725,1
726,if (!from_buffer)
727,!from_buffer
728,from_buffer
729,<empty>
730,_zip_buffer_free(buffer)
731,buffer
732,if (zde->offset > ZIP_INT64_MAX)
733,zde->offset > ZIP_INT64_MAX
734,zde->offset
735,zde
736,offset
737,ZIP_INT64_MAX
738,<empty>
739,zip_error_set(error, ZIP_ER_SEEK, EFBIG)
740,error
741,ZIP_ER_SEEK
742,EFBIG
743,return -1;
744,-1
745,1
746,if (!_zip_dirent_process_winzip_aes(zde, error))
747,!_zip_dirent_process_winzip_aes(zde, error)
748,_zip_dirent_process_winzip_aes(zde, error)
749,zde
750,error
751,<empty>
752,if (!from_buffer)
753,!from_buffer
754,from_buffer
755,<empty>
756,_zip_buffer_free(buffer)
757,buffer
758,return -1;
759,-1
760,1
761,zde->extra_fields = _zip_ef_remove_internal(zde->extra_fields)
762,zde->extra_fields
763,zde
764,extra_fields
765,_zip_ef_remove_internal(zde->extra_fields)
766,zde->extra_fields
767,zde
768,extra_fields
769,return (zip_int64_t)(size + variable_size);
770,(zip_int64_t)(size + variable_size)
771,size + variable_size
772,size
773,variable_size
774,RET
775,zip_dirent_t *zde
776,zip_source_t *src
777,zip_buffer_t *buffer
778,bool local
779,zip_error_t *error
780,RET
781,zip_int64_t _zip_dirent_read (zip_dirent_t *zde,zip_source_t *src,zip_buffer_t *buffer,bool local,zip_error_t *error)
782,zip_dirent_t *zde
783,zip_source_t *src
784,zip_buffer_t *buffer
785,bool local
786,zip_error_t *error
787,<empty>
788,zip_uint8_t[] buf
789,zip_uint16_t dostime
790,zip_uint16_t dosdate
791,zip_uint32_t size
792,zip_uint32_t variable_size
793,zip_uint16_t filename_len
794,zip_uint16_t comment_len
795,zip_uint16_t ef_len
796,bool from_buffer
797,from_buffer = (buffer != NULL)
798,from_buffer
799,buffer != NULL
800,buffer
801,NULL
802,size = local ? LENTRYSIZE : CDENTRYSIZE
803,size
804,local ? LENTRYSIZE : CDENTRYSIZE
805,local
806,LENTRYSIZE
807,CDENTRYSIZE
808,if (buffer)
809,buffer
810,<empty>
811,if (_zip_buffer_left(buffer) < size)
812,_zip_buffer_left(buffer) < size
813,_zip_buffer_left(buffer)
814,buffer
815,size
816,<empty>
817,zip_error_set(error, ZIP_ER_NOZIP, 0)
818,error
819,ZIP_ER_NOZIP
820,0
821,return -1;
822,-1
823,1
824,else
825,<empty>
826,if ((buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL)
827,(buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL
828,buffer = _zip_buffer_new_from_source(src, size, buf, error)
829,buffer
830,_zip_buffer_new_from_source(src, size, buf, error)
831,src
832,size
833,buf
834,error
835,NULL
836,<empty>
837,return -1;
838,-1
839,1
840,if (memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4) != 0)
841,memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4) != 0
842,memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4)
843,_zip_buffer_get(buffer, 4)
844,buffer
845,4
846,local ? LOCAL_MAGIC : CENTRAL_MAGIC
847,local
848,LOCAL_MAGIC
849,CENTRAL_MAGIC
850,4
851,0
852,<empty>
853,zip_error_set(error, ZIP_ER_NOZIP, 0)
854,error
855,ZIP_ER_NOZIP
856,0
857,if (!from_buffer)
858,!from_buffer
859,from_buffer
860,<empty>
861,_zip_buffer_free(buffer)
862,buffer
863,return -1;
864,-1
865,1
866,_zip_dirent_init(zde)
867,zde
868,if (!local)
869,!local
870,local
871,<empty>
872,zde->version_madeby = _zip_buffer_get_16(buffer)
873,zde->version_madeby
874,zde
875,version_madeby
876,_zip_buffer_get_16(buffer)
877,buffer
878,else
879,<empty>
880,zde->version_madeby = 0
881,zde->version_madeby
882,zde
883,version_madeby
884,0
885,zde->version_needed = _zip_buffer_get_16(buffer)
886,zde->version_needed
887,zde
888,version_needed
889,_zip_buffer_get_16(buffer)
890,buffer
891,zde->bitflags = _zip_buffer_get_16(buffer)
892,zde->bitflags
893,zde
894,bitflags
895,_zip_buffer_get_16(buffer)
896,buffer
897,zde->comp_method = _zip_buffer_get_16(buffer)
898,zde->comp_method
899,zde
900,comp_method
901,_zip_buffer_get_16(buffer)
902,buffer
903,dostime = _zip_buffer_get_16(buffer)
904,dostime
905,_zip_buffer_get_16(buffer)
906,buffer
907,dosdate = _zip_buffer_get_16(buffer)
908,dosdate
909,_zip_buffer_get_16(buffer)
910,buffer
911,zde->last_mod = _zip_d2u_time(dostime, dosdate)
912,zde->last_mod
913,zde
914,last_mod
915,_zip_d2u_time(dostime, dosdate)
916,dostime
917,dosdate
918,zde->crc = _zip_buffer_get_32(buffer)
919,zde->crc
920,zde
921,crc
922,_zip_buffer_get_32(buffer)
923,buffer
924,zde->comp_size = _zip_buffer_get_32(buffer)
925,zde->comp_size
926,zde
927,comp_size
928,_zip_buffer_get_32(buffer)
929,buffer
930,zde->uncomp_size = _zip_buffer_get_32(buffer)
931,zde->uncomp_size
932,zde
933,uncomp_size
934,_zip_buffer_get_32(buffer)
935,buffer
936,filename_len = _zip_buffer_get_16(buffer)
937,filename_len
938,_zip_buffer_get_16(buffer)
939,buffer
940,ef_len = _zip_buffer_get_16(buffer)
941,ef_len
942,_zip_buffer_get_16(buffer)
943,buffer
944,if (local)
945,local
946,<empty>
947,comment_len = 0
948,comment_len
949,0
950,zde->disk_number = 0
951,zde->disk_number
952,zde
953,disk_number
954,0
955,zde->int_attrib = 0
956,zde->int_attrib
957,zde
958,int_attrib
959,0
960,zde->ext_attrib = 0
961,zde->ext_attrib
962,zde
963,ext_attrib
964,0
965,zde->offset = 0
966,zde->offset
967,zde
968,offset
969,0
970,else
971,<empty>
972,comment_len = _zip_buffer_get_16(buffer)
973,comment_len
974,_zip_buffer_get_16(buffer)
975,buffer
976,zde->disk_number = _zip_buffer_get_16(buffer)
977,zde->disk_number
978,zde
979,disk_number
980,_zip_buffer_get_16(buffer)
981,buffer
982,zde->int_attrib = _zip_buffer_get_16(buffer)
983,zde->int_attrib
984,zde
985,int_attrib
986,_zip_buffer_get_16(buffer)
987,buffer
988,zde->ext_attrib = _zip_buffer_get_32(buffer)
989,zde->ext_attrib
990,zde
991,ext_attrib
992,_zip_buffer_get_32(buffer)
993,buffer
994,zde->offset = _zip_buffer_get_32(buffer)
995,zde->offset
996,zde
997,offset
998,_zip_buffer_get_32(buffer)
999,buffer
1000,if (!_zip_buffer_ok(buffer))
1001,!_zip_buffer_ok(buffer)
1002,_zip_buffer_ok(buffer)
1003,buffer
1004,<empty>
1005,zip_error_set(error, ZIP_ER_INTERNAL, 0)
1006,error
1007,ZIP_ER_INTERNAL
1008,0
1009,if (!from_buffer)
1010,!from_buffer
1011,from_buffer
1012,<empty>
1013,_zip_buffer_free(buffer)
1014,buffer
1015,return -1;
1016,-1
1017,1
1018,if (zde->bitflags & ZIP_GPBF_ENCRYPTED)
1019,zde->bitflags & ZIP_GPBF_ENCRYPTED
1020,zde->bitflags
1021,zde
1022,bitflags
1023,ZIP_GPBF_ENCRYPTED
1024,<empty>
1025,if (zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION)
1026,zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION
1027,zde->bitflags
1028,zde
1029,bitflags
1030,ZIP_GPBF_STRONG_ENCRYPTION
1031,<empty>
1032,zde->encryption_method = ZIP_EM_UNKNOWN
1033,zde->encryption_method
1034,zde
1035,encryption_method
1036,ZIP_EM_UNKNOWN
1037,else
1038,<empty>
1039,zde->encryption_method = ZIP_EM_TRAD_PKWARE
1040,zde->encryption_method
1041,zde
1042,encryption_method
1043,ZIP_EM_TRAD_PKWARE
1044,else
1045,<empty>
1046,zde->encryption_method = ZIP_EM_NONE
1047,zde->encryption_method
1048,zde
1049,encryption_method
1050,ZIP_EM_NONE
1051,zde->filename = NULL
1052,zde->filename
1053,zde
1054,filename
1055,NULL
1056,zde->extra_fields = NULL
1057,zde->extra_fields
1058,zde
1059,extra_fields
1060,NULL
1061,zde->comment = NULL
1062,zde->comment
1063,zde
1064,comment
1065,NULL
1066,variable_size = (zip_uint32_t)filename_len+(zip_uint32_t)ef_len+(zip_uint32_t)comment_len
1067,variable_size
1068,(zip_uint32_t)filename_len+(zip_uint32_t)ef_len+(zip_uint32_t)comment_len
1069,(zip_uint32_t)filename_len+(zip_uint32_t)ef_len
1070,(zip_uint32_t)filename_len
1071,zip_uint32_t
1072,filename_len
1073,(zip_uint32_t)ef_len
1074,zip_uint32_t
1075,ef_len
1076,(zip_uint32_t)comment_len
1077,zip_uint32_t
1078,comment_len
1079,if (from_buffer)
1080,from_buffer
1081,<empty>
1082,if (_zip_buffer_left(buffer) < variable_size)
1083,_zip_buffer_left(buffer) < variable_size
1084,_zip_buffer_left(buffer)
1085,buffer
1086,variable_size
1087,<empty>
1088,zip_error_set(error, ZIP_ER_INCONS, 0)
1089,error
1090,ZIP_ER_INCONS
1091,0
1092,return -1;
1093,-1
1094,1
1095,else
1096,<empty>
1097,_zip_buffer_free(buffer)
1098,buffer
1099,if ((buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL)
1100,(buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL
1101,buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)
1102,buffer
1103,_zip_buffer_new_from_source(src, variable_size, NULL, error)
1104,src
1105,variable_size
1106,NULL
1107,error
1108,NULL
1109,<empty>
1110,return -1;
1111,-1
1112,1
1113,if (filename_len)
1114,filename_len
1115,<empty>
1116,zde->filename = _zip_read_string(buffer, src, filename_len, 1, error)
1117,zde->filename
1118,zde
1119,filename
1120,_zip_read_string(buffer, src, filename_len, 1, error)
1121,buffer
1122,src
1123,filename_len
1124,1
1125,error
1126,if (!zde->filename)
1127,!zde->filename
1128,zde->filename
1129,zde
1130,filename
1131,<empty>
1132,if (zip_error_code_zip(error) == ZIP_ER_EOF)
1133,zip_error_code_zip(error) == ZIP_ER_EOF
1134,zip_error_code_zip(error)
1135,error
1136,ZIP_ER_EOF
1137,<empty>
1138,zip_error_set(error, ZIP_ER_INCONS, 0)
1139,error
1140,ZIP_ER_INCONS
1141,0
1142,if (!from_buffer)
1143,!from_buffer
1144,from_buffer
1145,<empty>
1146,_zip_buffer_free(buffer)
1147,buffer
1148,return -1;
1149,-1
1150,1
1151,if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8)
1152,zde->bitflags & ZIP_GPBF_ENCODING_UTF_8
1153,zde->bitflags
1154,zde
1155,bitflags
1156,ZIP_GPBF_ENCODING_UTF_8
1157,<empty>
1158,if (_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR)
1159,_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR
1160,_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN)
1161,zde->filename
1162,zde
1163,filename
1164,ZIP_ENCODING_UTF8_KNOWN
1165,ZIP_ENCODING_ERROR
1166,<empty>
1167,zip_error_set(error, ZIP_ER_INCONS, 0)
1168,error
1169,ZIP_ER_INCONS
1170,0
1171,if (!from_buffer)
1172,!from_buffer
1173,from_buffer
1174,<empty>
1175,_zip_buffer_free(buffer)
1176,buffer
1177,return -1;
1178,-1
1179,1
1180,if (ef_len)
1181,ef_len
1182,<empty>
1183,zip_uint8_t* ef
1184,*ef = _zip_read_data(buffer, src, ef_len, 0, error)
1185,ef
1186,_zip_read_data(buffer, src, ef_len, 0, error)
1187,buffer
1188,src
1189,ef_len
1190,0
1191,error
1192,if (ef == NULL)
1193,ef == NULL
1194,ef
1195,NULL
1196,<empty>
1197,if (!from_buffer)
1198,!from_buffer
1199,from_buffer
1200,<empty>
1201,_zip_buffer_free(buffer)
1202,buffer
1203,return -1;
1204,-1
1205,1
1206,if (!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error))
1207,!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)
1208,_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)
1209,ef
1210,ef_len
1211,local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL
1212,local
1213,ZIP_EF_LOCAL
1214,ZIP_EF_CENTRAL
1215,&zde->extra_fields
1216,zde->extra_fields
1217,zde
1218,extra_fields
1219,error
1220,<empty>
1221,free(ef)
1222,ef
1223,if (!from_buffer)
1224,!from_buffer
1225,from_buffer
1226,<empty>
1227,_zip_buffer_free(buffer)
1228,buffer
1229,return -1;
1230,-1
1231,1
1232,free(ef)
1233,ef
1234,if (local)
1235,local
1236,<empty>
1237,zde->local_extra_fields_read = 1
1238,zde->local_extra_fields_read
1239,zde
1240,local_extra_fields_read
1241,1
1242,if (comment_len)
1243,comment_len
1244,<empty>
1245,zde->comment = _zip_read_string(buffer, src, comment_len, 0, error)
1246,zde->comment
1247,zde
1248,comment
1249,_zip_read_string(buffer, src, comment_len, 0, error)
1250,buffer
1251,src
1252,comment_len
1253,0
1254,error
1255,if (!zde->comment)
1256,!zde->comment
1257,zde->comment
1258,zde
1259,comment
1260,<empty>
1261,if (!from_buffer)
1262,!from_buffer
1263,from_buffer
1264,<empty>
1265,_zip_buffer_free(buffer)
1266,buffer
1267,return -1;
1268,-1
1269,1
1270,if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8)
1271,zde->bitflags & ZIP_GPBF_ENCODING_UTF_8
1272,zde->bitflags
1273,zde
1274,bitflags
1275,ZIP_GPBF_ENCODING_UTF_8
1276,<empty>
1277,if (_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR)
1278,_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR
1279,_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN)
1280,zde->comment
1281,zde
1282,comment
1283,ZIP_ENCODING_UTF8_KNOWN
1284,ZIP_ENCODING_ERROR
1285,<empty>
1286,zip_error_set(error, ZIP_ER_INCONS, 0)
1287,error
1288,ZIP_ER_INCONS
1289,0
1290,if (!from_buffer)
1291,!from_buffer
1292,from_buffer
1293,<empty>
1294,_zip_buffer_free(buffer)
1295,buffer
1296,return -1;
1297,-1
1298,1
1299,zde->filename = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_NAME, zde->filename)
1300,zde->filename
1301,zde
1302,filename
1303,_zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_NAME, zde->filename)
1304,zde
1305,ZIP_EF_UTF_8_NAME
1306,zde->filename
1307,zde
1308,filename
1309,zde->comment = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_COMMENT, zde->comment)
1310,zde->comment
1311,zde
1312,comment
1313,_zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_COMMENT, zde->comment)
1314,zde
1315,ZIP_EF_UTF_8_COMMENT
1316,zde->comment
1317,zde
1318,comment
1319,if (zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX || zde->offset == ZIP_UINT32_MAX)
1320,zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX || zde->offset == ZIP_UINT32_MAX
1321,zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX
1322,zde->uncomp_size == ZIP_UINT32_MAX
1323,zde->uncomp_size
1324,zde
1325,uncomp_size
1326,ZIP_UINT32_MAX
1327,zde->comp_size == ZIP_UINT32_MAX
1328,zde->comp_size
1329,zde
1330,comp_size
1331,ZIP_UINT32_MAX
1332,zde->offset == ZIP_UINT32_MAX
1333,zde->offset
1334,zde
1335,offset
1336,ZIP_UINT32_MAX
1337,<empty>
1338,zip_uint16_t got_len
1339,zip_buffer_t* ef_buffer
1340,const zip_uint8_t* ef
1341,*ef = _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error)
1342,ef
1343,_zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error)
1344,zde->extra_fields
1345,zde
1346,extra_fields
1347,&got_len
1348,got_len
1349,ZIP_EF_ZIP64
1350,0
1351,local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL
1352,local
1353,ZIP_EF_LOCAL
1354,ZIP_EF_CENTRAL
1355,error
1356,if (ef == NULL)
1357,ef == NULL
1358,ef
1359,NULL
1360,<empty>
1361,if (!from_buffer)
1362,!from_buffer
1363,from_buffer
1364,<empty>
1365,_zip_buffer_free(buffer)
1366,buffer
1367,return -1;
1368,-1
1369,1
1370,if ((ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL)
1371,(ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL
1372,ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)
1373,ef_buffer
1374,_zip_buffer_new((zip_uint8_t *)ef, got_len)
1375,(zip_uint8_t *)ef
1376,zip_uint8_t *
1377,ef
1378,got_len
1379,NULL
1380,<empty>
1381,zip_error_set(error, ZIP_ER_MEMORY, 0)
1382,error
1383,ZIP_ER_MEMORY
1384,0
1385,if (!from_buffer)
1386,!from_buffer
1387,from_buffer
1388,<empty>
1389,_zip_buffer_free(buffer)
1390,buffer
1391,return -1;
1392,-1
1393,1
1394,if (zde->uncomp_size == ZIP_UINT32_MAX)
1395,zde->uncomp_size == ZIP_UINT32_MAX
1396,zde->uncomp_size
1397,zde
1398,uncomp_size
1399,ZIP_UINT32_MAX
1400,<empty>
1401,zde->uncomp_size = _zip_buffer_get_64(ef_buffer)
1402,zde->uncomp_size
1403,zde
1404,uncomp_size
1405,_zip_buffer_get_64(ef_buffer)
1406,ef_buffer
1407,else
1408,<empty>
1409,if (local)
1410,local
1411,<empty>
1412,(void)_zip_buffer_skip(ef_buffer, 8)
1413,void
1414,_zip_buffer_skip(ef_buffer, 8)
1415,ef_buffer
1416,8
1417,if (zde->comp_size == ZIP_UINT32_MAX)
1418,zde->comp_size == ZIP_UINT32_MAX
1419,zde->comp_size
1420,zde
1421,comp_size
1422,ZIP_UINT32_MAX
1423,<empty>
1424,zde->comp_size = _zip_buffer_get_64(ef_buffer)
1425,zde->comp_size
1426,zde
1427,comp_size
1428,_zip_buffer_get_64(ef_buffer)
1429,ef_buffer
1430,if (!local)
1431,!local
1432,local
1433,<empty>
1434,if (zde->offset == ZIP_UINT32_MAX)
1435,zde->offset == ZIP_UINT32_MAX
1436,zde->offset
1437,zde
1438,offset
1439,ZIP_UINT32_MAX
1440,<empty>
1441,zde->offset = _zip_buffer_get_64(ef_buffer)
1442,zde->offset
1443,zde
1444,offset
1445,_zip_buffer_get_64(ef_buffer)
1446,ef_buffer
1447,if (zde->disk_number == ZIP_UINT16_MAX)
1448,zde->disk_number == ZIP_UINT16_MAX
1449,zde->disk_number
1450,zde
1451,disk_number
1452,ZIP_UINT16_MAX
1453,<empty>
1454,zde->disk_number = _zip_buffer_get_32(buffer)
1455,zde->disk_number
1456,zde
1457,disk_number
1458,_zip_buffer_get_32(buffer)
1459,buffer
1460,if (!_zip_buffer_eof(ef_buffer))
1461,!_zip_buffer_eof(ef_buffer)
1462,_zip_buffer_eof(ef_buffer)
1463,ef_buffer
1464,<empty>
1465,zip_error_set(error, ZIP_ER_INCONS, 0)
1466,error
1467,ZIP_ER_INCONS
1468,0
1469,_zip_buffer_free(ef_buffer)
1470,ef_buffer
1471,if (!from_buffer)
1472,!from_buffer
1473,from_buffer
1474,<empty>
1475,_zip_buffer_free(buffer)
1476,buffer
1477,return -1;
1478,-1
1479,1
1480,_zip_buffer_free(ef_buffer)
1481,ef_buffer
1482,if (!_zip_buffer_ok(buffer))
1483,!_zip_buffer_ok(buffer)
1484,_zip_buffer_ok(buffer)
1485,buffer
1486,<empty>
1487,zip_error_set(error, ZIP_ER_INTERNAL, 0)
1488,error
1489,ZIP_ER_INTERNAL
1490,0
1491,if (!from_buffer)
1492,!from_buffer
1493,from_buffer
1494,<empty>
1495,_zip_buffer_free(buffer)
1496,buffer
1497,return -1;
1498,-1
1499,1
1500,if (!from_buffer)
1501,!from_buffer
1502,from_buffer
1503,<empty>
1504,_zip_buffer_free(buffer)
1505,buffer
1506,if (zde->offset > ZIP_INT64_MAX)
1507,zde->offset > ZIP_INT64_MAX
1508,zde->offset
1509,zde
1510,offset
1511,ZIP_INT64_MAX
1512,<empty>
1513,zip_error_set(error, ZIP_ER_SEEK, EFBIG)
1514,error
1515,ZIP_ER_SEEK
1516,EFBIG
1517,return -1;
1518,-1
1519,1
1520,if (!_zip_dirent_process_winzip_aes(zde, error))
1521,!_zip_dirent_process_winzip_aes(zde, error)
1522,_zip_dirent_process_winzip_aes(zde, error)
1523,zde
1524,error
1525,<empty>
1526,if (!from_buffer)
1527,!from_buffer
1528,from_buffer
1529,<empty>
1530,_zip_buffer_free(buffer)
1531,buffer
1532,return -1;
1533,-1
1534,1
1535,zde->extra_fields = _zip_ef_remove_internal(zde->extra_fields)
1536,zde->extra_fields
1537,zde
1538,extra_fields
1539,_zip_ef_remove_internal(zde->extra_fields)
1540,zde->extra_fields
1541,zde
1542,extra_fields
1543,return (zip_int64_t)(size + variable_size);
1544,(zip_int64_t)(size + variable_size)
1545,size + variable_size
1546,size
1547,variable_size
1548,RET
1549,zip_dirent_t *zde
1550,zip_source_t *src
1551,zip_buffer_t *buffer
1552,bool local
1553,zip_error_t *error
=====================================----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000b7000000000000000010000000000000ffffffffffffffffa07c456400000000ffffffffffffffff777c456400000000ffffffffffffffff777c456400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000504b050600000000000000002e000000000000000000
arg00:0x2d76ff
=========trace=========
zip_int64_t _zip_dirent_read(zip_dirent_t *zde, zip_source_t *src, zip_buffer_t *buffer, bool local, zip_error_t *error) {
zip_uint8_t buf[CDENTRYSIZE];
zip_uint16_t dostime, dosdate;
zip_uint32_t size, variable_size;
zip_uint16_t filename_len, comment_len, ef_len;
bool from_buffer = (buffer != NULL);
size = local ? LENTRYSIZE : CDENTRYSIZE;
if(buffer)
if(memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4) != 0)
zip_error_set(error, ZIP_ER_NOZIP, 0);
return -1;
=======================
