-----label-----
0
-----code-----
int jpc_getmagctxno(int f)
{
	int n;

	if (!(f & JPC_REFINE)) {
		n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;
	} else {
		n = 2;
	}

	assert(n < JPC_NUMMAGCTXS);
	return JPC_MAGCTXNO + n;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
10,11
11,12
11,13
13,14
15,16
15,17
15,18
16,17
17,18
18,19
18,20
19,20
21,22
23,24
24,25
25,26
25,27
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
34,35
38,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
-----nextToken-----
2,4,6,8,12,14,20,22,27,32,35,36,37,42,43,47,50,52,56,58
-----computeFrom-----
18,19
18,20
25,26
25,27
30,31
30,32
40,41
40,42
48,49
48,50
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
int jpc_getmagctxno(int f){	int n;	if (!(f & JPC_REFINE)) {		n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;	} else {		n = 2;	}	assert(n < JPC_NUMMAGCTXS);	return JPC_MAGCTXNO + n;}
int
jpc_getmagctxno(int f)
jpc_getmagctxno
int f
int
f
f
{	int n;	if (!(f & JPC_REFINE)) {		n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;	} else {		n = 2;	}	assert(n < JPC_NUMMAGCTXS);	return JPC_MAGCTXNO + n;}
int n;
int n;
int
n
n
if (!(f & JPC_REFINE)) {		n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;	} else {		n = 2;	}
!(f & JPC_REFINE)
(f & JPC_REFINE)
f & JPC_REFINE
f
f
JPC_REFINE
JPC_REFINE
{		n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;	}
n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;
n = (f & (JPC_OTHSIGMSK)) ? 1 : 0
n
n
(f & (JPC_OTHSIGMSK)) ? 1 : 0
(f & (JPC_OTHSIGMSK))
f & (JPC_OTHSIGMSK)
f
f
(JPC_OTHSIGMSK)
JPC_OTHSIGMSK
JPC_OTHSIGMSK
1
0
{		n = 2;	}
n = 2;
n = 2
n
n
2
assert(n < JPC_NUMMAGCTXS);
assert(n < JPC_NUMMAGCTXS)
assert
assert
n < JPC_NUMMAGCTXS
n
n
JPC_NUMMAGCTXS
JPC_NUMMAGCTXS
return JPC_MAGCTXNO + n;
JPC_MAGCTXNO + n
JPC_MAGCTXNO
JPC_MAGCTXNO
n
n
-----joern-----
(149,151,0)
(199,220,0)
(79,210,0)
(62,65,0)
(85,31,0)
(151,147,0)
(147,151,0)
(175,23,0)
(135,215,0)
(111,220,0)
(15,79,0)
(166,101,0)
(150,154,0)
(38,18,0)
(56,218,0)
(178,112,0)
(54,141,0)
(187,179,0)
(224,162,0)
(70,130,0)
(28,151,0)
(110,224,0)
(103,136,0)
(19,1,0)
(94,111,0)
(29,161,0)
(175,107,0)
(55,29,0)
(96,134,0)
(18,38,0)
(213,51,0)
(190,189,0)
(185,181,0)
(196,129,0)
(235,134,0)
(31,85,0)
(17,72,0)
(113,115,0)
(197,115,0)
(114,16,0)
(216,0,0)
(49,201,0)
(140,161,0)
(205,162,0)
(61,136,0)
(42,130,0)
(164,0,0)
(161,29,0)
(66,175,0)
(157,164,0)
(94,184,0)
(10,168,0)
(47,130,0)
(71,132,0)
(8,210,0)
(130,42,0)
(209,187,0)
(16,222,0)
(207,154,0)
(3,58,0)
(229,202,0)
(20,101,0)
(159,36,0)
(43,0,0)
(117,28,0)
(154,66,0)
(130,47,0)
(1,101,0)
(92,51,0)
(222,16,0)
(61,189,0)
(137,187,0)
(27,194,0)
(172,131,0)
(131,74,0)
(118,25,0)
(188,117,0)
(171,235,0)
(2,19,0)
(115,74,0)
(193,25,0)
(163,33,0)
(34,51,0)
(167,11,0)
(21,209,0)
(203,215,0)
(107,175,0)
(23,175,0)
(5,128,0)
(123,107,0)
(83,126,0)
(35,109,0)
(138,70,0)
(86,147,0)
(53,99,0)
(130,70,0)
(58,210,0)
(112,0,0)
(134,210,0)
(237,62,0)
(185,134,0)
(177,36,0)
(131,81,0)
(37,11,0)
(145,165,0)
(70,59,0)
(161,140,0)
(16,214,0)
(50,37,0)
(201,101,0)
(155,42,0)
(146,112,0)
(33,134,0)
(195,181,0)
(124,126,0)
(206,126,0)
(41,80,0)
(227,136,0)
(168,101,0)
(47,58,0)
(149,165,0)
(179,187,0)
(144,61,0)
(215,120,0)
(62,0,0)
(66,154,0)
(82,212,0)
(32,106,0)
(122,235,0)
(9,22,0)
(1,19,0)
(231,162,0)
(99,220,0)
(119,179,0)
(167,97,0)
(222,74,0)
(121,185,0)
(192,132,0)
(184,94,0)
(187,137,0)
(58,221,0)
(174,56,0)
(11,37,0)
(44,17,0)
(18,210,0)
(52,159,0)
(38,85,0)
(91,227,0)
(100,50,0)
(149,56,0)
(40,149,0)
(125,214,0)
(108,166,0)
(200,1,0)
(181,210,0)
(52,78,0)
(228,137,0)
(97,167,0)
(204,47,0)
(129,212,0)
(175,66,0)
(2,48,0)
(30,220,0)
(36,159,0)
(209,87,0)
(23,181,0)
(153,198,0)
(134,111,0)
(60,166,0)
(46,222,0)
(147,58,0)
(12,51,0)
(158,74,0)
(135,81,0)
(81,214,0)
(19,2,0)
(59,167,0)
(37,210,0)
(88,31,0)
(24,101,0)
(68,199,0)
(111,134,0)
(223,43,0)
(159,72,0)
(127,129,0)
(238,136,0)
(45,131,0)
(234,99,0)
(221,134,0)
(66,80,0)
(78,210,0)
(109,214,0)
(154,150,0)
(156,149,0)
(211,0,0)
(61,144,0)
(187,209,0)
(64,144,0)
(26,51,0)
(104,224,0)
(57,164,0)
(14,50,0)
(189,162,0)
(95,148,0)
(198,220,0)
(28,117,0)
(151,149,0)
(182,107,0)
(176,199,0)
(81,135,0)
(106,74,0)
(111,94,0)
(232,162,0)
(93,23,0)
(140,8,0)
(87,85,0)
(56,33,0)
(28,17,0)
(76,79,0)
(191,47,0)
(173,222,0)
(25,220,0)
(167,59,0)
(142,212,0)
(165,235,0)
(80,66,0)
(54,65,0)
(181,185,0)
(78,52,0)
(139,33,0)
(81,131,0)
(79,134,0)
(183,109,0)
(4,97,0)
(6,214,0)
(180,51,0)
(206,13,0)
(85,87,0)
(50,220,0)
(203,16,0)
(11,167,0)
(127,220,0)
(137,79,0)
(202,198,0)
(133,184,0)
(201,2,0)
(217,61,0)
(132,136,0)
(160,189,0)
(194,214,0)
(87,209,0)
(233,137,0)
(212,129,0)
(75,203,0)
(152,23,0)
(107,79,0)
(126,162,0)
(235,165,0)
(144,206,0)
(72,17,0)
(170,51,0)
(63,210,0)
(84,74,0)
(148,220,0)
(219,1,0)
(85,38,0)
(164,54,0)
(102,51,0)
(25,18,0)
(221,58,0)
(159,52,0)
(99,78,0)
(39,147,0)
(198,202,0)
(33,56,0)
(65,62,0)
(150,161,0)
(169,51,0)
(116,202,0)
(225,221,0)
(73,51,0)
(215,135,0)
(59,70,0)
(129,127,0)
(89,62,0)
(151,28,0)
(7,51,0)
(161,150,0)
(69,51,0)
(17,28,0)
(126,136,0)
(165,186,0)
(143,220,0)
(236,81,0)
(208,127,0)
(199,8,0)
(189,61,0)
(230,111,0)
(98,131,0)
(72,159,0)
(90,221,0)
(8,140,0)
(65,54,0)
(105,201,0)
(16,203,0)
(226,185,0)
(126,206,0)
(77,205,0)
(222,74,1)
(53,56,1)
(70,138,1)
(162,231,1)
(219,201,1)
(57,157,1)
(225,90,1)
(132,71,1)
(70,130,1)
(139,163,1)
(32,109,1)
(132,136,1)
(204,191,1)
(159,72,1)
(79,76,1)
(149,56,1)
(29,55,1)
(78,52,1)
(47,58,1)
(193,118,1)
(140,161,1)
(145,127,1)
(233,25,1)
(99,220,1)
(112,0,1)
(151,147,1)
(200,219,1)
(182,123,1)
(1,101,1)
(155,47,1)
(56,33,1)
(199,220,1)
(89,164,1)
(238,224,1)
(42,155,1)
(16,214,1)
(166,101,1)
(202,116,1)
(113,197,1)
(231,232,1)
(68,181,1)
(95,37,1)
(98,172,1)
(224,104,1)
(74,84,1)
(52,159,1)
(183,214,1)
(126,124,1)
(72,17,1)
(126,136,1)
(161,29,1)
(195,79,1)
(236,131,1)
(112,146,1)
(47,204,1)
(199,176,1)
(116,229,1)
(45,172,1)
(197,106,1)
(15,134,1)
(168,101,1)
(222,46,1)
(43,223,1)
(189,162,1)
(173,75,1)
(66,175,1)
(55,150,1)
(37,11,1)
(110,162,1)
(206,126,1)
(50,14,1)
(134,111,1)
(221,134,1)
(187,137,1)
(212,82,1)
(111,220,1)
(107,182,1)
(227,136,1)
(43,0,1)
(54,65,1)
(211,216,1)
(205,77,1)
(10,2,1)
(18,38,1)
(16,222,1)
(90,3,1)
(131,74,1)
(80,41,1)
(28,151,1)
(77,132,1)
(230,96,1)
(107,79,1)
(175,23,1)
(226,121,1)
(157,112,1)
(207,66,1)
(227,91,1)
(220,143,1)
(46,173,1)
(4,59,1)
(118,8,1)
(184,133,1)
(91,206,1)
(163,174,1)
(61,136,1)
(21,187,1)
(166,60,1)
(215,135,1)
(131,98,1)
(147,86,1)
(17,28,1)
(104,110,1)
(121,195,1)
(122,171,1)
(214,6,1)
(108,168,1)
(36,177,1)
(106,74,1)
(232,170,1)
(223,54,1)
(109,214,1)
(31,88,1)
(136,103,1)
(146,178,1)
(81,131,1)
(83,144,1)
(235,134,1)
(3,18,1)
(59,70,1)
(183,194,1)
(152,107,1)
(217,189,1)
(61,217,1)
(119,137,1)
(71,192,1)
(65,62,1)
(229,153,1)
(25,220,1)
(228,233,1)
(35,183,1)
(129,212,1)
(147,58,1)
(25,193,1)
(86,39,1)
(154,66,1)
(109,35,1)
(117,188,1)
(87,209,1)
(114,222,1)
(149,40,1)
(187,179,1)
(192,227,1)
(64,132,1)
(125,115,1)
(194,27,1)
(131,45,1)
(123,199,1)
(20,24,1)
(24,112,1)
(203,16,1)
(148,95,1)
(158,166,1)
(28,117,1)
(30,115,1)
(175,107,1)
(150,154,1)
(192,136,1)
(127,220,1)
(198,220,1)
(84,158,1)
(94,184,1)
(62,0,1)
(188,151,1)
(194,214,1)
(50,220,1)
(178,0,1)
(108,101,1)
(110,205,1)
(81,214,1)
(208,58,1)
(17,44,1)
(14,100,1)
(133,230,1)
(165,235,1)
(164,0,1)
(2,19,1)
(101,20,1)
(85,87,1)
(154,207,1)
(126,162,1)
(148,220,1)
(160,190,1)
(196,208,1)
(197,74,1)
(6,125,1)
(105,166,1)
(137,79,1)
(167,97,1)
(181,185,1)
(106,32,1)
(33,139,1)
(124,83,1)
(137,228,1)
(81,236,1)
(100,78,1)
(60,108,1)
(79,134,1)
(82,142,1)
(168,10,1)
(33,134,1)
(67,198,1)
(23,181,1)
(58,221,1)
(156,147,1)
(176,68,1)
(62,237,1)
(41,175,1)
(191,50,1)
(75,109,1)
(144,61,1)
(23,93,1)
(235,122,1)
(198,202,1)
(53,165,1)
(221,225,1)
(11,167,1)
(111,94,1)
(61,189,1)
(159,36,1)
(66,80,1)
(115,74,1)
(143,30,1)
(93,152,1)
(172,203,1)
(189,160,1)
(153,148,1)
(49,105,1)
(99,234,1)
(27,215,1)
(185,226,1)
(237,89,1)
(167,59,1)
(149,165,1)
(0,211,1)
(44,28,1)
(171,145,1)
(130,42,1)
(135,81,1)
(142,196,1)
(153,220,1)
(38,85,1)
(174,127,1)
(179,119,1)
(16,114,1)
(39,99,1)
(88,87,1)
(164,57,1)
(205,162,1)
(8,140,1)
(185,134,1)
(178,43,1)
(151,149,1)
(216,224,1)
(161,150,1)
(201,101,1)
(177,72,1)
(76,15,1)
(96,198,1)
(130,47,1)
(190,64,1)
(19,1,1)
(97,4,1)
(40,156,1)
(115,113,1)
(201,49,1)
(138,130,1)
(127,129,1)
(209,187,1)
(85,31,1)
(234,53,1)
(1,200,1)
(209,21,1)
(103,238,1)
(224,162,1)
(87,198,2)
(119,198,2)
(95,198,2)
(39,198,2)
(150,154,2)
(166,166,2)
(62,112,2)
(165,127,2)
(132,224,2)
(126,162,2)
(235,134,2)
(201,101,2)
(45,172,2)
(176,198,2)
(151,198,2)
(115,74,2)
(82,198,2)
(81,214,2)
(65,112,2)
(14,198,2)
(137,198,2)
(228,198,2)
(195,198,2)
(146,112,2)
(166,101,2)
(140,161,2)
(89,112,2)
(164,112,2)
(33,134,2)
(221,134,2)
(133,198,2)
(66,80,2)
(106,74,2)
(148,220,2)
(32,115,2)
(153,198,2)
(107,79,2)
(205,224,2)
(19,166,2)
(127,198,2)
(111,198,2)
(114,109,2)
(183,109,2)
(206,132,2)
(81,131,2)
(234,198,2)
(212,198,2)
(187,137,2)
(78,52,2)
(71,224,2)
(68,198,2)
(70,130,2)
(148,198,2)
(155,198,2)
(28,198,2)
(221,198,2)
(47,198,2)
(11,167,2)
(225,198,2)
(236,109,2)
(113,115,2)
(126,136,2)
(132,132,2)
(49,166,2)
(11,198,2)
(144,61,2)
(201,166,2)
(91,132,2)
(66,175,2)
(199,220,2)
(193,198,2)
(96,198,2)
(53,198,2)
(77,224,2)
(109,214,2)
(115,115,2)
(60,166,2)
(50,220,2)
(18,38,2)
(179,198,2)
(19,1,2)
(130,42,2)
(167,59,2)
(123,198,2)
(125,115,2)
(147,198,2)
(175,198,2)
(31,198,2)
(97,198,2)
(52,159,2)
(17,28,2)
(130,198,2)
(233,198,2)
(198,220,2)
(151,147,2)
(131,109,2)
(149,56,2)
(149,165,2)
(21,198,2)
(173,109,2)
(175,23,2)
(38,198,2)
(131,74,2)
(80,198,2)
(41,198,2)
(175,107,2)
(99,198,2)
(71,132,2)
(28,117,2)
(8,198,2)
(163,127,2)
(2,19,2)
(204,198,2)
(199,198,2)
(55,198,2)
(189,162,2)
(3,198,2)
(137,79,2)
(85,198,2)
(227,132,2)
(57,112,2)
(226,198,2)
(17,198,2)
(127,220,2)
(184,198,2)
(100,198,2)
(188,198,2)
(85,87,2)
(86,198,2)
(27,109,2)
(190,132,2)
(56,127,2)
(205,162,2)
(116,198,2)
(209,187,2)
(47,58,2)
(111,220,2)
(105,166,2)
(38,85,2)
(132,136,2)
(165,235,2)
(159,72,2)
(78,198,2)
(152,198,2)
(154,66,2)
(185,134,2)
(33,127,2)
(108,166,2)
(88,198,2)
(35,109,2)
(135,81,2)
(160,132,2)
(156,198,2)
(106,115,2)
(194,109,2)
(79,198,2)
(189,132,2)
(147,58,2)
(177,198,2)
(134,198,2)
(44,198,2)
(196,198,2)
(237,112,2)
(107,198,2)
(94,184,2)
(6,115,2)
(103,224,2)
(58,221,2)
(168,166,2)
(215,135,2)
(40,198,2)
(29,198,2)
(224,162,2)
(90,198,2)
(81,109,2)
(66,198,2)
(178,112,2)
(59,70,2)
(129,212,2)
(223,112,2)
(144,132,2)
(109,109,2)
(187,198,2)
(52,198,2)
(214,115,2)
(209,198,2)
(54,112,2)
(161,198,2)
(126,132,2)
(167,97,2)
(208,198,2)
(202,198,2)
(93,198,2)
(16,214,2)
(206,126,2)
(192,132,2)
(235,127,2)
(134,111,2)
(70,198,2)
(200,166,2)
(85,31,2)
(185,198,2)
(130,47,2)
(140,198,2)
(87,209,2)
(28,151,2)
(43,112,2)
(122,127,2)
(61,136,2)
(75,109,2)
(171,127,2)
(54,65,2)
(50,198,2)
(219,166,2)
(183,115,2)
(79,134,2)
(16,109,2)
(121,198,2)
(15,198,2)
(182,198,2)
(117,198,2)
(59,198,2)
(157,112,2)
(25,220,2)
(207,198,2)
(76,198,2)
(194,214,2)
(118,198,2)
(16,222,2)
(110,224,2)
(42,198,2)
(124,132,2)
(65,62,2)
(230,198,2)
(109,115,2)
(72,198,2)
(174,127,2)
(159,198,2)
(198,202,2)
(203,16,2)
(136,224,2)
(222,74,2)
(98,172,2)
(18,198,2)
(151,149,2)
(23,181,2)
(111,94,2)
(159,36,2)
(72,17,2)
(187,179,2)
(217,132,2)
(35,115,2)
(43,0,2)
(145,127,2)
(10,166,2)
(164,0,2)
(142,198,2)
(154,198,2)
(46,109,2)
(191,198,2)
(161,29,2)
(58,198,2)
(192,224,2)
(238,224,2)
(168,101,2)
(161,150,2)
(227,136,2)
(224,224,2)
(23,198,2)
(83,132,2)
(2,166,2)
(198,198,2)
(127,129,2)
(61,132,2)
(94,198,2)
(99,220,2)
(150,198,2)
(129,198,2)
(56,33,2)
(197,115,2)
(61,189,2)
(36,198,2)
(138,198,2)
(139,127,2)
(62,0,2)
(222,109,2)
(64,132,2)
(104,224,2)
(203,109,2)
(149,198,2)
(135,109,2)
(8,140,2)
(229,198,2)
(1,101,2)
(172,109,2)
(215,109,2)
(167,198,2)
(112,112,2)
(25,198,2)
(4,198,2)
(181,198,2)
(181,185,2)
(37,198,2)
(112,0,2)
(37,11,2)
(1,166,2)
-----------------------------------
(0,i = 0)
(1,i << 4)
(2,jpc_scctxnolut[i] = jpc_getscctxno(i << 4)
(3,u)
(4,JPC_NMSEDEC_FRACBITS)
(5,for (i = 0; i < 256; ++i)
(6,0)
(7,for (orient = 0; orient < 4; ++orient)
(8,jpc_signmsedec[i] = jpc_dbltofix(floor((u * u - v * v)
(9,for (i = 0; i < 2048; ++i)
(10,i)
(11,jpc_dbltofix(floor((u * u)
(12,orient)
(13,)
(14,i)
(15,u)
(16,(refine << 11)
(17,(u * u - v * v)
(18,jpc_signmsedec0[i] = jpc_dbltofix(floor((u * u)
(19,jpc_getscctxno(i << 4)
(20,0)
(21,0.5)
(22,)
(23,v * v)
(24,i)
(25,jpc_signmsedec0[i])
(26,t)
(27,i)
(28,(u * u - v * v)
(29,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(30,i)
(31,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(32,refine)
(33,t - 1.5)
(34,refine)
(35,2048)
(36,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(37,jpc_refnmsedec0[i] = jpc_dbltofix(floor((u * u)
(38,jpc_dbltofix(floor((u * u)
(39,u)
(40,v)
(41,JPC_NMSEDEC_FRACBITS)
(42,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(43,++i)
(44,0.5)
(45,JPC_REFINE)
(46,11)
(47,u * u)
(48,)
(49,i)
(50,jpc_refnmsedec0[i])
(51,)
(52,jpc_dbltofix(floor((u * u - v * v)
(53,jpc_refnmsedec)
(54,jpc_spblut[i] = jpc_getspb(i << 4)
(55,JPC_NMSEDEC_FRACBITS)
(56,v = t - 1.5)
(57,i)
(58,u = t - 1.0)
(59,floor((u * u)
(60,256)
(61,(orient << 8)
(62,i << 4)
(63,if (i & (1 << (JPC_NMSEDEC_BITS - 1)
(64,jpc_zcctxnolut)
(65,jpc_getspb(i << 4)
(66,(u * u - v * v)
(67,RET)
(68,jpc_signmsedec)
(69,v)
(70,(u * u)
(71,256)
(72,floor((u * u - v * v)
(73,u)
(74,refine = 0)
(75,jpc_magctxnolut)
(76,t)
(77,orient)
(78,jpc_refnmsedec[i] = jpc_dbltofix(floor((u * u - v * v)
(79,u = t)
(80,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(81,(refine ? JPC_REFINE : 0)
(82,1)
(83,i)
(84,0)
(85,floor((u * u)
(86,u)
(87,floor((u * u)
(88,JPC_NMSEDEC_FRACBITS)
(89,i)
(90,t)
(91,i)
(92,for (refine = 0; refine < 2; ++refine)
(93,v)
(94,jpc_pow2i(-JPC_NMSEDEC_FRACBITS)
(95,i)
(96,t)
(97,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(98,0)
(99,jpc_refnmsedec[i])
(100,jpc_refnmsedec0)
(101,i = 0)
(102,i)
(103,0)
(104,4)
(105,jpc_scctxnolut)
(106,++refine)
(107,u * u)
(108,i)
(109,i < 2048)
(110,orient)
(111,i * jpc_pow2i(-JPC_NMSEDEC_FRACBITS)
(112,i < 256)
(113,2)
(114,i)
(115,refine < 2)
(116,JPC_NMSEDEC_BITS)
(117,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(118,jpc_signmsedec0)
(119,JPC_NMSEDEC_FRACBITS)
(120,)
(121,t)
(122,0.5)
(123,u)
(124,orient)
(125,i)
(126,jpc_getzcctxno(i, orient)
(127,i & (1 << (JPC_NMSEDEC_BITS - 1)
(128,)
(129,1 << (JPC_NMSEDEC_BITS - 1)
(130,(u * u)
(131,refine ? JPC_REFINE : 0)
(132,i < 256)
(133,JPC_NMSEDEC_FRACBITS)
(134,t = i * jpc_pow2i(-JPC_NMSEDEC_FRACBITS)
(135,jpc_getmagctxno((refine ? JPC_REFINE : 0)
(136,i = 0)
(137,u * u)
(138,0.5)
(139,1.5)
(140,jpc_dbltofix(floor((u * u - v * v)
(141,)
(142,JPC_NMSEDEC_BITS)
(143,0)
(144,jpc_zcctxnolut[(orient << 8)
(145,v)
(146,256)
(147,u * u)
(148,++i)
(149,v * v)
(150,floor((u * u - v * v)
(151,u * u - v * v)
(152,v)
(153,i)
(154,(u * u - v * v)
(155,JPC_NMSEDEC_FRACBITS)
(156,v)
(157,jpc_spblut)
(158,refine)
(159,floor((u * u - v * v)
(160,8)
(161,floor((u * u - v * v)
(162,orient = 0)
(163,t)
(164,jpc_spblut[i])
(165,v = t - 0.5)
(166,i < 256)
(167,floor((u * u)
(168,++i)
(169,for (i = 0; i < 256; ++i)
(170,jpc_initmqctxs()
(171,t)
(172,refine)
(173,refine)
(174,v)
(175,u * u - v * v)
(176,i)
(177,JPC_NMSEDEC_FRACBITS)
(178,i)
(179,jpc_pow2i(JPC_NMSEDEC_FRACBITS)
(180,for (i = 0; i < 256; ++i)
(181,v = t - 1.5)
(182,u)
(183,i)
(184,-JPC_NMSEDEC_FRACBITS)
(185,t - 1.5)
(186,)
(187,(u * u)
(188,JPC_NMSEDEC_FRACBITS)
(189,orient << 8)
(190,orient)
(191,u)
(192,i)
(193,i)
(194,++i)
(195,v)
(196,1)
(197,refine)
(198,i < (1 << JPC_NMSEDEC_BITS)
(199,jpc_signmsedec[i])
(200,4)
(201,jpc_scctxnolut[i])
(202,1 << JPC_NMSEDEC_BITS)
(203,jpc_magctxnolut[(refine << 11)
(204,u)
(205,++orient)
(206,jpc_zcctxnolut[(orient << 8)
(207,0.5)
(208,i)
(209,(u * u)
(210,)
(211,0)
(212,JPC_NMSEDEC_BITS - 1)
(213,for (i = 0; i < (1 << JPC_NMSEDEC_BITS)
(214,i = 0)
(215,jpc_magctxnolut[(refine << 11)
(216,i)
(217,i)
(218,)
(219,i)
(220,i = 0)
(221,t - 1.0)
(222,refine << 11)
(223,i)
(224,orient < 4)
(225,1.0)
(226,1.5)
(227,++i)
(228,u)
(229,1)
(230,i)
(231,0)
(232,orient)
(233,u)
(234,i)
(235,t - 0.5)
(236,i)
(237,4)
(238,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000080000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff9cf9a66300000000ffffffffffffffff32faa66300000000ffffffffffffffff32faa66300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff6000040000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
int jpc_getmagctxno(int f) {
int n;
n = 2;
assert(n < JPC_NUMMAGCTXS);
return JPC_MAGCTXNO + n;
=======================
