-----label-----
0
-----code-----
static int mem_write(jas_stream_obj_t *obj, char *buf, int cnt)
{
	int n;
	int ret;
	jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;
	long newbufsize;
	long newpos;

	newpos = m->pos_ + cnt;
	if (newpos > m->bufsize_ && m->growable_) {
		newbufsize = m->bufsize_;
		while (newbufsize < newpos) {
			newbufsize <<= 1;
			assert(newbufsize >= 0);
		}
		if (mem_resize(m, newbufsize)) {
			return -1;
		}
	}
	if (m->pos_ > m->len_) {
		/* The current position is beyond the end of the file, so
		  pad the file to the current position with zeros. */
		n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;
		if (n > 0) {
			memset(&m->buf_[m->len_], 0, n);
			m->len_ += n;
		}
		if (m->pos_ != m->len_) {
			/* The buffer is not big enough. */
			return 0;
		}
	}
	n = m->bufsize_ - m->pos_;
	ret = JAS_MIN(n, cnt);
	if (ret > 0) {
		memcpy(&m->buf_[m->pos_], buf, ret);
		m->pos_ += ret;
	}
	if (m->pos_ > m->len_) {
		m->len_ = m->pos_;
	}
assert(ret == cnt);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
20,30
20,31
20,32
20,33
20,34
21,22
22,23
22,24
24,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
35,38
38,39
39,40
39,41
40,41
40,42
41,42
43,44
45,46
47,48
48,49
48,50
50,51
52,53
53,54
53,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
63,64
66,67
68,69
68,70
69,70
69,71
70,71
70,72
71,72
73,74
73,75
74,75
77,78
77,79
78,79
81,82
81,83
81,84
82,83
83,84
83,85
84,85
86,87
86,88
87,88
90,91
90,92
91,92
91,93
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
106,107
106,108
107,108
110,111
110,112
111,112
111,113
111,114
112,113
114,115
116,117
118,119
119,120
120,121
122,123
122,124
123,124
123,125
124,125
124,126
125,126
128,129
128,130
129,130
132,133
132,134
132,135
133,134
134,135
134,136
135,136
137,138
137,139
138,139
138,140
138,141
139,140
141,142
141,143
142,143
145,146
145,147
146,147
149,150
149,151
150,151
153,154
153,155
154,155
154,156
155,156
158,159
158,160
159,160
160,161
160,162
160,163
160,164
161,162
163,164
164,165
164,166
165,166
165,167
166,167
169,170
169,171
170,171
174,175
176,177
177,178
177,179
178,179
178,180
179,180
182,183
184,185
184,186
185,186
185,187
186,187
186,188
187,188
190,191
190,192
191,192
194,195
195,196
197,198
198,199
198,200
199,200
201,202
201,203
202,203
202,204
203,204
206,207
206,208
207,208
210,211
211,212
211,213
212,213
214,215
214,216
214,217
215,216
217,218
219,220
221,222
221,223
222,223
222,224
223,224
226,227
226,228
227,228
228,229
228,230
228,231
228,232
229,230
231,232
232,233
232,234
233,234
233,235
234,235
237,238
237,239
238,239
241,242
243,244
245,246
246,247
246,248
247,248
247,249
248,249
251,252
253,254
253,255
254,255
254,256
255,256
255,257
256,257
259,260
259,261
260,261
263,264
264,265
265,266
265,267
266,267
266,268
267,268
270,271
270,272
271,272
274,275
275,276
275,277
276,277
278,279
278,280
279,280
281,282
283,284
284,285
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,23,25,28,30,34,36,37,42,44,46,49,51,54,56,60,64,65,67,72,75,76,79,80,85,88,89,93,95,100,101,105,108,109,113,115,117,121,126,127,130,131,136,140,143,144,147,148,151,152,156,157,162,167,168,171,172,173,175,180,181,183,188,189,192,193,196,200,204,205,208,209,213,216,218,220,224,225,230,235,236,239,240,242,244,249,250,252,257,258,261,262,268,269,272,273,277,280,282,285
-----computeFrom-----
58,59
58,60
61,62
61,63
69,70
69,71
70,71
70,72
83,84
83,85
91,92
91,93
98,99
98,100
106,107
106,108
123,124
123,125
134,135
134,136
137,138
137,139
154,155
154,156
177,178
177,179
185,186
185,187
198,199
198,200
201,202
201,203
211,212
211,213
222,223
222,224
246,247
246,248
254,255
254,256
265,266
265,267
278,279
278,280
-----guardedBy-----
72,95
76,89
79,115
131,193
130,192
127,189
156,183
224,252
262,269
261,272
258,273
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int mem_write(jas_stream_obj_t *obj, char *buf, int cnt){	int n;	int ret;	jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;	long newbufsize;	long newpos;	newpos = m->pos_ + cnt;	if (newpos > m->bufsize_ && m->growable_) {		newbufsize = m->bufsize_;		while (newbufsize < newpos) {			newbufsize <<= 1;			assert(newbufsize >= 0);		}		if (mem_resize(m, newbufsize)) {			return -1;		}	}	if (m->pos_ > m->len_) {		/* The current position is beyond the end of the file, so		  pad the file to the current position with zeros. */		n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;		if (n > 0) {			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}		if (m->pos_ != m->len_) {			/* The buffer is not big enough. */			return 0;		}	}	n = m->bufsize_ - m->pos_;	ret = JAS_MIN(n, cnt);	if (ret > 0) {		memcpy(&m->buf_[m->pos_], buf, ret);		m->pos_ += ret;	}	if (m->pos_ > m->len_) {		m->len_ = m->pos_;	}assert(ret == cnt);	return ret;}
static int
mem_write(jas_stream_obj_t *obj, char *buf, int cnt)
mem_write
jas_stream_obj_t *obj
jas_stream_obj_t
jas_stream_obj_t
*obj
*
obj
char *buf
char
*buf
*
buf
int cnt
int
cnt
cnt
{	int n;	int ret;	jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;	long newbufsize;	long newpos;	newpos = m->pos_ + cnt;	if (newpos > m->bufsize_ && m->growable_) {		newbufsize = m->bufsize_;		while (newbufsize < newpos) {			newbufsize <<= 1;			assert(newbufsize >= 0);		}		if (mem_resize(m, newbufsize)) {			return -1;		}	}	if (m->pos_ > m->len_) {		/* The current position is beyond the end of the file, so		  pad the file to the current position with zeros. */		n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;		if (n > 0) {			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}		if (m->pos_ != m->len_) {			/* The buffer is not big enough. */			return 0;		}	}	n = m->bufsize_ - m->pos_;	ret = JAS_MIN(n, cnt);	if (ret > 0) {		memcpy(&m->buf_[m->pos_], buf, ret);		m->pos_ += ret;	}	if (m->pos_ > m->len_) {		m->len_ = m->pos_;	}assert(ret == cnt);	return ret;}
int n;
int n;
int
n
n
int ret;
int ret;
int
ret
ret
jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;
jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;
jas_stream_memobj_t
jas_stream_memobj_t
*m = (jas_stream_memobj_t *)obj
*
m
= (jas_stream_memobj_t *)obj
(jas_stream_memobj_t *)obj
jas_stream_memobj_t *
jas_stream_memobj_t
jas_stream_memobj_t
*
*
obj
obj
long newbufsize;
long newbufsize;
long
newbufsize
newbufsize
long newpos;
long newpos;
long
newpos
newpos
newpos = m->pos_ + cnt;
newpos = m->pos_ + cnt
newpos
newpos
m->pos_ + cnt
m->pos_
m
m
pos_
cnt
cnt
if (newpos > m->bufsize_ && m->growable_) {		newbufsize = m->bufsize_;		while (newbufsize < newpos) {			newbufsize <<= 1;			assert(newbufsize >= 0);		}		if (mem_resize(m, newbufsize)) {			return -1;		}	}
newpos > m->bufsize_ && m->growable_
newpos > m->bufsize_
newpos
newpos
m->bufsize_
m
m
bufsize_
m->growable_
m
m
growable_
{		newbufsize = m->bufsize_;		while (newbufsize < newpos) {			newbufsize <<= 1;			assert(newbufsize >= 0);		}		if (mem_resize(m, newbufsize)) {			return -1;		}	}
newbufsize = m->bufsize_;
newbufsize = m->bufsize_
newbufsize
newbufsize
m->bufsize_
m
m
bufsize_
while (newbufsize < newpos) {			newbufsize <<= 1;			assert(newbufsize >= 0);		}
newbufsize < newpos
newbufsize
newbufsize
newpos
newpos
{			newbufsize <<= 1;			assert(newbufsize >= 0);		}
newbufsize <<= 1;
newbufsize <<= 1
newbufsize
newbufsize
1
assert(newbufsize >= 0);
assert(newbufsize >= 0)
assert
assert
newbufsize >= 0
newbufsize
newbufsize
0
if (mem_resize(m, newbufsize)) {			return -1;		}
mem_resize(m, newbufsize)
mem_resize
mem_resize
m
m
newbufsize
newbufsize
{			return -1;		}
return -1;
-1
1
if (m->pos_ > m->len_) {		/* The current position is beyond the end of the file, so		  pad the file to the current position with zeros. */		n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;		if (n > 0) {			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}		if (m->pos_ != m->len_) {			/* The buffer is not big enough. */			return 0;		}	}
m->pos_ > m->len_
m->pos_
m
m
pos_
m->len_
m
m
len_
{		/* The current position is beyond the end of the file, so		  pad the file to the current position with zeros. */		n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;		if (n > 0) {			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}		if (m->pos_ != m->len_) {			/* The buffer is not big enough. */			return 0;		}	}
n = JAS_MIN(m->pos_, m->bufsize_) - m->len_;
n = JAS_MIN(m->pos_, m->bufsize_) - m->len_
n
n
JAS_MIN(m->pos_, m->bufsize_) - m->len_
JAS_MIN(m->pos_, m->bufsize_)
JAS_MIN
JAS_MIN
m->pos_
m
m
pos_
m->bufsize_
m
m
bufsize_
m->len_
m
m
len_
if (n > 0) {			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}
n > 0
n
n
0
{			memset(&m->buf_[m->len_], 0, n);			m->len_ += n;		}
memset(&m->buf_[m->len_], 0, n);
memset(&m->buf_[m->len_], 0, n)
memset
memset
&m->buf_[m->len_]
m->buf_[m->len_]
m->buf_
m
m
buf_
m->len_
m
m
len_
0
n
n
m->len_ += n;
m->len_ += n
m->len_
m
m
len_
n
n
if (m->pos_ != m->len_) {			/* The buffer is not big enough. */			return 0;		}
m->pos_ != m->len_
m->pos_
m
m
pos_
m->len_
m
m
len_
{			/* The buffer is not big enough. */			return 0;		}
return 0;
0
n = m->bufsize_ - m->pos_;
n = m->bufsize_ - m->pos_
n
n
m->bufsize_ - m->pos_
m->bufsize_
m
m
bufsize_
m->pos_
m
m
pos_
ret = JAS_MIN(n, cnt);
ret = JAS_MIN(n, cnt)
ret
ret
JAS_MIN(n, cnt)
JAS_MIN
JAS_MIN
n
n
cnt
cnt
if (ret > 0) {		memcpy(&m->buf_[m->pos_], buf, ret);		m->pos_ += ret;	}
ret > 0
ret
ret
0
{		memcpy(&m->buf_[m->pos_], buf, ret);		m->pos_ += ret;	}
memcpy(&m->buf_[m->pos_], buf, ret);
memcpy(&m->buf_[m->pos_], buf, ret)
memcpy
memcpy
&m->buf_[m->pos_]
m->buf_[m->pos_]
m->buf_
m
m
buf_
m->pos_
m
m
pos_
buf
buf
ret
ret
m->pos_ += ret;
m->pos_ += ret
m->pos_
m
m
pos_
ret
ret
if (m->pos_ > m->len_) {		m->len_ = m->pos_;	}
m->pos_ > m->len_
m->pos_
m
m
pos_
m->len_
m
m
len_
{		m->len_ = m->pos_;	}
m->len_ = m->pos_;
m->len_ = m->pos_
m->len_
m
m
len_
m->pos_
m
m
pos_
assert(ret == cnt);
assert(ret == cnt)
assert
assert
ret == cnt
ret
ret
cnt
cnt
return ret;
ret
ret
-----joern-----
(24,36,0)
(24,40,0)
(33,38,0)
(49,46,0)
(46,3,0)
(10,1,0)
(22,33,0)
(24,1,0)
(15,0,0)
(45,7,0)
(6,7,0)
(44,5,0)
(43,38,0)
(42,7,0)
(20,23,0)
(3,38,0)
(39,32,0)
(8,21,0)
(26,10,0)
(37,41,0)
(2,41,0)
(17,3,0)
(35,33,0)
(5,0,0)
(43,5,0)
(0,5,0)
(18,43,0)
(36,9,0)
(4,41,0)
(16,7,0)
(5,43,0)
(34,46,0)
(31,33,0)
(7,38,0)
(50,5,0)
(3,46,0)
(24,20,0)
(27,40,0)
(50,41,0)
(7,45,0)
(33,46,0)
(12,25,0)
(33,25,0)
(13,45,0)
(28,50,0)
(47,41,0)
(25,33,0)
(11,41,0)
(29,27,0)
(32,20,0)
(1,19,0)
(14,49,0)
(46,49,0)
(21,36,0)
(48,41,0)
(40,30,0)
(24,50,0)
(7,6,1)
(17,34,1)
(36,21,1)
(44,45,1)
(33,38,1)
(43,18,1)
(50,5,1)
(25,33,1)
(12,33,1)
(14,46,1)
(40,27,1)
(10,26,1)
(25,12,1)
(27,29,1)
(8,25,1)
(26,49,1)
(46,3,1)
(24,40,1)
(13,7,1)
(16,42,1)
(18,44,1)
(33,46,1)
(24,20,1)
(0,5,1)
(1,10,1)
(24,36,1)
(0,15,1)
(29,45,1)
(3,38,1)
(42,49,1)
(7,38,1)
(5,43,1)
(6,16,1)
(33,35,1)
(28,25,1)
(45,7,1)
(45,13,1)
(31,22,1)
(3,17,1)
(49,14,1)
(15,5,1)
(39,0,1)
(49,46,1)
(43,38,1)
(24,50,1)
(22,0,1)
(50,28,1)
(21,8,1)
(24,1,1)
(20,32,1)
(35,31,1)
(32,39,1)
(5,43,2)
(50,25,2)
(0,5,2)
(6,49,2)
(12,0,2)
(43,38,2)
(46,3,2)
(26,49,2)
(44,45,2)
(24,50,2)
(27,45,2)
(50,5,2)
(24,20,2)
(31,0,2)
(10,49,2)
(25,33,2)
(8,25,2)
(43,45,2)
(5,45,2)
(20,0,2)
(33,46,2)
(49,46,2)
(42,49,2)
(39,0,2)
(40,45,2)
(1,49,2)
(36,25,2)
(24,1,2)
(15,45,2)
(7,49,2)
(45,7,2)
(33,0,2)
(16,49,2)
(25,0,2)
(24,40,2)
(22,0,2)
(13,49,2)
(29,45,2)
(33,38,2)
(35,0,2)
(18,45,2)
(28,25,2)
(21,25,2)
(7,38,2)
(32,0,2)
(45,49,2)
(24,36,2)
(0,45,2)
(3,38,2)
-----------------------------------
(0,(pos = jas_stream_tell(stream)
(1,return -1;)
(2,pos)
(3,jas_stream_tell(stream)
(4,if ((pos = jas_stream_tell(stream)
(5,pos = jas_stream_tell(stream)
(6,SEEK_END)
(7,jas_stream_seek(stream, 0, SEEK_END)
(8,1)
(9,)
(10,-1)
(11,if (jas_stream_seek(stream, 0, SEEK_END)
(12,0)
(13,0)
(14,0)
(15,0)
(16,0)
(17,stream)
(18,stream)
(19,)
(20,return -1;)
(21,-1)
(22,stream)
(23,)
(24,RET)
(25,jas_stream_seek(stream, oldpos, SEEK_SET)
(26,1)
(27,-1)
(28,pos)
(29,1)
(30,)
(31,oldpos)
(32,-1)
(33,jas_stream_seek(stream, oldpos, SEEK_SET)
(34,oldpos)
(35,SEEK_SET)
(36,return -1;)
(37,if ((oldpos = jas_stream_tell(stream)
(38,jas_stream_t *stream)
(39,1)
(40,return -1;)
(41,)
(42,stream)
(43,jas_stream_tell(stream)
(44,pos)
(45,jas_stream_seek(stream, 0, SEEK_END)
(46,oldpos = jas_stream_tell(stream)
(47,if (jas_stream_seek(stream, oldpos, SEEK_SET)
(48,oldpos)
(49,(oldpos = jas_stream_tell(stream)
(50,return pos;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000080000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff9cf9a66300000000ffffffffffffffff21faa66300000000ffffffffffffffff21faa66300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5d00050000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
static int mem_write(jas_stream_obj_t *obj, char *buf, int cnt) {
int n;
int ret;
jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj;
long newbufsize;
long newpos;
newpos = m->pos_ + cnt;
n = m->bufsize_ - m->pos_;
ret = JAS_MIN(n, cnt);
if(ret > 0)
memcpy(&m->buf_[m->pos_], buf, ret);
m->pos_ += ret;
if(m->pos_ > m->len_)
m->len_ = m->pos_;
assert(ret == cnt);
return ret;
=======================
