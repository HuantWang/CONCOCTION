-----label-----
0
-----code-----
static void
PrivateErrorHandler(const char* module, const char* fmt, va_list ap)
{
        if (old_error_handler)
                (*old_error_handler)(module,fmt,ap);
	status = 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
10,11
10,12
12,13
12,14
15,16
15,17
16,17
18,19
20,21
20,22
21,22
21,23
22,23
24,25
25,26
25,27
25,28
25,29
26,27
27,28
28,29
30,31
32,33
34,35
36,37
37,38
37,39
38,39
-----nextToken-----
2,4,6,8,9,11,13,14,17,19,23,29,31,33,35,39,40
-----computeFrom-----
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static voidPrivateErrorHandler(const char* module, const char* fmt, va_list ap){        if (old_error_handler)                (*old_error_handler)(module,fmt,ap);	status = 1;}
static void
PrivateErrorHandler(const char* module, const char* fmt, va_list ap)
PrivateErrorHandler
const char* module
const char
* module
*
module
const char* fmt
const char
* fmt
*
fmt
va_list ap
va_list
va_list
ap
ap
{        if (old_error_handler)                (*old_error_handler)(module,fmt,ap);	status = 1;}
if (old_error_handler)                (*old_error_handler)(module,fmt,ap);
old_error_handler
old_error_handler
(*old_error_handler)(module,fmt,ap);
(*old_error_handler)(module,fmt,ap)
(*old_error_handler)
*old_error_handler
old_error_handler
old_error_handler
module
module
fmt
fmt
ap
ap
status = 1;
status = 1
status
status
1
-----joern-----
(86,85,0)
(94,53,0)
(38,85,0)
(34,15,0)
(58,30,0)
(65,45,0)
(109,40,0)
(88,106,0)
(51,84,0)
(81,71,0)
(71,81,0)
(46,91,0)
(28,84,0)
(85,67,0)
(61,96,0)
(79,67,0)
(59,18,0)
(30,45,0)
(24,67,0)
(85,80,0)
(49,112,0)
(18,58,0)
(33,46,0)
(54,91,0)
(65,95,0)
(30,71,0)
(77,64,0)
(12,84,0)
(2,91,0)
(7,81,0)
(105,56,0)
(62,94,0)
(103,50,0)
(80,84,0)
(18,87,0)
(50,64,0)
(104,58,0)
(40,91,0)
(69,9,0)
(36,15,0)
(113,80,0)
(44,84,0)
(11,79,0)
(18,53,0)
(25,97,0)
(47,78,0)
(41,78,0)
(18,109,0)
(52,81,0)
(45,64,0)
(87,26,0)
(96,94,0)
(55,84,0)
(85,79,0)
(3,41,0)
(62,109,0)
(39,55,0)
(93,82,0)
(8,62,0)
(82,79,0)
(17,106,0)
(21,80,0)
(1,68,0)
(53,68,0)
(43,46,0)
(4,78,0)
(22,62,0)
(111,87,0)
(62,58,0)
(83,68,0)
(55,87,0)
(90,112,0)
(29,84,0)
(30,58,0)
(106,84,0)
(95,65,0)
(71,80,0)
(53,112,0)
(30,85,0)
(112,79,0)
(109,15,0)
(63,2,0)
(45,84,0)
(26,87,0)
(64,45,0)
(76,78,0)
(27,53,0)
(37,47,0)
(71,30,0)
(102,26,0)
(16,94,0)
(46,84,0)
(73,68,0)
(94,91,0)
(82,67,0)
(98,30,0)
(85,30,0)
(72,18,0)
(100,71,0)
(87,15,0)
(112,78,0)
(112,91,0)
(20,40,0)
(60,54,0)
(57,15,0)
(79,79,0)
(23,79,0)
(99,94,0)
(26,35,0)
(41,106,0)
(75,82,0)
(10,94,0)
(102,2,0)
(54,56,0)
(110,18,0)
(64,50,0)
(107,112,0)
(6,43,0)
(81,79,0)
(101,46,0)
(2,102,0)
(70,41,0)
(79,45,0)
(56,80,0)
(95,84,0)
(94,96,0)
(92,65,0)
(64,77,0)
(81,45,0)
(14,67,0)
(43,106,0)
(54,84,0)
(112,53,0)
(0,84,0)
(35,26,0)
(48,54,0)
(42,95,0)
(95,91,0)
(40,109,0)
(58,68,0)
(81,67,0)
(32,45,0)
(112,67,0)
(94,87,0)
(19,109,0)
(56,54,0)
(74,95,0)
(26,102,0)
(46,43,0)
(94,62,0)
(82,80,0)
(66,18,0)
(81,79,1)
(62,109,1)
(113,13,1)
(11,89,1)
(2,63,1)
(39,82,1)
(30,45,1)
(110,72,1)
(101,33,1)
(71,81,1)
(82,93,1)
(55,39,1)
(100,81,1)
(79,67,1)
(82,80,1)
(82,67,1)
(56,105,1)
(81,45,1)
(40,20,1)
(102,2,1)
(93,75,1)
(104,41,1)
(55,87,1)
(40,91,1)
(89,108,1)
(112,107,1)
(13,87,1)
(88,17,1)
(37,31,1)
(49,90,1)
(54,91,1)
(94,53,1)
(23,11,1)
(80,21,1)
(2,91,1)
(54,56,1)
(60,106,1)
(90,27,1)
(99,53,1)
(87,26,1)
(62,8,1)
(75,67,1)
(18,87,1)
(58,30,1)
(95,65,1)
(17,45,1)
(81,67,1)
(21,113,1)
(32,80,1)
(64,77,1)
(78,76,1)
(107,49,1)
(59,31,1)
(96,61,1)
(48,60,1)
(106,88,1)
(105,48,1)
(16,10,1)
(47,78,1)
(52,104,1)
(112,78,1)
(45,64,1)
(82,79,1)
(37,108,1)
(33,95,1)
(31,96,1)
(18,58,1)
(56,80,1)
(27,58,1)
(85,38,1)
(111,109,1)
(20,19,1)
(70,47,1)
(112,91,1)
(96,94,1)
(92,74,1)
(71,100,1)
(108,96,1)
(30,71,1)
(109,40,1)
(66,59,1)
(11,41,1)
(86,71,1)
(103,32,1)
(65,92,1)
(76,4,1)
(43,6,1)
(22,16,1)
(30,85,1)
(112,79,1)
(74,42,1)
(5,13,1)
(112,67,1)
(95,91,1)
(53,112,1)
(85,80,1)
(81,7,1)
(94,62,1)
(47,37,1)
(6,101,1)
(37,18,1)
(94,87,1)
(79,79,1)
(85,67,1)
(70,78,1)
(14,24,1)
(26,35,1)
(18,53,1)
(46,91,1)
(85,79,1)
(5,55,1)
(43,106,1)
(18,110,1)
(63,111,1)
(46,43,1)
(38,86,1)
(71,80,1)
(75,79,1)
(10,99,1)
(79,45,1)
(42,54,1)
(67,14,1)
(94,91,1)
(30,98,1)
(41,78,1)
(4,82,1)
(3,70,1)
(65,45,1)
(26,102,1)
(98,71,1)
(62,58,1)
(24,46,1)
(41,3,1)
(61,94,1)
(64,50,1)
(8,22,1)
(50,103,1)
(72,66,1)
(79,23,1)
(7,52,1)
(18,109,1)
(41,106,1)
(94,91,2)
(49,41,2)
(85,67,2)
(52,41,2)
(41,108,2)
(87,26,2)
(17,13,2)
(89,108,2)
(27,41,2)
(76,82,2)
(70,108,2)
(43,106,2)
(82,13,2)
(33,13,2)
(47,108,2)
(70,82,2)
(94,62,2)
(60,13,2)
(30,85,2)
(47,78,2)
(26,35,2)
(11,82,2)
(95,91,2)
(94,41,2)
(93,13,2)
(23,82,2)
(53,112,2)
(94,87,2)
(61,41,2)
(21,13,2)
(95,13,2)
(96,41,2)
(90,41,2)
(46,91,2)
(42,13,2)
(41,78,2)
(54,13,2)
(31,96,2)
(101,13,2)
(70,96,2)
(99,41,2)
(41,82,2)
(75,13,2)
(14,13,2)
(72,31,2)
(45,64,2)
(6,13,2)
(82,80,2)
(24,13,2)
(58,30,2)
(81,79,2)
(3,96,2)
(100,41,2)
(55,13,2)
(46,13,2)
(66,31,2)
(64,13,2)
(41,106,2)
(59,31,2)
(10,41,2)
(113,13,2)
(82,82,2)
(62,109,2)
(41,96,2)
(48,13,2)
(86,71,2)
(104,41,2)
(94,53,2)
(2,91,2)
(92,13,2)
(56,80,2)
(26,102,2)
(39,13,2)
(55,87,2)
(85,71,2)
(65,13,2)
(71,41,2)
(112,91,2)
(7,41,2)
(4,82,2)
(82,79,2)
(16,41,2)
(64,77,2)
(62,41,2)
(65,45,2)
(37,108,2)
(30,71,2)
(47,96,2)
(93,82,2)
(112,67,2)
(85,80,2)
(95,65,2)
(85,79,2)
(112,41,2)
(81,45,2)
(81,41,2)
(43,13,2)
(74,13,2)
(45,13,2)
(112,79,2)
(30,41,2)
(8,41,2)
(102,2,2)
(58,41,2)
(40,91,2)
(18,58,2)
(3,108,2)
(103,13,2)
(67,13,2)
(82,67,2)
(108,96,2)
(79,45,2)
(18,31,2)
(46,43,2)
(79,67,2)
(81,67,2)
(80,13,2)
(79,82,2)
(110,31,2)
(112,78,2)
(71,80,2)
(96,94,2)
(107,41,2)
(79,79,2)
(56,13,2)
(54,91,2)
(53,41,2)
(32,13,2)
(30,45,2)
(38,71,2)
(18,109,2)
(75,82,2)
(62,58,2)
(50,13,2)
(64,50,2)
(71,81,2)
(109,40,2)
(105,13,2)
(54,56,2)
(106,13,2)
(3,82,2)
(37,96,2)
(18,53,2)
(78,82,2)
(18,87,2)
(88,13,2)
(98,71,2)
(22,41,2)
-----------------------------------
(0,row)
(1,if (TIFFReadEncodedStrip(tif, strip, buf, nrow*scanline)
(2,TIFFStripSize(tif)
(3,samplesperpixel)
(4,s)
(5,RET)
(6,samplesperpixel)
(7,rowsperstrip)
(8,scanline)
(9,)
(10,strip)
(11,row)
(12,for (row = 0; row < h; row += rowsperstrip)
(13,buf)
(14,0)
(15,)
(16,buf)
(17,samplesperpixel)
(18,ShowStrip(strip, buf, nrow, scanline)
(19,scanline)
(20,tif)
(21,0)
(22,nrow)
(23,rowsperstrip)
(24,row)
(25,for (s = 0; s < samplesperpixel; s++)
(26,(unsigned char *)
(27,strip)
(28,samplesperpixel)
(29,rowsperstrip)
(30,row+rowsperstrip > h ?\\n\\t\\t\\t\\t    h-row : rowsperstrip)
(31,showdata)
(32,rowsperstrip)
(33,tif)
(34,scanline)
(35,unsigned char *)
(36,if (buf)
(37,s)
(38,row)
(39,buf)
(40,TIFFScanlineSize(tif)
(41,s < samplesperpixel)
(42,tif)
(43,&samplesperpixel)
(44,h)
(45,rowsperstrip = (uint32)
(46,TIFFGetField(tif, TIFFTAG_SAMPLESPERPIXEL, &samplesperpixel)
(47,s++)
(48,TIFFTAG_IMAGELENGTH)
(49,row)
(50,-1)
(51,s)
(52,row)
(53,strip = TIFFComputeStrip(tif, row, s)
(54,TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &h)
(55,_TIFFfree(buf)
(56,&h)
(57,buf)
(58,nrow = (row+rowsperstrip > h ?\\n\\t\\t\\t\\t    h-row : rowsperstrip)
(59,strip)
(60,tif)
(61,0)
(62,nrow*scanline)
(63,tif)
(64,(uint32)
(65,&rowsperstrip)
(66,buf)
(67,row = 0)
(68,)
(69,if (stoponerr)
(70,s)
(71,row+rowsperstrip > h)
(72,nrow)
(73,strip)
(74,TIFFTAG_ROWSPERSTRIP)
(75,row)
(76,0)
(77,uint32)
(78,s = 0)
(79,row += rowsperstrip)
(80,h=0)
(81,row+rowsperstrip)
(82,row < h)
(83,nrow)
(84,)
(85,h-row)
(86,h)
(87,buf = (unsigned char *)
(88,0)
(89,break;)
(90,tif)
(91,TIFF* tif)
(92,rowsperstrip)
(93,h)
(94,TIFFReadEncodedStrip(tif, strip, buf, nrow*scanline)
(95,TIFFGetField(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip)
(96,TIFFReadEncodedStrip(tif, strip, buf, nrow*scanline)
(97,)
(98,rowsperstrip)
(99,tif)
(100,h)
(101,TIFFTAG_SAMPLESPERPIXEL)
(102,_TIFFmalloc(TIFFStripSize(tif)
(103,1)
(104,nrow)
(105,h)
(106,samplesperpixel=0)
(107,s)
(108,stoponerr)
(109,scanline = TIFFScanlineSize(tif)
(110,scanline)
(111,buf)
(112,TIFFComputeStrip(tif, row, s)
(113,h)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff50f6b26300000000ffffffffffffffff6bf6b26300000000ffffffffffffffff6bf6b26300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x4d4d002b00080000000000000000003bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
static void PrivateErrorHandler(const char* module, const char* fmt, va_list ap) {
if(old_error_handler)
(*old_error_handler)(module,fmt,ap);
status = 1;
=======================
