-----label-----
0
-----code-----
static void
PrivateErrorHandler(const char* module, const char* fmt, va_list ap)
{
        if (old_error_handler)
                (*old_error_handler)(module,fmt,ap);
	status = 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
10,11
10,12
12,13
12,14
15,16
15,17
16,17
18,19
20,21
20,22
21,22
21,23
22,23
24,25
25,26
25,27
25,28
25,29
26,27
27,28
28,29
30,31
32,33
34,35
36,37
37,38
37,39
38,39
-----nextToken-----
2,4,6,8,9,11,13,14,17,19,23,29,31,33,35,39,40
-----computeFrom-----
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static voidPrivateErrorHandler(const char* module, const char* fmt, va_list ap){        if (old_error_handler)                (*old_error_handler)(module,fmt,ap);	status = 1;}
static void
PrivateErrorHandler(const char* module, const char* fmt, va_list ap)
PrivateErrorHandler
const char* module
const char
* module
*
module
const char* fmt
const char
* fmt
*
fmt
va_list ap
va_list
va_list
ap
ap
{        if (old_error_handler)                (*old_error_handler)(module,fmt,ap);	status = 1;}
if (old_error_handler)                (*old_error_handler)(module,fmt,ap);
old_error_handler
old_error_handler
(*old_error_handler)(module,fmt,ap);
(*old_error_handler)(module,fmt,ap)
(*old_error_handler)
*old_error_handler
old_error_handler
old_error_handler
module
module
fmt
fmt
ap
ap
status = 1;
status = 1
status
status
1
-----joern-----
(9,83,0)
(84,44,0)
(12,15,0)
(44,24,0)
(31,103,0)
(19,28,0)
(61,9,0)
(3,98,0)
(22,37,0)
(15,103,0)
(11,49,0)
(68,70,0)
(36,21,0)
(58,37,0)
(74,5,0)
(50,45,0)
(87,28,0)
(112,5,0)
(60,12,0)
(98,27,0)
(0,88,0)
(108,105,0)
(93,11,0)
(15,113,0)
(60,83,0)
(15,24,0)
(77,60,0)
(47,94,0)
(30,113,0)
(39,83,0)
(78,103,0)
(95,106,0)
(76,88,0)
(44,105,0)
(60,40,0)
(34,15,0)
(38,60,0)
(79,110,0)
(12,37,0)
(43,11,0)
(13,29,0)
(44,28,0)
(49,95,0)
(29,46,0)
(94,103,0)
(105,44,0)
(17,60,0)
(45,28,0)
(96,44,0)
(94,23,0)
(48,15,0)
(41,94,0)
(15,12,0)
(9,94,0)
(109,40,0)
(101,31,0)
(46,23,0)
(111,49,0)
(88,40,0)
(57,75,0)
(33,49,0)
(64,15,0)
(10,75,0)
(111,28,0)
(104,8,0)
(11,24,0)
(94,9,0)
(53,43,0)
(8,28,0)
(11,12,0)
(83,9,0)
(35,11,0)
(32,24,0)
(55,113,0)
(90,45,0)
(106,95,0)
(21,8,0)
(95,52,0)
(4,52,0)
(5,98,0)
(75,75,0)
(105,23,0)
(32,40,0)
(107,4,0)
(110,113,0)
(100,23,0)
(56,28,0)
(40,32,0)
(1,63,0)
(20,60,0)
(94,75,0)
(91,37,0)
(52,4,0)
(88,83,0)
(66,27,0)
(89,28,0)
(27,98,0)
(42,21,0)
(82,18,0)
(49,70,0)
(26,16,0)
(9,46,0)
(27,18,0)
(16,45,0)
(72,74,0)
(5,74,0)
(11,88,0)
(40,70,0)
(23,28,0)
(81,23,0)
(11,43,0)
(16,8,0)
(95,49,0)
(25,70,0)
(45,16,0)
(15,75,0)
(4,24,0)
(74,24,0)
(6,111,0)
(59,28,0)
(83,37,0)
(74,28,0)
(29,103,0)
(86,31,0)
(18,27,0)
(14,70,0)
(71,12,0)
(67,46,0)
(60,49,0)
(29,75,0)
(21,113,0)
(31,75,0)
(62,103,0)
(29,98,0)
(80,32,0)
(2,74,0)
(31,23,0)
(7,8,0)
(27,66,0)
(75,103,0)
(46,9,0)
(85,69,0)
(98,28,0)
(75,98,0)
(51,29,0)
(46,29,0)
(88,11,0)
(45,24,0)
(52,95,0)
(92,28,0)
(9,98,0)
(73,11,0)
(16,26,1)
(23,81,1)
(11,49,1)
(79,54,1)
(29,98,1)
(79,102,1)
(48,34,1)
(86,103,1)
(32,24,1)
(97,54,1)
(15,103,1)
(74,5,1)
(72,44,1)
(88,76,1)
(111,6,1)
(60,20,1)
(53,11,1)
(110,79,1)
(29,51,1)
(75,98,1)
(54,43,1)
(33,40,1)
(3,23,1)
(5,98,1)
(21,113,1)
(103,62,1)
(45,24,1)
(5,112,1)
(26,50,1)
(40,32,1)
(11,24,1)
(96,84,1)
(81,100,1)
(73,12,1)
(29,75,1)
(88,83,1)
(31,23,1)
(43,11,1)
(51,13,1)
(112,2,1)
(10,97,1)
(86,75,1)
(2,72,1)
(102,43,1)
(101,86,1)
(94,23,1)
(13,39,1)
(11,88,1)
(18,82,1)
(75,75,1)
(9,46,1)
(83,9,1)
(21,36,1)
(94,103,1)
(84,8,1)
(41,47,1)
(42,113,1)
(42,110,1)
(60,12,1)
(15,75,1)
(94,41,1)
(60,83,1)
(45,16,1)
(44,24,1)
(107,33,1)
(0,35,1)
(20,77,1)
(95,52,1)
(64,48,1)
(46,67,1)
(9,61,1)
(77,17,1)
(16,8,1)
(31,75,1)
(111,49,1)
(88,40,1)
(15,113,1)
(6,31,1)
(57,10,1)
(38,102,1)
(4,107,1)
(98,27,1)
(78,45,1)
(99,65,1)
(104,98,1)
(7,104,1)
(30,31,1)
(15,64,1)
(82,3,1)
(32,80,1)
(95,106,1)
(8,7,1)
(108,96,1)
(27,18,1)
(34,71,1)
(99,111,1)
(74,24,1)
(39,21,1)
(21,8,1)
(113,55,1)
(31,103,1)
(47,46,1)
(75,103,1)
(29,103,1)
(67,29,1)
(100,65,1)
(36,42,1)
(60,49,1)
(4,24,1)
(65,49,1)
(15,24,1)
(79,60,1)
(52,4,1)
(71,83,1)
(46,23,1)
(49,95,1)
(31,101,1)
(62,78,1)
(55,30,1)
(12,15,1)
(46,29,1)
(93,73,1)
(76,0,1)
(9,98,1)
(75,57,1)
(105,23,1)
(105,108,1)
(44,105,1)
(80,109,1)
(90,74,1)
(94,75,1)
(60,40,1)
(17,38,1)
(110,113,1)
(9,94,1)
(27,66,1)
(10,21,1)
(43,53,1)
(35,93,1)
(61,46,1)
(50,90,1)
(11,12,1)
(88,83,2)
(51,21,2)
(74,24,2)
(74,5,2)
(44,105,2)
(31,31,2)
(42,31,2)
(111,49,2)
(21,31,2)
(100,65,2)
(29,98,2)
(13,21,2)
(5,98,2)
(21,54,2)
(105,65,2)
(42,54,2)
(6,65,2)
(9,98,2)
(102,43,2)
(16,8,2)
(101,65,2)
(26,65,2)
(2,65,2)
(9,21,2)
(93,21,2)
(31,23,2)
(78,65,2)
(71,21,2)
(15,21,2)
(110,113,2)
(98,65,2)
(83,9,2)
(39,21,2)
(94,75,2)
(43,11,2)
(98,27,2)
(11,12,2)
(9,46,2)
(12,15,2)
(82,65,2)
(113,31,2)
(60,40,2)
(111,65,2)
(45,24,2)
(60,49,2)
(110,54,2)
(62,65,2)
(27,65,2)
(54,43,2)
(40,32,2)
(67,21,2)
(18,65,2)
(95,52,2)
(103,65,2)
(110,43,2)
(60,102,2)
(88,21,2)
(75,31,2)
(7,65,2)
(94,23,2)
(48,21,2)
(44,24,2)
(46,21,2)
(15,113,2)
(73,21,2)
(96,65,2)
(11,49,2)
(57,31,2)
(60,83,2)
(105,23,2)
(11,21,2)
(53,21,2)
(34,21,2)
(30,31,2)
(83,21,2)
(74,65,2)
(94,103,2)
(46,23,2)
(90,65,2)
(97,54,2)
(31,75,2)
(50,65,2)
(20,102,2)
(29,103,2)
(0,21,2)
(84,65,2)
(21,43,2)
(23,65,2)
(36,54,2)
(15,75,2)
(16,65,2)
(11,88,2)
(21,8,2)
(86,65,2)
(15,103,2)
(27,18,2)
(86,31,2)
(29,21,2)
(88,40,2)
(81,65,2)
(3,65,2)
(32,24,2)
(75,98,2)
(31,65,2)
(55,31,2)
(95,106,2)
(21,113,2)
(52,4,2)
(36,43,2)
(64,21,2)
(94,46,2)
(43,21,2)
(27,66,2)
(46,29,2)
(42,43,2)
(108,65,2)
(47,46,2)
(10,31,2)
(11,24,2)
(36,31,2)
(9,94,2)
(77,102,2)
(45,65,2)
(15,24,2)
(38,102,2)
(35,21,2)
(8,65,2)
(44,65,2)
(17,102,2)
(31,103,2)
(104,65,2)
(45,16,2)
(75,103,2)
(75,75,2)
(41,46,2)
(101,31,2)
(12,21,2)
(29,75,2)
(60,12,2)
(79,54,2)
(49,95,2)
(5,65,2)
(72,65,2)
(4,24,2)
(61,46,2)
(79,43,2)
(76,21,2)
(112,65,2)
-----------------------------------
(0,nrow)
(1,for (s = 0; s < samplesperpixel; s++)
(2,TIFFTAG_ROWSPERSTRIP)
(3,rowsperstrip)
(4,TIFFStripSize(tif)
(5,&rowsperstrip)
(6,buf)
(7,0)
(8,samplesperpixel=0)
(9,row+rowsperstrip > h ?\\n\\t\\t\\t\\t    h-row : rowsperstrip)
(10,row)
(11,TIFFReadEncodedStrip(tif, strip, buf, nrow*scanline)
(12,strip = TIFFComputeStrip(tif, row, s)
(13,row)
(14,buf)
(15,TIFFComputeStrip(tif, row, s)
(16,&samplesperpixel)
(17,buf)
(18,-1)
(19,row)
(20,scanline)
(21,s < samplesperpixel)
(22,strip)
(23,h=0)
(24,TIFF* tif)
(25,scanline)
(26,samplesperpixel)
(27,(uint32)
(28,)
(29,row+rowsperstrip)
(30,s)
(31,row < h)
(32,TIFFScanlineSize(tif)
(33,buf)
(34,tif)
(35,buf)
(36,samplesperpixel)
(37,)
(38,strip)
(39,nrow)
(40,scanline = TIFFScanlineSize(tif)
(41,row)
(42,s)
(43,TIFFReadEncodedStrip(tif, strip, buf, nrow*scanline)
(44,TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &h)
(45,TIFFGetField(tif, TIFFTAG_SAMPLESPERPIXEL, &samplesperpixel)
(46,row+rowsperstrip > h)
(47,h)
(48,row)
(49,buf = (unsigned char *)
(50,TIFFTAG_SAMPLESPERPIXEL)
(51,rowsperstrip)
(52,_TIFFmalloc(TIFFStripSize(tif)
(53,0)
(54,stoponerr)
(55,0)
(56,h)
(57,rowsperstrip)
(58,if (TIFFReadEncodedStrip(tif, strip, buf, nrow*scanline)
(59,for (row = 0; row < h; row += rowsperstrip)
(60,ShowStrip(strip, buf, nrow, scanline)
(61,rowsperstrip)
(62,0)
(63,)
(64,s)
(65,buf)
(66,uint32)
(67,h)
(68,if (buf)
(69,)
(70,)
(71,strip)
(72,tif)
(73,tif)
(74,TIFFGetField(tif, TIFFTAG_ROWSPERSTRIP, &rowsperstrip)
(75,row += rowsperstrip)
(76,scanline)
(77,nrow)
(78,row)
(79,s)
(80,tif)
(81,0)
(82,1)
(83,nrow = (row+rowsperstrip > h ?\\n\\t\\t\\t\\t    h-row : rowsperstrip)
(84,tif)
(85,if (stoponerr)
(86,row)
(87,rowsperstrip)
(88,nrow*scanline)
(89,s)
(90,tif)
(91,nrow)
(92,samplesperpixel)
(93,strip)
(94,h-row)
(95,(unsigned char *)
(96,TIFFTAG_IMAGELENGTH)
(97,break;)
(98,rowsperstrip = (uint32)
(99,RET)
(100,h)
(101,h)
(102,showdata)
(103,row = 0)
(104,samplesperpixel)
(105,&h)
(106,unsigned char *)
(107,tif)
(108,h)
(109,scanline)
(110,s++)
(111,_TIFFfree(buf)
(112,rowsperstrip)
(113,s = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff54edb46300000000ffffffffffffffff95eeb46300000000ffffffffffffffff95eeb46300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x4d4d002b00080000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
static void PrivateErrorHandler(const char* module, const char* fmt, va_list ap) {
if(old_error_handler)
(*old_error_handler)(module,fmt,ap);
status = 1;
=======================
