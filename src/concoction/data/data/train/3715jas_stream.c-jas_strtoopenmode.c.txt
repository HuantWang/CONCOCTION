-----label-----
0
-----code-----
static int jas_strtoopenmode(const char *s)
{
	int openmode = 0;
	while (*s != '\0') {
		switch (*s) {
		case 'r':
			openmode |= JAS_STREAM_READ;
			break;
		case 'w':
			openmode |= JAS_STREAM_WRITE | JAS_STREAM_CREATE;
			break;
		case 'b':
			openmode |= JAS_STREAM_BINARY;
			break;
		case 'a':
			openmode |= JAS_STREAM_APPEND;
			break;
		case '+':
			openmode |= JAS_STREAM_READ | JAS_STREAM_WRITE;
			break;
		default:
			break;
		}
		++s;
	}
	return openmode;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
16,17
18,19
18,20
19,20
19,21
20,21
21,22
24,25
24,26
25,26
25,27
26,27
27,28
29,30
29,31
29,32
29,33
29,34
29,35
29,36
29,37
29,38
29,39
29,40
29,41
29,42
29,43
29,44
29,45
29,46
30,31
32,33
33,34
33,35
34,35
36,37
39,40
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
51,52
53,54
54,55
54,56
55,56
57,58
60,61
62,63
63,64
63,65
64,65
66,67
69,70
71,72
72,73
72,74
73,74
75,76
75,77
76,77
78,79
83,84
84,85
85,86
87,88
88,89
-----nextToken-----
2,4,6,8,9,13,15,17,22,23,28,31,35,37,38,40,44,47,49,50,52,56,58,59,61,65,67,68,70,74,77,79,80,81,82,86,89
-----computeFrom-----
19,20
19,21
33,34
33,35
42,43
42,44
45,46
45,47
54,55
54,56
63,64
63,65
72,73
72,74
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;SwitchStatement;UnaryExpression;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;BreakStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int jas_strtoopenmode(const char *s){	int openmode = 0;	while (*s != '\0') {		switch (*s) {		case 'r':			openmode |= JAS_STREAM_READ;			break;		case 'w':			openmode |= JAS_STREAM_WRITE | JAS_STREAM_CREATE;			break;		case 'b':			openmode |= JAS_STREAM_BINARY;			break;		case 'a':			openmode |= JAS_STREAM_APPEND;			break;		case '+':			openmode |= JAS_STREAM_READ | JAS_STREAM_WRITE;			break;		default:			break;		}		++s;	}	return openmode;}
static int
jas_strtoopenmode(const char *s)
jas_strtoopenmode
const char *s
const char
*s
*
s
{	int openmode = 0;	while (*s != '\0') {		switch (*s) {		case 'r':			openmode |= JAS_STREAM_READ;			break;		case 'w':			openmode |= JAS_STREAM_WRITE | JAS_STREAM_CREATE;			break;		case 'b':			openmode |= JAS_STREAM_BINARY;			break;		case 'a':			openmode |= JAS_STREAM_APPEND;			break;		case '+':			openmode |= JAS_STREAM_READ | JAS_STREAM_WRITE;			break;		default:			break;		}		++s;	}	return openmode;}
int openmode = 0;
int openmode = 0;
int
openmode = 0
openmode
= 0
0
while (*s != '\0') {		switch (*s) {		case 'r':			openmode |= JAS_STREAM_READ;			break;		case 'w':			openmode |= JAS_STREAM_WRITE | JAS_STREAM_CREATE;			break;		case 'b':			openmode |= JAS_STREAM_BINARY;			break;		case 'a':			openmode |= JAS_STREAM_APPEND;			break;		case '+':			openmode |= JAS_STREAM_READ | JAS_STREAM_WRITE;			break;		default:			break;		}		++s;	}
*s != '\0'
*s
s
s
'\0'
{		switch (*s) {		case 'r':			openmode |= JAS_STREAM_READ;			break;		case 'w':			openmode |= JAS_STREAM_WRITE | JAS_STREAM_CREATE;			break;		case 'b':			openmode |= JAS_STREAM_BINARY;			break;		case 'a':			openmode |= JAS_STREAM_APPEND;			break;		case '+':			openmode |= JAS_STREAM_READ | JAS_STREAM_WRITE;			break;		default:			break;		}		++s;	}
switch (*s) {		case 'r':			openmode |= JAS_STREAM_READ;			break;		case 'w':			openmode |= JAS_STREAM_WRITE | JAS_STREAM_CREATE;			break;		case 'b':			openmode |= JAS_STREAM_BINARY;			break;		case 'a':			openmode |= JAS_STREAM_APPEND;			break;		case '+':			openmode |= JAS_STREAM_READ | JAS_STREAM_WRITE;			break;		default:			break;		}
*s
s
s
{		case 'r':			openmode |= JAS_STREAM_READ;			break;		case 'w':			openmode |= JAS_STREAM_WRITE | JAS_STREAM_CREATE;			break;		case 'b':			openmode |= JAS_STREAM_BINARY;			break;		case 'a':			openmode |= JAS_STREAM_APPEND;			break;		case '+':			openmode |= JAS_STREAM_READ | JAS_STREAM_WRITE;			break;		default:			break;		}
case 'r':
'r'
openmode |= JAS_STREAM_READ;
openmode |= JAS_STREAM_READ
openmode
openmode
JAS_STREAM_READ
JAS_STREAM_READ
break;
case 'w':
'w'
openmode |= JAS_STREAM_WRITE | JAS_STREAM_CREATE;
openmode |= JAS_STREAM_WRITE | JAS_STREAM_CREATE
openmode
openmode
JAS_STREAM_WRITE | JAS_STREAM_CREATE
JAS_STREAM_WRITE
JAS_STREAM_WRITE
JAS_STREAM_CREATE
JAS_STREAM_CREATE
break;
case 'b':
'b'
openmode |= JAS_STREAM_BINARY;
openmode |= JAS_STREAM_BINARY
openmode
openmode
JAS_STREAM_BINARY
JAS_STREAM_BINARY
break;
case 'a':
'a'
openmode |= JAS_STREAM_APPEND;
openmode |= JAS_STREAM_APPEND
openmode
openmode
JAS_STREAM_APPEND
JAS_STREAM_APPEND
break;
case '+':
'+'
openmode |= JAS_STREAM_READ | JAS_STREAM_WRITE;
openmode |= JAS_STREAM_READ | JAS_STREAM_WRITE
openmode
openmode
JAS_STREAM_READ | JAS_STREAM_WRITE
JAS_STREAM_READ
JAS_STREAM_READ
JAS_STREAM_WRITE
JAS_STREAM_WRITE
break;
default:
break;
++s;
++s
s
s
return openmode;
openmode
openmode
-----joern-----
(42,48,0)
(41,37,0)
(36,23,0)
(12,41,0)
(17,15,0)
(24,16,0)
(36,35,0)
(23,9,0)
(27,49,0)
(15,30,0)
(16,39,0)
(46,2,0)
(14,6,0)
(14,1,0)
(0,44,0)
(30,44,0)
(7,38,0)
(18,38,0)
(13,6,0)
(47,10,0)
(36,41,0)
(31,10,0)
(36,2,0)
(43,38,0)
(3,40,0)
(48,35,0)
(16,24,0)
(44,30,0)
(33,10,0)
(10,1,0)
(34,30,0)
(28,26,0)
(22,12,0)
(25,38,0)
(36,3,0)
(29,19,0)
(2,16,0)
(20,38,0)
(35,5,0)
(4,14,0)
(10,49,0)
(32,38,0)
(24,1,0)
(6,14,0)
(11,14,0)
(49,10,0)
(45,24,0)
(2,38,0)
(26,23,0)
(14,30,0)
(19,3,0)
(50,39,0)
(21,14,0)
(8,16,0)
(39,16,0)
(30,15,0)
(15,1,0)
(21,11,1)
(36,41,1)
(39,16,1)
(10,47,1)
(24,45,1)
(4,21,1)
(44,30,1)
(41,12,1)
(22,39,1)
(31,44,1)
(27,10,1)
(23,26,1)
(33,31,1)
(11,39,1)
(30,15,1)
(39,50,1)
(16,24,1)
(2,46,1)
(12,22,1)
(0,30,1)
(46,6,1)
(45,8,1)
(47,33,1)
(48,42,1)
(29,49,1)
(6,13,1)
(50,16,1)
(36,3,1)
(36,35,1)
(17,34,1)
(19,29,1)
(15,17,1)
(14,30,1)
(10,1,1)
(14,1,1)
(2,16,1)
(49,10,1)
(28,6,1)
(44,0,1)
(8,49,1)
(24,1,1)
(6,14,1)
(15,1,1)
(36,23,1)
(13,14,1)
(3,19,1)
(49,27,1)
(14,4,1)
(36,2,1)
(35,48,1)
(26,28,1)
(42,44,1)
(8,49,2)
(39,49,2)
(29,49,2)
(30,15,2)
(12,39,2)
(28,6,2)
(4,39,2)
(6,39,2)
(45,49,2)
(21,39,2)
(2,16,2)
(3,49,2)
(27,44,2)
(41,39,2)
(36,41,2)
(15,1,2)
(49,44,2)
(10,1,2)
(39,16,2)
(46,6,2)
(14,1,2)
(19,49,2)
(26,6,2)
(23,6,2)
(48,44,2)
(6,14,2)
(13,39,2)
(36,2,2)
(2,6,2)
(49,10,2)
(50,49,2)
(42,44,2)
(33,44,2)
(14,30,2)
(11,39,2)
(44,30,2)
(31,44,2)
(16,24,2)
(16,49,2)
(36,35,2)
(36,23,2)
(24,1,2)
(35,44,2)
(14,39,2)
(47,44,2)
(36,3,2)
(10,44,2)
(24,49,2)
(22,39,2)
-----------------------------------
(0,0)
(1,jas_stream_t *stream)
(2,return pos;)
(3,return -1;)
(4,SEEK_SET)
(5,)
(6,jas_stream_seek(stream, oldpos, SEEK_SET)
(7,pos)
(8,pos)
(9,)
(10,jas_stream_seek(stream, 0, SEEK_END)
(11,stream)
(12,-1)
(13,0)
(14,jas_stream_seek(stream, oldpos, SEEK_SET)
(15,jas_stream_tell(stream)
(16,pos = jas_stream_tell(stream)
(17,stream)
(18,if ((oldpos = jas_stream_tell(stream)
(19,-1)
(20,oldpos)
(21,oldpos)
(22,1)
(23,return -1;)
(24,jas_stream_tell(stream)
(25,if (jas_stream_seek(stream, 0, SEEK_END)
(26,-1)
(27,0)
(28,1)
(29,1)
(30,oldpos = jas_stream_tell(stream)
(31,stream)
(32,if ((pos = jas_stream_tell(stream)
(33,0)
(34,oldpos)
(35,return -1;)
(36,RET)
(37,)
(38,)
(39,(pos = jas_stream_tell(stream)
(40,)
(41,return -1;)
(42,1)
(43,if (jas_stream_seek(stream, oldpos, SEEK_SET)
(44,(oldpos = jas_stream_tell(stream)
(45,stream)
(46,pos)
(47,SEEK_END)
(48,-1)
(49,jas_stream_seek(stream, 0, SEEK_END)
(50,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000ffffffff0100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff1a34ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
arg03:0x0100ffffff
arg02:0x2d66ff
arg01:0x2d46ff
arg00:0x2d64ff
=========trace=========
static int jas_strtoopenmode(const char *s) {
int openmode = 0;
while(*s != 'switch(*s)
openmode |= JAS_STREAM_READ;
++s;
while(*s != 'switch(*s)
openmode |= JAS_STREAM_BINARY;
++s;
return openmode;
=======================
