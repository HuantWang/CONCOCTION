-----label-----
1
-----code-----
jas_image_t *jp2_decode(jas_stream_t *in, char *optstr)
{
	jp2_box_t *box;
	int found;
	jas_image_t *image;
	jp2_dec_t *dec;
	bool samedtype;
	int dtype;
	unsigned int i;
	jp2_cmap_t *cmapd;
	jp2_pclr_t *pclrd;
	jp2_cdef_t *cdefd;
	unsigned int channo;
	int newcmptno;
	int_fast32_t *lutents;
#if 0
	jp2_cdefchan_t *cdefent;
	int cmptno;
#endif
	jp2_cmapent_t *cmapent;
	jas_icchdr_t icchdr;
	jas_iccprof_t *iccprof;

	dec = 0;
	box = 0;
	image = 0;

	if (!(dec = jp2_dec_create())) {
		goto error;
	}

	/* Get the first box.  This should be a JP box. */
	if (!(box = jp2_box_get(in))) {
		jas_eprintf("error: cannot get box\n");
		goto error;
	}
	if (box->type != JP2_BOX_JP) {
		jas_eprintf("error: expecting signature box\n");
		goto error;
	}
	if (box->data.jp.magic != JP2_JP_MAGIC) {
		jas_eprintf("incorrect magic number\n");
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/* Get the second box.  This should be a FTYP box. */
	if (!(box = jp2_box_get(in))) {
		goto error;
	}
	if (box->type != JP2_BOX_FTYP) {
		jas_eprintf("expecting file type box\n");
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/* Get more boxes... */
	found = 0;
	while ((box = jp2_box_get(in))) {
		if (jas_getdbglevel() >= 1) {
			jas_eprintf("box type %s\n", box->info->name);
		}
		switch (box->type) {
		case JP2_BOX_JP2C:
			found = 1;
			break;
		case JP2_BOX_IHDR:
			if (!dec->ihdr) {
				dec->ihdr = box;
				box = 0;
			}
			break;
		case JP2_BOX_BPCC:
			if (!dec->bpcc) {
				dec->bpcc = box;
				box = 0;
			}
			break;
		case JP2_BOX_CDEF:
			if (!dec->cdef) {
				dec->cdef = box;
				box = 0;
			}
			break;
		case JP2_BOX_PCLR:
			if (!dec->pclr) {
				dec->pclr = box;
				box = 0;
			}
			break;
		case JP2_BOX_CMAP:
			if (!dec->cmap) {
				dec->cmap = box;
				box = 0;
			}
			break;
		case JP2_BOX_COLR:
			if (!dec->colr) {
				dec->colr = box;
				box = 0;
			}
			break;
		}
		if (box) {
			jp2_box_destroy(box);
			box = 0;
		}
		if (found) {
			break;
		}
	}

	if (!found) {
		jas_eprintf("error: no code stream found\n");
		goto error;
	}

	if (!(dec->image = jpc_decode(in, optstr))) {
		jas_eprintf("error: cannot decode code stream\n");
		goto error;
	}

	/* An IHDR box must be present. */
	if (!dec->ihdr) {
		jas_eprintf("error: missing IHDR box\n");
		goto error;
	}

	/* Does the number of components indicated in the IHDR box match
	  the value specified in the code stream? */
	if (dec->ihdr->data.ihdr.numcmpts != JAS_CAST(uint, jas_image_numcmpts(dec->image))) {
		jas_eprintf("warning: number of components mismatch\n");
	}

	/* At least one component must be present. */
	if (!jas_image_numcmpts(dec->image)) {
		jas_eprintf("error: no components\n");
		goto error;
	}

	/* Determine if all components have the same data type. */
	samedtype = true;
	dtype = jas_image_cmptdtype(dec->image, 0);
	for (i = 1; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {
		if (jas_image_cmptdtype(dec->image, i) != dtype) {
			samedtype = false;
			break;
		}
	}

	/* Is the component data type indicated in the IHDR box consistent
	  with the data in the code stream? */
	if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||
	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {
		jas_eprintf("warning: component data type mismatch\n");
	}

	/* Is the compression type supported? */
	if (dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE) {
		jas_eprintf("error: unsupported compression type\n");
		goto error;
	}

	if (dec->bpcc) {
		/* Is the number of components indicated in the BPCC box
		  consistent with the code stream data? */
		if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(uint, jas_image_numcmpts(
		  dec->image))) {
			jas_eprintf("warning: number of components mismatch\n");
		}
		/* Is the component data type information indicated in the BPCC
		  box consistent with the code stream data? */
		if (!samedtype) {
			for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {
				if (jas_image_cmptdtype(dec->image, i) != JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {
					jas_eprintf("warning: component data type mismatch\n");
				}
			}
		} else {
			jas_eprintf("warning: superfluous BPCC box\n");
		}
	}

	/* A COLR box must be present. */
	if (!dec->colr) {
		jas_eprintf("error: no COLR box\n");
		goto error;
	}

	switch (dec->colr->data.colr.method) {
	case JP2_COLR_ENUM:
		jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));
		break;
	case JP2_COLR_ICC:
		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,
		  dec->colr->data.colr.iccplen);
		if (!iccprof) {
			jas_eprintf("error: failed to parse ICC profile\n");
			goto error;
		}
		jas_iccprof_gethdr(iccprof, &icchdr);
		jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);
		jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));
		dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);
		assert(dec->image->cmprof_);
		jas_iccprof_destroy(iccprof);
		break;
	}

	/* If a CMAP box is present, a PCLR box must also be present. */
	if (dec->cmap && !dec->pclr) {
		jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");
		jp2_box_destroy(dec->cmap);
		dec->cmap = 0;
	}

	/* If a CMAP box is not present, a PCLR box must not be present. */
	if (!dec->cmap && dec->pclr) {
		jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");
		jp2_box_destroy(dec->pclr);
		dec->pclr = 0;
	}

	/* Determine the number of channels (which is essentially the number
	  of components after any palette mappings have been applied). */
	dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans : JAS_CAST(uint, jas_image_numcmpts(dec->image));

	/* Perform a basic sanity check on the CMAP box if present. */
	if (dec->cmap) {
		for (i = 0; i < dec->numchans; ++i) {
			/* Is the component number reasonable? */
			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(uint, jas_image_numcmpts(dec->image))) {
				jas_eprintf("error: invalid component number in CMAP box\n");
				goto error;
			}
			/* Is the LUT index reasonable? */
			if (dec->cmap->data.cmap.ents[i].pcol >= dec->pclr->data.pclr.numchans) {
				jas_eprintf("error: invalid CMAP LUT index\n");
				goto error;
			}
		}
	}

	/* Allocate space for the channel-number to component-number LUT. */
	if (!(dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t)))) {
		jas_eprintf("error: no memory\n");
		goto error;
	}

	if (!dec->cmap) {
		for (i = 0; i < dec->numchans; ++i) {
			dec->chantocmptlut[i] = i;
		}
	} else {
		cmapd = &dec->cmap->data.cmap;
		pclrd = &dec->pclr->data.pclr;
		cdefd = &dec->cdef->data.cdef;
		for (channo = 0; channo < cmapd->numchans; ++channo) {
			cmapent = &cmapd->ents[channo];
			if (cmapent->map == JP2_CMAP_DIRECT) {
				dec->chantocmptlut[channo] = channo;
			} else if (cmapent->map == JP2_CMAP_PALETTE) {
				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));
				for (i = 0; i < pclrd->numlutents; ++i) {
					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];
				}
				newcmptno = jas_image_numcmpts(dec->image);
				jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);
				dec->chantocmptlut[channo] = newcmptno;
				jas_free(lutents);
#if 0
				if (dec->cdef) {
					cdefent = jp2_cdef_lookup(cdefd, channo);
					if (!cdefent) {
						abort();
					}
				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));
				} else {
				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));
				}
#endif
			}
		}
	}

	/* Mark all components as being of unknown type. */

	for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {
		jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);
	}

	/* Determine the type of each component. */
	if (dec->cdef) {
		for (i = 0; i < dec->numchans; ++i) {
			/* Is the channel number reasonable? */
			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {
				jas_eprintf("error: invalid channel number in CDEF box\n");
				goto error;
			}
			jas_image_setcmpttype(dec->image,
			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],
			  jp2_getct(jas_image_clrspc(dec->image),
			  dec->cdef->data.cdef.ents[i].type, dec->cdef->data.cdef.ents[i].assoc));
		}
	} else {
		for (i = 0; i < dec->numchans; ++i) {
			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],
			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));
		}
	}

	/* Delete any components that are not of interest. */
	for (i = jas_image_numcmpts(dec->image); i > 0; --i) {
		if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {
			jas_image_delcmpt(dec->image, i - 1);
		}
	}

	/* Ensure that some components survived. */
	if (!jas_image_numcmpts(dec->image)) {
		jas_eprintf("error: no components\n");
		goto error;
	}
#if 0
jas_eprintf("no of components is %d\n", jas_image_numcmpts(dec->image));
#endif

	/* Prevent the image from being destroyed later. */
	image = dec->image;
	dec->image = 0;

	jp2_dec_destroy(dec);

	return image;

error:
	if (box) {
		jp2_box_destroy(box);
	}
	if (dec) {
		jp2_dec_destroy(dec);
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
15,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
18,29
18,30
18,31
18,32
18,33
18,34
18,35
18,36
18,37
18,38
18,39
18,40
18,41
18,42
18,43
18,44
18,45
18,46
18,47
18,48
18,49
18,50
18,51
18,52
18,53
18,54
18,55
18,56
18,57
18,58
18,59
18,60
18,61
18,62
18,63
18,64
18,65
18,66
18,67
18,68
18,69
18,70
18,71
18,72
18,73
18,74
18,75
18,76
18,77
18,78
18,79
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
38,39
39,40
39,41
40,41
42,43
42,44
45,46
46,47
46,48
48,49
50,51
51,52
51,53
53,54
55,56
56,57
56,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
67,68
68,69
68,70
69,70
71,72
71,73
74,75
75,76
75,77
76,77
78,79
78,80
81,82
82,83
82,84
84,85
86,87
87,88
87,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
98,99
99,100
99,101
100,101
102,103
102,104
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
115,117
118,119
119,120
119,121
120,121
123,124
124,125
124,126
125,126
128,129
129,130
129,131
130,131
133,134
133,135
134,135
135,136
136,137
136,138
137,138
139,140
140,141
142,143
143,144
145,146
145,147
146,147
147,148
148,149
148,150
149,150
151,152
151,153
152,153
154,155
156,157
156,158
157,158
158,159
158,160
159,160
162,163
164,165
164,166
165,166
165,167
166,167
166,168
167,168
170,171
172,173
172,174
173,174
174,175
174,176
175,176
178,179
180,181
180,182
181,182
181,183
182,183
182,184
183,184
183,185
184,185
184,186
185,186
190,191
192,193
192,194
193,194
194,195
194,196
195,196
198,199
200,201
201,202
201,203
202,203
204,205
206,207
207,208
207,209
208,209
211,212
211,213
212,213
213,214
214,215
214,216
215,216
217,218
217,219
218,219
220,221
222,223
223,224
225,226
225,227
226,227
226,228
227,228
227,229
228,229
231,232
233,234
233,235
234,235
235,236
235,237
236,237
239,240
241,242
242,243
242,244
243,244
245,246
247,248
248,249
248,250
249,250
252,253
253,254
253,255
254,255
257,258
257,259
258,259
259,260
259,261
260,261
262,263
262,264
263,264
265,266
267,268
267,269
267,270
267,271
268,269
268,270
269,270
269,271
270,271
271,272
274,275
275,276
276,277
276,278
276,279
277,278
280,281
280,282
281,282
281,283
282,283
286,287
286,288
287,288
287,289
288,289
291,292
291,293
291,294
291,295
291,296
291,297
291,298
291,299
291,300
291,301
291,302
291,303
291,304
291,305
291,306
291,307
291,308
291,309
291,310
291,311
291,312
292,293
293,294
295,296
296,297
296,298
297,298
301,302
302,303
304,305
304,306
305,306
306,307
306,308
307,308
310,311
310,312
311,312
312,313
312,314
313,314
313,315
314,315
317,318
319,320
320,321
320,322
321,322
325,326
326,327
328,329
328,330
329,330
330,331
330,332
331,332
334,335
334,336
335,336
336,337
336,338
337,338
337,339
338,339
341,342
343,344
344,345
344,346
345,346
349,350
350,351
352,353
352,354
353,354
354,355
354,356
355,356
358,359
358,360
359,360
360,361
360,362
361,362
361,363
362,363
365,366
367,368
368,369
368,370
369,370
373,374
374,375
376,377
376,378
377,378
378,379
378,380
379,380
382,383
382,384
383,384
384,385
384,386
385,386
385,387
386,387
389,390
391,392
392,393
392,394
393,394
397,398
398,399
400,401
400,402
401,402
402,403
402,404
403,404
406,407
406,408
407,408
408,409
408,410
409,410
409,411
410,411
413,414
415,416
416,417
416,418
417,418
421,422
422,423
424,425
424,426
425,426
426,427
426,428
427,428
430,431
430,432
431,432
432,433
432,434
433,434
433,435
434,435
437,438
439,440
440,441
440,442
441,442
445,446
445,447
446,447
448,449
448,450
449,450
450,451
450,452
451,452
453,454
455,456
456,457
456,458
457,458
460,461
460,462
461,462
463,464
465,466
465,467
466,467
467,468
469,470
469,471
470,471
471,472
471,473
472,473
475,476
477,478
477,479
478,479
479,480
480,481
480,482
481,482
481,483
482,483
485,486
485,487
485,488
486,487
488,489
490,491
492,493
492,494
493,494
494,495
494,496
495,496
498,499
500,501
500,502
501,502
502,503
502,504
503,504
506,507
506,508
507,508
508,509
508,510
509,510
512,513
514,515
514,516
515,516
515,517
516,517
516,518
517,518
517,519
518,519
518,520
519,520
519,521
520,521
526,527
526,528
526,529
527,528
529,530
531,532
531,533
532,533
534,535
534,536
535,536
538,539
539,540
540,541
540,542
541,542
544,545
544,546
545,546
546,547
546,548
547,548
549,550
549,551
550,551
553,554
553,555
554,555
555,556
555,557
556,557
559,560
561,562
562,563
562,564
563,564
566,567
567,568
567,569
568,569
570,571
570,572
570,573
571,572
573,574
573,575
574,575
578,579
578,580
578,581
578,582
579,580
580,581
580,582
581,582
584,585
584,586
585,586
587,588
587,589
587,590
588,589
590,591
592,593
592,594
593,594
595,596
595,597
596,597
599,600
600,601
602,603
603,604
603,605
604,605
604,606
605,606
605,607
605,608
606,607
608,609
608,610
609,610
612,613
614,615
616,617
616,618
617,618
618,619
618,620
619,620
623,624
623,625
624,625
624,626
625,626
626,627
626,628
627,628
629,630
629,631
630,631
630,632
631,632
631,633
632,633
632,634
633,634
633,635
634,635
640,641
640,642
641,642
643,644
645,646
646,647
646,648
647,648
648,649
650,651
650,652
651,652
651,653
652,653
652,654
653,654
653,655
654,655
654,656
655,656
661,662
663,664
664,665
665,666
665,667
666,667
669,670
669,671
670,671
670,672
671,672
671,673
672,673
672,674
673,674
673,675
674,675
674,676
675,676
681,682
683,684
683,685
684,685
685,686
685,687
686,687
689,690
691,692
691,693
692,693
692,694
693,694
696,697
696,698
697,698
697,699
698,699
698,700
699,700
699,701
700,701
700,702
701,702
701,703
702,703
702,704
703,704
709,710
709,711
709,712
710,711
712,713
714,715
714,716
715,716
717,718
717,719
718,719
721,722
722,723
723,724
723,725
724,725
727,728
727,729
727,730
728,729
729,730
731,732
732,733
732,734
732,735
732,736
733,734
734,735
734,736
735,736
738,739
738,740
739,740
741,742
741,743
741,744
742,743
744,745
746,747
746,748
747,748
749,750
749,751
750,751
753,754
754,755
756,757
757,758
757,759
758,759
758,760
759,760
759,761
759,762
760,761
762,763
762,764
763,764
766,767
768,769
768,770
769,770
771,772
771,773
772,773
772,774
773,774
773,775
774,775
774,776
775,776
775,777
776,777
782,783
784,785
785,786
786,787
786,788
787,788
790,791
791,792
792,793
792,794
793,794
796,797
796,798
797,798
798,799
798,800
799,800
802,803
802,804
803,804
804,805
804,806
805,806
808,809
810,811
810,812
811,812
811,813
812,813
812,814
813,814
813,815
814,815
814,816
815,816
821,822
821,823
821,824
821,825
821,826
821,827
821,828
821,829
821,830
821,831
821,832
821,833
821,834
822,823
823,824
825,826
826,827
826,828
826,829
827,828
829,830
829,831
830,831
833,834
833,835
834,835
836,837
837,838
837,839
838,839
838,840
839,840
839,841
840,841
846,847
847,848
849,850
850,851
850,852
851,852
853,854
853,855
853,856
854,855
856,857
856,858
857,858
857,859
858,859
858,860
859,860
859,861
860,861
866,867
866,868
867,868
867,869
868,869
868,870
869,870
869,871
870,871
876,877
876,878
877,878
878,879
880,881
880,882
881,882
882,883
882,884
883,884
886,887
888,889
889,890
889,891
889,892
890,891
892,893
894,895
895,896
897,898
898,899
898,900
898,901
899,900
902,903
902,904
903,904
906,907
907,908
907,909
907,910
908,909
910,911
910,912
911,912
914,915
914,916
915,916
917,918
917,919
918,919
921,922
922,923
922,924
923,924
923,925
924,925
924,926
925,926
929,930
929,931
930,931
932,933
934,935
935,936
935,937
936,937
938,939
938,940
939,940
939,941
940,941
944,945
945,946
945,947
946,947
948,949
951,952
951,953
952,953
952,954
953,954
953,955
954,955
957,958
958,959
958,960
959,960
962,963
962,964
962,965
963,964
964,965
964,966
965,966
968,969
969,970
969,971
970,971
972,973
972,974
973,974
976,977
977,978
977,979
978,979
978,980
979,980
983,984
983,985
984,985
984,986
985,986
986,987
986,988
987,988
990,991
990,992
991,992
994,995
994,996
994,997
995,996
996,997
996,998
997,998
1000,1001
1001,1002
1001,1003
1002,1003
1004,1005
1004,1006
1005,1006
1008,1009
1009,1010
1009,1011
1010,1011
1010,1012
1011,1012
1015,1016
1016,1017
1016,1018
1017,1018
1017,1019
1018,1019
1021,1022
1021,1023
1021,1024
1022,1023
1022,1024
1023,1024
1026,1027
1026,1028
1027,1028
1027,1029
1028,1029
1028,1030
1029,1030
1029,1031
1030,1031
1036,1037
1036,1038
1036,1039
1037,1038
1039,1040
1041,1042
1041,1043
1042,1043
1044,1045
1044,1046
1045,1046
1048,1049
1048,1050
1049,1050
1049,1051
1050,1051
1053,1054
1054,1055
1054,1056
1054,1057
1054,1058
1055,1056
1056,1057
1056,1058
1057,1058
1060,1061
1060,1062
1061,1062
1063,1064
1063,1065
1064,1065
1067,1068
1068,1069
1070,1071
1070,1072
1071,1072
1071,1073
1072,1073
1072,1074
1073,1074
1073,1075
1074,1075
1074,1076
1075,1076
1075,1077
1076,1077
1076,1078
1077,1078
1077,1079
1078,1079
1078,1080
1079,1080
1085,1086
1088,1089
1088,1090
1088,1091
1089,1090
1091,1092
1093,1094
1093,1095
1094,1095
1096,1097
1096,1098
1097,1098
1100,1101
1100,1102
1101,1102
1102,1103
1102,1104
1103,1104
1106,1107
1108,1109
1108,1110
1109,1110
1109,1111
1110,1111
1110,1112
1111,1112
1111,1113
1112,1113
1112,1114
1113,1114
1113,1115
1114,1115
1114,1116
1115,1116
1115,1117
1116,1117
1122,1123
1125,1126
1125,1127
1126,1127
1126,1128
1127,1128
1127,1129
1128,1129
1128,1130
1129,1130
1135,1136
1135,1137
1136,1137
1137,1138
1137,1139
1138,1139
1141,1142
1143,1144
1143,1145
1144,1145
1145,1146
1146,1147
1146,1148
1147,1148
1147,1149
1148,1149
1151,1152
1151,1153
1151,1154
1152,1153
1154,1155
1154,1156
1155,1156
1158,1159
1159,1160
1159,1161
1160,1161
1163,1164
1163,1165
1164,1165
1165,1166
1165,1167
1166,1167
1169,1170
1171,1172
1171,1173
1171,1174
1172,1173
1173,1174
1173,1175
1174,1175
1177,1178
1178,1179
1178,1180
1178,1181
1178,1182
1179,1180
1180,1181
1180,1182
1181,1182
1184,1185
1184,1186
1185,1186
1187,1188
1187,1189
1188,1189
1191,1192
1192,1193
1194,1195
1195,1196
1196,1197
1196,1198
1197,1198
1197,1199
1198,1199
1198,1200
1199,1200
1202,1203
1204,1205
1206,1207
1206,1208
1206,1209
1206,1210
1207,1208
1208,1209
1208,1210
1209,1210
1211,1212
1212,1213
1212,1214
1213,1214
1213,1215
1214,1215
1214,1216
1215,1216
1220,1221
1221,1222
1221,1223
1222,1223
1224,1225
1225,1226
1225,1227
1226,1227
1226,1228
1227,1228
1227,1229
1228,1229
1233,1234
1234,1235
1234,1236
1235,1236
1237,1238
1238,1239
1238,1240
1239,1240
1239,1241
1240,1241
1240,1242
1241,1242
1246,1247
1246,1248
1246,1249
1246,1250
1247,1248
1248,1249
1248,1250
1249,1250
1252,1253
1252,1254
1253,1254
1255,1256
1255,1257
1256,1257
1259,1260
1260,1261
1262,1263
1262,1264
1263,1264
1264,1265
1264,1266
1265,1266
1267,1268
1268,1269
1268,1270
1269,1270
1269,1271
1270,1271
1273,1274
1275,1276
1275,1277
1275,1278
1276,1277
1276,1278
1277,1278
1277,1279
1278,1279
1281,1282
1283,1284
1284,1285
1285,1286
1285,1287
1286,1287
1286,1288
1287,1288
1287,1289
1288,1289
1291,1292
1293,1294
1295,1296
1295,1297
1296,1297
1296,1298
1297,1298
1297,1299
1298,1299
1301,1302
1303,1304
1303,1305
1303,1306
1303,1307
1303,1308
1303,1309
1304,1305
1305,1306
1305,1307
1306,1307
1308,1309
1308,1310
1308,1311
1309,1310
1311,1312
1311,1313
1312,1313
1315,1316
1316,1317
1316,1318
1317,1318
1320,1321
1320,1322
1320,1323
1320,1324
1321,1322
1322,1323
1322,1324
1323,1324
1326,1327
1326,1328
1327,1328
1329,1330
1329,1331
1330,1331
1333,1334
1334,1335
1336,1337
1337,1338
1338,1339
1338,1340
1339,1340
1339,1341
1340,1341
1342,1343
1344,1345
1344,1346
1345,1346
1345,1347
1346,1347
1349,1350
1349,1351
1350,1351
1350,1352
1351,1352
1354,1355
1354,1356
1355,1356
1357,1358
1357,1359
1358,1359
1361,1362
1362,1363
1362,1364
1363,1364
1365,1366
1365,1367
1366,1367
1368,1369
1368,1370
1369,1370
1372,1373
1373,1374
1373,1375
1373,1376
1373,1377
1373,1378
1373,1379
1373,1380
1374,1375
1376,1377
1376,1378
1377,1378
1380,1381
1380,1382
1381,1382
1384,1385
1384,1386
1385,1386
1388,1389
1390,1391
1390,1392
1391,1392
1393,1394
1393,1395
1394,1395
1394,1396
1395,1396
1398,1399
1398,1400
1399,1400
1402,1403
1404,1405
1405,1406
1405,1407
1406,1407
1406,1408
1407,1408
1407,1409
1408,1409
1411,1412
1413,1414
1415,1416
1416,1417
1416,1418
1417,1418
1419,1420
1421,1422
1421,1423
1421,1424
1421,1425
1422,1423
1423,1424
1423,1425
1424,1425
1427,1428
1427,1429
1428,1429
1430,1431
1430,1432
1430,1433
1431,1432
1433,1434
1435,1436
1435,1437
1436,1437
1438,1439
1438,1440
1439,1440
1442,1443
1443,1444
1445,1446
1446,1447
1447,1448
1447,1449
1447,1450
1447,1451
1448,1449
1450,1451
1450,1452
1451,1452
1454,1455
1456,1457
1458,1459
1458,1460
1458,1461
1459,1460
1459,1461
1460,1461
1463,1464
1464,1465
1464,1466
1464,1467
1464,1468
1465,1466
1466,1467
1466,1468
1467,1468
1470,1471
1470,1472
1471,1472
1473,1474
1473,1475
1474,1475
1477,1478
1478,1479
1480,1481
1480,1482
1481,1482
1481,1483
1482,1483
1482,1484
1483,1484
1483,1485
1484,1485
1484,1486
1485,1486
1485,1487
1486,1487
1486,1488
1487,1488
1487,1489
1488,1489
1488,1490
1489,1490
1495,1496
1498,1499
1498,1500
1499,1500
1502,1503
1502,1504
1503,1504
1504,1505
1504,1506
1505,1506
1508,1509
1510,1511
1511,1512
1511,1513
1511,1514
1511,1515
1512,1513
1514,1515
1514,1516
1515,1516
1518,1519
1518,1520
1519,1520
1519,1521
1520,1521
1523,1524
1523,1525
1524,1525
1524,1526
1525,1526
1525,1527
1526,1527
1526,1528
1527,1528
1527,1529
1528,1529
1528,1530
1529,1530
1535,1536
1538,1539
1538,1540
1538,1541
1538,1542
1539,1540
1541,1542
1541,1543
1542,1543
1544,1545
1544,1546
1545,1546
1548,1549
1548,1550
1549,1550
1549,1551
1550,1551
1550,1552
1551,1552
1551,1553
1552,1553
1552,1554
1553,1554
1553,1555
1554,1555
1560,1561
1563,1564
1563,1565
1564,1565
1564,1566
1565,1566
1565,1567
1566,1567
1566,1568
1567,1568
1567,1569
1568,1569
1568,1570
1569,1570
1575,1576
1578,1579
1579,1580
1579,1581
1579,1582
1579,1583
1580,1581
1581,1582
1581,1583
1582,1583
1585,1586
1585,1587
1586,1587
1588,1589
1588,1590
1589,1590
1592,1593
1593,1594
1595,1596
1596,1597
1597,1598
1597,1599
1597,1600
1597,1601
1598,1599
1600,1601
1600,1602
1601,1602
1604,1605
1604,1606
1605,1606
1605,1607
1606,1607
1609,1610
1611,1612
1611,1613
1611,1614
1611,1615
1612,1613
1614,1615
1614,1616
1615,1616
1617,1618
1617,1619
1618,1619
1622,1623
1622,1624
1623,1624
1626,1627
1626,1628
1626,1629
1626,1630
1627,1628
1628,1629
1628,1630
1629,1630
1631,1632
1631,1633
1632,1633
1634,1635
1634,1636
1635,1636
1638,1639
1638,1640
1639,1640
1642,1643
1643,1644
1645,1646
1646,1647
1646,1648
1647,1648
1647,1649
1648,1649
1648,1650
1648,1651
1649,1650
1651,1652
1651,1653
1652,1653
1655,1656
1655,1657
1656,1657
1659,1660
1661,1662
1662,1663
1663,1664
1663,1665
1663,1666
1664,1665
1666,1667
1666,1668
1667,1668
1670,1671
1670,1672
1671,1672
1674,1675
1674,1676
1675,1676
1676,1677
1676,1678
1677,1678
1679,1680
1679,1681
1680,1681
1683,1684
1683,1685
1684,1685
1685,1686
1685,1687
1686,1687
1689,1690
1691,1692
1692,1693
1692,1694
1693,1694
1695,1696
1695,1697
1696,1697
1699,1700
1700,1701
1700,1702
1701,1702
1701,1703
1702,1703
1706,1707
1707,1708
1707,1709
1708,1709
1710,1711
1712,1713
1713,1714
1715,1716
1715,1717
1717,1718
1717,1719
1718,1719
1720,1721
1721,1722
1722,1723
1722,1724
1723,1724
1725,1726
1727,1728
1727,1729
1728,1729
1730,1731
1731,1732
1732,1733
1732,1734
1733,1734
1735,1736
1737,1738
-----nextToken-----
3,5,6,9,11,12,14,16,17,22,24,25,28,30,34,36,37,41,43,44,47,49,52,54,57,59,63,65,66,70,72,73,77,79,80,83,85,88,90,94,96,97,101,103,104,108,110,114,116,117,121,122,126,127,131,132,138,141,144,150,153,155,160,161,163,168,169,171,176,177,179,186,187,188,189,191,196,197,199,203,205,209,210,216,219,221,224,229,230,232,237,238,240,244,246,250,251,255,256,261,264,266,272,273,278,279,283,284,285,289,290,294,298,299,300,303,308,309,315,316,318,322,323,324,327,332,333,339,340,342,346,347,348,351,356,357,363,364,366,370,371,372,375,380,381,387,388,390,394,395,396,399,404,405,411,412,414,418,419,420,423,428,429,435,436,438,442,443,444,447,452,454,458,459,462,464,468,473,474,476,483,484,487,489,491,496,497,499,504,505,510,511,513,521,522,523,524,525,528,530,533,536,537,542,543,548,551,552,557,558,560,564,565,569,572,575,576,577,582,583,586,589,591,594,597,598,601,607,610,611,613,615,620,621,622,628,635,636,637,638,639,642,644,649,656,657,658,659,660,662,667,668,676,677,678,679,680,682,687,688,690,694,695,704,705,706,707,708,711,713,716,719,720,725,726,730,736,737,740,743,745,748,751,752,755,761,764,765,767,770,777,778,779,780,781,783,788,789,794,795,800,801,806,807,809,816,817,818,819,820,824,828,831,832,835,841,842,843,844,845,848,852,855,861,862,863,864,865,871,872,873,874,875,879,884,885,887,891,893,896,900,901,904,905,909,912,913,916,919,920,926,927,928,931,933,937,941,942,943,947,949,950,955,956,960,961,966,967,971,974,975,980,981,982,988,989,992,993,998,999,1003,1006,1007,1012,1013,1014,1019,1020,1024,1025,1031,1032,1033,1034,1035,1038,1040,1043,1046,1047,1051,1052,1058,1059,1062,1065,1066,1069,1080,1081,1082,1083,1084,1086,1087,1090,1092,1095,1098,1099,1104,1105,1107,1117,1118,1119,1120,1121,1123,1124,1130,1131,1132,1133,1134,1139,1140,1142,1149,1150,1153,1156,1157,1161,1162,1167,1168,1170,1175,1176,1182,1183,1186,1189,1190,1193,1200,1201,1203,1205,1210,1216,1217,1218,1219,1223,1229,1230,1231,1232,1236,1242,1243,1244,1245,1250,1251,1254,1257,1258,1261,1266,1271,1272,1274,1279,1280,1282,1289,1290,1292,1294,1299,1300,1302,1307,1310,1313,1314,1318,1319,1324,1325,1328,1331,1332,1335,1341,1343,1347,1348,1352,1353,1356,1359,1360,1364,1367,1370,1371,1375,1378,1379,1382,1383,1386,1387,1389,1392,1396,1397,1400,1401,1403,1409,1410,1412,1414,1418,1420,1425,1426,1429,1432,1434,1437,1440,1441,1444,1449,1452,1453,1455,1457,1461,1462,1468,1469,1472,1475,1476,1479,1490,1491,1492,1493,1494,1496,1497,1500,1501,1506,1507,1509,1513,1516,1517,1521,1522,1530,1531,1532,1533,1534,1536,1537,1540,1543,1546,1547,1555,1556,1557,1558,1559,1561,1562,1570,1571,1572,1573,1574,1576,1577,1583,1584,1587,1590,1591,1594,1599,1602,1603,1607,1608,1610,1613,1616,1619,1620,1621,1624,1625,1630,1633,1636,1637,1640,1641,1644,1650,1653,1654,1657,1658,1660,1665,1668,1669,1672,1673,1678,1681,1682,1687,1688,1690,1694,1697,1698,1703,1704,1705,1709,1711,1714,1716,1719,1724,1726,1729,1734,1736,1738
-----computeFrom-----
119,120
119,121
124,125
124,126
129,130
129,131
136,137
136,138
148,149
148,150
165,166
165,167
181,182
181,183
207,208
207,209
214,215
214,216
226,227
226,228
248,249
248,250
253,254
253,255
259,260
259,261
269,270
269,271
296,297
296,298
312,313
312,314
320,321
320,322
336,337
336,338
344,345
344,346
360,361
360,362
368,369
368,370
384,385
384,386
392,393
392,394
408,409
408,410
416,417
416,418
432,433
432,434
440,441
440,442
456,457
456,458
480,481
480,482
515,516
515,517
562,563
562,564
567,568
567,569
580,581
580,582
584,585
584,586
604,605
604,606
618,619
618,620
624,625
624,626
626,627
626,628
629,630
629,631
646,647
646,648
650,651
650,652
670,671
670,672
698,699
698,700
734,735
734,736
738,739
738,740
758,759
758,760
850,851
850,852
922,923
922,924
952,953
952,954
977,978
977,979
984,985
984,986
1009,1010
1009,1011
1016,1017
1016,1018
1056,1057
1056,1058
1060,1061
1060,1062
1072,1073
1072,1074
1109,1110
1109,1111
1146,1147
1146,1148
1180,1181
1180,1182
1184,1185
1184,1186
1196,1197
1196,1198
1208,1209
1208,1210
1221,1222
1221,1223
1234,1235
1234,1236
1248,1249
1248,1250
1252,1253
1252,1254
1264,1265
1264,1266
1276,1277
1276,1278
1285,1286
1285,1287
1296,1297
1296,1298
1305,1306
1305,1307
1322,1323
1322,1324
1326,1327
1326,1328
1338,1339
1338,1340
1349,1350
1349,1351
1354,1355
1354,1356
1362,1363
1362,1364
1405,1406
1405,1407
1423,1424
1423,1425
1427,1428
1427,1429
1466,1467
1466,1468
1470,1471
1470,1472
1482,1483
1482,1484
1581,1582
1581,1583
1585,1586
1585,1587
1622,1623
1622,1624
1628,1629
1628,1630
1638,1639
1638,1640
1647,1648
1647,1649
1655,1656
1655,1657
1670,1671
1670,1672
1692,1693
1692,1694
1700,1701
1700,1702
-----guardedBy-----
960,980
956,981
992,1012
993,1013
1299,1400
1654,1669
1653,1668
1657,1672
-----guardedByNegation-----
1279,1400
1280,1300
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;SwitchStatement;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
jas_image_t *jp2_decode(jas_stream_t *in, char *optstr){	jp2_box_t *box;	int found;	jas_image_t *image;	jp2_dec_t *dec;	bool samedtype;	int dtype;	unsigned int i;	jp2_cmap_t *cmapd;	jp2_pclr_t *pclrd;	jp2_cdef_t *cdefd;	unsigned int channo;	int newcmptno;	int_fast32_t *lutents;#if 0	jp2_cdefchan_t *cdefent;	int cmptno;#endif	jp2_cmapent_t *cmapent;	jas_icchdr_t icchdr;	jas_iccprof_t *iccprof;	dec = 0;	box = 0;	image = 0;	if (!(dec = jp2_dec_create())) {		goto error;	}	/* Get the first box.  This should be a JP box. */	if (!(box = jp2_box_get(in))) {		jas_eprintf("error: cannot get box\n");		goto error;	}	if (box->type != JP2_BOX_JP) {		jas_eprintf("error: expecting signature box\n");		goto error;	}	if (box->data.jp.magic != JP2_JP_MAGIC) {		jas_eprintf("incorrect magic number\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Get the second box.  This should be a FTYP box. */	if (!(box = jp2_box_get(in))) {		goto error;	}	if (box->type != JP2_BOX_FTYP) {		jas_eprintf("expecting file type box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Get more boxes... */	found = 0;	while ((box = jp2_box_get(in))) {		if (jas_getdbglevel() >= 1) {			jas_eprintf("box type %s\n", box->info->name);		}		switch (box->type) {		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}		if (box) {			jp2_box_destroy(box);			box = 0;		}		if (found) {			break;		}	}	if (!found) {		jas_eprintf("error: no code stream found\n");		goto error;	}	if (!(dec->image = jpc_decode(in, optstr))) {		jas_eprintf("error: cannot decode code stream\n");		goto error;	}	/* An IHDR box must be present. */	if (!dec->ihdr) {		jas_eprintf("error: missing IHDR box\n");		goto error;	}	/* Does the number of components indicated in the IHDR box match	  the value specified in the code stream? */	if (dec->ihdr->data.ihdr.numcmpts != JAS_CAST(uint, jas_image_numcmpts(dec->image))) {		jas_eprintf("warning: number of components mismatch\n");	}	/* At least one component must be present. */	if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}	/* Determine if all components have the same data type. */	samedtype = true;	dtype = jas_image_cmptdtype(dec->image, 0);	for (i = 1; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {		if (jas_image_cmptdtype(dec->image, i) != dtype) {			samedtype = false;			break;		}	}	/* Is the component data type indicated in the IHDR box consistent	  with the data in the code stream? */	if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {		jas_eprintf("warning: component data type mismatch\n");	}	/* Is the compression type supported? */	if (dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE) {		jas_eprintf("error: unsupported compression type\n");		goto error;	}	if (dec->bpcc) {		/* Is the number of components indicated in the BPCC box		  consistent with the code stream data? */		if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(uint, jas_image_numcmpts(		  dec->image))) {			jas_eprintf("warning: number of components mismatch\n");		}		/* Is the component data type information indicated in the BPCC		  box consistent with the code stream data? */		if (!samedtype) {			for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {				if (jas_image_cmptdtype(dec->image, i) != JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		} else {			jas_eprintf("warning: superfluous BPCC box\n");		}	}	/* A COLR box must be present. */	if (!dec->colr) {		jas_eprintf("error: no COLR box\n");		goto error;	}	switch (dec->colr->data.colr.method) {	case JP2_COLR_ENUM:		jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));		break;	case JP2_COLR_ICC:		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen);		if (!iccprof) {			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}		jas_iccprof_gethdr(iccprof, &icchdr);		jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);		jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));		dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);		assert(dec->image->cmprof_);		jas_iccprof_destroy(iccprof);		break;	}	/* If a CMAP box is present, a PCLR box must also be present. */	if (dec->cmap && !dec->pclr) {		jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");		jp2_box_destroy(dec->cmap);		dec->cmap = 0;	}	/* If a CMAP box is not present, a PCLR box must not be present. */	if (!dec->cmap && dec->pclr) {		jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");		jp2_box_destroy(dec->pclr);		dec->pclr = 0;	}	/* Determine the number of channels (which is essentially the number	  of components after any palette mappings have been applied). */	dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans : JAS_CAST(uint, jas_image_numcmpts(dec->image));	/* Perform a basic sanity check on the CMAP box if present. */	if (dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(uint, jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >= dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}	}	/* Allocate space for the channel-number to component-number LUT. */	if (!(dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t)))) {		jas_eprintf("error: no memory\n");		goto error;	}	if (!dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			dec->chantocmptlut[i] = i;		}	} else {		cmapd = &dec->cmap->data.cmap;		pclrd = &dec->pclr->data.pclr;		cdefd = &dec->cdef->data.cdef;		for (channo = 0; channo < cmapd->numchans; ++channo) {			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#endif			}		}	}	/* Mark all components as being of unknown type. */	for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {		jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);	}	/* Determine the type of each component. */	if (dec->cdef) {		for (i = 0; i < dec->numchans; ++i) {			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type, dec->cdef->data.cdef.ents[i].assoc));		}	} else {		for (i = 0; i < dec->numchans; ++i) {			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}	}	/* Delete any components that are not of interest. */	for (i = jas_image_numcmpts(dec->image); i > 0; --i) {		if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {			jas_image_delcmpt(dec->image, i - 1);		}	}	/* Ensure that some components survived. */	if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}#if 0jas_eprintf("no of components is %d\n", jas_image_numcmpts(dec->image));#endif	/* Prevent the image from being destroyed later. */	image = dec->image;	dec->image = 0;	jp2_dec_destroy(dec);	return image;error:	if (box) {		jp2_box_destroy(box);	}	if (dec) {		jp2_dec_destroy(dec);	}	return 0;}
jas_image_t
jas_image_t
*jp2_decode(jas_stream_t *in, char *optstr)
*
jp2_decode
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
char *optstr
char
*optstr
*
optstr
{	jp2_box_t *box;	int found;	jas_image_t *image;	jp2_dec_t *dec;	bool samedtype;	int dtype;	unsigned int i;	jp2_cmap_t *cmapd;	jp2_pclr_t *pclrd;	jp2_cdef_t *cdefd;	unsigned int channo;	int newcmptno;	int_fast32_t *lutents;#if 0	jp2_cdefchan_t *cdefent;	int cmptno;#endif	jp2_cmapent_t *cmapent;	jas_icchdr_t icchdr;	jas_iccprof_t *iccprof;	dec = 0;	box = 0;	image = 0;	if (!(dec = jp2_dec_create())) {		goto error;	}	/* Get the first box.  This should be a JP box. */	if (!(box = jp2_box_get(in))) {		jas_eprintf("error: cannot get box\n");		goto error;	}	if (box->type != JP2_BOX_JP) {		jas_eprintf("error: expecting signature box\n");		goto error;	}	if (box->data.jp.magic != JP2_JP_MAGIC) {		jas_eprintf("incorrect magic number\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Get the second box.  This should be a FTYP box. */	if (!(box = jp2_box_get(in))) {		goto error;	}	if (box->type != JP2_BOX_FTYP) {		jas_eprintf("expecting file type box\n");		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Get more boxes... */	found = 0;	while ((box = jp2_box_get(in))) {		if (jas_getdbglevel() >= 1) {			jas_eprintf("box type %s\n", box->info->name);		}		switch (box->type) {		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}		if (box) {			jp2_box_destroy(box);			box = 0;		}		if (found) {			break;		}	}	if (!found) {		jas_eprintf("error: no code stream found\n");		goto error;	}	if (!(dec->image = jpc_decode(in, optstr))) {		jas_eprintf("error: cannot decode code stream\n");		goto error;	}	/* An IHDR box must be present. */	if (!dec->ihdr) {		jas_eprintf("error: missing IHDR box\n");		goto error;	}	/* Does the number of components indicated in the IHDR box match	  the value specified in the code stream? */	if (dec->ihdr->data.ihdr.numcmpts != JAS_CAST(uint, jas_image_numcmpts(dec->image))) {		jas_eprintf("warning: number of components mismatch\n");	}	/* At least one component must be present. */	if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}	/* Determine if all components have the same data type. */	samedtype = true;	dtype = jas_image_cmptdtype(dec->image, 0);	for (i = 1; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {		if (jas_image_cmptdtype(dec->image, i) != dtype) {			samedtype = false;			break;		}	}	/* Is the component data type indicated in the IHDR box consistent	  with the data in the code stream? */	if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {		jas_eprintf("warning: component data type mismatch\n");	}	/* Is the compression type supported? */	if (dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE) {		jas_eprintf("error: unsupported compression type\n");		goto error;	}	if (dec->bpcc) {		/* Is the number of components indicated in the BPCC box		  consistent with the code stream data? */		if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(uint, jas_image_numcmpts(		  dec->image))) {			jas_eprintf("warning: number of components mismatch\n");		}		/* Is the component data type information indicated in the BPCC		  box consistent with the code stream data? */		if (!samedtype) {			for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {				if (jas_image_cmptdtype(dec->image, i) != JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		} else {			jas_eprintf("warning: superfluous BPCC box\n");		}	}	/* A COLR box must be present. */	if (!dec->colr) {		jas_eprintf("error: no COLR box\n");		goto error;	}	switch (dec->colr->data.colr.method) {	case JP2_COLR_ENUM:		jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));		break;	case JP2_COLR_ICC:		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen);		if (!iccprof) {			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}		jas_iccprof_gethdr(iccprof, &icchdr);		jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);		jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));		dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);		assert(dec->image->cmprof_);		jas_iccprof_destroy(iccprof);		break;	}	/* If a CMAP box is present, a PCLR box must also be present. */	if (dec->cmap && !dec->pclr) {		jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");		jp2_box_destroy(dec->cmap);		dec->cmap = 0;	}	/* If a CMAP box is not present, a PCLR box must not be present. */	if (!dec->cmap && dec->pclr) {		jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");		jp2_box_destroy(dec->pclr);		dec->pclr = 0;	}	/* Determine the number of channels (which is essentially the number	  of components after any palette mappings have been applied). */	dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans : JAS_CAST(uint, jas_image_numcmpts(dec->image));	/* Perform a basic sanity check on the CMAP box if present. */	if (dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(uint, jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >= dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}	}	/* Allocate space for the channel-number to component-number LUT. */	if (!(dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t)))) {		jas_eprintf("error: no memory\n");		goto error;	}	if (!dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			dec->chantocmptlut[i] = i;		}	} else {		cmapd = &dec->cmap->data.cmap;		pclrd = &dec->pclr->data.pclr;		cdefd = &dec->cdef->data.cdef;		for (channo = 0; channo < cmapd->numchans; ++channo) {			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#endif			}		}	}	/* Mark all components as being of unknown type. */	for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {		jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);	}	/* Determine the type of each component. */	if (dec->cdef) {		for (i = 0; i < dec->numchans; ++i) {			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type, dec->cdef->data.cdef.ents[i].assoc));		}	} else {		for (i = 0; i < dec->numchans; ++i) {			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}	}	/* Delete any components that are not of interest. */	for (i = jas_image_numcmpts(dec->image); i > 0; --i) {		if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {			jas_image_delcmpt(dec->image, i - 1);		}	}	/* Ensure that some components survived. */	if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}#if 0jas_eprintf("no of components is %d\n", jas_image_numcmpts(dec->image));#endif	/* Prevent the image from being destroyed later. */	image = dec->image;	dec->image = 0;	jp2_dec_destroy(dec);	return image;error:	if (box) {		jp2_box_destroy(box);	}	if (dec) {		jp2_dec_destroy(dec);	}	return 0;}
jp2_box_t *box;
jp2_box_t *box;
jp2_box_t
jp2_box_t
*box
*
box
int found;
int found;
int
found
found
jas_image_t *image;
jas_image_t *image;
jas_image_t
jas_image_t
*image
*
image
jp2_dec_t *dec;
jp2_dec_t *dec;
jp2_dec_t
jp2_dec_t
*dec
*
dec
bool samedtype;
bool samedtype;
bool
samedtype
samedtype
int dtype;
int dtype;
int
dtype
dtype
unsigned int i;
unsigned int i;
unsigned int
i
i
jp2_cmap_t *cmapd;
jp2_cmap_t *cmapd;
jp2_cmap_t
jp2_cmap_t
*cmapd
*
cmapd
jp2_pclr_t *pclrd;
jp2_pclr_t *pclrd;
jp2_pclr_t
jp2_pclr_t
*pclrd
*
pclrd
jp2_cdef_t *cdefd;
jp2_cdef_t *cdefd;
jp2_cdef_t
jp2_cdef_t
*cdefd
*
cdefd
unsigned int channo;
unsigned int channo;
unsigned int
channo
channo
int newcmptno;
int newcmptno;
int
newcmptno
newcmptno
int_fast32_t *lutents;
int_fast32_t *lutents;
int_fast32_t
int_fast32_t
*lutents
*
lutents
jp2_cmapent_t *cmapent;
jp2_cmapent_t *cmapent;
jp2_cmapent_t
jp2_cmapent_t
*cmapent
*
cmapent
jas_icchdr_t icchdr;
jas_icchdr_t icchdr;
jas_icchdr_t
jas_icchdr_t
icchdr
icchdr
jas_iccprof_t *iccprof;
jas_iccprof_t *iccprof;
jas_iccprof_t
jas_iccprof_t
*iccprof
*
iccprof
dec = 0;
dec = 0
dec
dec
0
box = 0;
box = 0
box
box
0
image = 0;
image = 0
image
image
0
if (!(dec = jp2_dec_create())) {		goto error;	}
!(dec = jp2_dec_create())
(dec = jp2_dec_create())
dec = jp2_dec_create()
dec
dec
jp2_dec_create()
jp2_dec_create
jp2_dec_create
{		goto error;	}
goto error;
error
if (!(box = jp2_box_get(in))) {		jas_eprintf("error: cannot get box\n");		goto error;	}
!(box = jp2_box_get(in))
(box = jp2_box_get(in))
box = jp2_box_get(in)
box
box
jp2_box_get(in)
jp2_box_get
jp2_box_get
in
in
{		jas_eprintf("error: cannot get box\n");		goto error;	}
jas_eprintf("error: cannot get box\n");
jas_eprintf("error: cannot get box\n")
jas_eprintf
jas_eprintf
"error: cannot get box\n"
goto error;
error
if (box->type != JP2_BOX_JP) {		jas_eprintf("error: expecting signature box\n");		goto error;	}
box->type != JP2_BOX_JP
box->type
box
box
type
JP2_BOX_JP
JP2_BOX_JP
{		jas_eprintf("error: expecting signature box\n");		goto error;	}
jas_eprintf("error: expecting signature box\n");
jas_eprintf("error: expecting signature box\n")
jas_eprintf
jas_eprintf
"error: expecting signature box\n"
goto error;
error
if (box->data.jp.magic != JP2_JP_MAGIC) {		jas_eprintf("incorrect magic number\n");		goto error;	}
box->data.jp.magic != JP2_JP_MAGIC
box->data.jp.magic
box->data.jp
box->data
box
box
data
jp
magic
JP2_JP_MAGIC
JP2_JP_MAGIC
{		jas_eprintf("incorrect magic number\n");		goto error;	}
jas_eprintf("incorrect magic number\n");
jas_eprintf("incorrect magic number\n")
jas_eprintf
jas_eprintf
"incorrect magic number\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (!(box = jp2_box_get(in))) {		goto error;	}
!(box = jp2_box_get(in))
(box = jp2_box_get(in))
box = jp2_box_get(in)
box
box
jp2_box_get(in)
jp2_box_get
jp2_box_get
in
in
{		goto error;	}
goto error;
error
if (box->type != JP2_BOX_FTYP) {		jas_eprintf("expecting file type box\n");		goto error;	}
box->type != JP2_BOX_FTYP
box->type
box
box
type
JP2_BOX_FTYP
JP2_BOX_FTYP
{		jas_eprintf("expecting file type box\n");		goto error;	}
jas_eprintf("expecting file type box\n");
jas_eprintf("expecting file type box\n")
jas_eprintf
jas_eprintf
"expecting file type box\n"
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
found = 0;
found = 0
found
found
0
while ((box = jp2_box_get(in))) {		if (jas_getdbglevel() >= 1) {			jas_eprintf("box type %s\n", box->info->name);		}		switch (box->type) {		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}		if (box) {			jp2_box_destroy(box);			box = 0;		}		if (found) {			break;		}	}
(box = jp2_box_get(in))
box = jp2_box_get(in)
box
box
jp2_box_get(in)
jp2_box_get
jp2_box_get
in
in
{		if (jas_getdbglevel() >= 1) {			jas_eprintf("box type %s\n", box->info->name);		}		switch (box->type) {		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}		if (box) {			jp2_box_destroy(box);			box = 0;		}		if (found) {			break;		}	}
if (jas_getdbglevel() >= 1) {			jas_eprintf("box type %s\n", box->info->name);		}
jas_getdbglevel() >= 1
jas_getdbglevel()
jas_getdbglevel
jas_getdbglevel
1
{			jas_eprintf("box type %s\n", box->info->name);		}
jas_eprintf("box type %s\n", box->info->name);
jas_eprintf("box type %s\n", box->info->name)
jas_eprintf
jas_eprintf
"box type %s\n"
box->info->name
box->info
box
box
info
name
switch (box->type) {		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}
box->type
box
box
type
{		case JP2_BOX_JP2C:			found = 1;			break;		case JP2_BOX_IHDR:			if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}			break;		case JP2_BOX_BPCC:			if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}			break;		case JP2_BOX_CDEF:			if (!dec->cdef) {				dec->cdef = box;				box = 0;			}			break;		case JP2_BOX_PCLR:			if (!dec->pclr) {				dec->pclr = box;				box = 0;			}			break;		case JP2_BOX_CMAP:			if (!dec->cmap) {				dec->cmap = box;				box = 0;			}			break;		case JP2_BOX_COLR:			if (!dec->colr) {				dec->colr = box;				box = 0;			}			break;		}
case JP2_BOX_JP2C:
JP2_BOX_JP2C
JP2_BOX_JP2C
found = 1;
found = 1
found
found
1
break;
case JP2_BOX_IHDR:
JP2_BOX_IHDR
JP2_BOX_IHDR
if (!dec->ihdr) {				dec->ihdr = box;				box = 0;			}
!dec->ihdr
dec->ihdr
dec
dec
ihdr
{				dec->ihdr = box;				box = 0;			}
dec->ihdr = box;
dec->ihdr = box
dec->ihdr
dec
dec
ihdr
box
box
box = 0;
box = 0
box
box
0
break;
case JP2_BOX_BPCC:
JP2_BOX_BPCC
JP2_BOX_BPCC
if (!dec->bpcc) {				dec->bpcc = box;				box = 0;			}
!dec->bpcc
dec->bpcc
dec
dec
bpcc
{				dec->bpcc = box;				box = 0;			}
dec->bpcc = box;
dec->bpcc = box
dec->bpcc
dec
dec
bpcc
box
box
box = 0;
box = 0
box
box
0
break;
case JP2_BOX_CDEF:
JP2_BOX_CDEF
JP2_BOX_CDEF
if (!dec->cdef) {				dec->cdef = box;				box = 0;			}
!dec->cdef
dec->cdef
dec
dec
cdef
{				dec->cdef = box;				box = 0;			}
dec->cdef = box;
dec->cdef = box
dec->cdef
dec
dec
cdef
box
box
box = 0;
box = 0
box
box
0
break;
case JP2_BOX_PCLR:
JP2_BOX_PCLR
JP2_BOX_PCLR
if (!dec->pclr) {				dec->pclr = box;				box = 0;			}
!dec->pclr
dec->pclr
dec
dec
pclr
{				dec->pclr = box;				box = 0;			}
dec->pclr = box;
dec->pclr = box
dec->pclr
dec
dec
pclr
box
box
box = 0;
box = 0
box
box
0
break;
case JP2_BOX_CMAP:
JP2_BOX_CMAP
JP2_BOX_CMAP
if (!dec->cmap) {				dec->cmap = box;				box = 0;			}
!dec->cmap
dec->cmap
dec
dec
cmap
{				dec->cmap = box;				box = 0;			}
dec->cmap = box;
dec->cmap = box
dec->cmap
dec
dec
cmap
box
box
box = 0;
box = 0
box
box
0
break;
case JP2_BOX_COLR:
JP2_BOX_COLR
JP2_BOX_COLR
if (!dec->colr) {				dec->colr = box;				box = 0;			}
!dec->colr
dec->colr
dec
dec
colr
{				dec->colr = box;				box = 0;			}
dec->colr = box;
dec->colr = box
dec->colr
dec
dec
colr
box
box
box = 0;
box = 0
box
box
0
break;
if (box) {			jp2_box_destroy(box);			box = 0;		}
box
box
{			jp2_box_destroy(box);			box = 0;		}
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (found) {			break;		}
found
found
{			break;		}
break;
if (!found) {		jas_eprintf("error: no code stream found\n");		goto error;	}
!found
found
found
{		jas_eprintf("error: no code stream found\n");		goto error;	}
jas_eprintf("error: no code stream found\n");
jas_eprintf("error: no code stream found\n")
jas_eprintf
jas_eprintf
"error: no code stream found\n"
goto error;
error
if (!(dec->image = jpc_decode(in, optstr))) {		jas_eprintf("error: cannot decode code stream\n");		goto error;	}
!(dec->image = jpc_decode(in, optstr))
(dec->image = jpc_decode(in, optstr))
dec->image = jpc_decode(in, optstr)
dec->image
dec
dec
image
jpc_decode(in, optstr)
jpc_decode
jpc_decode
in
in
optstr
optstr
{		jas_eprintf("error: cannot decode code stream\n");		goto error;	}
jas_eprintf("error: cannot decode code stream\n");
jas_eprintf("error: cannot decode code stream\n")
jas_eprintf
jas_eprintf
"error: cannot decode code stream\n"
goto error;
error
if (!dec->ihdr) {		jas_eprintf("error: missing IHDR box\n");		goto error;	}
!dec->ihdr
dec->ihdr
dec
dec
ihdr
{		jas_eprintf("error: missing IHDR box\n");		goto error;	}
jas_eprintf("error: missing IHDR box\n");
jas_eprintf("error: missing IHDR box\n")
jas_eprintf
jas_eprintf
"error: missing IHDR box\n"
goto error;
error
if (dec->ihdr->data.ihdr.numcmpts != JAS_CAST(uint, jas_image_numcmpts(dec->image))) {		jas_eprintf("warning: number of components mismatch\n");	}
dec->ihdr->data.ihdr.numcmpts != JAS_CAST(uint, jas_image_numcmpts(dec->image))
dec->ihdr->data.ihdr.numcmpts
dec->ihdr->data.ihdr
dec->ihdr->data
dec->ihdr
dec
dec
ihdr
data
ihdr
numcmpts
JAS_CAST(uint, jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
uint
uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
{		jas_eprintf("warning: number of components mismatch\n");	}
jas_eprintf("warning: number of components mismatch\n");
jas_eprintf("warning: number of components mismatch\n")
jas_eprintf
jas_eprintf
"warning: number of components mismatch\n"
if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}
!jas_image_numcmpts(dec->image)
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
{		jas_eprintf("error: no components\n");		goto error;	}
jas_eprintf("error: no components\n");
jas_eprintf("error: no components\n")
jas_eprintf
jas_eprintf
"error: no components\n"
goto error;
error
samedtype = true;
samedtype = true
samedtype
samedtype
true
dtype = jas_image_cmptdtype(dec->image, 0);
dtype = jas_image_cmptdtype(dec->image, 0)
dtype
dtype
jas_image_cmptdtype(dec->image, 0)
jas_image_cmptdtype
jas_image_cmptdtype
dec->image
dec
dec
image
0
for (i = 1; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {		if (jas_image_cmptdtype(dec->image, i) != dtype) {			samedtype = false;			break;		}	}
i = 1;
i = 1
i
i
1
i < JAS_CAST(uint, jas_image_numcmpts(dec->image))
i
i
JAS_CAST(uint, jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
uint
uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
++i
i
i
{		if (jas_image_cmptdtype(dec->image, i) != dtype) {			samedtype = false;			break;		}	}
if (jas_image_cmptdtype(dec->image, i) != dtype) {			samedtype = false;			break;		}
jas_image_cmptdtype(dec->image, i) != dtype
jas_image_cmptdtype(dec->image, i)
jas_image_cmptdtype
jas_image_cmptdtype
dec->image
dec
dec
image
i
i
dtype
dtype
{			samedtype = false;			break;		}
samedtype = false;
samedtype = false
samedtype
samedtype
false
break;
if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)) {		jas_eprintf("warning: component data type mismatch\n");	}
(samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)) ||	  (!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)
(samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype))
samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
samedtype
samedtype
dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
dec->ihdr->data.ihdr.bpc
dec->ihdr->data.ihdr
dec->ihdr->data
dec->ihdr
dec
dec
ihdr
data
ihdr
bpc
JP2_DTYPETOBPC(dtype)
JP2_DTYPETOBPC
JP2_DTYPETOBPC
dtype
dtype
(!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)
!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL
!samedtype
samedtype
samedtype
dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL
dec->ihdr->data.ihdr.bpc
dec->ihdr->data.ihdr
dec->ihdr->data
dec->ihdr
dec
dec
ihdr
data
ihdr
bpc
JP2_IHDR_BPCNULL
JP2_IHDR_BPCNULL
{		jas_eprintf("warning: component data type mismatch\n");	}
jas_eprintf("warning: component data type mismatch\n");
jas_eprintf("warning: component data type mismatch\n")
jas_eprintf
jas_eprintf
"warning: component data type mismatch\n"
if (dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE) {		jas_eprintf("error: unsupported compression type\n");		goto error;	}
dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE
dec->ihdr->data.ihdr.comptype
dec->ihdr->data.ihdr
dec->ihdr->data
dec->ihdr
dec
dec
ihdr
data
ihdr
comptype
JP2_IHDR_COMPTYPE
JP2_IHDR_COMPTYPE
{		jas_eprintf("error: unsupported compression type\n");		goto error;	}
jas_eprintf("error: unsupported compression type\n");
jas_eprintf("error: unsupported compression type\n")
jas_eprintf
jas_eprintf
"error: unsupported compression type\n"
goto error;
error
if (dec->bpcc) {		/* Is the number of components indicated in the BPCC box		  consistent with the code stream data? */		if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(uint, jas_image_numcmpts(		  dec->image))) {			jas_eprintf("warning: number of components mismatch\n");		}		/* Is the component data type information indicated in the BPCC		  box consistent with the code stream data? */		if (!samedtype) {			for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {				if (jas_image_cmptdtype(dec->image, i) != JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		} else {			jas_eprintf("warning: superfluous BPCC box\n");		}	}
dec->bpcc
dec
dec
bpcc
{		/* Is the number of components indicated in the BPCC box		  consistent with the code stream data? */		if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(uint, jas_image_numcmpts(		  dec->image))) {			jas_eprintf("warning: number of components mismatch\n");		}		/* Is the component data type information indicated in the BPCC		  box consistent with the code stream data? */		if (!samedtype) {			for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {				if (jas_image_cmptdtype(dec->image, i) != JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		} else {			jas_eprintf("warning: superfluous BPCC box\n");		}	}
if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(uint, jas_image_numcmpts(		  dec->image))) {			jas_eprintf("warning: number of components mismatch\n");		}
dec->bpcc->data.bpcc.numcmpts != JAS_CAST(uint, jas_image_numcmpts(		  dec->image))
dec->bpcc->data.bpcc.numcmpts
dec->bpcc->data.bpcc
dec->bpcc->data
dec->bpcc
dec
dec
bpcc
data
bpcc
numcmpts
JAS_CAST(uint, jas_image_numcmpts(		  dec->image))
JAS_CAST
JAS_CAST
uint
uint
jas_image_numcmpts(		  dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
{			jas_eprintf("warning: number of components mismatch\n");		}
jas_eprintf("warning: number of components mismatch\n");
jas_eprintf("warning: number of components mismatch\n")
jas_eprintf
jas_eprintf
"warning: number of components mismatch\n"
if (!samedtype) {			for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {				if (jas_image_cmptdtype(dec->image, i) != JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		} else {			jas_eprintf("warning: superfluous BPCC box\n");		}
!samedtype
samedtype
samedtype
{			for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {				if (jas_image_cmptdtype(dec->image, i) != JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}		}
for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {				if (jas_image_cmptdtype(dec->image, i) != JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}
i = 0;
i = 0
i
i
0
i < JAS_CAST(uint, jas_image_numcmpts(dec->image))
i
i
JAS_CAST(uint, jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
uint
uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
++i
i
i
{				if (jas_image_cmptdtype(dec->image, i) != JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}			}
if (jas_image_cmptdtype(dec->image, i) != JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])) {					jas_eprintf("warning: component data type mismatch\n");				}
jas_image_cmptdtype(dec->image, i) != JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])
jas_image_cmptdtype(dec->image, i)
jas_image_cmptdtype
jas_image_cmptdtype
dec->image
dec
dec
image
i
i
JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])
JP2_BPCTODTYPE
JP2_BPCTODTYPE
dec->bpcc->data.bpcc.bpcs[i]
dec->bpcc->data.bpcc.bpcs
dec->bpcc->data.bpcc
dec->bpcc->data
dec->bpcc
dec
dec
bpcc
data
bpcc
bpcs
i
i
{					jas_eprintf("warning: component data type mismatch\n");				}
jas_eprintf("warning: component data type mismatch\n");
jas_eprintf("warning: component data type mismatch\n")
jas_eprintf
jas_eprintf
"warning: component data type mismatch\n"
{			jas_eprintf("warning: superfluous BPCC box\n");		}
jas_eprintf("warning: superfluous BPCC box\n");
jas_eprintf("warning: superfluous BPCC box\n")
jas_eprintf
jas_eprintf
"warning: superfluous BPCC box\n"
if (!dec->colr) {		jas_eprintf("error: no COLR box\n");		goto error;	}
!dec->colr
dec->colr
dec
dec
colr
{		jas_eprintf("error: no COLR box\n");		goto error;	}
jas_eprintf("error: no COLR box\n");
jas_eprintf("error: no COLR box\n")
jas_eprintf
jas_eprintf
"error: no COLR box\n"
goto error;
error
switch (dec->colr->data.colr.method) {	case JP2_COLR_ENUM:		jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));		break;	case JP2_COLR_ICC:		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen);		if (!iccprof) {			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}		jas_iccprof_gethdr(iccprof, &icchdr);		jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);		jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));		dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);		assert(dec->image->cmprof_);		jas_iccprof_destroy(iccprof);		break;	}
dec->colr->data.colr.method
dec->colr->data.colr
dec->colr->data
dec->colr
dec
dec
colr
data
colr
method
{	case JP2_COLR_ENUM:		jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));		break;	case JP2_COLR_ICC:		iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen);		if (!iccprof) {			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}		jas_iccprof_gethdr(iccprof, &icchdr);		jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);		jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));		dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);		assert(dec->image->cmprof_);		jas_iccprof_destroy(iccprof);		break;	}
case JP2_COLR_ENUM:
JP2_COLR_ENUM
JP2_COLR_ENUM
jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr));
jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr))
jas_image_setclrspc
jas_image_setclrspc
dec->image
dec
dec
image
jp2_getcs(&dec->colr->data.colr)
jp2_getcs
jp2_getcs
&dec->colr->data.colr
dec->colr->data.colr
dec->colr->data
dec->colr
dec
dec
colr
data
colr
break;
case JP2_COLR_ICC:
JP2_COLR_ICC
JP2_COLR_ICC
iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen);
iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen)
iccprof
iccprof
jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,		  dec->colr->data.colr.iccplen)
jas_iccprof_createfrombuf
jas_iccprof_createfrombuf
dec->colr->data.colr.iccp
dec->colr->data.colr
dec->colr->data
dec->colr
dec
dec
colr
data
colr
iccp
dec->colr->data.colr.iccplen
dec->colr->data.colr
dec->colr->data
dec->colr
dec
dec
colr
data
colr
iccplen
if (!iccprof) {			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}
!iccprof
iccprof
iccprof
{			jas_eprintf("error: failed to parse ICC profile\n");			goto error;		}
jas_eprintf("error: failed to parse ICC profile\n");
jas_eprintf("error: failed to parse ICC profile\n")
jas_eprintf
jas_eprintf
"error: failed to parse ICC profile\n"
goto error;
error
jas_iccprof_gethdr(iccprof, &icchdr);
jas_iccprof_gethdr(iccprof, &icchdr)
jas_iccprof_gethdr
jas_iccprof_gethdr
iccprof
iccprof
&icchdr
icchdr
icchdr
jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc);
jas_eprintf("ICC Profile CS %08x\n", icchdr.colorspc)
jas_eprintf
jas_eprintf
"ICC Profile CS %08x\n"
icchdr.colorspc
icchdr
icchdr
colorspc
jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc));
jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc))
jas_image_setclrspc
jas_image_setclrspc
dec->image
dec
dec
image
fromiccpcs(icchdr.colorspc)
fromiccpcs
fromiccpcs
icchdr.colorspc
icchdr
icchdr
colorspc
dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof);
dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof)
dec->image->cmprof_
dec->image
dec
dec
image
cmprof_
jas_cmprof_createfromiccprof(iccprof)
jas_cmprof_createfromiccprof
jas_cmprof_createfromiccprof
iccprof
iccprof
assert(dec->image->cmprof_);
assert(dec->image->cmprof_)
assert
assert
dec->image->cmprof_
dec->image
dec
dec
image
cmprof_
jas_iccprof_destroy(iccprof);
jas_iccprof_destroy(iccprof)
jas_iccprof_destroy
jas_iccprof_destroy
iccprof
iccprof
break;
if (dec->cmap && !dec->pclr) {		jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");		jp2_box_destroy(dec->cmap);		dec->cmap = 0;	}
dec->cmap && !dec->pclr
dec->cmap
dec
dec
cmap
!dec->pclr
dec->pclr
dec
dec
pclr
{		jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");		jp2_box_destroy(dec->cmap);		dec->cmap = 0;	}
jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n");
jas_eprintf("warning: missing PCLR box or superfluous CMAP box\n")
jas_eprintf
jas_eprintf
"warning: missing PCLR box or superfluous CMAP box\n"
jp2_box_destroy(dec->cmap);
jp2_box_destroy(dec->cmap)
jp2_box_destroy
jp2_box_destroy
dec->cmap
dec
dec
cmap
dec->cmap = 0;
dec->cmap = 0
dec->cmap
dec
dec
cmap
0
if (!dec->cmap && dec->pclr) {		jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");		jp2_box_destroy(dec->pclr);		dec->pclr = 0;	}
!dec->cmap && dec->pclr
!dec->cmap
dec->cmap
dec
dec
cmap
dec->pclr
dec
dec
pclr
{		jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");		jp2_box_destroy(dec->pclr);		dec->pclr = 0;	}
jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n");
jas_eprintf("warning: missing CMAP box or superfluous PCLR box\n")
jas_eprintf
jas_eprintf
"warning: missing CMAP box or superfluous PCLR box\n"
jp2_box_destroy(dec->pclr);
jp2_box_destroy(dec->pclr)
jp2_box_destroy
jp2_box_destroy
dec->pclr
dec
dec
pclr
dec->pclr = 0;
dec->pclr = 0
dec->pclr
dec
dec
pclr
0
dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans : JAS_CAST(uint, jas_image_numcmpts(dec->image));
dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans : JAS_CAST(uint, jas_image_numcmpts(dec->image))
dec->numchans
dec
dec
numchans
dec->cmap ? dec->cmap->data.cmap.numchans : JAS_CAST(uint, jas_image_numcmpts(dec->image))
dec->cmap
dec
dec
cmap
dec->cmap->data.cmap.numchans
dec->cmap->data.cmap
dec->cmap->data
dec->cmap
dec
dec
cmap
data
cmap
numchans
JAS_CAST(uint, jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
uint
uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
if (dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(uint, jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >= dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}	}
dec->cmap
dec
dec
cmap
{		for (i = 0; i < dec->numchans; ++i) {			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(uint, jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >= dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}	}
for (i = 0; i < dec->numchans; ++i) {			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(uint, jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >= dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}
i = 0;
i = 0
i
i
0
i < dec->numchans
i
i
dec->numchans
dec
dec
numchans
++i
i
i
{			/* Is the component number reasonable? */			if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(uint, jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}			/* Is the LUT index reasonable? */			if (dec->cmap->data.cmap.ents[i].pcol >= dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}		}
if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(uint, jas_image_numcmpts(dec->image))) {				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}
dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(uint, jas_image_numcmpts(dec->image))
dec->cmap->data.cmap.ents[i].cmptno
dec->cmap->data.cmap.ents[i]
dec->cmap->data.cmap.ents
dec->cmap->data.cmap
dec->cmap->data
dec->cmap
dec
dec
cmap
data
cmap
ents
i
i
cmptno
JAS_CAST(uint, jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
uint
uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
{				jas_eprintf("error: invalid component number in CMAP box\n");				goto error;			}
jas_eprintf("error: invalid component number in CMAP box\n");
jas_eprintf("error: invalid component number in CMAP box\n")
jas_eprintf
jas_eprintf
"error: invalid component number in CMAP box\n"
goto error;
error
if (dec->cmap->data.cmap.ents[i].pcol >= dec->pclr->data.pclr.numchans) {				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}
dec->cmap->data.cmap.ents[i].pcol >= dec->pclr->data.pclr.numchans
dec->cmap->data.cmap.ents[i].pcol
dec->cmap->data.cmap.ents[i]
dec->cmap->data.cmap.ents
dec->cmap->data.cmap
dec->cmap->data
dec->cmap
dec
dec
cmap
data
cmap
ents
i
i
pcol
dec->pclr->data.pclr.numchans
dec->pclr->data.pclr
dec->pclr->data
dec->pclr
dec
dec
pclr
data
pclr
numchans
{				jas_eprintf("error: invalid CMAP LUT index\n");				goto error;			}
jas_eprintf("error: invalid CMAP LUT index\n");
jas_eprintf("error: invalid CMAP LUT index\n")
jas_eprintf
jas_eprintf
"error: invalid CMAP LUT index\n"
goto error;
error
if (!(dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t)))) {		jas_eprintf("error: no memory\n");		goto error;	}
!(dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t)))
(dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t)))
dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t))
dec->chantocmptlut
dec
dec
chantocmptlut
jas_alloc2(dec->numchans, sizeof(uint_fast16_t))
jas_alloc2
jas_alloc2
dec->numchans
dec
dec
numchans
sizeof(uint_fast16_t)
uint_fast16_t
uint_fast16_t
uint_fast16_t

{		jas_eprintf("error: no memory\n");		goto error;	}
jas_eprintf("error: no memory\n");
jas_eprintf("error: no memory\n")
jas_eprintf
jas_eprintf
"error: no memory\n"
goto error;
error
if (!dec->cmap) {		for (i = 0; i < dec->numchans; ++i) {			dec->chantocmptlut[i] = i;		}	} else {		cmapd = &dec->cmap->data.cmap;		pclrd = &dec->pclr->data.pclr;		cdefd = &dec->cdef->data.cdef;		for (channo = 0; channo < cmapd->numchans; ++channo) {			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#endif			}		}	}
!dec->cmap
dec->cmap
dec
dec
cmap
{		for (i = 0; i < dec->numchans; ++i) {			dec->chantocmptlut[i] = i;		}	}
for (i = 0; i < dec->numchans; ++i) {			dec->chantocmptlut[i] = i;		}
i = 0;
i = 0
i
i
0
i < dec->numchans
i
i
dec->numchans
dec
dec
numchans
++i
i
i
{			dec->chantocmptlut[i] = i;		}
dec->chantocmptlut[i] = i;
dec->chantocmptlut[i] = i
dec->chantocmptlut[i]
dec->chantocmptlut
dec
dec
chantocmptlut
i
i
i
i
{		cmapd = &dec->cmap->data.cmap;		pclrd = &dec->pclr->data.pclr;		cdefd = &dec->cdef->data.cdef;		for (channo = 0; channo < cmapd->numchans; ++channo) {			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#endif			}		}	}
cmapd = &dec->cmap->data.cmap;
cmapd = &dec->cmap->data.cmap
cmapd
cmapd
&dec->cmap->data.cmap
dec->cmap->data.cmap
dec->cmap->data
dec->cmap
dec
dec
cmap
data
cmap
pclrd = &dec->pclr->data.pclr;
pclrd = &dec->pclr->data.pclr
pclrd
pclrd
&dec->pclr->data.pclr
dec->pclr->data.pclr
dec->pclr->data
dec->pclr
dec
dec
pclr
data
pclr
cdefd = &dec->cdef->data.cdef;
cdefd = &dec->cdef->data.cdef
cdefd
cdefd
&dec->cdef->data.cdef
dec->cdef->data.cdef
dec->cdef->data
dec->cdef
dec
dec
cdef
data
cdef
for (channo = 0; channo < cmapd->numchans; ++channo) {			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#endif			}		}
channo = 0;
channo = 0
channo
channo
0
channo < cmapd->numchans
channo
channo
cmapd->numchans
cmapd
cmapd
numchans
++channo
channo
channo
{			cmapent = &cmapd->ents[channo];			if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#endif			}		}
cmapent = &cmapd->ents[channo];
cmapent = &cmapd->ents[channo]
cmapent
cmapent
&cmapd->ents[channo]
cmapd->ents[channo]
cmapd->ents
cmapd
cmapd
ents
channo
channo
if (cmapent->map == JP2_CMAP_DIRECT) {				dec->chantocmptlut[channo] = channo;			} else if (cmapent->map == JP2_CMAP_PALETTE) {				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#endif			}
cmapent->map == JP2_CMAP_DIRECT
cmapent->map
cmapent
cmapent
map
JP2_CMAP_DIRECT
JP2_CMAP_DIRECT
{				dec->chantocmptlut[channo] = channo;			}
dec->chantocmptlut[channo] = channo;
dec->chantocmptlut[channo] = channo
dec->chantocmptlut[channo]
dec->chantocmptlut
dec
dec
chantocmptlut
channo
channo
channo
channo
if (cmapent->map == JP2_CMAP_PALETTE) {				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#endif			}
cmapent->map == JP2_CMAP_PALETTE
cmapent->map
cmapent
cmapent
map
JP2_CMAP_PALETTE
JP2_CMAP_PALETTE
{				lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));				for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}				newcmptno = jas_image_numcmpts(dec->image);				jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);				dec->chantocmptlut[channo] = newcmptno;				jas_free(lutents);#if 0				if (dec->cdef) {					cdefent = jp2_cdef_lookup(cdefd, channo);					if (!cdefent) {						abort();					}				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), cdefent->type, cdefent->assoc));				} else {				jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image), 0, channo + 1));				}#endif			}
lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t));
lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t))
lutents
lutents
jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t))
jas_alloc2
jas_alloc2
pclrd->numlutents
pclrd
pclrd
numlutents
sizeof(int_fast32_t)
int_fast32_t
int_fast32_t
int_fast32_t

for (i = 0; i < pclrd->numlutents; ++i) {					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}
i = 0;
i = 0
i
i
0
i < pclrd->numlutents
i
i
pclrd->numlutents
pclrd
pclrd
numlutents
++i
i
i
{					lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];				}
lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans];
lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans]
lutents[i]
lutents
lutents
i
i
pclrd->lutdata[cmapent->pcol + i * pclrd->numchans]
pclrd->lutdata
pclrd
pclrd
lutdata
cmapent->pcol + i * pclrd->numchans
cmapent->pcol
cmapent
cmapent
pcol
i * pclrd->numchans
i
i
pclrd->numchans
pclrd
pclrd
numchans
newcmptno = jas_image_numcmpts(dec->image);
newcmptno = jas_image_numcmpts(dec->image)
newcmptno
newcmptno
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno);
jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol]), newcmptno)
jas_image_depalettize
jas_image_depalettize
dec->image
dec
dec
image
cmapent->cmptno
cmapent
cmapent
cmptno
pclrd->numlutents
pclrd
pclrd
numlutents
lutents
lutents
JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol])
JP2_BPCTODTYPE
JP2_BPCTODTYPE
pclrd->bpc[cmapent->pcol]
pclrd->bpc
pclrd
pclrd
bpc
cmapent->pcol
cmapent
cmapent
pcol
newcmptno
newcmptno
dec->chantocmptlut[channo] = newcmptno;
dec->chantocmptlut[channo] = newcmptno
dec->chantocmptlut[channo]
dec->chantocmptlut
dec
dec
chantocmptlut
channo
channo
newcmptno
newcmptno
jas_free(lutents);
jas_free(lutents)
jas_free
jas_free
lutents
lutents
for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)); ++i) {		jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);	}
i = 0;
i = 0
i
i
0
i < JAS_CAST(uint, jas_image_numcmpts(dec->image))
i
i
JAS_CAST(uint, jas_image_numcmpts(dec->image))
JAS_CAST
JAS_CAST
uint
uint
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
++i
i
i
{		jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);	}
jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN);
jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN)
jas_image_setcmpttype
jas_image_setcmpttype
dec->image
dec
dec
image
i
i
JAS_IMAGE_CT_UNKNOWN
JAS_IMAGE_CT_UNKNOWN
if (dec->cdef) {		for (i = 0; i < dec->numchans; ++i) {			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type, dec->cdef->data.cdef.ents[i].assoc));		}	} else {		for (i = 0; i < dec->numchans; ++i) {			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}	}
dec->cdef
dec
dec
cdef
{		for (i = 0; i < dec->numchans; ++i) {			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type, dec->cdef->data.cdef.ents[i].assoc));		}	}
for (i = 0; i < dec->numchans; ++i) {			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type, dec->cdef->data.cdef.ents[i].assoc));		}
i = 0;
i = 0
i
i
0
i < dec->numchans
i
i
dec->numchans
dec
dec
numchans
++i
i
i
{			/* Is the channel number reasonable? */			if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}			jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type, dec->cdef->data.cdef.ents[i].assoc));		}
if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans) {				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}
dec->cdef->data.cdef.ents[i].channo >= dec->numchans
dec->cdef->data.cdef.ents[i].channo
dec->cdef->data.cdef.ents[i]
dec->cdef->data.cdef.ents
dec->cdef->data.cdef
dec->cdef->data
dec->cdef
dec
dec
cdef
data
cdef
ents
i
i
channo
dec->numchans
dec
dec
numchans
{				jas_eprintf("error: invalid channel number in CDEF box\n");				goto error;			}
jas_eprintf("error: invalid channel number in CDEF box\n");
jas_eprintf("error: invalid channel number in CDEF box\n")
jas_eprintf
jas_eprintf
"error: invalid channel number in CDEF box\n"
goto error;
error
jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type, dec->cdef->data.cdef.ents[i].assoc));
jas_image_setcmpttype(dec->image,			  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],			  jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type, dec->cdef->data.cdef.ents[i].assoc))
jas_image_setcmpttype
jas_image_setcmpttype
dec->image
dec
dec
image
dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo]
dec->chantocmptlut
dec
dec
chantocmptlut
dec->cdef->data.cdef.ents[i].channo
dec->cdef->data.cdef.ents[i]
dec->cdef->data.cdef.ents
dec->cdef->data.cdef
dec->cdef->data
dec->cdef
dec
dec
cdef
data
cdef
ents
i
i
channo
jp2_getct(jas_image_clrspc(dec->image),			  dec->cdef->data.cdef.ents[i].type, dec->cdef->data.cdef.ents[i].assoc)
jp2_getct
jp2_getct
jas_image_clrspc(dec->image)
jas_image_clrspc
jas_image_clrspc
dec->image
dec
dec
image
dec->cdef->data.cdef.ents[i].type
dec->cdef->data.cdef.ents[i]
dec->cdef->data.cdef.ents
dec->cdef->data.cdef
dec->cdef->data
dec->cdef
dec
dec
cdef
data
cdef
ents
i
i
type
dec->cdef->data.cdef.ents[i].assoc
dec->cdef->data.cdef.ents[i]
dec->cdef->data.cdef.ents
dec->cdef->data.cdef
dec->cdef->data
dec->cdef
dec
dec
cdef
data
cdef
ents
i
i
assoc
{		for (i = 0; i < dec->numchans; ++i) {			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}	}
for (i = 0; i < dec->numchans; ++i) {			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}
i = 0;
i = 0
i
i
0
i < dec->numchans
i
i
dec->numchans
dec
dec
numchans
++i
i
i
{			jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));		}
jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1));
jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],			  jp2_getct(jas_image_clrspc(dec->image), 0, i + 1))
jas_image_setcmpttype
jas_image_setcmpttype
dec->image
dec
dec
image
dec->chantocmptlut[i]
dec->chantocmptlut
dec
dec
chantocmptlut
i
i
jp2_getct(jas_image_clrspc(dec->image), 0, i + 1)
jp2_getct
jp2_getct
jas_image_clrspc(dec->image)
jas_image_clrspc
jas_image_clrspc
dec->image
dec
dec
image
0
i + 1
i
i
1
for (i = jas_image_numcmpts(dec->image); i > 0; --i) {		if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {			jas_image_delcmpt(dec->image, i - 1);		}	}
i = jas_image_numcmpts(dec->image);
i = jas_image_numcmpts(dec->image)
i
i
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
i > 0
i
i
0
--i
i
i
{		if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {			jas_image_delcmpt(dec->image, i - 1);		}	}
if (jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN) {			jas_image_delcmpt(dec->image, i - 1);		}
jas_image_cmpttype(dec->image, i - 1) == JAS_IMAGE_CT_UNKNOWN
jas_image_cmpttype(dec->image, i - 1)
jas_image_cmpttype
jas_image_cmpttype
dec->image
dec
dec
image
i - 1
i
i
1
JAS_IMAGE_CT_UNKNOWN
JAS_IMAGE_CT_UNKNOWN
{			jas_image_delcmpt(dec->image, i - 1);		}
jas_image_delcmpt(dec->image, i - 1);
jas_image_delcmpt(dec->image, i - 1)
jas_image_delcmpt
jas_image_delcmpt
dec->image
dec
dec
image
i - 1
i
i
1
if (!jas_image_numcmpts(dec->image)) {		jas_eprintf("error: no components\n");		goto error;	}
!jas_image_numcmpts(dec->image)
jas_image_numcmpts(dec->image)
jas_image_numcmpts
jas_image_numcmpts
dec->image
dec
dec
image
{		jas_eprintf("error: no components\n");		goto error;	}
jas_eprintf("error: no components\n");
jas_eprintf("error: no components\n")
jas_eprintf
jas_eprintf
"error: no components\n"
goto error;
error
image = dec->image;
image = dec->image
image
image
dec->image
dec
dec
image
dec->image = 0;
dec->image = 0
dec->image
dec
dec
image
0
jp2_dec_destroy(dec);
jp2_dec_destroy(dec)
jp2_dec_destroy
jp2_dec_destroy
dec
dec
return image;
image
image
error:	if (box) {		jp2_box_destroy(box);	}
error
if (box) {		jp2_box_destroy(box);	}
box
box
{		jp2_box_destroy(box);	}
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
if (dec) {		jp2_dec_destroy(dec);	}
dec
dec
{		jp2_dec_destroy(dec);	}
jp2_dec_destroy(dec);
jp2_dec_destroy(dec)
jp2_dec_destroy
jp2_dec_destroy
dec
dec
return 0;
0
-----joern-----
(682,323,0)
(438,249,0)
(564,24,0)
(466,161,0)
(283,153,0)
(528,351,0)
(271,383,0)
(336,970,0)
(339,597,0)
(824,165,0)
(849,846,0)
(118,334,0)
(926,746,0)
(915,986,0)
(738,436,0)
(601,1070,0)
(523,1079,0)
(899,1043,0)
(720,970,0)
(1013,19,0)
(470,1061,0)
(1060,222,0)
(950,436,0)
(143,184,0)
(636,590,0)
(25,581,0)
(74,455,0)
(60,961,0)
(101,552,0)
(75,738,0)
(907,347,0)
(310,715,0)
(592,24,0)
(36,519,0)
(162,960,0)
(760,1046,0)
(800,359,0)
(468,302,0)
(69,802,0)
(944,249,0)
(730,944,0)
(491,266,0)
(650,798,0)
(964,956,0)
(976,846,0)
(781,802,0)
(354,272,0)
(505,1043,0)
(576,801,0)
(207,1070,0)
(732,738,0)
(935,11,0)
(987,889,0)
(630,359,0)
(346,1079,0)
(963,437,0)
(459,590,0)
(1039,418,0)
(137,770,0)
(791,177,0)
(165,774,0)
(838,218,0)
(478,483,0)
(650,480,0)
(901,194,0)
(873,346,0)
(1012,1070,0)
(128,362,0)
(606,781,0)
(27,368,0)
(122,359,0)
(215,79,0)
(787,55,0)
(838,232,0)
(503,913,0)
(1004,472,0)
(409,388,0)
(720,939,0)
(93,1109,0)
(757,1003,0)
(511,802,0)
(479,964,0)
(298,302,0)
(1114,488,0)
(147,834,0)
(385,76,0)
(630,726,0)
(107,624,0)
(608,694,0)
(683,1017,0)
(335,589,0)
(1049,800,0)
(114,802,0)
(969,845,0)
(746,926,0)
(333,359,0)
(191,319,0)
(812,222,0)
(752,321,0)
(807,351,0)
(233,970,0)
(872,229,0)
(1038,332,0)
(122,450,0)
(704,746,0)
(575,359,0)
(1108,596,0)
(735,1128,0)
(220,188,0)
(287,569,0)
(751,74,0)
(808,465,0)
(102,982,0)
(248,333,0)
(615,273,0)
(546,465,0)
(634,981,0)
(20,1017,0)
(497,986,0)
(278,396,0)
(779,802,0)
(593,949,0)
(202,249,0)
(697,781,0)
(528,659,0)
(1115,1043,0)
(918,334,0)
(837,516,0)
(43,182,0)
(949,1084,0)
(310,456,0)
(44,359,0)
(135,844,0)
(670,878,0)
(28,359,0)
(188,1103,0)
(894,466,0)
(111,858,0)
(436,738,0)
(401,853,0)
(371,501,0)
(182,43,0)
(799,804,0)
(396,278,0)
(1065,377,0)
(836,770,0)
(833,396,0)
(967,517,0)
(99,453,0)
(798,474,0)
(1065,1103,0)
(765,182,0)
(510,571,0)
(843,497,0)
(502,182,0)
(741,804,0)
(893,359,0)
(494,546,0)
(7,152,0)
(295,438,0)
(443,233,0)
(208,714,0)
(527,1043,0)
(1044,501,0)
(466,894,0)
(955,923,0)
(224,785,0)
(560,359,0)
(309,379,0)
(584,920,0)
(1002,359,0)
(264,884,0)
(453,60,0)
(488,359,0)
(1020,350,0)
(26,455,0)
(845,550,0)
(162,470,0)
(79,215,0)
(183,632,0)
(194,596,0)
(606,359,0)
(707,515,0)
(751,13,0)
(557,222,0)
(690,170,0)
(785,359,0)
(1130,756,0)
(200,659,0)
(165,699,0)
(535,1120,0)
(460,1085,0)
(894,759,0)
(1006,218,0)
(524,188,0)
(363,559,0)
(776,730,0)
(753,76,0)
(736,752,0)
(830,1004,0)
(509,216,0)
(257,300,0)
(996,67,0)
(350,1020,0)
(536,963,0)
(1128,334,0)
(694,144,0)
(480,650,0)
(420,359,0)
(381,191,0)
(124,1041,0)
(887,802,0)
(76,450,0)
(237,717,0)
(275,116,0)
(152,349,0)
(463,413,0)
(356,784,0)
(627,780,0)
(558,351,0)
(896,903,0)
(960,249,0)
(770,137,0)
(395,1012,0)
(974,714,0)
(34,295,0)
(36,448,0)
(501,1044,0)
(334,143,0)
(878,670,0)
(470,162,0)
(728,362,0)
(161,466,0)
(744,495,0)
(459,359,0)
(585,1070,0)
(743,263,0)
(313,181,0)
(1028,680,0)
(284,27,0)
(194,446,0)
(146,555,0)
(924,391,0)
(403,918,0)
(979,648,0)
(272,354,0)
(351,807,0)
(396,1070,0)
(638,741,0)
(338,1080,0)
(600,874,0)
(759,894,0)
(314,536,0)
(564,981,0)
(355,970,0)
(865,126,0)
(1050,515,0)
(854,868,0)
(977,162,0)
(697,858,0)
(1002,334,0)
(214,35,0)
(665,56,0)
(844,802,0)
(553,657,0)
(336,1131,0)
(640,334,0)
(789,628,0)
(723,765,0)
(641,726,0)
(541,802,0)
(488,12,0)
(91,802,0)
(1004,617,0)
(1078,587,0)
(763,917,0)
(430,699,0)
(350,931,0)
(359,1008,0)
(939,720,0)
(131,802,0)
(13,751,0)
(673,700,0)
(253,1030,0)
(170,359,0)
(680,249,0)
(66,761,0)
(743,867,0)
(518,55,0)
(575,1000,0)
(0,28,0)
(559,18,0)
(903,896,0)
(557,692,0)
(681,160,0)
(537,802,0)
(119,354,0)
(160,359,0)
(1065,738,0)
(1062,1002,0)
(454,359,0)
(458,366,0)
(384,944,0)
(800,960,0)
(1042,376,0)
(166,244,0)
(206,956,0)
(749,697,0)
(838,744,0)
(462,1027,0)
(5,143,0)
(79,334,0)
(1112,956,0)
(520,651,0)
(981,359,0)
(1001,470,0)
(492,924,0)
(1038,957,0)
(405,1019,0)
(407,266,0)
(450,643,0)
(941,944,0)
(417,562,0)
(668,802,0)
(496,331,0)
(916,1080,0)
(464,710,0)
(1079,1043,0)
(441,244,0)
(981,334,0)
(959,940,0)
(670,447,0)
(1047,804,0)
(708,1112,0)
(949,983,0)
(522,1028,0)
(1025,639,0)
(1113,108,0)
(160,334,0)
(639,649,0)
(1107,684,0)
(904,356,0)
(562,992,0)
(762,807,0)
(488,334,0)
(483,614,0)
(1017,334,0)
(217,784,0)
(130,949,0)
(771,904,0)
(652,811,0)
(1086,1043,0)
(759,673,0)
(378,802,0)
(919,640,0)
(575,334,0)
(219,680,0)
(176,1043,0)
(755,359,0)
(1031,29,0)
(260,334,0)
(250,253,0)
(1040,321,0)
(39,473,0)
(142,438,0)
(778,61,0)
(70,802,0)
(908,356,0)
(752,1000,0)
(894,368,0)
(84,802,0)
(134,391,0)
(429,557,0)
(357,586,0)
(8,249,0)
(911,95,0)
(460,306,0)
(149,668,0)
(937,802,0)
(256,1076,0)
(799,328,0)
(761,334,0)
(355,359,0)
(849,480,0)
(678,269,0)
(440,359,0)
(827,456,0)
(306,359,0)
(452,1084,0)
(157,803,0)
(240,188,0)
(419,463,0)
(341,272,0)
(406,526,0)
(591,391,0)
(353,278,0)
(1065,990,0)
(783,384,0)
(858,368,0)
(651,961,0)
(214,285,0)
(57,359,0)
(1002,715,0)
(451,802,0)
(573,949,0)
(474,798,0)
(713,729,0)
(820,359,0)
(1045,1043,0)
(972,892,0)
(765,723,0)
(834,474,0)
(302,468,0)
(803,388,0)
(970,917,0)
(838,781,0)
(694,608,0)
(577,359,0)
(294,981,0)
(182,765,0)
(571,413,0)
(1003,674,0)
(991,324,0)
(982,472,0)
(95,24,0)
(449,340,0)
(405,800,0)
(85,680,0)
(1072,802,0)
(65,103,0)
(567,986,0)
(330,296,0)
(469,1050,0)
(484,799,0)
(742,581,0)
(418,1039,0)
(174,289,0)
(702,180,0)
(167,744,0)
(263,867,0)
(944,540,0)
(382,79,0)
(272,359,0)
(218,307,0)
(729,802,0)
(321,752,0)
(210,392,0)
(425,72,0)
(878,359,0)
(24,871,0)
(12,340,0)
(935,1124,0)
(342,153,0)
(414,643,0)
(399,849,0)
(740,170,0)
(687,369,0)
(642,249,0)
(499,222,0)
(551,723,0)
(365,70,0)
(90,1124,0)
(874,220,0)
(909,405,0)
(28,307,0)
(624,335,0)
(1112,1063,0)
(983,867,0)
(1051,802,0)
(421,414,0)
(921,657,0)
(109,837,0)
(247,1118,0)
(465,335,0)
(19,801,0)
(383,802,0)
(687,359,0)
(689,528,0)
(920,1103,0)
(826,328,0)
(852,776,0)
(238,485,0)
(262,643,0)
(848,186,0)
(559,334,0)
(834,986,0)
(750,137,0)
(861,122,0)
(348,755,0)
(1101,1019,0)
(862,1041,0)
(539,915,0)
(386,985,0)
(212,1130,0)
(1017,359,0)
(964,190,0)
(150,445,0)
(82,29,0)
(165,249,0)
(1111,156,0)
(956,964,0)
(52,617,0)
(223,939,0)
(596,359,0)
(395,517,0)
(1121,466,0)
(611,759,0)
(752,36,0)
(748,79,0)
(1094,802,0)
(3,418,0)
(721,359,0)
(619,940,0)
(704,57,0)
(189,648,0)
(730,359,0)
(394,1128,0)
(506,692,0)
(618,577,0)
(601,1123,0)
(1018,802,0)
(803,641,0)
(165,330,0)
(487,555,0)
(419,628,0)
(688,417,0)
(662,672,0)
(95,334,0)
(733,867,0)
(840,799,0)
(612,501,0)
(272,450,0)
(700,673,0)
(193,668,0)
(299,519,0)
(587,72,0)
(116,495,0)
(1095,820,0)
(340,802,0)
(953,1043,0)
(564,802,0)
(447,309,0)
(1074,459,0)
(971,1020,0)
(645,735,0)
(564,244,0)
(985,334,0)
(548,763,0)
(857,1014,0)
(549,1042,0)
(319,334,0)
(594,802,0)
(799,484,0)
(332,334,0)
(1041,359,0)
(137,8,0)
(170,960,0)
(267,154,0)
(225,8,0)
(586,944,0)
(820,438,0)
(1069,126,0)
(1087,628,0)
(233,277,0)
(744,838,0)
(674,222,0)
(57,704,0)
(888,1009,0)
(1132,545,0)
(940,959,0)
(108,359,0)
(476,604,0)
(949,721,0)
(424,260,0)
(863,604,0)
(303,249,0)
(1050,388,0)
(754,946,0)
(59,533,0)
(230,57,0)
(40,659,0)
(42,685,0)
(169,931,0)
(813,802,0)
(186,551,0)
(297,437,0)
(448,36,0)
(1022,961,0)
(320,71,0)
(1028,1063,0)
(538,802,0)
(205,218,0)
(922,802,0)
(720,307,0)
(796,894,0)
(1124,804,0)
(648,359,0)
(105,35,0)
(172,447,0)
(696,1018,0)
(786,802,0)
(307,258,0)
(13,854,0)
(154,949,0)
(359,885,0)
(568,802,0)
(332,1038,0)
(181,412,0)
(734,48,0)
(317,1120,0)
(571,692,0)
(940,303,0)
(515,983,0)
(87,992,0)
(735,805,0)
(564,453,0)
(151,487,0)
(957,60,0)
(863,1070,0)
(110,420,0)
(934,1012,0)
(498,13,0)
(564,440,0)
(1071,50,0)
(18,559,0)
(675,792,0)
(564,76,0)
(375,755,0)
(1130,617,0)
(853,94,0)
(724,952,0)
(253,918,0)
(274,222,0)
(1123,694,0)
(190,964,0)
(178,102,0)
(474,846,0)
(831,656,0)
(347,366,0)
(551,186,0)
(564,906,0)
(343,1063,0)
(892,450,0)
(1081,241,0)
(772,915,0)
(102,359,0)
(1,215,0)
(21,85,0)
(821,577,0)
(701,802,0)
(1097,459,0)
(876,1010,0)
(285,214,0)
(630,334,0)
(641,803,0)
(266,907,0)
(578,802,0)
(474,834,0)
(603,945,0)
(132,269,0)
(715,1002,0)
(423,180,0)
(91,1035,0)
(6,44,0)
(35,359,0)
(180,423,0)
(986,718,0)
(437,963,0)
(832,472,0)
(1007,915,0)
(997,174,0)
(640,359,0)
(282,272,0)
(929,1043,0)
(216,509,0)
(604,19,0)
(614,222,0)
(904,771,0)
(156,737,0)
(564,417,0)
(456,827,0)
(569,1103,0)
(639,359,0)
(71,450,0)
(842,44,0)
(649,639,0)
(573,772,0)
(692,571,0)
(351,528,0)
(85,186,0)
(983,211,0)
(1041,450,0)
(345,1020,0)
(956,1112,0)
(11,160,0)
(896,200,0)
(1065,758,0)
(1009,888,0)
(47,557,0)
(884,264,0)
(897,802,0)
(418,359,0)
(393,802,0)
(259,770,0)
(154,986,0)
(440,307,0)
(53,1043,0)
(777,483,0)
(1053,891,0)
(348,618,0)
(1065,249,0)
(454,438,0)
(775,232,0)
(745,630,0)
(177,44,0)
(14,1043,0)
(1003,334,0)
(588,970,0)
(1035,91,0)
(221,440,0)
(232,775,0)
(978,755,0)
(767,331,0)
(818,958,0)
(555,487,0)
(86,328,0)
(136,884,0)
(715,310,0)
(870,222,0)
(561,91,0)
(432,300,0)
(663,49,0)
(949,154,0)
(1061,470,0)
(198,918,0)
(517,395,0)
(420,334,0)
(936,160,0)
(252,896,0)
(179,232,0)
(717,802,0)
(37,802,0)
(579,89,0)
(1059,359,0)
(165,990,0)
(516,837,0)
(126,249,0)
(565,704,0)
(261,774,0)
(1129,256,0)
(721,334,0)
(547,935,0)
(123,656,0)
(396,926,0)
(577,307,0)
(1120,700,0)
(24,95,0)
(116,359,0)
(1035,420,0)
(931,350,0)
(414,359,0)
(945,946,0)
(542,1011,0)
(529,586,0)
(349,152,0)
(165,331,0)
(1009,29,0)
(106,966,0)
(120,1130,0)
(277,233,0)
(195,292,0)
(858,697,0)
(402,649,0)
(489,889,0)
(256,533,0)
(990,540,0)
(397,802,0)
(666,532,0)
(793,680,0)
(711,730,0)
(988,802,0)
(893,533,0)
(879,746,0)
(218,359,0)
(301,418,0)
(253,250,0)
(655,154,0)
(839,534,0)
(532,259,0)
(1068,1103,0)
(885,359,0)
(890,450,0)
(73,187,0)
(412,802,0)
(822,802,0)
(88,309,0)
(450,890,0)
(513,892,0)
(36,983,0)
(1019,510,0)
(437,93,0)
(244,944,0)
(590,961,0)
(800,405,0)
(695,388,0)
(963,536,0)
(892,359,0)
(472,982,0)
(315,1054,0)
(9,687,0)
(1133,1102,0)
(235,1043,0)
(331,78,0)
(307,249,0)
(12,488,0)
(684,307,0)
(747,907,0)
(679,1026,0)
(621,931,0)
(196,1014,0)
(625,379,0)
(1084,949,0)
(1014,388,0)
(889,986,0)
(68,462,0)
(735,641,0)
(328,799,0)
(608,260,0)
(1005,802,0)
(716,545,0)
(866,721,0)
(871,506,0)
(249,642,0)
(455,412,0)
(346,729,0)
(391,519,0)
(672,692,0)
(1065,966,0)
(241,780,0)
(869,333,0)
(97,20,0)
(810,289,0)
(706,800,0)
(133,623,0)
(54,802,0)
(1128,359,0)
(532,903,0)
(807,307,0)
(714,8,0)
(952,718,0)
(654,319,0)
(370,144,0)
(50,142,0)
(851,961,0)
(381,1038,0)
(785,334,0)
(650,497,0)
(550,845,0)
(29,1009,0)
(1000,575,0)
(50,61,0)
(416,377,0)
(113,606,0)
(671,1084,0)
(863,402,0)
(889,552,0)
(985,359,0)
(487,986,0)
(673,759,0)
(372,93,0)
(653,1103,0)
(335,407,0)
(792,446,0)
(463,419,0)
(481,1131,0)
(144,1012,0)
(610,295,0)
(185,141,0)
(138,802,0)
(960,914,0)
(755,348,0)
(615,8,0)
(766,104,0)
(1120,970,0)
(628,419,0)
(847,802,0)
(171,233,0)
(939,775,0)
(898,311,0)
(1034,333,0)
(782,1002,0)
(966,1023,0)
(952,273,0)
(228,577,0)
(624,772,0)
(516,13,0)
(265,926,0)
(438,78,0)
(35,214,0)
(895,303,0)
(173,20,0)
(752,736,0)
(213,1118,0)
(4,564,0)
(495,744,0)
(1059,781,0)
(390,347,0)
(193,564,0)
(545,62,0)
(402,863,0)
(459,781,0)
(360,417,0)
(648,680,0)
(918,359,0)
(162,359,0)
(62,674,0)
(874,973,0)
(203,319,0)
(841,115,0)
(1032,989,0)
(582,641,0)
(957,153,0)
(413,463,0)
(226,536,0)
(601,792,0)
(362,334,0)
(413,571,0)
(285,28,0)
(377,802,0)
(457,787,0)
(659,200,0)
(677,162,0)
(564,606,0)
(694,1123,0)
(453,961,0)
(772,573,0)
(415,846,0)
(15,585,0)
(152,264,0)
(705,448,0)
(641,735,0)
(433,580,0)
(825,220,0)
(204,673,0)
(685,797,0)
(943,269,0)
(85,359,0)
(33,959,0)
(293,432,0)
(718,952,0)
(295,359,0)
(495,116,0)
(1109,93,0)
(564,355,0)
(60,471,0)
(1106,377,0)
(720,359,0)
(461,802,0)
(849,263,0)
(57,944,0)
(468,335,0)
(398,827,0)
(191,381,0)
(566,122,0)
(148,615,0)
(232,838,0)
(1077,554,0)
(93,437,0)
(975,802,0)
(411,907,0)
(957,71,0)
(828,139,0)
(22,575,0)
(807,970,0)
(605,1017,0)
(837,289,0)
(770,259,0)
(140,342,0)
(95,359,0)
(1057,758,0)
(165,758,0)
(676,963,0)
(738,732,0)
(714,974,0)
(727,802,0)
(1123,601,0)
(1036,310,0)
(569,719,0)
(143,334,0)
(1019,405,0)
(1088,142,0)
(227,1085,0)
(629,429,0)
(32,1059,0)
(721,949,0)
(48,1104,0)
(613,615,0)
(49,359,0)
(484,190,0)
(1065,699,0)
(13,516,0)
(1090,580,0)
(1012,144,0)
(134,884,0)
(693,355,0)
(115,1070,0)
(784,217,0)
(726,630,0)
(633,802,0)
(806,893,0)
(200,368,0)
(369,802,0)
(684,359,0)
(389,601,0)
(910,180,0)
(225,359,0)
(827,61,0)
(807,359,0)
(586,359,0)
(268,684,0)
(973,874,0)
(1084,335,0)
(903,532,0)
(1014,196,0)
(906,359,0)
(30,596,0)
(574,729,0)
(622,793,0)
(920,526,0)
(1,1076,0)
(108,802,0)
(362,359,0)
(623,931,0)
(358,1043,0)
(332,359,0)
(516,449,0)
(980,187,0)
(98,488,0)
(1131,336,0)
(700,1120,0)
(761,211,0)
(273,952,0)
(794,56,0)
(618,348,0)
(736,391,0)
(739,624,0)
(447,670,0)
(657,115,0)
(19,604,0)
(1015,820,0)
(422,699,0)
(915,772,0)
(508,342,0)
(137,562,0)
(316,217,0)
(1064,376,0)
(552,263,0)
(615,359,0)
(933,262,0)
(173,340,0)
(1065,331,0)
(514,102,0)
(1085,460,0)
(96,1059,0)
(680,1023,0)
(986,366,0)
(28,285,0)
(772,624,0)
(648,234,0)
(1110,270,0)
(445,846,0)
(766,931,0)
(20,379,0)
(197,303,0)
(56,1089,0)
(155,854,0)
(829,639,0)
(628,359,0)
(475,57,0)
(361,368,0)
(672,222,0)
(905,474,0)
(984,1082,0)
(354,388,0)
(11,935,0)
(367,307,0)
(886,196,0)
(325,134,0)
(694,253,0)
(880,1128,0)
(410,49,0)
(312,409,0)
(639,781,0)
(250,278,0)
(1012,395,0)
(989,379,0)
(902,330,0)
(239,388,0)
(127,951,0)
(453,122,0)
(643,262,0)
(392,1026,0)
(336,359,0)
(340,12,0)
(758,914,0)
(1093,802,0)
(1003,359,0)
(968,36,0)
(926,396,0)
(925,966,0)
(1038,1125,0)
(543,260,0)
(798,187,0)
(570,87,0)
(815,454,0)
(792,601,0)
(192,321,0)
(319,359,0)
(958,640,0)
(761,359,0)
(1073,957,0)
(602,606,0)
(533,893,0)
(1107,917,0)
(609,1079,0)
(635,904,0)
(994,802,0)
(209,1070,0)
(1066,487,0)
(855,336,0)
(29,334,0)
(180,359,0)
(1061,311,0)
(448,334,0)
(564,354,0)
(446,194,0)
(236,575,0)
(286,28,0)
(572,383,0)
(835,273,0)
(703,920,0)
(142,359,0)
(215,222,0)
(616,446,0)
(493,990,0)
(122,453,0)
(71,359,0)
(254,95,0)
(1065,304,0)
(998,983,0)
(530,349,0)
(305,906,0)
(871,222,0)
(626,784,0)
(180,944,0)
(564,820,0)
(788,960,0)
(930,684,0)
(143,719,0)
(1100,697,0)
(620,336,0)
(597,104,0)
(993,802,0)
(473,364,0)
(384,801,0)
(477,1043,0)
(196,347,0)
(1010,43,0)
(912,1054,0)
(354,951,0)
(1029,721,0)
(290,217,0)
(1120,307,0)
(949,263,0)
(817,506,0)
(661,878,0)
(1119,497,0)
(906,960,0)
(190,484,0)
(380,216,0)
(628,960,0)
(512,985,0)
(1046,913,0)
(20,173,0)
(501,438,0)
(586,349,0)
(755,8,0)
(381,342,0)
(773,468,0)
(646,168,0)
(717,785,0)
(142,50,0)
(1000,752,0)
(260,359,0)
(44,177,0)
(507,454,0)
(668,717,0)
(552,101,0)
(607,295,0)
(1117,868,0)
(785,717,0)
(962,1043,0)
(1122,923,0)
(669,12,0)
(985,1130,0)
(790,906,0)
(769,714,0)
(709,720,0)
(62,545,0)
(932,834,0)
(1039,992,0)
(442,440,0)
(1076,1,0)
(104,362,0)
(56,307,0)
(559,359,0)
(554,359,0)
(125,261,0)
(200,896,0)
(44,334,0)
(177,871,0)
(954,306,0)
(856,804,0)
(697,359,0)
(699,258,0)
(77,589,0)
(467,758,0)
(918,253,0)
(165,966,0)
(318,642,0)
(1089,56,0)
(266,407,0)
(1065,330,0)
(942,554,0)
(725,413,0)
(1067,720,0)
(1060,177,0)
(1085,161,0)
(23,1043,0)
(264,152,0)
(455,74,0)
(408,369,0)
(637,225,0)
(564,225,0)
(48,359,0)
(1092,1043,0)
(1128,735,0)
(35,8,0)
(374,785,0)
(891,1053,0)
(336,307,0)
(328,359,0)
(859,771,0)
(643,450,0)
(418,8,0)
(798,650,0)
(104,597,0)
(36,752,0)
(1016,646,0)
(61,50,0)
(928,8,0)
(8,296,0)
(1102,1082,0)
(746,704,0)
(234,648,0)
(17,793,0)
(793,359,0)
(667,560,0)
(1091,730,0)
(199,420,0)
(649,402,0)
(41,414,0)
(289,837,0)
(497,650,0)
(1020,359,0)
(644,1109,0)
(949,867,0)
(1021,623,0)
(631,854,0)
(134,388,0)
(32,153,0)
(819,412,0)
(781,838,0)
(244,359,0)
(875,225,0)
(726,641,0)
(1126,1122,0)
(938,551,0)
(266,388,0)
(1050,892,0)
(995,916,0)
(486,1043,0)
(604,863,0)
(775,939,0)
(51,766,0)
(1038,381,0)
(1075,170,0)
(211,983,0)
(333,248,0)
(691,1053,0)
(718,986,0)
(71,957,0)
(714,359,0)
(436,719,0)
(844,738,0)
(893,960,0)
(428,560,0)
(550,347,0)
(38,990,0)
(74,751,0)
(1063,1112,0)
(46,743,0)
(1096,867,0)
(583,1103,0)
(187,798,0)
(536,359,0)
(642,719,0)
(289,174,0)
(10,70,0)
(1017,20,0)
(850,449,0)
(242,559,0)
(337,736,0)
(160,11,0)
(884,366,0)
(426,723,0)
(444,1090,0)
(951,877,0)
(139,617,0)
(795,864,0)
(309,447,0)
(1131,845,0)
(384,359,0)
(324,153,0)
(18,698,0)
(900,368,0)
(404,893,0)
(472,1004,0)
(58,630,0)
(506,871,0)
(2,761,0)
(1048,355,0)
(614,483,0)
(712,35,0)
(809,116,0)
(860,340,0)
(144,694,0)
(615,562,0)
(311,1061,0)
(768,463,0)
(1076,256,0)
(186,85,0)
(1065,261,0)
(1056,802,0)
(356,904,0)
(883,142,0)
(281,213,0)
(255,736,0)
(596,944,0)
(563,807,0)
(500,617,0)
(814,802,0)
(164,332,0)
(420,1035,0)
(334,118,0)
(1130,985,0)
(112,802,0)
(161,1085,0)
(1011,802,0)
(598,200,0)
(801,19,0)
(448,359,0)
(1099,448,0)
(723,551,0)
(449,516,0)
(92,222,0)
(776,517,0)
(349,586,0)
(279,332,0)
(43,1010,0)
(288,379,0)
(643,414,0)
(295,610,0)
(657,359,0)
(533,256,0)
(217,438,0)
(571,510,0)
(555,846,0)
(1124,935,0)
(660,1061,0)
(431,395,0)
(531,1065,0)
(434,419,0)
(735,983,0)
(684,1107,0)
(319,191,0)
(811,948,0)
(291,700,0)
(947,878,0)
(342,381,0)
(129,101,0)
(564,849,0)
(263,552,0)
(260,608,0)
(303,940,0)
(439,1018,0)
(218,970,0)
(175,1028,0)
(327,653,0)
(83,32,0)
(596,194,0)
(1010,359,0)
(400,330,0)
(31,60,0)
(29,359,0)
(951,388,0)
(510,1019,0)
(145,973,0)
(220,874,0)
(595,1043,0)
(243,137,0)
(137,359,0)
(999,153,0)
(949,573,0)
(577,970,0)
(352,438,0)
(958,818,0)
(823,263,0)
(362,104,0)
(552,889,0)
(76,359,0)
(454,174,0)
(322,1123,0)
(117,692,0)
(1055,306,0)
(1041,250,0)
(308,134,0)
(1083,948,0)
(387,614,0)
(882,269,0)
(159,1059,0)
(276,849,0)
(640,958,0)
(16,621,0)
(517,776,0)
(1033,259,0)
(674,62,0)
(323,692,0)
(647,1053,0)
(656,359,0)
(1059,32,0)
(259,532,0)
(544,381,0)
(56,359,0)
(501,359,0)
(188,220,0)
(1053,738,0)
(1010,334,0)
(957,1038,0)
(177,1060,0)
(526,920,0)
(536,438,0)
(1098,766,0)
(163,1003,0)
(1058,803,0)
(525,802,0)
(104,766,0)
(169,18,0)
(881,863,0)
(253,694,0)
(407,335,0)
(391,134,0)
(187,335,0)
(121,658,0)
(845,1131,0)
(1116,510,0)
(215,1,0)
(515,867,0)
(964,804,0)
(278,250,0)
(61,827,0)
(1020,334,0)
(674,1003,0)
(18,169,0)
(306,460,0)
(1008,359,0)
(927,1043,0)
(446,792,0)
(1024,931,0)
(79,359,0)
(455,854,0)
(659,528,0)
(218,838,0)
(74,1109,0)
(280,261,0)
(1037,143,0)
(102,334,0)
(764,1010,0)
(465,546,0)
(158,169,0)
(730,776,0)
(959,686,0)
(347,550,0)
(321,391,0)
(328,334,0)
(246,775,0)
(892,1050,0)
(784,356,0)
(965,71,0)
(116,334,0)
(64,173,0)
(1103,569,0)
(564,1050,0)
(556,468,0)
(1103,1068,0)
(250,1041,0)
(1028,359,0)
(251,1011,0)
(427,335,0)
(456,310,0)
(417,359,0)
(435,891,0)
(211,761,0)
(181,854,0)
(326,802,0)
(599,201,0)
(13,412,0)
(174,454,0)
(480,245,0)
(564,793,0)
(233,359,0)
(731,802,0)
(557,429,0)
(657,781,0)
(414,781,0)
(504,412,0)
(373,1030,0)
(233,307,0)
(1105,85,0)
(170,690,0)
(907,266,0)
(982,102,0)
(217,359,0)
(692,222,0)
(722,465,0)
(80,384,0)
(664,364,0)
(801,384,0)
(344,640,0)
(490,359,0)
(45,802,0)
(521,196,0)
(1127,687,0)
(816,169,0)
(63,562,0)
(306,334,0)
(1063,1028,0)
(577,618,0)
(878,334,0)
(333,960,0)
(1109,74,0)
(1120,359,0)
(482,402,0)
(115,657,0)
(329,802,0)
(653,802,0)
(632,201,0)
(590,459,0)
(273,615,0)
(502,723,1)
(564,354,1)
(894,368,1)
(351,558,1)
(1132,1003,1)
(694,1123,1)
(260,359,1)
(545,716,1)
(894,759,1)
(332,279,1)
(770,137,1)
(32,153,1)
(745,645,1)
(559,359,1)
(79,382,1)
(481,336,1)
(721,359,1)
(960,249,1)
(628,789,1)
(517,776,1)
(911,254,1)
(666,259,1)
(883,1088,1)
(690,170,1)
(654,203,1)
(974,714,1)
(550,845,1)
(748,311,1)
(418,8,1)
(321,391,1)
(752,321,1)
(1010,764,1)
(1119,849,1)
(715,1002,1)
(418,359,1)
(434,628,1)
(13,412,1)
(820,1015,1)
(57,944,1)
(430,307,1)
(1040,192,1)
(896,252,1)
(926,265,1)
(233,970,1)
(13,854,1)
(564,453,1)
(803,388,1)
(996,924,1)
(459,1074,1)
(641,803,1)
(170,1075,1)
(246,939,1)
(949,573,1)
(903,532,1)
(1010,334,1)
(1120,970,1)
(827,61,1)
(569,287,1)
(170,960,1)
(1041,124,1)
(991,1038,1)
(146,445,1)
(792,675,1)
(963,676,1)
(772,915,1)
(134,884,1)
(1105,21,1)
(656,831,1)
(19,801,1)
(1061,470,1)
(391,134,1)
(362,128,1)
(243,750,1)
(672,662,1)
(463,768,1)
(198,649,1)
(209,207,1)
(680,249,1)
(529,357,1)
(256,1129,1)
(12,488,1)
(174,454,1)
(689,351,1)
(185,1008,1)
(1047,181,1)
(122,566,1)
(1002,334,1)
(374,237,1)
(71,450,1)
(142,883,1)
(800,706,1)
(35,105,1)
(287,583,1)
(166,423,1)
(81,425,1)
(1065,377,1)
(352,820,1)
(886,521,1)
(963,536,1)
(831,123,1)
(837,289,1)
(181,412,1)
(1120,535,1)
(851,1022,1)
(720,307,1)
(841,585,1)
(695,239,1)
(515,707,1)
(1111,484,1)
(314,455,1)
(424,250,1)
(1031,853,1)
(628,960,1)
(730,1091,1)
(205,606,1)
(767,496,1)
(136,986,1)
(854,631,1)
(657,359,1)
(721,334,1)
(446,194,1)
(167,218,1)
(720,1067,1)
(177,871,1)
(443,171,1)
(183,1068,1)
(428,743,1)
(497,843,1)
(660,470,1)
(1065,531,1)
(482,863,1)
(288,340,1)
(1012,934,1)
(137,359,1)
(1067,709,1)
(85,1105,1)
(203,957,1)
(959,940,1)
(413,725,1)
(514,178,1)
(564,417,1)
(204,700,1)
(409,388,1)
(231,1065,1)
(124,862,1)
(1084,452,1)
(759,611,1)
(605,309,1)
(81,338,1)
(412,819,1)
(1052,100,1)
(614,483,1)
(920,584,1)
(569,719,1)
(1060,177,1)
(272,450,1)
(888,1009,1)
(68,751,1)
(355,1048,1)
(177,791,1)
(328,334,1)
(893,960,1)
(697,781,1)
(154,655,1)
(146,846,1)
(297,963,1)
(539,593,1)
(661,947,1)
(217,359,1)
(895,33,1)
(881,604,1)
(625,288,1)
(419,628,1)
(81,247,1)
(66,998,1)
(506,692,1)
(386,512,1)
(343,1028,1)
(630,359,1)
(835,615,1)
(758,467,1)
(323,692,1)
(307,249,1)
(586,944,1)
(873,249,1)
(776,730,1)
(860,412,1)
(833,926,1)
(336,359,1)
(949,983,1)
(523,609,1)
(560,359,1)
(1050,469,1)
(953,966,1)
(573,772,1)
(1003,757,1)
(90,741,1)
(501,359,1)
(347,550,1)
(413,463,1)
(188,1103,1)
(700,1120,1)
(934,395,1)
(556,546,1)
(169,816,1)
(41,421,1)
(564,1050,1)
(637,875,1)
(152,7,1)
(36,983,1)
(536,438,1)
(499,672,1)
(739,915,1)
(61,50,1)
(489,823,1)
(17,234,1)
(324,991,1)
(915,1007,1)
(137,562,1)
(623,931,1)
(740,1124,1)
(500,590,1)
(960,788,1)
(218,307,1)
(0,286,1)
(348,755,1)
(459,359,1)
(834,986,1)
(1114,98,1)
(313,765,1)
(984,1102,1)
(456,827,1)
(560,667,1)
(597,339,1)
(487,986,1)
(1006,205,1)
(673,700,1)
(907,347,1)
(21,554,1)
(28,0,1)
(180,944,1)
(325,308,1)
(126,865,1)
(470,162,1)
(610,295,1)
(81,599,1)
(735,983,1)
(708,1063,1)
(111,27,1)
(2,66,1)
(602,113,1)
(116,275,1)
(267,1084,1)
(777,478,1)
(81,664,1)
(671,721,1)
(116,359,1)
(449,850,1)
(624,335,1)
(1003,334,1)
(233,359,1)
(798,187,1)
(262,933,1)
(257,432,1)
(400,902,1)
(1057,960,1)
(957,60,1)
(570,348,1)
(1024,32,1)
(510,1019,1)
(528,689,1)
(740,646,1)
(182,43,1)
(878,359,1)
(905,187,1)
(151,1066,1)
(1065,990,1)
(450,643,1)
(1065,331,1)
(122,359,1)
(712,28,1)
(165,966,1)
(180,359,1)
(687,9,1)
(512,1004,1)
(389,792,1)
(954,227,1)
(735,641,1)
(8,249,1)
(423,180,1)
(216,509,1)
(193,564,1)
(449,340,1)
(311,898,1)
(599,632,1)
(76,359,1)
(406,920,1)
(213,281,1)
(874,220,1)
(81,795,1)
(437,963,1)
(919,344,1)
(498,309,1)
(495,116,1)
(1024,115,1)
(628,359,1)
(448,359,1)
(180,910,1)
(543,424,1)
(772,624,1)
(1050,892,1)
(750,896,1)
(559,242,1)
(842,6,1)
(357,136,1)
(445,846,1)
(762,161,1)
(852,730,1)
(165,249,1)
(145,874,1)
(139,828,1)
(875,974,1)
(281,649,1)
(20,97,1)
(600,220,1)
(212,120,1)
(596,944,1)
(60,961,1)
(19,1013,1)
(1069,959,1)
(228,285,1)
(387,557,1)
(43,1010,1)
(667,428,1)
(884,264,1)
(677,977,1)
(309,379,1)
(1017,334,1)
(564,606,1)
(93,437,1)
(189,979,1)
(1058,582,1)
(280,165,1)
(328,359,1)
(289,810,1)
(79,359,1)
(1079,523,1)
(688,1039,1)
(806,404,1)
(1065,738,1)
(577,970,1)
(244,441,1)
(894,796,1)
(584,703,1)
(616,194,1)
(34,607,1)
(902,8,1)
(597,104,1)
(509,249,1)
(734,231,1)
(237,91,1)
(223,720,1)
(928,225,1)
(791,44,1)
(155,173,1)
(684,307,1)
(256,533,1)
(385,656,1)
(849,263,1)
(761,334,1)
(1048,693,1)
(679,392,1)
(407,266,1)
(4,231,1)
(694,144,1)
(1003,359,1)
(81,257,1)
(375,978,1)
(368,900,1)
(800,960,1)
(1017,683,1)
(576,384,1)
(1120,307,1)
(218,970,1)
(1055,954,1)
(736,391,1)
(985,334,1)
(81,984,1)
(214,35,1)
(949,154,1)
(743,263,1)
(650,497,1)
(494,465,1)
(1011,542,1)
(683,605,1)
(891,1053,1)
(233,307,1)
(81,627,1)
(1019,405,1)
(957,153,1)
(787,457,1)
(456,310,1)
(978,618,1)
(826,86,1)
(392,210,1)
(939,223,1)
(559,334,1)
(117,311,1)
(241,1081,1)
(879,704,1)
(40,528,1)
(1103,569,1)
(642,318,1)
(606,359,1)
(944,249,1)
(858,697,1)
(755,359,1)
(592,95,1)
(846,976,1)
(533,893,1)
(771,904,1)
(800,359,1)
(250,278,1)
(81,1083,1)
(440,221,1)
(173,64,1)
(398,61,1)
(312,302,1)
(749,1100,1)
(432,293,1)
(1039,418,1)
(933,414,1)
(173,340,1)
(490,1011,1)
(1049,413,1)
(795,732,1)
(564,981,1)
(951,127,1)
(900,361,1)
(221,442,1)
(1095,610,1)
(1081,890,1)
(338,916,1)
(990,38,1)
(845,1131,1)
(336,970,1)
(1020,345,1)
(323,682,1)
(844,135,1)
(725,463,1)
(319,654,1)
(5,981,1)
(390,277,1)
(486,1079,1)
(115,657,1)
(926,746,1)
(611,673,1)
(1100,111,1)
(289,174,1)
(604,19,1)
(172,88,1)
(921,553,1)
(1021,133,1)
(318,202,1)
(630,334,1)
(165,990,1)
(249,642,1)
(528,351,1)
(893,806,1)
(232,775,1)
(395,431,1)
(59,893,1)
(333,359,1)
(515,983,1)
(266,491,1)
(226,314,1)
(452,671,1)
(964,804,1)
(295,359,1)
(100,953,1)
(437,297,1)
(655,267,1)
(109,289,1)
(995,903,1)
(100,1086,1)
(729,574,1)
(830,139,1)
(751,13,1)
(104,362,1)
(294,346,1)
(647,691,1)
(79,334,1)
(1025,829,1)
(965,320,1)
(51,1098,1)
(585,15,1)
(855,390,1)
(675,446,1)
(924,492,1)
(668,717,1)
(266,388,1)
(53,330,1)
(1034,869,1)
(501,371,1)
(906,359,1)
(973,145,1)
(703,1068,1)
(385,858,1)
(115,1070,1)
(681,936,1)
(624,107,1)
(985,359,1)
(1044,501,1)
(65,1052,1)
(961,851,1)
(807,359,1)
(1065,261,1)
(1088,1044,1)
(601,389,1)
(1046,760,1)
(88,379,1)
(684,359,1)
(828,1130,1)
(496,438,1)
(298,468,1)
(769,208,1)
(465,335,1)
(433,1090,1)
(15,253,1)
(174,997,1)
(1068,1103,1)
(1012,1070,1)
(648,359,1)
(546,494,1)
(20,1017,1)
(558,807,1)
(149,108,1)
(355,359,1)
(81,433,1)
(163,614,1)
(588,355,1)
(290,751,1)
(161,1085,1)
(799,328,1)
(1042,549,1)
(402,482,1)
(82,1031,1)
(880,560,1)
(1045,610,1)
(672,692,1)
(639,1025,1)
(740,554,1)
(803,157,1)
(564,793,1)
(761,359,1)
(234,648,1)
(160,681,1)
(976,415,1)
(924,391,1)
(603,690,1)
(532,259,1)
(3,87,1)
(81,679,1)
(143,184,1)
(783,80,1)
(784,626,1)
(642,719,1)
(1004,472,1)
(674,62,1)
(476,19,1)
(869,126,1)
(448,334,1)
(350,1020,1)
(421,76,1)
(773,556,1)
(575,236,1)
(1065,966,1)
(144,370,1)
(139,617,1)
(585,1070,1)
(417,359,1)
(1084,335,1)
(999,283,1)
(878,661,1)
(162,960,1)
(1045,331,1)
(1090,444,1)
(551,186,1)
(751,74,1)
(466,894,1)
(1059,781,1)
(268,930,1)
(164,32,1)
(462,68,1)
(469,892,1)
(644,93,1)
(536,226,1)
(981,359,1)
(193,668,1)
(1112,1063,1)
(431,517,1)
(87,570,1)
(1070,209,1)
(86,1124,1)
(133,931,1)
(998,555,1)
(306,334,1)
(636,651,1)
(57,230,1)
(1128,359,1)
(1018,696,1)
(61,778,1)
(81,754,1)
(645,1128,1)
(1007,539,1)
(196,347,1)
(804,856,1)
(46,515,1)
(653,327,1)
(621,931,1)
(728,623,1)
(142,359,1)
(285,28,1)
(196,886,1)
(555,487,1)
(415,263,1)
(1069,216,1)
(302,468,1)
(218,359,1)
(957,71,1)
(507,815,1)
(595,699,1)
(908,784,1)
(483,777,1)
(159,96,1)
(436,950,1)
(353,396,1)
(106,680,1)
(874,600,1)
(871,506,1)
(1091,711,1)
(989,379,1)
(405,800,1)
(16,597,1)
(951,388,1)
(1038,332,1)
(944,941,1)
(544,191,1)
(410,1004,1)
(20,379,1)
(721,1029,1)
(790,248,1)
(419,434,1)
(566,861,1)
(211,761,1)
(402,863,1)
(840,328,1)
(717,785,1)
(1059,359,1)
(958,640,1)
(752,736,1)
(898,1061,1)
(770,836,1)
(819,504,1)
(453,961,1)
(807,563,1)
(982,102,1)
(71,965,1)
(1041,450,1)
(752,1000,1)
(615,562,1)
(856,1047,1)
(202,729,1)
(253,694,1)
(810,174,1)
(901,596,1)
(58,745,1)
(388,695,1)
(832,830,1)
(981,634,1)
(1062,1036,1)
(81,955,1)
(120,985,1)
(918,334,1)
(102,359,1)
(349,530,1)
(312,36,1)
(334,143,1)
(1131,481,1)
(649,639,1)
(853,401,1)
(956,206,1)
(71,359,1)
(682,692,1)
(646,1016,1)
(817,24,1)
(192,736,1)
(475,1041,1)
(232,179,1)
(1122,1126,1)
(500,1014,1)
(861,590,1)
(247,213,1)
(363,597,1)
(278,396,1)
(35,359,1)
(331,767,1)
(952,273,1)
(425,587,1)
(354,119,1)
(216,380,1)
(699,422,1)
(711,608,1)
(718,952,1)
(319,334,1)
(693,1107,1)
(753,385,1)
(488,359,1)
(474,834,1)
(8,928,1)
(1038,957,1)
(827,398,1)
(796,759,1)
(510,1116,1)
(918,359,1)
(52,500,1)
(896,200,1)
(306,359,1)
(303,197,1)
(16,18,1)
(444,888,1)
(240,524,1)
(312,951,1)
(158,559,1)
(915,986,1)
(453,99,1)
(1127,717,1)
(18,559,1)
(356,908,1)
(177,44,1)
(997,454,1)
(336,307,1)
(454,507,1)
(640,919,1)
(648,189,1)
(362,359,1)
(685,42,1)
(764,876,1)
(80,115,1)
(310,715,1)
(986,718,1)
(367,440,1)
(564,76,1)
(259,1033,1)
(564,225,1)
(228,970,1)
(113,562,1)
(88,989,1)
(564,906,1)
(324,153,1)
(351,807,1)
(23,758,1)
(554,942,1)
(640,334,1)
(135,891,1)
(838,218,1)
(823,302,1)
(56,794,1)
(439,844,1)
(460,306,1)
(340,12,1)
(396,833,1)
(656,359,1)
(24,95,1)
(260,334,1)
(619,303,1)
(18,169,1)
(333,960,1)
(968,448,1)
(396,926,1)
(248,333,1)
(272,282,1)
(1001,162,1)
(799,840,1)
(215,79,1)
(293,323,1)
(575,359,1)
(313,685,1)
(123,781,1)
(1065,699,1)
(445,150,1)
(843,1119,1)
(181,854,1)
(564,440,1)
(394,880,1)
(1128,394,1)
(227,466,1)
(60,31,1)
(811,652,1)
(785,334,1)
(564,4,1)
(321,1040,1)
(200,368,1)
(219,793,1)
(609,126,1)
(24,592,1)
(346,729,1)
(1087,117,1)
(1028,359,1)
(463,419,1)
(747,411,1)
(286,311,1)
(766,51,1)
(583,1008,1)
(33,216,1)
(401,456,1)
(6,871,1)
(181,313,1)
(547,90,1)
(9,1127,1)
(1037,5,1)
(565,57,1)
(1028,522,1)
(604,476,1)
(90,804,1)
(626,217,1)
(309,447,1)
(824,100,1)
(985,386,1)
(468,773,1)
(848,85,1)
(1065,330,1)
(720,359,1)
(354,272,1)
(687,359,1)
(866,983,1)
(152,349,1)
(648,680,1)
(1089,56,1)
(808,335,1)
(506,817,1)
(381,342,1)
(1129,533,1)
(100,595,1)
(160,359,1)
(308,591,1)
(1013,801,1)
(105,712,1)
(930,763,1)
(57,359,1)
(291,1120,1)
(1038,381,1)
(142,438,1)
(761,2,1)
(1015,1095,1)
(892,513,1)
(361,656,1)
(480,650,1)
(755,8,1)
(26,13,1)
(22,968,1)
(349,586,1)
(218,1006,1)
(100,23,1)
(564,355,1)
(567,347,1)
(384,783,1)
(144,1012,1)
(359,885,1)
(422,430,1)
(133,621,1)
(44,334,1)
(100,126,1)
(792,446,1)
(225,359,1)
(259,770,1)
(938,186,1)
(836,137,1)
(264,152,1)
(586,359,1)
(442,1089,1)
(454,438,1)
(346,1079,1)
(909,800,1)
(1131,336,1)
(345,971,1)
(516,837,1)
(907,747,1)
(557,429,1)
(741,638,1)
(801,576,1)
(501,438,1)
(147,905,1)
(453,122,1)
(778,50,1)
(649,402,1)
(285,214,1)
(470,1001,1)
(862,918,1)
(940,619,1)
(793,359,1)
(714,769,1)
(48,734,1)
(1076,256,1)
(383,572,1)
(436,719,1)
(818,958,1)
(303,249,1)
(865,1069,1)
(522,175,1)
(964,956,1)
(73,980,1)
(207,49,1)
(306,1055,1)
(467,1057,1)
(709,218,1)
(849,276,1)
(110,561,1)
(465,722,1)
(1010,359,1)
(44,842,1)
(1128,334,1)
(1077,771,1)
(608,260,1)
(966,925,1)
(669,488,1)
(1130,985,1)
(484,799,1)
(327,973,1)
(156,1111,1)
(122,450,1)
(714,8,1)
(503,1046,1)
(224,374,1)
(564,24,1)
(1116,1019,1)
(332,359,1)
(850,837,1)
(134,388,1)
(623,1021,1)
(1000,575,1)
(484,190,1)
(286,499,1)
(279,164,1)
(42,765,1)
(49,663,1)
(134,325,1)
(775,246,1)
(520,60,1)
(574,713,1)
(809,167,1)
(601,1070,1)
(1073,71,1)
(438,249,1)
(590,961,1)
(414,781,1)
(618,577,1)
(859,904,1)
(165,824,1)
(263,552,1)
(457,118,1)
(282,341,1)
(816,158,1)
(949,263,1)
(617,52,1)
(530,586,1)
(100,1045,1)
(1019,1101,1)
(414,359,1)
(789,1087,1)
(75,383,1)
(876,502,1)
(554,359,1)
(119,272,1)
(936,547,1)
(549,346,1)
(411,427,1)
(1022,277,1)
(562,63,1)
(684,268,1)
(4,48,1)
(1063,1028,1)
(330,400,1)
(253,918,1)
(706,1049,1)
(427,1014,1)
(404,79,1)
(236,22,1)
(582,726,1)
(665,126,1)
(161,466,1)
(673,204,1)
(692,571,1)
(32,1059,1)
(1101,405,1)
(403,198,1)
(1012,395,1)
(1109,644,1)
(973,874,1)
(858,368,1)
(957,1073,1)
(137,8,1)
(662,1060,1)
(278,353,1)
(311,1061,1)
(726,630,1)
(652,161,1)
(798,474,1)
(838,744,1)
(714,359,1)
(333,1034,1)
(704,57,1)
(290,462,1)
(56,359,1)
(845,969,1)
(657,921,1)
(892,359,1)
(1002,359,1)
(63,417,1)
(1123,601,1)
(979,126,1)
(950,75,1)
(524,526,1)
(346,873,1)
(64,20,1)
(829,402,1)
(563,762,1)
(1016,181,1)
(967,776,1)
(1112,708,1)
(1063,343,1)
(1014,388,1)
(1102,1133,1)
(316,290,1)
(553,841,1)
(244,359,1)
(942,1077,1)
(1120,359,1)
(448,1099,1)
(472,982,1)
(903,896,1)
(162,677,1)
(459,781,1)
(577,821,1)
(1113,369,1)
(126,249,1)
(694,608,1)
(793,622,1)
(784,217,1)
(295,438,1)
(342,153,1)
(435,1053,1)
(885,490,1)
(765,182,1)
(1002,782,1)
(571,413,1)
(713,1018,1)
(441,166,1)
(1029,866,1)
(365,10,1)
(307,367,1)
(384,359,1)
(691,732,1)
(1109,93,1)
(641,726,1)
(707,1050,1)
(593,154,1)
(30,1108,1)
(952,724,1)
(188,240,1)
(878,334,1)
(1052,261,1)
(255,1000,1)
(302,298,1)
(339,104,1)
(615,148,1)
(440,359,1)
(187,335,1)
(202,1052,1)
(417,360,1)
(636,961,1)
(200,598,1)
(125,280,1)
(295,34,1)
(696,439,1)
(1106,416,1)
(755,375,1)
(1014,196,1)
(577,359,1)
(969,1131,1)
(284,903,1)
(356,784,1)
(143,719,1)
(322,601,1)
(1064,1042,1)
(99,122,1)
(29,359,1)
(825,188,1)
(1085,460,1)
(730,359,1)
(668,149,1)
(254,674,1)
(964,479,1)
(49,359,1)
(657,781,1)
(478,387,1)
(377,1106,1)
(143,1037,1)
(920,1103,1)
(165,330,1)
(187,73,1)
(81,503,1)
(1121,894,1)
(935,11,1)
(44,359,1)
(526,920,1)
(276,399,1)
(591,560,1)
(526,406,1)
(601,792,1)
(396,1070,1)
(535,317,1)
(275,809,1)
(53,974,1)
(766,931,1)
(639,359,1)
(102,334,1)
(925,106,1)
(676,536,1)
(179,775,1)
(107,739,1)
(140,508,1)
(931,350,1)
(945,603,1)
(736,337,1)
(1020,334,1)
(1053,738,1)
(680,219,1)
(395,517,1)
(575,334,1)
(863,1070,1)
(199,110,1)
(408,687,1)
(272,359,1)
(409,312,1)
(50,1071,1)
(906,305,1)
(98,860,1)
(1126,1044,1)
(947,172,1)
(849,846,1)
(722,808,1)
(100,486,1)
(382,748,1)
(1117,854,1)
(210,771,1)
(613,567,1)
(473,39,1)
(799,804,1)
(504,888,1)
(97,1017,1)
(96,83,1)
(479,956,1)
(1075,740,1)
(13,498,1)
(1032,173,1)
(100,53,1)
(572,271,1)
(186,85,1)
(904,356,1)
(454,359,1)
(949,130,1)
(746,704,1)
(521,857,1)
(815,498,1)
(190,964,1)
(455,26,1)
(513,972,1)
(31,453,1)
(532,666,1)
(128,728,1)
(834,932,1)
(1028,680,1)
(557,692,1)
(271,653,1)
(841,1070,1)
(863,881,1)
(405,909,1)
(552,889,1)
(148,613,1)
(215,1,1)
(536,359,1)
(1107,684,1)
(186,848,1)
(1108,144,1)
(455,854,1)
(596,359,1)
(631,155,1)
(889,986,1)
(474,846,1)
(381,191,1)
(1053,647,1)
(638,484,1)
(81,1064,1)
(217,316,1)
(561,818,1)
(91,1035,1)
(162,359,1)
(1017,359,1)
(160,334,1)
(781,838,1)
(336,620,1)
(595,1089,1)
(653,1103,1)
(830,617,1)
(319,359,1)
(1066,146,1)
(261,125,1)
(941,244,1)
(273,835,1)
(837,109,1)
(596,30,1)
(890,450,1)
(127,354,1)
(371,612,1)
(178,832,1)
(518,787,1)
(564,820,1)
(83,153,1)
(516,449,1)
(250,1041,1)
(892,450,1)
(191,319,1)
(171,890,1)
(1041,359,1)
(744,495,1)
(380,509,1)
(1065,758,1)
(615,359,1)
(95,334,1)
(650,798,1)
(27,368,1)
(35,8,1)
(794,665,1)
(1071,142,1)
(857,388,1)
(724,273,1)
(12,669,1)
(643,414,1)
(93,372,1)
(730,944,1)
(455,412,1)
(983,211,1)
(56,307,1)
(320,332,1)
(328,826,1)
(1035,420,1)
(251,377,1)
(571,510,1)
(1008,359,1)
(620,855,1)
(169,931,1)
(720,970,1)
(420,199,1)
(893,359,1)
(788,906,1)
(85,359,1)
(955,1122,1)
(704,565,1)
(466,1121,1)
(801,384,1)
(230,475,1)
(863,604,1)
(542,251,1)
(939,720,1)
(1036,827,1)
(1133,818,1)
(606,602,1)
(651,520,1)
(446,616,1)
(632,183,1)
(370,1012,1)
(74,455,1)
(447,670,1)
(821,228,1)
(664,473,1)
(1074,1097,1)
(498,1117,1)
(116,334,1)
(48,359,1)
(317,858,1)
(488,334,1)
(23,248,1)
(640,359,1)
(760,973,1)
(621,16,1)
(11,160,1)
(1130,617,1)
(399,555,1)
(173,20,1)
(416,70,1)
(807,970,1)
(820,359,1)
(225,637,1)
(242,363,1)
(702,126,1)
(785,224,1)
(697,749,1)
(283,49,1)
(1065,1103,1)
(1050,388,1)
(1020,359,1)
(277,233,1)
(1065,249,1)
(971,1024,1)
(197,895,1)
(491,907,1)
(260,543,1)
(763,548,1)
(354,388,1)
(659,40,1)
(70,365,1)
(157,1058,1)
(220,825,1)
(28,359,1)
(639,781,1)
(548,285,1)
(785,359,1)
(104,766,1)
(629,47,1)
(741,804,1)
(552,101,1)
(910,702,1)
(531,81,1)
(217,438,1)
(335,407,1)
(1009,29,1)
(130,573,1)
(348,618,1)
(551,938,1)
(940,303,1)
(838,232,1)
(420,359,1)
(807,307,1)
(81,518,1)
(1061,660,1)
(989,1032,1)
(74,1109,1)
(663,410,1)
(615,8,1)
(492,391,1)
(1123,322,1)
(38,493,1)
(312,735,1)
(39,526,1)
(643,262,1)
(775,939,1)
(83,324,1)
(153,999,1)
(508,544,1)
(36,448,1)
(344,623,1)
(612,118,1)
(220,188,1)
(891,435,1)
(844,738,1)
(533,59,1)
(977,690,1)
(101,129,1)
(341,546,1)
(635,356,1)
(738,436,1)
(175,799,1)
(743,46,1)
(253,250,1)
(705,996,1)
(956,1112,1)
(62,545,1)
(857,409,1)
(517,967,1)
(754,945,1)
(873,65,1)
(564,849,1)
(1098,362,1)
(1031,456,1)
(634,294,1)
(949,721,1)
(630,58,1)
(638,156,1)
(362,334,1)
(674,1003,1)
(301,3,1)
(759,673,1)
(137,243,1)
(1124,804,1)
(7,349,1)
(1078,891,1)
(716,1132,1)
(426,551,1)
(81,185,1)
(108,359,1)
(1059,159,1)
(932,147,1)
(165,699,1)
(1130,212,1)
(487,151,1)
(697,359,1)
(418,301,1)
(206,1112,1)
(627,241,1)
(1033,770,1)
(870,215,1)
(273,615,1)
(949,1084,1)
(154,986,1)
(414,41,1)
(111,368,1)
(970,588,1)
(659,528,1)
(265,746,1)
(705,924,1)
(200,659,1)
(85,680,1)
(546,465,1)
(29,82,1)
(598,659,1)
(129,889,1)
(429,629,1)
(488,1114,1)
(972,949,1)
(194,901,1)
(379,625,1)
(369,408,1)
(468,335,1)
(360,688,1)
(1,1076,1)
(493,944,1)
(590,459,1)
(782,1062,1)
(95,911,1)
(918,403,1)
(1004,617,1)
(1086,990,1)
(118,334,1)
(586,529,1)
(768,419,1)
(776,852,1)
(765,723,1)
(372,437,1)
(27,284,1)
(108,1113,1)
(757,163,1)
(771,859,1)
(252,200,1)
(723,551,1)
(113,348,1)
(420,334,1)
(342,140,1)
(208,126,1)
(735,1128,1)
(231,81,1)
(165,758,1)
(28,307,1)
(670,878,1)
(305,790,1)
(102,514,1)
(953,234,1)
(50,142,1)
(13,516,1)
(1124,935,1)
(266,907,1)
(987,489,1)
(76,753,1)
(1083,811,1)
(746,879,1)
(904,635,1)
(29,334,1)
(384,944,1)
(194,596,1)
(555,846,1)
(577,307,1)
(1097,636,1)
(165,331,1)
(170,359,1)
(47,323,1)
(622,17,1)
(1099,705,1)
(239,884,1)
(651,961,1)
(587,1078,1)
(916,995,1)
(980,497,1)
(95,359,1)
(337,255,1)
(732,738,1)
(233,443,1)
(286,870,1)
(700,291,1)
(36,752,1)
(497,986,1)
(723,426,1)
(438,352,1)
(332,334,1)
(607,126,1)
(564,244,1)
(889,987,1)
(1086,423,1)
(150,480,1)
(145,526,2)
(152,349,2)
(468,335,2)
(998,302,2)
(785,334,2)
(354,272,2)
(766,623,2)
(953,126,2)
(49,359,2)
(59,311,2)
(965,32,2)
(1107,684,2)
(982,102,2)
(237,818,2)
(1102,818,2)
(81,771,2)
(56,126,2)
(1024,49,2)
(590,459,2)
(142,359,2)
(332,32,2)
(321,391,2)
(859,888,2)
(989,173,2)
(102,890,2)
(162,690,2)
(513,302,2)
(1055,858,2)
(134,388,2)
(521,1014,2)
(838,218,2)
(957,153,2)
(567,277,2)
(309,888,2)
(838,323,2)
(521,277,2)
(845,1131,2)
(773,546,2)
(239,277,2)
(484,799,2)
(768,311,2)
(1059,359,2)
(320,32,2)
(670,878,2)
(881,115,2)
(362,334,2)
(1028,359,2)
(628,960,2)
(788,248,2)
(185,1008,2)
(12,888,2)
(883,1044,2)
(395,649,2)
(33,216,2)
(808,1014,2)
(606,311,2)
(1038,381,2)
(841,49,2)
(588,285,2)
(842,323,2)
(781,323,2)
(4,690,2)
(115,1070,2)
(1065,330,2)
(641,560,2)
(732,973,2)
(596,359,2)
(985,334,2)
(13,854,2)
(388,277,2)
(15,649,2)
(309,447,2)
(573,772,2)
(918,649,2)
(429,323,2)
(972,302,2)
(405,800,2)
(200,368,2)
(586,944,2)
(508,32,2)
(277,890,2)
(82,1044,2)
(926,649,2)
(314,455,2)
(611,858,2)
(1060,323,2)
(718,277,2)
(564,606,2)
(777,323,2)
(116,359,2)
(879,649,2)
(32,49,2)
(1089,56,2)
(623,115,2)
(414,359,2)
(1029,302,2)
(81,323,2)
(1090,888,2)
(973,874,2)
(288,888,2)
(644,455,2)
(316,888,2)
(515,983,2)
(787,118,2)
(18,169,2)
(34,126,2)
(741,1124,2)
(694,144,2)
(801,384,2)
(639,115,2)
(800,960,2)
(453,590,2)
(1048,285,2)
(1108,649,2)
(852,649,2)
(785,359,2)
(907,347,2)
(798,187,2)
(1066,302,2)
(224,818,2)
(1130,1004,2)
(720,970,2)
(573,302,2)
(612,118,2)
(903,896,2)
(473,526,2)
(153,49,2)
(1076,256,2)
(904,888,2)
(1013,115,2)
(297,455,2)
(470,162,2)
(569,1008,2)
(755,618,2)
(32,1059,2)
(653,973,2)
(720,218,2)
(830,890,2)
(146,555,2)
(232,218,2)
(1130,617,2)
(778,1044,2)
(215,79,2)
(758,248,2)
(463,419,2)
(379,888,2)
(1012,649,2)
(196,277,2)
(98,888,2)
(97,309,2)
(116,334,2)
(874,526,2)
(44,323,2)
(136,277,2)
(643,656,2)
(396,1070,2)
(350,115,2)
(684,307,2)
(577,307,2)
(284,903,2)
(287,1008,2)
(683,309,2)
(313,554,2)
(488,359,2)
(117,311,2)
(228,323,2)
(139,1004,2)
(648,126,2)
(162,359,2)
(649,402,2)
(963,455,2)
(963,536,2)
(1050,892,2)
(637,974,2)
(792,446,2)
(188,526,2)
(933,656,2)
(775,939,2)
(143,184,2)
(696,891,2)
(285,311,2)
(260,359,2)
(9,818,2)
(518,118,2)
(418,348,2)
(438,610,2)
(915,302,2)
(547,181,2)
(819,888,2)
(50,142,2)
(617,890,2)
(362,359,2)
(150,555,2)
(197,216,2)
(1065,1103,2)
(130,302,2)
(81,118,2)
(404,311,2)
(689,161,2)
(638,1124,2)
(346,729,2)
(178,1004,2)
(910,126,2)
(396,926,2)
(456,827,2)
(343,1124,2)
(223,218,2)
(333,359,2)
(715,1002,2)
(434,311,2)
(334,143,2)
(266,388,2)
(935,11,2)
(455,13,2)
(761,359,2)
(227,858,2)
(526,1068,2)
(231,526,2)
(302,468,2)
(4,903,2)
(903,161,2)
(118,334,2)
(266,1014,2)
(218,323,2)
(167,218,2)
(102,334,2)
(765,182,2)
(550,277,2)
(188,1103,2)
(987,302,2)
(459,590,2)
(634,346,2)
(263,552,2)
(1065,738,2)
(751,888,2)
(73,555,2)
(498,888,2)
(557,429,2)
(190,964,2)
(231,732,2)
(564,1044,2)
(336,277,2)
(970,285,2)
(497,986,2)
(901,649,2)
(577,970,2)
(806,311,2)
(506,323,2)
(856,181,2)
(957,60,2)
(831,311,2)
(807,161,2)
(570,348,2)
(249,642,2)
(81,818,2)
(699,1089,2)
(833,649,2)
(564,973,2)
(122,359,2)
(531,81,2)
(751,74,2)
(971,49,2)
(467,248,2)
(555,487,2)
(28,323,2)
(790,248,2)
(430,1089,2)
(71,450,2)
(5,346,2)
(1000,560,2)
(21,554,2)
(81,890,2)
(29,334,2)
(151,555,2)
(455,854,2)
(673,858,2)
(303,249,2)
(653,1103,2)
(211,761,2)
(858,903,2)
(1107,285,2)
(799,328,2)
(231,890,2)
(760,973,2)
(647,732,2)
(479,1124,2)
(42,765,2)
(1074,590,2)
(350,49,2)
(680,249,2)
(649,639,2)
(1004,1004,2)
(1076,311,2)
(422,1089,2)
(983,302,2)
(85,680,2)
(51,623,2)
(58,560,2)
(517,649,2)
(708,1124,2)
(549,346,2)
(739,302,2)
(76,858,2)
(65,1052,2)
(231,1008,2)
(60,590,2)
(448,560,2)
(564,346,2)
(979,126,2)
(207,49,2)
(735,983,2)
(219,234,2)
(220,526,2)
(985,1004,2)
(1037,346,2)
(348,755,2)
(562,348,2)
(1074,277,2)
(66,302,2)
(942,771,2)
(517,776,2)
(1089,126,2)
(844,738,2)
(108,818,2)
(1019,405,2)
(738,973,2)
(576,115,2)
(834,986,2)
(285,214,2)
(31,590,2)
(700,1120,2)
(218,359,2)
(697,781,2)
(800,359,2)
(193,668,2)
(440,1089,2)
(660,690,2)
(280,100,2)
(558,161,2)
(961,277,2)
(640,334,2)
(28,311,2)
(670,888,2)
(939,218,2)
(1127,818,2)
(747,1014,2)
(478,323,2)
(310,1044,2)
(122,590,2)
(1035,818,2)
(591,560,2)
(1014,388,2)
(1120,307,2)
(387,323,2)
(462,751,2)
(564,355,2)
(949,1084,2)
(1053,732,2)
(143,719,2)
(650,555,2)
(564,161,2)
(711,649,2)
(1126,1044,2)
(1049,311,2)
(250,1041,2)
(165,699,2)
(1128,334,2)
(957,32,2)
(119,546,2)
(294,346,2)
(81,526,2)
(170,771,2)
(254,323,2)
(118,346,2)
(247,649,2)
(983,211,2)
(173,20,2)
(1131,277,2)
(445,846,2)
(1028,680,2)
(330,974,2)
(472,1004,2)
(160,334,2)
(528,351,2)
(533,311,2)
(465,1014,2)
(862,649,2)
(626,888,2)
(1114,888,2)
(165,966,2)
(371,118,2)
(924,560,2)
(307,249,2)
(36,448,2)
(424,649,2)
(516,498,2)
(981,359,2)
(177,871,2)
(85,554,2)
(231,323,2)
(662,323,2)
(955,1044,2)
(1038,957,2)
(408,818,2)
(1004,617,2)
(348,618,2)
(100,249,2)
(679,771,2)
(1121,858,2)
(137,8,2)
(384,944,2)
(187,555,2)
(657,359,2)
(447,173,2)
(947,888,2)
(79,334,2)
(532,161,2)
(960,248,2)
(832,1004,2)
(360,348,2)
(154,986,2)
(752,321,2)
(440,359,2)
(895,216,2)
(893,311,2)
(263,302,2)
(964,1124,2)
(985,359,2)
(639,781,2)
(203,32,2)
(694,649,2)
(891,732,2)
(1097,590,2)
(730,944,2)
(90,181,2)
(939,720,2)
(437,963,2)
(414,656,2)
(267,302,2)
(311,690,2)
(858,368,2)
(694,1123,2)
(278,396,2)
(81,1068,2)
(1012,1070,2)
(367,1089,2)
(564,1008,2)
(463,311,2)
(816,597,2)
(349,277,2)
(495,116,2)
(122,450,2)
(635,888,2)
(162,960,2)
(782,1044,2)
(419,311,2)
(559,359,2)
(91,1035,2)
(915,986,2)
(672,323,2)
(1006,323,2)
(799,804,2)
(564,890,2)
(336,307,2)
(766,931,2)
(83,32,2)
(447,670,2)
(919,115,2)
(1014,1014,2)
(76,359,2)
(44,334,2)
(214,35,2)
(56,307,2)
(1081,890,2)
(198,649,2)
(27,903,2)
(1109,93,2)
(181,554,2)
(1085,460,2)
(1016,181,2)
(81,346,2)
(446,194,2)
(687,359,2)
(722,1014,2)
(206,1124,2)
(216,509,2)
(19,115,2)
(552,889,2)
(111,903,2)
(0,323,2)
(628,311,2)
(160,359,2)
(1003,359,2)
(502,554,2)
(348,323,2)
(1041,359,2)
(616,649,2)
(726,560,2)
(810,498,2)
(146,302,2)
(74,1109,2)
(999,49,2)
(954,858,2)
(995,903,2)
(978,618,2)
(951,546,2)
(654,32,2)
(454,498,2)
(420,334,2)
(1052,249,2)
(324,153,2)
(233,890,2)
(311,1061,2)
(246,218,2)
(407,266,2)
(414,781,2)
(757,323,2)
(1070,49,2)
(803,560,2)
(564,417,2)
(218,307,2)
(309,173,2)
(1112,1124,2)
(4,1044,2)
(249,1052,2)
(81,1008,2)
(791,323,2)
(46,302,2)
(532,259,2)
(597,104,2)
(318,1052,2)
(501,118,2)
(697,656,2)
(584,1068,2)
(1071,1044,2)
(406,1068,2)
(564,690,2)
(564,649,2)
(328,334,2)
(697,359,2)
(384,115,2)
(1122,1044,2)
(402,863,2)
(664,526,2)
(421,858,2)
(161,858,2)
(18,597,2)
(4,323,2)
(8,249,2)
(328,359,2)
(547,1124,2)
(884,264,2)
(460,858,2)
(870,311,2)
(380,249,2)
(795,732,2)
(846,302,2)
(1112,1063,2)
(600,526,2)
(1057,248,2)
(286,323,2)
(347,277,2)
(1100,903,2)
(974,714,2)
(828,1004,2)
(1132,323,2)
(559,597,2)
(501,359,2)
(152,277,2)
(605,309,2)
(707,302,2)
(1058,560,2)
(874,220,2)
(636,277,2)
(667,302,2)
(1075,771,2)
(95,323,2)
(1059,781,2)
(919,49,2)
(1105,554,2)
(81,732,2)
(1128,560,2)
(801,115,2)
(74,455,2)
(318,891,2)
(1010,334,2)
(428,302,2)
(772,624,2)
(182,43,2)
(944,423,2)
(341,546,2)
(657,781,2)
(231,888,2)
(705,560,2)
(656,311,2)
(1069,249,2)
(482,115,2)
(62,545,2)
(411,1014,2)
(476,115,2)
(127,546,2)
(952,277,2)
(480,650,2)
(305,248,2)
(553,649,2)
(721,334,2)
(585,649,2)
(166,423,2)
(624,335,2)
(1018,891,2)
(514,890,2)
(312,1014,2)
(174,454,2)
(974,126,2)
(738,436,2)
(1004,890,2)
(415,302,2)
(577,359,2)
(741,804,2)
(809,218,2)
(1109,455,2)
(564,354,2)
(322,649,2)
(354,546,2)
(1063,1124,2)
(936,181,2)
(38,423,2)
(648,359,2)
(248,333,2)
(4,888,2)
(308,560,2)
(981,346,2)
(730,649,2)
(278,649,2)
(595,126,2)
(765,554,2)
(28,307,2)
(845,277,2)
(452,302,2)
(807,307,2)
(11,1124,2)
(321,560,2)
(277,233,2)
(1124,935,2)
(351,161,2)
(240,526,2)
(564,820,2)
(1065,261,2)
(1066,555,2)
(639,359,2)
(459,781,2)
(250,649,2)
(552,101,2)
(893,960,2)
(102,1004,2)
(783,115,2)
(390,277,2)
(535,858,2)
(1086,126,2)
(608,260,2)
(630,560,2)
(672,692,2)
(631,173,2)
(474,846,2)
(29,359,2)
(218,970,2)
(530,277,2)
(120,1004,2)
(536,455,2)
(124,649,2)
(286,311,2)
(564,24,2)
(352,610,2)
(1103,569,2)
(515,302,2)
(81,161,2)
(129,302,2)
(506,692,2)
(356,784,2)
(590,277,2)
(170,960,2)
(704,649,2)
(32,153,2)
(196,1014,2)
(289,498,2)
(1002,1044,2)
(437,455,2)
(460,306,2)
(823,302,2)
(642,1052,2)
(827,1044,2)
(113,323,2)
(608,649,2)
(161,1085,2)
(87,348,2)
(104,623,2)
(439,891,2)
(259,770,2)
(423,180,2)
(736,560,2)
(571,510,2)
(984,818,2)
(604,19,2)
(820,610,2)
(455,412,2)
(952,273,2)
(186,85,2)
(1,1076,2)
(214,28,2)
(149,818,2)
(1087,311,2)
(2,302,2)
(101,302,2)
(268,285,2)
(1124,804,2)
(536,438,2)
(730,359,2)
(407,1014,2)
(920,1103,2)
(748,311,2)
(35,359,2)
(41,858,2)
(81,1044,2)
(700,858,2)
(564,1068,2)
(165,330,2)
(433,888,2)
(423,126,2)
(941,423,2)
(934,649,2)
(892,359,2)
(4,732,2)
(1064,346,2)
(99,590,2)
(950,973,2)
(704,57,2)
(349,586,2)
(857,277,2)
(656,323,2)
(23,126,2)
(916,903,2)
(20,379,2)
(1067,218,2)
(924,391,2)
(659,161,2)
(169,597,2)
(1117,173,2)
(528,161,2)
(50,1044,2)
(771,888,2)
(285,323,2)
(93,437,2)
(123,311,2)
(1063,1028,2)
(837,498,2)
(403,649,2)
(869,126,2)
(255,560,2)
(125,100,2)
(228,311,2)
(669,888,2)
(425,891,2)
(177,323,2)
(785,818,2)
(1065,758,2)
(624,302,2)
(569,719,2)
(878,334,2)
(781,838,2)
(63,348,2)
(565,649,2)
(481,277,2)
(1034,126,2)
(260,649,2)
(350,1020,2)
(279,32,2)
(303,216,2)
(272,546,2)
(615,562,2)
(726,630,2)
(564,906,2)
(205,323,2)
(194,596,2)
(13,516,2)
(494,1014,2)
(106,234,2)
(960,249,2)
(282,546,2)
(1017,309,2)
(372,455,2)
(24,95,2)
(1017,359,2)
(931,49,2)
(903,532,2)
(68,751,2)
(509,249,2)
(524,526,2)
(590,590,2)
(1001,690,2)
(1019,311,2)
(572,973,2)
(533,893,2)
(6,323,2)
(749,903,2)
(442,1089,2)
(936,1124,2)
(295,438,2)
(871,323,2)
(973,526,2)
(627,890,2)
(743,302,2)
(500,890,2)
(892,450,2)
(180,126,2)
(723,554,2)
(712,28,2)
(668,818,2)
(557,323,2)
(504,888,2)
(357,277,2)
(577,323,2)
(231,891,2)
(666,161,2)
(90,1124,2)
(381,32,2)
(620,277,2)
(310,715,2)
(1021,623,2)
(503,973,2)
(196,347,2)
(368,656,2)
(546,465,2)
(1003,334,2)
(209,49,2)
(720,359,2)
(172,888,2)
(88,173,2)
(410,890,2)
(1046,973,2)
(126,249,2)
(966,234,2)
(353,649,2)
(1009,1044,2)
(674,62,2)
(837,289,2)
(597,623,2)
(385,858,2)
(466,894,2)
(444,888,2)
(445,555,2)
(1133,818,2)
(832,890,2)
(85,359,2)
(752,1000,2)
(752,560,2)
(734,231,2)
(614,323,2)
(718,952,2)
(956,1112,2)
(1120,970,2)
(775,218,2)
(551,554,2)
(990,423,2)
(1024,115,2)
(905,555,2)
(231,1044,2)
(231,903,2)
(1119,555,2)
(982,1004,2)
(522,1124,2)
(43,1010,2)
(81,888,2)
(706,311,2)
(657,49,2)
(687,818,2)
(283,49,2)
(1050,302,2)
(976,302,2)
(900,656,2)
(921,649,2)
(80,115,2)
(703,1068,2)
(714,8,2)
(545,323,2)
(148,277,2)
(1124,181,2)
(652,161,2)
(811,161,2)
(417,348,2)
(346,891,2)
(840,1124,2)
(438,249,2)
(81,690,2)
(818,115,2)
(88,888,2)
(204,858,2)
(113,311,2)
(510,1019,2)
(259,161,2)
(29,1044,2)
(71,32,2)
(394,560,2)
(902,974,2)
(723,551,2)
(225,359,2)
(516,449,2)
(1039,348,2)
(361,656,2)
(931,115,2)
(1041,450,2)
(621,931,2)
(753,858,2)
(1008,359,2)
(793,359,2)
(35,28,2)
(1053,738,2)
(109,498,2)
(381,342,2)
(252,161,2)
(472,890,2)
(871,506,2)
(395,517,2)
(713,891,2)
(225,974,2)
(596,649,2)
(807,970,2)
(693,285,2)
(893,359,2)
(676,455,2)
(104,362,2)
(554,359,2)
(264,277,2)
(253,250,2)
(564,453,2)
(838,744,2)
(544,32,2)
(317,858,2)
(436,719,2)
(159,32,2)
(178,890,2)
(293,323,2)
(469,302,2)
(413,463,2)
(47,323,2)
(272,359,2)
(564,849,2)
(1111,484,2)
(601,649,2)
(191,319,2)
(298,546,2)
(4,118,2)
(860,888,2)
(875,974,2)
(609,126,2)
(260,334,2)
(720,307,2)
(566,590,2)
(281,649,2)
(266,907,2)
(95,359,2)
(32,32,2)
(1103,1008,2)
(721,359,2)
(643,414,2)
(454,438,2)
(273,277,2)
(771,904,2)
(789,311,2)
(1042,346,2)
(894,368,2)
(619,216,2)
(339,623,2)
(400,974,2)
(933,858,2)
(446,649,2)
(233,307,2)
(384,359,2)
(427,1014,2)
(470,690,2)
(319,32,2)
(555,846,2)
(143,346,2)
(996,924,2)
(169,931,2)
(271,973,2)
(740,771,2)
(818,958,2)
(959,940,2)
(248,126,2)
(302,546,2)
(735,1128,2)
(4,526,2)
(110,818,2)
(674,1003,2)
(577,311,2)
(333,126,2)
(111,656,2)
(843,555,2)
(231,690,2)
(200,659,2)
(295,126,2)
(650,497,2)
(1039,418,2)
(323,311,2)
(909,311,2)
(629,323,2)
(642,719,2)
(803,388,2)
(449,498,2)
(174,498,2)
(36,983,2)
(911,323,2)
(865,249,2)
(784,217,2)
(894,759,2)
(4,649,2)
(659,528,2)
(1099,560,2)
(75,973,2)
(243,161,2)
(890,450,2)
(435,732,2)
(160,181,2)
(242,597,2)
(728,623,2)
(13,412,2)
(180,359,2)
(346,1079,2)
(906,248,2)
(26,13,2)
(1065,966,2)
(1044,118,2)
(1050,388,2)
(949,302,2)
(307,1089,2)
(216,249,2)
(165,100,2)
(256,311,2)
(295,359,2)
(642,891,2)
(1038,332,2)
(154,302,2)
(702,126,2)
(200,161,2)
(754,690,2)
(164,32,2)
(142,1044,2)
(355,285,2)
(623,49,2)
(414,858,2)
(674,323,2)
(697,903,2)
(614,483,2)
(571,413,2)
(144,649,2)
(1130,985,2)
(18,559,2)
(1025,115,2)
(17,234,2)
(381,191,2)
(564,323,2)
(1002,334,2)
(838,311,2)
(495,218,2)
(685,765,2)
(1095,610,2)
(586,277,2)
(1020,49,2)
(964,956,2)
(48,231,2)
(564,888,2)
(751,13,2)
(804,181,2)
(630,334,2)
(171,890,2)
(858,697,2)
(44,359,2)
(645,560,2)
(596,944,2)
(450,643,2)
(982,890,2)
(180,944,2)
(456,310,2)
(285,28,2)
(945,690,2)
(615,359,2)
(632,1068,2)
(543,649,2)
(539,302,2)
(1033,161,2)
(830,1004,2)
(604,115,2)
(362,623,2)
(557,692,2)
(181,854,2)
(234,648,2)
(989,379,2)
(1017,334,2)
(4,161,2)
(309,379,2)
(610,295,2)
(261,100,2)
(767,610,2)
(854,173,2)
(646,181,2)
(1098,623,2)
(83,49,2)
(158,597,2)
(526,920,2)
(1020,334,2)
(142,438,2)
(340,12,2)
(772,302,2)
(507,498,2)
(755,8,2)
(96,32,2)
(564,118,2)
(306,858,2)
(615,277,2)
(896,200,2)
(491,1014,2)
(1059,32,2)
(348,311,2)
(4,890,2)
(986,718,2)
(107,302,2)
(226,455,2)
(563,161,2)
(1036,1044,2)
(564,440,2)
(115,49,2)
(640,359,2)
(512,1004,2)
(488,888,2)
(606,359,2)
(412,888,2)
(1078,891,2)
(628,359,2)
(520,590,2)
(291,858,2)
(1021,115,2)
(472,982,2)
(1041,649,2)
(593,302,2)
(825,526,2)
(56,359,2)
(1000,575,2)
(448,334,2)
(745,560,2)
(409,388,2)
(898,690,2)
(884,277,2)
(1113,818,2)
(1083,161,2)
(1079,126,2)
(1007,302,2)
(602,323,2)
(402,115,2)
(858,656,2)
(1068,1103,2)
(516,837,2)
(64,309,2)
(211,302,2)
(36,560,2)
(336,970,2)
(1020,359,2)
(920,1068,2)
(418,8,2)
(688,348,2)
(796,858,2)
(417,359,2)
(772,915,2)
(1003,323,2)
(849,263,2)
(890,858,2)
(904,356,2)
(680,234,2)
(4,891,2)
(217,888,2)
(640,49,2)
(210,771,2)
(1120,359,2)
(732,738,2)
(257,323,2)
(717,818,2)
(4,973,2)
(560,359,2)
(560,302,2)
(841,649,2)
(421,656,2)
(370,649,2)
(564,903,2)
(57,944,2)
(382,311,2)
(944,249,2)
(918,359,2)
(233,970,2)
(253,918,2)
(39,526,2)
(342,153,2)
(1014,196,2)
(896,161,2)
(776,730,2)
(265,649,2)
(123,323,2)
(493,423,2)
(907,1014,2)
(441,423,2)
(714,126,2)
(886,1014,2)
(951,388,2)
(231,818,2)
(351,807,2)
(1021,49,2)
(564,793,2)
(716,323,2)
(1065,990,2)
(36,752,2)
(91,818,2)
(821,323,2)
(957,71,2)
(564,732,2)
(601,792,2)
(163,323,2)
(454,359,2)
(935,181,2)
(79,311,2)
(866,302,2)
(651,961,2)
(95,334,2)
(202,1052,2)
(264,152,2)
(831,323,2)
(1123,649,2)
(4,346,2)
(746,649,2)
(409,1014,2)
(971,115,2)
(3,348,2)
(486,126,2)
(1131,336,2)
(488,334,2)
(921,49,2)
(262,656,2)
(157,560,2)
(431,649,2)
(844,891,2)
(231,346,2)
(1060,177,2)
(105,28,2)
(610,126,2)
(331,610,2)
(585,1070,2)
(134,560,2)
(499,323,2)
(71,359,2)
(76,656,2)
(151,302,2)
(392,771,2)
(1022,277,2)
(213,649,2)
(770,161,2)
(398,1044,2)
(964,804,2)
(1065,377,2)
(28,359,2)
(133,623,2)
(359,885,2)
(161,466,2)
(618,577,2)
(182,554,2)
(170,359,2)
(878,888,2)
(11,160,2)
(1062,1044,2)
(615,8,2)
(49,890,2)
(968,560,2)
(925,234,2)
(986,277,2)
(798,474,2)
(459,277,2)
(337,560,2)
(564,981,2)
(399,555,2)
(536,359,2)
(165,990,2)
(603,690,2)
(241,890,2)
(691,732,2)
(465,335,2)
(231,1068,2)
(735,641,2)
(759,673,2)
(575,560,2)
(656,359,2)
(752,736,2)
(623,623,2)
(889,986,2)
(484,190,2)
(618,311,2)
(849,555,2)
(487,555,2)
(548,285,2)
(681,1124,2)
(355,359,2)
(618,323,2)
(448,359,2)
(436,973,2)
(165,331,2)
(792,649,2)
(681,181,2)
(187,335,2)
(306,334,2)
(834,555,2)
(96,49,2)
(857,1014,2)
(800,311,2)
(450,858,2)
(165,758,2)
(835,277,2)
(35,8,2)
(1084,335,2)
(221,1089,2)
(323,692,2)
(878,359,2)
(1,311,2)
(202,891,2)
(980,555,2)
(1004,472,2)
(273,615,2)
(391,560,2)
(784,888,2)
(613,277,2)
(827,61,2)
(60,961,2)
(79,359,2)
(374,818,2)
(818,49,2)
(215,1,2)
(1128,359,2)
(692,311,2)
(342,32,2)
(205,311,2)
(133,115,2)
(134,884,2)
(327,973,2)
(450,656,2)
(474,834,2)
(57,649,2)
(81,649,2)
(334,346,2)
(30,649,2)
(1065,249,2)
(1129,311,2)
(7,277,2)
(552,302,2)
(553,49,2)
(1084,302,2)
(586,359,2)
(564,771,2)
(43,554,2)
(8,974,2)
(231,649,2)
(690,771,2)
(555,555,2)
(677,690,2)
(4,818,2)
(799,1124,2)
(559,334,2)
(244,423,2)
(468,546,2)
(940,216,2)
(717,785,2)
(750,161,2)
(466,858,2)
(22,560,2)
(695,277,2)
(306,359,2)
(673,700,2)
(492,560,2)
(574,891,2)
(1002,359,2)
(621,623,2)
(135,891,2)
(602,311,2)
(231,973,2)
(244,359,2)
(878,173,2)
(487,302,2)
(137,562,2)
(1028,1124,2)
(892,302,2)
(1012,395,2)
(908,888,2)
(824,100,2)
(419,628,2)
(1015,610,2)
(183,1068,2)
(230,649,2)
(220,188,2)
(838,232,2)
(432,323,2)
(234,126,2)
(456,1044,2)
(969,277,2)
(958,115,2)
(1101,311,2)
(253,649,2)
(11,181,2)
(932,555,2)
(564,225,2)
(761,302,2)
(876,554,2)
(820,359,2)
(74,13,2)
(218,311,2)
(798,555,2)
(555,302,2)
(651,590,2)
(997,498,2)
(453,961,2)
(836,161,2)
(1038,32,2)
(497,555,2)
(319,359,2)
(1014,277,2)
(564,891,2)
(947,173,2)
(692,571,2)
(671,302,2)
(420,818,2)
(1061,690,2)
(949,263,2)
(396,649,2)
(276,555,2)
(179,218,2)
(891,1053,2)
(759,858,2)
(405,311,2)
(649,115,2)
(186,554,2)
(694,608,2)
(1073,32,2)
(20,1017,2)
(863,115,2)
(16,623,2)
(977,690,2)
(821,311,2)
(863,1070,2)
(418,359,2)
(630,359,2)
(648,680,2)
(199,818,2)
(928,974,2)
(550,845,2)
(949,154,2)
(48,359,2)
(231,161,2)
(641,803,2)
(189,126,2)
(641,726,2)
(443,890,2)
(144,1012,2)
(582,560,2)
(851,277,2)
(137,161,2)
(249,891,2)
(173,309,2)
(391,134,2)
(709,218,2)
(894,858,2)
(57,359,2)
(749,656,2)
(724,277,2)
(889,302,2)
(181,412,2)
(41,656,2)
(13,888,2)
(682,311,2)
(714,359,2)
(888,1044,2)
(551,186,2)
(275,218,2)
(449,340,2)
(301,348,2)
(744,218,2)
(208,126,2)
(1035,420,2)
(826,1124,2)
(212,1004,2)
(108,359,2)
(587,891,2)
(81,903,2)
(192,560,2)
(289,174,2)
(668,717,2)
(770,137,2)
(546,1014,2)
(62,323,2)
(873,891,2)
(623,931,2)
(193,564,2)
(115,657,2)
(1085,858,2)
(744,495,2)
(375,618,2)
(1123,601,2)
(554,771,2)
(1120,858,2)
(1077,771,2)
(793,234,2)
(1047,181,2)
(332,334,2)
(735,560,2)
(386,1004,2)
(848,554,2)
(765,723,2)
(194,649,2)
(657,649,2)
(863,604,2)
(81,973,2)
(383,973,2)
(480,555,2)
(333,960,2)
(601,1070,2)
(172,173,2)
(930,285,2)
(561,818,2)
(190,1124,2)
(165,249,2)
(514,1004,2)
(529,277,2)
(663,890,2)
(354,388,2)
(690,170,2)
(715,1044,2)
(829,115,2)
(762,161,2)
(1100,656,2)
(4,1068,2)
(940,303,2)
(160,1124,2)
(426,554,2)
(19,801,2)
(853,456,2)
(598,161,2)
(231,771,2)
(855,277,2)
(177,44,2)
(665,126,2)
(938,554,2)
(599,1068,2)
(53,126,2)
(1010,554,2)
(328,1124,2)
(401,456,2)
(173,340,2)
(1059,49,2)
(215,311,2)
(1020,115,2)
(139,617,2)
(363,597,2)
(888,1009,2)
(949,573,2)
(510,311,2)
(262,858,2)
(475,649,2)
(794,126,2)
(191,32,2)
(575,359,2)
(959,216,2)
(1044,501,2)
(459,359,2)
(340,888,2)
(958,49,2)
(385,656,2)
(781,311,2)
(743,263,2)
(967,649,2)
(496,610,2)
(949,983,2)
(102,359,2)
(1065,699,2)
(564,818,2)
(474,555,2)
(675,649,2)
(1006,311,2)
(335,1014,2)
(501,438,2)
(1032,173,2)
(137,359,2)
(4,771,2)
(523,126,2)
(483,323,2)
(643,858,2)
(850,498,2)
(931,350,2)
(776,649,2)
(564,76,2)
(155,173,2)
(20,309,2)
(564,1050,2)
(253,694,2)
(640,115,2)
(128,623,2)
(345,49,2)
(661,888,2)
(344,49,2)
(336,359,2)
(746,704,2)
(556,546,2)
(1009,29,2)
(1065,331,2)
(755,359,2)
(457,118,2)
(684,359,2)
(27,368,2)
(935,1124,2)
(369,818,2)
(86,1124,2)
(650,798,2)
(40,161,2)
(232,775,2)
(231,118,2)
(849,846,2)
(115,649,2)
(93,455,2)
(753,656,2)
(345,115,2)
(1068,1008,2)
(61,50,2)
(817,323,2)
(332,359,2)
(250,278,2)
(607,126,2)
(625,888,2)
(1088,1044,2)
(81,891,2)
(861,590,2)
(725,311,2)
(104,766,2)
(453,122,2)
(319,334,2)
(1124,1124,2)
(159,49,2)
(1116,311,2)
(583,1008,2)
(721,302,2)
(335,407,2)
(484,1124,2)
(1065,81,2)
(1097,277,2)
(487,986,2)
(140,32,2)
(564,526,2)
(906,359,2)
(575,334,2)
(4,1008,2)
(325,560,2)
(670,173,2)
(590,961,2)
(347,550,2)
(1061,470,2)
(761,334,2)
(24,323,2)
(643,262,2)
(880,560,2)
(918,334,2)
(636,590,2)
(356,888,2)
(949,721,2)
(958,640,2)
(156,484,2)
(489,302,2)
(233,359,2)
(564,244,2)
(1031,1044,2)
(290,888,2)
(116,218,2)
(622,234,2)
(661,173,2)
(592,323,2)
(147,555,2)
(447,888,2)
(729,891,2)
(956,1124,2)
(175,1124,2)
(926,746,2)
(61,1044,2)
(420,359,2)
(571,311,2)
(236,560,2)
(344,115,2)
(815,498,2)
(52,890,2)
(217,359,2)
(217,438,2)
(338,903,2)
(886,277,2)
(764,554,2)
(256,533,2)
(133,49,2)
(655,302,2)
(0,311,2)
(606,323,2)
(12,488,2)
(1045,126,2)
(763,285,2)
(736,391,2)
(272,450,2)
(389,649,2)
(890,656,2)
(1010,359,2)
(1040,560,2)
(684,285,2)
(1091,649,2)
(991,32,2)
(413,311,2)
(807,359,2)
(324,32,2)
(769,126,2)
-----------------------------------
(0,cmap)
(1,jp2_getcs(&dec->colr->data.colr)
(2,image)
(3,dec)
(4,0)
(5,in)
(6,dec)
(7,cdef)
(8,dec->pclr = box)
(9,image)
(10,dec)
(11,jas_image_numcmpts(dec->image)
(12,jas_image_cmptdtype(dec->image, 0)
(13,samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
(14,if (!dec->colr)
(15,i)
(16,i)
(17,dec)
(18,jas_image_delcmpt(dec->image, i - 1)
(19,dec->cdef->data.cdef)
(20,jas_image_cmptdtype(dec->image, i)
(21,dec)
(22,dec)
(23,break;)
(24,dec->image->cmprof_)
(25,if (dec->cmap->data.cmap.ents[i].pcol >= dec->pclr->data.pclr.numchans)
(26,samedtype)
(27,++i)
(28,dec->cmap)
(29,dec->image)
(30,cdef)
(31,i)
(32,i < dec->numchans)
(33,"box type %s\\n")
(34,ihdr)
(35,dec->pclr)
(36,jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image)
(37,cmapd)
(38,0)
(39,"error: expecting signature box\\n")
(40,ents)
(41,numchans)
(42,"warning: number of components mismatch\\n")
(43,jas_image_numcmpts(\\n\\t\\t  dec->image)
(44,dec->image)
(45,if (!(dec->image = jpc_decode(in, optstr)
(46,lutents)
(47,iccprof)
(48,jp2_dec_destroy(dec)
(49,dec->cdef)
(50,dec->ihdr->data)
(51,1)
(52,0)
(53,break;)
(54,if (dec->cmap)
(55,)
(56,dec->cmap)
(57,dec->cdef)
(58,image)
(59,data)
(60,dec->chantocmptlut[i] = i)
(61,dec->ihdr->data.ihdr)
(62,fromiccpcs(icchdr.colorspc)
(63,0)
(64,dtype)
(65,break;)
(66,dec)
(67,)
(68,"warning: component data type mismatch\\n")
(69,cdefent)
(70,dec = 0)
(71,dec->chantocmptlut)
(72,)
(73,pcol)
(74,!samedtype && dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)
(75,box)
(76,dec->chantocmptlut)
(77,if (cmapent->map == JP2_CMAP_DIRECT)
(78,)
(79,dec->image)
(80,dec)
(81,box)
(82,image)
(83,i)
(84,if (!jas_image_numcmpts(dec->image)
(85,dec->bpcc)
(86,dec)
(87,jas_eprintf("warning: missing CMAP box or superfluous PCLR box\\n")
(88,i)
(89,)
(90,i)
(91,jas_eprintf("no of components is %d\\n", jas_image_numcmpts(dec->image)
(92,case JP2_COLR_ICC:)
(93,dec->ihdr->data.ihdr.bpc)
(94,)
(95,dec->image)
(96,dec)
(97,i)
(98,dec)
(99,i)
(100,box)
(101,sizeof(int_fast32_t)
(102,dec->image)
(103,)
(104,jas_image_cmpttype(dec->image, i - 1)
(105,pclr)
(106,box)
(107,pcol)
(108,jp2_dec_destroy(dec)
(109,bpc)
(110,dec)
(111,i)
(112,iccprof)
(113,dec)
(114,error:)
(115,i < dec->numchans)
(116,dec->image)
(117,iccprof)
(118,!(dec->image = jpc_decode(in, optstr)
(119,channo)
(120,i)
(121,if (jas_image_cmpttype(dec->image, i - 1)
(122,dec->chantocmptlut)
(123,dec)
(124,chantocmptlut)
(125,0)
(126,box->type)
(127,channo)
(128,image)
(129,int_fast32_t)
(130,newcmptno)
(131,dtype)
(132,switch (box->type)
(133,i)
(134,jp2_cdef_lookup(cdefd, channo)
(135,box)
(136,cdefd)
(137,dec->pclr)
(138,if (!dec->cmap)
(139,++i)
(140,1)
(141,)
(142,dec->ihdr)
(143,jpc_decode(in, optstr)
(144,dec->cdef->data.cdef.ents[i].type)
(145,JP2_JP_MAGIC)
(146,i)
(147,pclrd)
(148,pclr)
(149,image)
(150,i)
(151,numlutents)
(152,dec->cdef->data.cdef)
(153,i = 0)
(154,pclrd->numlutents)
(155,samedtype)
(156,jas_eprintf("warning: component data type mismatch\\n")
(157,1)
(158,i)
(159,numchans)
(160,dec->image)
(161,dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(uint, jas_image_numcmpts(dec->image)
(162,dec->colr)
(163,dec)
(164,dec)
(165,jp2_box_destroy(box)
(166,dec)
(167,uint)
(168,)
(169,i - 1)
(170,dec->colr)
(171,dec)
(172,uint)
(173,jas_image_cmptdtype(dec->image, i)
(174,dec->ihdr->data)
(175,dec)
(176,case JP2_BOX_BPCC:)
(177,dec->image->cmprof_)
(178,dec)
(179,numchans)
(180,dec->cdef)
(181,!samedtype)
(182,JAS_CAST(uint, jas_image_numcmpts(\\n\\t\\t  dec->image)
(183,"error: cannot get box\\n")
(184,char *optstr)
(185,goto error;)
(186,dec->bpcc->data)
(187,cmapent->pcol)
(188,box->data)
(189,bpcc)
(190,JP2_BPCTODTYPE(dec->bpcc->data.bpcc.bpcs[i])
(191,jas_image_clrspc(dec->image)
(192,cdefent)
(193,RET)
(194,dec->cdef->data)
(195,for (i = 0; i < dec->numchans; ++i)
(196,cmapd->numchans)
(197,info)
(198,dec)
(199,image)
(200,dec->cmap->data.cmap.ents[i])
(201,)
(202,box)
(203,dec)
(204,cmap)
(205,dec)
(206,bpcs)
(207,i)
(208,dec)
(209,0)
(210,"error: unsupported compression type\\n")
(211,jas_image_numcmpts(dec->image)
(212,JAS_IMAGE_CT_UNKNOWN)
(213,jas_eprintf("error: invalid channel number in CDEF box\\n")
(214,!dec->pclr)
(215,jas_image_setclrspc(dec->image, jp2_getcs(&dec->colr->data.colr)
(216,jas_getdbglevel()
(217,dec->ihdr)
(218,dec->cmap)
(219,box)
(220,box->data.jp)
(221,cmap)
(222,)
(223,data)
(224,image)
(225,dec->pclr)
(226,ihdr)
(227,uint)
(228,dec)
(229,)
(230,cdef)
(231,dec)
(232,dec->cmap->data.cmap.numchans)
(233,dec->cmap)
(234,!dec->bpcc)
(235,if (!dec->pclr)
(236,image)
(237,image)
(238,for (i = 0; i < dec->numchans; ++i)
(239,channo)
(240,data)
(241,jas_eprintf("error: no memory\\n")
(242,image)
(243,pclr)
(244,dec->cdef)
(245,)
(246,cmap)
(247,goto error;)
(248,!dec->colr)
(249,box = jp2_box_get(in)
(250,dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo])
(251,image)
(252,pcol)
(253,jas_image_setcmpttype(dec->image,\\n\\t\\t\\t  dec->chantocmptlut[dec->cdef->data.cdef.ents[i].channo],\\n\\t\\t\\t  jp2_getct(jas_image_clrspc(dec->image)
(254,dec)
(255,cdefent)
(256,dec->colr->data.colr)
(257,goto error;)
(258,)
(259,dec->pclr->data.pclr)
(260,dec->image)
(261,box = 0)
(262,sizeof(uint_fast16_t)
(263,lutents = jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t)
(264,&dec->cdef->data.cdef)
(265,ents)
(266,cmapd->ents[channo])
(267,pclrd)
(268,cmap)
(269,)
(270,)
(271,box)
(272,dec->chantocmptlut)
(273,dec->pclr->data)
(274,if (!iccprof)
(275,image)
(276,i)
(277,!dec->cmap)
(278,dec->cdef->data.cdef.ents[i].channo)
(279,image)
(280,box)
(281,"error: invalid channel number in CDEF box\\n")
(282,chantocmptlut)
(283,i)
(284,i)
(285,dec->cmap && !dec->pclr)
(286,dec)
(287,in)
(288,i)
(289,dec->ihdr->data.ihdr)
(290,dec)
(291,data)
(292,)
(293,"error: failed to parse ICC profile\\n")
(294,dec)
(295,dec->ihdr)
(296,)
(297,ihdr)
(298,JP2_CMAP_PALETTE)
(299,if (!cdefent)
(300,)
(301,pclr)
(302,cmapent->map == JP2_CMAP_PALETTE)
(303,box->info)
(304,)
(305,colr)
(306,dec->image)
(307,dec->cmap = box)
(308,cdefd)
(309,i < JAS_CAST(uint, jas_image_numcmpts(dec->image)
(310,JAS_CAST(uint, jas_image_numcmpts(dec->image)
(311,dec->colr->data.colr.method)
(312,channo)
(313,samedtype)
(314,dec)
(315,if (!samedtype)
(316,ihdr)
(317,dec)
(318,in)
(319,dec->image)
(320,dec)
(321,cdefent->assoc)
(322,assoc)
(323,!iccprof)
(324,++i)
(325,channo)
(326,cmptno)
(327,box)
(328,dec->image)
(329,if (!dec->colr)
(330,box = 0)
(331,box = 0)
(332,dec->image)
(333,dec->colr)
(334,dec->image = jpc_decode(in, optstr)
(335,cmapent = &cmapd->ents[channo])
(336,dec->cmap)
(337,type)
(338,goto error;)
(339,JAS_IMAGE_CT_UNKNOWN)
(340,dtype = jas_image_cmptdtype(dec->image, 0)
(341,dec)
(342,i + 1)
(343,data)
(344,dec)
(345,image)
(346,!found)
(347,cmapd = &dec->cmap->data.cmap)
(348,!dec->cmap && dec->pclr)
(349,dec->cdef->data)
(350,jas_image_numcmpts(dec->image)
(351,dec->cmap->data)
(352,box)
(353,channo)
(354,dec->chantocmptlut[channo])
(355,dec->cmap)
(356,dec->ihdr->data.ihdr)
(357,dec)
(358,if (!dec->cmap)
(359,dec = jp2_dec_create()
(360,pclr)
(361,i)
(362,dec->image)
(363,dec)
(364,)
(365,0)
(366,)
(367,box)
(368,i = 0)
(369,dec->image = 0)
(370,type)
(371,ihdr)
(372,bpc)
(373,if (dec->cdef->data.cdef.ents[i].channo >= dec->numchans)
(374,dec)
(375,pclr)
(376,)
(377,box = 0)
(378,if (!(dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t)
(379,i = 1)
(380,1)
(381,jp2_getct(jas_image_clrspc(dec->image)
(382,image)
(383,box = 0)
(384,dec->cdef)
(385,dec)
(386,image)
(387,"ICC Profile CS %08x\\n")
(388,channo = 0)
(389,i)
(390,cmapd)
(391,cdefent = jp2_cdef_lookup(cdefd, channo)
(392,jas_eprintf("error: unsupported compression type\\n")
(393,if (dec->bpcc)
(394,image)
(395,dec->cdef->data.cdef.ents)
(396,dec->cdef->data.cdef.ents[i])
(397,if (!found)
(398,numcmpts)
(399,lutents)
(400,0)
(401,"warning: number of components mismatch\\n")
(402,dec->cdef->data.cdef.ents[i].channo)
(403,image)
(404,dec)
(405,dec->colr->data)
(406,JP2_BOX_JP)
(407,&cmapd->ents[channo])
(408,0)
(409,++channo)
(410,dec)
(411,cmapd)
(412,samedtype = true)
(413,dec->colr->data.colr.iccp)
(414,dec->numchans)
(415,i)
(416,box)
(417,dec->pclr)
(418,dec->pclr)
(419,dec->colr->data)
(420,dec->image)
(421,dec)
(422,0)
(423,!dec->cdef)
(424,dec)
(425,goto error;)
(426,numcmpts)
(427,cmapent)
(428,dec)
(429,&icchdr)
(430,box)
(431,ents)
(432,jas_eprintf("error: failed to parse ICC profile\\n")
(433,goto error;)
(434,data)
(435,JP2_BOX_FTYP)
(436,jp2_box_get(in)
(437,dec->ihdr->data.ihdr)
(438,dec->ihdr = box)
(439,box)
(440,dec->cmap)
(441,cdef)
(442,dec)
(443,cmap)
(444,"error: no components\\n")
(445,++i)
(446,dec->cdef->data.cdef)
(447,JAS_CAST(uint, jas_image_numcmpts(dec->image)
(448,dec->image)
(449,JP2_DTYPETOBPC(dtype)
(450,dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t)
(451,image)
(452,cmptno)
(453,dec->chantocmptlut[i])
(454,dec->ihdr)
(455,!samedtype)
(456,dec->ihdr->data.ihdr.numcmpts != JAS_CAST(uint, jas_image_numcmpts(dec->image)
(457,"error: cannot decode code stream\\n")
(458,for (channo = 0; channo < cmapd->numchans; ++channo)
(459,dec->numchans)
(460,jas_image_numcmpts(dec->image)
(461,cdefd)
(462,jas_eprintf("warning: component data type mismatch\\n")
(463,dec->colr->data.colr)
(464,if (jas_image_cmptdtype(dec->image, i)
(465,cmapent->map)
(466,dec->cmap->data.cmap.ents[i].cmptno)
(467,0)
(468,cmapent->map)
(469,channo)
(470,dec->colr->data)
(471,)
(472,JAS_CAST(uint, jas_image_numcmpts(dec->image)
(473,jas_eprintf("error: expecting signature box\\n")
(474,i * pclrd->numchans)
(475,dec)
(476,ents)
(477,case JP2_BOX_IHDR:)
(478,icchdr)
(479,i)
(480,lutents[i] = pclrd->lutdata[cmapent->pcol + i * pclrd->numchans])
(481,data)
(482,channo)
(483,icchdr.colorspc)
(484,jas_image_cmptdtype(dec->image, i)
(485,)
(486,break;)
(487,pclrd->numlutents)
(488,dec->image)
(489,pclrd)
(490,dec)
(491,channo)
(492,cdefent)
(493,box)
(494,JP2_CMAP_DIRECT)
(495,jas_image_numcmpts(dec->image)
(496,box)
(497,pclrd->lutdata)
(498,samedtype)
(499,break;)
(500,i)
(501,dec->ihdr)
(502,uint)
(503,goto error;)
(504,samedtype)
(505,case JP2_BOX_COLR:)
(506,jas_cmprof_createfromiccprof(iccprof)
(507,ihdr)
(508,i)
(509,jas_getdbglevel()
(510,dec->colr->data.colr.iccplen)
(511,if (dec->cdef)
(512,dec)
(513,chantocmptlut)
(514,image)
(515,dec->chantocmptlut[channo] = newcmptno)
(516,dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
(517,dec->cdef->data.cdef)
(518,goto error;)
(519,)
(520,i)
(521,cmapd)
(522,bpcc)
(523,1)
(524,box)
(525,cmapent)
(526,box->type != JP2_BOX_JP)
(527,if (!dec->bpcc)
(528,dec->cmap->data.cmap)
(529,cdef)
(530,data)
(531,box)
(532,dec->pclr->data.pclr.numchans)
(533,dec->colr->data)
(534,)
(535,cmap)
(536,dec->ihdr)
(537,for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)
(538,if (!(box = jp2_box_get(in)
(539,pclrd)
(540,)
(541,if (dec)
(542,0)
(543,image)
(544,0)
(545,icchdr.colorspc)
(546,cmapent->map == JP2_CMAP_DIRECT)
(547,uint)
(548,"warning: missing PCLR box or superfluous CMAP box\\n")
(549,"error: no code stream found\\n")
(550,&dec->cmap->data.cmap)
(551,dec->bpcc->data.bpcc)
(552,jas_alloc2(pclrd->numlutents, sizeof(int_fast32_t)
(553,dec)
(554,dec->bpcc)
(555,i < pclrd->numlutents)
(556,cmapent)
(557,jas_iccprof_gethdr(iccprof, &icchdr)
(558,data)
(559,dec->image)
(560,dec->cdef)
(561,"no of components is %d\\n")
(562,dec->pclr = 0)
(563,cmap)
(564,return 0;)
(565,data)
(566,chantocmptlut)
(567,pclrd)
(568,channo)
(569,jp2_box_get(in)
(570,"warning: missing CMAP box or superfluous PCLR box\\n")
(571,jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,\\n\\t\\t  dec->colr->data.colr.iccplen)
(572,0)
(573,JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol])
(574,0)
(575,dec->image)
(576,data)
(577,dec->cmap)
(578,found)
(579,if (jas_image_cmptdtype(dec->image, i)
(580,)
(581,)
(582,0)
(583,box)
(584,type)
(585,++i)
(586,dec->cdef)
(587,jas_eprintf("expecting file type box\\n")
(588,0)
(589,)
(590,i < dec->numchans)
(591,cdefent)
(592,cmprof_)
(593,lutents)
(594,switch (dec->colr->data.colr.method)
(595,break;)
(596,dec->cdef)
(597,jas_image_cmpttype(dec->image, i - 1)
(598,i)
(599,goto error;)
(600,magic)
(601,dec->cdef->data.cdef.ents[i])
(602,numchans)
(603,"error: no COLR box\\n")
(604,dec->cdef->data.cdef.ents)
(605,dec)
(606,dec->numchans)
(607,dec)
(608,jas_image_clrspc(dec->image)
(609,found)
(610,!dec->ihdr)
(611,ents)
(612,dec)
(613,dec)
(614,jas_eprintf("ICC Profile CS %08x\\n", icchdr.colorspc)
(615,dec->pclr)
(616,cdef)
(617,i = 0)
(618,!dec->cmap)
(619,name)
(620,cmap)
(621,--i)
(622,bpcc)
(623,i > 0)
(624,cmapent->pcol)
(625,1)
(626,data)
(627,goto error;)
(628,dec->colr)
(629,icchdr)
(630,dec->image)
(631,false)
(632,jas_eprintf("error: cannot get box\\n")
(633,if (box->data.jp.magic != JP2_JP_MAGIC)
(634,image)
(635,comptype)
(636,i)
(637,pclr)
(638,i)
(639,dec->numchans)
(640,dec->image)
(641,jp2_getct(jas_image_clrspc(dec->image)
(642,jp2_box_get(in)
(643,jas_alloc2(dec->numchans, sizeof(uint_fast16_t)
(644,JP2_IHDR_BPCNULL)
(645,newcmptno)
(646,jas_eprintf("warning: superfluous BPCC box\\n")
(647,type)
(648,dec->bpcc)
(649,dec->cdef->data.cdef.ents[i].channo >= dec->numchans)
(650,pclrd->lutdata[cmapent->pcol + i * pclrd->numchans])
(651,++i)
(652,"error: invalid component number in CMAP box\\n")
(653,jp2_box_destroy(box)
(654,image)
(655,numlutents)
(656,dec->cmap)
(657,dec->numchans)
(658,)
(659,dec->cmap->data.cmap.ents)
(660,colr)
(661,image)
(662,iccprof)
(663,cdef)
(664,goto error;)
(665,dec)
(666,numchans)
(667,cdef)
(668,return image;)
(669,0)
(670,jas_image_numcmpts(dec->image)
(671,cmapent)
(672,jas_iccprof_destroy(iccprof)
(673,dec->cmap->data.cmap)
(674,jas_image_setclrspc(dec->image, fromiccpcs(icchdr.colorspc)
(675,ents)
(676,data)
(677,colr)
(678,if (jas_getdbglevel()
(679,goto error;)
(680,dec->bpcc = box)
(681,image)
(682,iccprof)
(683,image)
(684,dec->cmap)
(685,jas_eprintf("warning: number of components mismatch\\n")
(686,)
(687,dec->image)
(688,dec)
(689,cmap)
(690,!dec->colr)
(691,box)
(692,iccprof = jas_iccprof_createfrombuf(dec->colr->data.colr.iccp,\\n\\t\\t  dec->colr->data.colr.iccplen)
(693,dec)
(694,jp2_getct(jas_image_clrspc(dec->image)
(695,0)
(696,0)
(697,dec->numchans)
(698,)
(699,box = 0)
(700,dec->cmap->data)
(701,box)
(702,dec)
(703,box)
(704,dec->cdef->data)
(705,dec)
(706,colr)
(707,newcmptno)
(708,bpcc)
(709,dec)
(710,)
(711,dec)
(712,dec)
(713,found)
(714,dec->pclr)
(715,jas_image_numcmpts(dec->image)
(716,colorspc)
(717,image = dec->image)
(718,&dec->pclr->data.pclr)
(719,jas_stream_t *in)
(720,dec->cmap)
(721,dec->image)
(722,map)
(723,dec->bpcc->data.bpcc.numcmpts)
(724,pclr)
(725,iccp)
(726,jas_image_clrspc(dec->image)
(727,if (box->type != JP2_BOX_FTYP)
(728,dec)
(729,found = 0)
(730,dec->cdef)
(731,i)
(732,!(box = jp2_box_get(in)
(733,for (i = 0; i < pclrd->numlutents; ++i)
(734,dec)
(735,jas_image_setcmpttype(dec->image, newcmptno, jp2_getct(jas_image_clrspc(dec->image)
(736,cdefent->type)
(737,)
(738,box = jp2_box_get(in)
(739,cmapent)
(740,dec)
(741,++i)
(742,if (dec->cmap->data.cmap.ents[i].cmptno >= JAS_CAST(uint, jas_image_numcmpts(dec->image)
(743,jas_free(lutents)
(744,JAS_CAST(uint, jas_image_numcmpts(dec->image)
(745,dec)
(746,dec->cdef->data.cdef)
(747,ents)
(748,dec)
(749,numchans)
(750,dec)
(751,(samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
(752,jp2_getct(jas_image_clrspc(dec->image)
(753,chantocmptlut)
(754,goto error;)
(755,dec->pclr)
(756,)
(757,image)
(758,box = 0)
(759,dec->cmap->data.cmap.ents)
(760,"incorrect magic number\\n")
(761,dec->image)
(762,dec)
(763,jas_eprintf("warning: missing PCLR box or superfluous CMAP box\\n")
(764,image)
(765,dec->bpcc->data.bpcc.numcmpts != JAS_CAST(uint, jas_image_numcmpts(\\n\\t\\t  dec->image)
(766,i - 1)
(767,0)
(768,colr)
(769,pclr)
(770,dec->pclr->data)
(771,dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE)
(772,pclrd->bpc[cmapent->pcol])
(773,map)
(774,)
(775,dec->cmap->data.cmap)
(776,dec->cdef->data)
(777,colorspc)
(778,ihdr)
(779,dec)
(780,)
(781,dec->numchans = dec->cmap ? dec->cmap->data.cmap.numchans : JAS_CAST(uint, jas_image_numcmpts(dec->image)
(782,image)
(783,cdef)
(784,dec->ihdr->data)
(785,dec->image)
(786,if (!(box = jp2_box_get(in)
(787,jas_eprintf("error: cannot decode code stream\\n")
(788,box)
(789,colr)
(790,dec)
(791,cmprof_)
(792,dec->cdef->data.cdef.ents)
(793,dec->bpcc)
(794,cmap)
(795,goto error;)
(796,i)
(797,)
(798,cmapent->pcol + i * pclrd->numchans)
(799,jas_image_cmptdtype(dec->image, i)
(800,dec->colr)
(801,dec->cdef->data)
(802,)
(803,channo + 1)
(804,i = 0)
(805,)
(806,colr)
(807,dec->cmap)
(808,cmapent)
(809,dec)
(810,ihdr)
(811,jas_eprintf("error: invalid component number in CMAP box\\n")
(812,case JP2_COLR_ENUM:)
(813,if (dec->cmap && !dec->pclr)
(814,if (!jas_image_numcmpts(dec->image)
(815,dec)
(816,1)
(817,iccprof)
(818,!jas_image_numcmpts(dec->image)
(819,true)
(820,dec->ihdr)
(821,cmap)
(822,pclrd)
(823,lutents)
(824,box)
(825,jp)
(826,image)
(827,dec->ihdr->data.ihdr.numcmpts)
(828,i)
(829,dec)
(830,i)
(831,cmap)
(832,uint)
(833,i)
(834,pclrd->numchans)
(835,data)
(836,data)
(837,dec->ihdr->data.ihdr.bpc)
(838,dec->cmap ? dec->cmap->data.cmap.numchans : JAS_CAST(uint, jas_image_numcmpts(dec->image)
(839,for (i = 0; i < dec->numchans; ++i)
(840,i)
(841,i)
(842,image)
(843,lutdata)
(844,jp2_box_destroy(box)
(845,dec->cmap->data.cmap)
(846,i = 0)
(847,while ((box = jp2_box_get(in)
(848,data)
(849,lutents[i])
(850,dtype)
(851,0)
(852,data)
(853,jas_eprintf("warning: number of components mismatch\\n")
(854,samedtype = false)
(855,dec)
(856,0)
(857,channo)
(858,i < dec->numchans)
(859,JP2_IHDR_COMPTYPE)
(860,dtype)
(861,dec)
(862,dec)
(863,dec->cdef->data.cdef.ents[i])
(864,)
(865,type)
(866,dec)
(867,)
(868,)
(869,dec)
(870,break;)
(871,dec->image->cmprof_ = jas_cmprof_createfromiccprof(iccprof)
(872,for (i = 0; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)
(873,found)
(874,box->data.jp.magic)
(875,dec)
(876,dec)
(877,)
(878,dec->image)
(879,cdef)
(880,dec)
(881,i)
(882,if (box)
(883,ihdr)
(884,cdefd = &dec->cdef->data.cdef)
(885,jp2_dec_create()
(886,numchans)
(887,if (!dec->ihdr)
(888,!jas_image_numcmpts(dec->image)
(889,pclrd->numlutents)
(890,!(dec->chantocmptlut = jas_alloc2(dec->numchans, sizeof(uint_fast16_t)
(891,box->type != JP2_BOX_FTYP)
(892,dec->chantocmptlut)
(893,dec->colr)
(894,dec->cmap->data.cmap.ents[i])
(895,box)
(896,dec->cmap->data.cmap.ents[i].pcol)
(897,if (box->type != JP2_BOX_JP)
(898,method)
(899,case JP2_BOX_JP2C:)
(900,0)
(901,data)
(902,box)
(903,dec->cmap->data.cmap.ents[i].pcol >= dec->pclr->data.pclr.numchans)
(904,dec->ihdr->data.ihdr.comptype)
(905,i)
(906,dec->colr)
(907,cmapd->ents)
(908,ihdr)
(909,data)
(910,cdef)
(911,image)
(912,if (dec->bpcc->data.bpcc.numcmpts != JAS_CAST(uint, jas_image_numcmpts(\\n\\t\\t  dec->image)
(913,)
(914,)
(915,pclrd->bpc)
(916,jas_eprintf("error: invalid CMAP LUT index\\n")
(917,)
(918,dec->image)
(919,image)
(920,box->type)
(921,numchans)
(922,newcmptno)
(923,)
(924,!cdefent)
(925,0)
(926,dec->cdef->data.cdef.ents)
(927,case JP2_BOX_CMAP:)
(928,box)
(929,case JP2_BOX_CDEF:)
(930,dec)
(931,i = jas_image_numcmpts(dec->image)
(932,numchans)
(933,uint_fast16_t)
(934,i)
(935,JAS_CAST(uint, jas_image_numcmpts(dec->image)
(936,dec)
(937,if (dec->ihdr->data.ihdr.numcmpts != JAS_CAST(uint, jas_image_numcmpts(dec->image)
(938,bpcc)
(939,dec->cmap->data)
(940,box->info->name)
(941,box)
(942,bpcc)
(943,if (found)
(944,dec->cdef = box)
(945,jas_eprintf("error: no COLR box\\n")
(946,)
(947,dec)
(948,)
(949,jas_image_depalettize(dec->image, cmapent->cmptno, pclrd->numlutents, lutents, JP2_BPCTODTYPE(pclrd->bpc[cmapent->pcol])
(950,in)
(951,dec->chantocmptlut[channo] = channo)
(952,dec->pclr->data.pclr)
(953,break;)
(954,dec)
(955,goto error;)
(956,dec->bpcc->data.bpcc.bpcs)
(957,dec->chantocmptlut[i])
(958,jas_image_numcmpts(dec->image)
(959,jas_eprintf("box type %s\\n", box->info->name)
(960,dec->colr = box)
(961,i = 0)
(962,if (!dec->cdef)
(963,dec->ihdr->data)
(964,dec->bpcc->data.bpcc.bpcs[i])
(965,chantocmptlut)
(966,box = 0)
(967,cdef)
(968,newcmptno)
(969,cmap)
(970,dec->cmap = 0)
(971,dec)
(972,dec)
(973,box->data.jp.magic != JP2_JP_MAGIC)
(974,!dec->pclr)
(975,icchdr)
(976,0)
(977,dec)
(978,dec)
(979,dec)
(980,cmapent)
(981,dec->image)
(982,jas_image_numcmpts(dec->image)
(983,newcmptno = jas_image_numcmpts(dec->image)
(984,goto error;)
(985,dec->image)
(986,pclrd = &dec->pclr->data.pclr)
(987,numlutents)
(988,if (!(dec = jp2_dec_create()
(989,++i)
(990,box = 0)
(991,i)
(992,)
(993,for (i = 1; i < JAS_CAST(uint, jas_image_numcmpts(dec->image)
(994,lutents)
(995,"error: invalid CMAP LUT index\\n")
(996,abort()
(997,data)
(998,newcmptno)
(999,0)
(1000,jas_image_clrspc(dec->image)
(1001,data)
(1002,dec->image)
(1003,dec->image)
(1004,i < JAS_CAST(uint, jas_image_numcmpts(dec->image)
(1005,if (box)
(1006,cmap)
(1007,bpc)
(1008,!(dec = jp2_dec_create()
(1009,jas_image_numcmpts(dec->image)
(1010,dec->image)
(1011,image = 0)
(1012,dec->cdef->data.cdef.ents[i])
(1013,cdef)
(1014,channo < cmapd->numchans)
(1015,ihdr)
(1016,"warning: superfluous BPCC box\\n")
(1017,dec->image)
(1018,box = 0)
(1019,dec->colr->data.colr)
(1020,dec->image)
(1021,0)
(1022,i)
(1023,)
(1024,i)
(1025,numchans)
(1026,)
(1027,)
(1028,dec->bpcc)
(1029,image)
(1030,)
(1031,dec)
(1032,i)
(1033,pclr)
(1034,colr)
(1035,jas_image_numcmpts(dec->image)
(1036,uint)
(1037,optstr)
(1038,jas_image_setcmpttype(dec->image, dec->chantocmptlut[i],\\n\\t\\t\\t  jp2_getct(jas_image_clrspc(dec->image)
(1039,jp2_box_destroy(dec->pclr)
(1040,assoc)
(1041,dec->chantocmptlut)
(1042,jas_eprintf("error: no code stream found\\n")
(1043,)
(1044,!dec->ihdr)
(1045,break;)
(1046,jas_eprintf("incorrect magic number\\n")
(1047,i)
(1048,cmap)
(1049,dec)
(1050,dec->chantocmptlut[channo])
(1051,if (dec->ihdr->data.ihdr.comptype != JP2_IHDR_COMPTYPE)
(1052,found)
(1053,box->type)
(1054,)
(1055,image)
(1056,if ((samedtype && dec->ihdr->data.ihdr.bpc != JP2_DTYPETOBPC(dtype)
(1057,box)
(1058,channo)
(1059,dec->numchans)
(1060,assert(dec->image->cmprof_)
(1061,dec->colr->data.colr)
(1062,dec)
(1063,dec->bpcc->data)
(1064,goto error;)
(1065,jp2_box_destroy(box)
(1066,pclrd)
(1067,cmap)
(1068,!(box = jp2_box_get(in)
(1069,box)
(1070,i = 0)
(1071,data)
(1072,if (!dec->cmap && dec->pclr)
(1073,i)
(1074,numchans)
(1075,colr)
(1076,&dec->colr->data.colr)
(1077,dec)
(1078,"expecting file type box\\n")
(1079,found = 1)
(1080,)
(1081,"error: no memory\\n")
(1082,)
(1083,goto error;)
(1084,cmapent->cmptno)
(1085,JAS_CAST(uint, jas_image_numcmpts(dec->image)
(1086,break;)
(1087,dec)
(1088,dec)
(1089,!dec->cmap)
(1090,jas_eprintf("error: no components\\n")
(1091,cdef)
(1092,if (!dec->ihdr)
(1093,samedtype)
(1094,for (i = jas_image_numcmpts(dec->image)
(1095,dec)
(1096,if (dec->cdef)
(1097,dec)
(1098,i)
(1099,image)
(1100,dec)
(1101,colr)
(1102,jas_eprintf("error: no components\\n")
(1103,box = jp2_box_get(in)
(1104,)
(1105,bpcc)
(1106,0)
(1107,jp2_box_destroy(dec->cmap)
(1108,dec)
(1109,dec->ihdr->data.ihdr.bpc != JP2_IHDR_BPCNULL)
(1110,for (i = 0; i < dec->numchans; ++i)
(1111,"warning: component data type mismatch\\n")
(1112,dec->bpcc->data.bpcc)
(1113,dec)
(1114,image)
(1115,case JP2_BOX_PCLR:)
(1116,iccplen)
(1117,break;)
(1118,)
(1119,pclrd)
(1120,dec->cmap)
(1121,cmptno)
(1122,jas_eprintf("error: missing IHDR box\\n")
(1123,dec->cdef->data.cdef.ents[i].assoc)
(1124,i < JAS_CAST(uint, jas_image_numcmpts(dec->image)
(1125,)
(1126,"error: missing IHDR box\\n")
(1127,dec)
(1128,dec->image)
(1129,colr)
(1130,jas_image_setcmpttype(dec->image, i, JAS_IMAGE_CT_UNKNOWN)
(1131,dec->cmap->data)
(1132,icchdr)
(1133,"error: no components\\n")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff1a34ad6300000000ffffffffffffffff6334ad6300000000ffffffffffffffff6334ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x000000006a502020ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
jas_image_t *jp2_decode(jas_stream_t *in, char *optstr) {
jp2_box_t *box;
int found;
jas_image_t *image;
jp2_dec_t *dec;
int dtype;
unsigned int i;
jp2_cmap_t *cmapd;
jp2_pclr_t *pclrd;
jp2_cdef_t *cdefd;
unsigned int channo;
int newcmptno;
int_fast32_t *lutents;
jp2_cmapent_t *cmapent;
jas_icchdr_t icchdr;
jas_iccprof_t *iccprof;
dec = 0;
box = 0;
image = 0;
if(box->data.jp.magic != JP2_JP_MAGIC)
jas_eprintf('incorrect magic number ');
goto error;
jp2_box_destroy(box);
if(dec)
jp2_dec_destroy(dec);
return 0;
=======================
