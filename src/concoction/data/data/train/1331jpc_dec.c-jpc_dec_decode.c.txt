-----label-----
0
-----code-----
static int jpc_dec_decode(jpc_dec_t *dec)
{
	jpc_ms_t *ms;
	jpc_dec_mstabent_t *mstabent;
	int ret;
	jpc_cstate_t *cstate;

	if (!(cstate = jpc_cstate_create())) {
		return -1;
	}
	dec->cstate = cstate;

	/* Initially, we should expect to encounter a SOC marker segment. */
	dec->state = JPC_MHSOC;

	for (;;) {

		/* Get the next marker segment in the code stream. */
		if (!(ms = jpc_getms(dec->in, cstate))) {
			jas_eprintf("cannot get marker segment\n");
			return -1;
		}

		mstabent = jpc_dec_mstab_lookup(ms->id);
		assert(mstabent);

		/* Ensure that this type of marker segment is permitted
		  at this point in the code stream. */
		if (!(dec->state & mstabent->validstates)) {
			jas_eprintf("unexpected marker segment type\n");
			jpc_ms_destroy(ms);
			return -1;
		}

		/* Process the marker segment. */
		if (mstabent->action) {
			ret = (*mstabent->action)(dec, ms);
		} else {
			/* No explicit action is required. */
			ret = 0;
		}

		/* Destroy the marker segment. */
		jpc_ms_destroy(ms);

		if (ret < 0) {
			return -1;
		} else if (ret > 0) {
			break;
		}

	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
38,39
38,40
39,40
40,41
41,42
41,43
42,43
44,45
45,46
47,48
48,49
49,50
51,52
52,53
52,54
53,54
53,55
54,55
57,58
59,60
60,61
60,62
61,62
61,63
62,63
65,66
67,68
67,69
69,70
69,71
69,72
69,73
69,74
69,75
69,76
70,71
70,72
71,72
72,73
73,74
73,75
74,75
76,77
76,78
76,79
77,78
79,80
79,81
80,81
83,84
85,86
85,87
86,87
87,88
87,89
88,89
91,92
92,93
94,95
95,96
95,97
96,97
98,99
98,100
99,100
101,102
101,103
102,103
105,106
106,107
106,108
107,108
109,110
111,112
111,113
112,113
113,114
114,115
114,116
115,116
115,117
116,117
119,120
119,121
120,121
123,124
123,125
123,126
124,125
125,126
125,127
126,127
129,130
130,131
130,132
131,132
133,134
135,136
136,137
138,139
138,140
138,141
139,140
139,141
140,141
143,144
144,145
145,146
145,147
146,147
148,149
148,150
148,151
149,150
150,151
151,152
151,153
152,153
155,156
157,158
159,160
160,161
161,162
161,163
162,163
165,166
166,167
166,168
167,168
169,170
171,172
171,173
171,174
172,173
172,174
173,174
176,177
177,178
178,179
180,181
180,182
181,182
181,183
182,183
185,186
187,188
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,25,28,30,34,36,37,43,46,50,55,56,58,63,64,66,68,75,78,81,82,84,89,90,93,97,100,103,104,108,110,117,118,121,122,127,128,132,134,137,141,142,147,153,154,156,158,163,164,168,170,174,175,179,183,184,186,188
-----computeFrom-----
41,42
41,43
52,53
52,54
60,61
60,62
73,74
73,75
95,96
95,97
114,115
114,116
145,146
145,147
161,162
161,163
172,173
172,174
181,182
181,183
-----guardedBy-----
-----guardedByNegation-----
174,183
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;NullStatement;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ReturnStatement;LiteralExpression;
-----ast_node-----
static int jpc_dec_decode(jpc_dec_t *dec){	jpc_ms_t *ms;	jpc_dec_mstabent_t *mstabent;	int ret;	jpc_cstate_t *cstate;	if (!(cstate = jpc_cstate_create())) {		return -1;	}	dec->cstate = cstate;	/* Initially, we should expect to encounter a SOC marker segment. */	dec->state = JPC_MHSOC;	for (;;) {		/* Get the next marker segment in the code stream. */		if (!(ms = jpc_getms(dec->in, cstate))) {			jas_eprintf("cannot get marker segment\n");			return -1;		}		mstabent = jpc_dec_mstab_lookup(ms->id);		assert(mstabent);		/* Ensure that this type of marker segment is permitted		  at this point in the code stream. */		if (!(dec->state & mstabent->validstates)) {			jas_eprintf("unexpected marker segment type\n");			jpc_ms_destroy(ms);			return -1;		}		/* Process the marker segment. */		if (mstabent->action) {			ret = (*mstabent->action)(dec, ms);		} else {			/* No explicit action is required. */			ret = 0;		}		/* Destroy the marker segment. */		jpc_ms_destroy(ms);		if (ret < 0) {			return -1;		} else if (ret > 0) {			break;		}	}	return 0;}
static int
jpc_dec_decode(jpc_dec_t *dec)
jpc_dec_decode
jpc_dec_t *dec
jpc_dec_t
jpc_dec_t
*dec
*
dec
{	jpc_ms_t *ms;	jpc_dec_mstabent_t *mstabent;	int ret;	jpc_cstate_t *cstate;	if (!(cstate = jpc_cstate_create())) {		return -1;	}	dec->cstate = cstate;	/* Initially, we should expect to encounter a SOC marker segment. */	dec->state = JPC_MHSOC;	for (;;) {		/* Get the next marker segment in the code stream. */		if (!(ms = jpc_getms(dec->in, cstate))) {			jas_eprintf("cannot get marker segment\n");			return -1;		}		mstabent = jpc_dec_mstab_lookup(ms->id);		assert(mstabent);		/* Ensure that this type of marker segment is permitted		  at this point in the code stream. */		if (!(dec->state & mstabent->validstates)) {			jas_eprintf("unexpected marker segment type\n");			jpc_ms_destroy(ms);			return -1;		}		/* Process the marker segment. */		if (mstabent->action) {			ret = (*mstabent->action)(dec, ms);		} else {			/* No explicit action is required. */			ret = 0;		}		/* Destroy the marker segment. */		jpc_ms_destroy(ms);		if (ret < 0) {			return -1;		} else if (ret > 0) {			break;		}	}	return 0;}
jpc_ms_t *ms;
jpc_ms_t *ms;
jpc_ms_t
jpc_ms_t
*ms
*
ms
jpc_dec_mstabent_t *mstabent;
jpc_dec_mstabent_t *mstabent;
jpc_dec_mstabent_t
jpc_dec_mstabent_t
*mstabent
*
mstabent
int ret;
int ret;
int
ret
ret
jpc_cstate_t *cstate;
jpc_cstate_t *cstate;
jpc_cstate_t
jpc_cstate_t
*cstate
*
cstate
if (!(cstate = jpc_cstate_create())) {		return -1;	}
!(cstate = jpc_cstate_create())
(cstate = jpc_cstate_create())
cstate = jpc_cstate_create()
cstate
cstate
jpc_cstate_create()
jpc_cstate_create
jpc_cstate_create
{		return -1;	}
return -1;
-1
1
dec->cstate = cstate;
dec->cstate = cstate
dec->cstate
dec
dec
cstate
cstate
cstate
dec->state = JPC_MHSOC;
dec->state = JPC_MHSOC
dec->state
dec
dec
state
JPC_MHSOC
JPC_MHSOC
for (;;) {		/* Get the next marker segment in the code stream. */		if (!(ms = jpc_getms(dec->in, cstate))) {			jas_eprintf("cannot get marker segment\n");			return -1;		}		mstabent = jpc_dec_mstab_lookup(ms->id);		assert(mstabent);		/* Ensure that this type of marker segment is permitted		  at this point in the code stream. */		if (!(dec->state & mstabent->validstates)) {			jas_eprintf("unexpected marker segment type\n");			jpc_ms_destroy(ms);			return -1;		}		/* Process the marker segment. */		if (mstabent->action) {			ret = (*mstabent->action)(dec, ms);		} else {			/* No explicit action is required. */			ret = 0;		}		/* Destroy the marker segment. */		jpc_ms_destroy(ms);		if (ret < 0) {			return -1;		} else if (ret > 0) {			break;		}	}
;
{		/* Get the next marker segment in the code stream. */		if (!(ms = jpc_getms(dec->in, cstate))) {			jas_eprintf("cannot get marker segment\n");			return -1;		}		mstabent = jpc_dec_mstab_lookup(ms->id);		assert(mstabent);		/* Ensure that this type of marker segment is permitted		  at this point in the code stream. */		if (!(dec->state & mstabent->validstates)) {			jas_eprintf("unexpected marker segment type\n");			jpc_ms_destroy(ms);			return -1;		}		/* Process the marker segment. */		if (mstabent->action) {			ret = (*mstabent->action)(dec, ms);		} else {			/* No explicit action is required. */			ret = 0;		}		/* Destroy the marker segment. */		jpc_ms_destroy(ms);		if (ret < 0) {			return -1;		} else if (ret > 0) {			break;		}	}
if (!(ms = jpc_getms(dec->in, cstate))) {			jas_eprintf("cannot get marker segment\n");			return -1;		}
!(ms = jpc_getms(dec->in, cstate))
(ms = jpc_getms(dec->in, cstate))
ms = jpc_getms(dec->in, cstate)
ms
ms
jpc_getms(dec->in, cstate)
jpc_getms
jpc_getms
dec->in
dec
dec
in
cstate
cstate
{			jas_eprintf("cannot get marker segment\n");			return -1;		}
jas_eprintf("cannot get marker segment\n");
jas_eprintf("cannot get marker segment\n")
jas_eprintf
jas_eprintf
"cannot get marker segment\n"
return -1;
-1
1
mstabent = jpc_dec_mstab_lookup(ms->id);
mstabent = jpc_dec_mstab_lookup(ms->id)
mstabent
mstabent
jpc_dec_mstab_lookup(ms->id)
jpc_dec_mstab_lookup
jpc_dec_mstab_lookup
ms->id
ms
ms
id
assert(mstabent);
assert(mstabent)
assert
assert
mstabent
mstabent
if (!(dec->state & mstabent->validstates)) {			jas_eprintf("unexpected marker segment type\n");			jpc_ms_destroy(ms);			return -1;		}
!(dec->state & mstabent->validstates)
(dec->state & mstabent->validstates)
dec->state & mstabent->validstates
dec->state
dec
dec
state
mstabent->validstates
mstabent
mstabent
validstates
{			jas_eprintf("unexpected marker segment type\n");			jpc_ms_destroy(ms);			return -1;		}
jas_eprintf("unexpected marker segment type\n");
jas_eprintf("unexpected marker segment type\n")
jas_eprintf
jas_eprintf
"unexpected marker segment type\n"
jpc_ms_destroy(ms);
jpc_ms_destroy(ms)
jpc_ms_destroy
jpc_ms_destroy
ms
ms
return -1;
-1
1
if (mstabent->action) {			ret = (*mstabent->action)(dec, ms);		} else {			/* No explicit action is required. */			ret = 0;		}
mstabent->action
mstabent
mstabent
action
{			ret = (*mstabent->action)(dec, ms);		}
ret = (*mstabent->action)(dec, ms);
ret = (*mstabent->action)(dec, ms)
ret
ret
(*mstabent->action)(dec, ms)
(*mstabent->action)
*mstabent->action
mstabent->action
mstabent
mstabent
action
dec
dec
ms
ms
{			/* No explicit action is required. */			ret = 0;		}
ret = 0;
ret = 0
ret
ret
0
jpc_ms_destroy(ms);
jpc_ms_destroy(ms)
jpc_ms_destroy
jpc_ms_destroy
ms
ms
if (ret < 0) {			return -1;		} else if (ret > 0) {			break;		}
ret < 0
ret
ret
0
{			return -1;		}
return -1;
-1
1
if (ret > 0) {			break;		}
ret > 0
ret
ret
0
{			break;		}
break;
return 0;
0
-----joern-----
(345,13,0)
(282,237,0)
(56,285,0)
(236,126,0)
(22,317,0)
(145,261,0)
(349,265,0)
(120,157,0)
(20,16,0)
(155,208,0)
(230,189,0)
(76,155,0)
(215,60,0)
(33,60,0)
(36,37,0)
(228,225,0)
(276,180,0)
(188,215,0)
(309,229,0)
(129,208,0)
(272,45,0)
(162,286,0)
(83,176,0)
(266,111,0)
(190,272,0)
(149,218,0)
(138,272,0)
(344,328,0)
(30,300,0)
(216,240,0)
(29,60,0)
(317,61,0)
(290,129,0)
(334,78,0)
(226,344,0)
(137,4,0)
(201,224,0)
(199,23,0)
(116,309,0)
(110,134,0)
(191,116,0)
(350,311,0)
(239,78,0)
(318,203,0)
(175,47,0)
(161,309,0)
(344,333,0)
(273,318,0)
(186,261,0)
(221,166,0)
(128,143,0)
(347,261,0)
(159,167,0)
(49,233,0)
(152,220,0)
(146,55,0)
(107,277,0)
(241,116,0)
(328,223,0)
(276,208,0)
(16,298,0)
(282,19,0)
(265,134,0)
(30,298,0)
(114,272,0)
(274,157,0)
(35,261,0)
(284,309,0)
(247,261,0)
(174,214,0)
(351,249,0)
(298,284,0)
(12,312,0)
(144,143,0)
(18,346,0)
(322,340,0)
(68,311,0)
(37,36,0)
(257,262,0)
(84,124,0)
(185,218,0)
(148,2,0)
(258,203,0)
(344,77,0)
(183,134,0)
(224,307,0)
(194,43,0)
(312,203,0)
(202,308,0)
(199,94,0)
(338,351,0)
(340,321,0)
(209,207,0)
(238,24,0)
(73,161,0)
(301,215,0)
(40,126,0)
(75,276,0)
(157,274,0)
(38,261,0)
(244,261,0)
(158,321,0)
(195,256,0)
(339,39,0)
(131,111,0)
(334,296,0)
(85,20,0)
(309,248,0)
(117,311,0)
(18,298,0)
(129,290,0)
(55,249,0)
(221,134,0)
(60,171,0)
(64,343,0)
(90,30,0)
(157,60,0)
(51,353,0)
(171,60,0)
(296,208,0)
(328,134,0)
(329,176,0)
(116,241,0)
(264,187,0)
(233,49,0)
(234,298,0)
(46,116,0)
(97,113,0)
(332,23,0)
(4,309,0)
(29,208,0)
(39,5,0)
(79,328,0)
(106,51,0)
(352,248,0)
(57,98,0)
(127,165,0)
(168,29,0)
(314,187,0)
(122,309,0)
(275,261,0)
(98,57,0)
(299,162,0)
(249,351,0)
(3,258,0)
(36,134,0)
(34,217,0)
(124,32,0)
(310,134,0)
(219,209,0)
(4,137,0)
(162,133,0)
(257,134,0)
(263,36,0)
(112,309,0)
(11,199,0)
(20,220,0)
(137,259,0)
(324,261,0)
(225,134,0)
(262,257,0)
(288,261,0)
(351,307,0)
(180,276,0)
(78,334,0)
(130,261,0)
(220,108,0)
(92,312,0)
(13,142,0)
(26,245,0)
(317,220,0)
(39,339,0)
(206,220,0)
(78,307,0)
(63,309,0)
(15,114,0)
(297,4,0)
(344,51,0)
(193,63,0)
(333,202,0)
(203,318,0)
(27,23,0)
(260,33,0)
(298,45,0)
(51,134,0)
(77,43,0)
(57,134,0)
(287,339,0)
(50,246,0)
(185,91,0)
(280,134,0)
(292,171,0)
(340,272,0)
(237,282,0)
(295,36,0)
(211,104,0)
(291,265,0)
(109,161,0)
(319,157,0)
(286,343,0)
(248,134,0)
(132,256,0)
(156,280,0)
(136,348,0)
(281,153,0)
(164,261,0)
(341,333,0)
(248,309,0)
(223,139,0)
(344,280,0)
(100,187,0)
(65,84,0)
(213,121,0)
(277,60,0)
(150,44,0)
(160,328,0)
(33,34,0)
(99,24,0)
(47,208,0)
(232,293,0)
(296,334,0)
(246,60,0)
(331,167,0)
(218,203,0)
(302,2,0)
(171,203,0)
(88,77,0)
(243,280,0)
(0,93,0)
(326,155,0)
(84,208,0)
(209,309,0)
(119,33,0)
(105,257,0)
(344,265,0)
(335,171,0)
(320,237,0)
(62,113,0)
(169,142,0)
(270,214,0)
(165,95,0)
(187,314,0)
(343,229,0)
(80,310,0)
(277,7,0)
(231,49,0)
(47,153,0)
(314,70,0)
(179,213,0)
(142,250,0)
(72,57,0)
(167,159,0)
(54,159,0)
(60,250,0)
(336,183,0)
(89,203,0)
(283,318,0)
(178,311,0)
(98,308,0)
(196,29,0)
(81,155,0)
(181,339,0)
(205,343,0)
(184,64,0)
(153,47,0)
(69,208,0)
(154,16,0)
(13,7,0)
(170,353,0)
(325,286,0)
(67,183,0)
(95,165,0)
(289,284,0)
(43,103,0)
(25,4,0)
(86,122,0)
(126,298,0)
(224,78,0)
(2,60,0)
(251,16,0)
(10,261,0)
(180,87,0)
(284,298,0)
(280,213,0)
(140,55,0)
(208,48,0)
(344,261,0)
(166,221,0)
(141,142,0)
(269,337,0)
(237,298,0)
(21,245,0)
(9,233,0)
(102,122,0)
(124,84,0)
(315,296,0)
(166,121,0)
(304,284,0)
(16,20,0)
(242,204,0)
(151,321,0)
(96,104,0)
(37,103,0)
(265,293,0)
(177,110,0)
(23,48,0)
(200,261,0)
(113,60,0)
(208,29,0)
(267,204,0)
(321,340,0)
(318,298,0)
(227,189,0)
(172,261,0)
(167,142,0)
(114,346,0)
(253,276,0)
(327,24,0)
(342,57,0)
(182,218,0)
(187,203,0)
(222,334,0)
(245,134,0)
(305,310,0)
(212,248,0)
(268,189,0)
(323,233,0)
(204,134,0)
(233,60,0)
(71,110,0)
(326,1,0)
(192,237,0)
(82,333,0)
(203,108,0)
(353,261,0)
(198,47,0)
(159,298,0)
(41,162,0)
(111,208,0)
(303,159,0)
(14,30,0)
(294,296,0)
(123,246,0)
(147,225,0)
(249,55,0)
(104,208,0)
(245,235,0)
(125,189,0)
(255,69,0)
(59,143,0)
(313,258,0)
(31,261,0)
(173,84,0)
(210,165,0)
(278,129,0)
(17,129,0)
(269,2,0)
(241,28,0)
(155,326,0)
(42,256,0)
(135,223,0)
(300,30,0)
(8,143,0)
(252,202,0)
(214,203,0)
(77,134,0)
(165,309,0)
(316,63,0)
(339,60,0)
(333,134,0)
(321,309,0)
(115,261,0)
(290,189,0)
(95,354,0)
(285,61,0)
(306,60,0)
(58,311,0)
(271,221,0)
(235,245,0)
(163,77,0)
(66,18,0)
(254,221,0)
(53,257,0)
(34,33,0)
(279,118,0)
(293,74,0)
(52,51,0)
(176,134,0)
(330,343,0)
(6,69,0)
(351,78,0)
(197,208,0)
(55,208,0)
(286,162,0)
(49,23,0)
(235,139,0)
(2,269,0)
(262,74,0)
(64,207,0)
(101,344,0)
(348,94,0)
(348,208,0)
(218,185,0)
(285,203,0)
(60,171,1)
(193,316,1)
(167,159,1)
(258,203,1)
(81,69,1)
(15,0,1)
(182,258,1)
(323,231,1)
(100,214,1)
(101,344,1)
(49,23,1)
(173,65,1)
(18,66,1)
(316,241,1)
(278,153,1)
(287,246,1)
(142,141,1)
(56,317,1)
(15,126,1)
(226,353,1)
(86,161,1)
(88,163,1)
(29,60,1)
(260,215,1)
(300,30,1)
(265,134,1)
(318,273,1)
(305,80,1)
(312,203,1)
(85,203,1)
(294,315,1)
(204,267,1)
(9,323,1)
(215,60,1)
(215,301,1)
(345,269,1)
(166,221,1)
(11,326,1)
(252,333,1)
(326,155,1)
(344,328,1)
(112,343,1)
(334,296,1)
(86,95,1)
(352,112,1)
(57,342,1)
(146,78,1)
(126,298,1)
(276,208,1)
(211,290,1)
(328,134,1)
(129,17,1)
(157,60,1)
(150,274,1)
(284,309,1)
(205,330,1)
(271,225,1)
(232,265,1)
(264,100,1)
(13,345,1)
(156,166,1)
(249,55,1)
(33,60,1)
(274,157,1)
(16,251,1)
(321,151,1)
(51,106,1)
(210,161,1)
(153,47,1)
(77,88,1)
(29,168,1)
(138,286,1)
(53,110,1)
(160,79,1)
(262,257,1)
(218,149,1)
(119,260,1)
(6,111,1)
(36,263,1)
(131,266,1)
(187,203,1)
(127,210,1)
(206,152,1)
(199,11,1)
(23,27,1)
(276,75,1)
(245,134,1)
(84,173,1)
(137,4,1)
(40,236,1)
(253,104,1)
(331,60,1)
(78,334,1)
(333,82,1)
(290,129,1)
(102,86,1)
(220,206,1)
(289,304,1)
(39,339,1)
(110,134,1)
(316,122,1)
(79,235,1)
(273,283,1)
(153,281,1)
(225,147,1)
(325,309,1)
(15,282,1)
(185,218,1)
(239,153,1)
(196,197,1)
(55,208,1)
(203,318,1)
(149,182,1)
(21,176,1)
(63,193,1)
(84,208,1)
(69,208,1)
(224,201,1)
(349,291,1)
(292,306,1)
(345,150,1)
(183,134,1)
(202,252,1)
(314,187,1)
(236,20,1)
(17,278,1)
(209,309,1)
(286,162,1)
(190,138,1)
(266,104,1)
(192,320,1)
(201,351,1)
(106,52,1)
(116,191,1)
(11,69,1)
(169,312,1)
(158,322,1)
(181,287,1)
(124,84,1)
(140,146,1)
(113,60,1)
(77,134,1)
(14,90,1)
(126,40,1)
(184,63,1)
(46,122,1)
(96,211,1)
(336,176,1)
(109,73,1)
(155,76,1)
(340,272,1)
(71,183,1)
(107,13,1)
(296,208,1)
(104,208,1)
(301,188,1)
(320,126,1)
(328,160,1)
(348,136,1)
(317,220,1)
(122,102,1)
(351,338,1)
(339,181,1)
(223,135,1)
(43,194,1)
(67,336,1)
(33,119,1)
(332,274,1)
(325,209,1)
(237,192,1)
(154,85,1)
(272,190,1)
(136,199,1)
(309,248,1)
(110,177,1)
(237,298,1)
(73,340,1)
(246,60,1)
(319,167,1)
(65,111,1)
(47,208,1)
(233,60,1)
(2,302,1)
(188,246,1)
(16,298,1)
(20,220,1)
(129,208,1)
(344,51,1)
(52,310,1)
(270,174,1)
(71,43,1)
(22,185,1)
(335,292,1)
(342,72,1)
(165,309,1)
(30,14,1)
(69,255,1)
(83,329,1)
(265,349,1)
(222,296,1)
(344,265,1)
(92,12,1)
(322,18,1)
(213,179,1)
(353,170,1)
(57,134,1)
(170,51,1)
(310,134,1)
(148,113,1)
(116,309,1)
(209,219,1)
(228,110,1)
(221,254,1)
(345,113,1)
(95,165,1)
(219,64,1)
(26,21,1)
(299,41,1)
(62,97,1)
(161,109,1)
(224,78,1)
(197,23,1)
(168,196,1)
(251,154,1)
(179,280,1)
(141,169,1)
(176,83,1)
(297,25,1)
(303,331,1)
(212,352,1)
(329,286,1)
(351,249,1)
(234,272,1)
(162,299,1)
(3,313,1)
(152,300,1)
(245,26,1)
(283,89,1)
(157,120,1)
(344,226,1)
(64,343,1)
(221,134,1)
(161,309,1)
(98,57,1)
(243,156,1)
(336,223,1)
(111,208,1)
(248,134,1)
(340,321,1)
(334,222,1)
(235,245,1)
(291,262,1)
(0,300,1)
(20,16,1)
(2,60,1)
(82,341,1)
(344,333,1)
(177,71,1)
(80,213,1)
(315,239,1)
(302,148,1)
(208,29,1)
(114,272,1)
(214,270,1)
(85,285,1)
(321,309,1)
(174,312,1)
(241,116,1)
(104,96,1)
(135,328,1)
(233,9,1)
(155,208,1)
(13,142,1)
(72,310,1)
(167,142,1)
(18,298,1)
(66,114,1)
(344,280,1)
(163,37,1)
(312,92,1)
(27,332,1)
(51,134,1)
(204,134,1)
(329,204,1)
(266,180,1)
(285,203,1)
(231,348,1)
(306,142,1)
(277,107,1)
(47,198,1)
(76,81,1)
(50,49,1)
(199,23,1)
(322,298,1)
(165,127,1)
(280,243,1)
(114,15,1)
(313,214,1)
(257,105,1)
(123,50,1)
(254,271,1)
(159,298,1)
(75,253,1)
(176,134,1)
(304,234,1)
(171,203,1)
(263,295,1)
(282,237,1)
(151,158,1)
(80,225,1)
(120,319,1)
(310,305,1)
(331,277,1)
(41,325,1)
(330,204,1)
(188,39,1)
(339,60,1)
(37,36,1)
(90,340,1)
(174,167,1)
(6,124,1)
(183,67,1)
(333,134,1)
(30,298,1)
(298,284,1)
(284,289,1)
(246,123,1)
(228,293,1)
(280,134,1)
(218,203,1)
(52,202,1)
(231,208,1)
(4,297,1)
(12,20,1)
(194,77,1)
(147,228,1)
(25,63,1)
(286,343,1)
(351,78,1)
(36,134,1)
(348,208,1)
(198,175,1)
(175,49,1)
(49,233,1)
(4,309,1)
(277,60,1)
(269,2,1)
(184,137,1)
(171,335,1)
(175,224,1)
(343,205,1)
(285,56,1)
(34,33,1)
(341,98,1)
(55,140,1)
(122,309,1)
(113,62,1)
(338,249,1)
(64,184,1)
(257,134,1)
(159,54,1)
(97,215,1)
(344,77,1)
(295,183,1)
(258,3,1)
(111,131,1)
(281,47,1)
(191,46,1)
(180,276,1)
(22,258,1)
(267,242,1)
(296,294,1)
(54,303,1)
(313,314,1)
(97,34,1)
(89,220,1)
(225,134,1)
(255,6,1)
(318,298,1)
(63,309,1)
(105,53,1)
(162,133,1)
(317,22,1)
(293,232,1)
(187,264,1)
(248,212,1)
(214,203,1)
(232,110,2)
(29,274,2)
(309,248,2)
(193,286,2)
(141,312,2)
(135,176,2)
(264,214,2)
(333,310,2)
(166,221,2)
(312,20,2)
(29,60,2)
(116,309,2)
(9,274,2)
(37,183,2)
(241,116,2)
(246,60,2)
(54,312,2)
(209,309,2)
(231,49,2)
(210,161,2)
(206,300,2)
(203,318,2)
(224,78,2)
(236,300,2)
(213,225,2)
(209,286,2)
(36,183,2)
(85,20,2)
(33,60,2)
(18,340,2)
(344,51,2)
(234,286,2)
(167,167,2)
(17,49,2)
(180,276,2)
(321,286,2)
(39,246,2)
(278,49,2)
(342,310,2)
(208,274,2)
(300,30,2)
(53,110,2)
(340,321,2)
(162,133,2)
(343,204,2)
(239,153,2)
(109,286,2)
(265,110,2)
(153,49,2)
(314,187,2)
(262,257,2)
(340,286,2)
(294,153,2)
(114,272,2)
(330,204,2)
(77,134,2)
(43,183,2)
(2,113,2)
(76,69,2)
(75,104,2)
(49,23,2)
(351,249,2)
(245,134,2)
(215,60,2)
(286,343,2)
(136,49,2)
(331,167,2)
(166,225,2)
(120,167,2)
(194,183,2)
(40,300,2)
(218,258,2)
(97,274,2)
(41,204,2)
(185,258,2)
(63,286,2)
(49,274,2)
(291,110,2)
(104,208,2)
(188,274,2)
(57,134,2)
(175,49,2)
(276,208,2)
(167,159,2)
(27,274,2)
(11,49,2)
(20,220,2)
(322,286,2)
(180,104,2)
(309,204,2)
(173,111,2)
(22,20,2)
(290,49,2)
(123,274,2)
(2,60,2)
(271,225,2)
(90,340,2)
(286,162,2)
(51,134,2)
(344,333,2)
(151,340,2)
(301,274,2)
(79,176,2)
(86,286,2)
(277,167,2)
(349,110,2)
(237,126,2)
(185,218,2)
(270,20,2)
(131,49,2)
(233,274,2)
(163,183,2)
(245,176,2)
(159,312,2)
(221,225,2)
(249,55,2)
(33,215,2)
(345,167,2)
(269,2,2)
(273,300,2)
(284,309,2)
(50,274,2)
(154,20,2)
(281,49,2)
(315,153,2)
(212,204,2)
(0,300,2)
(280,134,2)
(254,225,2)
(55,153,2)
(181,246,2)
(122,286,2)
(344,328,2)
(248,134,2)
(237,298,2)
(219,286,2)
(224,153,2)
(326,69,2)
(241,122,2)
(253,104,2)
(167,142,2)
(215,274,2)
(124,111,2)
(13,167,2)
(326,155,2)
(333,134,2)
(199,49,2)
(325,204,2)
(299,204,2)
(167,312,2)
(176,134,2)
(323,274,2)
(116,122,2)
(260,215,2)
(320,126,2)
(20,300,2)
(39,339,2)
(23,274,2)
(112,204,2)
(285,20,2)
(296,153,2)
(77,183,2)
(190,286,2)
(316,286,2)
(296,208,2)
(47,208,2)
(274,167,2)
(73,286,2)
(107,167,2)
(272,286,2)
(84,111,2)
(111,49,2)
(331,312,2)
(328,176,2)
(41,286,2)
(314,214,2)
(169,312,2)
(222,153,2)
(25,63,2)
(82,310,2)
(47,49,2)
(249,153,2)
(257,110,2)
(281,153,2)
(151,286,2)
(235,176,2)
(303,312,2)
(298,284,2)
(282,126,2)
(319,167,2)
(258,20,2)
(49,49,2)
(197,274,2)
(255,49,2)
(47,153,2)
(221,134,2)
(157,60,2)
(191,122,2)
(26,176,2)
(313,20,2)
(299,286,2)
(110,134,2)
(78,153,2)
(95,165,2)
(119,215,2)
(183,134,2)
(303,167,2)
(325,286,2)
(153,47,2)
(248,204,2)
(162,204,2)
(122,309,2)
(62,274,2)
(20,16,2)
(218,203,2)
(154,300,2)
(304,286,2)
(251,300,2)
(60,312,2)
(137,4,2)
(60,171,2)
(328,134,2)
(286,286,2)
(157,167,2)
(104,49,2)
(269,113,2)
(214,203,2)
(344,77,2)
(36,134,2)
(137,63,2)
(334,296,2)
(300,340,2)
(12,20,2)
(102,286,2)
(286,204,2)
(92,20,2)
(277,60,2)
(64,343,2)
(340,340,2)
(129,208,2)
(310,134,2)
(235,245,2)
(98,310,2)
(100,214,2)
(171,203,2)
(302,113,2)
(98,57,2)
(155,208,2)
(274,157,2)
(223,176,2)
(127,161,2)
(252,310,2)
(318,300,2)
(246,274,2)
(318,298,2)
(182,258,2)
(340,272,2)
(96,49,2)
(37,36,2)
(344,265,2)
(284,286,2)
(293,110,2)
(54,167,2)
(297,63,2)
(263,183,2)
(290,129,2)
(262,110,2)
(280,225,2)
(287,246,2)
(266,49,2)
(220,300,2)
(16,298,2)
(317,20,2)
(20,20,2)
(352,204,2)
(321,340,2)
(13,142,2)
(174,20,2)
(348,208,2)
(192,126,2)
(30,340,2)
(85,300,2)
(285,203,2)
(126,298,2)
(34,215,2)
(187,214,2)
(30,298,2)
(289,286,2)
(124,84,2)
(276,104,2)
(211,49,2)
(3,20,2)
(55,208,2)
(265,134,2)
(233,49,2)
(341,310,2)
(243,225,2)
(282,237,2)
(317,220,2)
(65,111,2)
(81,69,2)
(292,312,2)
(251,20,2)
(231,274,2)
(334,153,2)
(322,340,2)
(348,49,2)
(126,300,2)
(199,23,2)
(258,203,2)
(78,334,2)
(88,183,2)
(351,78,2)
(113,274,2)
(18,298,2)
(198,153,2)
(16,300,2)
(69,49,2)
(63,309,2)
(344,280,2)
(72,310,2)
(84,208,2)
(14,340,2)
(4,309,2)
(140,153,2)
(165,309,2)
(105,110,2)
(155,69,2)
(323,49,2)
(162,286,2)
(339,246,2)
(214,20,2)
(148,113,2)
(159,298,2)
(138,286,2)
(158,286,2)
(257,134,2)
(15,340,2)
(152,300,2)
(9,49,2)
(283,300,2)
(351,153,2)
(95,161,2)
(161,286,2)
(129,49,2)
(49,233,2)
(321,309,2)
(158,340,2)
(34,33,2)
(57,310,2)
(175,153,2)
(202,310,2)
(66,340,2)
(69,208,2)
(111,208,2)
(146,153,2)
(168,274,2)
(101,344,2)
(56,20,2)
(306,312,2)
(198,49,2)
(225,134,2)
(335,312,2)
(64,286,2)
(184,286,2)
(113,60,2)
(204,134,2)
(114,340,2)
(201,153,2)
(6,49,2)
(196,274,2)
(16,20,2)
(21,176,2)
(208,29,2)
(332,274,2)
(165,161,2)
(89,300,2)
(4,63,2)
(187,203,2)
(150,274,2)
(339,60,2)
(295,183,2)
(160,176,2)
(233,60,2)
(205,204,2)
(203,300,2)
(153,153,2)
(171,312,2)
(179,225,2)
(156,225,2)
(142,312,2)
(46,122,2)
(149,258,2)
(312,203,2)
(338,153,2)
(161,309,2)
(159,167,2)
(298,286,2)
-----------------------------------
(0,continue;)
(1,)
(2,prc->cblks)
(3,prcs)
(4,tcomp->tsfb)
(5,)
(6,cblk)
(7,)
(8,for (rlvlno = 0, rlvl = tcomp->rlvls; rlvlno < tcomp->numrlvls;\\n\\t\\t  ++rlvlno, ++rlvl)
(9,numcblks)
(10,rlvl)
(11,cblkno)
(12,band)
(13,++prcno)
(14,bands)
(15,rlvlno)
(16,rlvl->numbands)
(17,data)
(18,++rlvl)
(19,)
(20,bandno < rlvl->numbands)
(21,tile)
(22,bandno)
(23,cblkno = 0)
(24,)
(25,tcomp)
(26,cp)
(27,0)
(28,)
(29,prc->cblks)
(30,rlvl->bands)
(31,rlvlno)
(32,)
(33,prc->numimsbstagtree)
(34,jpc_tagtree_destroy(prc->numimsbstagtree)
(35,prc)
(36,tile->tcomps)
(37,jas_free(tile->tcomps)
(38,bandno)
(39,jpc_tagtree_destroy(prc->incltagtree)
(40,bands)
(41,dec)
(42,if (band->prcs)
(43,tile->tcomps = 0)
(44,)
(45,)
(46,tcomp)
(47,cblk->segs)
(48,)
(49,cblkno < prc->numcblks)
(50,prc)
(51,tile->state)
(52,tile)
(53,tile)
(54,numprcs)
(55,cblk->segs)
(56,band)
(57,tile->pptstab)
(58,if (prc->numimsbstagtree)
(59,if (tcomp->rlvls)
(60,prc = band->prcs)
(61,)
(62,cblks)
(63,tcomp->tsfb)
(64,++compno)
(65,cblk)
(66,rlvl)
(67,tcomps)
(68,if (!prc->cblks)
(69,cblk->flags)
(70,)
(71,tile)
(72,tile)
(73,tcomp)
(74,)
(75,mqdec)
(76,flags)
(77,tile->tcomps)
(78,seg = cblk->segs.head)
(79,tile)
(80,tile)
(81,cblk)
(82,pptstab)
(83,cp)
(84,cblk->nulldec)
(85,bandno)
(86,tcomp)
(87,)
(88,tcomps)
(89,band)
(90,rlvl)
(91,)
(92,prcs)
(93,)
(94,)
(95,jas_free(tcomp->rlvls)
(96,mqdec)
(97,prc)
(98,jpc_ppxstab_destroy(tile->pptstab)
(99,for (bandno = 0, band = rlvl->bands; bandno < rlvl->numbands; ++bandno, ++band)
(100,band)
(101,RET)
(102,data)
(103,)
(104,cblk->mqdec)
(105,pi)
(106,state)
(107,prc)
(108,)
(109,rlvls)
(110,tile->pi)
(111,cblk->nulldec)
(112,tcomp)
(113,prc->cblks)
(114,++rlvlno)
(115,cblk)
(116,tcomp->data)
(117,for (cblkno = 0, cblk = prc->cblks; cblkno < prc->numcblks; ++cblkno, ++cblk)
(118,)
(119,numimsbstagtree)
(120,cblks)
(121,)
(122,tcomp->data)
(123,incltagtree)
(124,jpc_bitstream_close(cblk->nulldec)
(125,if (cblk->nulldec)
(126,rlvl->bands)
(127,rlvls)
(128,if (tcomp->data)
(129,cblk->data)
(130,if (tile->tcomps)
(131,nulldec)
(132,if (band->prcs)
(133,jpc_dec_t *dec)
(134,jpc_dec_tile_t *tile)
(135,0)
(136,cblk)
(137,jpc_tsfb_destroy(tcomp->tsfb)
(138,rlvlno)
(139,)
(140,segs)
(141,0)
(142,prcno = 0)
(143,)
(144,if (tcomp->tsfb)
(145,tcomp)
(146,cblk)
(147,pkthdrstream)
(148,prc)
(149,prcs)
(150,continue;)
(151,numrlvls)
(152,bandno)
(153,cblk->segs.head)
(154,rlvl)
(155,cblk->flags)
(156,tile)
(157,prc->cblks)
(158,tcomp)
(159,rlvl->numprcs)
(160,cp)
(161,tcomp->rlvls)
(162,dec->numcomps)
(163,tile)
(164,band)
(165,tcomp->rlvls)
(166,jas_stream_close(tile->pkthdrstream)
(167,prcno <\\n\\t\\t\\t\\t  rlvl->numprcs)
(168,cblks)
(169,prcno)
(170,JPC_TILE_DONE)
(171,band->prcs)
(172,if (tile->cp)
(173,nulldec)
(174,band)
(175,cblk)
(176,tile->cp)
(177,pi)
(178,if (prc->cblks)
(179,0)
(180,jpc_mqdec_destroy(cblk->mqdec)
(181,incltagtree)
(182,band)
(183,tile->tcomps)
(184,compno)
(185,jas_free(band->prcs)
(186,if (tile->pkthdrstream)
(187,band->data)
(188,prc)
(189,)
(190,0)
(191,data)
(192,bands)
(193,tsfb)
(194,0)
(195,if (band->data)
(196,prc)
(197,cblk)
(198,segs)
(199,++cblkno)
(200,prcno)
(201,seg)
(202,tile->pptstab = 0)
(203,band = rlvl->bands)
(204,tile->tcomps)
(205,0)
(206,0)
(207,)
(208,cblk = prc->cblks)
(209,++tcomp)
(210,tcomp)
(211,cblk)
(212,tcomps)
(213,tile->pkthdrstream = 0)
(214,band->data)
(215,prc->numimsbstagtree)
(216,for (compno = 0, tcomp = tile->tcomps; compno < dec->numcomps;\\n\\t  ++compno, ++tcomp)
(217,)
(218,band->prcs)
(219,tcomp)
(220,bandno = 0)
(221,tile->pkthdrstream)
(222,head)
(223,tile->cp = 0)
(224,jpc_seg_destroy(seg)
(225,tile->pkthdrstream)
(226,0)
(227,if (cblk->mqdec)
(228,tile)
(229,)
(230,while (cblk->segs.head)
(231,cblkno)
(232,0)
(233,prc->numcblks)
(234,rlvl)
(235,jpc_dec_cp_destroy(tile->cp)
(236,rlvl)
(237,rlvl->bands)
(238,if (rlvl->bands)
(239,seg)
(240,)
(241,jas_matrix_destroy(tcomp->data)
(242,tile)
(243,pkthdrstream)
(244,if (tile->tcomps)
(245,tile->cp)
(246,prc->incltagtree)
(247,if (tile->pptstab)
(248,tile->tcomps)
(249,&cblk->segs)
(250,)
(251,numbands)
(252,0)
(253,cblk)
(254,pkthdrstream)
(255,flags)
(256,)
(257,tile->pi)
(258,band->prcs)
(259,)
(260,prc)
(261,)
(262,jpc_pi_destroy(tile->pi)
(263,tcomps)
(264,data)
(265,tile->pi)
(266,cblk)
(267,tcomps)
(268,if (cblk->flags)
(269,jas_free(prc->cblks)
(270,data)
(271,tile)
(272,rlvlno = 0)
(273,bands)
(274,!prc->cblks)
(275,seg)
(276,cblk->mqdec)
(277,++prc)
(278,cblk)
(279,for (prcno = 0, prc = band->prcs; prcno <\\n\\t\\t\\t\\t  rlvl->numprcs; ++prcno, ++prc)
(280,tile->pkthdrstream)
(281,head)
(282,jas_free(rlvl->bands)
(283,rlvl)
(284,tcomp->rlvls)
(285,++band)
(286,compno < dec->numcomps)
(287,prc)
(288,compno)
(289,rlvls)
(290,jas_matrix_destroy(cblk->data)
(291,tile)
(292,band)
(293,tile->pi = 0)
(294,segs)
(295,tile)
(296,cblk->segs)
(297,tsfb)
(298,rlvl = tcomp->rlvls)
(299,numcomps)
(300,!rlvl->bands)
(301,numimsbstagtree)
(302,cblks)
(303,rlvl)
(304,tcomp)
(305,pptstab)
(306,prc)
(307,)
(308,)
(309,tcomp = tile->tcomps)
(310,tile->pptstab)
(311,)
(312,band->prcs)
(313,band)
(314,jas_matrix_destroy(band->data)
(315,cblk)
(316,tcomp)
(317,++bandno)
(318,rlvl->bands)
(319,prc)
(320,rlvl)
(321,tcomp->numrlvls)
(322,rlvlno)
(323,prc)
(324,cblkno)
(325,compno)
(326,jas_matrix_destroy(cblk->flags)
(327,if (!rlvl->bands)
(328,tile->cp)
(329,tile)
(330,compno)
(331,prcno)
(332,cblkno)
(333,tile->pptstab)
(334,cblk->segs.head)
(335,prcs)
(336,tile)
(337,)
(338,seg)
(339,prc->incltagtree)
(340,rlvlno < tcomp->numrlvls)
(341,tile)
(342,pptstab)
(343,compno = 0)
(344,return 0;)
(345,prcno)
(346,)
(347,if (tile->pi)
(348,++cblk)
(349,pi)
(350,if (prc->incltagtree)
(351,jpc_seglist_remove(&cblk->segs, seg)
(352,tile)
(353,tile->state = JPC_TILE_DONE)
(354,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff9cf9a66300000000ffffffffffffffffcaf9a66300000000ffffffffffffffffcaf9a66300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5d00040000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
static int jpc_dec_decode(jpc_dec_t *dec) {
jpc_ms_t *ms;
jpc_dec_mstabent_t *mstabent;
int ret;
jpc_cstate_t *cstate;
dec->cstate = cstate;
dec->state = JPC_MHSOC;
mstabent = jpc_dec_mstab_lookup(ms->id);
assert(mstabent);
if(mstabent->action)
ret = (*mstabent->action)(dec, ms);
jpc_ms_destroy(ms);
mstabent = jpc_dec_mstab_lookup(ms->id);
assert(mstabent);
if(!(dec->state & mstabent->validstates))
jas_eprintf('unexpected marker segment type ');
jpc_ms_destroy(ms);
return -1;
=======================
