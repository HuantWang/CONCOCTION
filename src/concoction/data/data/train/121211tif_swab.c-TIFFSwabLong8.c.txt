-----label-----
0
-----code-----
void
TIFFSwabLong8(uint64* lp)
{
	register unsigned char* cp = (unsigned char*) lp;
	unsigned char t;
	assert(sizeof(uint64)==8);
	t = cp[7]; cp[7] = cp[0]; cp[0] = t;
	t = cp[6]; cp[6] = cp[1]; cp[1] = t;
	t = cp[5]; cp[5] = cp[2]; cp[2] = t;
	t = cp[4]; cp[4] = cp[3]; cp[3] = t;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
37,38
37,39
38,39
42,43
43,44
43,45
44,45
46,47
46,48
47,48
50,51
51,52
51,53
52,53
52,54
53,54
56,57
56,58
57,58
60,61
61,62
61,63
62,63
62,64
63,64
66,67
68,69
69,70
69,71
70,71
72,73
72,74
73,74
76,77
77,78
77,79
78,79
78,80
79,80
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
108,109
108,110
109,110
112,113
113,114
113,115
114,115
114,116
115,116
118,119
120,121
121,122
121,123
122,123
124,125
124,126
125,126
128,129
129,130
129,131
130,131
130,132
131,132
134,135
134,136
135,136
138,139
139,140
139,141
140,141
140,142
141,142
144,145
-----nextToken-----
2,4,7,9,10,14,16,17,21,23,25,28,30,34,39,40,41,45,48,49,54,55,58,59,64,65,67,71,74,75,80,81,84,85,90,91,93,97,100,101,106,107,110,111,116,117,119,123,126,127,132,133,136,137,142,143,145
-----computeFrom-----
35,36
35,37
43,44
43,45
51,52
51,53
61,62
61,63
69,70
69,71
77,78
77,79
87,88
87,89
95,96
95,97
103,104
103,105
113,114
113,115
121,122
121,123
129,130
129,131
139,140
139,141
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;
-----ast_node-----
voidTIFFSwabLong8(uint64* lp){	register unsigned char* cp = (unsigned char*) lp;	unsigned char t;	assert(sizeof(uint64)==8);	t = cp[7]; cp[7] = cp[0]; cp[0] = t;	t = cp[6]; cp[6] = cp[1]; cp[1] = t;	t = cp[5]; cp[5] = cp[2]; cp[2] = t;	t = cp[4]; cp[4] = cp[3]; cp[3] = t;}
void
TIFFSwabLong8(uint64* lp)
TIFFSwabLong8
uint64* lp
uint64
uint64
* lp
*
lp
{	register unsigned char* cp = (unsigned char*) lp;	unsigned char t;	assert(sizeof(uint64)==8);	t = cp[7]; cp[7] = cp[0]; cp[0] = t;	t = cp[6]; cp[6] = cp[1]; cp[1] = t;	t = cp[5]; cp[5] = cp[2]; cp[2] = t;	t = cp[4]; cp[4] = cp[3]; cp[3] = t;}
register unsigned char* cp = (unsigned char*) lp;
register unsigned char* cp = (unsigned char*) lp;
register unsigned char
* cp = (unsigned char*) lp
*
cp
= (unsigned char*) lp
(unsigned char*) lp
unsigned char*
unsigned char
*
*
lp
lp
unsigned char t;
unsigned char t;
unsigned char
t
t
assert(sizeof(uint64)==8);
assert(sizeof(uint64)==8)
assert
assert
sizeof(uint64)==8
sizeof(uint64)
uint64
uint64
uint64

8
t = cp[7];
t = cp[7]
t
t
cp[7]
cp
cp
7
cp[7] = cp[0];
cp[7] = cp[0]
cp[7]
cp
cp
7
cp[0]
cp
cp
0
cp[0] = t;
cp[0] = t
cp[0]
cp
cp
0
t
t
t = cp[6];
t = cp[6]
t
t
cp[6]
cp
cp
6
cp[6] = cp[1];
cp[6] = cp[1]
cp[6]
cp
cp
6
cp[1]
cp
cp
1
cp[1] = t;
cp[1] = t
cp[1]
cp
cp
1
t
t
t = cp[5];
t = cp[5]
t
t
cp[5]
cp
cp
5
cp[5] = cp[2];
cp[5] = cp[2]
cp[5]
cp
cp
5
cp[2]
cp
cp
2
cp[2] = t;
cp[2] = t
cp[2]
cp
cp
2
t
t
t = cp[4];
t = cp[4]
t
t
cp[4]
cp
cp
4
cp[4] = cp[3];
cp[4] = cp[3]
cp[4]
cp
cp
4
cp[3]
cp
cp
3
cp[3] = t;
cp[3] = t
cp[3]
cp
cp
3
t
t
-----joern-----
(78,2,0)
(61,62,0)
(12,2,0)
(42,34,0)
(76,87,0)
(6,31,0)
(90,77,0)
(50,74,0)
(68,1,0)
(50,77,0)
(36,87,0)
(18,71,0)
(66,48,0)
(24,69,0)
(69,2,0)
(19,24,0)
(8,84,0)
(84,58,0)
(91,31,0)
(63,36,0)
(54,65,0)
(77,2,0)
(11,66,0)
(60,74,0)
(49,87,0)
(31,87,0)
(72,28,0)
(51,71,0)
(34,2,0)
(32,87,0)
(71,87,0)
(33,49,0)
(77,50,0)
(26,69,0)
(34,42,0)
(52,42,0)
(76,54,0)
(45,17,0)
(61,87,0)
(59,50,0)
(1,27,0)
(17,87,0)
(25,82,0)
(90,87,0)
(42,62,0)
(53,27,0)
(62,2,0)
(27,1,0)
(42,87,0)
(22,37,0)
(66,11,0)
(56,24,0)
(83,66,0)
(24,44,0)
(65,87,0)
(41,85,0)
(35,85,0)
(15,78,0)
(22,54,0)
(10,87,0)
(10,78,0)
(89,10,0)
(37,22,0)
(40,61,0)
(81,30,0)
(44,24,0)
(17,43,0)
(84,55,0)
(28,74,0)
(67,86,0)
(69,82,0)
(87,66,0)
(36,44,0)
(14,90,0)
(71,78,0)
(30,86,0)
(57,37,0)
(80,42,0)
(75,85,0)
(44,2,0)
(10,62,0)
(21,17,0)
(47,90,0)
(43,37,0)
(20,34,0)
(12,48,0)
(28,87,0)
(82,36,0)
(1,2,0)
(86,30,0)
(54,2,0)
(78,34,0)
(58,84,0)
(64,43,0)
(22,87,0)
(7,22,0)
(49,44,0)
(62,10,0)
(13,12,0)
(74,1,0)
(46,65,0)
(65,43,0)
(38,50,0)
(50,87,0)
(5,58,0)
(88,36,0)
(27,77,0)
(39,27,0)
(36,82,0)
(74,2,0)
(65,54,0)
(24,87,0)
(4,10,0)
(31,69,0)
(27,87,0)
(82,2,0)
(43,2,0)
(87,2,0)
(37,2,0)
(29,30,0)
(30,29,0)
(3,22,0)
(23,61,0)
(29,85,0)
(66,87,0)
(16,65,0)
(0,76,0)
(70,49,0)
(73,76,0)
(79,28,0)
(56,19,1)
(71,87,1)
(61,87,1)
(66,48,1)
(5,84,1)
(43,37,1)
(8,12,1)
(50,38,1)
(17,87,1)
(6,91,1)
(27,87,1)
(84,8,1)
(9,58,1)
(28,72,1)
(77,50,1)
(19,49,1)
(34,42,1)
(27,77,1)
(15,71,1)
(65,43,1)
(62,10,1)
(26,31,1)
(91,44,1)
(83,32,1)
(44,24,1)
(33,82,1)
(23,34,1)
(61,40,1)
(64,17,1)
(21,54,1)
(42,87,1)
(22,87,1)
(89,4,1)
(42,52,1)
(63,25,1)
(58,84,1)
(51,62,1)
(66,11,1)
(69,26,1)
(8,29,1)
(12,13,1)
(49,70,1)
(39,53,1)
(78,15,1)
(52,80,1)
(46,16,1)
(38,59,1)
(57,78,1)
(20,74,1)
(32,58,1)
(45,21,1)
(49,87,1)
(59,90,1)
(31,87,1)
(74,1,1)
(30,81,1)
(65,87,1)
(50,87,1)
(13,69,1)
(69,82,1)
(28,87,1)
(82,36,1)
(25,43,1)
(17,45,1)
(3,57,1)
(36,88,1)
(24,56,1)
(14,1,1)
(42,62,1)
(88,63,1)
(76,0,1)
(76,87,1)
(29,30,1)
(37,22,1)
(74,60,1)
(0,73,1)
(27,39,1)
(79,77,1)
(43,64,1)
(31,6,1)
(24,69,1)
(18,51,1)
(10,89,1)
(40,23,1)
(66,83,1)
(16,76,1)
(72,79,1)
(30,86,1)
(60,28,1)
(50,74,1)
(70,33,1)
(36,87,1)
(36,44,1)
(22,54,1)
(90,87,1)
(86,67,1)
(10,87,1)
(22,7,1)
(65,46,1)
(1,27,1)
(53,68,1)
(71,18,1)
(81,86,1)
(4,61,1)
(87,66,1)
(54,65,1)
(24,87,1)
(84,55,1)
(47,14,1)
(10,78,1)
(80,20,1)
(73,37,1)
(7,3,1)
(78,34,1)
(58,5,1)
(90,47,1)
(68,87,1)
(12,48,1)
(8,58,2)
(33,58,2)
(28,58,2)
(1,58,2)
(69,58,2)
(28,87,2)
(36,58,2)
(73,58,2)
(65,58,2)
(87,58,2)
(21,58,2)
(31,87,2)
(66,48,2)
(76,58,2)
(17,58,2)
(39,58,2)
(64,58,2)
(78,34,2)
(25,58,2)
(16,58,2)
(74,1,2)
(50,58,2)
(78,58,2)
(57,58,2)
(29,30,2)
(77,50,2)
(42,87,2)
(58,84,2)
(61,58,2)
(22,87,2)
(44,58,2)
(70,58,2)
(36,44,2)
(27,87,2)
(84,58,2)
(47,58,2)
(37,58,2)
(71,58,2)
(88,58,2)
(37,22,2)
(1,27,2)
(0,58,2)
(22,58,2)
(27,58,2)
(24,58,2)
(82,58,2)
(12,48,2)
(10,78,2)
(62,58,2)
(20,58,2)
(90,87,2)
(90,58,2)
(66,11,2)
(74,58,2)
(60,58,2)
(50,74,2)
(6,58,2)
(40,58,2)
(4,58,2)
(30,86,2)
(87,66,2)
(18,58,2)
(80,58,2)
(62,10,2)
(10,87,2)
(83,58,2)
(46,58,2)
(10,58,2)
(52,58,2)
(79,58,2)
(59,58,2)
(76,87,2)
(54,65,2)
(49,58,2)
(53,58,2)
(51,58,2)
(61,87,2)
(56,58,2)
(58,58,2)
(27,77,2)
(14,58,2)
(43,58,2)
(17,87,2)
(3,58,2)
(63,58,2)
(49,87,2)
(82,36,2)
(24,69,2)
(12,58,2)
(65,43,2)
(7,58,2)
(45,58,2)
(42,58,2)
(72,58,2)
(84,55,2)
(65,87,2)
(43,37,2)
(89,58,2)
(22,54,2)
(24,87,2)
(44,24,2)
(54,58,2)
(23,58,2)
(15,58,2)
(68,58,2)
(77,58,2)
(42,62,2)
(50,87,2)
(19,58,2)
(69,82,2)
(66,58,2)
(91,58,2)
(34,42,2)
(13,58,2)
(36,87,2)
(71,87,2)
(31,58,2)
(34,58,2)
(32,58,2)
(38,58,2)
(5,58,2)
(26,58,2)
-----------------------------------
(0,5)
(1,t = cp[7])
(2,)
(3,cp)
(4,cp)
(5,0)
(6,3)
(7,5)
(8,n)
(9,RET)
(10,cp[1])
(11,unsigned char *)
(12,lp++)
(13,lp)
(14,cp)
(15,t)
(16,cp)
(17,cp[2])
(18,1)
(19,cp)
(20,t)
(21,cp)
(22,cp[5])
(23,cp)
(24,cp[3])
(25,t)
(26,t)
(27,cp[7])
(28,cp[0])
(29,assert(sizeof(uint64)
(30,sizeof(uint64)
(31,cp[3])
(32,cp)
(33,cp)
(34,t = cp[6])
(35,while (n-- > 0)
(36,cp[4])
(37,t = cp[5])
(38,0)
(39,7)
(40,6)
(41,cp)
(42,cp[6])
(43,cp[2] = t)
(44,cp[4] = cp[3])
(45,2)
(46,2)
(47,7)
(48,register uint64* lp)
(49,cp[4])
(50,cp[0])
(51,cp)
(52,6)
(53,cp)
(54,cp[5] = cp[2])
(55,tmsize_t n)
(56,3)
(57,t)
(58,n-- > 0)
(59,cp)
(60,t)
(61,cp[6])
(62,cp[6] = cp[1])
(63,cp)
(64,t)
(65,cp[2])
(66,(unsigned char *)
(67,uint64)
(68,t)
(69,cp[3] = t)
(70,4)
(71,cp[1])
(72,0)
(73,cp)
(74,cp[0] = t)
(75,t)
(76,cp[5])
(77,cp[7] = cp[0])
(78,cp[1] = t)
(79,cp)
(80,cp)
(81,8)
(82,t = cp[4])
(83,lp)
(84,n--)
(85,)
(86,sizeof(uint64)
(87,cp = (unsigned char *)
(88,4)
(89,1)
(90,cp[7])
(91,cp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000010000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff85f6b26300000000ffffffffffffffff94f6b26300000000ffffffffffffffff94f6b26300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x4d4d002b000800008517ea33b803ff20ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
void TIFFSwabLong8(uint64* lp) {
register unsigned char* cp = (unsigned char*) lp;
unsigned char t;
assert(sizeof(uint64)==8);
t = cp[7];
cp[7] = cp[0];
cp[0] = t;
t = cp[6];
cp[6] = cp[1];
cp[1] = t;
t = cp[5];
cp[5] = cp[2];
cp[2] = t;
t = cp[4];
cp[4] = cp[3];
cp[3] = t;
=======================
