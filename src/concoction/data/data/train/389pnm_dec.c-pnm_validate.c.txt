-----label-----
0
-----code-----
int pnm_validate(jas_stream_t *in)
{
	uchar buf[2];
	int i;
	int n;

	assert(JAS_STREAM_MAXPUTBACK >= 2);

	/* Read the first two characters that constitute the signature. */
	if ((n = jas_stream_read(in, buf, 2)) < 0) {
		return -1;
	}
	/* Put these characters back to the stream. */
	for (i = n - 1; i >= 0; --i) {
		if (jas_stream_ungetc(in, buf[i]) == EOF) {
			return -1;
		}
	}
	/* Did we read enough data? */
	if (n < 2) {
		return -1;
	}
	/* Is this the correct signature for a PNM file? */
	if (buf[0] == 'P' && isdigit(buf[1])) {
		return 0;
	}
	return -1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
14,15
16,17
16,18
18,19
20,21
21,22
21,23
23,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
44,47
44,48
45,46
47,48
49,50
53,54
54,55
55,56
57,58
57,59
57,60
57,61
58,59
59,60
59,61
60,61
62,63
62,64
63,64
66,67
66,68
67,68
70,71
71,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
76,79
77,78
79,80
81,82
81,83
82,83
84,85
86,87
88,89
89,90
90,91
92,93
92,94
93,94
93,95
94,95
97,98
98,99
99,100
101,102
101,103
102,103
102,104
103,104
103,105
104,105
104,106
105,106
109,110
109,111
110,111
112,113
112,114
113,114
116,117
117,118
119,120
120,121
-----nextToken-----
2,4,7,9,10,15,17,19,22,24,27,29,33,36,37,43,46,48,50,51,52,56,61,64,65,68,69,72,78,80,83,85,87,91,95,96,100,106,107,108,111,114,115,118,121
-----computeFrom-----
34,35
34,36
39,40
39,41
41,42
41,43
59,60
59,61
62,63
62,64
66,67
66,68
75,76
75,77
93,94
93,95
102,103
102,104
103,104
103,105
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
int pnm_validate(jas_stream_t *in){	uchar buf[2];	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= 2);	/* Read the first two characters that constitute the signature. */	if ((n = jas_stream_read(in, buf, 2)) < 0) {		return -1;	}	/* Put these characters back to the stream. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < 2) {		return -1;	}	/* Is this the correct signature for a PNM file? */	if (buf[0] == 'P' && isdigit(buf[1])) {		return 0;	}	return -1;}
int
pnm_validate(jas_stream_t *in)
pnm_validate
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	uchar buf[2];	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= 2);	/* Read the first two characters that constitute the signature. */	if ((n = jas_stream_read(in, buf, 2)) < 0) {		return -1;	}	/* Put these characters back to the stream. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < 2) {		return -1;	}	/* Is this the correct signature for a PNM file? */	if (buf[0] == 'P' && isdigit(buf[1])) {		return 0;	}	return -1;}
uchar buf[2];
uchar buf[2];
uchar
uchar
buf[2]
buf
[2]
2
int i;
int i;
int
i
i
int n;
int n;
int
n
n
assert(JAS_STREAM_MAXPUTBACK >= 2);
assert(JAS_STREAM_MAXPUTBACK >= 2)
assert
assert
JAS_STREAM_MAXPUTBACK >= 2
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
2
if ((n = jas_stream_read(in, buf, 2)) < 0) {		return -1;	}
(n = jas_stream_read(in, buf, 2)) < 0
(n = jas_stream_read(in, buf, 2))
n = jas_stream_read(in, buf, 2)
n
n
jas_stream_read(in, buf, 2)
jas_stream_read
jas_stream_read
in
in
buf
buf
2
0
{		return -1;	}
return -1;
-1
1
for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
i = n - 1;
i = n - 1
i
i
n - 1
n
n
1
i >= 0
i
i
0
--i
i
i
{		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}
jas_stream_ungetc(in, buf[i]) == EOF
jas_stream_ungetc(in, buf[i])
jas_stream_ungetc
jas_stream_ungetc
in
in
buf[i]
buf
buf
i
i
EOF
EOF
{			return -1;		}
return -1;
-1
1
if (n < 2) {		return -1;	}
n < 2
n
n
2
{		return -1;	}
return -1;
-1
1
if (buf[0] == 'P' && isdigit(buf[1])) {		return 0;	}
buf[0] == 'P' && isdigit(buf[1])
buf[0] == 'P'
buf[0]
buf
buf
0
'P'
isdigit(buf[1])
isdigit
isdigit
buf[1]
buf
buf
1
{		return 0;	}
return 0;
0
return -1;
-1
1
-----joern-----
(108,124,0)
(296,321,0)
(260,267,0)
(183,170,0)
(206,124,0)
(215,353,0)
(28,42,0)
(323,144,0)
(223,164,0)
(133,96,0)
(196,186,0)
(240,74,0)
(132,104,0)
(28,41,0)
(252,104,0)
(78,44,0)
(284,279,0)
(19,321,0)
(98,42,0)
(138,238,0)
(224,302,0)
(213,322,0)
(96,209,0)
(98,281,0)
(355,253,0)
(218,219,0)
(123,353,0)
(48,81,0)
(124,8,0)
(208,1,0)
(140,296,0)
(41,104,0)
(28,208,0)
(270,25,0)
(289,345,0)
(166,168,0)
(297,227,0)
(51,329,0)
(170,253,0)
(169,250,0)
(200,37,0)
(191,164,0)
(257,291,0)
(244,252,0)
(106,253,0)
(41,28,0)
(339,149,0)
(31,199,0)
(192,349,0)
(282,357,0)
(279,253,0)
(115,75,0)
(331,321,0)
(176,266,0)
(139,196,0)
(86,198,0)
(339,199,0)
(235,234,0)
(186,321,0)
(308,357,0)
(225,157,0)
(316,158,0)
(251,282,0)
(47,104,0)
(198,321,0)
(325,11,0)
(124,11,0)
(293,323,0)
(11,104,0)
(348,242,0)
(184,188,0)
(114,233,0)
(207,146,0)
(219,218,0)
(334,321,0)
(125,171,0)
(268,125,0)
(330,125,0)
(222,208,0)
(157,253,0)
(278,32,0)
(78,195,0)
(164,253,0)
(168,355,0)
(119,197,0)
(246,355,0)
(154,323,0)
(177,254,0)
(134,177,0)
(242,341,0)
(310,88,0)
(14,358,0)
(4,338,0)
(128,218,0)
(295,321,0)
(282,251,0)
(239,266,0)
(99,143,0)
(35,5,0)
(232,321,0)
(126,224,0)
(106,329,0)
(221,44,0)
(7,207,0)
(201,28,0)
(104,252,0)
(237,211,0)
(286,70,0)
(279,284,0)
(59,1,0)
(77,234,0)
(343,248,0)
(141,45,0)
(335,149,0)
(236,171,0)
(68,248,0)
(127,197,0)
(233,138,0)
(326,138,0)
(53,207,0)
(265,24,0)
(30,134,0)
(353,253,0)
(90,172,0)
(254,177,0)
(208,172,0)
(273,144,0)
(124,341,0)
(84,98,0)
(39,1,0)
(192,253,0)
(350,221,0)
(160,331,0)
(287,143,0)
(328,238,0)
(20,124,0)
(32,276,0)
(353,124,0)
(363,181,0)
(303,244,0)
(94,321,0)
(264,37,0)
(36,209,0)
(281,98,0)
(17,64,0)
(117,33,0)
(319,132,0)
(248,331,0)
(347,271,0)
(292,339,0)
(110,89,0)
(103,321,0)
(111,277,0)
(293,44,0)
(13,192,0)
(100,283,0)
(151,358,0)
(142,11,0)
(188,191,0)
(360,46,0)
(195,345,0)
(136,276,0)
(138,233,0)
(214,140,0)
(120,253,0)
(180,5,0)
(195,78,0)
(3,251,0)
(144,45,0)
(221,188,0)
(95,358,0)
(315,279,0)
(365,120,0)
(33,233,0)
(33,228,0)
(251,302,0)
(178,253,0)
(243,75,0)
(317,302,0)
(227,227,0)
(168,70,0)
(177,321,0)
(269,170,0)
(131,252,0)
(255,361,0)
(236,75,0)
(162,309,0)
(356,236,0)
(179,286,0)
(182,28,0)
(302,321,0)
(105,178,0)
(71,64,0)
(189,296,0)
(345,12,0)
(175,42,0)
(158,309,0)
(212,208,0)
(211,358,0)
(122,219,0)
(338,221,0)
(85,241,0)
(294,266,0)
(190,120,0)
(43,224,0)
(282,152,0)
(161,221,0)
(196,8,0)
(67,89,0)
(216,37,0)
(11,124,0)
(76,216,0)
(14,130,0)
(63,134,0)
(299,158,0)
(327,209,0)
(62,42,0)
(120,160,0)
(226,321,0)
(193,294,0)
(69,80,0)
(231,70,0)
(130,14,0)
(282,5,0)
(121,106,0)
(29,33,0)
(125,266,0)
(229,16,0)
(331,160,0)
(75,143,0)
(160,120,0)
(298,331,0)
(97,157,0)
(187,41,0)
(276,321,0)
(329,341,0)
(102,276,0)
(300,238,0)
(352,146,0)
(28,158,0)
(285,284,0)
(89,302,0)
(27,257,0)
(191,188,0)
(158,345,0)
(332,178,0)
(342,155,0)
(324,321,0)
(130,253,0)
(313,321,0)
(28,197,0)
(354,195,0)
(256,339,0)
(1,88,0)
(21,70,0)
(79,269,0)
(241,75,0)
(104,47,0)
(116,231,0)
(55,17,0)
(312,136,0)
(0,144,0)
(230,340,0)
(244,253,0)
(40,106,0)
(50,321,0)
(247,268,0)
(33,266,0)
(323,293,0)
(124,353,0)
(340,37,0)
(291,44,0)
(173,170,0)
(28,267,0)
(362,181,0)
(134,198,0)
(64,149,0)
(359,281,0)
(238,138,0)
(60,309,0)
(58,74,0)
(17,188,0)
(134,321,0)
(291,257,0)
(262,118,0)
(101,148,0)
(197,283,0)
(150,341,0)
(245,291,0)
(170,269,0)
(146,321,0)
(216,234,0)
(9,132,0)
(219,145,0)
(61,282,0)
(305,205,0)
(167,32,0)
(91,341,0)
(269,5,0)
(41,209,0)
(10,355,0)
(336,12,0)
(113,5,0)
(65,321,0)
(218,44,0)
(281,253,0)
(107,174,0)
(268,253,0)
(171,236,0)
(234,216,0)
(344,321,0)
(153,251,0)
(275,135,0)
(181,362,0)
(349,192,0)
(221,338,0)
(159,124,0)
(252,244,0)
(137,281,0)
(288,231,0)
(156,268,0)
(261,152,0)
(38,92,0)
(18,130,0)
(357,282,0)
(276,349,0)
(185,163,0)
(217,210,0)
(129,136,0)
(362,204,0)
(93,78,0)
(238,219,0)
(301,321,0)
(49,149,0)
(26,180,0)
(109,321,0)
(203,277,0)
(337,17,0)
(274,41,0)
(82,177,0)
(124,358,0)
(16,209,0)
(329,106,0)
(56,124,0)
(306,145,0)
(54,192,0)
(188,321,0)
(258,357,0)
(277,16,0)
(202,307,0)
(73,199,0)
(6,147,0)
(234,253,0)
(52,164,0)
(349,276,0)
(294,228,0)
(87,140,0)
(238,227,0)
(333,321,0)
(338,1,0)
(145,219,0)
(186,196,0)
(249,282,0)
(28,339,0)
(149,271,0)
(241,228,0)
(66,198,0)
(57,244,0)
(259,152,0)
(181,104,0)
(2,70,0)
(164,191,0)
(311,42,0)
(132,37,0)
(304,254,0)
(227,228,0)
(197,144,0)
(11,341,0)
(83,172,0)
(22,279,0)
(125,268,0)
(364,186,0)
(15,321,0)
(17,44,0)
(34,236,0)
(351,293,0)
(290,28,0)
(64,17,0)
(16,277,0)
(72,14,0)
(33,89,0)
(89,33,0)
(165,112,0)
(314,130,0)
(346,227,0)
(220,345,0)
(280,23,0)
(263,181,0)
(284,266,0)
(181,70,0)
(227,219,0)
(233,33,0)
(355,168,0)
(194,62,0)
(171,125,0)
(277,253,0)
(320,283,0)
(272,318,0)
(33,266,1)
(6,210,1)
(201,41,1)
(285,171,1)
(241,75,1)
(17,64,1)
(35,113,1)
(292,256,1)
(208,212,1)
(14,358,1)
(158,316,1)
(326,238,1)
(284,279,1)
(235,77,1)
(315,285,1)
(40,121,1)
(238,300,1)
(67,171,1)
(28,197,1)
(213,221,1)
(299,78,1)
(128,122,1)
(127,293,1)
(177,254,1)
(194,16,1)
(76,340,1)
(29,117,1)
(318,272,1)
(77,76,1)
(270,112,1)
(181,104,1)
(150,284,1)
(161,350,1)
(56,329,1)
(41,209,1)
(102,186,1)
(119,127,1)
(303,57,1)
(179,231,1)
(345,289,1)
(41,104,1)
(158,345,1)
(131,132,1)
(220,112,1)
(221,188,1)
(211,237,1)
(188,191,1)
(32,276,1)
(215,159,1)
(335,49,1)
(277,253,1)
(124,358,1)
(165,78,1)
(200,146,1)
(203,111,1)
(286,179,1)
(346,297,1)
(124,11,1)
(268,253,1)
(187,208,1)
(325,142,1)
(106,40,1)
(251,302,1)
(78,44,1)
(247,156,1)
(314,72,1)
(290,182,1)
(217,293,1)
(355,253,1)
(196,8,1)
(93,178,1)
(124,353,1)
(154,351,1)
(138,238,1)
(231,288,1)
(21,2,1)
(150,269,1)
(68,14,1)
(330,236,1)
(339,292,1)
(178,105,1)
(338,1,1)
(306,219,1)
(363,231,1)
(244,253,1)
(322,213,1)
(296,189,1)
(84,42,1)
(171,125,1)
(62,194,1)
(329,341,1)
(0,210,1)
(55,337,1)
(348,124,1)
(281,359,1)
(357,258,1)
(291,44,1)
(286,70,1)
(170,173,1)
(181,70,1)
(39,59,1)
(110,67,1)
(242,348,1)
(245,269,1)
(279,253,1)
(197,119,1)
(26,282,1)
(211,358,1)
(86,66,1)
(166,70,1)
(17,188,1)
(138,326,1)
(196,139,1)
(233,138,1)
(2,107,1)
(75,115,1)
(210,217,1)
(28,41,1)
(69,318,1)
(89,110,1)
(132,37,1)
(227,219,1)
(108,206,1)
(353,123,1)
(72,358,1)
(54,13,1)
(16,209,1)
(187,197,1)
(11,104,1)
(27,245,1)
(28,42,1)
(340,230,1)
(218,44,1)
(276,349,1)
(7,53,1)
(28,158,1)
(18,314,1)
(79,180,1)
(273,0,1)
(248,343,1)
(216,37,1)
(218,128,1)
(238,227,1)
(157,97,1)
(33,89,1)
(241,85,1)
(227,346,1)
(30,134,1)
(1,39,1)
(216,234,1)
(264,200,1)
(59,322,1)
(140,214,1)
(117,89,1)
(256,149,1)
(53,296,1)
(2,101,1)
(137,84,1)
(221,338,1)
(222,1,1)
(231,70,1)
(294,266,1)
(134,63,1)
(285,266,1)
(356,34,1)
(187,339,1)
(120,190,1)
(299,345,1)
(134,198,1)
(327,36,1)
(132,319,1)
(34,294,1)
(223,52,1)
(112,165,1)
(294,193,1)
(304,82,1)
(340,37,1)
(3,291,1)
(352,207,1)
(4,161,1)
(266,239,1)
(28,290,1)
(236,356,1)
(274,187,1)
(2,6,1)
(308,61,1)
(338,4,1)
(130,18,1)
(195,354,1)
(124,8,1)
(180,5,1)
(125,266,1)
(206,56,1)
(186,196,1)
(187,158,1)
(36,98,1)
(278,248,1)
(209,327,1)
(219,218,1)
(166,286,1)
(239,176,1)
(224,126,1)
(34,75,1)
(262,322,1)
(249,251,1)
(13,102,1)
(130,253,1)
(122,284,1)
(175,248,1)
(150,98,1)
(258,308,1)
(353,253,1)
(225,136,1)
(51,242,1)
(115,243,1)
(195,345,1)
(129,16,1)
(114,29,1)
(323,144,1)
(214,87,1)
(125,268,1)
(349,192,1)
(254,304,1)
(62,42,1)
(359,137,1)
(105,332,1)
(297,33,1)
(234,235,1)
(136,312,1)
(178,253,1)
(72,211,1)
(91,150,1)
(236,75,1)
(63,168,1)
(89,302,1)
(181,263,1)
(180,26,1)
(28,208,1)
(78,195,1)
(329,106,1)
(252,244,1)
(244,303,1)
(293,323,1)
(10,166,1)
(284,266,1)
(66,14,1)
(291,257,1)
(111,229,1)
(153,3,1)
(269,170,1)
(49,318,1)
(263,363,1)
(243,145,1)
(51,341,1)
(183,79,1)
(251,153,1)
(2,48,1)
(212,222,1)
(257,27,1)
(70,21,1)
(246,10,1)
(311,175,1)
(302,317,1)
(184,331,1)
(96,209,1)
(167,278,1)
(331,160,1)
(134,177,1)
(351,178,1)
(362,181,1)
(168,355,1)
(269,5,1)
(282,5,1)
(120,253,1)
(159,108,1)
(208,1,1)
(164,253,1)
(170,253,1)
(332,136,1)
(20,353,1)
(157,253,1)
(358,151,1)
(354,93,1)
(101,124,1)
(198,86,1)
(234,253,1)
(242,341,1)
(79,5,1)
(237,329,1)
(145,219,1)
(190,365,1)
(64,71,1)
(124,341,1)
(207,7,1)
(5,35,1)
(182,201,1)
(139,364,1)
(144,273,1)
(52,184,1)
(171,236,1)
(192,54,1)
(179,362,1)
(98,281,1)
(64,149,1)
(43,188,1)
(37,264,1)
(238,219,1)
(71,55,1)
(142,20,1)
(11,325,1)
(202,47,1)
(272,17,1)
(146,352,1)
(48,291,1)
(164,223,1)
(97,225,1)
(229,96,1)
(9,216,1)
(151,95,1)
(2,202,1)
(341,91,1)
(116,168,1)
(192,253,1)
(229,209,1)
(176,32,1)
(42,311,1)
(156,330,1)
(2,262,1)
(364,177,1)
(126,43,1)
(256,17,1)
(337,157,1)
(2,69,1)
(104,252,1)
(221,44,1)
(227,227,1)
(279,22,1)
(11,341,1)
(16,277,1)
(2,198,1)
(319,9,1)
(84,62,1)
(365,298,1)
(191,164,1)
(47,104,1)
(282,251,1)
(168,70,1)
(328,114,1)
(96,133,1)
(14,130,1)
(193,241,1)
(2,270,1)
(343,68,1)
(350,157,1)
(293,44,1)
(316,299,1)
(32,167,1)
(98,42,1)
(107,145,1)
(222,221,1)
(61,249,1)
(22,315,1)
(33,233,1)
(41,274,1)
(288,116,1)
(289,220,1)
(300,328,1)
(160,120,1)
(113,32,1)
(312,129,1)
(197,144,1)
(282,357,1)
(87,302,1)
(339,149,1)
(189,140,1)
(173,183,1)
(248,331,1)
(57,131,1)
(298,276,1)
(281,253,1)
(106,253,1)
(76,37,1)
(317,224,1)
(268,247,1)
(121,51,1)
(28,339,1)
(95,216,1)
(149,335,1)
(123,215,1)
(145,306,1)
(355,246,1)
(323,154,1)
(17,44,1)
(230,47,1)
(136,276,1)
(127,144,1)
(85,227,1)
(277,203,1)
(133,28,1)
(85,171,2)
(97,136,2)
(329,124,2)
(125,236,2)
(269,291,2)
(238,171,2)
(247,236,2)
(269,32,2)
(239,32,2)
(136,276,2)
(286,70,2)
(156,236,2)
(210,293,2)
(28,112,2)
(292,318,2)
(203,318,2)
(91,284,2)
(274,78,2)
(173,32,2)
(16,318,2)
(314,329,2)
(41,112,2)
(11,104,2)
(208,1,2)
(124,329,2)
(64,157,2)
(291,269,2)
(121,284,2)
(209,98,2)
(272,17,2)
(164,253,2)
(1,322,2)
(183,291,2)
(362,231,2)
(40,284,2)
(96,221,2)
(124,353,2)
(138,238,2)
(356,145,2)
(216,37,2)
(187,221,2)
(203,17,2)
(186,196,2)
(356,171,2)
(112,78,2)
(17,157,2)
(6,210,2)
(125,266,2)
(323,178,2)
(281,248,2)
(39,322,2)
(89,302,2)
(203,112,2)
(133,17,2)
(142,329,2)
(222,322,2)
(201,293,2)
(187,17,2)
(98,248,2)
(203,210,2)
(338,157,2)
(273,210,2)
(290,221,2)
(168,70,2)
(211,329,2)
(216,234,2)
(28,158,2)
(145,219,2)
(51,124,2)
(119,210,2)
(282,251,2)
(208,221,2)
(285,145,2)
(16,78,2)
(104,252,2)
(59,322,2)
(16,277,2)
(252,244,2)
(277,293,2)
(284,266,2)
(32,276,2)
(338,1,2)
(197,144,2)
(144,210,2)
(282,357,2)
(339,149,2)
(111,318,2)
(282,5,2)
(319,216,2)
(248,331,2)
(327,98,2)
(175,248,2)
(138,171,2)
(32,248,2)
(98,281,2)
(299,112,2)
(133,78,2)
(270,112,2)
(28,197,2)
(130,329,2)
(212,322,2)
(231,70,2)
(197,293,2)
(153,291,2)
(150,98,2)
(277,318,2)
(343,14,2)
(196,8,2)
(290,322,2)
(110,171,2)
(121,269,2)
(16,210,2)
(124,341,2)
(303,216,2)
(96,78,2)
(128,284,2)
(249,291,2)
(203,221,2)
(229,322,2)
(277,221,2)
(79,32,2)
(49,318,2)
(241,171,2)
(150,269,2)
(171,145,2)
(341,98,2)
(242,341,2)
(171,125,2)
(292,17,2)
(180,291,2)
(28,221,2)
(279,253,2)
(323,144,2)
(325,329,2)
(40,269,2)
(11,329,2)
(51,284,2)
(187,112,2)
(277,98,2)
(133,318,2)
(134,198,2)
(106,124,2)
(121,98,2)
(329,269,2)
(106,284,2)
(33,89,2)
(136,16,2)
(234,253,2)
(105,136,2)
(18,216,2)
(165,78,2)
(33,171,2)
(355,168,2)
(132,37,2)
(269,170,2)
(326,171,2)
(149,318,2)
(212,221,2)
(48,291,2)
(96,112,2)
(170,253,2)
(96,209,2)
(64,149,2)
(160,120,2)
(78,44,2)
(167,248,2)
(274,322,2)
(233,171,2)
(133,210,2)
(274,318,2)
(181,231,2)
(76,47,2)
(96,322,2)
(201,318,2)
(300,171,2)
(28,210,2)
(337,157,2)
(62,16,2)
(294,266,2)
(182,293,2)
(220,112,2)
(234,47,2)
(289,112,2)
(362,181,2)
(96,210,2)
(329,106,2)
(111,293,2)
(55,157,2)
(318,17,2)
(41,293,2)
(154,178,2)
(68,14,2)
(98,16,2)
(274,17,2)
(11,341,2)
(221,188,2)
(188,191,2)
(274,210,2)
(10,168,2)
(96,318,2)
(238,227,2)
(341,284,2)
(170,32,2)
(222,221,2)
(28,318,2)
(350,157,2)
(182,78,2)
(0,210,2)
(192,253,2)
(288,168,2)
(111,17,2)
(158,78,2)
(14,130,2)
(28,17,2)
(203,78,2)
(355,253,2)
(201,221,2)
(182,17,2)
(293,323,2)
(22,145,2)
(225,136,2)
(291,44,2)
(208,322,2)
(187,318,2)
(4,157,2)
(137,248,2)
(161,157,2)
(182,112,2)
(28,41,2)
(111,210,2)
(193,171,2)
(359,16,2)
(66,14,2)
(251,291,2)
(168,168,2)
(28,322,2)
(248,14,2)
(284,279,2)
(47,216,2)
(227,227,2)
(311,248,2)
(151,216,2)
(238,219,2)
(236,75,2)
(22,32,2)
(124,358,2)
(14,329,2)
(236,145,2)
(157,253,2)
(231,168,2)
(176,32,2)
(130,216,2)
(41,17,2)
(124,11,2)
(215,329,2)
(217,293,2)
(229,318,2)
(346,171,2)
(35,32,2)
(116,168,2)
(227,171,2)
(201,322,2)
(51,98,2)
(197,210,2)
(229,98,2)
(111,78,2)
(294,171,2)
(33,266,2)
(322,221,2)
(203,293,2)
(133,322,2)
(194,16,2)
(187,293,2)
(252,216,2)
(277,253,2)
(16,293,2)
(286,168,2)
(182,210,2)
(34,171,2)
(3,291,2)
(332,136,2)
(229,210,2)
(245,269,2)
(276,349,2)
(84,16,2)
(158,345,2)
(363,231,2)
(129,16,2)
(354,178,2)
(51,269,2)
(106,269,2)
(17,44,2)
(297,171,2)
(314,216,2)
(180,5,2)
(229,78,2)
(359,248,2)
(20,329,2)
(71,157,2)
(182,221,2)
(282,291,2)
(121,124,2)
(285,32,2)
(237,329,2)
(104,216,2)
(34,145,2)
(241,75,2)
(251,302,2)
(340,47,2)
(16,112,2)
(242,124,2)
(89,171,2)
(274,112,2)
(227,219,2)
(79,291,2)
(256,318,2)
(269,5,2)
(84,248,2)
(353,253,2)
(130,253,2)
(178,253,2)
(181,104,2)
(86,14,2)
(306,284,2)
(330,236,2)
(315,32,2)
(316,112,2)
(266,32,2)
(57,216,2)
(191,164,2)
(137,16,2)
(14,216,2)
(211,358,2)
(41,104,2)
(132,216,2)
(183,32,2)
(358,216,2)
(78,178,2)
(279,145,2)
(202,47,2)
(122,284,2)
(339,318,2)
(69,318,2)
(111,322,2)
(244,216,2)
(117,171,2)
(341,269,2)
(120,253,2)
(16,17,2)
(290,210,2)
(67,171,2)
(278,248,2)
(179,168,2)
(277,210,2)
(256,17,2)
(62,42,2)
(26,291,2)
(124,8,2)
(221,157,2)
(96,293,2)
(166,168,2)
(131,216,2)
(236,171,2)
(41,221,2)
(18,329,2)
(29,171,2)
(290,318,2)
(316,78,2)
(115,145,2)
(348,124,2)
(16,98,2)
(339,17,2)
(277,322,2)
(331,160,2)
(72,329,2)
(42,248,2)
(47,104,2)
(106,253,2)
(28,208,2)
(171,171,2)
(168,355,2)
(293,44,2)
(216,47,2)
(56,329,2)
(195,345,2)
(27,269,2)
(33,233,2)
(312,16,2)
(101,124,2)
(345,112,2)
(16,209,2)
(28,293,2)
(72,216,2)
(201,112,2)
(201,78,2)
(158,112,2)
(28,78,2)
(98,42,2)
(308,291,2)
(198,14,2)
(284,32,2)
(229,112,2)
(159,329,2)
(173,291,2)
(157,136,2)
(329,341,2)
(41,318,2)
(221,338,2)
(203,98,2)
(246,168,2)
(181,70,2)
(268,236,2)
(127,210,2)
(182,318,2)
(277,17,2)
(36,98,2)
(41,78,2)
(123,329,2)
(315,145,2)
(357,291,2)
(290,78,2)
(93,178,2)
(291,257,2)
(127,293,2)
(233,138,2)
(150,284,2)
(125,268,2)
(187,322,2)
(96,17,2)
(257,269,2)
(262,322,2)
(218,284,2)
(111,112,2)
(145,284,2)
(177,254,2)
(111,98,2)
(219,284,2)
(95,216,2)
(219,218,2)
(16,221,2)
(75,145,2)
(353,329,2)
(218,44,2)
(5,32,2)
(221,44,2)
(133,293,2)
(277,78,2)
(274,293,2)
(235,47,2)
(229,293,2)
(133,221,2)
(9,216,2)
(349,192,2)
(351,178,2)
(91,269,2)
(284,145,2)
(187,210,2)
(41,210,2)
(28,339,2)
(114,171,2)
(293,178,2)
(329,98,2)
(290,293,2)
(243,145,2)
(229,17,2)
(113,32,2)
(335,318,2)
(16,322,2)
(40,124,2)
(290,17,2)
(108,329,2)
(187,78,2)
(328,171,2)
(17,188,2)
(268,253,2)
(134,177,2)
(111,221,2)
(244,253,2)
(119,293,2)
(41,209,2)
(274,221,2)
(263,231,2)
(107,145,2)
(17,64,2)
(299,78,2)
(91,98,2)
(40,98,2)
(290,112,2)
(281,16,2)
(14,358,2)
(201,210,2)
(133,112,2)
(277,112,2)
(281,253,2)
(258,291,2)
(213,221,2)
(28,42,2)
(170,291,2)
(279,32,2)
(78,195,2)
(41,322,2)
(171,236,2)
(229,221,2)
(203,322,2)
(106,98,2)
(77,47,2)
(206,329,2)
(329,284,2)
(201,17,2)
(61,291,2)
(178,136,2)
(230,47,2)
(182,322,2)
(30,134,2)
(195,178,2)
(340,37,2)
-----------------------------------
(0,sv)
(1,sv = 0)
(2,cmptno)
(3,data)
(4,sv)
(5,x = 0)
(6,goto done;)
(7,2)
(8,jas_image_t *image)
(9,data)
(10,hdr)
(11,data[cmptno])
(12,)
(13,hdr)
(14,y < hdr->height)
(15,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(16,cmptno < hdr->numcmpts)
(17,pnm_getuint(in, depth, &uv)
(18,height)
(19,depth)
(20,1)
(21,0)
(22,width)
(23,)
(24,)
(25,)
(26,x)
(27,uv)
(28,jas_matrix_set(data[cmptno], 0, x, v)
(29,x)
(30,RET)
(31,if (pnm_getuint(in, depth, &uv)
(32,fmt == PNM_FMT_BIN)
(33,jas_matrix_set(data[0], 0, x, 1 - ((c >> 7)
(34,n)
(35,0)
(36,cmptno)
(37,cmptno = 0)
(38,if (hdr->sgnd)
(39,0)
(40,numcmpts)
(41,data[cmptno])
(42,x = 0)
(43,data)
(44,jas_stream_t *in)
(45,)
(46,)
(47,!(data[cmptno] = jas_matrix_create(1, hdr->width)
(48,goto done;)
(49,uv)
(50,type)
(51,cmptno)
(52,hdr)
(53,data)
(54,magic)
(55,depth)
(56,image)
(57,hdr)
(58,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(59,sv)
(60,uv)
(61,x)
(62,++x)
(63,ret)
(64,&uv)
(65,ret)
(66,ret)
(67,data)
(68,type)
(69,goto done;)
(70,cmptno = 0)
(71,uv)
(72,y)
(73,uv)
(74,)
(75,n = 8)
(76,cmptno)
(77,hdr)
(78,pnm_getuintstr(in, &uv)
(79,x)
(80,)
(81,)
(82,ret)
(83,sv)
(84,x)
(85,n)
(86,0)
(87,data)
(88,)
(89,data[0])
(90,if (pnm_getsint(in, depth, &sv)
(91,0)
(92,)
(93,in)
(94,done:)
(95,y)
(96,++cmptno)
(97,sgnd)
(98,x < hdr->width)
(99,while (n > 0 && x < hdr->width)
(100,if (pnm_getsintstr(in, &sv)
(101,goto done;)
(102,fmt)
(103,v)
(104,data[cmptno] = jas_matrix_create(1, hdr->width)
(105,sgnd)
(106,hdr->numcmpts)
(107,goto done;)
(108,0)
(109,x)
(110,0)
(111,hdr)
(112,!pnm_allowtrunc)
(113,x)
(114,1)
(115,8)
(116,data)
(117,0)
(118,)
(119,sv)
(120,hdr->magic)
(121,hdr)
(122,c)
(123,width)
(124,jas_image_writecmpt(image, cmptno, 0, y, hdr->width, 1,\\n\\t\\t\\t  data[cmptno])
(125,x < hdr->width)
(126,0)
(127,v)
(128,in)
(129,fmt)
(130,hdr->height)
(131,1)
(132,data[cmptno])
(133,cmptno)
(134,return ret;)
(135,)
(136,fmt == PNM_FMT_BIN)
(137,hdr)
(138,(c >> 7)
(139,image)
(140,data[1])
(141,if (!pnm_allowtrunc)
(142,data)
(143,)
(144,sv = 0)
(145,(c = jas_stream_getc(in)
(146,data[2] = 0)
(147,)
(148,)
(149,uv = 0)
(150,cmptno)
(151,0)
(152,)
(153,0)
(154,sv)
(155,)
(156,hdr)
(157,hdr->sgnd)
(158,v = uv)
(159,y)
(160,pnm_type(hdr->magic)
(161,depth)
(162,if (pnm_getuintstr(in, &uv)
(163,)
(164,hdr->maxval)
(165,pnm_allowtrunc)
(166,cmptno)
(167,PNM_FMT_BIN)
(168,cmptno < hdr->numcmpts)
(169,if (fmt == PNM_FMT_BIN)
(170,hdr->width)
(171,n > 0 && x < hdr->width)
(172,)
(173,width)
(174,)
(175,x)
(176,x)
(177,ret = -1)
(178,hdr->sgnd)
(179,cmptno)
(180,++x)
(181,data[cmptno])
(182,x)
(183,hdr)
(184,depth)
(185,if (!(data[cmptno] = jas_matrix_create(1, hdr->width)
(186,numcmpts = jas_image_numcmpts(image)
(187,data)
(188,depth = pnm_maxvaltodepth(hdr->maxval)
(189,0)
(190,magic)
(191,pnm_maxvaltodepth(hdr->maxval)
(192,hdr->magic)
(193,x)
(194,x)
(195,&uv)
(196,jas_image_numcmpts(image)
(197,v = sv)
(198,ret = 0)
(199,)
(200,cmptno)
(201,0)
(202,goto done;)
(203,numcmpts)
(204,)
(205,)
(206,cmptno)
(207,data[2])
(208,v = sv)
(209,cmptno = 0)
(210,!pnm_allowtrunc)
(211,++y)
(212,sv)
(213,pnm_allowtrunc)
(214,1)
(215,hdr)
(216,cmptno < hdr->numcmpts)
(217,pnm_allowtrunc)
(218,jas_stream_getc(in)
(219,c = jas_stream_getc(in)
(220,uv)
(221,pnm_getsint(in, depth, &sv)
(222,v)
(223,maxval)
(224,data[0])
(225,hdr)
(226,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(227,c <<= 1)
(228,)
(229,cmptno)
(230,cmptno)
(231,data[cmptno])
(232,data)
(233,1 - ((c >> 7)
(234,hdr->numcmpts)
(235,numcmpts)
(236,n > 0)
(237,y)
(238,c >> 7)
(239,0)
(240,if (type == PNM_TYPE_PBM)
(241,--n)
(242,++cmptno)
(243,n)
(244,hdr->width)
(245,in)
(246,numcmpts)
(247,width)
(248,type == PNM_TYPE_PBM)
(249,0)
(250,)
(251,data[0])
(252,jas_matrix_create(1, hdr->width)
(253,pnm_hdr_t *hdr)
(254,-1)
(255,for (x = 0; x < hdr->width;)
(256,v)
(257,&uv)
(258,uv)
(259,if (pnm_getbitstr(in, &uv)
(260,if (fmt == PNM_FMT_BIN)
(261,uv)
(262,goto done;)
(263,cmptno)
(264,0)
(265,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(266,x = 0)
(267,)
(268,hdr->width)
(269,x < hdr->width)
(270,goto done;)
(271,)
(272,pnm_allowtrunc)
(273,0)
(274,cmptno)
(275,if (jas_image_writecmpt(image, cmptno, 0, y, hdr->width, 1,\\n\\t\\t\\t  data[cmptno])
(276,fmt = pnm_fmt(hdr->magic)
(277,hdr->numcmpts)
(278,fmt)
(279,hdr->width)
(280,if (hdr->sgnd)
(281,hdr->width)
(282,jas_matrix_set(data[0], 0, x, 1 - uv)
(283,)
(284,x < hdr->width)
(285,x)
(286,++cmptno)
(287,if ((c = jas_stream_getc(in)
(288,cmptno)
(289,0)
(290,v)
(291,pnm_getbitstr(in, &uv)
(292,uv)
(293,pnm_getsintstr(in, &sv)
(294,++x)
(295,for (y = 0; y < hdr->height; ++y)
(296,data[1] = 0)
(297,c)
(298,type)
(299,v)
(300,7)
(301,y)
(302,data[0] = 0)
(303,width)
(304,1)
(305,if (data[cmptno])
(306,EOF)
(307,)
(308,1)
(309,)
(310,if (!pnm_allowtrunc)
(311,0)
(312,PNM_FMT_BIN)
(313,n)
(314,hdr)
(315,hdr)
(316,uv)
(317,0)
(318,!pnm_allowtrunc)
(319,cmptno)
(320,sv)
(321,)
(322,!pnm_allowtrunc)
(323,&sv)
(324,fmt)
(325,cmptno)
(326,1)
(327,0)
(328,c)
(329,cmptno < hdr->numcmpts)
(330,x)
(331,type = pnm_type(hdr->magic)
(332,hdr)
(333,cmptno)
(334,numcmpts)
(335,0)
(336,if (!pnm_allowtrunc)
(337,in)
(338,&sv)
(339,v = uv)
(340,++cmptno)
(341,cmptno = 0)
(342,for (x = 0; x < hdr->width; ++x)
(343,PNM_TYPE_PBM)
(344,c)
(345,uv = 0)
(346,1)
(347,if (!pnm_allowtrunc)
(348,cmptno)
(349,pnm_fmt(hdr->magic)
(350,in)
(351,in)
(352,0)
(353,hdr->width)
(354,uv)
(355,hdr->numcmpts)
(356,0)
(357,1 - uv)
(358,y = 0)
(359,width)
(360,for (x = 0; x < hdr->width; ++x)
(361,)
(362,jas_matrix_destroy(data[cmptno])
(363,data)
(364,numcmpts)
(365,hdr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff1a34ad6300000000ffffffffffffffff6334ad6300000000ffffffffffffffff6334ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff3000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
int pnm_validate(jas_stream_t *in) {
int i;
int n;
assert(JAS_STREAM_MAXPUTBACK >= 2);
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
return -1;
=======================
