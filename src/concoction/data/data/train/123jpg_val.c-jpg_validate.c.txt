-----label-----
0
-----code-----
int jpg_validate(jas_stream_t *in)
{
	uchar buf[JPG_MAGICLEN];
	int i;
	int n;

	assert(JAS_STREAM_MAXPUTBACK >= JPG_MAGICLEN);

	/* Read the validation data (i.e., the data used for detecting
	  the format). */
	if ((n = jas_stream_read(in, buf, JPG_MAGICLEN)) < 0) {
		return -1;
	}

	/* Put the validation data back onto the stream, so that the
	  stream position will not be changed. */
	for (i = n - 1; i >= 0; --i) {
		if (jas_stream_ungetc(in, buf[i]) == EOF) {
			return -1;
		}
	}

	/* Did we read enough data? */
	if (n < JPG_MAGICLEN) {
		return -1;
	}

	/* Does this look like JPEG? */
	if (buf[0] != (JPG_MAGIC >> 8) || buf[1] != (JPG_MAGIC & 0xff)) {
		return -1;
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
21,22
22,23
22,24
24,25
26,27
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
40,42
41,42
41,43
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
51,52
53,54
56,57
57,58
58,59
60,61
60,62
60,63
60,64
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
73,74
74,75
76,77
77,78
77,79
78,79
78,80
79,80
79,81
79,82
80,81
82,83
84,85
84,86
85,86
87,88
89,90
91,92
92,93
93,94
95,96
95,97
96,97
96,98
97,98
99,100
101,102
102,103
103,104
105,106
105,107
106,107
106,108
107,108
107,109
108,109
108,110
109,110
112,113
113,114
113,115
114,115
117,118
117,119
118,119
118,120
119,120
122,123
123,124
123,125
124,125
127,128
128,129
129,130
131,132
-----nextToken-----
2,4,7,9,10,15,17,20,23,25,28,30,34,37,39,45,48,50,52,54,55,59,64,67,68,71,72,75,81,83,86,88,90,94,98,100,104,110,111,115,116,120,121,125,126,130,132
-----computeFrom-----
35,36
35,37
41,42
41,43
43,44
43,45
62,63
62,64
65,66
65,67
69,70
69,71
78,79
78,80
96,97
96,98
106,107
106,108
107,108
107,109
113,114
113,115
117,118
117,119
123,124
123,125
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int jpg_validate(jas_stream_t *in){	uchar buf[JPG_MAGICLEN];	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= JPG_MAGICLEN);	/* Read the validation data (i.e., the data used for detecting	  the format). */	if ((n = jas_stream_read(in, buf, JPG_MAGICLEN)) < 0) {		return -1;	}	/* Put the validation data back onto the stream, so that the	  stream position will not be changed. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < JPG_MAGICLEN) {		return -1;	}	/* Does this look like JPEG? */	if (buf[0] != (JPG_MAGIC >> 8) || buf[1] != (JPG_MAGIC & 0xff)) {		return -1;	}	return 0;}
int
jpg_validate(jas_stream_t *in)
jpg_validate
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	uchar buf[JPG_MAGICLEN];	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= JPG_MAGICLEN);	/* Read the validation data (i.e., the data used for detecting	  the format). */	if ((n = jas_stream_read(in, buf, JPG_MAGICLEN)) < 0) {		return -1;	}	/* Put the validation data back onto the stream, so that the	  stream position will not be changed. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Did we read enough data? */	if (n < JPG_MAGICLEN) {		return -1;	}	/* Does this look like JPEG? */	if (buf[0] != (JPG_MAGIC >> 8) || buf[1] != (JPG_MAGIC & 0xff)) {		return -1;	}	return 0;}
uchar buf[JPG_MAGICLEN];
uchar buf[JPG_MAGICLEN];
uchar
uchar
buf[JPG_MAGICLEN]
buf
[JPG_MAGICLEN]
JPG_MAGICLEN
JPG_MAGICLEN
int i;
int i;
int
i
i
int n;
int n;
int
n
n
assert(JAS_STREAM_MAXPUTBACK >= JPG_MAGICLEN);
assert(JAS_STREAM_MAXPUTBACK >= JPG_MAGICLEN)
assert
assert
JAS_STREAM_MAXPUTBACK >= JPG_MAGICLEN
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
JPG_MAGICLEN
JPG_MAGICLEN
if ((n = jas_stream_read(in, buf, JPG_MAGICLEN)) < 0) {		return -1;	}
(n = jas_stream_read(in, buf, JPG_MAGICLEN)) < 0
(n = jas_stream_read(in, buf, JPG_MAGICLEN))
n = jas_stream_read(in, buf, JPG_MAGICLEN)
n
n
jas_stream_read(in, buf, JPG_MAGICLEN)
jas_stream_read
jas_stream_read
in
in
buf
buf
JPG_MAGICLEN
JPG_MAGICLEN
0
{		return -1;	}
return -1;
-1
1
for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
i = n - 1;
i = n - 1
i
i
n - 1
n
n
1
i >= 0
i
i
0
--i
i
i
{		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}
jas_stream_ungetc(in, buf[i]) == EOF
jas_stream_ungetc(in, buf[i])
jas_stream_ungetc
jas_stream_ungetc
in
in
buf[i]
buf
buf
i
i
EOF
EOF
{			return -1;		}
return -1;
-1
1
if (n < JPG_MAGICLEN) {		return -1;	}
n < JPG_MAGICLEN
n
n
JPG_MAGICLEN
JPG_MAGICLEN
{		return -1;	}
return -1;
-1
1
if (buf[0] != (JPG_MAGIC >> 8) || buf[1] != (JPG_MAGIC & 0xff)) {		return -1;	}
buf[0] != (JPG_MAGIC >> 8) || buf[1] != (JPG_MAGIC & 0xff)
buf[0] != (JPG_MAGIC >> 8)
buf[0]
buf
buf
0
(JPG_MAGIC >> 8)
JPG_MAGIC >> 8
JPG_MAGIC
JPG_MAGIC
8
buf[1] != (JPG_MAGIC & 0xff)
buf[1]
buf
buf
1
(JPG_MAGIC & 0xff)
JPG_MAGIC & 0xff
JPG_MAGIC
JPG_MAGIC
0xff
{		return -1;	}
return -1;
-1
1
return 0;
0
-----joern-----
(30,34,0)
(67,36,0)
(59,66,0)
(30,35,0)
(13,2,0)
(41,47,0)
(45,68,0)
(31,56,0)
(66,42,0)
(28,2,0)
(30,64,0)
(37,76,0)
(36,67,0)
(45,62,0)
(10,2,0)
(20,27,0)
(43,0,0)
(62,66,0)
(34,9,0)
(61,33,0)
(64,2,0)
(33,61,0)
(36,56,0)
(30,22,0)
(0,7,0)
(1,68,0)
(60,36,0)
(42,7,0)
(70,69,0)
(8,66,0)
(52,2,0)
(44,42,0)
(57,22,0)
(47,41,0)
(63,35,0)
(60,33,0)
(38,67,0)
(0,75,0)
(40,51,0)
(39,57,0)
(25,2,0)
(32,62,0)
(55,7,0)
(65,67,0)
(35,71,0)
(22,26,0)
(16,0,0)
(50,41,0)
(4,42,0)
(21,27,0)
(36,60,0)
(7,46,0)
(23,41,0)
(12,63,0)
(76,53,0)
(74,61,0)
(18,2,0)
(56,36,0)
(47,2,0)
(7,0,0)
(5,55,0)
(29,62,0)
(49,61,0)
(46,7,0)
(19,69,0)
(15,8,0)
(11,46,0)
(14,55,0)
(30,53,0)
(42,66,0)
(3,58,0)
(48,2,0)
(33,69,0)
(72,45,0)
(73,0,0)
(6,56,0)
(27,66,0)
(51,34,0)
(69,33,0)
(24,64,0)
(62,45,0)
(33,60,0)
(68,45,0)
(53,54,0)
(45,75,0)
(17,7,0)
(7,0,1)
(69,19,1)
(8,66,1)
(27,21,1)
(42,4,1)
(1,45,1)
(8,15,1)
(0,43,1)
(55,7,1)
(24,60,1)
(4,44,1)
(20,8,1)
(5,27,1)
(64,24,1)
(0,75,1)
(68,1,1)
(30,64,1)
(30,34,1)
(68,45,1)
(59,46,1)
(22,57,1)
(45,75,1)
(46,11,1)
(44,59,1)
(38,65,1)
(30,53,1)
(43,16,1)
(42,7,1)
(30,22,1)
(33,61,1)
(57,39,1)
(62,66,1)
(29,32,1)
(35,63,1)
(20,66,1)
(47,41,1)
(27,66,1)
(14,5,1)
(46,7,1)
(23,50,1)
(60,36,1)
(73,17,1)
(17,47,1)
(76,37,1)
(31,55,1)
(19,70,1)
(11,7,1)
(55,14,1)
(66,42,1)
(36,67,1)
(21,20,1)
(37,55,1)
(40,60,1)
(53,76,1)
(16,73,1)
(70,61,1)
(56,6,1)
(62,29,1)
(74,49,1)
(32,72,1)
(34,51,1)
(15,68,1)
(45,62,1)
(6,31,1)
(67,38,1)
(63,12,1)
(72,27,1)
(39,46,1)
(65,56,1)
(51,40,1)
(41,23,1)
(36,56,1)
(60,33,1)
(33,69,1)
(49,36,1)
(30,35,1)
(12,68,1)
(61,74,1)
(42,46,2)
(63,68,2)
(15,68,2)
(7,0,2)
(44,46,2)
(59,46,2)
(30,35,2)
(61,36,2)
(42,7,2)
(30,34,2)
(55,7,2)
(64,60,2)
(6,55,2)
(36,56,2)
(4,46,2)
(57,46,2)
(37,55,2)
(65,55,2)
(33,36,2)
(29,27,2)
(38,55,2)
(35,68,2)
(76,55,2)
(30,64,2)
(30,22,2)
(60,55,2)
(8,68,2)
(56,55,2)
(31,55,2)
(51,60,2)
(33,69,2)
(30,53,2)
(49,36,2)
(8,66,2)
(55,27,2)
(40,60,2)
(60,33,2)
(66,42,2)
(12,68,2)
(68,27,2)
(21,46,2)
(0,75,2)
(27,66,2)
(20,46,2)
(27,46,2)
(14,27,2)
(60,36,2)
(45,27,2)
(68,45,2)
(1,27,2)
(62,27,2)
(22,46,2)
(34,60,2)
(70,36,2)
(36,55,2)
(33,61,2)
(67,55,2)
(66,46,2)
(46,7,2)
(27,68,2)
(36,67,2)
(74,36,2)
(53,55,2)
(45,75,2)
(20,68,2)
(39,46,2)
(19,36,2)
(21,68,2)
(72,27,2)
(45,62,2)
(5,27,2)
(69,36,2)
(32,27,2)
(47,41,2)
(24,60,2)
(62,66,2)
-----------------------------------
(0,jas_stream_read(in, buf, JPG_MAGICLEN)
(1,EOF)
(2,)
(3,if (jas_stream_ungetc(in, buf[i])
(4,1)
(5,n)
(6,0)
(7,n = jas_stream_read(in, buf, JPG_MAGICLEN)
(8,--i)
(9,)
(10,if (n < JPG_MAGICLEN)
(11,0)
(12,1)
(13,if ((n = jas_stream_read(in, buf, JPG_MAGICLEN)
(14,JPG_MAGICLEN)
(15,i)
(16,buf)
(17,n)
(18,buf)
(19,0xff)
(20,i)
(21,0)
(22,return -1;)
(23,JPG_MAGICLEN)
(24,0)
(25,i)
(26,)
(27,i >= 0)
(28,if (buf[0] != (JPG_MAGIC >> 8)
(29,i)
(30,RET)
(31,buf)
(32,buf)
(33,buf[1] != (JPG_MAGIC & 0xff)
(34,return -1;)
(35,return -1;)
(36,buf[0] != (JPG_MAGIC >> 8)
(37,1)
(38,8)
(39,1)
(40,1)
(41,JAS_STREAM_MAXPUTBACK >= JPG_MAGICLEN)
(42,n - 1)
(43,JPG_MAGICLEN)
(44,n)
(45,jas_stream_ungetc(in, buf[i])
(46,(n = jas_stream_read(in, buf, JPG_MAGICLEN)
(47,assert(JAS_STREAM_MAXPUTBACK >= JPG_MAGICLEN)
(48,for (i = n - 1; i >= 0; --i)
(49,buf)
(50,JAS_STREAM_MAXPUTBACK)
(51,-1)
(52,n)
(53,return -1;)
(54,)
(55,n < JPG_MAGICLEN)
(56,buf[0])
(57,-1)
(58,)
(59,i)
(60,buf[0] != (JPG_MAGIC >> 8)
(61,buf[1])
(62,buf[i])
(63,-1)
(64,return 0;)
(65,JPG_MAGIC)
(66,i = n - 1)
(67,JPG_MAGIC >> 8)
(68,jas_stream_ungetc(in, buf[i])
(69,JPG_MAGIC & 0xff)
(70,JPG_MAGIC)
(71,)
(72,in)
(73,in)
(74,1)
(75,jas_stream_t *in)
(76,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff9cf9a66300000000ffffffffffffffff32faa66300000000ffffffffffffffff32faa66300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xffd8000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
int jpg_validate(jas_stream_t *in) {
int i;
int n;
assert(JAS_STREAM_MAXPUTBACK >= JPG_MAGICLEN);
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
return 0;
=======================
