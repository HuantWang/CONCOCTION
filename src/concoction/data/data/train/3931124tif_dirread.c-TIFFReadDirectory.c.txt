-----label-----
1
-----code-----
int
TIFFReadDirectory(TIFF* tif)
{
	static const char module[] = "TIFFReadDirectory";
	TIFFDirEntry* dir;
	uint16 dircount;
	TIFFDirEntry* dp;
	uint16 di;
	const TIFFField* fip;
	uint32 fii=FAILED_FII;
        toff_t nextdiroff;
    int bitspersample_read = FALSE;

	tif->tif_diroff=tif->tif_nextdiroff;
	if (!TIFFCheckDirOffset(tif,tif->tif_nextdiroff))
		return 0;           /* last offset or bad offset (IFD looping) */
	(*tif->tif_cleanup)(tif);   /* cleanup any previous compression state */
	tif->tif_curdir++;
        nextdiroff = tif->tif_nextdiroff;
	dircount=TIFFFetchDirectory(tif,nextdiroff,&dir,&tif->tif_nextdiroff);
	if (!dircount)
	{
		TIFFErrorExt(tif->tif_clientdata,module,
		    "Failed to read directory at offset " TIFF_UINT64_FORMAT,nextdiroff);
		return 0;
	}
	TIFFReadDirectoryCheckOrder(tif,dir,dircount);

        /*
         * Mark duplicates of any tag to be ignored (bugzilla 1994)
         * to avoid certain pathological problems.
         */
	{
		TIFFDirEntry* ma;
		uint16 mb;
		for (ma=dir, mb=0; mb<dircount; ma++, mb++)
		{
			TIFFDirEntry* na;
			uint16 nb;
			for (na=ma+1, nb=mb+1; nb<dircount; na++, nb++)
			{
				if (ma->tdir_tag==na->tdir_tag)
					na->tdir_tag=IGNORE;
			}
		}
	}
        
	tif->tif_flags &= ~TIFF_BEENWRITING;    /* reset before new dir */
	tif->tif_flags &= ~TIFF_BUF4WRITE;      /* reset before new dir */
	/* free any old stuff and reinit */
	TIFFFreeDirectory(tif);
	TIFFDefaultDirectory(tif);
	/*
	 * Electronic Arts writes gray-scale TIFF files
	 * without a PlanarConfiguration directory entry.
	 * Thus we setup a default value here, even though
	 * the TIFF spec says there is no default value.
	 */
	TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG);
	/*
	 * Setup default value and then make a pass over
	 * the fields to check type and tag information,
	 * and to extract info required to size data
	 * structures.  A second pass is made afterwards
	 * to read in everything not taken in the first pass.
	 * But we must process the Compression tag first
	 * in order to merge in codec-private tag definitions (otherwise
	 * we may get complaints about unknown tags).  However, the
	 * Compression tag may be dependent on the SamplesPerPixel
	 * tag value because older TIFF specs permitted Compression
	 * to be written as a SamplesPerPixel-count tag entry.
	 * Thus if we don't first figure out the correct SamplesPerPixel
	 * tag value then we may end up ignoring the Compression tag
	 * value because it has an incorrect count value (if the
	 * true value of SamplesPerPixel is not 1).
	 */
	dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_SAMPLESPERPIXEL);
	if (dp)
	{
		if (!TIFFFetchNormalTag(tif,dp,0))
			goto bad;
		dp->tdir_tag=IGNORE;
	}
	dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_COMPRESSION);
	if (dp)
	{
		/*
		 * The 5.0 spec says the Compression tag has one value, while
		 * earlier specs say it has one value per sample.  Because of
		 * this, we accept the tag if one value is supplied with either
		 * count.
		 */
		uint16 value;
		enum TIFFReadDirEntryErr err;
		err=TIFFReadDirEntryShort(tif,dp,&value);
		if (err==TIFFReadDirEntryErrCount)
			err=TIFFReadDirEntryPersampleShort(tif,dp,&value);
		if (err!=TIFFReadDirEntryErrOk)
		{
			TIFFReadDirEntryOutputErr(tif,err,module,"Compression",0);
			goto bad;
		}
		if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,value))
			goto bad;
		dp->tdir_tag=IGNORE;
	}
	else
	{
		if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,COMPRESSION_NONE))
			goto bad;
	}
	/*
	 * First real pass over the directory.
	 */
	for (di=0, dp=dir; di<dircount; di++, dp++)
	{
		if (dp->tdir_tag!=IGNORE)
		{
			TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);
			if (fii == FAILED_FII)
			{
				TIFFWarningExt(tif->tif_clientdata, module,
				    "Unknown field with tag %d (0x%x) encountered",
				    dp->tdir_tag,dp->tdir_tag);
                                /* the following knowingly leaks the 
                                   anonymous field structure */
				if (!_TIFFMergeFields(tif,
					_TIFFCreateAnonField(tif,
						dp->tdir_tag,
						(TIFFDataType) dp->tdir_type),
					1)) {
					TIFFWarningExt(tif->tif_clientdata,
					    module,
					    "Registering anonymous field with tag %d (0x%x) failed",
					    dp->tdir_tag,
					    dp->tdir_tag);
					dp->tdir_tag=IGNORE;
				} else {
					TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);
					assert(fii != FAILED_FII);
				}
			}
		}
		if (dp->tdir_tag!=IGNORE)
		{
			fip=tif->tif_fields[fii];
			if (fip->field_bit==FIELD_IGNORE)
				dp->tdir_tag=IGNORE;
			else
			{
				switch (dp->tdir_tag)
				{
					case TIFFTAG_STRIPOFFSETS:
					case TIFFTAG_STRIPBYTECOUNTS:
					case TIFFTAG_TILEOFFSETS:
					case TIFFTAG_TILEBYTECOUNTS:
						TIFFSetFieldBit(tif,fip->field_bit);
						break;
					case TIFFTAG_IMAGEWIDTH:
					case TIFFTAG_IMAGELENGTH:
					case TIFFTAG_IMAGEDEPTH:
					case TIFFTAG_TILELENGTH:
					case TIFFTAG_TILEWIDTH:
					case TIFFTAG_TILEDEPTH:
					case TIFFTAG_PLANARCONFIG:
					case TIFFTAG_ROWSPERSTRIP:
					case TIFFTAG_EXTRASAMPLES:
						if (!TIFFFetchNormalTag(tif,dp,0))
							goto bad;
						dp->tdir_tag=IGNORE;
						break;
                                        default:
                                            if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )
                                                dp->tdir_tag=IGNORE;
                                            break;
				}
			}
		}
	}
	/*
	 * XXX: OJPEG hack.
	 * If a) compression is OJPEG, b) planarconfig tag says it's separate,
	 * c) strip offsets/bytecounts tag are both present and
	 * d) both contain exactly one value, then we consistently find
	 * that the buggy implementation of the buggy compression scheme
	 * matches contig planarconfig best. So we 'fix-up' the tag here
	 */
	if ((tif->tif_dir.td_compression==COMPRESSION_OJPEG)&&
	    (tif->tif_dir.td_planarconfig==PLANARCONFIG_SEPARATE))
	{
        if (!_TIFFFillStriles(tif))
            goto bad;
		dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_STRIPOFFSETS);
		if ((dp!=0)&&(dp->tdir_count==1))
		{
			dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,
			    TIFFTAG_STRIPBYTECOUNTS);
			if ((dp!=0)&&(dp->tdir_count==1))
			{
				tif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG;
				TIFFWarningExt(tif->tif_clientdata,module,
				    "Planarconfig tag value assumed incorrect, "
				    "assuming data is contig instead of chunky");
			}
		}
	}
	/*
	 * Allocate directory structure and setup defaults.
	 */
	if (!TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))
	{
		MissingRequired(tif,"ImageLength");
		goto bad;
	}
	/*
	 * Setup appropriate structures (by strip or by tile)
	 */
	if (!TIFFFieldSet(tif, FIELD_TILEDIMENSIONS)) {
		tif->tif_dir.td_nstrips = TIFFNumberOfStrips(tif);  
		tif->tif_dir.td_tilewidth = tif->tif_dir.td_imagewidth;
		tif->tif_dir.td_tilelength = tif->tif_dir.td_rowsperstrip;
		tif->tif_dir.td_tiledepth = tif->tif_dir.td_imagedepth;
		tif->tif_flags &= ~TIFF_ISTILED;
	} else {
		tif->tif_dir.td_nstrips = TIFFNumberOfTiles(tif);
		tif->tif_flags |= TIFF_ISTILED;
	}
	if (!tif->tif_dir.td_nstrips) {
		TIFFErrorExt(tif->tif_clientdata, module,
		    "Cannot handle zero number of %s",
		    isTiled(tif) ? "tiles" : "strips");
		goto bad;
	}
	tif->tif_dir.td_stripsperimage = tif->tif_dir.td_nstrips;
	if (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE)
		tif->tif_dir.td_stripsperimage /= tif->tif_dir.td_samplesperpixel;
	if (!TIFFFieldSet(tif, FIELD_STRIPOFFSETS)) {
#ifdef OJPEG_SUPPORT
		if ((tif->tif_dir.td_compression==COMPRESSION_OJPEG) &&
		    (isTiled(tif)==0) &&
		    (tif->tif_dir.td_nstrips==1)) {
			/*
			 * XXX: OJPEG hack.
			 * If a) compression is OJPEG, b) it's not a tiled TIFF,
			 * and c) the number of strips is 1,
			 * then we tolerate the absence of stripoffsets tag,
			 * because, presumably, all required data is in the
			 * JpegInterchangeFormat stream.
			 */
			TIFFSetFieldBit(tif, FIELD_STRIPOFFSETS);
		} else
#endif
        {
			MissingRequired(tif,
				isTiled(tif) ? "TileOffsets" : "StripOffsets");
			goto bad;
		}
	}
	/*
	 * Second pass: extract other information.
	 */
	for (di=0, dp=dir; di<dircount; di++, dp++)
	{
		switch (dp->tdir_tag)
		{
			case IGNORE:
				break;
			case TIFFTAG_MINSAMPLEVALUE:
			case TIFFTAG_MAXSAMPLEVALUE:
			case TIFFTAG_BITSPERSAMPLE:
			case TIFFTAG_DATATYPE:
			case TIFFTAG_SAMPLEFORMAT:
				/*
				 * The MinSampleValue, MaxSampleValue, BitsPerSample
				 * DataType and SampleFormat tags are supposed to be
				 * written as one value/sample, but some vendors
				 * incorrectly write one value only -- so we accept
				 * that as well (yuck). Other vendors write correct
				 * value for NumberOfSamples, but incorrect one for
				 * BitsPerSample and friends, and we will read this
				 * too.
				 */
				{
					uint16 value;
					enum TIFFReadDirEntryErr err;
					err=TIFFReadDirEntryShort(tif,dp,&value);
					if (err==TIFFReadDirEntryErrCount)
						err=TIFFReadDirEntryPersampleShort(tif,dp,&value);
					if (err!=TIFFReadDirEntryErrOk)
					{
						fip = TIFFFieldWithTag(tif,dp->tdir_tag);
						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);
						goto bad;
					}
					if (!TIFFSetField(tif,dp->tdir_tag,value))
						goto bad;
                    if( dp->tdir_tag == TIFFTAG_BITSPERSAMPLE )
                        bitspersample_read = TRUE;
				}
				break;
			case TIFFTAG_SMINSAMPLEVALUE:
			case TIFFTAG_SMAXSAMPLEVALUE:
				{

					double *data = NULL;
					enum TIFFReadDirEntryErr err;
					uint32 saved_flags;
					int m;
					if (dp->tdir_count != (uint64)tif->tif_dir.td_samplesperpixel)
						err = TIFFReadDirEntryErrCount;
					else
						err = TIFFReadDirEntryDoubleArray(tif, dp, &data);
					if (err!=TIFFReadDirEntryErrOk)
					{
						fip = TIFFFieldWithTag(tif,dp->tdir_tag);
						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);
						goto bad;
					}
					saved_flags = tif->tif_flags;
					tif->tif_flags |= TIFF_PERSAMPLE;
					m = TIFFSetField(tif,dp->tdir_tag,data);
					tif->tif_flags = saved_flags;
					_TIFFfree(data);
					if (!m)
						goto bad;
				}
				break;
			case TIFFTAG_STRIPOFFSETS:
			case TIFFTAG_TILEOFFSETS:
#if defined(DEFER_STRILE_LOAD)
                                _TIFFmemcpy( &(tif->tif_dir.td_stripoffset_entry),
                                             dp, sizeof(TIFFDirEntry) );
#else                          
                                if( tif->tif_dir.td_stripoffset != NULL )
                                {
                                    TIFFErrorExt(tif->tif_clientdata, module,
                                        "tif->tif_dir.td_stripoffset is "
                                        "already allocated. Likely duplicated "
                                        "StripOffsets/TileOffsets tag");
                                    goto bad;
                                }
				if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripoffset))  
					goto bad;
#endif                                
				break;
			case TIFFTAG_STRIPBYTECOUNTS:
			case TIFFTAG_TILEBYTECOUNTS:
#if defined(DEFER_STRILE_LOAD)
                                _TIFFmemcpy( &(tif->tif_dir.td_stripbytecount_entry),
                                             dp, sizeof(TIFFDirEntry) );
#else                          
                                if( tif->tif_dir.td_stripbytecount != NULL )
                                {
                                    TIFFErrorExt(tif->tif_clientdata, module,
                                        "tif->tif_dir.td_stripbytecount is "
                                        "already allocated. Likely duplicated "
                                        "StripByteCounts/TileByteCounts tag");
                                    goto bad;
                                }
                                if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripbytecount))  
					goto bad;
#endif                                
				break;
			case TIFFTAG_COLORMAP:
			case TIFFTAG_TRANSFERFUNCTION:
				{
					enum TIFFReadDirEntryErr err;
					uint32 countpersample;
					uint32 countrequired;
					uint32 incrementpersample;
					uint16* value=NULL;
                    /* It would be dangerous to instantiate those tag values */
                    /* since if td_bitspersample has not yet been read (due to */
                    /* unordered tags), it could be read afterwards with a */
                    /* values greater than the default one (1), which may cause */
                    /* crashes in user code */
                    if( !bitspersample_read )
                    {
                        fip = TIFFFieldWithTag(tif,dp->tdir_tag);
                        TIFFWarningExt(tif->tif_clientdata,module,
                                       "Ignoring %s since BitsPerSample tag not found",
                                       fip ? fip->field_name : "unknown tagname");
                        continue;
                    }
					/* ColorMap or TransferFunction for high bit */
					/* depths do not make much sense and could be */
					/* used as a denial of service vector */
					if (tif->tif_dir.td_bitspersample > 24)
					{
					    fip = TIFFFieldWithTag(tif,dp->tdir_tag);
					    TIFFWarningExt(tif->tif_clientdata,module,
						"Ignoring %s because BitsPerSample=%d>24",
						fip ? fip->field_name : "unknown tagname",
						tif->tif_dir.td_bitspersample);
					    continue;
					}
					countpersample=(1U<<tif->tif_dir.td_bitspersample);
					if ((dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)&&(dp->tdir_count==(uint64)countpersample))
					{
						countrequired=countpersample;
						incrementpersample=0;
					}
					else
					{
						countrequired=3*countpersample;
						incrementpersample=countpersample;
					}
					if (dp->tdir_count!=(uint64)countrequired)
						err=TIFFReadDirEntryErrCount;
					else
						err=TIFFReadDirEntryShortArray(tif,dp,&value);
					if (err!=TIFFReadDirEntryErrOk)
                    {
						fip = TIFFFieldWithTag(tif,dp->tdir_tag);
						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1);
                    }
					else
					{
						TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);
						_TIFFfree(value);
					}
				}
				break;
/* BEGIN REV 4.0 COMPATIBILITY */
			case TIFFTAG_OSUBFILETYPE:
				{
					uint16 valueo;
					uint32 value;
					if (TIFFReadDirEntryShort(tif,dp,&valueo)==TIFFReadDirEntryErrOk)
					{
						switch (valueo)
						{
							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;
							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;
							default: value=0; break;
						}
						if (value!=0)
							TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);
					}
				}
				break;
/* END REV 4.0 COMPATIBILITY */
			default:
				(void) TIFFFetchNormalTag(tif, dp, TRUE);
				break;
		}
	}
	/*
	 * OJPEG hack:
	 * - If a) compression is OJPEG, and b) photometric tag is missing,
	 * then we consistently find that photometric should be YCbCr
	 * - If a) compression is OJPEG, and b) photometric tag says it's RGB,
	 * then we consistently find that the buggy implementation of the
	 * buggy compression scheme matches photometric YCbCr instead.
	 * - If a) compression is OJPEG, and b) bitspersample tag is missing,
	 * then we consistently find bitspersample should be 8.
	 * - If a) compression is OJPEG, b) samplesperpixel tag is missing,
	 * and c) photometric is RGB or YCbCr, then we consistently find
	 * samplesperpixel should be 3
	 * - If a) compression is OJPEG, b) samplesperpixel tag is missing,
	 * and c) photometric is MINISWHITE or MINISBLACK, then we consistently
	 * find samplesperpixel should be 3
	 */
	if (tif->tif_dir.td_compression==COMPRESSION_OJPEG)
	{
		if (!TIFFFieldSet(tif,FIELD_PHOTOMETRIC))
		{
			TIFFWarningExt(tif->tif_clientdata, module,
			    "Photometric tag is missing, assuming data is YCbCr");
			if (!TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR))
				goto bad;
		}
		else if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)
		{
			tif->tif_dir.td_photometric=PHOTOMETRIC_YCBCR;
			TIFFWarningExt(tif->tif_clientdata, module,
			    "Photometric tag value assumed incorrect, "
			    "assuming data is YCbCr instead of RGB");
		}
		if (!TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))
		{
			TIFFWarningExt(tif->tif_clientdata,module,
			    "BitsPerSample tag is missing, assuming 8 bits per sample");
			if (!TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,8))
				goto bad;
		}
		if (!TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))
		{
			if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)
			{
				TIFFWarningExt(tif->tif_clientdata,module,
				    "SamplesPerPixel tag is missing, "
				    "assuming correct SamplesPerPixel value is 3");
				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))
					goto bad;
			}
			if (tif->tif_dir.td_photometric==PHOTOMETRIC_YCBCR)
			{
				TIFFWarningExt(tif->tif_clientdata,module,
				    "SamplesPerPixel tag is missing, "
				    "applying correct SamplesPerPixel value of 3");
				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))
					goto bad;
			}
			else if ((tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)
				 || (tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK))
			{
				/*
				 * SamplesPerPixel tag is missing, but is not required
				 * by spec.  Assume correct SamplesPerPixel value of 1.
				 */
				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))
					goto bad;
			}
		}
	}
	/*
	 * Verify Palette image has a Colormap.
	 */
	if (tif->tif_dir.td_photometric == PHOTOMETRIC_PALETTE &&
	    !TIFFFieldSet(tif, FIELD_COLORMAP)) {
		if ( tif->tif_dir.td_bitspersample>=8 && tif->tif_dir.td_samplesperpixel==3)
			tif->tif_dir.td_photometric = PHOTOMETRIC_RGB;
		else if (tif->tif_dir.td_bitspersample>=8)
			tif->tif_dir.td_photometric = PHOTOMETRIC_MINISBLACK;
		else {
			MissingRequired(tif, "Colormap");
			goto bad;
		}
	}
	/*
	 * OJPEG hack:
	 * We do no further messing with strip/tile offsets/bytecounts in OJPEG
	 * TIFFs
	 */
	if (tif->tif_dir.td_compression!=COMPRESSION_OJPEG)
	{
		/*
		 * Attempt to deal with a missing StripByteCounts tag.
		 */
		if (!TIFFFieldSet(tif, FIELD_STRIPBYTECOUNTS)) {
			/*
			 * Some manufacturers violate the spec by not giving
			 * the size of the strips.  In this case, assume there
			 * is one uncompressed strip of data.
			 */
			if ((tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&
			    tif->tif_dir.td_nstrips > 1) ||
			    (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&
			     tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel)) {
			    MissingRequired(tif, "StripByteCounts");
			    goto bad;
			}
			TIFFWarningExt(tif->tif_clientdata, module,
				"TIFF directory is missing required "
				"\"StripByteCounts\" field, calculating from imagelength");
			if (EstimateStripByteCounts(tif, dir, dircount) < 0)
			    goto bad;
		/*
		 * Assume we have wrong StripByteCount value (in case
		 * of single strip) in following cases:
		 *   - it is equal to zero along with StripOffset;
		 *   - it is larger than file itself (in case of uncompressed
		 *     image);
		 *   - it is smaller than the size of the bytes per row
		 *     multiplied on the number of rows.  The last case should
		 *     not be checked in the case of writing new image,
		 *     because we may do not know the exact strip size
		 *     until the whole image will be written and directory
		 *     dumped out.
		 */
		#define	BYTECOUNTLOOKSBAD \
		    ( (tif->tif_dir.td_stripbytecount[0] == 0 && tif->tif_dir.td_stripoffset[0] != 0) || \
		      (tif->tif_dir.td_compression == COMPRESSION_NONE && \
		       (tif->tif_dir.td_stripoffset[0] <= TIFFGetFileSize(tif) && \
		        tif->tif_dir.td_stripbytecount[0] > TIFFGetFileSize(tif) - tif->tif_dir.td_stripoffset[0])) || \
		      (tif->tif_mode == O_RDONLY && \
		       tif->tif_dir.td_compression == COMPRESSION_NONE && \
		       tif->tif_dir.td_stripbytecount[0] < TIFFScanlineSize64(tif) * tif->tif_dir.td_imagelength) )

		} else if (tif->tif_dir.td_nstrips == 1
                           && !(tif->tif_flags&TIFF_ISTILED)
                           && _TIFFFillStriles(tif)
			   && tif->tif_dir.td_stripoffset[0] != 0
			   && BYTECOUNTLOOKSBAD) {
			/*
			 * XXX: Plexus (and others) sometimes give a value of
			 * zero for a tag when they don't know what the
			 * correct value is!  Try and handle the simple case
			 * of estimating the size of a one strip image.
			 */
			TIFFWarningExt(tif->tif_clientdata, module,
			    "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength");
			if(EstimateStripByteCounts(tif, dir, dircount) < 0)
			    goto bad;

#if !defined(DEFER_STRILE_LOAD)
		} else if (tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG
			   && tif->tif_dir.td_nstrips > 2
			   && tif->tif_dir.td_compression == COMPRESSION_NONE
			   && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]
			   && tif->tif_dir.td_stripbytecount[0] != 0
			   && tif->tif_dir.td_stripbytecount[1] != 0 ) {
			/*
			 * XXX: Some vendors fill StripByteCount array with
			 * absolutely wrong values (it can be equal to
			 * StripOffset array, for example). Catch this case
			 * here.
                         *
                         * We avoid this check if deferring strile loading
                         * as it would always force us to load the strip/tile
                         * information.
			 */
			TIFFWarningExt(tif->tif_clientdata, module,
			    "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength");
			if (EstimateStripByteCounts(tif, dir, dircount) < 0)
			    goto bad;
#endif /* !defined(DEFER_STRILE_LOAD) */                        
		}
	}
	if (dir)
	{
		_TIFFfree(dir);
		dir=NULL;
	}
	if (!TIFFFieldSet(tif, FIELD_MAXSAMPLEVALUE))
	{
		if (tif->tif_dir.td_bitspersample>=16)
			tif->tif_dir.td_maxsamplevalue=0xFFFF;
		else
			tif->tif_dir.td_maxsamplevalue = (uint16)((1L<<tif->tif_dir.td_bitspersample)-1);
	}
	/*
	 * XXX: We can optimize checking for the strip bounds using the sorted
	 * bytecounts array. See also comments for TIFFAppendToStrip()
	 * function in tif_write.c.
	 */
#if !defined(DEFER_STRILE_LOAD)        
	if (tif->tif_dir.td_nstrips > 1) {
		uint32 strip;

		tif->tif_dir.td_stripbytecountsorted = 1;
		for (strip = 1; strip < tif->tif_dir.td_nstrips; strip++) {
			if (tif->tif_dir.td_stripoffset[strip - 1] >
			    tif->tif_dir.td_stripoffset[strip]) {
				tif->tif_dir.td_stripbytecountsorted = 0;
				break;
			}
		}
	}
#endif /* !defined(DEFER_STRILE_LOAD) */
        
	/*
	 * An opportunity for compression mode dependent tag fixup
	 */
	(*tif->tif_fixuptags)(tif);

	/*
	 * Some manufacturers make life difficult by writing
	 * large amounts of uncompressed data as a single strip.
	 * This is contrary to the recommendations of the spec.
	 * The following makes an attempt at breaking such images
	 * into strips closer to the recommended 8k bytes.  A
	 * side effect, however, is that the RowsPerStrip tag
	 * value may be changed.
	 */
	if ((tif->tif_dir.td_planarconfig==PLANARCONFIG_CONTIG)&&
	    (tif->tif_dir.td_nstrips==1)&&
	    (tif->tif_dir.td_compression==COMPRESSION_NONE)&&  
	    ((tif->tif_flags&(TIFF_STRIPCHOP|TIFF_ISTILED))==TIFF_STRIPCHOP))
    {
        if ( !_TIFFFillStriles(tif) || !tif->tif_dir.td_stripbytecount )
            return 0;
		ChopUpSingleUncompressedStrip(tif);
    }

        /*
         * Clear the dirty directory flag. 
         */
	tif->tif_flags &= ~TIFF_DIRTYDIRECT;
	tif->tif_flags &= ~TIFF_DIRTYSTRIP;

	/*
	 * Reinitialize i/o since we are starting on a new directory.
	 */
	tif->tif_row = (uint32) -1;
	tif->tif_curstrip = (uint32) -1;
	tif->tif_col = (uint32) -1;
	tif->tif_curtile = (uint32) -1;
	tif->tif_tilesize = (tmsize_t) -1;

	tif->tif_scanlinesize = TIFFScanlineSize(tif);
	if (!tif->tif_scanlinesize) {
		TIFFErrorExt(tif->tif_clientdata, module,
		    "Cannot handle zero scanline size");
		return (0);
	}

	if (isTiled(tif)) {
		tif->tif_tilesize = TIFFTileSize(tif);
		if (!tif->tif_tilesize) {
			TIFFErrorExt(tif->tif_clientdata, module,
			     "Cannot handle zero tile size");
			return (0);
		}
	} else {
		if (!TIFFStripSize(tif)) {
			TIFFErrorExt(tif->tif_clientdata, module,
			    "Cannot handle zero strip size");
			return (0);
		}
	}
	return (1);
bad:
	if (dir)
		_TIFFfree(dir);
	return (0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
11,44
11,45
11,46
11,47
11,48
11,49
11,50
11,51
11,52
11,53
11,54
11,55
11,56
11,57
11,58
11,59
11,60
11,61
11,62
11,63
11,64
11,65
11,66
11,67
11,68
12,13
13,14
13,15
15,16
15,17
15,18
18,19
20,21
21,22
21,23
22,23
24,25
24,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
54,55
54,56
55,56
57,58
57,59
59,60
60,61
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
71,72
71,73
73,74
74,75
76,77
77,78
77,79
78,79
78,80
79,80
82,83
82,84
83,84
86,87
86,88
87,88
88,89
88,90
88,91
89,90
91,92
93,94
93,95
94,95
97,98
99,100
100,101
100,102
101,102
102,103
103,104
103,105
104,105
107,108
109,110
110,111
111,112
111,113
112,113
115,116
116,117
116,118
117,118
119,120
119,121
120,121
123,124
124,125
124,126
125,126
127,128
127,129
127,130
127,131
127,132
128,129
130,131
132,133
134,135
135,136
137,138
138,139
138,140
139,140
142,143
142,144
143,144
144,145
146,147
146,148
147,148
148,149
150,151
151,152
151,153
151,154
151,155
152,153
154,155
156,157
158,159
160,161
160,162
160,163
161,162
162,163
162,164
163,164
165,166
165,167
168,169
169,170
169,171
170,171
172,173
174,175
174,176
174,177
174,178
175,176
176,177
176,178
177,178
177,179
178,179
180,181
182,183
182,184
183,184
186,187
186,188
187,188
189,190
191,192
191,193
192,193
193,194
195,196
196,197
198,199
198,200
198,201
199,200
200,201
200,202
201,202
203,204
203,205
206,207
207,208
207,209
208,209
210,211
212,213
212,214
212,215
212,216
213,214
214,215
214,216
215,216
215,217
216,217
218,219
218,220
219,220
222,223
222,224
223,224
225,226
225,227
226,227
229,230
229,231
230,231
232,233
234,235
234,236
235,236
236,237
238,239
239,240
241,242
242,243
242,244
243,244
243,245
244,245
244,246
245,246
248,249
248,250
249,250
252,253
253,254
253,255
254,255
254,256
255,256
258,259
260,261
261,262
261,263
262,263
262,264
263,264
266,267
267,268
269,270
270,271
270,272
271,272
271,273
272,273
275,276
276,277
278,279
279,280
279,281
280,281
282,283
284,285
285,286
285,287
286,287
288,289
290,291
291,292
291,293
291,294
291,295
292,293
294,295
296,297
298,299
300,301
301,302
301,303
302,303
304,305
304,306
304,307
304,308
304,309
305,306
307,308
309,310
311,312
313,314
315,316
315,317
316,317
318,319
318,320
319,320
319,321
320,321
321,322
321,323
321,324
321,325
322,323
324,325
326,327
329,330
331,332
332,333
332,334
333,334
333,335
334,335
337,338
339,340
340,341
340,342
341,342
343,344
343,345
343,346
343,347
343,348
344,345
346,347
348,349
350,351
352,353
354,355
354,356
354,357
355,356
357,358
357,359
357,360
357,361
357,362
357,363
357,364
358,359
359,360
359,361
360,361
362,363
364,365
365,366
365,367
366,367
368,369
370,371
371,372
371,373
372,373
374,375
374,376
374,377
374,378
375,376
377,378
379,380
381,382
382,383
384,385
384,386
385,386
385,387
386,387
388,389
390,391
391,392
391,393
392,393
394,395
394,396
394,397
394,398
395,396
397,398
399,400
401,402
402,403
404,405
404,406
405,406
405,407
406,407
408,409
410,411
410,412
411,412
412,413
412,414
412,415
412,416
412,417
412,418
413,414
415,416
417,418
419,420
423,424
425,426
425,427
426,427
427,428
427,429
427,430
427,431
428,429
430,431
432,433
434,435
436,437
438,439
439,440
439,441
440,441
440,442
441,442
444,445
446,447
447,448
447,449
448,449
449,450
449,451
449,452
449,453
450,451
452,453
454,455
456,457
458,459
460,461
460,462
460,463
460,464
461,462
462,463
462,464
463,464
463,465
464,465
467,468
467,469
468,469
470,471
472,473
472,474
473,474
475,476
477,478
477,479
478,479
479,480
481,482
482,483
484,485
484,486
485,486
485,487
486,487
486,488
487,488
487,489
488,489
491,492
493,494
493,495
494,495
495,496
495,497
495,498
495,499
496,497
498,499
500,501
500,502
501,502
504,505
505,506
507,508
507,509
508,509
508,510
509,510
511,512
513,514
513,515
514,515
515,516
515,517
515,518
515,519
515,520
515,521
516,517
518,519
518,520
519,520
522,523
525,526
525,527
526,527
529,530
529,531
530,531
533,534
533,535
533,536
534,535
535,536
535,537
535,538
535,539
536,537
538,539
540,541
540,542
540,543
540,544
541,542
543,544
545,546
545,547
546,547
549,550
549,551
550,551
550,552
551,552
554,555
554,556
555,556
559,560
559,561
560,561
561,562
561,563
561,564
561,565
561,566
561,567
562,563
564,565
564,566
565,566
568,569
571,572
571,573
572,573
575,576
575,577
576,577
579,580
580,581
580,582
581,582
581,583
582,583
585,586
587,588
587,589
588,589
589,590
589,591
589,592
589,593
590,591
592,593
594,595
594,596
595,596
598,599
599,600
601,602
602,603
602,604
603,604
605,606
605,607
606,607
608,609
610,611
610,612
611,612
611,613
612,613
612,614
613,614
616,617
618,619
618,620
619,620
620,621
620,622
621,622
623,624
623,625
624,625
624,626
625,626
628,629
630,631
630,632
630,633
631,632
631,633
632,633
632,634
633,634
636,637
638,639
639,640
639,641
640,641
640,642
641,642
644,645
646,647
647,648
647,649
648,649
648,650
649,650
652,653
652,654
652,655
652,656
652,657
652,658
652,659
652,660
652,661
652,662
652,663
652,664
652,665
652,666
652,667
652,668
652,669
652,670
652,671
652,672
652,673
653,654
654,655
656,657
657,658
659,660
660,661
662,663
663,664
665,666
666,667
666,668
666,669
667,668
669,670
671,672
671,673
672,673
676,677
677,678
679,680
680,681
682,683
683,684
685,686
686,687
688,689
689,690
691,692
692,693
694,695
695,696
697,698
698,699
700,701
701,702
703,704
703,705
704,705
705,706
705,707
705,708
705,709
706,707
708,709
710,711
713,714
715,716
716,717
716,718
717,718
717,719
718,719
721,722
725,726
725,727
726,727
727,728
727,729
727,730
728,729
730,731
732,733
732,734
733,734
736,737
737,738
737,739
738,739
738,740
739,740
742,743
745,746
745,747
746,747
746,748
747,748
748,749
748,750
749,750
749,751
750,751
750,752
751,752
755,756
757,758
758,759
758,760
759,760
759,761
760,761
760,762
761,762
765,766
767,768
767,769
767,770
768,769
768,770
769,770
770,771
770,772
771,772
773,774
775,776
777,778
778,779
778,780
779,780
781,782
781,783
781,784
781,785
781,786
782,783
784,785
786,787
788,789
790,791
792,793
792,794
793,794
793,795
794,795
795,796
795,797
796,797
799,800
800,801
800,802
801,802
801,803
802,803
806,807
806,808
807,808
808,809
808,810
809,810
811,812
811,813
811,814
811,815
811,816
812,813
814,815
816,817
818,819
820,821
822,823
822,824
823,824
823,825
824,825
825,826
825,827
826,827
829,830
830,831
830,832
831,832
831,833
832,833
836,837
836,838
837,838
838,839
838,840
839,840
839,841
840,841
840,842
841,842
845,846
847,848
848,849
848,850
848,851
848,852
849,850
851,852
851,853
852,853
855,856
858,859
858,860
859,860
860,861
860,862
860,863
861,862
863,864
865,866
867,868
867,869
868,869
869,870
869,871
869,872
870,871
872,873
875,876
877,878
877,879
877,880
878,879
879,880
879,881
879,882
880,881
882,883
884,885
886,887
886,888
886,889
886,890
886,891
887,888
888,889
888,890
889,890
889,891
890,891
890,892
891,892
895,896
895,897
896,897
898,899
900,901
901,902
901,903
902,903
902,904
903,904
903,905
904,905
908,909
908,910
909,910
909,911
910,911
914,915
915,916
915,917
916,917
916,918
917,918
917,919
918,919
922,923
922,924
923,924
923,925
924,925
928,929
929,930
929,931
930,931
930,932
931,932
931,933
932,933
936,937
936,938
937,938
937,939
938,939
942,943
943,944
943,945
944,945
944,946
945,946
948,949
949,950
951,952
951,953
952,953
953,954
953,955
954,955
954,956
955,956
955,957
956,957
960,961
960,962
961,962
963,964
965,966
966,967
966,968
967,968
967,969
968,969
971,972
973,974
973,975
974,975
975,976
975,977
976,977
976,978
977,978
981,982
981,983
982,983
983,984
983,985
983,986
983,987
983,988
984,985
986,987
986,988
987,988
990,991
993,994
993,995
993,996
994,995
994,996
995,996
997,998
1001,1002
1003,1004
1004,1005
1004,1006
1005,1006
1005,1007
1006,1007
1006,1008
1007,1008
1011,1012
1011,1013
1012,1013
1012,1014
1013,1014
1017,1018
1017,1019
1018,1019
1018,1020
1019,1020
1019,1021
1020,1021
1020,1022
1021,1022
1025,1026
1027,1028
1028,1029
1028,1030
1029,1030
1029,1031
1030,1031
1030,1032
1031,1032
1035,1036
1035,1037
1036,1037
1036,1038
1037,1038
1041,1042
1041,1043
1042,1043
1043,1044
1043,1045
1043,1046
1044,1045
1046,1047
1048,1049
1050,1051
1051,1052
1051,1053
1052,1053
1053,1054
1053,1055
1053,1056
1054,1055
1056,1057
1058,1059
1058,1060
1058,1061
1059,1060
1059,1061
1060,1061
1062,1063
1066,1067
1068,1069
1068,1070
1068,1071
1068,1072
1069,1070
1070,1071
1070,1072
1071,1072
1071,1073
1072,1073
1075,1076
1075,1077
1076,1077
1078,1079
1080,1081
1080,1082
1081,1082
1083,1084
1085,1086
1085,1087
1086,1087
1087,1088
1089,1090
1090,1091
1092,1093
1093,1094
1093,1095
1094,1095
1094,1096
1095,1096
1098,1099
1098,1100
1098,1101
1098,1102
1098,1103
1098,1104
1098,1105
1098,1106
1098,1107
1098,1108
1098,1109
1098,1110
1098,1111
1098,1112
1098,1113
1098,1114
1098,1115
1098,1116
1098,1117
1098,1118
1098,1119
1098,1120
1098,1121
1098,1122
1098,1123
1098,1124
1098,1125
1098,1126
1098,1127
1098,1128
1098,1129
1098,1130
1098,1131
1099,1100
1100,1101
1103,1104
1104,1105
1106,1107
1107,1108
1109,1110
1110,1111
1112,1113
1113,1114
1115,1116
1116,1117
1118,1119
1118,1120
1118,1121
1118,1122
1118,1123
1118,1124
1118,1125
1119,1120
1120,1121
1120,1122
1121,1122
1123,1124
1125,1126
1126,1127
1126,1128
1127,1128
1129,1130
1131,1132
1132,1133
1132,1134
1133,1134
1135,1136
1135,1137
1135,1138
1135,1139
1136,1137
1138,1139
1140,1141
1142,1143
1143,1144
1145,1146
1145,1147
1146,1147
1146,1148
1147,1148
1149,1150
1151,1152
1152,1153
1152,1154
1153,1154
1155,1156
1155,1157
1155,1158
1155,1159
1156,1157
1158,1159
1160,1161
1162,1163
1163,1164
1165,1166
1165,1167
1166,1167
1166,1168
1167,1168
1169,1170
1171,1172
1171,1173
1171,1174
1172,1173
1173,1174
1173,1175
1174,1175
1176,1177
1176,1178
1176,1179
1177,1178
1179,1180
1181,1182
1181,1183
1182,1183
1185,1186
1186,1187
1186,1188
1186,1189
1186,1190
1186,1191
1186,1192
1187,1188
1189,1190
1191,1192
1193,1194
1195,1196
1195,1197
1195,1198
1196,1197
1198,1199
1198,1200
1199,1200
1204,1205
1206,1207
1206,1208
1207,1208
1208,1209
1208,1210
1208,1211
1208,1212
1209,1210
1211,1212
1213,1214
1213,1215
1214,1215
1217,1218
1219,1220
1221,1222
1221,1223
1222,1223
1222,1224
1223,1224
1223,1225
1224,1225
1227,1228
1229,1230
1230,1231
1230,1232
1231,1232
1233,1234
1236,1237
1237,1238
1239,1240
1240,1241
1242,1243
1242,1244
1242,1245
1242,1246
1242,1247
1242,1248
1242,1249
1242,1250
1242,1251
1242,1252
1242,1253
1242,1254
1243,1244
1244,1245
1244,1246
1246,1247
1246,1248
1246,1249
1249,1250
1250,1251
1252,1253
1253,1254
1253,1255
1254,1255
1256,1257
1258,1259
1259,1260
1259,1261
1260,1261
1262,1263
1264,1265
1265,1266
1265,1267
1267,1268
1269,1270
1269,1271
1269,1272
1270,1271
1270,1272
1271,1272
1271,1273
1272,1273
1275,1276
1275,1277
1276,1277
1276,1278
1277,1278
1280,1281
1280,1282
1281,1282
1281,1283
1282,1283
1286,1287
1287,1288
1287,1289
1288,1289
1290,1291
1292,1293
1293,1294
1293,1295
1294,1295
1296,1297
1296,1298
1296,1299
1296,1300
1297,1298
1299,1300
1301,1302
1303,1304
1304,1305
1306,1307
1306,1308
1307,1308
1307,1309
1308,1309
1310,1311
1312,1313
1312,1314
1312,1315
1313,1314
1314,1315
1314,1316
1315,1316
1317,1318
1317,1319
1317,1320
1318,1319
1320,1321
1322,1323
1322,1324
1323,1324
1326,1327
1327,1328
1327,1329
1327,1330
1327,1331
1327,1332
1327,1333
1328,1329
1330,1331
1332,1333
1334,1335
1336,1337
1336,1338
1336,1339
1337,1338
1339,1340
1339,1341
1340,1341
1345,1346
1347,1348
1348,1349
1348,1350
1349,1350
1351,1352
1351,1353
1352,1353
1355,1356
1356,1357
1356,1358
1357,1358
1357,1359
1358,1359
1361,1362
1363,1364
1364,1365
1364,1366
1365,1366
1367,1368
1367,1369
1367,1370
1367,1371
1368,1369
1370,1371
1372,1373
1372,1374
1373,1374
1376,1377
1378,1379
1379,1380
1379,1381
1380,1381
1380,1382
1381,1382
1384,1385
1386,1387
1387,1388
1387,1389
1388,1389
1390,1391
1392,1393
1392,1394
1393,1394
1394,1395
1396,1397
1399,1400
1400,1401
1402,1403
1403,1404
1405,1406
1405,1407
1406,1407
1406,1408
1407,1408
1407,1409
1408,1409
1408,1410
1409,1410
1413,1414
1415,1416
1415,1417
1416,1417
1417,1418
1417,1419
1417,1420
1417,1421
1418,1419
1420,1421
1420,1422
1421,1422
1424,1425
1427,1428
1429,1430
1429,1431
1430,1431
1431,1432
1431,1433
1431,1434
1431,1435
1431,1436
1432,1433
1434,1435
1436,1437
1438,1439
1438,1440
1439,1440
1439,1441
1440,1441
1444,1445
1445,1446
1445,1447
1446,1447
1446,1448
1447,1448
1451,1452
1454,1455
1455,1456
1457,1458
1458,1459
1460,1461
1460,1462
1461,1462
1461,1463
1462,1463
1462,1464
1463,1464
1463,1465
1464,1465
1468,1469
1470,1471
1470,1472
1471,1472
1472,1473
1472,1474
1472,1475
1472,1476
1473,1474
1475,1476
1475,1477
1476,1477
1479,1480
1482,1483
1484,1485
1484,1486
1485,1486
1486,1487
1486,1488
1486,1489
1486,1490
1486,1491
1487,1488
1489,1490
1491,1492
1493,1494
1493,1495
1494,1495
1494,1496
1495,1496
1499,1500
1500,1501
1500,1502
1501,1502
1501,1503
1502,1503
1506,1507
1509,1510
1510,1511
1512,1513
1513,1514
1515,1516
1515,1517
1515,1518
1515,1519
1515,1520
1515,1521
1515,1522
1515,1523
1515,1524
1515,1525
1515,1526
1516,1517
1517,1518
1517,1519
1518,1519
1520,1521
1522,1523
1523,1524
1523,1525
1524,1525
1526,1527
1528,1529
1529,1530
1529,1531
1530,1531
1532,1533
1534,1535
1535,1536
1535,1537
1536,1537
1538,1539
1540,1541
1541,1542
1541,1543
1542,1543
1544,1545
1544,1546
1544,1547
1547,1548
1548,1549
1550,1551
1550,1552
1551,1552
1552,1553
1554,1555
1554,1556
1554,1557
1555,1556
1556,1557
1556,1558
1557,1558
1559,1560
1559,1561
1559,1562
1560,1561
1562,1563
1564,1565
1564,1566
1565,1566
1568,1569
1569,1570
1569,1571
1569,1572
1569,1573
1569,1574
1570,1571
1572,1573
1572,1574
1573,1574
1576,1577
1579,1580
1579,1581
1579,1582
1580,1581
1582,1583
1582,1584
1583,1584
1588,1589
1588,1590
1589,1590
1589,1591
1590,1591
1590,1592
1591,1592
1591,1593
1592,1593
1597,1598
1597,1599
1597,1600
1598,1599
1599,1600
1599,1601
1600,1601
1602,1603
1602,1604
1602,1605
1603,1604
1605,1606
1607,1608
1607,1609
1608,1609
1611,1612
1612,1613
1612,1614
1612,1615
1612,1616
1612,1617
1612,1618
1613,1614
1615,1616
1615,1617
1616,1617
1619,1620
1622,1623
1622,1624
1622,1625
1623,1624
1625,1626
1625,1627
1626,1627
1630,1631
1630,1632
1631,1632
1631,1633
1632,1633
1637,1638
1638,1639
1638,1640
1639,1640
1641,1642
1642,1643
1642,1644
1644,1645
1644,1646
1645,1646
1645,1647
1646,1647
1650,1651
1650,1652
1650,1653
1651,1652
1651,1653
1652,1653
1653,1654
1653,1655
1654,1655
1654,1656
1655,1656
1658,1659
1660,1661
1661,1662
1661,1663
1662,1663
1662,1664
1663,1664
1666,1667
1666,1668
1667,1668
1667,1669
1668,1669
1671,1672
1673,1674
1673,1675
1674,1675
1675,1676
1675,1677
1676,1677
1678,1679
1680,1681
1681,1682
1681,1683
1682,1683
1685,1686
1685,1687
1686,1687
1687,1688
1687,1689
1688,1689
1690,1691
1690,1692
1692,1693
1694,1695
1695,1696
1695,1697
1696,1697
1698,1699
1700,1701
1700,1702
1700,1703
1701,1702
1701,1703
1702,1703
1702,1704
1703,1704
1706,1707
1706,1708
1707,1708
1707,1709
1708,1709
1711,1712
1713,1714
1714,1715
1714,1716
1715,1716
1717,1718
1719,1720
1720,1721
1720,1722
1721,1722
1723,1724
1723,1725
1723,1726
1723,1727
1724,1725
1726,1727
1728,1729
1730,1731
1731,1732
1733,1734
1733,1735
1733,1736
1734,1735
1734,1736
1735,1736
1737,1738
1739,1740
1739,1741
1740,1741
1741,1742
1741,1743
1742,1743
1744,1745
1744,1746
1744,1747
1745,1746
1747,1748
1749,1750
1749,1751
1750,1751
1753,1754
1754,1755
1754,1756
1754,1757
1754,1758
1754,1759
1754,1760
1755,1756
1757,1758
1759,1760
1761,1762
1763,1764
1763,1765
1763,1766
1764,1765
1766,1767
1766,1768
1767,1768
1772,1773
1772,1774
1773,1774
1774,1775
1774,1776
1774,1777
1774,1778
1774,1779
1774,1780
1775,1776
1777,1778
1779,1780
1779,1781
1780,1781
1783,1784
1785,1786
1785,1787
1786,1787
1788,1789
1790,1791
1790,1792
1791,1792
1793,1794
1793,1795
1795,1796
1797,1798
1798,1799
1798,1800
1799,1800
1801,1802
1804,1805
1805,1806
1807,1808
1807,1809
1807,1810
1808,1809
1809,1810
1809,1811
1810,1811
1812,1813
1814,1815
1815,1816
1815,1817
1816,1817
1818,1819
1820,1821
1820,1822
1821,1822
1821,1823
1822,1823
1822,1824
1822,1825
1822,1826
1823,1824
1825,1826
1827,1828
1829,1830
1830,1831
1832,1833
1834,1835
1834,1836
1835,1836
1835,1837
1836,1837
1838,1839
1838,1840
1838,1841
1838,1842
1838,1843
1838,1844
1838,1845
1838,1846
1838,1847
1839,1840
1840,1841
1842,1843
1843,1844
1843,1845
1844,1845
1846,1847
1849,1850
1850,1851
1852,1853
1853,1854
1853,1855
1854,1855
1856,1857
1860,1861
1861,1862
1861,1863
1862,1863
1866,1867
1866,1868
1867,1868
1867,1869
1868,1869
1871,1872
1872,1873
1872,1874
1872,1875
1872,1876
1873,1874
1875,1876
1877,1878
1879,1880
1883,1884
1884,1885
1884,1886
1885,1886
1885,1887
1888,1889
1888,1890
1888,1891
1888,1892
1889,1890
1891,1892
1893,1894
1895,1896
1898,1899
1898,1900
1899,1900
1899,1901
1900,1901
1900,1902
1901,1902
1901,1903
1902,1903
1906,1907
1908,1909
1908,1910
1908,1911
1909,1910
1909,1911
1909,1912
1910,1911
1911,1912
1911,1913
1911,1914
1912,1913
1914,1915
1916,1917
1918,1919
1918,1920
1919,1920
1920,1921
1920,1922
1920,1923
1920,1924
1921,1922
1923,1924
1923,1925
1924,1925
1927,1928
1930,1931
1930,1932
1931,1932
1932,1933
1932,1934
1932,1935
1932,1936
1933,1934
1935,1936
1937,1938
1939,1940
1941,1942
1943,1944
1943,1945
1944,1945
1944,1946
1945,1946
1945,1947
1946,1947
1946,1948
1947,1948
1951,1952
1953,1954
1953,1955
1954,1955
1955,1956
1955,1957
1956,1957
1956,1958
1957,1958
1957,1959
1958,1959
1962,1963
1964,1965
1965,1966
1965,1967
1965,1968
1965,1969
1966,1967
1968,1969
1968,1970
1969,1970
1972,1973
1975,1976
1975,1977
1976,1977
1977,1978
1977,1979
1977,1980
1978,1979
1980,1981
1982,1983
1984,1985
1984,1986
1985,1986
1986,1987
1986,1988
1986,1989
1986,1990
1987,1988
1989,1990
1989,1991
1990,1991
1993,1994
1996,1997
1996,1998
1997,1998
1998,1999
1998,2000
1998,2001
1998,2002
1999,2000
2001,2002
2003,2004
2006,2007
2008,2009
2008,2010
2009,2010
2010,2011
2010,2012
2010,2013
2011,2012
2013,2014
2015,2016
2017,2018
2017,2019
2018,2019
2018,2020
2019,2020
2019,2021
2020,2021
2020,2022
2021,2022
2021,2023
2022,2023
2026,2027
2028,2029
2028,2030
2029,2030
2030,2031
2030,2032
2030,2033
2030,2034
2031,2032
2033,2034
2033,2035
2034,2035
2037,2038
2040,2041
2040,2042
2041,2042
2042,2043
2042,2044
2042,2045
2042,2046
2043,2044
2045,2046
2047,2048
2050,2051
2052,2053
2052,2054
2052,2055
2053,2054
2053,2055
2054,2055
2054,2056
2055,2056
2055,2057
2056,2057
2060,2061
2062,2063
2062,2064
2063,2064
2064,2065
2064,2066
2064,2067
2064,2068
2065,2066
2067,2068
2067,2069
2068,2069
2071,2072
2074,2075
2074,2076
2075,2076
2076,2077
2076,2078
2076,2079
2076,2080
2077,2078
2079,2080
2081,2082
2084,2085
2086,2087
2086,2088
2087,2088
2087,2089
2088,2089
2089,2090
2089,2091
2090,2091
2090,2092
2091,2092
2091,2093
2092,2093
2096,2097
2098,2099
2099,2100
2099,2101
2100,2101
2100,2102
2101,2102
2101,2103
2102,2103
2106,2107
2108,2109
2109,2110
2109,2111
2110,2111
2111,2112
2111,2113
2111,2114
2111,2115
2112,2113
2114,2115
2116,2117
2119,2120
2121,2122
2121,2123
2122,2123
2122,2124
2123,2124
2123,2125
2124,2125
2124,2126
2125,2126
2125,2127
2126,2127
2130,2131
2132,2133
2133,2134
2133,2135
2133,2136
2134,2135
2136,2137
2138,2139
2140,2141
2141,2142
2141,2143
2141,2144
2142,2143
2142,2144
2143,2144
2143,2145
2144,2145
2144,2146
2145,2146
2145,2147
2146,2147
2151,2152
2151,2153
2152,2153
2152,2154
2153,2154
2153,2155
2154,2155
2159,2160
2160,2161
2160,2162
2161,2162
2161,2163
2162,2163
2162,2164
2163,2164
2167,2168
2169,2170
2169,2171
2169,2172
2170,2171
2170,2172
2171,2172
2171,2173
2172,2173
2172,2174
2173,2174
2178,2179
2179,2180
2179,2181
2180,2181
2180,2182
2181,2182
2181,2183
2182,2183
2186,2187
2188,2189
2188,2190
2189,2190
2190,2191
2190,2192
2190,2193
2191,2192
2193,2194
2196,2197
2198,2199
2198,2200
2199,2200
2199,2201
2200,2201
2200,2202
2201,2202
2201,2203
2202,2203
2206,2207
2208,2209
2209,2210
2209,2211
2209,2212
2210,2211
2211,2212
2211,2213
2211,2214
2212,2213
2214,2215
2216,2217
2218,2219
2218,2220
2218,2221
2219,2220
2219,2221
2220,2221
2220,2222
2221,2222
2222,2223
2222,2224
2223,2224
2223,2225
2224,2225
2224,2226
2225,2226
2225,2227
2226,2227
2230,2231
2232,2233
2232,2234
2233,2234
2233,2235
2234,2235
2234,2236
2235,2236
2240,2241
2241,2242
2241,2243
2242,2243
2242,2244
2243,2244
2243,2245
2244,2245
2244,2246
2245,2246
2249,2250
2251,2252
2251,2253
2252,2253
2252,2254
2253,2254
2253,2255
2254,2255
2258,2259
2258,2260
2259,2260
2259,2261
2260,2261
2263,2264
2263,2265
2264,2265
2264,2266
2265,2266
2269,2270
2269,2271
2270,2271
2271,2272
2271,2273
2271,2274
2272,2273
2274,2275
2277,2278
2279,2280
2280,2281
2280,2282
2280,2283
2280,2284
2281,2282
2283,2284
2283,2285
2284,2285
2287,2288
2290,2291
2290,2292
2291,2292
2291,2293
2292,2293
2292,2294
2292,2295
2292,2296
2293,2294
2295,2296
2297,2298
2299,2300
2302,2303
2304,2305
2304,2306
2304,2307
2305,2306
2305,2307
2306,2307
2306,2308
2307,2308
2307,2309
2308,2309
2308,2310
2309,2310
2309,2311
2310,2311
2310,2312
2311,2312
2311,2313
2312,2313
2317,2318
2318,2319
2319,2320
2319,2321
2320,2321
2320,2322
2321,2322
2324,2325
2326,2327
2326,2328
2327,2328
2329,2330
2331,2332
2331,2333
2332,2333
2332,2334
2333,2334
2333,2335
2334,2335
2334,2336
2335,2336
2341,2342
2342,2343
2342,2344
2343,2344
2343,2345
2344,2345
2345,2346
2345,2347
2346,2347
2346,2348
2347,2348
2347,2349
2348,2349
2348,2350
2349,2350
2349,2351
2350,2351
2356,2357
2356,2358
2357,2358
2357,2359
2358,2359
2358,2360
2359,2360
2359,2361
2360,2361
2366,2367
2367,2368
2367,2369
2368,2369
2368,2370
2369,2370
2369,2371
2370,2371
2370,2372
2371,2372
2375,2376
2377,2378
2378,2379
2378,2380
2379,2380
2379,2381
2380,2381
2380,2382
2381,2382
2381,2383
2382,2383
2382,2384
2383,2384
2388,2389
2388,2390
2389,2390
2391,2392
2393,2394
2393,2395
2394,2395
2394,2396
2395,2396
2395,2397
2396,2397
2396,2398
2397,2398
2402,2403
2402,2404
2403,2404
2403,2405
2404,2405
2406,2407
2408,2409
2408,2410
2409,2410
2409,2411
2410,2411
2410,2412
2411,2412
2416,2417
2417,2418
2417,2419
2418,2419
2418,2420
2419,2420
2419,2421
2420,2421
2420,2422
2421,2422
2424,2425
2426,2427
2426,2428
2427,2428
2427,2429
2428,2429
2428,2430
2429,2430
2433,2434
2435,2436
2435,2437
2436,2437
2436,2438
2437,2438
2437,2439
2438,2439
2438,2440
2439,2440
2444,2445
2444,2446
2445,2446
2445,2447
2446,2447
2448,2449
2450,2451
2450,2452
2451,2452
2451,2453
2452,2453
2456,2457
2456,2458
2457,2458
2458,2459
2458,2460
2458,2461
2458,2462
2459,2460
2461,2462
2461,2463
2462,2463
2465,2466
2468,2469
2468,2470
2469,2470
2469,2471
2470,2471
2470,2472
2470,2473
2470,2474
2471,2472
2473,2474
2475,2476
2477,2478
2480,2481
2482,2483
2482,2484
2483,2484
2483,2485
2484,2485
2484,2486
2485,2486
2485,2487
2486,2487
2486,2488
2487,2488
2487,2489
2488,2489
2488,2490
2489,2490
2489,2491
2490,2491
2490,2492
2491,2492
2495,2496
2497,2498
2497,2499
2498,2499
2498,2500
2499,2500
2499,2501
2500,2501
2505,2506
2505,2507
2506,2507
2506,2508
2507,2508
2507,2509
2508,2509
2512,2513
2514,2515
2514,2516
2515,2516
2515,2517
2516,2517
2516,2518
2517,2518
2517,2519
2518,2519
2523,2524
2523,2525
2524,2525
2524,2526
2525,2526
2525,2527
2526,2527
2531,2532
2531,2533
2532,2533
2532,2534
2533,2534
2533,2535
2534,2535
2534,2536
2535,2536
2541,2542
2541,2543
2542,2543
2542,2544
2543,2544
2543,2545
2544,2545
2544,2546
2545,2546
2551,2552
2551,2553
2552,2553
2553,2554
2553,2555
2553,2556
2553,2557
2554,2555
2556,2557
2556,2558
2557,2558
2560,2561
2563,2564
2563,2565
2564,2565
2564,2566
2565,2566
2565,2567
2565,2568
2565,2569
2566,2567
2568,2569
2570,2571
2572,2573
2575,2576
2577,2578
2577,2579
2578,2579
2580,2581
2580,2582
2581,2582
2582,2583
2582,2584
2583,2584
2585,2586
2587,2588
2588,2589
2588,2590
2589,2590
2591,2592
2593,2594
2593,2595
2594,2595
2595,2596
2595,2597
2595,2598
2596,2597
2598,2599
2600,2601
2602,2603
2603,2604
2603,2605
2603,2606
2604,2605
2604,2606
2605,2606
2605,2607
2606,2607
2606,2608
2607,2608
2612,2613
2613,2614
2613,2615
2614,2615
2614,2616
2615,2616
2615,2617
2616,2617
2621,2622
2622,2623
2622,2624
2623,2624
2623,2625
2624,2625
2624,2626
2625,2626
2629,2630
2629,2631
2630,2631
2631,2632
2633,2634
2633,2635
2634,2635
2635,2636
2635,2637
2637,2638
2637,2639
2638,2639
2638,2640
2639,2640
2644,2645
2644,2646
2645,2646
2645,2647
2646,2647
2646,2648
2647,2648
2647,2649
2648,2649
2653,2654
2653,2655
2653,2656
2654,2655
2655,2656
2655,2657
2656,2657
2658,2659
2660,2661
2661,2662
2661,2663
2662,2663
2662,2664
2663,2664
2663,2665
2664,2665
2669,2670
2669,2671
2669,2672
2669,2673
2670,2671
2671,2672
2671,2673
2672,2673
2675,2676
2675,2677
2676,2677
2678,2679
2678,2680
2679,2680
2679,2681
2680,2681
2684,2685
2685,2686
2687,2688
2688,2689
2688,2690
2689,2690
2689,2691
2690,2691
2690,2692
2691,2692
2691,2693
2692,2693
2692,2694
2693,2694
2697,2698
2697,2699
2698,2699
2701,2702
2701,2703
2702,2703
2702,2704
2703,2704
2703,2705
2704,2705
2708,2709
2710,2711
2710,2712
2711,2712
2712,2713
2712,2714
2713,2714
2713,2715
2714,2715
2714,2716
2715,2716
2721,2722
2722,2723
2722,2724
2723,2724
2724,2725
2725,2726
2725,2727
2726,2727
2729,2730
2731,2732
2731,2733
2732,2733
2732,2734
2733,2734
2733,2735
2734,2735
2734,2736
2735,2736
2736,2737
2736,2738
2737,2738
2737,2739
2738,2739
2738,2740
2739,2740
2743,2744
2745,2746
2746,2747
2746,2748
2747,2748
2747,2749
2748,2749
2748,2750
2749,2750
2754,2755
2755,2756
2755,2757
2756,2757
2756,2758
2757,2758
2757,2759
2758,2759
2762,2763
2764,2765
2765,2766
2765,2767
2766,2767
2767,2768
2767,2769
2768,2769
2768,2770
2769,2770
2772,2773
2773,2774
2773,2775
2774,2775
2776,2777
2778,2779
2780,2781
2780,2782
2781,2782
2781,2783
2782,2783
2782,2784
2783,2784
2784,2785
2784,2786
2785,2786
2787,2788
2789,2790
2790,2791
2790,2792
2791,2792
2791,2793
2792,2793
2796,2797
2798,2799
2799,2800
2799,2801
2800,2801
2802,2803
2804,2805
2805,2806
2805,2807
2806,2807
2806,2808
2807,2808
2810,2811
2811,2812
2813,2814
2814,2815
2814,2816
2815,2816
2815,2817
2816,2817
2819,2820
2820,2821
2822,2823
2823,2824
2823,2825
2824,2825
2824,2826
2825,2826
2828,2829
2828,2830
2829,2830
2830,2831
2833,2834
2834,2835
2834,2836
2835,2836
2835,2837
2836,2837
2839,2840
2839,2841
2840,2841
2841,2842
2844,2845
2845,2846
2845,2847
2846,2847
2846,2848
2847,2848
2850,2851
2850,2852
2851,2852
2852,2853
2855,2856
2856,2857
2856,2858
2857,2858
2857,2859
2858,2859
2861,2862
2861,2863
2862,2863
2863,2864
2866,2867
2867,2868
2867,2869
2868,2869
2868,2870
2869,2870
2872,2873
2872,2874
2873,2874
2874,2875
2877,2878
2878,2879
2878,2880
2879,2880
2879,2881
2880,2881
2883,2884
2883,2885
2884,2885
2886,2887
2888,2889
2888,2890
2889,2890
2890,2891
2890,2892
2891,2892
2894,2895
2894,2896
2895,2896
2896,2897
2896,2898
2896,2899
2896,2900
2897,2898
2899,2900
2899,2901
2900,2901
2903,2904
2906,2907
2907,2908
2909,2910
2909,2911
2909,2912
2910,2911
2910,2912
2911,2912
2913,2914
2915,2916
2915,2917
2916,2917
2917,2918
2917,2919
2918,2919
2918,2920
2919,2920
2922,2923
2922,2924
2923,2924
2925,2926
2927,2928
2927,2929
2928,2929
2929,2930
2929,2931
2930,2931
2933,2934
2933,2935
2934,2935
2935,2936
2935,2937
2935,2938
2935,2939
2936,2937
2938,2939
2938,2940
2939,2940
2942,2943
2945,2946
2946,2947
2948,2949
2949,2950
2949,2951
2950,2951
2951,2952
2951,2953
2952,2953
2954,2955
2956,2957
2956,2958
2957,2958
2958,2959
2958,2960
2958,2961
2958,2962
2959,2960
2961,2962
2961,2963
2962,2963
2965,2966
2968,2969
2969,2970
2971,2972
2972,2973
2974,2975
2974,2976
2976,2977
2976,2978
2977,2978
2979,2980
2980,2981
2980,2982
2981,2982
2983,2984
2985,2986
2986,2987
-----nextToken-----
2,4,7,9,10,14,16,17,19,23,25,26,30,32,36,38,39,43,45,49,51,52,56,58,61,65,67,70,72,75,80,81,84,85,90,92,95,96,98,105,106,108,113,114,118,121,122,126,129,131,133,136,140,141,145,149,153,155,157,159,164,166,167,171,173,179,181,184,185,188,190,194,197,202,204,205,209,211,217,220,221,224,227,228,231,233,237,240,246,247,250,251,256,257,259,264,265,268,273,274,277,281,283,287,289,293,295,297,299,303,306,308,310,312,314,317,323,325,327,328,330,335,336,338,342,345,347,349,351,353,356,361,363,367,369,373,376,378,380,383,387,389,393,396,398,400,403,407,409,414,416,418,420,421,422,424,429,431,433,435,437,442,443,445,451,453,455,457,459,465,466,469,471,474,476,480,483,489,490,492,497,499,502,503,506,510,512,517,520,521,523,524,527,528,531,532,537,539,542,544,547,548,552,553,556,557,558,563,566,567,569,570,573,574,577,578,583,584,586,591,593,596,597,600,604,607,609,614,615,617,622,626,627,629,634,635,637,642,643,645,650,651,655,658,661,664,668,670,673,674,675,678,681,684,687,690,693,696,699,702,707,709,711,712,714,719,720,722,723,724,729,731,734,735,740,741,743,744,752,753,754,756,762,763,764,766,772,774,776,780,783,785,787,789,791,797,798,803,804,805,810,813,815,817,819,821,827,828,833,834,835,842,843,844,846,850,853,854,856,857,862,864,866,871,873,874,876,881,883,885,892,893,894,897,899,905,906,907,911,912,913,919,920,921,925,926,927,933,934,935,939,940,941,946,947,950,957,958,959,962,964,969,970,972,978,979,980,985,988,989,991,992,996,998,999,1000,1002,1008,1009,1010,1014,1015,1016,1022,1023,1024,1026,1032,1033,1034,1038,1039,1040,1045,1047,1049,1055,1057,1061,1063,1064,1065,1067,1073,1074,1077,1079,1082,1084,1088,1091,1096,1097,1101,1102,1105,1108,1111,1114,1117,1122,1124,1128,1130,1134,1137,1139,1141,1144,1148,1150,1154,1157,1159,1161,1164,1168,1170,1175,1178,1180,1183,1184,1188,1190,1192,1194,1197,1200,1201,1202,1203,1205,1210,1212,1215,1216,1218,1220,1225,1226,1228,1232,1234,1235,1238,1241,1245,1247,1248,1251,1255,1257,1261,1263,1266,1268,1273,1274,1278,1279,1283,1284,1285,1289,1291,1295,1298,1300,1302,1305,1309,1311,1316,1319,1321,1324,1325,1329,1331,1333,1335,1338,1341,1342,1343,1344,1346,1350,1353,1354,1359,1360,1362,1366,1369,1371,1374,1375,1377,1382,1383,1385,1389,1391,1395,1397,1398,1401,1404,1410,1411,1412,1414,1419,1422,1423,1425,1426,1428,1433,1435,1437,1441,1442,1443,1448,1449,1450,1452,1453,1456,1459,1465,1466,1467,1469,1474,1477,1478,1480,1481,1483,1488,1490,1492,1496,1497,1498,1503,1504,1505,1507,1508,1511,1514,1519,1521,1525,1527,1531,1533,1537,1539,1543,1545,1546,1549,1553,1558,1561,1563,1566,1567,1571,1574,1575,1577,1578,1581,1584,1585,1586,1587,1593,1594,1595,1596,1601,1604,1606,1609,1610,1614,1617,1618,1620,1621,1624,1627,1628,1629,1633,1634,1635,1636,1640,1643,1647,1648,1649,1656,1657,1659,1664,1665,1669,1670,1672,1677,1679,1683,1684,1689,1691,1693,1697,1699,1704,1705,1709,1710,1712,1716,1718,1722,1725,1727,1729,1732,1736,1738,1743,1746,1748,1751,1752,1756,1758,1760,1762,1765,1768,1769,1770,1771,1776,1778,1781,1782,1784,1787,1789,1792,1794,1796,1800,1802,1803,1806,1811,1813,1817,1819,1824,1826,1828,1831,1833,1837,1841,1845,1847,1848,1851,1855,1857,1858,1859,1863,1864,1865,1869,1870,1874,1876,1878,1880,1881,1882,1886,1887,1890,1892,1894,1896,1897,1903,1904,1905,1907,1913,1915,1917,1922,1925,1926,1928,1929,1934,1936,1938,1940,1942,1948,1949,1950,1952,1959,1960,1961,1963,1967,1970,1971,1973,1974,1979,1981,1983,1988,1991,1992,1994,1995,2000,2002,2004,2005,2007,2012,2014,2016,2023,2024,2025,2027,2032,2035,2036,2038,2039,2044,2046,2048,2049,2051,2057,2058,2059,2061,2066,2069,2070,2072,2073,2078,2080,2082,2083,2085,2093,2094,2095,2097,2103,2104,2105,2107,2113,2115,2117,2118,2120,2127,2128,2129,2131,2135,2137,2139,2147,2148,2149,2150,2155,2156,2157,2158,2164,2165,2166,2168,2174,2175,2176,2177,2183,2184,2185,2187,2192,2194,2195,2197,2203,2204,2205,2207,2213,2215,2217,2227,2228,2229,2231,2236,2237,2238,2239,2246,2247,2248,2250,2255,2256,2257,2261,2262,2266,2267,2268,2273,2275,2276,2278,2282,2285,2286,2288,2289,2294,2296,2298,2300,2301,2303,2313,2314,2315,2316,2322,2323,2325,2328,2330,2336,2337,2338,2339,2340,2351,2352,2353,2354,2355,2361,2362,2363,2364,2365,2372,2373,2374,2376,2384,2385,2386,2387,2390,2392,2398,2399,2400,2401,2405,2407,2412,2413,2414,2415,2422,2423,2425,2430,2431,2432,2434,2440,2441,2442,2443,2447,2449,2453,2454,2455,2460,2463,2464,2466,2467,2472,2474,2476,2478,2479,2481,2492,2493,2494,2496,2501,2502,2503,2504,2509,2510,2511,2513,2519,2520,2521,2522,2527,2528,2529,2530,2536,2537,2538,2539,2540,2546,2547,2548,2549,2550,2555,2558,2559,2561,2562,2567,2569,2571,2573,2574,2576,2579,2584,2586,2590,2592,2597,2599,2601,2608,2609,2610,2611,2617,2618,2619,2620,2626,2627,2628,2632,2636,2640,2641,2642,2643,2649,2650,2651,2652,2657,2659,2665,2666,2667,2668,2673,2674,2677,2681,2682,2683,2686,2694,2695,2696,2699,2700,2705,2706,2707,2709,2716,2717,2718,2719,2720,2727,2728,2730,2740,2741,2742,2744,2750,2751,2752,2753,2759,2760,2761,2763,2770,2771,2775,2777,2779,2786,2788,2793,2794,2795,2797,2801,2803,2808,2809,2812,2817,2818,2821,2826,2827,2831,2832,2837,2838,2842,2843,2848,2849,2853,2854,2859,2860,2864,2865,2870,2871,2875,2876,2881,2882,2885,2887,2892,2893,2898,2901,2902,2904,2905,2908,2912,2914,2920,2921,2924,2926,2931,2932,2937,2940,2941,2943,2944,2947,2953,2955,2960,2963,2964,2966,2967,2970,2973,2975,2978,2982,2984,2987
-----computeFrom-----
77,78
77,79
116,117
116,118
124,125
124,126
177,178
177,179
182,183
182,184
186,187
186,188
215,216
215,217
218,219
218,220
222,223
222,224
225,226
225,227
229,230
229,231
243,244
243,245
253,254
253,255
261,262
261,263
270,271
270,272
301,302
301,303
332,333
332,334
340,341
340,342
371,372
371,373
385,386
385,387
391,392
391,393
405,406
405,407
439,440
439,441
463,464
463,465
467,468
467,469
472,473
472,474
486,487
486,488
508,509
508,510
580,581
580,582
605,606
605,607
611,612
611,613
620,621
620,622
631,632
631,633
639,640
639,641
716,717
716,718
737,738
737,739
746,747
746,748
748,749
748,750
758,759
758,760
778,779
778,780
793,794
793,795
795,796
795,797
800,801
800,802
808,809
808,810
823,824
823,825
825,826
825,827
830,831
830,832
838,839
838,840
888,889
888,890
901,902
901,903
915,916
915,917
929,930
929,931
943,944
943,945
953,954
953,955
966,967
966,968
1004,1005
1004,1006
1018,1019
1018,1020
1028,1029
1028,1030
1071,1072
1071,1073
1075,1076
1075,1077
1080,1081
1080,1082
1132,1133
1132,1134
1146,1147
1146,1148
1152,1153
1152,1154
1166,1167
1166,1168
1173,1174
1173,1175
1222,1223
1222,1224
1230,1231
1230,1232
1270,1271
1270,1272
1287,1288
1287,1289
1293,1294
1293,1295
1307,1308
1307,1309
1314,1315
1314,1316
1348,1349
1348,1350
1356,1357
1356,1358
1364,1365
1364,1366
1379,1380
1379,1381
1406,1407
1406,1408
1461,1462
1461,1463
1556,1557
1556,1558
1589,1590
1589,1591
1599,1600
1599,1601
1638,1639
1638,1640
1642,1643
1642,1644
1651,1652
1651,1653
1653,1654
1653,1655
1661,1662
1661,1663
1675,1676
1675,1677
1681,1682
1681,1683
1687,1688
1687,1689
1690,1691
1690,1692
1695,1696
1695,1697
1701,1702
1701,1703
1714,1715
1714,1716
1720,1721
1720,1722
1734,1735
1734,1736
1741,1742
1741,1743
1785,1786
1785,1787
1790,1791
1790,1792
1793,1794
1793,1795
1821,1822
1821,1823
1843,1844
1843,1845
1853,1854
1853,1855
1861,1862
1861,1863
1867,1868
1867,1869
1899,1900
1899,1901
1944,1945
1944,1946
1955,1956
1955,1957
2019,2020
2019,2021
2053,2054
2053,2055
2087,2088
2087,2089
2089,2090
2089,2091
2099,2100
2099,2101
2122,2123
2122,2124
2123,2124
2123,2125
2142,2143
2142,2144
2143,2144
2143,2145
2151,2152
2151,2153
2160,2161
2160,2162
2170,2171
2170,2172
2179,2180
2179,2181
2199,2200
2199,2201
2220,2221
2220,2222
2222,2223
2222,2224
2223,2224
2223,2225
2232,2233
2232,2234
2241,2242
2241,2243
2242,2243
2242,2244
2251,2252
2251,2253
2291,2292
2291,2293
2305,2306
2305,2307
2306,2307
2306,2308
2307,2308
2307,2309
2308,2309
2308,2310
2309,2310
2309,2311
2319,2320
2319,2321
2331,2332
2331,2333
2342,2343
2342,2344
2343,2344
2343,2345
2345,2346
2345,2347
2346,2347
2346,2348
2356,2357
2356,2358
2367,2368
2367,2369
2368,2369
2368,2370
2378,2379
2378,2380
2379,2380
2379,2381
2393,2394
2393,2395
2402,2403
2402,2404
2417,2418
2417,2419
2418,2419
2418,2420
2419,2420
2419,2421
2426,2427
2426,2428
2435,2436
2435,2437
2444,2445
2444,2446
2469,2470
2469,2471
2483,2484
2483,2485
2484,2485
2484,2486
2485,2486
2485,2487
2486,2487
2486,2488
2487,2488
2487,2489
2488,2489
2488,2490
2497,2498
2497,2499
2505,2506
2505,2507
2514,2515
2514,2516
2531,2532
2531,2533
2541,2542
2541,2543
2564,2565
2564,2566
2588,2589
2588,2590
2604,2605
2604,2606
2613,2614
2613,2615
2622,2623
2622,2624
2633,2634
2633,2635
2635,2636
2635,2637
2645,2646
2645,2647
2661,2662
2661,2663
2671,2672
2671,2673
2675,2676
2675,2677
2689,2690
2689,2691
2697,2698
2697,2699
2712,2713
2712,2714
2732,2733
2732,2734
2733,2734
2733,2735
2734,2735
2734,2736
2736,2737
2736,2738
2746,2747
2746,2748
2755,2756
2755,2757
2765,2766
2765,2767
2767,2768
2767,2769
2773,2774
2773,2775
2782,2783
2782,2784
2805,2806
2805,2807
2814,2815
2814,2816
2823,2824
2823,2825
2828,2829
2828,2830
2834,2835
2834,2836
2839,2840
2839,2841
2845,2846
2845,2847
2850,2851
2850,2852
2856,2857
2856,2858
2861,2862
2861,2863
2867,2868
2867,2869
2872,2873
2872,2874
2878,2879
2878,2880
2917,2918
2917,2919
-----guardedBy-----
251,257
250,256
387,393
407,418
490,597
489,596
492,586
510,607
512,609
615,741
614,740
617,743
762,853
763,843
764,844
804,834
803,833
1022,1038
1023,1039
1148,1154
1168,1192
1309,1333
1410,1422
1465,1477
1593,1633
1594,1634
1595,1635
1672,1679
1736,1760
1826,1876
1831,1837
1869,1880
1903,2115
1904,2104
1948,1970
1949,1960
1950,1961
2023,2046
2057,2080
2103,2115
2137,2194
2128,2184
2129,2185
2155,2164
2156,2165
2174,2183
2175,2184
2203,2569
2205,2511
2204,2547
2266,2275
2336,2474
2546,2569
2608,2617
2609,2618
2649,2716
2650,2717
2651,2683
2705,2716
2706,2717
2770,2803
2760,2794
-----guardedByNegation-----
635,674
634,673
1283,1300
1273,1302
1672,1699
1704,1729
2057,2115
2058,2104
2059,2105
2155,2194
2156,2184
2149,2176
2174,2194
2336,2569
2337,2547
2315,2503
2608,2640
2609,2641
2610,2642
-----lastLexicalUse-----
1672,1699
2057,2115
2155,2194
2156,2184
2174,2194
2336,2569
2608,2640
2609,2641
-----jump-----
1672,1699
2057,2115
2155,2194
2156,2184
2174,2194
2336,2569
2608,2640
2609,2641
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ProblemStatement;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;DefaultStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ConditionalExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;GotoStatement;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ContinueStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;LabelStatement;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
intTIFFReadDirectory(TIFF* tif){	static const char module[] = "TIFFReadDirectory";	TIFFDirEntry* dir;	uint16 dircount;	TIFFDirEntry* dp;	uint16 di;	const TIFFField* fip;	uint32 fii=FAILED_FII;        toff_t nextdiroff;    int bitspersample_read = FALSE;	tif->tif_diroff=tif->tif_nextdiroff;	if (!TIFFCheckDirOffset(tif,tif->tif_nextdiroff))		return 0;           /* last offset or bad offset (IFD looping) */	(*tif->tif_cleanup)(tif);   /* cleanup any previous compression state */	tif->tif_curdir++;        nextdiroff = tif->tif_nextdiroff;	dircount=TIFFFetchDirectory(tif,nextdiroff,&dir,&tif->tif_nextdiroff);	if (!dircount)	{		TIFFErrorExt(tif->tif_clientdata,module,		    "Failed to read directory at offset " TIFF_UINT64_FORMAT,nextdiroff);		return 0;	}	TIFFReadDirectoryCheckOrder(tif,dir,dircount);        /*         * Mark duplicates of any tag to be ignored (bugzilla 1994)         * to avoid certain pathological problems.         */	{		TIFFDirEntry* ma;		uint16 mb;		for (ma=dir, mb=0; mb<dircount; ma++, mb++)		{			TIFFDirEntry* na;			uint16 nb;			for (na=ma+1, nb=mb+1; nb<dircount; na++, nb++)			{				if (ma->tdir_tag==na->tdir_tag)					na->tdir_tag=IGNORE;			}		}	}        	tif->tif_flags &= ~TIFF_BEENWRITING;    /* reset before new dir */	tif->tif_flags &= ~TIFF_BUF4WRITE;      /* reset before new dir */	/* free any old stuff and reinit */	TIFFFreeDirectory(tif);	TIFFDefaultDirectory(tif);	/*	 * Electronic Arts writes gray-scale TIFF files	 * without a PlanarConfiguration directory entry.	 * Thus we setup a default value here, even though	 * the TIFF spec says there is no default value.	 */	TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG);	/*	 * Setup default value and then make a pass over	 * the fields to check type and tag information,	 * and to extract info required to size data	 * structures.  A second pass is made afterwards	 * to read in everything not taken in the first pass.	 * But we must process the Compression tag first	 * in order to merge in codec-private tag definitions (otherwise	 * we may get complaints about unknown tags).  However, the	 * Compression tag may be dependent on the SamplesPerPixel	 * tag value because older TIFF specs permitted Compression	 * to be written as a SamplesPerPixel-count tag entry.	 * Thus if we don't first figure out the correct SamplesPerPixel	 * tag value then we may end up ignoring the Compression tag	 * value because it has an incorrect count value (if the	 * true value of SamplesPerPixel is not 1).	 */	dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_SAMPLESPERPIXEL);	if (dp)	{		if (!TIFFFetchNormalTag(tif,dp,0))			goto bad;		dp->tdir_tag=IGNORE;	}	dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_COMPRESSION);	if (dp)	{		/*		 * The 5.0 spec says the Compression tag has one value, while		 * earlier specs say it has one value per sample.  Because of		 * this, we accept the tag if one value is supplied with either		 * count.		 */		uint16 value;		enum TIFFReadDirEntryErr err;		err=TIFFReadDirEntryShort(tif,dp,&value);		if (err==TIFFReadDirEntryErrCount)			err=TIFFReadDirEntryPersampleShort(tif,dp,&value);		if (err!=TIFFReadDirEntryErrOk)		{			TIFFReadDirEntryOutputErr(tif,err,module,"Compression",0);			goto bad;		}		if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,value))			goto bad;		dp->tdir_tag=IGNORE;	}	else	{		if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,COMPRESSION_NONE))			goto bad;	}	/*	 * First real pass over the directory.	 */	for (di=0, dp=dir; di<dircount; di++, dp++)	{		if (dp->tdir_tag!=IGNORE)		{			TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);			if (fii == FAILED_FII)			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Unknown field with tag %d (0x%x) encountered",				    dp->tdir_tag,dp->tdir_tag);                                /* the following knowingly leaks the                                    anonymous field structure */				if (!_TIFFMergeFields(tif,					_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type),					1)) {					TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag);					dp->tdir_tag=IGNORE;				} else {					TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);					assert(fii != FAILED_FII);				}			}		}		if (dp->tdir_tag!=IGNORE)		{			fip=tif->tif_fields[fii];			if (fip->field_bit==FIELD_IGNORE)				dp->tdir_tag=IGNORE;			else			{				switch (dp->tdir_tag)				{					case TIFFTAG_STRIPOFFSETS:					case TIFFTAG_STRIPBYTECOUNTS:					case TIFFTAG_TILEOFFSETS:					case TIFFTAG_TILEBYTECOUNTS:						TIFFSetFieldBit(tif,fip->field_bit);						break;					case TIFFTAG_IMAGEWIDTH:					case TIFFTAG_IMAGELENGTH:					case TIFFTAG_IMAGEDEPTH:					case TIFFTAG_TILELENGTH:					case TIFFTAG_TILEWIDTH:					case TIFFTAG_TILEDEPTH:					case TIFFTAG_PLANARCONFIG:					case TIFFTAG_ROWSPERSTRIP:					case TIFFTAG_EXTRASAMPLES:						if (!TIFFFetchNormalTag(tif,dp,0))							goto bad;						dp->tdir_tag=IGNORE;						break;                                        default:                                            if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )                                                dp->tdir_tag=IGNORE;                                            break;				}			}		}	}	/*	 * XXX: OJPEG hack.	 * If a) compression is OJPEG, b) planarconfig tag says it's separate,	 * c) strip offsets/bytecounts tag are both present and	 * d) both contain exactly one value, then we consistently find	 * that the buggy implementation of the buggy compression scheme	 * matches contig planarconfig best. So we 'fix-up' the tag here	 */	if ((tif->tif_dir.td_compression==COMPRESSION_OJPEG)&&	    (tif->tif_dir.td_planarconfig==PLANARCONFIG_SEPARATE))	{        if (!_TIFFFillStriles(tif))            goto bad;		dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_STRIPOFFSETS);		if ((dp!=0)&&(dp->tdir_count==1))		{			dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,			    TIFFTAG_STRIPBYTECOUNTS);			if ((dp!=0)&&(dp->tdir_count==1))			{				tif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG;				TIFFWarningExt(tif->tif_clientdata,module,				    "Planarconfig tag value assumed incorrect, "				    "assuming data is contig instead of chunky");			}		}	}	/*	 * Allocate directory structure and setup defaults.	 */	if (!TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))	{		MissingRequired(tif,"ImageLength");		goto bad;	}	/*	 * Setup appropriate structures (by strip or by tile)	 */	if (!TIFFFieldSet(tif, FIELD_TILEDIMENSIONS)) {		tif->tif_dir.td_nstrips = TIFFNumberOfStrips(tif);  		tif->tif_dir.td_tilewidth = tif->tif_dir.td_imagewidth;		tif->tif_dir.td_tilelength = tif->tif_dir.td_rowsperstrip;		tif->tif_dir.td_tiledepth = tif->tif_dir.td_imagedepth;		tif->tif_flags &= ~TIFF_ISTILED;	} else {		tif->tif_dir.td_nstrips = TIFFNumberOfTiles(tif);		tif->tif_flags |= TIFF_ISTILED;	}	if (!tif->tif_dir.td_nstrips) {		TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero number of %s",		    isTiled(tif) ? "tiles" : "strips");		goto bad;	}	tif->tif_dir.td_stripsperimage = tif->tif_dir.td_nstrips;	if (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE)		tif->tif_dir.td_stripsperimage /= tif->tif_dir.td_samplesperpixel;	if (!TIFFFieldSet(tif, FIELD_STRIPOFFSETS)) {#ifdef OJPEG_SUPPORT		if ((tif->tif_dir.td_compression==COMPRESSION_OJPEG) &&		    (isTiled(tif)==0) &&		    (tif->tif_dir.td_nstrips==1)) {			/*			 * XXX: OJPEG hack.			 * If a) compression is OJPEG, b) it's not a tiled TIFF,			 * and c) the number of strips is 1,			 * then we tolerate the absence of stripoffsets tag,			 * because, presumably, all required data is in the			 * JpegInterchangeFormat stream.			 */			TIFFSetFieldBit(tif, FIELD_STRIPOFFSETS);		} else#endif        {			MissingRequired(tif,				isTiled(tif) ? "TileOffsets" : "StripOffsets");			goto bad;		}	}	/*	 * Second pass: extract other information.	 */	for (di=0, dp=dir; di<dircount; di++, dp++)	{		switch (dp->tdir_tag)		{			case IGNORE:				break;			case TIFFTAG_MINSAMPLEVALUE:			case TIFFTAG_MAXSAMPLEVALUE:			case TIFFTAG_BITSPERSAMPLE:			case TIFFTAG_DATATYPE:			case TIFFTAG_SAMPLEFORMAT:				/*				 * The MinSampleValue, MaxSampleValue, BitsPerSample				 * DataType and SampleFormat tags are supposed to be				 * written as one value/sample, but some vendors				 * incorrectly write one value only -- so we accept				 * that as well (yuck). Other vendors write correct				 * value for NumberOfSamples, but incorrect one for				 * BitsPerSample and friends, and we will read this				 * too.				 */				{					uint16 value;					enum TIFFReadDirEntryErr err;					err=TIFFReadDirEntryShort(tif,dp,&value);					if (err==TIFFReadDirEntryErrCount)						err=TIFFReadDirEntryPersampleShort(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					if (!TIFFSetField(tif,dp->tdir_tag,value))						goto bad;                    if( dp->tdir_tag == TIFFTAG_BITSPERSAMPLE )                        bitspersample_read = TRUE;				}				break;			case TIFFTAG_SMINSAMPLEVALUE:			case TIFFTAG_SMAXSAMPLEVALUE:				{					double *data = NULL;					enum TIFFReadDirEntryErr err;					uint32 saved_flags;					int m;					if (dp->tdir_count != (uint64)tif->tif_dir.td_samplesperpixel)						err = TIFFReadDirEntryErrCount;					else						err = TIFFReadDirEntryDoubleArray(tif, dp, &data);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					saved_flags = tif->tif_flags;					tif->tif_flags |= TIFF_PERSAMPLE;					m = TIFFSetField(tif,dp->tdir_tag,data);					tif->tif_flags = saved_flags;					_TIFFfree(data);					if (!m)						goto bad;				}				break;			case TIFFTAG_STRIPOFFSETS:			case TIFFTAG_TILEOFFSETS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripoffset_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripoffset != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripoffset is "                                        "already allocated. Likely duplicated "                                        "StripOffsets/TileOffsets tag");                                    goto bad;                                }				if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripoffset))  					goto bad;#endif                                				break;			case TIFFTAG_STRIPBYTECOUNTS:			case TIFFTAG_TILEBYTECOUNTS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripbytecount_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripbytecount != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripbytecount is "                                        "already allocated. Likely duplicated "                                        "StripByteCounts/TileByteCounts tag");                                    goto bad;                                }                                if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripbytecount))  					goto bad;#endif                                				break;			case TIFFTAG_COLORMAP:			case TIFFTAG_TRANSFERFUNCTION:				{					enum TIFFReadDirEntryErr err;					uint32 countpersample;					uint32 countrequired;					uint32 incrementpersample;					uint16* value=NULL;                    /* It would be dangerous to instantiate those tag values */                    /* since if td_bitspersample has not yet been read (due to */                    /* unordered tags), it could be read afterwards with a */                    /* values greater than the default one (1), which may cause */                    /* crashes in user code */                    if( !bitspersample_read )                    {                        fip = TIFFFieldWithTag(tif,dp->tdir_tag);                        TIFFWarningExt(tif->tif_clientdata,module,                                       "Ignoring %s since BitsPerSample tag not found",                                       fip ? fip->field_name : "unknown tagname");                        continue;                    }					/* ColorMap or TransferFunction for high bit */					/* depths do not make much sense and could be */					/* used as a denial of service vector */					if (tif->tif_dir.td_bitspersample > 24)					{					    fip = TIFFFieldWithTag(tif,dp->tdir_tag);					    TIFFWarningExt(tif->tif_clientdata,module,						"Ignoring %s because BitsPerSample=%d>24",						fip ? fip->field_name : "unknown tagname",						tif->tif_dir.td_bitspersample);					    continue;					}					countpersample=(1U<<tif->tif_dir.td_bitspersample);					if ((dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)&&(dp->tdir_count==(uint64)countpersample))					{						countrequired=countpersample;						incrementpersample=0;					}					else					{						countrequired=3*countpersample;						incrementpersample=countpersample;					}					if (dp->tdir_count!=(uint64)countrequired)						err=TIFFReadDirEntryErrCount;					else						err=TIFFReadDirEntryShortArray(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)                    {						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1);                    }					else					{						TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);						_TIFFfree(value);					}				}				break;/* BEGIN REV 4.0 COMPATIBILITY */			case TIFFTAG_OSUBFILETYPE:				{					uint16 valueo;					uint32 value;					if (TIFFReadDirEntryShort(tif,dp,&valueo)==TIFFReadDirEntryErrOk)					{						switch (valueo)						{							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;							default: value=0; break;						}						if (value!=0)							TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);					}				}				break;/* END REV 4.0 COMPATIBILITY */			default:				(void) TIFFFetchNormalTag(tif, dp, TRUE);				break;		}	}	/*	 * OJPEG hack:	 * - If a) compression is OJPEG, and b) photometric tag is missing,	 * then we consistently find that photometric should be YCbCr	 * - If a) compression is OJPEG, and b) photometric tag says it's RGB,	 * then we consistently find that the buggy implementation of the	 * buggy compression scheme matches photometric YCbCr instead.	 * - If a) compression is OJPEG, and b) bitspersample tag is missing,	 * then we consistently find bitspersample should be 8.	 * - If a) compression is OJPEG, b) samplesperpixel tag is missing,	 * and c) photometric is RGB or YCbCr, then we consistently find	 * samplesperpixel should be 3	 * - If a) compression is OJPEG, b) samplesperpixel tag is missing,	 * and c) photometric is MINISWHITE or MINISBLACK, then we consistently	 * find samplesperpixel should be 3	 */	if (tif->tif_dir.td_compression==COMPRESSION_OJPEG)	{		if (!TIFFFieldSet(tif,FIELD_PHOTOMETRIC))		{			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag is missing, assuming data is YCbCr");			if (!TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR))				goto bad;		}		else if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)		{			tif->tif_dir.td_photometric=PHOTOMETRIC_YCBCR;			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag value assumed incorrect, "			    "assuming data is YCbCr instead of RGB");		}		if (!TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))		{			TIFFWarningExt(tif->tif_clientdata,module,			    "BitsPerSample tag is missing, assuming 8 bits per sample");			if (!TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,8))				goto bad;		}		if (!TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))		{			if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "assuming correct SamplesPerPixel value is 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			if (tif->tif_dir.td_photometric==PHOTOMETRIC_YCBCR)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "applying correct SamplesPerPixel value of 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			else if ((tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)				 || (tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK))			{				/*				 * SamplesPerPixel tag is missing, but is not required				 * by spec.  Assume correct SamplesPerPixel value of 1.				 */				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))					goto bad;			}		}	}	/*	 * Verify Palette image has a Colormap.	 */	if (tif->tif_dir.td_photometric == PHOTOMETRIC_PALETTE &&	    !TIFFFieldSet(tif, FIELD_COLORMAP)) {		if ( tif->tif_dir.td_bitspersample>=8 && tif->tif_dir.td_samplesperpixel==3)			tif->tif_dir.td_photometric = PHOTOMETRIC_RGB;		else if (tif->tif_dir.td_bitspersample>=8)			tif->tif_dir.td_photometric = PHOTOMETRIC_MINISBLACK;		else {			MissingRequired(tif, "Colormap");			goto bad;		}	}	/*	 * OJPEG hack:	 * We do no further messing with strip/tile offsets/bytecounts in OJPEG	 * TIFFs	 */	if (tif->tif_dir.td_compression!=COMPRESSION_OJPEG)	{		/*		 * Attempt to deal with a missing StripByteCounts tag.		 */		if (!TIFFFieldSet(tif, FIELD_STRIPBYTECOUNTS)) {			/*			 * Some manufacturers violate the spec by not giving			 * the size of the strips.  In this case, assume there			 * is one uncompressed strip of data.			 */			if ((tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&			    tif->tif_dir.td_nstrips > 1) ||			    (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&			     tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel)) {			    MissingRequired(tif, "StripByteCounts");			    goto bad;			}			TIFFWarningExt(tif->tif_clientdata, module,				"TIFF directory is missing required "				"\"StripByteCounts\" field, calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;		/*		 * Assume we have wrong StripByteCount value (in case		 * of single strip) in following cases:		 *   - it is equal to zero along with StripOffset;		 *   - it is larger than file itself (in case of uncompressed		 *     image);		 *   - it is smaller than the size of the bytes per row		 *     multiplied on the number of rows.  The last case should		 *     not be checked in the case of writing new image,		 *     because we may do not know the exact strip size		 *     until the whole image will be written and directory		 *     dumped out.		 */		#define	BYTECOUNTLOOKSBAD \		    ( (tif->tif_dir.td_stripbytecount[0] == 0 && tif->tif_dir.td_stripoffset[0] != 0) || \		      (tif->tif_dir.td_compression == COMPRESSION_NONE && \		       (tif->tif_dir.td_stripoffset[0] <= TIFFGetFileSize(tif) && \		        tif->tif_dir.td_stripbytecount[0] > TIFFGetFileSize(tif) - tif->tif_dir.td_stripoffset[0])) || \		      (tif->tif_mode == O_RDONLY && \		       tif->tif_dir.td_compression == COMPRESSION_NONE && \		       tif->tif_dir.td_stripbytecount[0] < TIFFScanlineSize64(tif) * tif->tif_dir.td_imagelength) )		} else if (tif->tif_dir.td_nstrips == 1                           && !(tif->tif_flags&TIFF_ISTILED)                           && _TIFFFillStriles(tif)			   && tif->tif_dir.td_stripoffset[0] != 0			   && BYTECOUNTLOOKSBAD) {			/*			 * XXX: Plexus (and others) sometimes give a value of			 * zero for a tag when they don't know what the			 * correct value is!  Try and handle the simple case			 * of estimating the size of a one strip image.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength");			if(EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#if !defined(DEFER_STRILE_LOAD)		} else if (tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2			   && tif->tif_dir.td_compression == COMPRESSION_NONE			   && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]			   && tif->tif_dir.td_stripbytecount[0] != 0			   && tif->tif_dir.td_stripbytecount[1] != 0 ) {			/*			 * XXX: Some vendors fill StripByteCount array with			 * absolutely wrong values (it can be equal to			 * StripOffset array, for example). Catch this case			 * here.                         *                         * We avoid this check if deferring strile loading                         * as it would always force us to load the strip/tile                         * information.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#endif /* !defined(DEFER_STRILE_LOAD) */                        		}	}	if (dir)	{		_TIFFfree(dir);		dir=NULL;	}	if (!TIFFFieldSet(tif, FIELD_MAXSAMPLEVALUE))	{		if (tif->tif_dir.td_bitspersample>=16)			tif->tif_dir.td_maxsamplevalue=0xFFFF;		else			tif->tif_dir.td_maxsamplevalue = (uint16)((1L<<tif->tif_dir.td_bitspersample)-1);	}	/*	 * XXX: We can optimize checking for the strip bounds using the sorted	 * bytecounts array. See also comments for TIFFAppendToStrip()	 * function in tif_write.c.	 */#if !defined(DEFER_STRILE_LOAD)        	if (tif->tif_dir.td_nstrips > 1) {		uint32 strip;		tif->tif_dir.td_stripbytecountsorted = 1;		for (strip = 1; strip < tif->tif_dir.td_nstrips; strip++) {			if (tif->tif_dir.td_stripoffset[strip - 1] >			    tif->tif_dir.td_stripoffset[strip]) {				tif->tif_dir.td_stripbytecountsorted = 0;				break;			}		}	}#endif /* !defined(DEFER_STRILE_LOAD) */        	/*	 * An opportunity for compression mode dependent tag fixup	 */	(*tif->tif_fixuptags)(tif);	/*	 * Some manufacturers make life difficult by writing	 * large amounts of uncompressed data as a single strip.	 * This is contrary to the recommendations of the spec.	 * The following makes an attempt at breaking such images	 * into strips closer to the recommended 8k bytes.  A	 * side effect, however, is that the RowsPerStrip tag	 * value may be changed.	 */	if ((tif->tif_dir.td_planarconfig==PLANARCONFIG_CONTIG)&&	    (tif->tif_dir.td_nstrips==1)&&	    (tif->tif_dir.td_compression==COMPRESSION_NONE)&&  	    ((tif->tif_flags&(TIFF_STRIPCHOP|TIFF_ISTILED))==TIFF_STRIPCHOP))    {        if ( !_TIFFFillStriles(tif) || !tif->tif_dir.td_stripbytecount )            return 0;		ChopUpSingleUncompressedStrip(tif);    }        /*         * Clear the dirty directory flag.          */	tif->tif_flags &= ~TIFF_DIRTYDIRECT;	tif->tif_flags &= ~TIFF_DIRTYSTRIP;	/*	 * Reinitialize i/o since we are starting on a new directory.	 */	tif->tif_row = (uint32) -1;	tif->tif_curstrip = (uint32) -1;	tif->tif_col = (uint32) -1;	tif->tif_curtile = (uint32) -1;	tif->tif_tilesize = (tmsize_t) -1;	tif->tif_scanlinesize = TIFFScanlineSize(tif);	if (!tif->tif_scanlinesize) {		TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero scanline size");		return (0);	}	if (isTiled(tif)) {		tif->tif_tilesize = TIFFTileSize(tif);		if (!tif->tif_tilesize) {			TIFFErrorExt(tif->tif_clientdata, module,			     "Cannot handle zero tile size");			return (0);		}	} else {		if (!TIFFStripSize(tif)) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Cannot handle zero strip size");			return (0);		}	}	return (1);bad:	if (dir)		_TIFFfree(dir);	return (0);}
int
TIFFReadDirectory(TIFF* tif)
TIFFReadDirectory
TIFF* tif
TIFF
TIFF
* tif
*
tif
{	static const char module[] = "TIFFReadDirectory";	TIFFDirEntry* dir;	uint16 dircount;	TIFFDirEntry* dp;	uint16 di;	const TIFFField* fip;	uint32 fii=FAILED_FII;        toff_t nextdiroff;    int bitspersample_read = FALSE;	tif->tif_diroff=tif->tif_nextdiroff;	if (!TIFFCheckDirOffset(tif,tif->tif_nextdiroff))		return 0;           /* last offset or bad offset (IFD looping) */	(*tif->tif_cleanup)(tif);   /* cleanup any previous compression state */	tif->tif_curdir++;        nextdiroff = tif->tif_nextdiroff;	dircount=TIFFFetchDirectory(tif,nextdiroff,&dir,&tif->tif_nextdiroff);	if (!dircount)	{		TIFFErrorExt(tif->tif_clientdata,module,		    "Failed to read directory at offset " TIFF_UINT64_FORMAT,nextdiroff);		return 0;	}	TIFFReadDirectoryCheckOrder(tif,dir,dircount);        /*         * Mark duplicates of any tag to be ignored (bugzilla 1994)         * to avoid certain pathological problems.         */	{		TIFFDirEntry* ma;		uint16 mb;		for (ma=dir, mb=0; mb<dircount; ma++, mb++)		{			TIFFDirEntry* na;			uint16 nb;			for (na=ma+1, nb=mb+1; nb<dircount; na++, nb++)			{				if (ma->tdir_tag==na->tdir_tag)					na->tdir_tag=IGNORE;			}		}	}        	tif->tif_flags &= ~TIFF_BEENWRITING;    /* reset before new dir */	tif->tif_flags &= ~TIFF_BUF4WRITE;      /* reset before new dir */	/* free any old stuff and reinit */	TIFFFreeDirectory(tif);	TIFFDefaultDirectory(tif);	/*	 * Electronic Arts writes gray-scale TIFF files	 * without a PlanarConfiguration directory entry.	 * Thus we setup a default value here, even though	 * the TIFF spec says there is no default value.	 */	TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG);	/*	 * Setup default value and then make a pass over	 * the fields to check type and tag information,	 * and to extract info required to size data	 * structures.  A second pass is made afterwards	 * to read in everything not taken in the first pass.	 * But we must process the Compression tag first	 * in order to merge in codec-private tag definitions (otherwise	 * we may get complaints about unknown tags).  However, the	 * Compression tag may be dependent on the SamplesPerPixel	 * tag value because older TIFF specs permitted Compression	 * to be written as a SamplesPerPixel-count tag entry.	 * Thus if we don't first figure out the correct SamplesPerPixel	 * tag value then we may end up ignoring the Compression tag	 * value because it has an incorrect count value (if the	 * true value of SamplesPerPixel is not 1).	 */	dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_SAMPLESPERPIXEL);	if (dp)	{		if (!TIFFFetchNormalTag(tif,dp,0))			goto bad;		dp->tdir_tag=IGNORE;	}	dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_COMPRESSION);	if (dp)	{		/*		 * The 5.0 spec says the Compression tag has one value, while		 * earlier specs say it has one value per sample.  Because of		 * this, we accept the tag if one value is supplied with either		 * count.		 */		uint16 value;		enum TIFFReadDirEntryErr err;		err=TIFFReadDirEntryShort(tif,dp,&value);		if (err==TIFFReadDirEntryErrCount)			err=TIFFReadDirEntryPersampleShort(tif,dp,&value);		if (err!=TIFFReadDirEntryErrOk)		{			TIFFReadDirEntryOutputErr(tif,err,module,"Compression",0);			goto bad;		}		if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,value))			goto bad;		dp->tdir_tag=IGNORE;	}	else	{		if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,COMPRESSION_NONE))			goto bad;	}	/*	 * First real pass over the directory.	 */	for (di=0, dp=dir; di<dircount; di++, dp++)	{		if (dp->tdir_tag!=IGNORE)		{			TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);			if (fii == FAILED_FII)			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Unknown field with tag %d (0x%x) encountered",				    dp->tdir_tag,dp->tdir_tag);                                /* the following knowingly leaks the                                    anonymous field structure */				if (!_TIFFMergeFields(tif,					_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type),					1)) {					TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag);					dp->tdir_tag=IGNORE;				} else {					TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);					assert(fii != FAILED_FII);				}			}		}		if (dp->tdir_tag!=IGNORE)		{			fip=tif->tif_fields[fii];			if (fip->field_bit==FIELD_IGNORE)				dp->tdir_tag=IGNORE;			else			{				switch (dp->tdir_tag)				{					case TIFFTAG_STRIPOFFSETS:					case TIFFTAG_STRIPBYTECOUNTS:					case TIFFTAG_TILEOFFSETS:					case TIFFTAG_TILEBYTECOUNTS:						TIFFSetFieldBit(tif,fip->field_bit);						break;					case TIFFTAG_IMAGEWIDTH:					case TIFFTAG_IMAGELENGTH:					case TIFFTAG_IMAGEDEPTH:					case TIFFTAG_TILELENGTH:					case TIFFTAG_TILEWIDTH:					case TIFFTAG_TILEDEPTH:					case TIFFTAG_PLANARCONFIG:					case TIFFTAG_ROWSPERSTRIP:					case TIFFTAG_EXTRASAMPLES:						if (!TIFFFetchNormalTag(tif,dp,0))							goto bad;						dp->tdir_tag=IGNORE;						break;                                        default:                                            if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )                                                dp->tdir_tag=IGNORE;                                            break;				}			}		}	}	/*	 * XXX: OJPEG hack.	 * If a) compression is OJPEG, b) planarconfig tag says it's separate,	 * c) strip offsets/bytecounts tag are both present and	 * d) both contain exactly one value, then we consistently find	 * that the buggy implementation of the buggy compression scheme	 * matches contig planarconfig best. So we 'fix-up' the tag here	 */	if ((tif->tif_dir.td_compression==COMPRESSION_OJPEG)&&	    (tif->tif_dir.td_planarconfig==PLANARCONFIG_SEPARATE))	{        if (!_TIFFFillStriles(tif))            goto bad;		dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_STRIPOFFSETS);		if ((dp!=0)&&(dp->tdir_count==1))		{			dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,			    TIFFTAG_STRIPBYTECOUNTS);			if ((dp!=0)&&(dp->tdir_count==1))			{				tif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG;				TIFFWarningExt(tif->tif_clientdata,module,				    "Planarconfig tag value assumed incorrect, "				    "assuming data is contig instead of chunky");			}		}	}	/*	 * Allocate directory structure and setup defaults.	 */	if (!TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))	{		MissingRequired(tif,"ImageLength");		goto bad;	}	/*	 * Setup appropriate structures (by strip or by tile)	 */	if (!TIFFFieldSet(tif, FIELD_TILEDIMENSIONS)) {		tif->tif_dir.td_nstrips = TIFFNumberOfStrips(tif);  		tif->tif_dir.td_tilewidth = tif->tif_dir.td_imagewidth;		tif->tif_dir.td_tilelength = tif->tif_dir.td_rowsperstrip;		tif->tif_dir.td_tiledepth = tif->tif_dir.td_imagedepth;		tif->tif_flags &= ~TIFF_ISTILED;	} else {		tif->tif_dir.td_nstrips = TIFFNumberOfTiles(tif);		tif->tif_flags |= TIFF_ISTILED;	}	if (!tif->tif_dir.td_nstrips) {		TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero number of %s",		    isTiled(tif) ? "tiles" : "strips");		goto bad;	}	tif->tif_dir.td_stripsperimage = tif->tif_dir.td_nstrips;	if (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE)		tif->tif_dir.td_stripsperimage /= tif->tif_dir.td_samplesperpixel;	if (!TIFFFieldSet(tif, FIELD_STRIPOFFSETS)) {#ifdef OJPEG_SUPPORT		if ((tif->tif_dir.td_compression==COMPRESSION_OJPEG) &&		    (isTiled(tif)==0) &&		    (tif->tif_dir.td_nstrips==1)) {			/*			 * XXX: OJPEG hack.			 * If a) compression is OJPEG, b) it's not a tiled TIFF,			 * and c) the number of strips is 1,			 * then we tolerate the absence of stripoffsets tag,			 * because, presumably, all required data is in the			 * JpegInterchangeFormat stream.			 */			TIFFSetFieldBit(tif, FIELD_STRIPOFFSETS);		} else#endif        {			MissingRequired(tif,				isTiled(tif) ? "TileOffsets" : "StripOffsets");			goto bad;		}	}	/*	 * Second pass: extract other information.	 */	for (di=0, dp=dir; di<dircount; di++, dp++)	{		switch (dp->tdir_tag)		{			case IGNORE:				break;			case TIFFTAG_MINSAMPLEVALUE:			case TIFFTAG_MAXSAMPLEVALUE:			case TIFFTAG_BITSPERSAMPLE:			case TIFFTAG_DATATYPE:			case TIFFTAG_SAMPLEFORMAT:				/*				 * The MinSampleValue, MaxSampleValue, BitsPerSample				 * DataType and SampleFormat tags are supposed to be				 * written as one value/sample, but some vendors				 * incorrectly write one value only -- so we accept				 * that as well (yuck). Other vendors write correct				 * value for NumberOfSamples, but incorrect one for				 * BitsPerSample and friends, and we will read this				 * too.				 */				{					uint16 value;					enum TIFFReadDirEntryErr err;					err=TIFFReadDirEntryShort(tif,dp,&value);					if (err==TIFFReadDirEntryErrCount)						err=TIFFReadDirEntryPersampleShort(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					if (!TIFFSetField(tif,dp->tdir_tag,value))						goto bad;                    if( dp->tdir_tag == TIFFTAG_BITSPERSAMPLE )                        bitspersample_read = TRUE;				}				break;			case TIFFTAG_SMINSAMPLEVALUE:			case TIFFTAG_SMAXSAMPLEVALUE:				{					double *data = NULL;					enum TIFFReadDirEntryErr err;					uint32 saved_flags;					int m;					if (dp->tdir_count != (uint64)tif->tif_dir.td_samplesperpixel)						err = TIFFReadDirEntryErrCount;					else						err = TIFFReadDirEntryDoubleArray(tif, dp, &data);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					saved_flags = tif->tif_flags;					tif->tif_flags |= TIFF_PERSAMPLE;					m = TIFFSetField(tif,dp->tdir_tag,data);					tif->tif_flags = saved_flags;					_TIFFfree(data);					if (!m)						goto bad;				}				break;			case TIFFTAG_STRIPOFFSETS:			case TIFFTAG_TILEOFFSETS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripoffset_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripoffset != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripoffset is "                                        "already allocated. Likely duplicated "                                        "StripOffsets/TileOffsets tag");                                    goto bad;                                }				if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripoffset))  					goto bad;#endif                                				break;			case TIFFTAG_STRIPBYTECOUNTS:			case TIFFTAG_TILEBYTECOUNTS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripbytecount_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripbytecount != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripbytecount is "                                        "already allocated. Likely duplicated "                                        "StripByteCounts/TileByteCounts tag");                                    goto bad;                                }                                if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripbytecount))  					goto bad;#endif                                				break;			case TIFFTAG_COLORMAP:			case TIFFTAG_TRANSFERFUNCTION:				{					enum TIFFReadDirEntryErr err;					uint32 countpersample;					uint32 countrequired;					uint32 incrementpersample;					uint16* value=NULL;                    /* It would be dangerous to instantiate those tag values */                    /* since if td_bitspersample has not yet been read (due to */                    /* unordered tags), it could be read afterwards with a */                    /* values greater than the default one (1), which may cause */                    /* crashes in user code */                    if( !bitspersample_read )                    {                        fip = TIFFFieldWithTag(tif,dp->tdir_tag);                        TIFFWarningExt(tif->tif_clientdata,module,                                       "Ignoring %s since BitsPerSample tag not found",                                       fip ? fip->field_name : "unknown tagname");                        continue;                    }					/* ColorMap or TransferFunction for high bit */					/* depths do not make much sense and could be */					/* used as a denial of service vector */					if (tif->tif_dir.td_bitspersample > 24)					{					    fip = TIFFFieldWithTag(tif,dp->tdir_tag);					    TIFFWarningExt(tif->tif_clientdata,module,						"Ignoring %s because BitsPerSample=%d>24",						fip ? fip->field_name : "unknown tagname",						tif->tif_dir.td_bitspersample);					    continue;					}					countpersample=(1U<<tif->tif_dir.td_bitspersample);					if ((dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)&&(dp->tdir_count==(uint64)countpersample))					{						countrequired=countpersample;						incrementpersample=0;					}					else					{						countrequired=3*countpersample;						incrementpersample=countpersample;					}					if (dp->tdir_count!=(uint64)countrequired)						err=TIFFReadDirEntryErrCount;					else						err=TIFFReadDirEntryShortArray(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)                    {						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1);                    }					else					{						TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);						_TIFFfree(value);					}				}				break;/* BEGIN REV 4.0 COMPATIBILITY */			case TIFFTAG_OSUBFILETYPE:				{					uint16 valueo;					uint32 value;					if (TIFFReadDirEntryShort(tif,dp,&valueo)==TIFFReadDirEntryErrOk)					{						switch (valueo)						{							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;							default: value=0; break;						}						if (value!=0)							TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);					}				}				break;/* END REV 4.0 COMPATIBILITY */			default:				(void) TIFFFetchNormalTag(tif, dp, TRUE);				break;		}	}	/*	 * OJPEG hack:	 * - If a) compression is OJPEG, and b) photometric tag is missing,	 * then we consistently find that photometric should be YCbCr	 * - If a) compression is OJPEG, and b) photometric tag says it's RGB,	 * then we consistently find that the buggy implementation of the	 * buggy compression scheme matches photometric YCbCr instead.	 * - If a) compression is OJPEG, and b) bitspersample tag is missing,	 * then we consistently find bitspersample should be 8.	 * - If a) compression is OJPEG, b) samplesperpixel tag is missing,	 * and c) photometric is RGB or YCbCr, then we consistently find	 * samplesperpixel should be 3	 * - If a) compression is OJPEG, b) samplesperpixel tag is missing,	 * and c) photometric is MINISWHITE or MINISBLACK, then we consistently	 * find samplesperpixel should be 3	 */	if (tif->tif_dir.td_compression==COMPRESSION_OJPEG)	{		if (!TIFFFieldSet(tif,FIELD_PHOTOMETRIC))		{			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag is missing, assuming data is YCbCr");			if (!TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR))				goto bad;		}		else if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)		{			tif->tif_dir.td_photometric=PHOTOMETRIC_YCBCR;			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag value assumed incorrect, "			    "assuming data is YCbCr instead of RGB");		}		if (!TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))		{			TIFFWarningExt(tif->tif_clientdata,module,			    "BitsPerSample tag is missing, assuming 8 bits per sample");			if (!TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,8))				goto bad;		}		if (!TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))		{			if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "assuming correct SamplesPerPixel value is 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			if (tif->tif_dir.td_photometric==PHOTOMETRIC_YCBCR)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "applying correct SamplesPerPixel value of 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			else if ((tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)				 || (tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK))			{				/*				 * SamplesPerPixel tag is missing, but is not required				 * by spec.  Assume correct SamplesPerPixel value of 1.				 */				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))					goto bad;			}		}	}	/*	 * Verify Palette image has a Colormap.	 */	if (tif->tif_dir.td_photometric == PHOTOMETRIC_PALETTE &&	    !TIFFFieldSet(tif, FIELD_COLORMAP)) {		if ( tif->tif_dir.td_bitspersample>=8 && tif->tif_dir.td_samplesperpixel==3)			tif->tif_dir.td_photometric = PHOTOMETRIC_RGB;		else if (tif->tif_dir.td_bitspersample>=8)			tif->tif_dir.td_photometric = PHOTOMETRIC_MINISBLACK;		else {			MissingRequired(tif, "Colormap");			goto bad;		}	}	/*	 * OJPEG hack:	 * We do no further messing with strip/tile offsets/bytecounts in OJPEG	 * TIFFs	 */	if (tif->tif_dir.td_compression!=COMPRESSION_OJPEG)	{		/*		 * Attempt to deal with a missing StripByteCounts tag.		 */		if (!TIFFFieldSet(tif, FIELD_STRIPBYTECOUNTS)) {			/*			 * Some manufacturers violate the spec by not giving			 * the size of the strips.  In this case, assume there			 * is one uncompressed strip of data.			 */			if ((tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&			    tif->tif_dir.td_nstrips > 1) ||			    (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&			     tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel)) {			    MissingRequired(tif, "StripByteCounts");			    goto bad;			}			TIFFWarningExt(tif->tif_clientdata, module,				"TIFF directory is missing required "				"\"StripByteCounts\" field, calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;		/*		 * Assume we have wrong StripByteCount value (in case		 * of single strip) in following cases:		 *   - it is equal to zero along with StripOffset;		 *   - it is larger than file itself (in case of uncompressed		 *     image);		 *   - it is smaller than the size of the bytes per row		 *     multiplied on the number of rows.  The last case should		 *     not be checked in the case of writing new image,		 *     because we may do not know the exact strip size		 *     until the whole image will be written and directory		 *     dumped out.		 */		#define	BYTECOUNTLOOKSBAD \		    ( (tif->tif_dir.td_stripbytecount[0] == 0 && tif->tif_dir.td_stripoffset[0] != 0) || \		      (tif->tif_dir.td_compression == COMPRESSION_NONE && \		       (tif->tif_dir.td_stripoffset[0] <= TIFFGetFileSize(tif) && \		        tif->tif_dir.td_stripbytecount[0] > TIFFGetFileSize(tif) - tif->tif_dir.td_stripoffset[0])) || \		      (tif->tif_mode == O_RDONLY && \		       tif->tif_dir.td_compression == COMPRESSION_NONE && \		       tif->tif_dir.td_stripbytecount[0] < TIFFScanlineSize64(tif) * tif->tif_dir.td_imagelength) )		} else if (tif->tif_dir.td_nstrips == 1                           && !(tif->tif_flags&TIFF_ISTILED)                           && _TIFFFillStriles(tif)			   && tif->tif_dir.td_stripoffset[0] != 0			   && BYTECOUNTLOOKSBAD) {			/*			 * XXX: Plexus (and others) sometimes give a value of			 * zero for a tag when they don't know what the			 * correct value is!  Try and handle the simple case			 * of estimating the size of a one strip image.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength");			if(EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#if !defined(DEFER_STRILE_LOAD)		} else if (tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2			   && tif->tif_dir.td_compression == COMPRESSION_NONE			   && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]			   && tif->tif_dir.td_stripbytecount[0] != 0			   && tif->tif_dir.td_stripbytecount[1] != 0 ) {			/*			 * XXX: Some vendors fill StripByteCount array with			 * absolutely wrong values (it can be equal to			 * StripOffset array, for example). Catch this case			 * here.                         *                         * We avoid this check if deferring strile loading                         * as it would always force us to load the strip/tile                         * information.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#endif /* !defined(DEFER_STRILE_LOAD) */                        		}	}	if (dir)	{		_TIFFfree(dir);		dir=NULL;	}	if (!TIFFFieldSet(tif, FIELD_MAXSAMPLEVALUE))	{		if (tif->tif_dir.td_bitspersample>=16)			tif->tif_dir.td_maxsamplevalue=0xFFFF;		else			tif->tif_dir.td_maxsamplevalue = (uint16)((1L<<tif->tif_dir.td_bitspersample)-1);	}	/*	 * XXX: We can optimize checking for the strip bounds using the sorted	 * bytecounts array. See also comments for TIFFAppendToStrip()	 * function in tif_write.c.	 */#if !defined(DEFER_STRILE_LOAD)        	if (tif->tif_dir.td_nstrips > 1) {		uint32 strip;		tif->tif_dir.td_stripbytecountsorted = 1;		for (strip = 1; strip < tif->tif_dir.td_nstrips; strip++) {			if (tif->tif_dir.td_stripoffset[strip - 1] >			    tif->tif_dir.td_stripoffset[strip]) {				tif->tif_dir.td_stripbytecountsorted = 0;				break;			}		}	}#endif /* !defined(DEFER_STRILE_LOAD) */        	/*	 * An opportunity for compression mode dependent tag fixup	 */	(*tif->tif_fixuptags)(tif);	/*	 * Some manufacturers make life difficult by writing	 * large amounts of uncompressed data as a single strip.	 * This is contrary to the recommendations of the spec.	 * The following makes an attempt at breaking such images	 * into strips closer to the recommended 8k bytes.  A	 * side effect, however, is that the RowsPerStrip tag	 * value may be changed.	 */	if ((tif->tif_dir.td_planarconfig==PLANARCONFIG_CONTIG)&&	    (tif->tif_dir.td_nstrips==1)&&	    (tif->tif_dir.td_compression==COMPRESSION_NONE)&&  	    ((tif->tif_flags&(TIFF_STRIPCHOP|TIFF_ISTILED))==TIFF_STRIPCHOP))    {        if ( !_TIFFFillStriles(tif) || !tif->tif_dir.td_stripbytecount )            return 0;		ChopUpSingleUncompressedStrip(tif);    }        /*         * Clear the dirty directory flag.          */	tif->tif_flags &= ~TIFF_DIRTYDIRECT;	tif->tif_flags &= ~TIFF_DIRTYSTRIP;	/*	 * Reinitialize i/o since we are starting on a new directory.	 */	tif->tif_row = (uint32) -1;	tif->tif_curstrip = (uint32) -1;	tif->tif_col = (uint32) -1;	tif->tif_curtile = (uint32) -1;	tif->tif_tilesize = (tmsize_t) -1;	tif->tif_scanlinesize = TIFFScanlineSize(tif);	if (!tif->tif_scanlinesize) {		TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero scanline size");		return (0);	}	if (isTiled(tif)) {		tif->tif_tilesize = TIFFTileSize(tif);		if (!tif->tif_tilesize) {			TIFFErrorExt(tif->tif_clientdata, module,			     "Cannot handle zero tile size");			return (0);		}	} else {		if (!TIFFStripSize(tif)) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Cannot handle zero strip size");			return (0);		}	}	return (1);bad:	if (dir)		_TIFFfree(dir);	return (0);}
static const char module[] = "TIFFReadDirectory";
static const char module[] = "TIFFReadDirectory";
static const char
module[] = "TIFFReadDirectory"
module
[]
= "TIFFReadDirectory"
"TIFFReadDirectory"
TIFFDirEntry* dir;
TIFFDirEntry* dir;
TIFFDirEntry
TIFFDirEntry
* dir
*
dir
uint16 dircount;
uint16 dircount;
uint16
uint16
dircount
dircount
TIFFDirEntry* dp;
TIFFDirEntry* dp;
TIFFDirEntry
TIFFDirEntry
* dp
*
dp
uint16 di;
uint16 di;
uint16
uint16
di
di
const TIFFField* fip;
const TIFFField* fip;
const TIFFField
TIFFField
* fip
*
fip
uint32 fii=FAILED_FII;
uint32 fii=FAILED_FII;
uint32
uint32
fii=FAILED_FII
fii
=FAILED_FII
FAILED_FII
FAILED_FII
toff_t nextdiroff;
toff_t nextdiroff;
toff_t
toff_t
nextdiroff
nextdiroff
int bitspersample_read = FALSE;
int bitspersample_read = FALSE;
int
bitspersample_read = FALSE
bitspersample_read
= FALSE
FALSE
FALSE
tif->tif_diroff=tif->tif_nextdiroff;
tif->tif_diroff=tif->tif_nextdiroff
tif->tif_diroff
tif
tif
tif_diroff
tif->tif_nextdiroff
tif
tif
tif_nextdiroff
if (!TIFFCheckDirOffset(tif,tif->tif_nextdiroff))		return 0;
!TIFFCheckDirOffset(tif,tif->tif_nextdiroff)
TIFFCheckDirOffset(tif,tif->tif_nextdiroff)
TIFFCheckDirOffset
TIFFCheckDirOffset
tif
tif
tif->tif_nextdiroff
tif
tif
tif_nextdiroff
return 0;
0
(*tif->tif_cleanup)(tif);
(*tif->tif_cleanup)(tif)
(*tif->tif_cleanup)
*tif->tif_cleanup
tif->tif_cleanup
tif
tif
tif_cleanup
tif
tif
tif->tif_curdir++;
tif->tif_curdir++
tif->tif_curdir
tif
tif
tif_curdir
nextdiroff = tif->tif_nextdiroff;
nextdiroff = tif->tif_nextdiroff
nextdiroff
nextdiroff
tif->tif_nextdiroff
tif
tif
tif_nextdiroff
dircount=TIFFFetchDirectory(tif,nextdiroff,&dir,&tif->tif_nextdiroff);
dircount=TIFFFetchDirectory(tif,nextdiroff,&dir,&tif->tif_nextdiroff)
dircount
dircount
TIFFFetchDirectory(tif,nextdiroff,&dir,&tif->tif_nextdiroff)
TIFFFetchDirectory
TIFFFetchDirectory
tif
tif
nextdiroff
nextdiroff
&dir
dir
dir
&tif->tif_nextdiroff
tif->tif_nextdiroff
tif
tif
tif_nextdiroff
if (!dircount)	{		TIFFErrorExt(tif->tif_clientdata,module,		    "Failed to read directory at offset " TIFF_UINT64_FORMAT,nextdiroff);		return 0;	}
!dircount
dircount
dircount
{		TIFFErrorExt(tif->tif_clientdata,module,		    "Failed to read directory at offset " TIFF_UINT64_FORMAT,nextdiroff);		return 0;	}
TIFFErrorExt(tif->tif_clientdata,module,		    "Failed to read directory at offset " TIFF_UINT64_FORMAT,nextdiroff);
return 0;
0
TIFFReadDirectoryCheckOrder(tif,dir,dircount);
TIFFReadDirectoryCheckOrder(tif,dir,dircount)
TIFFReadDirectoryCheckOrder
TIFFReadDirectoryCheckOrder
tif
tif
dir
dir
dircount
dircount
{		TIFFDirEntry* ma;		uint16 mb;		for (ma=dir, mb=0; mb<dircount; ma++, mb++)		{			TIFFDirEntry* na;			uint16 nb;			for (na=ma+1, nb=mb+1; nb<dircount; na++, nb++)			{				if (ma->tdir_tag==na->tdir_tag)					na->tdir_tag=IGNORE;			}		}	}
TIFFDirEntry* ma;
TIFFDirEntry* ma;
TIFFDirEntry
TIFFDirEntry
* ma
*
ma
uint16 mb;
uint16 mb;
uint16
uint16
mb
mb
for (ma=dir, mb=0; mb<dircount; ma++, mb++)		{			TIFFDirEntry* na;			uint16 nb;			for (na=ma+1, nb=mb+1; nb<dircount; na++, nb++)			{				if (ma->tdir_tag==na->tdir_tag)					na->tdir_tag=IGNORE;			}		}
ma=dir, mb=0;
ma=dir, mb=0
ma=dir
ma
ma
dir
dir
mb=0
mb
mb
0
mb<dircount
mb
mb
dircount
dircount
ma++, mb++
ma++
ma
ma
mb++
mb
mb
{			TIFFDirEntry* na;			uint16 nb;			for (na=ma+1, nb=mb+1; nb<dircount; na++, nb++)			{				if (ma->tdir_tag==na->tdir_tag)					na->tdir_tag=IGNORE;			}		}
TIFFDirEntry* na;
TIFFDirEntry* na;
TIFFDirEntry
TIFFDirEntry
* na
*
na
uint16 nb;
uint16 nb;
uint16
uint16
nb
nb
for (na=ma+1, nb=mb+1; nb<dircount; na++, nb++)			{				if (ma->tdir_tag==na->tdir_tag)					na->tdir_tag=IGNORE;			}
na=ma+1, nb=mb+1;
na=ma+1, nb=mb+1
na=ma+1
na
na
ma+1
ma
ma
1
nb=mb+1
nb
nb
mb+1
mb
mb
1
nb<dircount
nb
nb
dircount
dircount
na++, nb++
na++
na
na
nb++
nb
nb
{				if (ma->tdir_tag==na->tdir_tag)					na->tdir_tag=IGNORE;			}
if (ma->tdir_tag==na->tdir_tag)					na->tdir_tag=IGNORE;
ma->tdir_tag==na->tdir_tag
ma->tdir_tag
ma
ma
tdir_tag
na->tdir_tag
na
na
tdir_tag
na->tdir_tag=IGNORE;
na->tdir_tag=IGNORE
na->tdir_tag
na
na
tdir_tag
IGNORE
IGNORE
tif->tif_flags &= ~TIFF_BEENWRITING;
tif->tif_flags &= ~TIFF_BEENWRITING
tif->tif_flags
tif
tif
tif_flags
~TIFF_BEENWRITING
TIFF_BEENWRITING
TIFF_BEENWRITING
tif->tif_flags &= ~TIFF_BUF4WRITE;
tif->tif_flags &= ~TIFF_BUF4WRITE
tif->tif_flags
tif
tif
tif_flags
~TIFF_BUF4WRITE
TIFF_BUF4WRITE
TIFF_BUF4WRITE
TIFFFreeDirectory(tif);
TIFFFreeDirectory(tif)
TIFFFreeDirectory
TIFFFreeDirectory
tif
tif
TIFFDefaultDirectory(tif);
TIFFDefaultDirectory(tif)
TIFFDefaultDirectory
TIFFDefaultDirectory
tif
tif
TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG);
TIFFSetField(tif,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG)
TIFFSetField
TIFFSetField
tif
tif
TIFFTAG_PLANARCONFIG
TIFFTAG_PLANARCONFIG
PLANARCONFIG_CONTIG
PLANARCONFIG_CONTIG
dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_SAMPLESPERPIXEL);
dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_SAMPLESPERPIXEL)
dp
dp
TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_SAMPLESPERPIXEL)
TIFFReadDirectoryFindEntry
TIFFReadDirectoryFindEntry
tif
tif
dir
dir
dircount
dircount
TIFFTAG_SAMPLESPERPIXEL
TIFFTAG_SAMPLESPERPIXEL
if (dp)	{		if (!TIFFFetchNormalTag(tif,dp,0))			goto bad;		dp->tdir_tag=IGNORE;	}
dp
dp
{		if (!TIFFFetchNormalTag(tif,dp,0))			goto bad;		dp->tdir_tag=IGNORE;	}
if (!TIFFFetchNormalTag(tif,dp,0))			goto bad;
!TIFFFetchNormalTag(tif,dp,0)
TIFFFetchNormalTag(tif,dp,0)
TIFFFetchNormalTag
TIFFFetchNormalTag
tif
tif
dp
dp
0
goto bad;
bad
dp->tdir_tag=IGNORE;
dp->tdir_tag=IGNORE
dp->tdir_tag
dp
dp
tdir_tag
IGNORE
IGNORE
dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_COMPRESSION);
dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_COMPRESSION)
dp
dp
TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_COMPRESSION)
TIFFReadDirectoryFindEntry
TIFFReadDirectoryFindEntry
tif
tif
dir
dir
dircount
dircount
TIFFTAG_COMPRESSION
TIFFTAG_COMPRESSION
if (dp)	{		/*		 * The 5.0 spec says the Compression tag has one value, while		 * earlier specs say it has one value per sample.  Because of		 * this, we accept the tag if one value is supplied with either		 * count.		 */		uint16 value;		enum TIFFReadDirEntryErr err;		err=TIFFReadDirEntryShort(tif,dp,&value);		if (err==TIFFReadDirEntryErrCount)			err=TIFFReadDirEntryPersampleShort(tif,dp,&value);		if (err!=TIFFReadDirEntryErrOk)		{			TIFFReadDirEntryOutputErr(tif,err,module,"Compression",0);			goto bad;		}		if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,value))			goto bad;		dp->tdir_tag=IGNORE;	}	else	{		if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,COMPRESSION_NONE))			goto bad;	}
dp
dp
{		/*		 * The 5.0 spec says the Compression tag has one value, while		 * earlier specs say it has one value per sample.  Because of		 * this, we accept the tag if one value is supplied with either		 * count.		 */		uint16 value;		enum TIFFReadDirEntryErr err;		err=TIFFReadDirEntryShort(tif,dp,&value);		if (err==TIFFReadDirEntryErrCount)			err=TIFFReadDirEntryPersampleShort(tif,dp,&value);		if (err!=TIFFReadDirEntryErrOk)		{			TIFFReadDirEntryOutputErr(tif,err,module,"Compression",0);			goto bad;		}		if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,value))			goto bad;		dp->tdir_tag=IGNORE;	}
uint16 value;
uint16 value;
uint16
uint16
value
value
enum TIFFReadDirEntryErr err;
enum TIFFReadDirEntryErr err;
enum TIFFReadDirEntryErr
TIFFReadDirEntryErr
err
err
err=TIFFReadDirEntryShort(tif,dp,&value);
err=TIFFReadDirEntryShort(tif,dp,&value)
err
err
TIFFReadDirEntryShort(tif,dp,&value)
TIFFReadDirEntryShort
TIFFReadDirEntryShort
tif
tif
dp
dp
&value
value
value
if (err==TIFFReadDirEntryErrCount)			err=TIFFReadDirEntryPersampleShort(tif,dp,&value);
err==TIFFReadDirEntryErrCount
err
err
TIFFReadDirEntryErrCount
TIFFReadDirEntryErrCount
err=TIFFReadDirEntryPersampleShort(tif,dp,&value);
err=TIFFReadDirEntryPersampleShort(tif,dp,&value)
err
err
TIFFReadDirEntryPersampleShort(tif,dp,&value)
TIFFReadDirEntryPersampleShort
TIFFReadDirEntryPersampleShort
tif
tif
dp
dp
&value
value
value
if (err!=TIFFReadDirEntryErrOk)		{			TIFFReadDirEntryOutputErr(tif,err,module,"Compression",0);			goto bad;		}
err!=TIFFReadDirEntryErrOk
err
err
TIFFReadDirEntryErrOk
TIFFReadDirEntryErrOk
{			TIFFReadDirEntryOutputErr(tif,err,module,"Compression",0);			goto bad;		}
TIFFReadDirEntryOutputErr(tif,err,module,"Compression",0);
TIFFReadDirEntryOutputErr(tif,err,module,"Compression",0)
TIFFReadDirEntryOutputErr
TIFFReadDirEntryOutputErr
tif
tif
err
err
module
module
"Compression"
0
goto bad;
bad
if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,value))			goto bad;
!TIFFSetField(tif,TIFFTAG_COMPRESSION,value)
TIFFSetField(tif,TIFFTAG_COMPRESSION,value)
TIFFSetField
TIFFSetField
tif
tif
TIFFTAG_COMPRESSION
TIFFTAG_COMPRESSION
value
value
goto bad;
bad
dp->tdir_tag=IGNORE;
dp->tdir_tag=IGNORE
dp->tdir_tag
dp
dp
tdir_tag
IGNORE
IGNORE
{		if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,COMPRESSION_NONE))			goto bad;	}
if (!TIFFSetField(tif,TIFFTAG_COMPRESSION,COMPRESSION_NONE))			goto bad;
!TIFFSetField(tif,TIFFTAG_COMPRESSION,COMPRESSION_NONE)
TIFFSetField(tif,TIFFTAG_COMPRESSION,COMPRESSION_NONE)
TIFFSetField
TIFFSetField
tif
tif
TIFFTAG_COMPRESSION
TIFFTAG_COMPRESSION
COMPRESSION_NONE
COMPRESSION_NONE
goto bad;
bad
for (di=0, dp=dir; di<dircount; di++, dp++)	{		if (dp->tdir_tag!=IGNORE)		{			TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);			if (fii == FAILED_FII)			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Unknown field with tag %d (0x%x) encountered",				    dp->tdir_tag,dp->tdir_tag);                                /* the following knowingly leaks the                                    anonymous field structure */				if (!_TIFFMergeFields(tif,					_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type),					1)) {					TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag);					dp->tdir_tag=IGNORE;				} else {					TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);					assert(fii != FAILED_FII);				}			}		}		if (dp->tdir_tag!=IGNORE)		{			fip=tif->tif_fields[fii];			if (fip->field_bit==FIELD_IGNORE)				dp->tdir_tag=IGNORE;			else			{				switch (dp->tdir_tag)				{					case TIFFTAG_STRIPOFFSETS:					case TIFFTAG_STRIPBYTECOUNTS:					case TIFFTAG_TILEOFFSETS:					case TIFFTAG_TILEBYTECOUNTS:						TIFFSetFieldBit(tif,fip->field_bit);						break;					case TIFFTAG_IMAGEWIDTH:					case TIFFTAG_IMAGELENGTH:					case TIFFTAG_IMAGEDEPTH:					case TIFFTAG_TILELENGTH:					case TIFFTAG_TILEWIDTH:					case TIFFTAG_TILEDEPTH:					case TIFFTAG_PLANARCONFIG:					case TIFFTAG_ROWSPERSTRIP:					case TIFFTAG_EXTRASAMPLES:						if (!TIFFFetchNormalTag(tif,dp,0))							goto bad;						dp->tdir_tag=IGNORE;						break;                                        default:                                            if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )                                                dp->tdir_tag=IGNORE;                                            break;				}			}		}	}
di=0, dp=dir;
di=0, dp=dir
di=0
di
di
0
dp=dir
dp
dp
dir
dir
di<dircount
di
di
dircount
dircount
di++, dp++
di++
di
di
dp++
dp
dp
{		if (dp->tdir_tag!=IGNORE)		{			TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);			if (fii == FAILED_FII)			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Unknown field with tag %d (0x%x) encountered",				    dp->tdir_tag,dp->tdir_tag);                                /* the following knowingly leaks the                                    anonymous field structure */				if (!_TIFFMergeFields(tif,					_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type),					1)) {					TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag);					dp->tdir_tag=IGNORE;				} else {					TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);					assert(fii != FAILED_FII);				}			}		}		if (dp->tdir_tag!=IGNORE)		{			fip=tif->tif_fields[fii];			if (fip->field_bit==FIELD_IGNORE)				dp->tdir_tag=IGNORE;			else			{				switch (dp->tdir_tag)				{					case TIFFTAG_STRIPOFFSETS:					case TIFFTAG_STRIPBYTECOUNTS:					case TIFFTAG_TILEOFFSETS:					case TIFFTAG_TILEBYTECOUNTS:						TIFFSetFieldBit(tif,fip->field_bit);						break;					case TIFFTAG_IMAGEWIDTH:					case TIFFTAG_IMAGELENGTH:					case TIFFTAG_IMAGEDEPTH:					case TIFFTAG_TILELENGTH:					case TIFFTAG_TILEWIDTH:					case TIFFTAG_TILEDEPTH:					case TIFFTAG_PLANARCONFIG:					case TIFFTAG_ROWSPERSTRIP:					case TIFFTAG_EXTRASAMPLES:						if (!TIFFFetchNormalTag(tif,dp,0))							goto bad;						dp->tdir_tag=IGNORE;						break;                                        default:                                            if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )                                                dp->tdir_tag=IGNORE;                                            break;				}			}		}	}
if (dp->tdir_tag!=IGNORE)		{			TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);			if (fii == FAILED_FII)			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Unknown field with tag %d (0x%x) encountered",				    dp->tdir_tag,dp->tdir_tag);                                /* the following knowingly leaks the                                    anonymous field structure */				if (!_TIFFMergeFields(tif,					_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type),					1)) {					TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag);					dp->tdir_tag=IGNORE;				} else {					TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);					assert(fii != FAILED_FII);				}			}		}
dp->tdir_tag!=IGNORE
dp->tdir_tag
dp
dp
tdir_tag
IGNORE
IGNORE
{			TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);			if (fii == FAILED_FII)			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Unknown field with tag %d (0x%x) encountered",				    dp->tdir_tag,dp->tdir_tag);                                /* the following knowingly leaks the                                    anonymous field structure */				if (!_TIFFMergeFields(tif,					_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type),					1)) {					TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag);					dp->tdir_tag=IGNORE;				} else {					TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);					assert(fii != FAILED_FII);				}			}		}
TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);
TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii)
TIFFReadDirectoryFindFieldInfo
TIFFReadDirectoryFindFieldInfo
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
&fii
fii
fii
if (fii == FAILED_FII)			{				TIFFWarningExt(tif->tif_clientdata, module,				    "Unknown field with tag %d (0x%x) encountered",				    dp->tdir_tag,dp->tdir_tag);                                /* the following knowingly leaks the                                    anonymous field structure */				if (!_TIFFMergeFields(tif,					_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type),					1)) {					TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag);					dp->tdir_tag=IGNORE;				} else {					TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);					assert(fii != FAILED_FII);				}			}
fii == FAILED_FII
fii
fii
FAILED_FII
FAILED_FII
{				TIFFWarningExt(tif->tif_clientdata, module,				    "Unknown field with tag %d (0x%x) encountered",				    dp->tdir_tag,dp->tdir_tag);                                /* the following knowingly leaks the                                    anonymous field structure */				if (!_TIFFMergeFields(tif,					_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type),					1)) {					TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag);					dp->tdir_tag=IGNORE;				} else {					TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);					assert(fii != FAILED_FII);				}			}
TIFFWarningExt(tif->tif_clientdata, module,				    "Unknown field with tag %d (0x%x) encountered",				    dp->tdir_tag,dp->tdir_tag);
TIFFWarningExt(tif->tif_clientdata, module,				    "Unknown field with tag %d (0x%x) encountered",				    dp->tdir_tag,dp->tdir_tag)
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Unknown field with tag %d (0x%x) encountered"
dp->tdir_tag
dp
dp
tdir_tag
dp->tdir_tag
dp
dp
tdir_tag
if (!_TIFFMergeFields(tif,					_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type),					1)) {					TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag);					dp->tdir_tag=IGNORE;				} else {					TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);					assert(fii != FAILED_FII);				}
!_TIFFMergeFields(tif,					_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type),					1)
_TIFFMergeFields(tif,					_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type),					1)
_TIFFMergeFields
_TIFFMergeFields
tif
tif
_TIFFCreateAnonField(tif,						dp->tdir_tag,						(TIFFDataType) dp->tdir_type)
_TIFFCreateAnonField
_TIFFCreateAnonField
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
(TIFFDataType) dp->tdir_type
TIFFDataType
TIFFDataType
TIFFDataType

dp->tdir_type
dp
dp
tdir_type
1
{					TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag);					dp->tdir_tag=IGNORE;				}
TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag);
TIFFWarningExt(tif->tif_clientdata,					    module,					    "Registering anonymous field with tag %d (0x%x) failed",					    dp->tdir_tag,					    dp->tdir_tag)
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Registering anonymous field with tag %d (0x%x) failed"
dp->tdir_tag
dp
dp
tdir_tag
dp->tdir_tag
dp
dp
tdir_tag
dp->tdir_tag=IGNORE;
dp->tdir_tag=IGNORE
dp->tdir_tag
dp
dp
tdir_tag
IGNORE
IGNORE
{					TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);					assert(fii != FAILED_FII);				}
TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii);
TIFFReadDirectoryFindFieldInfo(tif,dp->tdir_tag,&fii)
TIFFReadDirectoryFindFieldInfo
TIFFReadDirectoryFindFieldInfo
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
&fii
fii
fii
assert(fii != FAILED_FII);
assert(fii != FAILED_FII)
assert
assert
fii != FAILED_FII
fii
fii
FAILED_FII
FAILED_FII
if (dp->tdir_tag!=IGNORE)		{			fip=tif->tif_fields[fii];			if (fip->field_bit==FIELD_IGNORE)				dp->tdir_tag=IGNORE;			else			{				switch (dp->tdir_tag)				{					case TIFFTAG_STRIPOFFSETS:					case TIFFTAG_STRIPBYTECOUNTS:					case TIFFTAG_TILEOFFSETS:					case TIFFTAG_TILEBYTECOUNTS:						TIFFSetFieldBit(tif,fip->field_bit);						break;					case TIFFTAG_IMAGEWIDTH:					case TIFFTAG_IMAGELENGTH:					case TIFFTAG_IMAGEDEPTH:					case TIFFTAG_TILELENGTH:					case TIFFTAG_TILEWIDTH:					case TIFFTAG_TILEDEPTH:					case TIFFTAG_PLANARCONFIG:					case TIFFTAG_ROWSPERSTRIP:					case TIFFTAG_EXTRASAMPLES:						if (!TIFFFetchNormalTag(tif,dp,0))							goto bad;						dp->tdir_tag=IGNORE;						break;                                        default:                                            if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )                                                dp->tdir_tag=IGNORE;                                            break;				}			}		}
dp->tdir_tag!=IGNORE
dp->tdir_tag
dp
dp
tdir_tag
IGNORE
IGNORE
{			fip=tif->tif_fields[fii];			if (fip->field_bit==FIELD_IGNORE)				dp->tdir_tag=IGNORE;			else			{				switch (dp->tdir_tag)				{					case TIFFTAG_STRIPOFFSETS:					case TIFFTAG_STRIPBYTECOUNTS:					case TIFFTAG_TILEOFFSETS:					case TIFFTAG_TILEBYTECOUNTS:						TIFFSetFieldBit(tif,fip->field_bit);						break;					case TIFFTAG_IMAGEWIDTH:					case TIFFTAG_IMAGELENGTH:					case TIFFTAG_IMAGEDEPTH:					case TIFFTAG_TILELENGTH:					case TIFFTAG_TILEWIDTH:					case TIFFTAG_TILEDEPTH:					case TIFFTAG_PLANARCONFIG:					case TIFFTAG_ROWSPERSTRIP:					case TIFFTAG_EXTRASAMPLES:						if (!TIFFFetchNormalTag(tif,dp,0))							goto bad;						dp->tdir_tag=IGNORE;						break;                                        default:                                            if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )                                                dp->tdir_tag=IGNORE;                                            break;				}			}		}
fip=tif->tif_fields[fii];
fip=tif->tif_fields[fii]
fip
fip
tif->tif_fields[fii]
tif->tif_fields
tif
tif
tif_fields
fii
fii
if (fip->field_bit==FIELD_IGNORE)				dp->tdir_tag=IGNORE;			else			{				switch (dp->tdir_tag)				{					case TIFFTAG_STRIPOFFSETS:					case TIFFTAG_STRIPBYTECOUNTS:					case TIFFTAG_TILEOFFSETS:					case TIFFTAG_TILEBYTECOUNTS:						TIFFSetFieldBit(tif,fip->field_bit);						break;					case TIFFTAG_IMAGEWIDTH:					case TIFFTAG_IMAGELENGTH:					case TIFFTAG_IMAGEDEPTH:					case TIFFTAG_TILELENGTH:					case TIFFTAG_TILEWIDTH:					case TIFFTAG_TILEDEPTH:					case TIFFTAG_PLANARCONFIG:					case TIFFTAG_ROWSPERSTRIP:					case TIFFTAG_EXTRASAMPLES:						if (!TIFFFetchNormalTag(tif,dp,0))							goto bad;						dp->tdir_tag=IGNORE;						break;                                        default:                                            if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )                                                dp->tdir_tag=IGNORE;                                            break;				}			}
fip->field_bit==FIELD_IGNORE
fip->field_bit
fip
fip
field_bit
FIELD_IGNORE
FIELD_IGNORE
dp->tdir_tag=IGNORE;
dp->tdir_tag=IGNORE
dp->tdir_tag
dp
dp
tdir_tag
IGNORE
IGNORE
{				switch (dp->tdir_tag)				{					case TIFFTAG_STRIPOFFSETS:					case TIFFTAG_STRIPBYTECOUNTS:					case TIFFTAG_TILEOFFSETS:					case TIFFTAG_TILEBYTECOUNTS:						TIFFSetFieldBit(tif,fip->field_bit);						break;					case TIFFTAG_IMAGEWIDTH:					case TIFFTAG_IMAGELENGTH:					case TIFFTAG_IMAGEDEPTH:					case TIFFTAG_TILELENGTH:					case TIFFTAG_TILEWIDTH:					case TIFFTAG_TILEDEPTH:					case TIFFTAG_PLANARCONFIG:					case TIFFTAG_ROWSPERSTRIP:					case TIFFTAG_EXTRASAMPLES:						if (!TIFFFetchNormalTag(tif,dp,0))							goto bad;						dp->tdir_tag=IGNORE;						break;                                        default:                                            if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )                                                dp->tdir_tag=IGNORE;                                            break;				}			}
switch (dp->tdir_tag)				{					case TIFFTAG_STRIPOFFSETS:					case TIFFTAG_STRIPBYTECOUNTS:					case TIFFTAG_TILEOFFSETS:					case TIFFTAG_TILEBYTECOUNTS:						TIFFSetFieldBit(tif,fip->field_bit);						break;					case TIFFTAG_IMAGEWIDTH:					case TIFFTAG_IMAGELENGTH:					case TIFFTAG_IMAGEDEPTH:					case TIFFTAG_TILELENGTH:					case TIFFTAG_TILEWIDTH:					case TIFFTAG_TILEDEPTH:					case TIFFTAG_PLANARCONFIG:					case TIFFTAG_ROWSPERSTRIP:					case TIFFTAG_EXTRASAMPLES:						if (!TIFFFetchNormalTag(tif,dp,0))							goto bad;						dp->tdir_tag=IGNORE;						break;                                        default:                                            if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )                                                dp->tdir_tag=IGNORE;                                            break;				}
dp->tdir_tag
dp
dp
tdir_tag
{					case TIFFTAG_STRIPOFFSETS:					case TIFFTAG_STRIPBYTECOUNTS:					case TIFFTAG_TILEOFFSETS:					case TIFFTAG_TILEBYTECOUNTS:						TIFFSetFieldBit(tif,fip->field_bit);						break;					case TIFFTAG_IMAGEWIDTH:					case TIFFTAG_IMAGELENGTH:					case TIFFTAG_IMAGEDEPTH:					case TIFFTAG_TILELENGTH:					case TIFFTAG_TILEWIDTH:					case TIFFTAG_TILEDEPTH:					case TIFFTAG_PLANARCONFIG:					case TIFFTAG_ROWSPERSTRIP:					case TIFFTAG_EXTRASAMPLES:						if (!TIFFFetchNormalTag(tif,dp,0))							goto bad;						dp->tdir_tag=IGNORE;						break;                                        default:                                            if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )                                                dp->tdir_tag=IGNORE;                                            break;				}
case TIFFTAG_STRIPOFFSETS:
TIFFTAG_STRIPOFFSETS
TIFFTAG_STRIPOFFSETS
case TIFFTAG_STRIPBYTECOUNTS:
TIFFTAG_STRIPBYTECOUNTS
TIFFTAG_STRIPBYTECOUNTS
case TIFFTAG_TILEOFFSETS:
TIFFTAG_TILEOFFSETS
TIFFTAG_TILEOFFSETS
case TIFFTAG_TILEBYTECOUNTS:
TIFFTAG_TILEBYTECOUNTS
TIFFTAG_TILEBYTECOUNTS
TIFFSetFieldBit(tif,fip->field_bit);
TIFFSetFieldBit(tif,fip->field_bit)
TIFFSetFieldBit
TIFFSetFieldBit
tif
tif
fip->field_bit
fip
fip
field_bit
break;
case TIFFTAG_IMAGEWIDTH:
TIFFTAG_IMAGEWIDTH
TIFFTAG_IMAGEWIDTH
case TIFFTAG_IMAGELENGTH:
TIFFTAG_IMAGELENGTH
TIFFTAG_IMAGELENGTH
case TIFFTAG_IMAGEDEPTH:
TIFFTAG_IMAGEDEPTH
TIFFTAG_IMAGEDEPTH
case TIFFTAG_TILELENGTH:
TIFFTAG_TILELENGTH
TIFFTAG_TILELENGTH
case TIFFTAG_TILEWIDTH:
TIFFTAG_TILEWIDTH
TIFFTAG_TILEWIDTH
case TIFFTAG_TILEDEPTH:
TIFFTAG_TILEDEPTH
TIFFTAG_TILEDEPTH
case TIFFTAG_PLANARCONFIG:
TIFFTAG_PLANARCONFIG
TIFFTAG_PLANARCONFIG
case TIFFTAG_ROWSPERSTRIP:
TIFFTAG_ROWSPERSTRIP
TIFFTAG_ROWSPERSTRIP
case TIFFTAG_EXTRASAMPLES:
TIFFTAG_EXTRASAMPLES
TIFFTAG_EXTRASAMPLES
if (!TIFFFetchNormalTag(tif,dp,0))							goto bad;
!TIFFFetchNormalTag(tif,dp,0)
TIFFFetchNormalTag(tif,dp,0)
TIFFFetchNormalTag
TIFFFetchNormalTag
tif
tif
dp
dp
0
goto bad;
bad
dp->tdir_tag=IGNORE;
dp->tdir_tag=IGNORE
dp->tdir_tag
dp
dp
tdir_tag
IGNORE
IGNORE
break;
default:
if( !_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag) )                                                dp->tdir_tag=IGNORE;
!_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag)
_TIFFCheckFieldIsValidForCodec(tif, dp->tdir_tag)
_TIFFCheckFieldIsValidForCodec
_TIFFCheckFieldIsValidForCodec
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
dp->tdir_tag=IGNORE;
dp->tdir_tag=IGNORE
dp->tdir_tag
dp
dp
tdir_tag
IGNORE
IGNORE
break;
if ((tif->tif_dir.td_compression==COMPRESSION_OJPEG)&&	    (tif->tif_dir.td_planarconfig==PLANARCONFIG_SEPARATE))	{        if (!_TIFFFillStriles(tif))            goto bad;		dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_STRIPOFFSETS);		if ((dp!=0)&&(dp->tdir_count==1))		{			dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,			    TIFFTAG_STRIPBYTECOUNTS);			if ((dp!=0)&&(dp->tdir_count==1))			{				tif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG;				TIFFWarningExt(tif->tif_clientdata,module,				    "Planarconfig tag value assumed incorrect, "				    "assuming data is contig instead of chunky");			}		}	}
(tif->tif_dir.td_compression==COMPRESSION_OJPEG)&&	    (tif->tif_dir.td_planarconfig==PLANARCONFIG_SEPARATE)
(tif->tif_dir.td_compression==COMPRESSION_OJPEG)
tif->tif_dir.td_compression==COMPRESSION_OJPEG
tif->tif_dir.td_compression
tif->tif_dir
tif
tif
tif_dir
td_compression
COMPRESSION_OJPEG
COMPRESSION_OJPEG
(tif->tif_dir.td_planarconfig==PLANARCONFIG_SEPARATE)
tif->tif_dir.td_planarconfig==PLANARCONFIG_SEPARATE
tif->tif_dir.td_planarconfig
tif->tif_dir
tif
tif
tif_dir
td_planarconfig
PLANARCONFIG_SEPARATE
PLANARCONFIG_SEPARATE
{        if (!_TIFFFillStriles(tif))            goto bad;		dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_STRIPOFFSETS);		if ((dp!=0)&&(dp->tdir_count==1))		{			dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,			    TIFFTAG_STRIPBYTECOUNTS);			if ((dp!=0)&&(dp->tdir_count==1))			{				tif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG;				TIFFWarningExt(tif->tif_clientdata,module,				    "Planarconfig tag value assumed incorrect, "				    "assuming data is contig instead of chunky");			}		}	}
if (!_TIFFFillStriles(tif))            goto bad;
!_TIFFFillStriles(tif)
_TIFFFillStriles(tif)
_TIFFFillStriles
_TIFFFillStriles
tif
tif
goto bad;
bad
dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_STRIPOFFSETS);
dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_STRIPOFFSETS)
dp
dp
TIFFReadDirectoryFindEntry(tif,dir,dircount,TIFFTAG_STRIPOFFSETS)
TIFFReadDirectoryFindEntry
TIFFReadDirectoryFindEntry
tif
tif
dir
dir
dircount
dircount
TIFFTAG_STRIPOFFSETS
TIFFTAG_STRIPOFFSETS
if ((dp!=0)&&(dp->tdir_count==1))		{			dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,			    TIFFTAG_STRIPBYTECOUNTS);			if ((dp!=0)&&(dp->tdir_count==1))			{				tif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG;				TIFFWarningExt(tif->tif_clientdata,module,				    "Planarconfig tag value assumed incorrect, "				    "assuming data is contig instead of chunky");			}		}
(dp!=0)&&(dp->tdir_count==1)
(dp!=0)
dp!=0
dp
dp
0
(dp->tdir_count==1)
dp->tdir_count==1
dp->tdir_count
dp
dp
tdir_count
1
{			dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,			    TIFFTAG_STRIPBYTECOUNTS);			if ((dp!=0)&&(dp->tdir_count==1))			{				tif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG;				TIFFWarningExt(tif->tif_clientdata,module,				    "Planarconfig tag value assumed incorrect, "				    "assuming data is contig instead of chunky");			}		}
dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,			    TIFFTAG_STRIPBYTECOUNTS);
dp=TIFFReadDirectoryFindEntry(tif,dir,dircount,			    TIFFTAG_STRIPBYTECOUNTS)
dp
dp
TIFFReadDirectoryFindEntry(tif,dir,dircount,			    TIFFTAG_STRIPBYTECOUNTS)
TIFFReadDirectoryFindEntry
TIFFReadDirectoryFindEntry
tif
tif
dir
dir
dircount
dircount
TIFFTAG_STRIPBYTECOUNTS
TIFFTAG_STRIPBYTECOUNTS
if ((dp!=0)&&(dp->tdir_count==1))			{				tif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG;				TIFFWarningExt(tif->tif_clientdata,module,				    "Planarconfig tag value assumed incorrect, "				    "assuming data is contig instead of chunky");			}
(dp!=0)&&(dp->tdir_count==1)
(dp!=0)
dp!=0
dp
dp
0
(dp->tdir_count==1)
dp->tdir_count==1
dp->tdir_count
dp
dp
tdir_count
1
{				tif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG;				TIFFWarningExt(tif->tif_clientdata,module,				    "Planarconfig tag value assumed incorrect, "				    "assuming data is contig instead of chunky");			}
tif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG;
tif->tif_dir.td_planarconfig=PLANARCONFIG_CONTIG
tif->tif_dir.td_planarconfig
tif->tif_dir
tif
tif
tif_dir
td_planarconfig
PLANARCONFIG_CONTIG
PLANARCONFIG_CONTIG
TIFFWarningExt(tif->tif_clientdata,module,				    "Planarconfig tag value assumed incorrect, "				    "assuming data is contig instead of chunky");
TIFFWarningExt(tif->tif_clientdata,module,				    "Planarconfig tag value assumed incorrect, "				    "assuming data is contig instead of chunky")
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Planarconfig tag value assumed incorrect, "				    "assuming data is contig instead of chunky"
if (!TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS))	{		MissingRequired(tif,"ImageLength");		goto bad;	}
!TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)
TIFFFieldSet(tif,FIELD_IMAGEDIMENSIONS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_IMAGEDIMENSIONS
FIELD_IMAGEDIMENSIONS
{		MissingRequired(tif,"ImageLength");		goto bad;	}
MissingRequired(tif,"ImageLength");
MissingRequired(tif,"ImageLength")
MissingRequired
MissingRequired
tif
tif
"ImageLength"
goto bad;
bad
if (!TIFFFieldSet(tif, FIELD_TILEDIMENSIONS)) {		tif->tif_dir.td_nstrips = TIFFNumberOfStrips(tif);  		tif->tif_dir.td_tilewidth = tif->tif_dir.td_imagewidth;		tif->tif_dir.td_tilelength = tif->tif_dir.td_rowsperstrip;		tif->tif_dir.td_tiledepth = tif->tif_dir.td_imagedepth;		tif->tif_flags &= ~TIFF_ISTILED;	} else {		tif->tif_dir.td_nstrips = TIFFNumberOfTiles(tif);		tif->tif_flags |= TIFF_ISTILED;	}
!TIFFFieldSet(tif, FIELD_TILEDIMENSIONS)
TIFFFieldSet(tif, FIELD_TILEDIMENSIONS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_TILEDIMENSIONS
FIELD_TILEDIMENSIONS
{		tif->tif_dir.td_nstrips = TIFFNumberOfStrips(tif);  		tif->tif_dir.td_tilewidth = tif->tif_dir.td_imagewidth;		tif->tif_dir.td_tilelength = tif->tif_dir.td_rowsperstrip;		tif->tif_dir.td_tiledepth = tif->tif_dir.td_imagedepth;		tif->tif_flags &= ~TIFF_ISTILED;	}
tif->tif_dir.td_nstrips = TIFFNumberOfStrips(tif);
tif->tif_dir.td_nstrips = TIFFNumberOfStrips(tif)
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
TIFFNumberOfStrips(tif)
TIFFNumberOfStrips
TIFFNumberOfStrips
tif
tif
tif->tif_dir.td_tilewidth = tif->tif_dir.td_imagewidth;
tif->tif_dir.td_tilewidth = tif->tif_dir.td_imagewidth
tif->tif_dir.td_tilewidth
tif->tif_dir
tif
tif
tif_dir
td_tilewidth
tif->tif_dir.td_imagewidth
tif->tif_dir
tif
tif
tif_dir
td_imagewidth
tif->tif_dir.td_tilelength = tif->tif_dir.td_rowsperstrip;
tif->tif_dir.td_tilelength = tif->tif_dir.td_rowsperstrip
tif->tif_dir.td_tilelength
tif->tif_dir
tif
tif
tif_dir
td_tilelength
tif->tif_dir.td_rowsperstrip
tif->tif_dir
tif
tif
tif_dir
td_rowsperstrip
tif->tif_dir.td_tiledepth = tif->tif_dir.td_imagedepth;
tif->tif_dir.td_tiledepth = tif->tif_dir.td_imagedepth
tif->tif_dir.td_tiledepth
tif->tif_dir
tif
tif
tif_dir
td_tiledepth
tif->tif_dir.td_imagedepth
tif->tif_dir
tif
tif
tif_dir
td_imagedepth
tif->tif_flags &= ~TIFF_ISTILED;
tif->tif_flags &= ~TIFF_ISTILED
tif->tif_flags
tif
tif
tif_flags
~TIFF_ISTILED
TIFF_ISTILED
TIFF_ISTILED
{		tif->tif_dir.td_nstrips = TIFFNumberOfTiles(tif);		tif->tif_flags |= TIFF_ISTILED;	}
tif->tif_dir.td_nstrips = TIFFNumberOfTiles(tif);
tif->tif_dir.td_nstrips = TIFFNumberOfTiles(tif)
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
TIFFNumberOfTiles(tif)
TIFFNumberOfTiles
TIFFNumberOfTiles
tif
tif
tif->tif_flags |= TIFF_ISTILED;
tif->tif_flags |= TIFF_ISTILED
tif->tif_flags
tif
tif
tif_flags
TIFF_ISTILED
TIFF_ISTILED
if (!tif->tif_dir.td_nstrips) {		TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero number of %s",		    isTiled(tif) ? "tiles" : "strips");		goto bad;	}
!tif->tif_dir.td_nstrips
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
{		TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero number of %s",		    isTiled(tif) ? "tiles" : "strips");		goto bad;	}
TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero number of %s",		    isTiled(tif) ? "tiles" : "strips");
TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero number of %s",		    isTiled(tif) ? "tiles" : "strips")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Cannot handle zero number of %s"
isTiled(tif) ? "tiles" : "strips"
isTiled(tif)
isTiled
isTiled
tif
tif
"tiles"
"strips"
goto bad;
bad
tif->tif_dir.td_stripsperimage = tif->tif_dir.td_nstrips;
tif->tif_dir.td_stripsperimage = tif->tif_dir.td_nstrips
tif->tif_dir.td_stripsperimage
tif->tif_dir
tif
tif
tif_dir
td_stripsperimage
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
if (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE)		tif->tif_dir.td_stripsperimage /= tif->tif_dir.td_samplesperpixel;
tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE
tif->tif_dir.td_planarconfig
tif->tif_dir
tif
tif
tif_dir
td_planarconfig
PLANARCONFIG_SEPARATE
PLANARCONFIG_SEPARATE
tif->tif_dir.td_stripsperimage /= tif->tif_dir.td_samplesperpixel;
tif->tif_dir.td_stripsperimage /= tif->tif_dir.td_samplesperpixel
tif->tif_dir.td_stripsperimage
tif->tif_dir
tif
tif
tif_dir
td_stripsperimage
tif->tif_dir.td_samplesperpixel
tif->tif_dir
tif
tif
tif_dir
td_samplesperpixel
if (!TIFFFieldSet(tif, FIELD_STRIPOFFSETS)) {#ifdef OJPEG_SUPPORT		if ((tif->tif_dir.td_compression==COMPRESSION_OJPEG) &&		    (isTiled(tif)==0) &&		    (tif->tif_dir.td_nstrips==1)) {			/*			 * XXX: OJPEG hack.			 * If a) compression is OJPEG, b) it's not a tiled TIFF,			 * and c) the number of strips is 1,			 * then we tolerate the absence of stripoffsets tag,			 * because, presumably, all required data is in the			 * JpegInterchangeFormat stream.			 */			TIFFSetFieldBit(tif, FIELD_STRIPOFFSETS);		} else#endif        {			MissingRequired(tif,				isTiled(tif) ? "TileOffsets" : "StripOffsets");			goto bad;		}	}
!TIFFFieldSet(tif, FIELD_STRIPOFFSETS)
TIFFFieldSet(tif, FIELD_STRIPOFFSETS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_STRIPOFFSETS
FIELD_STRIPOFFSETS
{#ifdef OJPEG_SUPPORT		if ((tif->tif_dir.td_compression==COMPRESSION_OJPEG) &&		    (isTiled(tif)==0) &&		    (tif->tif_dir.td_nstrips==1)) {			/*			 * XXX: OJPEG hack.			 * If a) compression is OJPEG, b) it's not a tiled TIFF,			 * and c) the number of strips is 1,			 * then we tolerate the absence of stripoffsets tag,			 * because, presumably, all required data is in the			 * JpegInterchangeFormat stream.			 */			TIFFSetFieldBit(tif, FIELD_STRIPOFFSETS);		} else#endif        {			MissingRequired(tif,				isTiled(tif) ? "TileOffsets" : "StripOffsets");			goto bad;		}	}
{			MissingRequired(tif,				isTiled(tif) ? "TileOffsets" : "StripOffsets");			goto bad;		}
MissingRequired(tif,				isTiled(tif) ? "TileOffsets" : "StripOffsets");
MissingRequired(tif,				isTiled(tif) ? "TileOffsets" : "StripOffsets")
MissingRequired
MissingRequired
tif
tif
isTiled(tif) ? "TileOffsets" : "StripOffsets"
isTiled(tif)
isTiled
isTiled
tif
tif
"TileOffsets"
"StripOffsets"
goto bad;
bad
for (di=0, dp=dir; di<dircount; di++, dp++)	{		switch (dp->tdir_tag)		{			case IGNORE:				break;			case TIFFTAG_MINSAMPLEVALUE:			case TIFFTAG_MAXSAMPLEVALUE:			case TIFFTAG_BITSPERSAMPLE:			case TIFFTAG_DATATYPE:			case TIFFTAG_SAMPLEFORMAT:				/*				 * The MinSampleValue, MaxSampleValue, BitsPerSample				 * DataType and SampleFormat tags are supposed to be				 * written as one value/sample, but some vendors				 * incorrectly write one value only -- so we accept				 * that as well (yuck). Other vendors write correct				 * value for NumberOfSamples, but incorrect one for				 * BitsPerSample and friends, and we will read this				 * too.				 */				{					uint16 value;					enum TIFFReadDirEntryErr err;					err=TIFFReadDirEntryShort(tif,dp,&value);					if (err==TIFFReadDirEntryErrCount)						err=TIFFReadDirEntryPersampleShort(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					if (!TIFFSetField(tif,dp->tdir_tag,value))						goto bad;                    if( dp->tdir_tag == TIFFTAG_BITSPERSAMPLE )                        bitspersample_read = TRUE;				}				break;			case TIFFTAG_SMINSAMPLEVALUE:			case TIFFTAG_SMAXSAMPLEVALUE:				{					double *data = NULL;					enum TIFFReadDirEntryErr err;					uint32 saved_flags;					int m;					if (dp->tdir_count != (uint64)tif->tif_dir.td_samplesperpixel)						err = TIFFReadDirEntryErrCount;					else						err = TIFFReadDirEntryDoubleArray(tif, dp, &data);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					saved_flags = tif->tif_flags;					tif->tif_flags |= TIFF_PERSAMPLE;					m = TIFFSetField(tif,dp->tdir_tag,data);					tif->tif_flags = saved_flags;					_TIFFfree(data);					if (!m)						goto bad;				}				break;			case TIFFTAG_STRIPOFFSETS:			case TIFFTAG_TILEOFFSETS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripoffset_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripoffset != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripoffset is "                                        "already allocated. Likely duplicated "                                        "StripOffsets/TileOffsets tag");                                    goto bad;                                }				if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripoffset))  					goto bad;#endif                                				break;			case TIFFTAG_STRIPBYTECOUNTS:			case TIFFTAG_TILEBYTECOUNTS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripbytecount_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripbytecount != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripbytecount is "                                        "already allocated. Likely duplicated "                                        "StripByteCounts/TileByteCounts tag");                                    goto bad;                                }                                if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripbytecount))  					goto bad;#endif                                				break;			case TIFFTAG_COLORMAP:			case TIFFTAG_TRANSFERFUNCTION:				{					enum TIFFReadDirEntryErr err;					uint32 countpersample;					uint32 countrequired;					uint32 incrementpersample;					uint16* value=NULL;                    /* It would be dangerous to instantiate those tag values */                    /* since if td_bitspersample has not yet been read (due to */                    /* unordered tags), it could be read afterwards with a */                    /* values greater than the default one (1), which may cause */                    /* crashes in user code */                    if( !bitspersample_read )                    {                        fip = TIFFFieldWithTag(tif,dp->tdir_tag);                        TIFFWarningExt(tif->tif_clientdata,module,                                       "Ignoring %s since BitsPerSample tag not found",                                       fip ? fip->field_name : "unknown tagname");                        continue;                    }					/* ColorMap or TransferFunction for high bit */					/* depths do not make much sense and could be */					/* used as a denial of service vector */					if (tif->tif_dir.td_bitspersample > 24)					{					    fip = TIFFFieldWithTag(tif,dp->tdir_tag);					    TIFFWarningExt(tif->tif_clientdata,module,						"Ignoring %s because BitsPerSample=%d>24",						fip ? fip->field_name : "unknown tagname",						tif->tif_dir.td_bitspersample);					    continue;					}					countpersample=(1U<<tif->tif_dir.td_bitspersample);					if ((dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)&&(dp->tdir_count==(uint64)countpersample))					{						countrequired=countpersample;						incrementpersample=0;					}					else					{						countrequired=3*countpersample;						incrementpersample=countpersample;					}					if (dp->tdir_count!=(uint64)countrequired)						err=TIFFReadDirEntryErrCount;					else						err=TIFFReadDirEntryShortArray(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)                    {						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1);                    }					else					{						TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);						_TIFFfree(value);					}				}				break;/* BEGIN REV 4.0 COMPATIBILITY */			case TIFFTAG_OSUBFILETYPE:				{					uint16 valueo;					uint32 value;					if (TIFFReadDirEntryShort(tif,dp,&valueo)==TIFFReadDirEntryErrOk)					{						switch (valueo)						{							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;							default: value=0; break;						}						if (value!=0)							TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);					}				}				break;/* END REV 4.0 COMPATIBILITY */			default:				(void) TIFFFetchNormalTag(tif, dp, TRUE);				break;		}	}
di=0, dp=dir;
di=0, dp=dir
di=0
di
di
0
dp=dir
dp
dp
dir
dir
di<dircount
di
di
dircount
dircount
di++, dp++
di++
di
di
dp++
dp
dp
{		switch (dp->tdir_tag)		{			case IGNORE:				break;			case TIFFTAG_MINSAMPLEVALUE:			case TIFFTAG_MAXSAMPLEVALUE:			case TIFFTAG_BITSPERSAMPLE:			case TIFFTAG_DATATYPE:			case TIFFTAG_SAMPLEFORMAT:				/*				 * The MinSampleValue, MaxSampleValue, BitsPerSample				 * DataType and SampleFormat tags are supposed to be				 * written as one value/sample, but some vendors				 * incorrectly write one value only -- so we accept				 * that as well (yuck). Other vendors write correct				 * value for NumberOfSamples, but incorrect one for				 * BitsPerSample and friends, and we will read this				 * too.				 */				{					uint16 value;					enum TIFFReadDirEntryErr err;					err=TIFFReadDirEntryShort(tif,dp,&value);					if (err==TIFFReadDirEntryErrCount)						err=TIFFReadDirEntryPersampleShort(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					if (!TIFFSetField(tif,dp->tdir_tag,value))						goto bad;                    if( dp->tdir_tag == TIFFTAG_BITSPERSAMPLE )                        bitspersample_read = TRUE;				}				break;			case TIFFTAG_SMINSAMPLEVALUE:			case TIFFTAG_SMAXSAMPLEVALUE:				{					double *data = NULL;					enum TIFFReadDirEntryErr err;					uint32 saved_flags;					int m;					if (dp->tdir_count != (uint64)tif->tif_dir.td_samplesperpixel)						err = TIFFReadDirEntryErrCount;					else						err = TIFFReadDirEntryDoubleArray(tif, dp, &data);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					saved_flags = tif->tif_flags;					tif->tif_flags |= TIFF_PERSAMPLE;					m = TIFFSetField(tif,dp->tdir_tag,data);					tif->tif_flags = saved_flags;					_TIFFfree(data);					if (!m)						goto bad;				}				break;			case TIFFTAG_STRIPOFFSETS:			case TIFFTAG_TILEOFFSETS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripoffset_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripoffset != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripoffset is "                                        "already allocated. Likely duplicated "                                        "StripOffsets/TileOffsets tag");                                    goto bad;                                }				if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripoffset))  					goto bad;#endif                                				break;			case TIFFTAG_STRIPBYTECOUNTS:			case TIFFTAG_TILEBYTECOUNTS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripbytecount_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripbytecount != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripbytecount is "                                        "already allocated. Likely duplicated "                                        "StripByteCounts/TileByteCounts tag");                                    goto bad;                                }                                if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripbytecount))  					goto bad;#endif                                				break;			case TIFFTAG_COLORMAP:			case TIFFTAG_TRANSFERFUNCTION:				{					enum TIFFReadDirEntryErr err;					uint32 countpersample;					uint32 countrequired;					uint32 incrementpersample;					uint16* value=NULL;                    /* It would be dangerous to instantiate those tag values */                    /* since if td_bitspersample has not yet been read (due to */                    /* unordered tags), it could be read afterwards with a */                    /* values greater than the default one (1), which may cause */                    /* crashes in user code */                    if( !bitspersample_read )                    {                        fip = TIFFFieldWithTag(tif,dp->tdir_tag);                        TIFFWarningExt(tif->tif_clientdata,module,                                       "Ignoring %s since BitsPerSample tag not found",                                       fip ? fip->field_name : "unknown tagname");                        continue;                    }					/* ColorMap or TransferFunction for high bit */					/* depths do not make much sense and could be */					/* used as a denial of service vector */					if (tif->tif_dir.td_bitspersample > 24)					{					    fip = TIFFFieldWithTag(tif,dp->tdir_tag);					    TIFFWarningExt(tif->tif_clientdata,module,						"Ignoring %s because BitsPerSample=%d>24",						fip ? fip->field_name : "unknown tagname",						tif->tif_dir.td_bitspersample);					    continue;					}					countpersample=(1U<<tif->tif_dir.td_bitspersample);					if ((dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)&&(dp->tdir_count==(uint64)countpersample))					{						countrequired=countpersample;						incrementpersample=0;					}					else					{						countrequired=3*countpersample;						incrementpersample=countpersample;					}					if (dp->tdir_count!=(uint64)countrequired)						err=TIFFReadDirEntryErrCount;					else						err=TIFFReadDirEntryShortArray(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)                    {						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1);                    }					else					{						TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);						_TIFFfree(value);					}				}				break;/* BEGIN REV 4.0 COMPATIBILITY */			case TIFFTAG_OSUBFILETYPE:				{					uint16 valueo;					uint32 value;					if (TIFFReadDirEntryShort(tif,dp,&valueo)==TIFFReadDirEntryErrOk)					{						switch (valueo)						{							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;							default: value=0; break;						}						if (value!=0)							TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);					}				}				break;/* END REV 4.0 COMPATIBILITY */			default:				(void) TIFFFetchNormalTag(tif, dp, TRUE);				break;		}	}
switch (dp->tdir_tag)		{			case IGNORE:				break;			case TIFFTAG_MINSAMPLEVALUE:			case TIFFTAG_MAXSAMPLEVALUE:			case TIFFTAG_BITSPERSAMPLE:			case TIFFTAG_DATATYPE:			case TIFFTAG_SAMPLEFORMAT:				/*				 * The MinSampleValue, MaxSampleValue, BitsPerSample				 * DataType and SampleFormat tags are supposed to be				 * written as one value/sample, but some vendors				 * incorrectly write one value only -- so we accept				 * that as well (yuck). Other vendors write correct				 * value for NumberOfSamples, but incorrect one for				 * BitsPerSample and friends, and we will read this				 * too.				 */				{					uint16 value;					enum TIFFReadDirEntryErr err;					err=TIFFReadDirEntryShort(tif,dp,&value);					if (err==TIFFReadDirEntryErrCount)						err=TIFFReadDirEntryPersampleShort(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					if (!TIFFSetField(tif,dp->tdir_tag,value))						goto bad;                    if( dp->tdir_tag == TIFFTAG_BITSPERSAMPLE )                        bitspersample_read = TRUE;				}				break;			case TIFFTAG_SMINSAMPLEVALUE:			case TIFFTAG_SMAXSAMPLEVALUE:				{					double *data = NULL;					enum TIFFReadDirEntryErr err;					uint32 saved_flags;					int m;					if (dp->tdir_count != (uint64)tif->tif_dir.td_samplesperpixel)						err = TIFFReadDirEntryErrCount;					else						err = TIFFReadDirEntryDoubleArray(tif, dp, &data);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					saved_flags = tif->tif_flags;					tif->tif_flags |= TIFF_PERSAMPLE;					m = TIFFSetField(tif,dp->tdir_tag,data);					tif->tif_flags = saved_flags;					_TIFFfree(data);					if (!m)						goto bad;				}				break;			case TIFFTAG_STRIPOFFSETS:			case TIFFTAG_TILEOFFSETS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripoffset_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripoffset != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripoffset is "                                        "already allocated. Likely duplicated "                                        "StripOffsets/TileOffsets tag");                                    goto bad;                                }				if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripoffset))  					goto bad;#endif                                				break;			case TIFFTAG_STRIPBYTECOUNTS:			case TIFFTAG_TILEBYTECOUNTS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripbytecount_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripbytecount != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripbytecount is "                                        "already allocated. Likely duplicated "                                        "StripByteCounts/TileByteCounts tag");                                    goto bad;                                }                                if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripbytecount))  					goto bad;#endif                                				break;			case TIFFTAG_COLORMAP:			case TIFFTAG_TRANSFERFUNCTION:				{					enum TIFFReadDirEntryErr err;					uint32 countpersample;					uint32 countrequired;					uint32 incrementpersample;					uint16* value=NULL;                    /* It would be dangerous to instantiate those tag values */                    /* since if td_bitspersample has not yet been read (due to */                    /* unordered tags), it could be read afterwards with a */                    /* values greater than the default one (1), which may cause */                    /* crashes in user code */                    if( !bitspersample_read )                    {                        fip = TIFFFieldWithTag(tif,dp->tdir_tag);                        TIFFWarningExt(tif->tif_clientdata,module,                                       "Ignoring %s since BitsPerSample tag not found",                                       fip ? fip->field_name : "unknown tagname");                        continue;                    }					/* ColorMap or TransferFunction for high bit */					/* depths do not make much sense and could be */					/* used as a denial of service vector */					if (tif->tif_dir.td_bitspersample > 24)					{					    fip = TIFFFieldWithTag(tif,dp->tdir_tag);					    TIFFWarningExt(tif->tif_clientdata,module,						"Ignoring %s because BitsPerSample=%d>24",						fip ? fip->field_name : "unknown tagname",						tif->tif_dir.td_bitspersample);					    continue;					}					countpersample=(1U<<tif->tif_dir.td_bitspersample);					if ((dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)&&(dp->tdir_count==(uint64)countpersample))					{						countrequired=countpersample;						incrementpersample=0;					}					else					{						countrequired=3*countpersample;						incrementpersample=countpersample;					}					if (dp->tdir_count!=(uint64)countrequired)						err=TIFFReadDirEntryErrCount;					else						err=TIFFReadDirEntryShortArray(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)                    {						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1);                    }					else					{						TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);						_TIFFfree(value);					}				}				break;/* BEGIN REV 4.0 COMPATIBILITY */			case TIFFTAG_OSUBFILETYPE:				{					uint16 valueo;					uint32 value;					if (TIFFReadDirEntryShort(tif,dp,&valueo)==TIFFReadDirEntryErrOk)					{						switch (valueo)						{							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;							default: value=0; break;						}						if (value!=0)							TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);					}				}				break;/* END REV 4.0 COMPATIBILITY */			default:				(void) TIFFFetchNormalTag(tif, dp, TRUE);				break;		}
dp->tdir_tag
dp
dp
tdir_tag
{			case IGNORE:				break;			case TIFFTAG_MINSAMPLEVALUE:			case TIFFTAG_MAXSAMPLEVALUE:			case TIFFTAG_BITSPERSAMPLE:			case TIFFTAG_DATATYPE:			case TIFFTAG_SAMPLEFORMAT:				/*				 * The MinSampleValue, MaxSampleValue, BitsPerSample				 * DataType and SampleFormat tags are supposed to be				 * written as one value/sample, but some vendors				 * incorrectly write one value only -- so we accept				 * that as well (yuck). Other vendors write correct				 * value for NumberOfSamples, but incorrect one for				 * BitsPerSample and friends, and we will read this				 * too.				 */				{					uint16 value;					enum TIFFReadDirEntryErr err;					err=TIFFReadDirEntryShort(tif,dp,&value);					if (err==TIFFReadDirEntryErrCount)						err=TIFFReadDirEntryPersampleShort(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					if (!TIFFSetField(tif,dp->tdir_tag,value))						goto bad;                    if( dp->tdir_tag == TIFFTAG_BITSPERSAMPLE )                        bitspersample_read = TRUE;				}				break;			case TIFFTAG_SMINSAMPLEVALUE:			case TIFFTAG_SMAXSAMPLEVALUE:				{					double *data = NULL;					enum TIFFReadDirEntryErr err;					uint32 saved_flags;					int m;					if (dp->tdir_count != (uint64)tif->tif_dir.td_samplesperpixel)						err = TIFFReadDirEntryErrCount;					else						err = TIFFReadDirEntryDoubleArray(tif, dp, &data);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					saved_flags = tif->tif_flags;					tif->tif_flags |= TIFF_PERSAMPLE;					m = TIFFSetField(tif,dp->tdir_tag,data);					tif->tif_flags = saved_flags;					_TIFFfree(data);					if (!m)						goto bad;				}				break;			case TIFFTAG_STRIPOFFSETS:			case TIFFTAG_TILEOFFSETS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripoffset_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripoffset != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripoffset is "                                        "already allocated. Likely duplicated "                                        "StripOffsets/TileOffsets tag");                                    goto bad;                                }				if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripoffset))  					goto bad;#endif                                				break;			case TIFFTAG_STRIPBYTECOUNTS:			case TIFFTAG_TILEBYTECOUNTS:#if defined(DEFER_STRILE_LOAD)                                _TIFFmemcpy( &(tif->tif_dir.td_stripbytecount_entry),                                             dp, sizeof(TIFFDirEntry) );#else                                                          if( tif->tif_dir.td_stripbytecount != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripbytecount is "                                        "already allocated. Likely duplicated "                                        "StripByteCounts/TileByteCounts tag");                                    goto bad;                                }                                if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripbytecount))  					goto bad;#endif                                				break;			case TIFFTAG_COLORMAP:			case TIFFTAG_TRANSFERFUNCTION:				{					enum TIFFReadDirEntryErr err;					uint32 countpersample;					uint32 countrequired;					uint32 incrementpersample;					uint16* value=NULL;                    /* It would be dangerous to instantiate those tag values */                    /* since if td_bitspersample has not yet been read (due to */                    /* unordered tags), it could be read afterwards with a */                    /* values greater than the default one (1), which may cause */                    /* crashes in user code */                    if( !bitspersample_read )                    {                        fip = TIFFFieldWithTag(tif,dp->tdir_tag);                        TIFFWarningExt(tif->tif_clientdata,module,                                       "Ignoring %s since BitsPerSample tag not found",                                       fip ? fip->field_name : "unknown tagname");                        continue;                    }					/* ColorMap or TransferFunction for high bit */					/* depths do not make much sense and could be */					/* used as a denial of service vector */					if (tif->tif_dir.td_bitspersample > 24)					{					    fip = TIFFFieldWithTag(tif,dp->tdir_tag);					    TIFFWarningExt(tif->tif_clientdata,module,						"Ignoring %s because BitsPerSample=%d>24",						fip ? fip->field_name : "unknown tagname",						tif->tif_dir.td_bitspersample);					    continue;					}					countpersample=(1U<<tif->tif_dir.td_bitspersample);					if ((dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)&&(dp->tdir_count==(uint64)countpersample))					{						countrequired=countpersample;						incrementpersample=0;					}					else					{						countrequired=3*countpersample;						incrementpersample=countpersample;					}					if (dp->tdir_count!=(uint64)countrequired)						err=TIFFReadDirEntryErrCount;					else						err=TIFFReadDirEntryShortArray(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)                    {						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1);                    }					else					{						TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);						_TIFFfree(value);					}				}				break;/* BEGIN REV 4.0 COMPATIBILITY */			case TIFFTAG_OSUBFILETYPE:				{					uint16 valueo;					uint32 value;					if (TIFFReadDirEntryShort(tif,dp,&valueo)==TIFFReadDirEntryErrOk)					{						switch (valueo)						{							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;							default: value=0; break;						}						if (value!=0)							TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);					}				}				break;/* END REV 4.0 COMPATIBILITY */			default:				(void) TIFFFetchNormalTag(tif, dp, TRUE);				break;		}
case IGNORE:
IGNORE
IGNORE
break;
case TIFFTAG_MINSAMPLEVALUE:
TIFFTAG_MINSAMPLEVALUE
TIFFTAG_MINSAMPLEVALUE
case TIFFTAG_MAXSAMPLEVALUE:
TIFFTAG_MAXSAMPLEVALUE
TIFFTAG_MAXSAMPLEVALUE
case TIFFTAG_BITSPERSAMPLE:
TIFFTAG_BITSPERSAMPLE
TIFFTAG_BITSPERSAMPLE
case TIFFTAG_DATATYPE:
TIFFTAG_DATATYPE
TIFFTAG_DATATYPE
case TIFFTAG_SAMPLEFORMAT:
TIFFTAG_SAMPLEFORMAT
TIFFTAG_SAMPLEFORMAT
{					uint16 value;					enum TIFFReadDirEntryErr err;					err=TIFFReadDirEntryShort(tif,dp,&value);					if (err==TIFFReadDirEntryErrCount)						err=TIFFReadDirEntryPersampleShort(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					if (!TIFFSetField(tif,dp->tdir_tag,value))						goto bad;                    if( dp->tdir_tag == TIFFTAG_BITSPERSAMPLE )                        bitspersample_read = TRUE;				}
uint16 value;
uint16 value;
uint16
uint16
value
value
enum TIFFReadDirEntryErr err;
enum TIFFReadDirEntryErr err;
enum TIFFReadDirEntryErr
TIFFReadDirEntryErr
err
err
err=TIFFReadDirEntryShort(tif,dp,&value);
err=TIFFReadDirEntryShort(tif,dp,&value)
err
err
TIFFReadDirEntryShort(tif,dp,&value)
TIFFReadDirEntryShort
TIFFReadDirEntryShort
tif
tif
dp
dp
&value
value
value
if (err==TIFFReadDirEntryErrCount)						err=TIFFReadDirEntryPersampleShort(tif,dp,&value);
err==TIFFReadDirEntryErrCount
err
err
TIFFReadDirEntryErrCount
TIFFReadDirEntryErrCount
err=TIFFReadDirEntryPersampleShort(tif,dp,&value);
err=TIFFReadDirEntryPersampleShort(tif,dp,&value)
err
err
TIFFReadDirEntryPersampleShort(tif,dp,&value)
TIFFReadDirEntryPersampleShort
TIFFReadDirEntryPersampleShort
tif
tif
dp
dp
&value
value
value
if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}
err!=TIFFReadDirEntryErrOk
err
err
TIFFReadDirEntryErrOk
TIFFReadDirEntryErrOk
{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}
fip = TIFFFieldWithTag(tif,dp->tdir_tag);
fip = TIFFFieldWithTag(tif,dp->tdir_tag)
fip
fip
TIFFFieldWithTag(tif,dp->tdir_tag)
TIFFFieldWithTag
TIFFFieldWithTag
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);
TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0)
TIFFReadDirEntryOutputErr
TIFFReadDirEntryOutputErr
tif
tif
err
err
module
module
fip ? fip->field_name : "unknown tagname"
fip
fip
fip->field_name
fip
fip
field_name
"unknown tagname"
0
goto bad;
bad
if (!TIFFSetField(tif,dp->tdir_tag,value))						goto bad;
!TIFFSetField(tif,dp->tdir_tag,value)
TIFFSetField(tif,dp->tdir_tag,value)
TIFFSetField
TIFFSetField
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
value
value
goto bad;
bad
if( dp->tdir_tag == TIFFTAG_BITSPERSAMPLE )                        bitspersample_read = TRUE;
dp->tdir_tag == TIFFTAG_BITSPERSAMPLE
dp->tdir_tag
dp
dp
tdir_tag
TIFFTAG_BITSPERSAMPLE
TIFFTAG_BITSPERSAMPLE
bitspersample_read = TRUE;
bitspersample_read = TRUE
bitspersample_read
bitspersample_read
TRUE
TRUE
break;
case TIFFTAG_SMINSAMPLEVALUE:
TIFFTAG_SMINSAMPLEVALUE
TIFFTAG_SMINSAMPLEVALUE
case TIFFTAG_SMAXSAMPLEVALUE:
TIFFTAG_SMAXSAMPLEVALUE
TIFFTAG_SMAXSAMPLEVALUE
{					double *data = NULL;					enum TIFFReadDirEntryErr err;					uint32 saved_flags;					int m;					if (dp->tdir_count != (uint64)tif->tif_dir.td_samplesperpixel)						err = TIFFReadDirEntryErrCount;					else						err = TIFFReadDirEntryDoubleArray(tif, dp, &data);					if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}					saved_flags = tif->tif_flags;					tif->tif_flags |= TIFF_PERSAMPLE;					m = TIFFSetField(tif,dp->tdir_tag,data);					tif->tif_flags = saved_flags;					_TIFFfree(data);					if (!m)						goto bad;				}
double *data = NULL;
double *data = NULL;
double
*data = NULL
*
data
= NULL
NULL
NULL
enum TIFFReadDirEntryErr err;
enum TIFFReadDirEntryErr err;
enum TIFFReadDirEntryErr
TIFFReadDirEntryErr
err
err
uint32 saved_flags;
uint32 saved_flags;
uint32
uint32
saved_flags
saved_flags
int m;
int m;
int
m
m
if (dp->tdir_count != (uint64)tif->tif_dir.td_samplesperpixel)						err = TIFFReadDirEntryErrCount;					else						err = TIFFReadDirEntryDoubleArray(tif, dp, &data);
dp->tdir_count != (uint64)tif->tif_dir.td_samplesperpixel
dp->tdir_count
dp
dp
tdir_count
(uint64)tif->tif_dir.td_samplesperpixel
uint64
uint64
uint64

tif->tif_dir.td_samplesperpixel
tif->tif_dir
tif
tif
tif_dir
td_samplesperpixel
err = TIFFReadDirEntryErrCount;
err = TIFFReadDirEntryErrCount
err
err
TIFFReadDirEntryErrCount
TIFFReadDirEntryErrCount
err = TIFFReadDirEntryDoubleArray(tif, dp, &data);
err = TIFFReadDirEntryDoubleArray(tif, dp, &data)
err
err
TIFFReadDirEntryDoubleArray(tif, dp, &data)
TIFFReadDirEntryDoubleArray
TIFFReadDirEntryDoubleArray
tif
tif
dp
dp
&data
data
data
if (err!=TIFFReadDirEntryErrOk)					{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}
err!=TIFFReadDirEntryErrOk
err
err
TIFFReadDirEntryErrOk
TIFFReadDirEntryErrOk
{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);						goto bad;					}
fip = TIFFFieldWithTag(tif,dp->tdir_tag);
fip = TIFFFieldWithTag(tif,dp->tdir_tag)
fip
fip
TIFFFieldWithTag(tif,dp->tdir_tag)
TIFFFieldWithTag
TIFFFieldWithTag
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0);
TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",0)
TIFFReadDirEntryOutputErr
TIFFReadDirEntryOutputErr
tif
tif
err
err
module
module
fip ? fip->field_name : "unknown tagname"
fip
fip
fip->field_name
fip
fip
field_name
"unknown tagname"
0
goto bad;
bad
saved_flags = tif->tif_flags;
saved_flags = tif->tif_flags
saved_flags
saved_flags
tif->tif_flags
tif
tif
tif_flags
tif->tif_flags |= TIFF_PERSAMPLE;
tif->tif_flags |= TIFF_PERSAMPLE
tif->tif_flags
tif
tif
tif_flags
TIFF_PERSAMPLE
TIFF_PERSAMPLE
m = TIFFSetField(tif,dp->tdir_tag,data);
m = TIFFSetField(tif,dp->tdir_tag,data)
m
m
TIFFSetField(tif,dp->tdir_tag,data)
TIFFSetField
TIFFSetField
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
data
data
tif->tif_flags = saved_flags;
tif->tif_flags = saved_flags
tif->tif_flags
tif
tif
tif_flags
saved_flags
saved_flags
_TIFFfree(data);
_TIFFfree(data)
_TIFFfree
_TIFFfree
data
data
if (!m)						goto bad;
!m
m
m
goto bad;
bad
break;
case TIFFTAG_STRIPOFFSETS:
TIFFTAG_STRIPOFFSETS
TIFFTAG_STRIPOFFSETS
case TIFFTAG_TILEOFFSETS:
TIFFTAG_TILEOFFSETS
TIFFTAG_TILEOFFSETS
if( tif->tif_dir.td_stripoffset != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripoffset is "                                        "already allocated. Likely duplicated "                                        "StripOffsets/TileOffsets tag");                                    goto bad;                                }
tif->tif_dir.td_stripoffset != NULL
tif->tif_dir.td_stripoffset
tif->tif_dir
tif
tif
tif_dir
td_stripoffset
NULL
NULL
{                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripoffset is "                                        "already allocated. Likely duplicated "                                        "StripOffsets/TileOffsets tag");                                    goto bad;                                }
TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripoffset is "                                        "already allocated. Likely duplicated "                                        "StripOffsets/TileOffsets tag");
TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripoffset is "                                        "already allocated. Likely duplicated "                                        "StripOffsets/TileOffsets tag")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"tif->tif_dir.td_stripoffset is "                                        "already allocated. Likely duplicated "                                        "StripOffsets/TileOffsets tag"
goto bad;
bad
if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripoffset))  					goto bad;
!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripoffset)
TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripoffset)
TIFFFetchStripThing
TIFFFetchStripThing
tif
tif
dp
dp
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
&tif->tif_dir.td_stripoffset
tif->tif_dir.td_stripoffset
tif->tif_dir
tif
tif
tif_dir
td_stripoffset
goto bad;
bad
break;
case TIFFTAG_STRIPBYTECOUNTS:
TIFFTAG_STRIPBYTECOUNTS
TIFFTAG_STRIPBYTECOUNTS
case TIFFTAG_TILEBYTECOUNTS:
TIFFTAG_TILEBYTECOUNTS
TIFFTAG_TILEBYTECOUNTS
if( tif->tif_dir.td_stripbytecount != NULL )                                {                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripbytecount is "                                        "already allocated. Likely duplicated "                                        "StripByteCounts/TileByteCounts tag");                                    goto bad;                                }
tif->tif_dir.td_stripbytecount != NULL
tif->tif_dir.td_stripbytecount
tif->tif_dir
tif
tif
tif_dir
td_stripbytecount
NULL
NULL
{                                    TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripbytecount is "                                        "already allocated. Likely duplicated "                                        "StripByteCounts/TileByteCounts tag");                                    goto bad;                                }
TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripbytecount is "                                        "already allocated. Likely duplicated "                                        "StripByteCounts/TileByteCounts tag");
TIFFErrorExt(tif->tif_clientdata, module,                                        "tif->tif_dir.td_stripbytecount is "                                        "already allocated. Likely duplicated "                                        "StripByteCounts/TileByteCounts tag")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"tif->tif_dir.td_stripbytecount is "                                        "already allocated. Likely duplicated "                                        "StripByteCounts/TileByteCounts tag"
goto bad;
bad
if (!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripbytecount))  					goto bad;
!TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripbytecount)
TIFFFetchStripThing(tif,dp,tif->tif_dir.td_nstrips,&tif->tif_dir.td_stripbytecount)
TIFFFetchStripThing
TIFFFetchStripThing
tif
tif
dp
dp
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
&tif->tif_dir.td_stripbytecount
tif->tif_dir.td_stripbytecount
tif->tif_dir
tif
tif
tif_dir
td_stripbytecount
goto bad;
bad
break;
case TIFFTAG_COLORMAP:
TIFFTAG_COLORMAP
TIFFTAG_COLORMAP
case TIFFTAG_TRANSFERFUNCTION:
TIFFTAG_TRANSFERFUNCTION
TIFFTAG_TRANSFERFUNCTION
{					enum TIFFReadDirEntryErr err;					uint32 countpersample;					uint32 countrequired;					uint32 incrementpersample;					uint16* value=NULL;                    /* It would be dangerous to instantiate those tag values */                    /* since if td_bitspersample has not yet been read (due to */                    /* unordered tags), it could be read afterwards with a */                    /* values greater than the default one (1), which may cause */                    /* crashes in user code */                    if( !bitspersample_read )                    {                        fip = TIFFFieldWithTag(tif,dp->tdir_tag);                        TIFFWarningExt(tif->tif_clientdata,module,                                       "Ignoring %s since BitsPerSample tag not found",                                       fip ? fip->field_name : "unknown tagname");                        continue;                    }					/* ColorMap or TransferFunction for high bit */					/* depths do not make much sense and could be */					/* used as a denial of service vector */					if (tif->tif_dir.td_bitspersample > 24)					{					    fip = TIFFFieldWithTag(tif,dp->tdir_tag);					    TIFFWarningExt(tif->tif_clientdata,module,						"Ignoring %s because BitsPerSample=%d>24",						fip ? fip->field_name : "unknown tagname",						tif->tif_dir.td_bitspersample);					    continue;					}					countpersample=(1U<<tif->tif_dir.td_bitspersample);					if ((dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)&&(dp->tdir_count==(uint64)countpersample))					{						countrequired=countpersample;						incrementpersample=0;					}					else					{						countrequired=3*countpersample;						incrementpersample=countpersample;					}					if (dp->tdir_count!=(uint64)countrequired)						err=TIFFReadDirEntryErrCount;					else						err=TIFFReadDirEntryShortArray(tif,dp,&value);					if (err!=TIFFReadDirEntryErrOk)                    {						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1);                    }					else					{						TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);						_TIFFfree(value);					}				}
enum TIFFReadDirEntryErr err;
enum TIFFReadDirEntryErr err;
enum TIFFReadDirEntryErr
TIFFReadDirEntryErr
err
err
uint32 countpersample;
uint32 countpersample;
uint32
uint32
countpersample
countpersample
uint32 countrequired;
uint32 countrequired;
uint32
uint32
countrequired
countrequired
uint32 incrementpersample;
uint32 incrementpersample;
uint32
uint32
incrementpersample
incrementpersample
uint16* value=NULL;
uint16* value=NULL;
uint16
uint16
* value=NULL
*
value
=NULL
NULL
NULL
if( !bitspersample_read )                    {                        fip = TIFFFieldWithTag(tif,dp->tdir_tag);                        TIFFWarningExt(tif->tif_clientdata,module,                                       "Ignoring %s since BitsPerSample tag not found",                                       fip ? fip->field_name : "unknown tagname");                        continue;                    }
!bitspersample_read
bitspersample_read
bitspersample_read
{                        fip = TIFFFieldWithTag(tif,dp->tdir_tag);                        TIFFWarningExt(tif->tif_clientdata,module,                                       "Ignoring %s since BitsPerSample tag not found",                                       fip ? fip->field_name : "unknown tagname");                        continue;                    }
fip = TIFFFieldWithTag(tif,dp->tdir_tag);
fip = TIFFFieldWithTag(tif,dp->tdir_tag)
fip
fip
TIFFFieldWithTag(tif,dp->tdir_tag)
TIFFFieldWithTag
TIFFFieldWithTag
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
TIFFWarningExt(tif->tif_clientdata,module,                                       "Ignoring %s since BitsPerSample tag not found",                                       fip ? fip->field_name : "unknown tagname");
TIFFWarningExt(tif->tif_clientdata,module,                                       "Ignoring %s since BitsPerSample tag not found",                                       fip ? fip->field_name : "unknown tagname")
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Ignoring %s since BitsPerSample tag not found"
fip ? fip->field_name : "unknown tagname"
fip
fip
fip->field_name
fip
fip
field_name
"unknown tagname"
continue;
if (tif->tif_dir.td_bitspersample > 24)					{					    fip = TIFFFieldWithTag(tif,dp->tdir_tag);					    TIFFWarningExt(tif->tif_clientdata,module,						"Ignoring %s because BitsPerSample=%d>24",						fip ? fip->field_name : "unknown tagname",						tif->tif_dir.td_bitspersample);					    continue;					}
tif->tif_dir.td_bitspersample > 24
tif->tif_dir.td_bitspersample
tif->tif_dir
tif
tif
tif_dir
td_bitspersample
24
{					    fip = TIFFFieldWithTag(tif,dp->tdir_tag);					    TIFFWarningExt(tif->tif_clientdata,module,						"Ignoring %s because BitsPerSample=%d>24",						fip ? fip->field_name : "unknown tagname",						tif->tif_dir.td_bitspersample);					    continue;					}
fip = TIFFFieldWithTag(tif,dp->tdir_tag);
fip = TIFFFieldWithTag(tif,dp->tdir_tag)
fip
fip
TIFFFieldWithTag(tif,dp->tdir_tag)
TIFFFieldWithTag
TIFFFieldWithTag
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
TIFFWarningExt(tif->tif_clientdata,module,						"Ignoring %s because BitsPerSample=%d>24",						fip ? fip->field_name : "unknown tagname",						tif->tif_dir.td_bitspersample);
TIFFWarningExt(tif->tif_clientdata,module,						"Ignoring %s because BitsPerSample=%d>24",						fip ? fip->field_name : "unknown tagname",						tif->tif_dir.td_bitspersample)
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Ignoring %s because BitsPerSample=%d>24"
fip ? fip->field_name : "unknown tagname"
fip
fip
fip->field_name
fip
fip
field_name
"unknown tagname"
tif->tif_dir.td_bitspersample
tif->tif_dir
tif
tif
tif_dir
td_bitspersample
continue;
countpersample=(1U<<tif->tif_dir.td_bitspersample);
countpersample=(1U<<tif->tif_dir.td_bitspersample)
countpersample
countpersample
(1U<<tif->tif_dir.td_bitspersample)
1U<<tif->tif_dir.td_bitspersample
1U
tif->tif_dir.td_bitspersample
tif->tif_dir
tif
tif
tif_dir
td_bitspersample
if ((dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)&&(dp->tdir_count==(uint64)countpersample))					{						countrequired=countpersample;						incrementpersample=0;					}					else					{						countrequired=3*countpersample;						incrementpersample=countpersample;					}
(dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)&&(dp->tdir_count==(uint64)countpersample)
(dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION)
dp->tdir_tag==TIFFTAG_TRANSFERFUNCTION
dp->tdir_tag
dp
dp
tdir_tag
TIFFTAG_TRANSFERFUNCTION
TIFFTAG_TRANSFERFUNCTION
(dp->tdir_count==(uint64)countpersample)
dp->tdir_count==(uint64)countpersample
dp->tdir_count
dp
dp
tdir_count
(uint64)countpersample
uint64
uint64
uint64

countpersample
countpersample
{						countrequired=countpersample;						incrementpersample=0;					}
countrequired=countpersample;
countrequired=countpersample
countrequired
countrequired
countpersample
countpersample
incrementpersample=0;
incrementpersample=0
incrementpersample
incrementpersample
0
{						countrequired=3*countpersample;						incrementpersample=countpersample;					}
countrequired=3*countpersample;
countrequired=3*countpersample
countrequired
countrequired
3*countpersample
3
countpersample
countpersample
incrementpersample=countpersample;
incrementpersample=countpersample
incrementpersample
incrementpersample
countpersample
countpersample
if (dp->tdir_count!=(uint64)countrequired)						err=TIFFReadDirEntryErrCount;					else						err=TIFFReadDirEntryShortArray(tif,dp,&value);
dp->tdir_count!=(uint64)countrequired
dp->tdir_count
dp
dp
tdir_count
(uint64)countrequired
uint64
uint64
uint64

countrequired
countrequired
err=TIFFReadDirEntryErrCount;
err=TIFFReadDirEntryErrCount
err
err
TIFFReadDirEntryErrCount
TIFFReadDirEntryErrCount
err=TIFFReadDirEntryShortArray(tif,dp,&value);
err=TIFFReadDirEntryShortArray(tif,dp,&value)
err
err
TIFFReadDirEntryShortArray(tif,dp,&value)
TIFFReadDirEntryShortArray
TIFFReadDirEntryShortArray
tif
tif
dp
dp
&value
value
value
if (err!=TIFFReadDirEntryErrOk)                    {						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1);                    }					else					{						TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);						_TIFFfree(value);					}
err!=TIFFReadDirEntryErrOk
err
err
TIFFReadDirEntryErrOk
TIFFReadDirEntryErrOk
{						fip = TIFFFieldWithTag(tif,dp->tdir_tag);						TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1);                    }
fip = TIFFFieldWithTag(tif,dp->tdir_tag);
fip = TIFFFieldWithTag(tif,dp->tdir_tag)
fip
fip
TIFFFieldWithTag(tif,dp->tdir_tag)
TIFFFieldWithTag
TIFFFieldWithTag
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1);
TIFFReadDirEntryOutputErr(tif,err,module,fip ? fip->field_name : "unknown tagname",1)
TIFFReadDirEntryOutputErr
TIFFReadDirEntryOutputErr
tif
tif
err
err
module
module
fip ? fip->field_name : "unknown tagname"
fip
fip
fip->field_name
fip
fip
field_name
"unknown tagname"
1
{						TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);						_TIFFfree(value);					}
TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample);
TIFFSetField(tif,dp->tdir_tag,value,value+incrementpersample,value+2*incrementpersample)
TIFFSetField
TIFFSetField
tif
tif
dp->tdir_tag
dp
dp
tdir_tag
value
value
value+incrementpersample
value
value
incrementpersample
incrementpersample
value+2*incrementpersample
value
value
2*incrementpersample
2
incrementpersample
incrementpersample
_TIFFfree(value);
_TIFFfree(value)
_TIFFfree
_TIFFfree
value
value
break;
case TIFFTAG_OSUBFILETYPE:
TIFFTAG_OSUBFILETYPE
TIFFTAG_OSUBFILETYPE
{					uint16 valueo;					uint32 value;					if (TIFFReadDirEntryShort(tif,dp,&valueo)==TIFFReadDirEntryErrOk)					{						switch (valueo)						{							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;							default: value=0; break;						}						if (value!=0)							TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);					}				}
uint16 valueo;
uint16 valueo;
uint16
uint16
valueo
valueo
uint32 value;
uint32 value;
uint32
uint32
value
value
if (TIFFReadDirEntryShort(tif,dp,&valueo)==TIFFReadDirEntryErrOk)					{						switch (valueo)						{							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;							default: value=0; break;						}						if (value!=0)							TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);					}
TIFFReadDirEntryShort(tif,dp,&valueo)==TIFFReadDirEntryErrOk
TIFFReadDirEntryShort(tif,dp,&valueo)
TIFFReadDirEntryShort
TIFFReadDirEntryShort
tif
tif
dp
dp
&valueo
valueo
valueo
TIFFReadDirEntryErrOk
TIFFReadDirEntryErrOk
{						switch (valueo)						{							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;							default: value=0; break;						}						if (value!=0)							TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);					}
switch (valueo)						{							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;							default: value=0; break;						}
valueo
valueo
{							case OFILETYPE_REDUCEDIMAGE: value=FILETYPE_REDUCEDIMAGE; break;							case OFILETYPE_PAGE: value=FILETYPE_PAGE; break;							default: value=0; break;						}
case OFILETYPE_REDUCEDIMAGE:
OFILETYPE_REDUCEDIMAGE
OFILETYPE_REDUCEDIMAGE
value=FILETYPE_REDUCEDIMAGE;
value=FILETYPE_REDUCEDIMAGE
value
value
FILETYPE_REDUCEDIMAGE
FILETYPE_REDUCEDIMAGE
break;
case OFILETYPE_PAGE:
OFILETYPE_PAGE
OFILETYPE_PAGE
value=FILETYPE_PAGE;
value=FILETYPE_PAGE
value
value
FILETYPE_PAGE
FILETYPE_PAGE
break;
default:
value=0;
value=0
value
value
0
break;
if (value!=0)							TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);
value!=0
value
value
0
TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value);
TIFFSetField(tif,TIFFTAG_SUBFILETYPE,value)
TIFFSetField
TIFFSetField
tif
tif
TIFFTAG_SUBFILETYPE
TIFFTAG_SUBFILETYPE
value
value
break;
default:
(void) TIFFFetchNormalTag(tif, dp, TRUE);
(void) TIFFFetchNormalTag(tif, dp, TRUE)
void
void

TIFFFetchNormalTag(tif, dp, TRUE)
TIFFFetchNormalTag
TIFFFetchNormalTag
tif
tif
dp
dp
TRUE
TRUE
break;
if (tif->tif_dir.td_compression==COMPRESSION_OJPEG)	{		if (!TIFFFieldSet(tif,FIELD_PHOTOMETRIC))		{			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag is missing, assuming data is YCbCr");			if (!TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR))				goto bad;		}		else if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)		{			tif->tif_dir.td_photometric=PHOTOMETRIC_YCBCR;			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag value assumed incorrect, "			    "assuming data is YCbCr instead of RGB");		}		if (!TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))		{			TIFFWarningExt(tif->tif_clientdata,module,			    "BitsPerSample tag is missing, assuming 8 bits per sample");			if (!TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,8))				goto bad;		}		if (!TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))		{			if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "assuming correct SamplesPerPixel value is 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			if (tif->tif_dir.td_photometric==PHOTOMETRIC_YCBCR)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "applying correct SamplesPerPixel value of 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			else if ((tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)				 || (tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK))			{				/*				 * SamplesPerPixel tag is missing, but is not required				 * by spec.  Assume correct SamplesPerPixel value of 1.				 */				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))					goto bad;			}		}	}
tif->tif_dir.td_compression==COMPRESSION_OJPEG
tif->tif_dir.td_compression
tif->tif_dir
tif
tif
tif_dir
td_compression
COMPRESSION_OJPEG
COMPRESSION_OJPEG
{		if (!TIFFFieldSet(tif,FIELD_PHOTOMETRIC))		{			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag is missing, assuming data is YCbCr");			if (!TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR))				goto bad;		}		else if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)		{			tif->tif_dir.td_photometric=PHOTOMETRIC_YCBCR;			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag value assumed incorrect, "			    "assuming data is YCbCr instead of RGB");		}		if (!TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))		{			TIFFWarningExt(tif->tif_clientdata,module,			    "BitsPerSample tag is missing, assuming 8 bits per sample");			if (!TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,8))				goto bad;		}		if (!TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))		{			if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "assuming correct SamplesPerPixel value is 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			if (tif->tif_dir.td_photometric==PHOTOMETRIC_YCBCR)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "applying correct SamplesPerPixel value of 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			else if ((tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)				 || (tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK))			{				/*				 * SamplesPerPixel tag is missing, but is not required				 * by spec.  Assume correct SamplesPerPixel value of 1.				 */				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))					goto bad;			}		}	}
if (!TIFFFieldSet(tif,FIELD_PHOTOMETRIC))		{			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag is missing, assuming data is YCbCr");			if (!TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR))				goto bad;		}		else if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)		{			tif->tif_dir.td_photometric=PHOTOMETRIC_YCBCR;			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag value assumed incorrect, "			    "assuming data is YCbCr instead of RGB");		}
!TIFFFieldSet(tif,FIELD_PHOTOMETRIC)
TIFFFieldSet(tif,FIELD_PHOTOMETRIC)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_PHOTOMETRIC
FIELD_PHOTOMETRIC
{			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag is missing, assuming data is YCbCr");			if (!TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR))				goto bad;		}
TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag is missing, assuming data is YCbCr");
TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag is missing, assuming data is YCbCr")
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Photometric tag is missing, assuming data is YCbCr"
if (!TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR))				goto bad;
!TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR)
TIFFSetField(tif,TIFFTAG_PHOTOMETRIC,PHOTOMETRIC_YCBCR)
TIFFSetField
TIFFSetField
tif
tif
TIFFTAG_PHOTOMETRIC
TIFFTAG_PHOTOMETRIC
PHOTOMETRIC_YCBCR
PHOTOMETRIC_YCBCR
goto bad;
bad
if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)		{			tif->tif_dir.td_photometric=PHOTOMETRIC_YCBCR;			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag value assumed incorrect, "			    "assuming data is YCbCr instead of RGB");		}
tif->tif_dir.td_photometric==PHOTOMETRIC_RGB
tif->tif_dir.td_photometric
tif->tif_dir
tif
tif
tif_dir
td_photometric
PHOTOMETRIC_RGB
PHOTOMETRIC_RGB
{			tif->tif_dir.td_photometric=PHOTOMETRIC_YCBCR;			TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag value assumed incorrect, "			    "assuming data is YCbCr instead of RGB");		}
tif->tif_dir.td_photometric=PHOTOMETRIC_YCBCR;
tif->tif_dir.td_photometric=PHOTOMETRIC_YCBCR
tif->tif_dir.td_photometric
tif->tif_dir
tif
tif
tif_dir
td_photometric
PHOTOMETRIC_YCBCR
PHOTOMETRIC_YCBCR
TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag value assumed incorrect, "			    "assuming data is YCbCr instead of RGB");
TIFFWarningExt(tif->tif_clientdata, module,			    "Photometric tag value assumed incorrect, "			    "assuming data is YCbCr instead of RGB")
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Photometric tag value assumed incorrect, "			    "assuming data is YCbCr instead of RGB"
if (!TIFFFieldSet(tif,FIELD_BITSPERSAMPLE))		{			TIFFWarningExt(tif->tif_clientdata,module,			    "BitsPerSample tag is missing, assuming 8 bits per sample");			if (!TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,8))				goto bad;		}
!TIFFFieldSet(tif,FIELD_BITSPERSAMPLE)
TIFFFieldSet(tif,FIELD_BITSPERSAMPLE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_BITSPERSAMPLE
FIELD_BITSPERSAMPLE
{			TIFFWarningExt(tif->tif_clientdata,module,			    "BitsPerSample tag is missing, assuming 8 bits per sample");			if (!TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,8))				goto bad;		}
TIFFWarningExt(tif->tif_clientdata,module,			    "BitsPerSample tag is missing, assuming 8 bits per sample");
TIFFWarningExt(tif->tif_clientdata,module,			    "BitsPerSample tag is missing, assuming 8 bits per sample")
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"BitsPerSample tag is missing, assuming 8 bits per sample"
if (!TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,8))				goto bad;
!TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,8)
TIFFSetField(tif,TIFFTAG_BITSPERSAMPLE,8)
TIFFSetField
TIFFSetField
tif
tif
TIFFTAG_BITSPERSAMPLE
TIFFTAG_BITSPERSAMPLE
8
goto bad;
bad
if (!TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL))		{			if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "assuming correct SamplesPerPixel value is 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			if (tif->tif_dir.td_photometric==PHOTOMETRIC_YCBCR)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "applying correct SamplesPerPixel value of 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			else if ((tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)				 || (tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK))			{				/*				 * SamplesPerPixel tag is missing, but is not required				 * by spec.  Assume correct SamplesPerPixel value of 1.				 */				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))					goto bad;			}		}
!TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL)
TIFFFieldSet(tif,FIELD_SAMPLESPERPIXEL)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_SAMPLESPERPIXEL
FIELD_SAMPLESPERPIXEL
{			if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "assuming correct SamplesPerPixel value is 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			if (tif->tif_dir.td_photometric==PHOTOMETRIC_YCBCR)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "applying correct SamplesPerPixel value of 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			else if ((tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)				 || (tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK))			{				/*				 * SamplesPerPixel tag is missing, but is not required				 * by spec.  Assume correct SamplesPerPixel value of 1.				 */				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))					goto bad;			}		}
if (tif->tif_dir.td_photometric==PHOTOMETRIC_RGB)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "assuming correct SamplesPerPixel value is 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}
tif->tif_dir.td_photometric==PHOTOMETRIC_RGB
tif->tif_dir.td_photometric
tif->tif_dir
tif
tif
tif_dir
td_photometric
PHOTOMETRIC_RGB
PHOTOMETRIC_RGB
{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "assuming correct SamplesPerPixel value is 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}
TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "assuming correct SamplesPerPixel value is 3");
TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "assuming correct SamplesPerPixel value is 3")
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"SamplesPerPixel tag is missing, "				    "assuming correct SamplesPerPixel value is 3"
if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;
!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3)
TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3)
TIFFSetField
TIFFSetField
tif
tif
TIFFTAG_SAMPLESPERPIXEL
TIFFTAG_SAMPLESPERPIXEL
3
goto bad;
bad
if (tif->tif_dir.td_photometric==PHOTOMETRIC_YCBCR)			{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "applying correct SamplesPerPixel value of 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}			else if ((tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)				 || (tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK))			{				/*				 * SamplesPerPixel tag is missing, but is not required				 * by spec.  Assume correct SamplesPerPixel value of 1.				 */				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))					goto bad;			}
tif->tif_dir.td_photometric==PHOTOMETRIC_YCBCR
tif->tif_dir.td_photometric
tif->tif_dir
tif
tif
tif_dir
td_photometric
PHOTOMETRIC_YCBCR
PHOTOMETRIC_YCBCR
{				TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "applying correct SamplesPerPixel value of 3");				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;			}
TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "applying correct SamplesPerPixel value of 3");
TIFFWarningExt(tif->tif_clientdata,module,				    "SamplesPerPixel tag is missing, "				    "applying correct SamplesPerPixel value of 3")
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"SamplesPerPixel tag is missing, "				    "applying correct SamplesPerPixel value of 3"
if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3))					goto bad;
!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3)
TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,3)
TIFFSetField
TIFFSetField
tif
tif
TIFFTAG_SAMPLESPERPIXEL
TIFFTAG_SAMPLESPERPIXEL
3
goto bad;
bad
if ((tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)				 || (tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK))			{				/*				 * SamplesPerPixel tag is missing, but is not required				 * by spec.  Assume correct SamplesPerPixel value of 1.				 */				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))					goto bad;			}
(tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)				 || (tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK)
(tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE)
tif->tif_dir.td_photometric==PHOTOMETRIC_MINISWHITE
tif->tif_dir.td_photometric
tif->tif_dir
tif
tif
tif_dir
td_photometric
PHOTOMETRIC_MINISWHITE
PHOTOMETRIC_MINISWHITE
(tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK)
tif->tif_dir.td_photometric==PHOTOMETRIC_MINISBLACK
tif->tif_dir.td_photometric
tif->tif_dir
tif
tif
tif_dir
td_photometric
PHOTOMETRIC_MINISBLACK
PHOTOMETRIC_MINISBLACK
{				/*				 * SamplesPerPixel tag is missing, but is not required				 * by spec.  Assume correct SamplesPerPixel value of 1.				 */				if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))					goto bad;			}
if (!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1))					goto bad;
!TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1)
TIFFSetField(tif,TIFFTAG_SAMPLESPERPIXEL,1)
TIFFSetField
TIFFSetField
tif
tif
TIFFTAG_SAMPLESPERPIXEL
TIFFTAG_SAMPLESPERPIXEL
1
goto bad;
bad
if (tif->tif_dir.td_photometric == PHOTOMETRIC_PALETTE &&	    !TIFFFieldSet(tif, FIELD_COLORMAP)) {		if ( tif->tif_dir.td_bitspersample>=8 && tif->tif_dir.td_samplesperpixel==3)			tif->tif_dir.td_photometric = PHOTOMETRIC_RGB;		else if (tif->tif_dir.td_bitspersample>=8)			tif->tif_dir.td_photometric = PHOTOMETRIC_MINISBLACK;		else {			MissingRequired(tif, "Colormap");			goto bad;		}	}
tif->tif_dir.td_photometric == PHOTOMETRIC_PALETTE &&	    !TIFFFieldSet(tif, FIELD_COLORMAP)
tif->tif_dir.td_photometric == PHOTOMETRIC_PALETTE
tif->tif_dir.td_photometric
tif->tif_dir
tif
tif
tif_dir
td_photometric
PHOTOMETRIC_PALETTE
PHOTOMETRIC_PALETTE
!TIFFFieldSet(tif, FIELD_COLORMAP)
TIFFFieldSet(tif, FIELD_COLORMAP)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_COLORMAP
FIELD_COLORMAP
{		if ( tif->tif_dir.td_bitspersample>=8 && tif->tif_dir.td_samplesperpixel==3)			tif->tif_dir.td_photometric = PHOTOMETRIC_RGB;		else if (tif->tif_dir.td_bitspersample>=8)			tif->tif_dir.td_photometric = PHOTOMETRIC_MINISBLACK;		else {			MissingRequired(tif, "Colormap");			goto bad;		}	}
if ( tif->tif_dir.td_bitspersample>=8 && tif->tif_dir.td_samplesperpixel==3)			tif->tif_dir.td_photometric = PHOTOMETRIC_RGB;		else if (tif->tif_dir.td_bitspersample>=8)			tif->tif_dir.td_photometric = PHOTOMETRIC_MINISBLACK;		else {			MissingRequired(tif, "Colormap");			goto bad;		}
tif->tif_dir.td_bitspersample>=8 && tif->tif_dir.td_samplesperpixel==3
tif->tif_dir.td_bitspersample>=8
tif->tif_dir.td_bitspersample
tif->tif_dir
tif
tif
tif_dir
td_bitspersample
8
tif->tif_dir.td_samplesperpixel==3
tif->tif_dir.td_samplesperpixel
tif->tif_dir
tif
tif
tif_dir
td_samplesperpixel
3
tif->tif_dir.td_photometric = PHOTOMETRIC_RGB;
tif->tif_dir.td_photometric = PHOTOMETRIC_RGB
tif->tif_dir.td_photometric
tif->tif_dir
tif
tif
tif_dir
td_photometric
PHOTOMETRIC_RGB
PHOTOMETRIC_RGB
if (tif->tif_dir.td_bitspersample>=8)			tif->tif_dir.td_photometric = PHOTOMETRIC_MINISBLACK;		else {			MissingRequired(tif, "Colormap");			goto bad;		}
tif->tif_dir.td_bitspersample>=8
tif->tif_dir.td_bitspersample
tif->tif_dir
tif
tif
tif_dir
td_bitspersample
8
tif->tif_dir.td_photometric = PHOTOMETRIC_MINISBLACK;
tif->tif_dir.td_photometric = PHOTOMETRIC_MINISBLACK
tif->tif_dir.td_photometric
tif->tif_dir
tif
tif
tif_dir
td_photometric
PHOTOMETRIC_MINISBLACK
PHOTOMETRIC_MINISBLACK
{			MissingRequired(tif, "Colormap");			goto bad;		}
MissingRequired(tif, "Colormap");
MissingRequired(tif, "Colormap")
MissingRequired
MissingRequired
tif
tif
"Colormap"
goto bad;
bad
if (tif->tif_dir.td_compression!=COMPRESSION_OJPEG)	{		/*		 * Attempt to deal with a missing StripByteCounts tag.		 */		if (!TIFFFieldSet(tif, FIELD_STRIPBYTECOUNTS)) {			/*			 * Some manufacturers violate the spec by not giving			 * the size of the strips.  In this case, assume there			 * is one uncompressed strip of data.			 */			if ((tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&			    tif->tif_dir.td_nstrips > 1) ||			    (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&			     tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel)) {			    MissingRequired(tif, "StripByteCounts");			    goto bad;			}			TIFFWarningExt(tif->tif_clientdata, module,				"TIFF directory is missing required "				"\"StripByteCounts\" field, calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;		/*		 * Assume we have wrong StripByteCount value (in case		 * of single strip) in following cases:		 *   - it is equal to zero along with StripOffset;		 *   - it is larger than file itself (in case of uncompressed		 *     image);		 *   - it is smaller than the size of the bytes per row		 *     multiplied on the number of rows.  The last case should		 *     not be checked in the case of writing new image,		 *     because we may do not know the exact strip size		 *     until the whole image will be written and directory		 *     dumped out.		 */		#define	BYTECOUNTLOOKSBAD \		    ( (tif->tif_dir.td_stripbytecount[0] == 0 && tif->tif_dir.td_stripoffset[0] != 0) || \		      (tif->tif_dir.td_compression == COMPRESSION_NONE && \		       (tif->tif_dir.td_stripoffset[0] <= TIFFGetFileSize(tif) && \		        tif->tif_dir.td_stripbytecount[0] > TIFFGetFileSize(tif) - tif->tif_dir.td_stripoffset[0])) || \		      (tif->tif_mode == O_RDONLY && \		       tif->tif_dir.td_compression == COMPRESSION_NONE && \		       tif->tif_dir.td_stripbytecount[0] < TIFFScanlineSize64(tif) * tif->tif_dir.td_imagelength) )		} else if (tif->tif_dir.td_nstrips == 1                           && !(tif->tif_flags&TIFF_ISTILED)                           && _TIFFFillStriles(tif)			   && tif->tif_dir.td_stripoffset[0] != 0			   && BYTECOUNTLOOKSBAD) {			/*			 * XXX: Plexus (and others) sometimes give a value of			 * zero for a tag when they don't know what the			 * correct value is!  Try and handle the simple case			 * of estimating the size of a one strip image.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength");			if(EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#if !defined(DEFER_STRILE_LOAD)		} else if (tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2			   && tif->tif_dir.td_compression == COMPRESSION_NONE			   && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]			   && tif->tif_dir.td_stripbytecount[0] != 0			   && tif->tif_dir.td_stripbytecount[1] != 0 ) {			/*			 * XXX: Some vendors fill StripByteCount array with			 * absolutely wrong values (it can be equal to			 * StripOffset array, for example). Catch this case			 * here.                         *                         * We avoid this check if deferring strile loading                         * as it would always force us to load the strip/tile                         * information.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#endif /* !defined(DEFER_STRILE_LOAD) */                        		}	}
tif->tif_dir.td_compression!=COMPRESSION_OJPEG
tif->tif_dir.td_compression
tif->tif_dir
tif
tif
tif_dir
td_compression
COMPRESSION_OJPEG
COMPRESSION_OJPEG
{		/*		 * Attempt to deal with a missing StripByteCounts tag.		 */		if (!TIFFFieldSet(tif, FIELD_STRIPBYTECOUNTS)) {			/*			 * Some manufacturers violate the spec by not giving			 * the size of the strips.  In this case, assume there			 * is one uncompressed strip of data.			 */			if ((tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&			    tif->tif_dir.td_nstrips > 1) ||			    (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&			     tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel)) {			    MissingRequired(tif, "StripByteCounts");			    goto bad;			}			TIFFWarningExt(tif->tif_clientdata, module,				"TIFF directory is missing required "				"\"StripByteCounts\" field, calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;		/*		 * Assume we have wrong StripByteCount value (in case		 * of single strip) in following cases:		 *   - it is equal to zero along with StripOffset;		 *   - it is larger than file itself (in case of uncompressed		 *     image);		 *   - it is smaller than the size of the bytes per row		 *     multiplied on the number of rows.  The last case should		 *     not be checked in the case of writing new image,		 *     because we may do not know the exact strip size		 *     until the whole image will be written and directory		 *     dumped out.		 */		#define	BYTECOUNTLOOKSBAD \		    ( (tif->tif_dir.td_stripbytecount[0] == 0 && tif->tif_dir.td_stripoffset[0] != 0) || \		      (tif->tif_dir.td_compression == COMPRESSION_NONE && \		       (tif->tif_dir.td_stripoffset[0] <= TIFFGetFileSize(tif) && \		        tif->tif_dir.td_stripbytecount[0] > TIFFGetFileSize(tif) - tif->tif_dir.td_stripoffset[0])) || \		      (tif->tif_mode == O_RDONLY && \		       tif->tif_dir.td_compression == COMPRESSION_NONE && \		       tif->tif_dir.td_stripbytecount[0] < TIFFScanlineSize64(tif) * tif->tif_dir.td_imagelength) )		} else if (tif->tif_dir.td_nstrips == 1                           && !(tif->tif_flags&TIFF_ISTILED)                           && _TIFFFillStriles(tif)			   && tif->tif_dir.td_stripoffset[0] != 0			   && BYTECOUNTLOOKSBAD) {			/*			 * XXX: Plexus (and others) sometimes give a value of			 * zero for a tag when they don't know what the			 * correct value is!  Try and handle the simple case			 * of estimating the size of a one strip image.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength");			if(EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#if !defined(DEFER_STRILE_LOAD)		} else if (tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2			   && tif->tif_dir.td_compression == COMPRESSION_NONE			   && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]			   && tif->tif_dir.td_stripbytecount[0] != 0			   && tif->tif_dir.td_stripbytecount[1] != 0 ) {			/*			 * XXX: Some vendors fill StripByteCount array with			 * absolutely wrong values (it can be equal to			 * StripOffset array, for example). Catch this case			 * here.                         *                         * We avoid this check if deferring strile loading                         * as it would always force us to load the strip/tile                         * information.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#endif /* !defined(DEFER_STRILE_LOAD) */                        		}	}
if (!TIFFFieldSet(tif, FIELD_STRIPBYTECOUNTS)) {			/*			 * Some manufacturers violate the spec by not giving			 * the size of the strips.  In this case, assume there			 * is one uncompressed strip of data.			 */			if ((tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&			    tif->tif_dir.td_nstrips > 1) ||			    (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&			     tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel)) {			    MissingRequired(tif, "StripByteCounts");			    goto bad;			}			TIFFWarningExt(tif->tif_clientdata, module,				"TIFF directory is missing required "				"\"StripByteCounts\" field, calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;		/*		 * Assume we have wrong StripByteCount value (in case		 * of single strip) in following cases:		 *   - it is equal to zero along with StripOffset;		 *   - it is larger than file itself (in case of uncompressed		 *     image);		 *   - it is smaller than the size of the bytes per row		 *     multiplied on the number of rows.  The last case should		 *     not be checked in the case of writing new image,		 *     because we may do not know the exact strip size		 *     until the whole image will be written and directory		 *     dumped out.		 */		#define	BYTECOUNTLOOKSBAD \		    ( (tif->tif_dir.td_stripbytecount[0] == 0 && tif->tif_dir.td_stripoffset[0] != 0) || \		      (tif->tif_dir.td_compression == COMPRESSION_NONE && \		       (tif->tif_dir.td_stripoffset[0] <= TIFFGetFileSize(tif) && \		        tif->tif_dir.td_stripbytecount[0] > TIFFGetFileSize(tif) - tif->tif_dir.td_stripoffset[0])) || \		      (tif->tif_mode == O_RDONLY && \		       tif->tif_dir.td_compression == COMPRESSION_NONE && \		       tif->tif_dir.td_stripbytecount[0] < TIFFScanlineSize64(tif) * tif->tif_dir.td_imagelength) )		} else if (tif->tif_dir.td_nstrips == 1                           && !(tif->tif_flags&TIFF_ISTILED)                           && _TIFFFillStriles(tif)			   && tif->tif_dir.td_stripoffset[0] != 0			   && BYTECOUNTLOOKSBAD) {			/*			 * XXX: Plexus (and others) sometimes give a value of			 * zero for a tag when they don't know what the			 * correct value is!  Try and handle the simple case			 * of estimating the size of a one strip image.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength");			if(EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#if !defined(DEFER_STRILE_LOAD)		} else if (tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2			   && tif->tif_dir.td_compression == COMPRESSION_NONE			   && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]			   && tif->tif_dir.td_stripbytecount[0] != 0			   && tif->tif_dir.td_stripbytecount[1] != 0 ) {			/*			 * XXX: Some vendors fill StripByteCount array with			 * absolutely wrong values (it can be equal to			 * StripOffset array, for example). Catch this case			 * here.                         *                         * We avoid this check if deferring strile loading                         * as it would always force us to load the strip/tile                         * information.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#endif /* !defined(DEFER_STRILE_LOAD) */                        		}
!TIFFFieldSet(tif, FIELD_STRIPBYTECOUNTS)
TIFFFieldSet(tif, FIELD_STRIPBYTECOUNTS)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_STRIPBYTECOUNTS
FIELD_STRIPBYTECOUNTS
{			/*			 * Some manufacturers violate the spec by not giving			 * the size of the strips.  In this case, assume there			 * is one uncompressed strip of data.			 */			if ((tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&			    tif->tif_dir.td_nstrips > 1) ||			    (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&			     tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel)) {			    MissingRequired(tif, "StripByteCounts");			    goto bad;			}			TIFFWarningExt(tif->tif_clientdata, module,				"TIFF directory is missing required "				"\"StripByteCounts\" field, calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;		/*		 * Assume we have wrong StripByteCount value (in case		 * of single strip) in following cases:		 *   - it is equal to zero along with StripOffset;		 *   - it is larger than file itself (in case of uncompressed		 *     image);		 *   - it is smaller than the size of the bytes per row		 *     multiplied on the number of rows.  The last case should		 *     not be checked in the case of writing new image,		 *     because we may do not know the exact strip size		 *     until the whole image will be written and directory		 *     dumped out.		 */		#define	BYTECOUNTLOOKSBAD \		    ( (tif->tif_dir.td_stripbytecount[0] == 0 && tif->tif_dir.td_stripoffset[0] != 0) || \		      (tif->tif_dir.td_compression == COMPRESSION_NONE && \		       (tif->tif_dir.td_stripoffset[0] <= TIFFGetFileSize(tif) && \		        tif->tif_dir.td_stripbytecount[0] > TIFFGetFileSize(tif) - tif->tif_dir.td_stripoffset[0])) || \		      (tif->tif_mode == O_RDONLY && \		       tif->tif_dir.td_compression == COMPRESSION_NONE && \		       tif->tif_dir.td_stripbytecount[0] < TIFFScanlineSize64(tif) * tif->tif_dir.td_imagelength) )		}
if ((tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&			    tif->tif_dir.td_nstrips > 1) ||			    (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&			     tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel)) {			    MissingRequired(tif, "StripByteCounts");			    goto bad;			}
(tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&			    tif->tif_dir.td_nstrips > 1) ||			    (tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&			     tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel)
(tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&			    tif->tif_dir.td_nstrips > 1)
tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG &&			    tif->tif_dir.td_nstrips > 1
tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG
tif->tif_dir.td_planarconfig
tif->tif_dir
tif
tif
tif_dir
td_planarconfig
PLANARCONFIG_CONTIG
PLANARCONFIG_CONTIG
tif->tif_dir.td_nstrips > 1
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
1
(tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&			     tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel)
tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE &&			     tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel
tif->tif_dir.td_planarconfig == PLANARCONFIG_SEPARATE
tif->tif_dir.td_planarconfig
tif->tif_dir
tif
tif
tif_dir
td_planarconfig
PLANARCONFIG_SEPARATE
PLANARCONFIG_SEPARATE
tif->tif_dir.td_nstrips != (uint32)tif->tif_dir.td_samplesperpixel
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
(uint32)tif->tif_dir.td_samplesperpixel
uint32
uint32
uint32

tif->tif_dir.td_samplesperpixel
tif->tif_dir
tif
tif
tif_dir
td_samplesperpixel
{			    MissingRequired(tif, "StripByteCounts");			    goto bad;			}
MissingRequired(tif, "StripByteCounts");
MissingRequired(tif, "StripByteCounts")
MissingRequired
MissingRequired
tif
tif
"StripByteCounts"
goto bad;
bad
TIFFWarningExt(tif->tif_clientdata, module,				"TIFF directory is missing required "				"\"StripByteCounts\" field, calculating from imagelength");
TIFFWarningExt(tif->tif_clientdata, module,				"TIFF directory is missing required "				"\"StripByteCounts\" field, calculating from imagelength")
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"TIFF directory is missing required "				"\"StripByteCounts\" field, calculating from imagelength"
if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;
EstimateStripByteCounts(tif, dir, dircount) < 0
EstimateStripByteCounts(tif, dir, dircount)
EstimateStripByteCounts
EstimateStripByteCounts
tif
tif
dir
dir
dircount
dircount
0
goto bad;
bad
if (tif->tif_dir.td_nstrips == 1                           && !(tif->tif_flags&TIFF_ISTILED)                           && _TIFFFillStriles(tif)			   && tif->tif_dir.td_stripoffset[0] != 0			   && BYTECOUNTLOOKSBAD) {			/*			 * XXX: Plexus (and others) sometimes give a value of			 * zero for a tag when they don't know what the			 * correct value is!  Try and handle the simple case			 * of estimating the size of a one strip image.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength");			if(EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#if !defined(DEFER_STRILE_LOAD)		} else if (tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2			   && tif->tif_dir.td_compression == COMPRESSION_NONE			   && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]			   && tif->tif_dir.td_stripbytecount[0] != 0			   && tif->tif_dir.td_stripbytecount[1] != 0 ) {			/*			 * XXX: Some vendors fill StripByteCount array with			 * absolutely wrong values (it can be equal to			 * StripOffset array, for example). Catch this case			 * here.                         *                         * We avoid this check if deferring strile loading                         * as it would always force us to load the strip/tile                         * information.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#endif /* !defined(DEFER_STRILE_LOAD) */                        		}
tif->tif_dir.td_nstrips == 1                           && !(tif->tif_flags&TIFF_ISTILED)                           && _TIFFFillStriles(tif)			   && tif->tif_dir.td_stripoffset[0] != 0			   && BYTECOUNTLOOKSBAD
tif->tif_dir.td_nstrips == 1                           && !(tif->tif_flags&TIFF_ISTILED)                           && _TIFFFillStriles(tif)			   && tif->tif_dir.td_stripoffset[0] != 0
tif->tif_dir.td_nstrips == 1                           && !(tif->tif_flags&TIFF_ISTILED)                           && _TIFFFillStriles(tif)
tif->tif_dir.td_nstrips == 1                           && !(tif->tif_flags&TIFF_ISTILED)
tif->tif_dir.td_nstrips == 1
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
1
!(tif->tif_flags&TIFF_ISTILED)
(tif->tif_flags&TIFF_ISTILED)
tif->tif_flags&TIFF_ISTILED
tif->tif_flags
tif
tif
tif_flags
TIFF_ISTILED
TIFF_ISTILED
_TIFFFillStriles(tif)
_TIFFFillStriles
_TIFFFillStriles
tif
tif
tif->tif_dir.td_stripoffset[0] != 0
tif->tif_dir.td_stripoffset[0]
tif->tif_dir.td_stripoffset
tif->tif_dir
tif
tif
tif_dir
td_stripoffset
0
0
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
BYTECOUNTLOOKSBAD
{			/*			 * XXX: Plexus (and others) sometimes give a value of			 * zero for a tag when they don't know what the			 * correct value is!  Try and handle the simple case			 * of estimating the size of a one strip image.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength");			if(EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#if !defined(DEFER_STRILE_LOAD)		}
TIFFWarningExt(tif->tif_clientdata, module,			    "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength");
TIFFWarningExt(tif->tif_clientdata, module,			    "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength")
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength"
if(EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;
EstimateStripByteCounts(tif, dir, dircount) < 0
EstimateStripByteCounts(tif, dir, dircount)
EstimateStripByteCounts
EstimateStripByteCounts
tif
tif
dir
dir
dircount
dircount
0
goto bad;
bad
if (tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2			   && tif->tif_dir.td_compression == COMPRESSION_NONE			   && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]			   && tif->tif_dir.td_stripbytecount[0] != 0			   && tif->tif_dir.td_stripbytecount[1] != 0 ) {			/*			 * XXX: Some vendors fill StripByteCount array with			 * absolutely wrong values (it can be equal to			 * StripOffset array, for example). Catch this case			 * here.                         *                         * We avoid this check if deferring strile loading                         * as it would always force us to load the strip/tile                         * information.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#endif /* !defined(DEFER_STRILE_LOAD) */                        		}
tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2			   && tif->tif_dir.td_compression == COMPRESSION_NONE			   && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]			   && tif->tif_dir.td_stripbytecount[0] != 0			   && tif->tif_dir.td_stripbytecount[1] != 0
tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2			   && tif->tif_dir.td_compression == COMPRESSION_NONE			   && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]			   && tif->tif_dir.td_stripbytecount[0] != 0
tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2			   && tif->tif_dir.td_compression == COMPRESSION_NONE			   && tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]
tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2			   && tif->tif_dir.td_compression == COMPRESSION_NONE
tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG			   && tif->tif_dir.td_nstrips > 2
tif->tif_dir.td_planarconfig == PLANARCONFIG_CONTIG
tif->tif_dir.td_planarconfig
tif->tif_dir
tif
tif
tif_dir
td_planarconfig
PLANARCONFIG_CONTIG
PLANARCONFIG_CONTIG
tif->tif_dir.td_nstrips > 2
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
2
tif->tif_dir.td_compression == COMPRESSION_NONE
tif->tif_dir.td_compression
tif->tif_dir
tif
tif
tif_dir
td_compression
COMPRESSION_NONE
COMPRESSION_NONE
tif->tif_dir.td_stripbytecount[0] != tif->tif_dir.td_stripbytecount[1]
tif->tif_dir.td_stripbytecount[0]
tif->tif_dir.td_stripbytecount
tif->tif_dir
tif
tif
tif_dir
td_stripbytecount
0
tif->tif_dir.td_stripbytecount[1]
tif->tif_dir.td_stripbytecount
tif->tif_dir
tif
tif
tif_dir
td_stripbytecount
1
tif->tif_dir.td_stripbytecount[0] != 0
tif->tif_dir.td_stripbytecount[0]
tif->tif_dir.td_stripbytecount
tif->tif_dir
tif
tif
tif_dir
td_stripbytecount
0
0
tif->tif_dir.td_stripbytecount[1] != 0
tif->tif_dir.td_stripbytecount[1]
tif->tif_dir.td_stripbytecount
tif->tif_dir
tif
tif
tif_dir
td_stripbytecount
1
0
{			/*			 * XXX: Some vendors fill StripByteCount array with			 * absolutely wrong values (it can be equal to			 * StripOffset array, for example). Catch this case			 * here.                         *                         * We avoid this check if deferring strile loading                         * as it would always force us to load the strip/tile                         * information.			 */			TIFFWarningExt(tif->tif_clientdata, module,			    "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength");			if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;#endif /* !defined(DEFER_STRILE_LOAD) */                        		}
TIFFWarningExt(tif->tif_clientdata, module,			    "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength");
TIFFWarningExt(tif->tif_clientdata, module,			    "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength")
TIFFWarningExt
TIFFWarningExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength"
if (EstimateStripByteCounts(tif, dir, dircount) < 0)			    goto bad;
EstimateStripByteCounts(tif, dir, dircount) < 0
EstimateStripByteCounts(tif, dir, dircount)
EstimateStripByteCounts
EstimateStripByteCounts
tif
tif
dir
dir
dircount
dircount
0
goto bad;
bad
if (dir)	{		_TIFFfree(dir);		dir=NULL;	}
dir
dir
{		_TIFFfree(dir);		dir=NULL;	}
_TIFFfree(dir);
_TIFFfree(dir)
_TIFFfree
_TIFFfree
dir
dir
dir=NULL;
dir=NULL
dir
dir
NULL
NULL
if (!TIFFFieldSet(tif, FIELD_MAXSAMPLEVALUE))	{		if (tif->tif_dir.td_bitspersample>=16)			tif->tif_dir.td_maxsamplevalue=0xFFFF;		else			tif->tif_dir.td_maxsamplevalue = (uint16)((1L<<tif->tif_dir.td_bitspersample)-1);	}
!TIFFFieldSet(tif, FIELD_MAXSAMPLEVALUE)
TIFFFieldSet(tif, FIELD_MAXSAMPLEVALUE)
TIFFFieldSet
TIFFFieldSet
tif
tif
FIELD_MAXSAMPLEVALUE
FIELD_MAXSAMPLEVALUE
{		if (tif->tif_dir.td_bitspersample>=16)			tif->tif_dir.td_maxsamplevalue=0xFFFF;		else			tif->tif_dir.td_maxsamplevalue = (uint16)((1L<<tif->tif_dir.td_bitspersample)-1);	}
if (tif->tif_dir.td_bitspersample>=16)			tif->tif_dir.td_maxsamplevalue=0xFFFF;		else			tif->tif_dir.td_maxsamplevalue = (uint16)((1L<<tif->tif_dir.td_bitspersample)-1);
tif->tif_dir.td_bitspersample>=16
tif->tif_dir.td_bitspersample
tif->tif_dir
tif
tif
tif_dir
td_bitspersample
16
tif->tif_dir.td_maxsamplevalue=0xFFFF;
tif->tif_dir.td_maxsamplevalue=0xFFFF
tif->tif_dir.td_maxsamplevalue
tif->tif_dir
tif
tif
tif_dir
td_maxsamplevalue
0xFFFF
tif->tif_dir.td_maxsamplevalue = (uint16)((1L<<tif->tif_dir.td_bitspersample)-1);
tif->tif_dir.td_maxsamplevalue = (uint16)((1L<<tif->tif_dir.td_bitspersample)-1)
tif->tif_dir.td_maxsamplevalue
tif->tif_dir
tif
tif
tif_dir
td_maxsamplevalue
(uint16)((1L<<tif->tif_dir.td_bitspersample)-1)
(uint16)
uint16
uint16
(1L<<tif->tif_dir.td_bitspersample)-1
(1L<<tif->tif_dir.td_bitspersample)
1L<<tif->tif_dir.td_bitspersample
1L
tif->tif_dir.td_bitspersample
tif->tif_dir
tif
tif
tif_dir
td_bitspersample
1
if (tif->tif_dir.td_nstrips > 1) {		uint32 strip;		tif->tif_dir.td_stripbytecountsorted = 1;		for (strip = 1; strip < tif->tif_dir.td_nstrips; strip++) {			if (tif->tif_dir.td_stripoffset[strip - 1] >			    tif->tif_dir.td_stripoffset[strip]) {				tif->tif_dir.td_stripbytecountsorted = 0;				break;			}		}	}
tif->tif_dir.td_nstrips > 1
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
1
{		uint32 strip;		tif->tif_dir.td_stripbytecountsorted = 1;		for (strip = 1; strip < tif->tif_dir.td_nstrips; strip++) {			if (tif->tif_dir.td_stripoffset[strip - 1] >			    tif->tif_dir.td_stripoffset[strip]) {				tif->tif_dir.td_stripbytecountsorted = 0;				break;			}		}	}
uint32 strip;
uint32 strip;
uint32
uint32
strip
strip
tif->tif_dir.td_stripbytecountsorted = 1;
tif->tif_dir.td_stripbytecountsorted = 1
tif->tif_dir.td_stripbytecountsorted
tif->tif_dir
tif
tif
tif_dir
td_stripbytecountsorted
1
for (strip = 1; strip < tif->tif_dir.td_nstrips; strip++) {			if (tif->tif_dir.td_stripoffset[strip - 1] >			    tif->tif_dir.td_stripoffset[strip]) {				tif->tif_dir.td_stripbytecountsorted = 0;				break;			}		}
strip = 1;
strip = 1
strip
strip
1
strip < tif->tif_dir.td_nstrips
strip
strip
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
strip++
strip
strip
{			if (tif->tif_dir.td_stripoffset[strip - 1] >			    tif->tif_dir.td_stripoffset[strip]) {				tif->tif_dir.td_stripbytecountsorted = 0;				break;			}		}
if (tif->tif_dir.td_stripoffset[strip - 1] >			    tif->tif_dir.td_stripoffset[strip]) {				tif->tif_dir.td_stripbytecountsorted = 0;				break;			}
tif->tif_dir.td_stripoffset[strip - 1] >			    tif->tif_dir.td_stripoffset[strip]
tif->tif_dir.td_stripoffset[strip - 1]
tif->tif_dir.td_stripoffset
tif->tif_dir
tif
tif
tif_dir
td_stripoffset
strip - 1
strip
strip
1
tif->tif_dir.td_stripoffset[strip]
tif->tif_dir.td_stripoffset
tif->tif_dir
tif
tif
tif_dir
td_stripoffset
strip
strip
{				tif->tif_dir.td_stripbytecountsorted = 0;				break;			}
tif->tif_dir.td_stripbytecountsorted = 0;
tif->tif_dir.td_stripbytecountsorted = 0
tif->tif_dir.td_stripbytecountsorted
tif->tif_dir
tif
tif
tif_dir
td_stripbytecountsorted
0
break;
(*tif->tif_fixuptags)(tif);
(*tif->tif_fixuptags)(tif)
(*tif->tif_fixuptags)
*tif->tif_fixuptags
tif->tif_fixuptags
tif
tif
tif_fixuptags
tif
tif
if ((tif->tif_dir.td_planarconfig==PLANARCONFIG_CONTIG)&&	    (tif->tif_dir.td_nstrips==1)&&	    (tif->tif_dir.td_compression==COMPRESSION_NONE)&&  	    ((tif->tif_flags&(TIFF_STRIPCHOP|TIFF_ISTILED))==TIFF_STRIPCHOP))    {        if ( !_TIFFFillStriles(tif) || !tif->tif_dir.td_stripbytecount )            return 0;		ChopUpSingleUncompressedStrip(tif);    }
(tif->tif_dir.td_planarconfig==PLANARCONFIG_CONTIG)&&	    (tif->tif_dir.td_nstrips==1)&&	    (tif->tif_dir.td_compression==COMPRESSION_NONE)&&  	    ((tif->tif_flags&(TIFF_STRIPCHOP|TIFF_ISTILED))==TIFF_STRIPCHOP)
(tif->tif_dir.td_planarconfig==PLANARCONFIG_CONTIG)&&	    (tif->tif_dir.td_nstrips==1)&&	    (tif->tif_dir.td_compression==COMPRESSION_NONE)
(tif->tif_dir.td_planarconfig==PLANARCONFIG_CONTIG)&&	    (tif->tif_dir.td_nstrips==1)
(tif->tif_dir.td_planarconfig==PLANARCONFIG_CONTIG)
tif->tif_dir.td_planarconfig==PLANARCONFIG_CONTIG
tif->tif_dir.td_planarconfig
tif->tif_dir
tif
tif
tif_dir
td_planarconfig
PLANARCONFIG_CONTIG
PLANARCONFIG_CONTIG
(tif->tif_dir.td_nstrips==1)
tif->tif_dir.td_nstrips==1
tif->tif_dir.td_nstrips
tif->tif_dir
tif
tif
tif_dir
td_nstrips
1
(tif->tif_dir.td_compression==COMPRESSION_NONE)
tif->tif_dir.td_compression==COMPRESSION_NONE
tif->tif_dir.td_compression
tif->tif_dir
tif
tif
tif_dir
td_compression
COMPRESSION_NONE
COMPRESSION_NONE
((tif->tif_flags&(TIFF_STRIPCHOP|TIFF_ISTILED))==TIFF_STRIPCHOP)
(tif->tif_flags&(TIFF_STRIPCHOP|TIFF_ISTILED))==TIFF_STRIPCHOP
(tif->tif_flags&(TIFF_STRIPCHOP|TIFF_ISTILED))
tif->tif_flags&(TIFF_STRIPCHOP|TIFF_ISTILED)
tif->tif_flags
tif
tif
tif_flags
(TIFF_STRIPCHOP|TIFF_ISTILED)
TIFF_STRIPCHOP|TIFF_ISTILED
TIFF_STRIPCHOP
TIFF_STRIPCHOP
TIFF_ISTILED
TIFF_ISTILED
TIFF_STRIPCHOP
TIFF_STRIPCHOP
{        if ( !_TIFFFillStriles(tif) || !tif->tif_dir.td_stripbytecount )            return 0;		ChopUpSingleUncompressedStrip(tif);    }
if ( !_TIFFFillStriles(tif) || !tif->tif_dir.td_stripbytecount )            return 0;
!_TIFFFillStriles(tif) || !tif->tif_dir.td_stripbytecount
!_TIFFFillStriles(tif)
_TIFFFillStriles(tif)
_TIFFFillStriles
_TIFFFillStriles
tif
tif
!tif->tif_dir.td_stripbytecount
tif->tif_dir.td_stripbytecount
tif->tif_dir
tif
tif
tif_dir
td_stripbytecount
return 0;
0
ChopUpSingleUncompressedStrip(tif);
ChopUpSingleUncompressedStrip(tif)
ChopUpSingleUncompressedStrip
ChopUpSingleUncompressedStrip
tif
tif
tif->tif_flags &= ~TIFF_DIRTYDIRECT;
tif->tif_flags &= ~TIFF_DIRTYDIRECT
tif->tif_flags
tif
tif
tif_flags
~TIFF_DIRTYDIRECT
TIFF_DIRTYDIRECT
TIFF_DIRTYDIRECT
tif->tif_flags &= ~TIFF_DIRTYSTRIP;
tif->tif_flags &= ~TIFF_DIRTYSTRIP
tif->tif_flags
tif
tif
tif_flags
~TIFF_DIRTYSTRIP
TIFF_DIRTYSTRIP
TIFF_DIRTYSTRIP
tif->tif_row = (uint32) -1;
tif->tif_row = (uint32) -1
tif->tif_row
tif
tif
tif_row
(uint32) -1
(uint32)
uint32
uint32
1
tif->tif_curstrip = (uint32) -1;
tif->tif_curstrip = (uint32) -1
tif->tif_curstrip
tif
tif
tif_curstrip
(uint32) -1
(uint32)
uint32
uint32
1
tif->tif_col = (uint32) -1;
tif->tif_col = (uint32) -1
tif->tif_col
tif
tif
tif_col
(uint32) -1
(uint32)
uint32
uint32
1
tif->tif_curtile = (uint32) -1;
tif->tif_curtile = (uint32) -1
tif->tif_curtile
tif
tif
tif_curtile
(uint32) -1
(uint32)
uint32
uint32
1
tif->tif_tilesize = (tmsize_t) -1;
tif->tif_tilesize = (tmsize_t) -1
tif->tif_tilesize
tif
tif
tif_tilesize
(tmsize_t) -1
(tmsize_t)
tmsize_t
tmsize_t
1
tif->tif_scanlinesize = TIFFScanlineSize(tif);
tif->tif_scanlinesize = TIFFScanlineSize(tif)
tif->tif_scanlinesize
tif
tif
tif_scanlinesize
TIFFScanlineSize(tif)
TIFFScanlineSize
TIFFScanlineSize
tif
tif
if (!tif->tif_scanlinesize) {		TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero scanline size");		return (0);	}
!tif->tif_scanlinesize
tif->tif_scanlinesize
tif
tif
tif_scanlinesize
{		TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero scanline size");		return (0);	}
TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero scanline size");
TIFFErrorExt(tif->tif_clientdata, module,		    "Cannot handle zero scanline size")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Cannot handle zero scanline size"
return (0);
(0)
0
if (isTiled(tif)) {		tif->tif_tilesize = TIFFTileSize(tif);		if (!tif->tif_tilesize) {			TIFFErrorExt(tif->tif_clientdata, module,			     "Cannot handle zero tile size");			return (0);		}	} else {		if (!TIFFStripSize(tif)) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Cannot handle zero strip size");			return (0);		}	}
isTiled(tif)
isTiled
isTiled
tif
tif
{		tif->tif_tilesize = TIFFTileSize(tif);		if (!tif->tif_tilesize) {			TIFFErrorExt(tif->tif_clientdata, module,			     "Cannot handle zero tile size");			return (0);		}	}
tif->tif_tilesize = TIFFTileSize(tif);
tif->tif_tilesize = TIFFTileSize(tif)
tif->tif_tilesize
tif
tif
tif_tilesize
TIFFTileSize(tif)
TIFFTileSize
TIFFTileSize
tif
tif
if (!tif->tif_tilesize) {			TIFFErrorExt(tif->tif_clientdata, module,			     "Cannot handle zero tile size");			return (0);		}
!tif->tif_tilesize
tif->tif_tilesize
tif
tif
tif_tilesize
{			TIFFErrorExt(tif->tif_clientdata, module,			     "Cannot handle zero tile size");			return (0);		}
TIFFErrorExt(tif->tif_clientdata, module,			     "Cannot handle zero tile size");
TIFFErrorExt(tif->tif_clientdata, module,			     "Cannot handle zero tile size")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Cannot handle zero tile size"
return (0);
(0)
0
{		if (!TIFFStripSize(tif)) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Cannot handle zero strip size");			return (0);		}	}
if (!TIFFStripSize(tif)) {			TIFFErrorExt(tif->tif_clientdata, module,			    "Cannot handle zero strip size");			return (0);		}
!TIFFStripSize(tif)
TIFFStripSize(tif)
TIFFStripSize
TIFFStripSize
tif
tif
{			TIFFErrorExt(tif->tif_clientdata, module,			    "Cannot handle zero strip size");			return (0);		}
TIFFErrorExt(tif->tif_clientdata, module,			    "Cannot handle zero strip size");
TIFFErrorExt(tif->tif_clientdata, module,			    "Cannot handle zero strip size")
TIFFErrorExt
TIFFErrorExt
tif->tif_clientdata
tif
tif
tif_clientdata
module
module
"Cannot handle zero strip size"
return (0);
(0)
0
return (1);
(1)
1
bad:	if (dir)		_TIFFfree(dir);
bad
if (dir)		_TIFFfree(dir);
dir
dir
_TIFFfree(dir);
_TIFFfree(dir)
_TIFFfree
_TIFFfree
dir
dir
return (0);
(0)
0
-----joern-----
(2,6,0)
(4,6,0)
(9,3,0)
(4,1,0)
(5,7,0)
(7,0,0)
(10,7,0)
(8,1,0)
(4,6,1)
(1,8,1)
(2,7,1)
(8,7,1)
(10,5,1)
(7,0,1)
(4,1,1)
(6,2,1)
(7,10,1)
(2,7,2)
(6,7,2)
(7,0,2)
(1,7,2)
(4,6,2)
(8,7,2)
(4,1,2)
-----------------------------------
(0,uint64 value)
(1,return(TIFFReadDirEntryErrOk)
(2,TIFFReadDirEntryErrRange)
(3,)
(4,RET)
(5,value)
(6,return(TIFFReadDirEntryErrRange)
(7,value > TIFF_INT64_MAX)
(8,TIFFReadDirEntryErrOk)
(9,if (value > TIFF_INT64_MAX)
(10,TIFF_INT64_MAX)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff54edb46300000000ffffffffffffffff95eeb46300000000ffffffffffffffff95eeb46300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x4d4d002a00000010ffffffffffffffff1100ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
int TIFFReadDirectory(TIFF* tif) {
static const char module[] = 'TIFFReadDirectory';
TIFFDirEntry* dir;
uint16 dircount;
TIFFDirEntry* dp;
uint16 di;
const TIFFField* fip;
uint32 fii=FAILED_FII;
toff_t nextdiroff;
int bitspersample_read = FALSE;
tif->tif_diroff=tif->tif_nextdiroff;
(*tif->tif_cleanup)(tif);
tif->tif_curdir++;
nextdiroff = tif->tif_nextdiroff;
dircount=TIFFFetchDirectory(tif,nextdiroff,&dir,&tif->tif_nextdiroff);
if(!dircount)
TIFFErrorExt(tif->tif_clientdata,module, 		    'Failed to read directory at offset ' TIFF_UINT64_FORMAT,nextdiroff);
return 0;
=======================
