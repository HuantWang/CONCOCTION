-----label-----
0
-----code-----
jas_stream_t *jas_stream_fopen(const char *filename, const char *mode)
{
	jas_stream_t *stream;
	jas_stream_fileobj_t *obj;
	int openflags;

	/* Allocate a stream object. */
	if (!(stream = jas_stream_create())) {
		return 0;
	}

	/* Parse the mode string. */
	stream->openmode_ = jas_strtoopenmode(mode);

	/* Determine the correct flags to use for opening the file. */
	if ((stream->openmode_ & JAS_STREAM_READ) &&
	  (stream->openmode_ & JAS_STREAM_WRITE)) {
		openflags = O_RDWR;
	} else if (stream->openmode_ & JAS_STREAM_READ) {
		openflags = O_RDONLY;
	} else if (stream->openmode_ & JAS_STREAM_WRITE) {
		openflags = O_WRONLY;
	} else {
		openflags = 0;
	}
	if (stream->openmode_ & JAS_STREAM_APPEND) {
		openflags |= O_APPEND;
	}
	if (stream->openmode_ & JAS_STREAM_BINARY) {
		openflags |= O_BINARY;
	}
	if (stream->openmode_ & JAS_STREAM_CREATE) {
		openflags |= O_CREAT | O_TRUNC;
	}

	/* Allocate space for the underlying file stream object. */
	if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {
		jas_stream_destroy(stream);
		return 0;
	}
	obj->fd = -1;
	obj->flags = 0;
	obj->pathname[0] = '\0';
	stream->obj_ = (void *) obj;

	/* Select the operations for a file stream object. */
	stream->ops_ = &jas_stream_fileops;

	/* Open the underlying file. */
	if ((obj->fd = open(filename, openflags, JAS_STREAM_PERMS)) < 0) {
		jas_stream_destroy(stream);
		return 0;
	}

	/* By default, use full buffering for this type of stream. */
	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);

	return stream;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
9,11
12,13
12,14
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
35,36
37,38
37,39
38,39
39,40
40,41
40,42
41,42
43,44
44,45
46,47
47,48
49,50
50,51
50,52
51,52
51,53
52,53
55,56
55,57
56,57
58,59
60,61
60,62
60,63
61,62
61,63
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
71,72
71,73
72,73
72,74
73,74
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
86,88
87,88
87,89
88,89
91,92
93,94
94,95
95,96
95,97
96,97
98,99
100,101
100,102
100,103
101,102
101,103
102,103
102,104
103,104
106,107
108,109
109,110
110,111
110,112
111,112
113,114
115,116
116,117
117,118
117,119
118,119
121,122
121,123
122,123
122,124
123,124
123,125
124,125
127,128
129,130
130,131
131,132
131,133
132,133
134,135
136,137
136,138
137,138
137,139
138,139
138,140
139,140
142,143
144,145
145,146
146,147
146,148
147,148
149,150
151,152
151,153
152,153
152,154
153,154
153,155
154,155
157,158
159,160
160,161
161,162
161,163
162,163
164,165
164,166
165,166
167,168
169,170
169,171
170,171
171,172
172,173
172,174
173,174
175,176
175,177
176,177
178,179
179,180
179,181
180,181
183,184
183,185
184,185
185,186
185,187
186,187
188,189
190,191
192,193
193,194
193,195
194,195
194,196
195,196
198,199
200,201
201,202
201,203
202,203
202,204
203,204
207,208
208,209
208,210
209,210
209,211
210,211
210,212
211,212
216,217
217,218
217,219
218,219
218,220
219,220
222,223
222,224
223,224
223,225
225,226
227,228
229,230
230,231
230,232
231,232
231,233
232,233
235,236
236,237
238,239
238,240
239,240
239,241
240,241
241,242
241,243
242,243
242,244
243,244
246,247
246,248
246,249
246,250
247,248
249,250
251,252
253,254
256,257
256,258
257,258
258,259
258,260
259,260
261,262
263,264
265,266
266,267
266,268
266,269
266,270
266,271
267,268
269,270
271,272
275,276
276,277
-----nextToken-----
3,5,6,8,10,11,13,15,16,21,23,24,28,30,31,34,36,42,45,48,53,54,57,59,66,67,69,74,75,77,82,84,89,90,92,97,99,104,105,107,112,114,119,120,125,126,128,133,135,140,141,143,148,150,155,156,158,163,166,168,174,177,181,182,187,189,191,196,197,199,204,205,206,212,213,214,215,220,221,224,226,228,233,234,237,244,245,248,250,252,254,255,260,262,264,268,270,272,273,274,277
-----computeFrom-----
40,41
40,42
50,51
50,52
61,62
61,63
63,64
63,65
71,72
71,73
80,81
80,82
86,87
86,88
95,96
95,97
101,102
101,103
110,111
110,112
117,118
117,119
122,123
122,124
131,132
131,133
137,138
137,139
146,147
146,148
152,153
152,154
161,162
161,163
164,165
164,166
172,173
172,174
193,194
193,195
201,202
201,203
208,209
208,210
217,218
217,219
230,231
230,232
239,240
239,241
241,242
241,243
-----guardedBy-----
-----guardedByNegation-----
74,104
69,92
75,105
77,107
89,104
90,105
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
jas_stream_t *jas_stream_fopen(const char *filename, const char *mode){	jas_stream_t *stream;	jas_stream_fileobj_t *obj;	int openflags;	/* Allocate a stream object. */	if (!(stream = jas_stream_create())) {		return 0;	}	/* Parse the mode string. */	stream->openmode_ = jas_strtoopenmode(mode);	/* Determine the correct flags to use for opening the file. */	if ((stream->openmode_ & JAS_STREAM_READ) &&	  (stream->openmode_ & JAS_STREAM_WRITE)) {		openflags = O_RDWR;	} else if (stream->openmode_ & JAS_STREAM_READ) {		openflags = O_RDONLY;	} else if (stream->openmode_ & JAS_STREAM_WRITE) {		openflags = O_WRONLY;	} else {		openflags = 0;	}	if (stream->openmode_ & JAS_STREAM_APPEND) {		openflags |= O_APPEND;	}	if (stream->openmode_ & JAS_STREAM_BINARY) {		openflags |= O_BINARY;	}	if (stream->openmode_ & JAS_STREAM_CREATE) {		openflags |= O_CREAT | O_TRUNC;	}	/* Allocate space for the underlying file stream object. */	if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	obj->fd = -1;	obj->flags = 0;	obj->pathname[0] = '\0';	stream->obj_ = (void *) obj;	/* Select the operations for a file stream object. */	stream->ops_ = &jas_stream_fileops;	/* Open the underlying file. */	if ((obj->fd = open(filename, openflags, JAS_STREAM_PERMS)) < 0) {		jas_stream_destroy(stream);		return 0;	}	/* By default, use full buffering for this type of stream. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	return stream;}
jas_stream_t
jas_stream_t
*jas_stream_fopen(const char *filename, const char *mode)
*
jas_stream_fopen
const char *filename
const char
*filename
*
filename
const char *mode
const char
*mode
*
mode
{	jas_stream_t *stream;	jas_stream_fileobj_t *obj;	int openflags;	/* Allocate a stream object. */	if (!(stream = jas_stream_create())) {		return 0;	}	/* Parse the mode string. */	stream->openmode_ = jas_strtoopenmode(mode);	/* Determine the correct flags to use for opening the file. */	if ((stream->openmode_ & JAS_STREAM_READ) &&	  (stream->openmode_ & JAS_STREAM_WRITE)) {		openflags = O_RDWR;	} else if (stream->openmode_ & JAS_STREAM_READ) {		openflags = O_RDONLY;	} else if (stream->openmode_ & JAS_STREAM_WRITE) {		openflags = O_WRONLY;	} else {		openflags = 0;	}	if (stream->openmode_ & JAS_STREAM_APPEND) {		openflags |= O_APPEND;	}	if (stream->openmode_ & JAS_STREAM_BINARY) {		openflags |= O_BINARY;	}	if (stream->openmode_ & JAS_STREAM_CREATE) {		openflags |= O_CREAT | O_TRUNC;	}	/* Allocate space for the underlying file stream object. */	if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	obj->fd = -1;	obj->flags = 0;	obj->pathname[0] = '\0';	stream->obj_ = (void *) obj;	/* Select the operations for a file stream object. */	stream->ops_ = &jas_stream_fileops;	/* Open the underlying file. */	if ((obj->fd = open(filename, openflags, JAS_STREAM_PERMS)) < 0) {		jas_stream_destroy(stream);		return 0;	}	/* By default, use full buffering for this type of stream. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	return stream;}
jas_stream_t *stream;
jas_stream_t *stream;
jas_stream_t
jas_stream_t
*stream
*
stream
jas_stream_fileobj_t *obj;
jas_stream_fileobj_t *obj;
jas_stream_fileobj_t
jas_stream_fileobj_t
*obj
*
obj
int openflags;
int openflags;
int
openflags
openflags
if (!(stream = jas_stream_create())) {		return 0;	}
!(stream = jas_stream_create())
(stream = jas_stream_create())
stream = jas_stream_create()
stream
stream
jas_stream_create()
jas_stream_create
jas_stream_create
{		return 0;	}
return 0;
0
stream->openmode_ = jas_strtoopenmode(mode);
stream->openmode_ = jas_strtoopenmode(mode)
stream->openmode_
stream
stream
openmode_
jas_strtoopenmode(mode)
jas_strtoopenmode
jas_strtoopenmode
mode
mode
if ((stream->openmode_ & JAS_STREAM_READ) &&	  (stream->openmode_ & JAS_STREAM_WRITE)) {		openflags = O_RDWR;	} else if (stream->openmode_ & JAS_STREAM_READ) {		openflags = O_RDONLY;	} else if (stream->openmode_ & JAS_STREAM_WRITE) {		openflags = O_WRONLY;	} else {		openflags = 0;	}
(stream->openmode_ & JAS_STREAM_READ) &&	  (stream->openmode_ & JAS_STREAM_WRITE)
(stream->openmode_ & JAS_STREAM_READ)
stream->openmode_ & JAS_STREAM_READ
stream->openmode_
stream
stream
openmode_
JAS_STREAM_READ
JAS_STREAM_READ
(stream->openmode_ & JAS_STREAM_WRITE)
stream->openmode_ & JAS_STREAM_WRITE
stream->openmode_
stream
stream
openmode_
JAS_STREAM_WRITE
JAS_STREAM_WRITE
{		openflags = O_RDWR;	}
openflags = O_RDWR;
openflags = O_RDWR
openflags
openflags
O_RDWR
O_RDWR
if (stream->openmode_ & JAS_STREAM_READ) {		openflags = O_RDONLY;	} else if (stream->openmode_ & JAS_STREAM_WRITE) {		openflags = O_WRONLY;	} else {		openflags = 0;	}
stream->openmode_ & JAS_STREAM_READ
stream->openmode_
stream
stream
openmode_
JAS_STREAM_READ
JAS_STREAM_READ
{		openflags = O_RDONLY;	}
openflags = O_RDONLY;
openflags = O_RDONLY
openflags
openflags
O_RDONLY
O_RDONLY
if (stream->openmode_ & JAS_STREAM_WRITE) {		openflags = O_WRONLY;	} else {		openflags = 0;	}
stream->openmode_ & JAS_STREAM_WRITE
stream->openmode_
stream
stream
openmode_
JAS_STREAM_WRITE
JAS_STREAM_WRITE
{		openflags = O_WRONLY;	}
openflags = O_WRONLY;
openflags = O_WRONLY
openflags
openflags
O_WRONLY
O_WRONLY
{		openflags = 0;	}
openflags = 0;
openflags = 0
openflags
openflags
0
if (stream->openmode_ & JAS_STREAM_APPEND) {		openflags |= O_APPEND;	}
stream->openmode_ & JAS_STREAM_APPEND
stream->openmode_
stream
stream
openmode_
JAS_STREAM_APPEND
JAS_STREAM_APPEND
{		openflags |= O_APPEND;	}
openflags |= O_APPEND;
openflags |= O_APPEND
openflags
openflags
O_APPEND
O_APPEND
if (stream->openmode_ & JAS_STREAM_BINARY) {		openflags |= O_BINARY;	}
stream->openmode_ & JAS_STREAM_BINARY
stream->openmode_
stream
stream
openmode_
JAS_STREAM_BINARY
JAS_STREAM_BINARY
{		openflags |= O_BINARY;	}
openflags |= O_BINARY;
openflags |= O_BINARY
openflags
openflags
O_BINARY
O_BINARY
if (stream->openmode_ & JAS_STREAM_CREATE) {		openflags |= O_CREAT | O_TRUNC;	}
stream->openmode_ & JAS_STREAM_CREATE
stream->openmode_
stream
stream
openmode_
JAS_STREAM_CREATE
JAS_STREAM_CREATE
{		openflags |= O_CREAT | O_TRUNC;	}
openflags |= O_CREAT | O_TRUNC;
openflags |= O_CREAT | O_TRUNC
openflags
openflags
O_CREAT | O_TRUNC
O_CREAT
O_CREAT
O_TRUNC
O_TRUNC
if (!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))) {		jas_stream_destroy(stream);		return 0;	}
!(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))
(obj = jas_malloc(sizeof(jas_stream_fileobj_t)))
obj = jas_malloc(sizeof(jas_stream_fileobj_t))
obj
obj
jas_malloc(sizeof(jas_stream_fileobj_t))
jas_malloc
jas_malloc
sizeof(jas_stream_fileobj_t)
jas_stream_fileobj_t
jas_stream_fileobj_t
jas_stream_fileobj_t

{		jas_stream_destroy(stream);		return 0;	}
jas_stream_destroy(stream);
jas_stream_destroy(stream)
jas_stream_destroy
jas_stream_destroy
stream
stream
return 0;
0
obj->fd = -1;
obj->fd = -1
obj->fd
obj
obj
fd
-1
1
obj->flags = 0;
obj->flags = 0
obj->flags
obj
obj
flags
0
obj->pathname[0] = '\0';
obj->pathname[0] = '\0'
obj->pathname[0]
obj->pathname
obj
obj
pathname
0
'\0'
stream->obj_ = (void *) obj;
stream->obj_ = (void *) obj
stream->obj_
stream
stream
obj_
(void *) obj
void *
void
*
*
obj
obj
stream->ops_ = &jas_stream_fileops;
stream->ops_ = &jas_stream_fileops
stream->ops_
stream
stream
ops_
&jas_stream_fileops
jas_stream_fileops
jas_stream_fileops
if ((obj->fd = open(filename, openflags, JAS_STREAM_PERMS)) < 0) {		jas_stream_destroy(stream);		return 0;	}
(obj->fd = open(filename, openflags, JAS_STREAM_PERMS)) < 0
(obj->fd = open(filename, openflags, JAS_STREAM_PERMS))
obj->fd = open(filename, openflags, JAS_STREAM_PERMS)
obj->fd
obj
obj
fd
open(filename, openflags, JAS_STREAM_PERMS)
open
open
filename
filename
openflags
openflags
JAS_STREAM_PERMS
JAS_STREAM_PERMS
0
{		jas_stream_destroy(stream);		return 0;	}
jas_stream_destroy(stream);
jas_stream_destroy(stream)
jas_stream_destroy
jas_stream_destroy
stream
stream
return 0;
0
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0)
jas_stream_initbuf
jas_stream_initbuf
stream
stream
JAS_STREAM_FULLBUF
JAS_STREAM_FULLBUF
0
0
return stream;
stream
stream
-----joern-----
(24,36,0)
(24,40,0)
(33,38,0)
(49,46,0)
(46,3,0)
(10,1,0)
(22,33,0)
(24,1,0)
(15,0,0)
(45,7,0)
(6,7,0)
(44,5,0)
(43,38,0)
(42,7,0)
(20,23,0)
(3,38,0)
(39,32,0)
(8,21,0)
(26,10,0)
(37,41,0)
(2,41,0)
(17,3,0)
(35,33,0)
(5,0,0)
(43,5,0)
(0,5,0)
(18,43,0)
(36,9,0)
(4,41,0)
(16,7,0)
(5,43,0)
(34,46,0)
(31,33,0)
(7,38,0)
(50,5,0)
(3,46,0)
(24,20,0)
(27,40,0)
(50,41,0)
(7,45,0)
(33,46,0)
(12,25,0)
(33,25,0)
(13,45,0)
(28,50,0)
(47,41,0)
(25,33,0)
(11,41,0)
(29,27,0)
(32,20,0)
(1,19,0)
(14,49,0)
(46,49,0)
(21,36,0)
(48,41,0)
(40,30,0)
(24,50,0)
(7,6,1)
(17,34,1)
(36,21,1)
(44,45,1)
(33,38,1)
(43,18,1)
(50,5,1)
(25,33,1)
(12,33,1)
(14,46,1)
(40,27,1)
(10,26,1)
(25,12,1)
(27,29,1)
(8,25,1)
(26,49,1)
(46,3,1)
(24,40,1)
(13,7,1)
(16,42,1)
(18,44,1)
(33,46,1)
(24,20,1)
(0,5,1)
(1,10,1)
(24,36,1)
(0,15,1)
(29,45,1)
(3,38,1)
(42,49,1)
(7,38,1)
(5,43,1)
(6,16,1)
(33,35,1)
(28,25,1)
(45,7,1)
(45,13,1)
(31,22,1)
(3,17,1)
(49,14,1)
(15,5,1)
(39,0,1)
(49,46,1)
(43,38,1)
(24,50,1)
(22,0,1)
(50,28,1)
(21,8,1)
(24,1,1)
(20,32,1)
(35,31,1)
(32,39,1)
(5,43,2)
(50,25,2)
(0,5,2)
(6,49,2)
(12,0,2)
(43,38,2)
(46,3,2)
(26,49,2)
(44,45,2)
(24,50,2)
(27,45,2)
(50,5,2)
(24,20,2)
(31,0,2)
(10,49,2)
(25,33,2)
(8,25,2)
(43,45,2)
(5,45,2)
(20,0,2)
(33,46,2)
(49,46,2)
(42,49,2)
(39,0,2)
(40,45,2)
(1,49,2)
(36,25,2)
(24,1,2)
(15,45,2)
(7,49,2)
(45,7,2)
(33,0,2)
(16,49,2)
(25,0,2)
(24,40,2)
(22,0,2)
(13,49,2)
(29,45,2)
(33,38,2)
(35,0,2)
(18,45,2)
(28,25,2)
(21,25,2)
(7,38,2)
(32,0,2)
(45,49,2)
(24,36,2)
(0,45,2)
(3,38,2)
-----------------------------------
(0,(pos = jas_stream_tell(stream)
(1,return -1;)
(2,pos)
(3,jas_stream_tell(stream)
(4,if ((pos = jas_stream_tell(stream)
(5,pos = jas_stream_tell(stream)
(6,SEEK_END)
(7,jas_stream_seek(stream, 0, SEEK_END)
(8,1)
(9,)
(10,-1)
(11,if (jas_stream_seek(stream, 0, SEEK_END)
(12,0)
(13,0)
(14,0)
(15,0)
(16,0)
(17,stream)
(18,stream)
(19,)
(20,return -1;)
(21,-1)
(22,stream)
(23,)
(24,RET)
(25,jas_stream_seek(stream, oldpos, SEEK_SET)
(26,1)
(27,-1)
(28,pos)
(29,1)
(30,)
(31,oldpos)
(32,-1)
(33,jas_stream_seek(stream, oldpos, SEEK_SET)
(34,oldpos)
(35,SEEK_SET)
(36,return -1;)
(37,if ((oldpos = jas_stream_tell(stream)
(38,jas_stream_t *stream)
(39,1)
(40,return -1;)
(41,)
(42,stream)
(43,jas_stream_tell(stream)
(44,pos)
(45,jas_stream_seek(stream, 0, SEEK_END)
(46,oldpos = jas_stream_tell(stream)
(47,if (jas_stream_seek(stream, oldpos, SEEK_SET)
(48,oldpos)
(49,(oldpos = jas_stream_tell(stream)
(50,return pos;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000080000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff9cf9a66300000000ffffffffffffffff32faa66300000000ffffffffffffffff32faa66300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5d00050000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
jas_stream_t *jas_stream_fopen(const char *filename, const char *mode) {
jas_stream_t *stream;
jas_stream_fileobj_t *obj;
int openflags;
stream->openmode_ = jas_strtoopenmode(mode);
if(stream->openmode_ & JAS_STREAM_READ)
openflags = O_RDONLY;
if(stream->openmode_ & JAS_STREAM_BINARY)
openflags |= O_BINARY;
obj->fd = -1;
obj->flags = 0;
obj->pathname[0] = 'stream->obj_ = (void *) obj;
stream->ops_ = &jas_stream_fileops;
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);
return stream;
=======================
