-----label-----
0
-----code-----
static tmsize_t
_tiffReadProc(thandle_t fd, void* buf, tmsize_t size)
{
	fd_as_handle_union_t fdh;
        const size_t bytes_total = (size_t) size;
        size_t bytes_read;
        tmsize_t count = -1;
	if ((tmsize_t) bytes_total != size)
	{
		errno=EINVAL;
		return (tmsize_t) -1;
	}
	fdh.h = fd;
        for (bytes_read=0; bytes_read < bytes_total; bytes_read+=count)
        {
                char *buf_offset = (char *) buf+bytes_read;
                size_t io_size = bytes_total-bytes_read;
                if (io_size > TIFF_IO_MAX)
                        io_size = TIFF_IO_MAX;
                count=read(fdh.fd, buf_offset, (TIFFIOSize_t) io_size);
                if (count <= 0)
                        break;
        }
        if (count < 0)
                return (tmsize_t)-1;
        return (tmsize_t) bytes_read;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
11,12
11,13
13,14
13,15
16,17
16,18
17,18
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
36,38
37,38
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
57,58
57,59
58,59
58,60
59,60
59,61
60,61
60,62
61,62
64,65
66,67
68,69
68,70
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
78,79
81,82
82,83
82,84
83,84
83,85
84,85
87,88
89,90
89,91
89,92
89,93
90,91
91,92
91,93
92,93
95,96
95,97
96,97
98,99
100,101
100,102
101,102
103,104
105,106
105,107
105,108
105,109
105,110
106,107
107,108
107,109
109,110
109,111
109,112
112,113
113,114
113,115
114,115
114,116
115,116
115,117
117,118
119,120
121,122
123,124
124,125
124,126
125,126
127,128
127,129
129,130
130,131
130,132
131,132
133,134
135,136
135,137
136,137
136,138
137,138
139,140
141,142
142,143
142,144
143,144
145,146
147,148
148,149
148,150
149,150
151,152
151,153
151,154
151,155
152,153
154,155
154,156
155,156
158,159
160,161
160,162
161,162
161,163
162,163
165,166
167,168
167,169
168,169
168,170
169,170
173,174
173,175
174,175
174,176
175,176
178,179
179,180
179,181
180,181
181,182
184,185
185,186
185,187
186,187
186,188
187,188
190,191
-----nextToken-----
3,5,8,10,12,14,15,18,20,25,27,31,33,38,39,41,45,47,51,53,56,62,63,65,67,72,74,79,80,85,86,88,93,94,97,99,102,104,108,110,111,116,118,120,122,126,128,132,134,138,140,144,146,150,153,156,157,159,163,164,166,170,171,172,176,177,182,183,188,189,191
-----computeFrom-----
58,59
58,60
70,71
70,72
76,77
76,78
82,83
82,84
91,92
91,93
95,96
95,97
100,101
100,102
113,114
113,115
130,131
130,132
136,137
136,138
142,143
142,144
148,149
148,150
168,169
168,170
174,175
174,176
179,180
179,181
-----guardedBy-----
62,79
138,144
140,146
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;
-----ast_node-----
static tmsize_t_tiffReadProc(thandle_t fd, void* buf, tmsize_t size){	fd_as_handle_union_t fdh;        const size_t bytes_total = (size_t) size;        size_t bytes_read;        tmsize_t count = -1;	if ((tmsize_t) bytes_total != size)	{		errno=EINVAL;		return (tmsize_t) -1;	}	fdh.h = fd;        for (bytes_read=0; bytes_read < bytes_total; bytes_read+=count)        {                char *buf_offset = (char *) buf+bytes_read;                size_t io_size = bytes_total-bytes_read;                if (io_size > TIFF_IO_MAX)                        io_size = TIFF_IO_MAX;                count=read(fdh.fd, buf_offset, (TIFFIOSize_t) io_size);                if (count <= 0)                        break;        }        if (count < 0)                return (tmsize_t)-1;        return (tmsize_t) bytes_read;}
static tmsize_t
tmsize_t
_tiffReadProc(thandle_t fd, void* buf, tmsize_t size)
_tiffReadProc
thandle_t fd
thandle_t
thandle_t
fd
fd
void* buf
void
* buf
*
buf
tmsize_t size
tmsize_t
tmsize_t
size
size
{	fd_as_handle_union_t fdh;        const size_t bytes_total = (size_t) size;        size_t bytes_read;        tmsize_t count = -1;	if ((tmsize_t) bytes_total != size)	{		errno=EINVAL;		return (tmsize_t) -1;	}	fdh.h = fd;        for (bytes_read=0; bytes_read < bytes_total; bytes_read+=count)        {                char *buf_offset = (char *) buf+bytes_read;                size_t io_size = bytes_total-bytes_read;                if (io_size > TIFF_IO_MAX)                        io_size = TIFF_IO_MAX;                count=read(fdh.fd, buf_offset, (TIFFIOSize_t) io_size);                if (count <= 0)                        break;        }        if (count < 0)                return (tmsize_t)-1;        return (tmsize_t) bytes_read;}
fd_as_handle_union_t fdh;
fd_as_handle_union_t fdh;
fd_as_handle_union_t
fd_as_handle_union_t
fdh
fdh
const size_t bytes_total = (size_t) size;
const size_t bytes_total = (size_t) size;
const size_t
size_t
bytes_total = (size_t) size
bytes_total
= (size_t) size
(size_t) size
size_t
size_t
size_t

size
size
size_t bytes_read;
size_t bytes_read;
size_t
size_t
bytes_read
bytes_read
tmsize_t count = -1;
tmsize_t count = -1;
tmsize_t
tmsize_t
count = -1
count
= -1
-1
1
if ((tmsize_t) bytes_total != size)	{		errno=EINVAL;		return (tmsize_t) -1;	}
(tmsize_t) bytes_total != size
(tmsize_t) bytes_total
tmsize_t
tmsize_t
tmsize_t

bytes_total
bytes_total
size
size
{		errno=EINVAL;		return (tmsize_t) -1;	}
errno=EINVAL;
errno=EINVAL
errno
errno
EINVAL
EINVAL
return (tmsize_t) -1;
(tmsize_t) -1
(tmsize_t)
tmsize_t
tmsize_t
1
fdh.h = fd;
fdh.h = fd
fdh.h
fdh
fdh
h
fd
fd
for (bytes_read=0; bytes_read < bytes_total; bytes_read+=count)        {                char *buf_offset = (char *) buf+bytes_read;                size_t io_size = bytes_total-bytes_read;                if (io_size > TIFF_IO_MAX)                        io_size = TIFF_IO_MAX;                count=read(fdh.fd, buf_offset, (TIFFIOSize_t) io_size);                if (count <= 0)                        break;        }
bytes_read=0;
bytes_read=0
bytes_read
bytes_read
0
bytes_read < bytes_total
bytes_read
bytes_read
bytes_total
bytes_total
bytes_read+=count
bytes_read
bytes_read
count
count
{                char *buf_offset = (char *) buf+bytes_read;                size_t io_size = bytes_total-bytes_read;                if (io_size > TIFF_IO_MAX)                        io_size = TIFF_IO_MAX;                count=read(fdh.fd, buf_offset, (TIFFIOSize_t) io_size);                if (count <= 0)                        break;        }
char *buf_offset = (char *) buf+bytes_read;
char *buf_offset = (char *) buf+bytes_read;
char
*buf_offset = (char *) buf+bytes_read
*
buf_offset
= (char *) buf+bytes_read
(char *) buf+bytes_read
(char *) buf
char *
char
*
*
buf
buf
bytes_read
bytes_read
size_t io_size = bytes_total-bytes_read;
size_t io_size = bytes_total-bytes_read;
size_t
size_t
io_size = bytes_total-bytes_read
io_size
= bytes_total-bytes_read
bytes_total-bytes_read
bytes_total
bytes_total
bytes_read
bytes_read
if (io_size > TIFF_IO_MAX)                        io_size = TIFF_IO_MAX;
io_size > TIFF_IO_MAX
io_size
io_size
TIFF_IO_MAX
TIFF_IO_MAX
io_size = TIFF_IO_MAX;
io_size = TIFF_IO_MAX
io_size
io_size
TIFF_IO_MAX
TIFF_IO_MAX
count=read(fdh.fd, buf_offset, (TIFFIOSize_t) io_size);
count=read(fdh.fd, buf_offset, (TIFFIOSize_t) io_size)
count
count
read(fdh.fd, buf_offset, (TIFFIOSize_t) io_size)
read
read
fdh.fd
fdh
fdh
fd
buf_offset
buf_offset
(TIFFIOSize_t) io_size
TIFFIOSize_t
TIFFIOSize_t
TIFFIOSize_t

io_size
io_size
if (count <= 0)                        break;
count <= 0
count
count
0
break;
if (count < 0)                return (tmsize_t)-1;
count < 0
count
count
0
return (tmsize_t)-1;
(tmsize_t)-1
(tmsize_t)
tmsize_t
tmsize_t
1
return (tmsize_t) bytes_read;
(tmsize_t) bytes_read
tmsize_t
tmsize_t
tmsize_t

bytes_read
bytes_read
-----joern-----
(10,11,0)
(11,9,0)
(11,4,0)
(2,4,0)
(6,8,0)
(4,11,0)
(4,2,0)
(11,8,0)
(4,1,0)
(11,7,0)
(5,11,0)
(3,4,0)
(8,0,0)
(5,10,1)
(11,9,1)
(3,5,1)
(4,2,1)
(11,4,1)
(11,7,1)
(6,8,1)
(8,11,1)
(4,3,1)
(4,1,1)
(4,2,2)
(4,1,2)
(11,4,2)
(11,9,2)
(6,8,2)
(11,7,2)
-----------------------------------
(0,)
(1,tmsize_t c)
(2,size_t)
(3,c)
(4,(size_t)
(5,p2)
(6,RET)
(7,const void* p1)
(8,return (memcmp(p1, p2, (size_t)
(9,const void* p2)
(10,p1)
(11,memcmp(p1, p2, (size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000010000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff54edb46300000000ffffffffffffffff95eeb46300000000ffffffffffffffff95eeb46300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x4d4d002b3159ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
static tmsize_t _tiffReadProc(thandle_t fd, void* buf, tmsize_t size) {
fd_as_handle_union_t fdh;
const size_t bytes_total = (size_t) size;
size_t bytes_read;
tmsize_t count = -1;
fdh.h = fd;
for(bytes_read=0;bytes_read < bytes_total;bytes_read+=count)
char *buf_offset = (char *) buf+bytes_read;
size_t io_size = bytes_total-bytes_read;
count=read(fdh.fd, buf_offset, (TIFFIOSize_t) io_size);
return (tmsize_t) bytes_read;
=======================
