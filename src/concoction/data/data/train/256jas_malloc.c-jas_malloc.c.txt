-----label-----
0
-----code-----
void *jas_malloc(size_t size)
{
	void *result;
	JAS_DBGLOG(101, ("jas_malloc(%zu)\n", size));
	result = malloc(size);
	JAS_DBGLOG(100, ("jas_malloc(%zu) -> %p\n", size, result));
	return result;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
7,8
9,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
15,16
15,17
18,19
19,20
19,21
19,22
20,21
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
33,34
35,36
37,38
38,39
38,40
38,41
39,40
42,43
43,44
43,45
43,46
45,46
47,48
49,50
50,51
-----nextToken-----
2,4,5,8,10,14,16,17,21,22,25,27,31,34,36,40,41,44,46,48,51
-----computeFrom-----
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
void *jas_malloc(size_t size){	void *result;	JAS_DBGLOG(101, ("jas_malloc(%zu)\n", size));	result = malloc(size);	JAS_DBGLOG(100, ("jas_malloc(%zu) -> %p\n", size, result));	return result;}
void
*jas_malloc(size_t size)
*
jas_malloc
size_t size
size_t
size_t
size
size
{	void *result;	JAS_DBGLOG(101, ("jas_malloc(%zu)\n", size));	result = malloc(size);	JAS_DBGLOG(100, ("jas_malloc(%zu) -> %p\n", size, result));	return result;}
void *result;
void *result;
void
*result
*
result
JAS_DBGLOG(101, ("jas_malloc(%zu)\n", size));
JAS_DBGLOG(101, ("jas_malloc(%zu)\n", size))
JAS_DBGLOG
JAS_DBGLOG
101
("jas_malloc(%zu)\n", size)
"jas_malloc(%zu)\n", size
"jas_malloc(%zu)\n"
size
size
result = malloc(size);
result = malloc(size)
result
result
malloc(size)
malloc
malloc
size
size
JAS_DBGLOG(100, ("jas_malloc(%zu) -> %p\n", size, result));
JAS_DBGLOG(100, ("jas_malloc(%zu) -> %p\n", size, result))
JAS_DBGLOG
JAS_DBGLOG
100
("jas_malloc(%zu) -> %p\n", size, result)
"jas_malloc(%zu) -> %p\n", size, result
"jas_malloc(%zu) -> %p\n"
size
size
result
result
return result;
result
result
-----joern-----
(12,8,0)
(1,13,0)
(0,8,0)
(0,13,0)
(10,12,0)
(11,18,0)
(5,8,0)
(20,9,0)
(3,4,0)
(6,15,0)
(4,12,0)
(18,15,0)
(12,20,0)
(14,5,0)
(16,0,0)
(17,4,0)
(15,5,0)
(2,13,0)
(4,8,0)
(13,0,0)
(5,15,0)
(19,18,0)
(20,12,0)
(7,20,0)
(21,8,0)
(12,20,1)
(5,15,1)
(0,13,1)
(14,12,1)
(3,5,1)
(20,7,1)
(6,14,1)
(4,12,1)
(1,2,1)
(2,16,1)
(19,6,1)
(5,11,1)
(0,1,1)
(10,0,1)
(17,4,1)
(20,9,1)
(7,10,1)
(4,3,1)
(11,19,1)
(17,4,2)
(0,13,2)
(20,9,2)
(5,15,2)
(4,12,2)
(12,20,2)
-----------------------------------
(0,JAS_DBGLOG(101, ("jas_malloc(%zu)
(1,size)
(2,"jas_malloc(%zu)
(3,result)
(4,return result;)
(5,JAS_DBGLOG(100, ("jas_malloc(%zu)
(6,"jas_malloc(%zu)
(7,size)
(8,)
(9,size_t size)
(10,result)
(11,result)
(12,result = malloc(size)
(13,)
(14,100)
(15,)
(16,101)
(17,RET)
(18,)
(19,size)
(20,malloc(size)
(21,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffe694ad6300000000ffffffffffffffffbea0ad6300000000ffffffffffffffffbea0ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5800030000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
void *jas_malloc(size_t size) {
void *result;
JAS_DBGLOG(101, ('jas_malloc(_zu) ', size));
result = malloc(size);
JAS_DBGLOG(100, ('jas_malloc(_zu) -> _p ', size, result));
return result;
=======================
