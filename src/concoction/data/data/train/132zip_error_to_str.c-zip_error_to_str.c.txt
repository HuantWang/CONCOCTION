-----label-----
0
-----code-----
int
zip_error_to_str(char *buf, zip_uint64_t len, int ze, int se)
{
    const char *zs, *ss;

    if (ze < 0 || ze >= _zip_nerr_str)
	return snprintf(buf, len, "Unknown error %d", ze);

    zs = _zip_err_str[ze];
	
    switch (_zip_err_type[ze]) {
    case ZIP_ET_SYS:
	ss = strerror(se);
	break;
	
    case ZIP_ET_ZLIB:
	ss = zError(se);
	break;
	
    default:
	ss = NULL;
    }

    return snprintf(buf, len, "%s%s%s",
		    zs, (ss ? ": " : ""), (ss ? ss : ""));
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
15,16
15,17
17,18
19,20
19,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
25,28
27,28
27,29
30,31
30,32
33,34
33,35
34,35
34,36
35,36
35,37
36,37
39,40
39,41
40,41
42,43
44,45
45,46
45,47
45,48
45,49
45,50
46,47
48,49
50,51
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
70,72
70,73
70,74
70,75
70,76
70,77
70,78
71,72
72,73
74,75
75,76
75,77
76,77
78,79
78,80
79,80
81,82
84,85
85,86
87,88
88,89
88,90
89,90
91,92
91,93
92,93
94,95
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
105,108
105,109
105,110
105,111
105,112
106,107
108,109
110,111
113,114
115,116
116,117
116,118
116,119
117,118
121,122
122,123
122,124
122,125
123,124
125,126
-----nextToken-----
2,4,6,8,9,12,14,16,18,20,22,26,28,29,31,32,37,38,41,43,47,49,51,52,54,58,61,63,67,69,73,77,80,82,83,86,90,93,95,96,97,101,103,107,109,111,112,114,118,119,120,124,126,127
-----computeFrom-----
34,35
34,36
35,36
35,37
39,40
39,41
56,57
56,58
75,76
75,77
88,89
88,90
99,100
99,101
-----guardedBy-----
41,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
intzip_error_to_str(char *buf, zip_uint64_t len, int ze, int se){    const char *zs, *ss;    if (ze < 0 || ze >= _zip_nerr_str)	return snprintf(buf, len, "Unknown error %d", ze);    zs = _zip_err_str[ze];	    switch (_zip_err_type[ze]) {    case ZIP_ET_SYS:	ss = strerror(se);	break;	    case ZIP_ET_ZLIB:	ss = zError(se);	break;	    default:	ss = NULL;    }    return snprintf(buf, len, "%s%s%s",		    zs, (ss ? ": " : ""), (ss ? ss : ""));}
int
zip_error_to_str(char *buf, zip_uint64_t len, int ze, int se)
zip_error_to_str
char *buf
char
*buf
*
buf
zip_uint64_t len
zip_uint64_t
zip_uint64_t
len
len
int ze
int
ze
ze
int se
int
se
se
{    const char *zs, *ss;    if (ze < 0 || ze >= _zip_nerr_str)	return snprintf(buf, len, "Unknown error %d", ze);    zs = _zip_err_str[ze];	    switch (_zip_err_type[ze]) {    case ZIP_ET_SYS:	ss = strerror(se);	break;	    case ZIP_ET_ZLIB:	ss = zError(se);	break;	    default:	ss = NULL;    }    return snprintf(buf, len, "%s%s%s",		    zs, (ss ? ": " : ""), (ss ? ss : ""));}
const char *zs, *ss;
const char *zs, *ss;
const char
*zs
*
zs
*ss
*
ss
if (ze < 0 || ze >= _zip_nerr_str)	return snprintf(buf, len, "Unknown error %d", ze);
ze < 0 || ze >= _zip_nerr_str
ze < 0
ze
ze
0
ze >= _zip_nerr_str
ze
ze
_zip_nerr_str
_zip_nerr_str
return snprintf(buf, len, "Unknown error %d", ze);
snprintf(buf, len, "Unknown error %d", ze)
snprintf
snprintf
buf
buf
len
len
"Unknown error %d"
ze
ze
zs = _zip_err_str[ze];
zs = _zip_err_str[ze]
zs
zs
_zip_err_str[ze]
_zip_err_str
_zip_err_str
ze
ze
switch (_zip_err_type[ze]) {    case ZIP_ET_SYS:	ss = strerror(se);	break;	    case ZIP_ET_ZLIB:	ss = zError(se);	break;	    default:	ss = NULL;    }
_zip_err_type[ze]
_zip_err_type
_zip_err_type
ze
ze
{    case ZIP_ET_SYS:	ss = strerror(se);	break;	    case ZIP_ET_ZLIB:	ss = zError(se);	break;	    default:	ss = NULL;    }
case ZIP_ET_SYS:
ZIP_ET_SYS
ZIP_ET_SYS
ss = strerror(se);
ss = strerror(se)
ss
ss
strerror(se)
strerror
strerror
se
se
break;
case ZIP_ET_ZLIB:
ZIP_ET_ZLIB
ZIP_ET_ZLIB
ss = zError(se);
ss = zError(se)
ss
ss
zError(se)
zError
zError
se
se
break;
default:
ss = NULL;
ss = NULL
ss
ss
NULL
NULL
return snprintf(buf, len, "%s%s%s",		    zs, (ss ? ": " : ""), (ss ? ss : ""));
snprintf(buf, len, "%s%s%s",		    zs, (ss ? ": " : ""), (ss ? ss : ""))
snprintf
snprintf
buf
buf
len
len
"%s%s%s"
zs
zs
(ss ? ": " : "")
ss ? ": " : ""
ss
ss
": "
""
(ss ? ss : "")
ss ? ss : ""
ss
ss
ss
ss
""
-----joern-----
(31,12,0)
(12,5,0)
(28,17,0)
(0,40,0)
(19,46,0)
(15,27,0)
(36,26,0)
(18,55,0)
(57,12,0)
(58,60,0)
(8,19,0)
(9,41,0)
(26,43,0)
(45,17,0)
(18,60,0)
(12,27,0)
(29,49,0)
(47,55,0)
(16,4,0)
(26,46,0)
(23,9,0)
(30,41,0)
(13,24,0)
(49,46,0)
(42,5,0)
(9,18,0)
(61,41,0)
(55,18,0)
(41,9,0)
(29,17,0)
(48,13,0)
(22,17,0)
(5,16,0)
(26,3,0)
(44,26,0)
(41,40,0)
(39,60,0)
(7,16,0)
(13,46,0)
(38,13,0)
(51,18,0)
(52,9,0)
(34,41,0)
(16,5,0)
(14,19,0)
(2,25,0)
(49,29,0)
(41,12,0)
(50,27,0)
(25,46,0)
(9,5,0)
(26,59,0)
(24,13,0)
(5,60,0)
(41,43,0)
(37,60,0)
(21,9,0)
(20,17,0)
(41,3,0)
(53,60,0)
(24,25,0)
(0,59,0)
(41,29,0)
(12,41,0)
(6,41,0)
(32,25,0)
(55,4,0)
(56,26,0)
(33,49,0)
(1,26,0)
(35,29,0)
(54,60,0)
(12,18,0)
(11,49,0)
(9,27,0)
(27,60,0)
(40,17,0)
(10,12,0)
(25,24,0)
(41,9,1)
(23,21,1)
(61,34,1)
(42,19,1)
(18,55,1)
(41,12,1)
(12,57,1)
(0,40,1)
(16,7,1)
(13,38,1)
(0,59,1)
(15,50,1)
(30,58,1)
(40,41,1)
(56,36,1)
(31,10,1)
(52,21,1)
(5,16,1)
(30,27,1)
(29,49,1)
(32,2,1)
(19,14,1)
(8,29,1)
(38,48,1)
(10,9,1)
(25,46,1)
(1,56,1)
(12,5,1)
(26,46,1)
(24,13,1)
(14,8,1)
(41,29,1)
(13,46,1)
(49,46,1)
(48,25,1)
(6,61,1)
(12,27,1)
(41,3,1)
(59,26,1)
(55,4,1)
(57,10,1)
(36,24,1)
(35,24,1)
(30,39,1)
(33,11,1)
(51,19,1)
(34,30,1)
(26,44,1)
(12,18,1)
(25,32,1)
(50,19,1)
(44,1,1)
(9,52,1)
(9,23,1)
(39,18,1)
(41,43,1)
(24,25,1)
(9,5,1)
(58,5,1)
(21,6,1)
(7,42,1)
(16,4,1)
(12,31,1)
(9,27,1)
(49,33,1)
(47,51,1)
(26,3,1)
(19,46,1)
(9,18,1)
(27,15,1)
(26,43,1)
(55,47,1)
(11,35,1)
(41,43,2)
(0,40,2)
(12,5,2)
(9,18,2)
(30,24,2)
(55,4,2)
(26,24,2)
(57,10,2)
(5,16,2)
(6,24,2)
(0,59,2)
(10,24,2)
(61,24,2)
(29,49,2)
(34,24,2)
(13,46,2)
(41,29,2)
(26,43,2)
(55,19,2)
(21,24,2)
(39,19,2)
(49,24,2)
(16,4,2)
(27,19,2)
(12,18,2)
(42,19,2)
(19,24,2)
(31,10,2)
(26,46,2)
(12,24,2)
(38,25,2)
(44,24,2)
(56,24,2)
(11,24,2)
(1,24,2)
(48,25,2)
(19,46,2)
(7,19,2)
(9,5,2)
(41,3,2)
(25,46,2)
(24,13,2)
(12,27,2)
(5,19,2)
(14,24,2)
(52,21,2)
(36,24,2)
(51,19,2)
(23,21,2)
(18,55,2)
(49,46,2)
(18,19,2)
(35,24,2)
(8,24,2)
(40,24,2)
(41,9,2)
(15,19,2)
(16,19,2)
(24,25,2)
(50,19,2)
(41,24,2)
(13,25,2)
(41,12,2)
(26,3,2)
(29,24,2)
(33,24,2)
(59,24,2)
(58,19,2)
(9,24,2)
(47,19,2)
(9,27,2)
-----------------------------------
(0,RET)
(1,"Unknown error %d")
(2,ze)
(3,zip_uint64_t len)
(4,int se)
(5,ss = strerror(se)
(6,zs)
(7,se)
(8,_zip_err_type)
(9,ss ? ": " : "")
(10,ss)
(11,_zip_err_str)
(12,ss ? ss : "")
(13,ze >= _zip_nerr_str)
(14,ze)
(15,NULL)
(16,strerror(se)
(17,)
(18,ss = zError(se)
(19,_zip_err_type[ze])
(20,switch (_zip_err_type[ze])
(21,ss)
(22,ss)
(23,"")
(24,ze < 0 || ze >= _zip_nerr_str)
(25,ze < 0)
(26,snprintf(buf, len, "Unknown error %d", ze)
(27,ss = NULL)
(28,zs)
(29,zs = _zip_err_str[ze])
(30,buf)
(31,"")
(32,0)
(33,ze)
(34,len)
(35,zs)
(36,buf)
(37,case ZIP_ET_ZLIB:)
(38,_zip_nerr_str)
(39,break;)
(40,return snprintf(buf, len, "%s%s%s",\\n\\t\\t    zs, (ss ? ": " : "")
(41,snprintf(buf, len, "%s%s%s",\\n\\t\\t    zs, (ss ? ": " : "")
(42,ss)
(43,char *buf)
(44,ze)
(45,if (ze < 0 || ze >= _zip_nerr_str)
(46,int ze)
(47,se)
(48,ze)
(49,_zip_err_str[ze])
(50,ss)
(51,ss)
(52,": ")
(53,default:)
(54,case ZIP_ET_SYS:)
(55,zError(se)
(56,len)
(57,ss)
(58,break;)
(59,return snprintf(buf, len, "Unknown error %d", ze)
(60,)
(61,"%s%s%s")
-----cfg-----
(32,30)
(64,68)
(36,44)
(36,51)
(36,55)
(68,59)
(7,17)
(42,64)
(44,42)
(16,25)
(16,32)
(17,16)
(17,20)
(49,64)
(51,49)
(20,16)
(55,64)
(24,72)
(25,24)
(58,72)
(59,58)
(30,36)
-----path-----
7,17,16,25,24,72
7,17,16,32,30,36,44,42,64,68,59,58,72
7,17,16,32,30,36,51,49,64,68,59,58,72
7,17,16,32,30,36,55,64,68,59,58,72
7,17,20,16,25,24,72
7,17,20,16,32,30,36,44,42,64,68,59,58,72
7,17,20,16,32,30,36,51,49,64,68,59,58,72
7,17,20,16,32,30,36,55,64,68,59,58,72
-----cfgNode-----
5,<global>
6,<empty>
7,int zip_error_to_str (char *buf,zip_uint64_t len,int ze,int se)
8,char *buf
9,zip_uint64_t len
10,int ze
11,int se
12,<empty>
13,const char* zs
14,const char* ss
15,if (ze < 0 || ze >= _zip_nerr_str)
16,ze < 0 || ze >= _zip_nerr_str
17,ze < 0
18,ze
19,0
20,ze >= _zip_nerr_str
21,ze
22,_zip_nerr_str
23,<empty>
24,return snprintf(buf, len, "Unknown error %d", ze);
25,snprintf(buf, len, "Unknown error %d", ze)
26,buf
27,len
28,"Unknown error %d"
29,ze
30,zs = _zip_err_str[ze]
31,zs
32,_zip_err_str[ze]
33,_zip_err_str
34,ze
35,switch(_zip_err_type[ze])
36,_zip_err_type[ze]
37,_zip_err_type
38,ze
39,<empty>
40,case ZIP_ET_SYS:
41,ZIP_ET_SYS
42,ss = strerror(se)
43,ss
44,strerror(se)
45,se
46,break;
47,case ZIP_ET_ZLIB:
48,ZIP_ET_ZLIB
49,ss = zError(se)
50,ss
51,zError(se)
52,se
53,break;
54,default:
55,ss = NULL
56,ss
57,NULL
58,return snprintf(buf, len, "%s%s%s",
59,		    zs, (ss ? ": " : ""), (ss ? ss : ""));
60,snprintf(buf, len, "%s%s%s",
61,		    zs, (ss ? ": " : ""), (ss ? ss : ""))
62,buf
63,len
64,"%s%s%s"
65,zs
66,ss ? ": " : ""
67,ss
68,": "
69,""
70,ss ? ss : ""
71,ss
72,ss
73,""
74,RET
75,char *buf
76,zip_uint64_t len
77,int ze
78,int se
79,RET
80,int zip_error_to_str (char *buf,zip_uint64_t len,int ze,int se)
81,char *buf
82,zip_uint64_t len
83,int ze
84,int se
85,<empty>
86,const char* zs
87,const char* ss
88,if (ze < 0 || ze >= _zip_nerr_str)
89,ze < 0 || ze >= _zip_nerr_str
90,ze < 0
91,ze
92,0
93,ze >= _zip_nerr_str
94,ze
95,_zip_nerr_str
96,<empty>
97,return snprintf(buf, len, "Unknown error %d", ze);
98,snprintf(buf, len, "Unknown error %d", ze)
99,buf
100,len
101,"Unknown error %d"
102,ze
103,zs = _zip_err_str[ze]
104,zs
105,_zip_err_str[ze]
106,_zip_err_str
107,ze
108,switch(_zip_err_type[ze])
109,_zip_err_type[ze]
110,_zip_err_type
111,ze
112,<empty>
113,case ZIP_ET_SYS:
114,ZIP_ET_SYS
115,ss = strerror(se)
116,ss
117,strerror(se)
118,se
119,break;
120,case ZIP_ET_ZLIB:
121,ZIP_ET_ZLIB
122,ss = zError(se)
123,ss
124,zError(se)
125,se
126,break;
127,default:
128,ss = NULL
129,ss
130,NULL
131,return snprintf(buf, len, "%s%s%s",
132,		    zs, (ss ? ": " : ""), (ss ? ss : ""));
133,snprintf(buf, len, "%s%s%s",
134,		    zs, (ss ? ": " : ""), (ss ? ss : ""))
135,buf
136,len
137,"%s%s%s"
138,zs
139,ss ? ": " : ""
140,ss
141,": "
142,""
143,ss ? ss : ""
144,ss
145,ss
146,""
147,RET
148,char *buf
149,zip_uint64_t len
150,int ze
151,int se
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffb1fd436400000000ffffffffffffffffb0fd436400000000ffffffffffffffffb0fd436400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffff
arg00:0x2d53ff
=========trace=========
int zip_error_to_str(char *buf, zip_uint64_t len, int ze, int se) {
const char *zs, *ss;
zs = _zip_err_str[ze];
switch(_zip_err_type[ze])
ss = NULL;
return snprintf(buf, len, '_s_s_s', 		    zs, (ss ? ': ' : ''), (ss ? ss : ''));
=======================
