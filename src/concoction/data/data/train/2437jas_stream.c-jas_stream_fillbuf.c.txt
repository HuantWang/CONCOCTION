-----label-----
0
-----code-----
int jas_stream_fillbuf(jas_stream_t *stream, int getflag)
{
	int c;

	/* The stream must not be in an error or EOF state. */
	if ((stream->flags_ & (JAS_STREAM_ERRMASK)) != 0) {
		return EOF;
	}

	/* The stream must be open for reading. */
	if ((stream->openmode_ & JAS_STREAM_READ) == 0) {
		return EOF;
	}

	/* Make a half-hearted attempt to confirm that the buffer is not
	currently being used for writing.  This check is not intended
	to be foolproof! */
	assert((stream->bufmode_ & JAS_STREAM_WRBUF) == 0);

	assert(stream->ptr_ - stream->bufstart_ <= stream->bufsize_);

	/* Mark the buffer as being used for reading. */
	stream->bufmode_ |= JAS_STREAM_RDBUF;

	/* Read new data into the buffer. */
	stream->ptr_ = stream->bufstart_;
	if ((stream->cnt_ = (*stream->ops_->read_)(stream->obj_,
	  (char *) stream->bufstart_, stream->bufsize_)) <= 0) {
		if (stream->cnt_ < 0) {
			stream->flags_ |= JAS_STREAM_ERR;
		} else {
			stream->flags_ |= JAS_STREAM_EOF;
		}
		stream->cnt_ = 0;
		return EOF;
	}

	assert(stream->cnt_ > 0);
	/* Get or peek at the first character in the buffer. */
	c = (getflag) ? jas_stream_getc2(stream) : (*stream->ptr_);

	return c;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
16,17
17,18
17,19
19,20
21,22
21,23
22,23
22,24
23,24
24,25
24,26
25,26
25,27
26,27
29,30
30,31
33,34
34,35
35,36
37,38
37,39
38,39
38,40
39,40
40,41
40,42
41,42
41,43
42,43
45,46
48,49
49,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
57,58
58,59
58,60
59,60
59,61
60,61
63,64
66,67
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
80,81
80,82
81,82
84,85
85,86
85,87
86,87
86,88
87,88
90,91
92,93
93,94
93,95
94,95
94,96
95,96
98,99
98,100
99,100
102,103
102,104
103,104
103,105
104,105
105,106
105,107
106,107
106,108
107,108
110,111
110,112
110,113
110,114
111,112
112,113
113,114
113,115
114,115
114,116
115,116
119,120
119,121
120,121
123,124
123,125
124,125
124,126
126,127
128,129
128,130
129,130
132,133
132,134
133,134
137,138
137,139
137,140
138,139
138,140
138,141
139,140
139,141
140,141
140,142
141,142
145,146
146,147
147,148
147,149
148,149
148,150
149,150
152,153
154,155
155,156
156,157
156,158
157,158
157,159
158,159
161,162
163,164
164,165
164,166
165,166
165,167
166,167
170,171
171,172
173,174
174,175
174,176
175,176
177,178
177,179
178,179
178,180
179,180
183,184
184,185
184,186
185,186
187,188
187,189
187,190
188,189
189,190
191,192
191,193
192,193
194,195
196,197
197,198
198,199
198,200
199,200
202,203
203,204
-----nextToken-----
2,4,7,9,10,12,14,18,20,27,28,31,32,36,43,44,46,47,51,55,61,62,64,65,69,74,75,78,79,82,83,88,89,91,96,97,100,101,108,109,116,117,118,121,122,125,127,130,131,134,135,136,142,143,144,150,151,153,159,160,162,167,168,169,172,176,180,181,182,186,190,193,195,200,201,204
-----computeFrom-----
22,23
22,24
24,25
24,26
38,39
38,40
40,41
40,42
56,57
56,58
58,59
58,60
70,71
70,72
71,72
71,73
85,86
85,87
93,94
93,95
103,104
103,105
105,106
105,107
139,140
139,141
147,148
147,149
156,157
156,158
164,165
164,166
177,178
177,179
184,185
184,186
-----guardedBy-----
134,167
109,168
142,150
-----guardedByNegation-----
142,159
-----lastLexicalUse-----
142,159
-----jump-----
142,159
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int jas_stream_fillbuf(jas_stream_t *stream, int getflag){	int c;	/* The stream must not be in an error or EOF state. */	if ((stream->flags_ & (JAS_STREAM_ERRMASK)) != 0) {		return EOF;	}	/* The stream must be open for reading. */	if ((stream->openmode_ & JAS_STREAM_READ) == 0) {		return EOF;	}	/* Make a half-hearted attempt to confirm that the buffer is not	currently being used for writing.  This check is not intended	to be foolproof! */	assert((stream->bufmode_ & JAS_STREAM_WRBUF) == 0);	assert(stream->ptr_ - stream->bufstart_ <= stream->bufsize_);	/* Mark the buffer as being used for reading. */	stream->bufmode_ |= JAS_STREAM_RDBUF;	/* Read new data into the buffer. */	stream->ptr_ = stream->bufstart_;	if ((stream->cnt_ = (*stream->ops_->read_)(stream->obj_,	  (char *) stream->bufstart_, stream->bufsize_)) <= 0) {		if (stream->cnt_ < 0) {			stream->flags_ |= JAS_STREAM_ERR;		} else {			stream->flags_ |= JAS_STREAM_EOF;		}		stream->cnt_ = 0;		return EOF;	}	assert(stream->cnt_ > 0);	/* Get or peek at the first character in the buffer. */	c = (getflag) ? jas_stream_getc2(stream) : (*stream->ptr_);	return c;}
int
jas_stream_fillbuf(jas_stream_t *stream, int getflag)
jas_stream_fillbuf
jas_stream_t *stream
jas_stream_t
jas_stream_t
*stream
*
stream
int getflag
int
getflag
getflag
{	int c;	/* The stream must not be in an error or EOF state. */	if ((stream->flags_ & (JAS_STREAM_ERRMASK)) != 0) {		return EOF;	}	/* The stream must be open for reading. */	if ((stream->openmode_ & JAS_STREAM_READ) == 0) {		return EOF;	}	/* Make a half-hearted attempt to confirm that the buffer is not	currently being used for writing.  This check is not intended	to be foolproof! */	assert((stream->bufmode_ & JAS_STREAM_WRBUF) == 0);	assert(stream->ptr_ - stream->bufstart_ <= stream->bufsize_);	/* Mark the buffer as being used for reading. */	stream->bufmode_ |= JAS_STREAM_RDBUF;	/* Read new data into the buffer. */	stream->ptr_ = stream->bufstart_;	if ((stream->cnt_ = (*stream->ops_->read_)(stream->obj_,	  (char *) stream->bufstart_, stream->bufsize_)) <= 0) {		if (stream->cnt_ < 0) {			stream->flags_ |= JAS_STREAM_ERR;		} else {			stream->flags_ |= JAS_STREAM_EOF;		}		stream->cnt_ = 0;		return EOF;	}	assert(stream->cnt_ > 0);	/* Get or peek at the first character in the buffer. */	c = (getflag) ? jas_stream_getc2(stream) : (*stream->ptr_);	return c;}
int c;
int c;
int
c
c
if ((stream->flags_ & (JAS_STREAM_ERRMASK)) != 0) {		return EOF;	}
(stream->flags_ & (JAS_STREAM_ERRMASK)) != 0
(stream->flags_ & (JAS_STREAM_ERRMASK))
stream->flags_ & (JAS_STREAM_ERRMASK)
stream->flags_
stream
stream
flags_
(JAS_STREAM_ERRMASK)
JAS_STREAM_ERRMASK
JAS_STREAM_ERRMASK
0
{		return EOF;	}
return EOF;
EOF
EOF
if ((stream->openmode_ & JAS_STREAM_READ) == 0) {		return EOF;	}
(stream->openmode_ & JAS_STREAM_READ) == 0
(stream->openmode_ & JAS_STREAM_READ)
stream->openmode_ & JAS_STREAM_READ
stream->openmode_
stream
stream
openmode_
JAS_STREAM_READ
JAS_STREAM_READ
0
{		return EOF;	}
return EOF;
EOF
EOF
assert((stream->bufmode_ & JAS_STREAM_WRBUF) == 0);
assert((stream->bufmode_ & JAS_STREAM_WRBUF) == 0)
assert
assert
(stream->bufmode_ & JAS_STREAM_WRBUF) == 0
(stream->bufmode_ & JAS_STREAM_WRBUF)
stream->bufmode_ & JAS_STREAM_WRBUF
stream->bufmode_
stream
stream
bufmode_
JAS_STREAM_WRBUF
JAS_STREAM_WRBUF
0
assert(stream->ptr_ - stream->bufstart_ <= stream->bufsize_);
assert(stream->ptr_ - stream->bufstart_ <= stream->bufsize_)
assert
assert
stream->ptr_ - stream->bufstart_ <= stream->bufsize_
stream->ptr_ - stream->bufstart_
stream->ptr_
stream
stream
ptr_
stream->bufstart_
stream
stream
bufstart_
stream->bufsize_
stream
stream
bufsize_
stream->bufmode_ |= JAS_STREAM_RDBUF;
stream->bufmode_ |= JAS_STREAM_RDBUF
stream->bufmode_
stream
stream
bufmode_
JAS_STREAM_RDBUF
JAS_STREAM_RDBUF
stream->ptr_ = stream->bufstart_;
stream->ptr_ = stream->bufstart_
stream->ptr_
stream
stream
ptr_
stream->bufstart_
stream
stream
bufstart_
if ((stream->cnt_ = (*stream->ops_->read_)(stream->obj_,	  (char *) stream->bufstart_, stream->bufsize_)) <= 0) {		if (stream->cnt_ < 0) {			stream->flags_ |= JAS_STREAM_ERR;		} else {			stream->flags_ |= JAS_STREAM_EOF;		}		stream->cnt_ = 0;		return EOF;	}
(stream->cnt_ = (*stream->ops_->read_)(stream->obj_,	  (char *) stream->bufstart_, stream->bufsize_)) <= 0
(stream->cnt_ = (*stream->ops_->read_)(stream->obj_,	  (char *) stream->bufstart_, stream->bufsize_))
stream->cnt_ = (*stream->ops_->read_)(stream->obj_,	  (char *) stream->bufstart_, stream->bufsize_)
stream->cnt_
stream
stream
cnt_
(*stream->ops_->read_)(stream->obj_,	  (char *) stream->bufstart_, stream->bufsize_)
(*stream->ops_->read_)
*stream->ops_->read_
stream->ops_->read_
stream->ops_
stream
stream
ops_
read_
stream->obj_
stream
stream
obj_
(char *) stream->bufstart_
char *
char
*
*
stream->bufstart_
stream
stream
bufstart_
stream->bufsize_
stream
stream
bufsize_
0
{		if (stream->cnt_ < 0) {			stream->flags_ |= JAS_STREAM_ERR;		} else {			stream->flags_ |= JAS_STREAM_EOF;		}		stream->cnt_ = 0;		return EOF;	}
if (stream->cnt_ < 0) {			stream->flags_ |= JAS_STREAM_ERR;		} else {			stream->flags_ |= JAS_STREAM_EOF;		}
stream->cnt_ < 0
stream->cnt_
stream
stream
cnt_
0
{			stream->flags_ |= JAS_STREAM_ERR;		}
stream->flags_ |= JAS_STREAM_ERR;
stream->flags_ |= JAS_STREAM_ERR
stream->flags_
stream
stream
flags_
JAS_STREAM_ERR
JAS_STREAM_ERR
{			stream->flags_ |= JAS_STREAM_EOF;		}
stream->flags_ |= JAS_STREAM_EOF;
stream->flags_ |= JAS_STREAM_EOF
stream->flags_
stream
stream
flags_
JAS_STREAM_EOF
JAS_STREAM_EOF
stream->cnt_ = 0;
stream->cnt_ = 0
stream->cnt_
stream
stream
cnt_
0
return EOF;
EOF
EOF
assert(stream->cnt_ > 0);
assert(stream->cnt_ > 0)
assert
assert
stream->cnt_ > 0
stream->cnt_
stream
stream
cnt_
0
c = (getflag) ? jas_stream_getc2(stream) : (*stream->ptr_);
c = (getflag) ? jas_stream_getc2(stream) : (*stream->ptr_)
c
c
(getflag) ? jas_stream_getc2(stream) : (*stream->ptr_)
(getflag)
getflag
getflag
jas_stream_getc2(stream)
jas_stream_getc2
jas_stream_getc2
stream
stream
(*stream->ptr_)
*stream->ptr_
stream->ptr_
stream
stream
ptr_
return c;
c
c
-----joern-----
(8,33,0)
(13,49,0)
(30,45,0)
(26,45,0)
(2,24,0)
(41,45,0)
(10,14,0)
(31,43,0)
(19,29,0)
(11,50,0)
(32,49,0)
(36,7,0)
(15,49,0)
(7,21,0)
(12,49,0)
(18,6,0)
(45,2,0)
(2,48,0)
(42,40,0)
(45,6,0)
(50,45,0)
(14,18,0)
(39,43,0)
(14,10,0)
(16,29,0)
(1,18,0)
(9,48,0)
(17,8,0)
(34,24,0)
(38,39,0)
(48,6,0)
(43,0,0)
(45,50,0)
(31,3,0)
(20,10,0)
(27,29,0)
(23,29,0)
(5,47,0)
(4,36,0)
(3,37,0)
(31,47,0)
(29,6,0)
(40,3,0)
(46,17,0)
(31,8,0)
(24,2,0)
(25,2,0)
(47,49,0)
(28,19,0)
(18,14,0)
(29,19,0)
(47,14,0)
(35,14,0)
(31,7,0)
(22,49,0)
(48,2,0)
(44,49,0)
(19,28,1)
(2,48,1)
(40,42,1)
(38,24,1)
(43,39,1)
(35,19,1)
(46,50,1)
(18,1,1)
(5,50,1)
(14,18,1)
(45,6,1)
(26,41,1)
(11,45,1)
(31,3,1)
(31,8,1)
(23,16,1)
(29,6,1)
(31,47,1)
(17,46,1)
(18,6,1)
(41,10,1)
(31,7,1)
(4,19,1)
(24,34,1)
(7,36,1)
(29,27,1)
(8,17,1)
(24,2,1)
(47,14,1)
(48,6,1)
(19,29,1)
(20,14,1)
(34,2,1)
(50,45,1)
(45,30,1)
(47,5,1)
(3,40,1)
(28,29,1)
(10,20,1)
(42,10,1)
(31,43,1)
(36,4,1)
(50,11,1)
(10,14,1)
(9,25,1)
(16,24,1)
(45,2,1)
(27,23,1)
(48,9,1)
(39,38,1)
(30,26,1)
(1,35,1)
(40,10,2)
(17,50,2)
(30,10,2)
(28,24,2)
(5,50,2)
(42,10,2)
(8,50,2)
(38,24,2)
(35,19,2)
(45,10,2)
(29,24,2)
(7,19,2)
(29,6,2)
(19,29,2)
(27,24,2)
(41,10,2)
(16,24,2)
(23,24,2)
(46,50,2)
(50,45,2)
(36,19,2)
(50,10,2)
(39,24,2)
(2,48,2)
(31,7,2)
(45,2,2)
(18,6,2)
(47,50,2)
(31,3,2)
(26,10,2)
(31,47,2)
(47,14,2)
(31,43,2)
(14,19,2)
(10,14,2)
(24,2,2)
(31,8,2)
(20,19,2)
(3,10,2)
(18,19,2)
(48,6,2)
(10,19,2)
(4,19,2)
(1,19,2)
(11,10,2)
(45,6,2)
(14,18,2)
(43,24,2)
(19,24,2)
-----------------------------------
(0,)
(1,stream)
(2,oldpos = jas_stream_tell(stream)
(3,return -1;)
(4,1)
(5,pos)
(6,jas_stream_t *stream)
(7,return -1;)
(8,return -1;)
(9,stream)
(10,(pos = jas_stream_tell(stream)
(11,0)
(12,if ((pos = jas_stream_tell(stream)
(13,pos)
(14,pos = jas_stream_tell(stream)
(15,if (jas_stream_seek(stream, oldpos, SEEK_SET)
(16,stream)
(17,-1)
(18,jas_stream_tell(stream)
(19,jas_stream_seek(stream, 0, SEEK_END)
(20,0)
(21,)
(22,if (jas_stream_seek(stream, 0, SEEK_END)
(23,0)
(24,(oldpos = jas_stream_tell(stream)
(25,oldpos)
(26,oldpos)
(27,SEEK_END)
(28,0)
(29,jas_stream_seek(stream, 0, SEEK_END)
(30,SEEK_SET)
(31,RET)
(32,oldpos)
(33,)
(34,0)
(35,pos)
(36,-1)
(37,)
(38,1)
(39,-1)
(40,-1)
(41,stream)
(42,1)
(43,return -1;)
(44,if ((oldpos = jas_stream_tell(stream)
(45,jas_stream_seek(stream, oldpos, SEEK_SET)
(46,1)
(47,return pos;)
(48,jas_stream_tell(stream)
(49,)
(50,jas_stream_seek(stream, oldpos, SEEK_SET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffe694ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff9100030000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
int jas_stream_fillbuf(jas_stream_t *stream, int getflag) {
int c;
assert((stream->bufmode_ & JAS_STREAM_WRBUF) == 0);
assert(stream->ptr_ - stream->bufstart_ <= stream->bufsize_);
stream->bufmode_ |= JAS_STREAM_RDBUF;
stream->ptr_ = stream->bufstart_;
if((stream->cnt_ = (*stream->ops_->read_)(stream->obj_, 	  (char *) stream->bufstart_, stream->bufsize_)) <= 0)
stream->flags_ |= JAS_STREAM_EOF;
stream->cnt_ = 0;
return EOF;
=======================
