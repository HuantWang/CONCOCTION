-----label-----
0
-----code-----
static char *mif_getline(jas_stream_t *stream, char *buf, int bufsize)
{
	int c;
	char *bufptr;
	assert(bufsize > 0);

	bufptr = buf;
	while (bufsize > 1) {
		if ((c = mif_getc(stream)) == EOF) {
			break;
		}
		*bufptr++ = c;
		--bufsize;
		if (c == '\n') {
			break;
		}
	}
	*bufptr = '\0';
	if (!(bufptr = strchr(buf, '\n'))) {
		return 0;
	}
	*bufptr = '\0';
	return buf;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
6,7
6,8
7,8
9,10
9,11
12,13
12,14
14,15
14,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
22,23
23,24
23,25
25,26
27,28
28,29
28,30
30,31
30,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
49,50
52,53
52,54
52,55
52,56
53,54
53,55
54,55
54,56
55,56
56,57
56,58
57,58
59,60
59,61
60,61
62,63
64,65
66,67
68,69
69,70
69,71
70,71
71,72
72,73
74,75
76,77
77,78
78,79
80,81
80,82
81,82
81,83
82,83
85,86
87,88
88,89
88,90
89,90
90,91
93,94
93,95
94,95
95,96
96,97
96,98
97,98
99,100
99,101
99,102
100,101
102,103
105,106
106,107
108,109
109,110
109,111
110,111
111,112
114,115
115,116
-----nextToken-----
2,4,5,8,10,11,13,15,16,18,20,24,26,29,31,32,36,39,40,44,46,50,51,58,61,63,65,67,73,75,79,83,84,86,91,92,98,101,103,104,107,112,113,116
-----computeFrom-----
37,38
37,39
42,43
42,44
48,49
48,50
54,55
54,56
56,57
56,58
69,70
69,71
81,82
81,83
88,89
88,90
96,97
96,98
109,110
109,111
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char *mif_getline(jas_stream_t *stream, char *buf, int bufsize){	int c;	char *bufptr;	assert(bufsize > 0);	bufptr = buf;	while (bufsize > 1) {		if ((c = mif_getc(stream)) == EOF) {			break;		}		*bufptr++ = c;		--bufsize;		if (c == '\n') {			break;		}	}	*bufptr = '\0';	if (!(bufptr = strchr(buf, '\n'))) {		return 0;	}	*bufptr = '\0';	return buf;}
static char
*mif_getline(jas_stream_t *stream, char *buf, int bufsize)
*
mif_getline
jas_stream_t *stream
jas_stream_t
jas_stream_t
*stream
*
stream
char *buf
char
*buf
*
buf
int bufsize
int
bufsize
bufsize
{	int c;	char *bufptr;	assert(bufsize > 0);	bufptr = buf;	while (bufsize > 1) {		if ((c = mif_getc(stream)) == EOF) {			break;		}		*bufptr++ = c;		--bufsize;		if (c == '\n') {			break;		}	}	*bufptr = '\0';	if (!(bufptr = strchr(buf, '\n'))) {		return 0;	}	*bufptr = '\0';	return buf;}
int c;
int c;
int
c
c
char *bufptr;
char *bufptr;
char
*bufptr
*
bufptr
assert(bufsize > 0);
assert(bufsize > 0)
assert
assert
bufsize > 0
bufsize
bufsize
0
bufptr = buf;
bufptr = buf
bufptr
bufptr
buf
buf
while (bufsize > 1) {		if ((c = mif_getc(stream)) == EOF) {			break;		}		*bufptr++ = c;		--bufsize;		if (c == '\n') {			break;		}	}
bufsize > 1
bufsize
bufsize
1
{		if ((c = mif_getc(stream)) == EOF) {			break;		}		*bufptr++ = c;		--bufsize;		if (c == '\n') {			break;		}	}
if ((c = mif_getc(stream)) == EOF) {			break;		}
(c = mif_getc(stream)) == EOF
(c = mif_getc(stream))
c = mif_getc(stream)
c
c
mif_getc(stream)
mif_getc
mif_getc
stream
stream
EOF
EOF
{			break;		}
break;
*bufptr++ = c;
*bufptr++ = c
*bufptr++
bufptr++
bufptr
bufptr
c
c
--bufsize;
--bufsize
bufsize
bufsize
if (c == '\n') {			break;		}
c == '\n'
c
c
'\n'
{			break;		}
break;
*bufptr = '\0';
*bufptr = '\0'
*bufptr
bufptr
bufptr
'\0'
if (!(bufptr = strchr(buf, '\n'))) {		return 0;	}
!(bufptr = strchr(buf, '\n'))
(bufptr = strchr(buf, '\n'))
bufptr = strchr(buf, '\n')
bufptr
bufptr
strchr(buf, '\n')
strchr
strchr
buf
buf
'\n'
{		return 0;	}
return 0;
0
*bufptr = '\0';
*bufptr = '\0'
*bufptr
bufptr
bufptr
'\0'
return buf;
buf
buf
-----joern-----
(40,31,0)
(28,14,0)
(37,16,0)
(4,17,0)
(0,25,0)
(42,6,0)
(45,22,0)
(13,44,0)
(38,14,0)
(16,35,0)
(29,7,0)
(31,10,0)
(6,20,0)
(25,36,0)
(18,10,0)
(3,17,0)
(21,11,0)
(46,7,0)
(6,17,0)
(17,33,0)
(17,3,0)
(31,20,0)
(27,36,0)
(32,37,0)
(43,30,0)
(24,36,0)
(14,20,0)
(1,35,0)
(9,18,0)
(45,13,0)
(15,37,0)
(10,31,0)
(16,37,0)
(41,34,0)
(10,18,0)
(22,36,0)
(25,5,0)
(34,26,0)
(35,16,0)
(3,36,0)
(24,14,0)
(2,6,0)
(37,20,0)
(22,16,0)
(7,26,0)
(18,20,0)
(39,18,0)
(11,13,0)
(8,35,0)
(16,25,0)
(23,26,0)
(12,31,0)
(19,22,0)
(26,34,0)
(34,20,0)
(17,6,0)
(35,20,0)
(14,24,0)
(7,20,0)
(26,7,0)
(25,5,1)
(21,34,1)
(45,22,1)
(10,18,1)
(3,17,1)
(46,29,1)
(0,16,1)
(15,35,1)
(10,31,1)
(32,15,1)
(45,13,1)
(31,40,1)
(25,0,1)
(8,1,1)
(37,32,1)
(29,41,1)
(38,28,1)
(19,24,1)
(12,18,1)
(7,46,1)
(17,6,1)
(22,19,1)
(1,10,1)
(23,7,1)
(14,38,1)
(22,16,1)
(17,33,1)
(28,25,1)
(35,20,1)
(16,37,1)
(26,23,1)
(39,9,1)
(18,20,1)
(11,21,1)
(40,12,1)
(18,39,1)
(6,20,1)
(16,35,1)
(31,20,1)
(14,20,1)
(34,20,1)
(37,20,1)
(34,26,1)
(9,3,1)
(7,20,1)
(24,14,1)
(41,10,1)
(42,2,1)
(2,4,1)
(26,7,1)
(1,34,1)
(6,42,1)
(35,8,1)
(13,11,1)
(6,20,2)
(17,6,2)
(22,16,2)
(8,34,2)
(24,34,2)
(41,10,2)
(15,10,2)
(0,10,2)
(10,31,2)
(34,10,2)
(13,34,2)
(14,34,2)
(3,17,2)
(0,34,2)
(14,20,2)
(11,34,2)
(10,18,2)
(22,34,2)
(32,34,2)
(19,34,2)
(37,10,2)
(26,7,2)
(37,20,2)
(35,34,2)
(28,10,2)
(24,10,2)
(31,20,2)
(26,10,2)
(35,10,2)
(14,10,2)
(17,33,2)
(8,10,2)
(35,20,2)
(25,10,2)
(34,26,2)
(38,34,2)
(23,10,2)
(32,10,2)
(22,10,2)
(29,10,2)
(16,10,2)
(34,20,2)
(1,10,2)
(16,37,2)
(46,10,2)
(45,13,2)
(45,22,2)
(18,20,2)
(38,10,2)
(19,10,2)
(25,5,2)
(24,14,2)
(28,34,2)
(21,34,2)
(7,20,2)
(1,34,2)
(15,34,2)
(37,34,2)
(16,35,2)
(25,34,2)
(16,34,2)
(7,10,2)
-----------------------------------
(0,cmpt)
(1,hdr)
(2,hdr)
(3,assert(cmptno >= hdr->numcmpts)
(4,cmptno)
(5,mif_cmpt_t *cmpt)
(6,hdr->numcmpts)
(7,hdr->numcmpts)
(8,cmpts)
(9,hdr)
(10,hdr->numcmpts >= hdr->maxcmpts)
(11,-1)
(12,hdr)
(13,return -1;)
(14,hdr->numcmpts)
(15,hdr)
(16,hdr->cmpts[hdr->numcmpts])
(17,cmptno >= hdr->numcmpts)
(18,hdr->numcmpts)
(19,0)
(20,mif_hdr_t *hdr)
(21,1)
(22,return 0;)
(23,128)
(24,++hdr->numcmpts)
(25,hdr->cmpts[hdr->numcmpts] = cmpt)
(26,hdr->numcmpts + 128)
(27,if (hdr->numcmpts >= hdr->maxcmpts)
(28,hdr)
(29,hdr)
(30,)
(31,hdr->maxcmpts)
(32,numcmpts)
(33,int cmptno)
(34,mif_hdr_growcmpts(hdr, hdr->numcmpts + 128)
(35,hdr->cmpts)
(36,)
(37,hdr->numcmpts)
(38,numcmpts)
(39,numcmpts)
(40,maxcmpts)
(41,hdr)
(42,numcmpts)
(43,if (mif_hdr_growcmpts(hdr, hdr->numcmpts + 128)
(44,)
(45,RET)
(46,numcmpts)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000000000020000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff1a34ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0x4d49460affffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
static char *mif_getline(jas_stream_t *stream, char *buf, int bufsize) {
int c;
char *bufptr;
assert(bufsize > 0);
bufptr = buf;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
*bufptr++ = c;
--bufsize;
while(bufsize > 1)
if((c = mif_getc(stream)) == EOF)
*bufptr = 'if(!(bufptr = strchr(buf, ' ')))
return 0;
=======================
