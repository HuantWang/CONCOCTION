-----label-----
0
-----code-----
int mif_validate(jas_stream_t *in)
{
	jas_uchar buf[MIF_MAGICLEN];
	uint_fast32_t magic;
	int i;
	int n;

	assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN);

	/* Read the validation data (i.e., the data used for detecting
	  the format). */
	if ((n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0) {
		return -1;
	}

	/* Put the validation data back onto the stream, so that the
	  stream position will not be changed. */
	for (i = n - 1; i >= 0; --i) {
		if (jas_stream_ungetc(in, buf[i]) == EOF) {
			return -1;
		}
	}

	/* Was enough data read? */
	if (n < MIF_MAGICLEN) {
		return -1;
	}

	/* Compute the signature value. */
	magic = (JAS_CAST(uint_fast32_t, buf[0]) << 24) |
	  (JAS_CAST(uint_fast32_t, buf[1]) << 16) |
	  (JAS_CAST(uint_fast32_t, buf[2]) << 8) |
	  buf[3];

	/* Ensure that the signature is correct for this format. */
	if (magic != MIF_MAGIC) {
		return -1;
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
30,31
32,33
33,34
33,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
49,50
49,51
50,51
52,53
52,54
52,55
52,56
53,54
55,56
57,58
59,60
62,63
63,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
71,72
71,73
72,73
75,76
75,77
76,77
79,80
80,81
82,83
83,84
83,85
84,85
84,86
85,86
85,87
85,88
86,87
88,89
90,91
90,92
91,92
93,94
95,96
97,98
98,99
99,100
101,102
101,103
102,103
102,104
103,104
105,106
107,108
108,109
109,110
111,112
112,113
112,114
113,114
115,116
115,117
116,117
116,118
117,118
117,119
118,119
119,120
119,121
120,121
120,122
120,123
121,122
123,124
125,126
125,127
126,127
130,131
131,132
131,133
132,133
132,134
132,135
133,134
135,136
137,138
137,139
138,139
142,143
143,144
143,145
144,145
144,146
144,147
145,146
147,148
149,150
149,151
150,151
154,155
154,156
155,156
158,159
158,160
159,160
159,161
160,161
162,163
164,165
165,166
166,167
168,169
-----nextToken-----
2,4,7,9,10,15,17,20,24,26,29,31,34,36,40,43,45,51,54,56,58,60,61,65,70,73,74,77,78,81,87,89,92,94,96,100,104,106,110,114,122,124,127,128,129,134,136,139,140,141,146,148,151,152,153,156,157,161,163,167,169
-----computeFrom-----
41,42
41,43
47,48
47,49
49,50
49,51
68,69
68,70
71,72
71,73
75,76
75,77
84,85
84,86
102,103
102,104
112,113
112,114
115,116
115,117
116,117
116,118
117,118
117,119
119,120
119,121
131,132
131,133
143,144
143,145
159,160
159,161
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int mif_validate(jas_stream_t *in){	jas_uchar buf[MIF_MAGICLEN];	uint_fast32_t magic;	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN);	/* Read the validation data (i.e., the data used for detecting	  the format). */	if ((n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0) {		return -1;	}	/* Put the validation data back onto the stream, so that the	  stream position will not be changed. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Was enough data read? */	if (n < MIF_MAGICLEN) {		return -1;	}	/* Compute the signature value. */	magic = (JAS_CAST(uint_fast32_t, buf[0]) << 24) |	  (JAS_CAST(uint_fast32_t, buf[1]) << 16) |	  (JAS_CAST(uint_fast32_t, buf[2]) << 8) |	  buf[3];	/* Ensure that the signature is correct for this format. */	if (magic != MIF_MAGIC) {		return -1;	}	return 0;}
int
mif_validate(jas_stream_t *in)
mif_validate
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	jas_uchar buf[MIF_MAGICLEN];	uint_fast32_t magic;	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN);	/* Read the validation data (i.e., the data used for detecting	  the format). */	if ((n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0) {		return -1;	}	/* Put the validation data back onto the stream, so that the	  stream position will not be changed. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Was enough data read? */	if (n < MIF_MAGICLEN) {		return -1;	}	/* Compute the signature value. */	magic = (JAS_CAST(uint_fast32_t, buf[0]) << 24) |	  (JAS_CAST(uint_fast32_t, buf[1]) << 16) |	  (JAS_CAST(uint_fast32_t, buf[2]) << 8) |	  buf[3];	/* Ensure that the signature is correct for this format. */	if (magic != MIF_MAGIC) {		return -1;	}	return 0;}
jas_uchar buf[MIF_MAGICLEN];
jas_uchar buf[MIF_MAGICLEN];
jas_uchar
jas_uchar
buf[MIF_MAGICLEN]
buf
[MIF_MAGICLEN]
MIF_MAGICLEN
MIF_MAGICLEN
uint_fast32_t magic;
uint_fast32_t magic;
uint_fast32_t
uint_fast32_t
magic
magic
int i;
int i;
int
i
i
int n;
int n;
int
n
n
assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN);
assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN)
assert
assert
JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
MIF_MAGICLEN
MIF_MAGICLEN
if ((n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0) {		return -1;	}
(n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0
(n = jas_stream_read(in, buf, MIF_MAGICLEN))
n = jas_stream_read(in, buf, MIF_MAGICLEN)
n
n
jas_stream_read(in, buf, MIF_MAGICLEN)
jas_stream_read
jas_stream_read
in
in
buf
buf
MIF_MAGICLEN
MIF_MAGICLEN
0
{		return -1;	}
return -1;
-1
1
for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
i = n - 1;
i = n - 1
i
i
n - 1
n
n
1
i >= 0
i
i
0
--i
i
i
{		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}
jas_stream_ungetc(in, buf[i]) == EOF
jas_stream_ungetc(in, buf[i])
jas_stream_ungetc
jas_stream_ungetc
in
in
buf[i]
buf
buf
i
i
EOF
EOF
{			return -1;		}
return -1;
-1
1
if (n < MIF_MAGICLEN) {		return -1;	}
n < MIF_MAGICLEN
n
n
MIF_MAGICLEN
MIF_MAGICLEN
{		return -1;	}
return -1;
-1
1
magic = (JAS_CAST(uint_fast32_t, buf[0]) << 24) |	  (JAS_CAST(uint_fast32_t, buf[1]) << 16) |	  (JAS_CAST(uint_fast32_t, buf[2]) << 8) |	  buf[3];
magic = (JAS_CAST(uint_fast32_t, buf[0]) << 24) |	  (JAS_CAST(uint_fast32_t, buf[1]) << 16) |	  (JAS_CAST(uint_fast32_t, buf[2]) << 8) |	  buf[3]
magic
magic
(JAS_CAST(uint_fast32_t, buf[0]) << 24) |	  (JAS_CAST(uint_fast32_t, buf[1]) << 16) |	  (JAS_CAST(uint_fast32_t, buf[2]) << 8) |	  buf[3]
(JAS_CAST(uint_fast32_t, buf[0]) << 24) |	  (JAS_CAST(uint_fast32_t, buf[1]) << 16) |	  (JAS_CAST(uint_fast32_t, buf[2]) << 8)
(JAS_CAST(uint_fast32_t, buf[0]) << 24) |	  (JAS_CAST(uint_fast32_t, buf[1]) << 16)
(JAS_CAST(uint_fast32_t, buf[0]) << 24)
JAS_CAST(uint_fast32_t, buf[0]) << 24
JAS_CAST(uint_fast32_t, buf[0])
JAS_CAST
JAS_CAST
uint_fast32_t
uint_fast32_t
buf[0]
buf
buf
0
24
(JAS_CAST(uint_fast32_t, buf[1]) << 16)
JAS_CAST(uint_fast32_t, buf[1]) << 16
JAS_CAST(uint_fast32_t, buf[1])
JAS_CAST
JAS_CAST
uint_fast32_t
uint_fast32_t
buf[1]
buf
buf
1
16
(JAS_CAST(uint_fast32_t, buf[2]) << 8)
JAS_CAST(uint_fast32_t, buf[2]) << 8
JAS_CAST(uint_fast32_t, buf[2])
JAS_CAST
JAS_CAST
uint_fast32_t
uint_fast32_t
buf[2]
buf
buf
2
8
buf[3]
buf
buf
3
if (magic != MIF_MAGIC) {		return -1;	}
magic != MIF_MAGIC
magic
magic
MIF_MAGIC
MIF_MAGIC
{		return -1;	}
return -1;
-1
1
return 0;
0
-----joern-----
(34,24,0)
(1,4,0)
(21,46,0)
(36,5,0)
(35,30,0)
(37,25,0)
(5,13,0)
(42,35,0)
(12,23,0)
(23,28,0)
(30,13,0)
(22,5,0)
(36,38,0)
(39,4,0)
(26,13,0)
(28,23,0)
(8,39,0)
(21,38,0)
(2,12,0)
(31,37,0)
(44,16,0)
(3,26,0)
(28,13,0)
(24,33,0)
(11,12,0)
(0,16,0)
(8,38,0)
(9,38,0)
(30,35,0)
(16,35,0)
(39,8,0)
(25,14,0)
(35,16,0)
(23,21,0)
(23,12,0)
(17,10,0)
(4,39,0)
(41,28,0)
(26,33,0)
(32,4,0)
(20,21,0)
(5,36,0)
(7,39,0)
(19,24,0)
(4,13,0)
(39,27,0)
(12,13,0)
(45,10,0)
(16,13,0)
(10,23,0)
(43,29,0)
(24,13,0)
(33,26,0)
(17,25,0)
(33,24,0)
(6,28,0)
(40,5,0)
(18,30,0)
(10,38,0)
(15,26,0)
(5,13,1)
(8,39,1)
(11,2,1)
(36,5,1)
(24,34,1)
(40,22,1)
(25,37,1)
(15,24,1)
(41,6,1)
(0,18,1)
(16,44,1)
(6,33,1)
(35,42,1)
(39,4,1)
(45,36,1)
(18,33,1)
(23,28,1)
(24,13,1)
(23,12,1)
(3,15,1)
(16,13,1)
(37,31,1)
(21,20,1)
(19,8,1)
(10,45,1)
(31,30,1)
(22,21,1)
(44,0,1)
(30,13,1)
(30,35,1)
(32,7,1)
(12,11,1)
(28,41,1)
(17,10,1)
(5,40,1)
(28,13,1)
(4,13,1)
(10,23,1)
(17,25,1)
(33,24,1)
(35,16,1)
(4,1,1)
(12,13,1)
(33,26,1)
(26,13,1)
(6,30,1)
(2,28,1)
(39,27,1)
(20,23,1)
(34,19,1)
(1,32,1)
(26,3,1)
(42,16,1)
(21,46,1)
(12,33,2)
(44,33,2)
(17,25,2)
(18,33,2)
(39,27,2)
(36,30,2)
(41,30,2)
(16,13,2)
(45,30,2)
(10,23,2)
(23,30,2)
(5,13,2)
(22,33,2)
(0,33,2)
(23,28,2)
(2,30,2)
(39,4,2)
(6,33,2)
(12,30,2)
(30,33,2)
(23,33,2)
(25,30,2)
(5,33,2)
(45,33,2)
(11,33,2)
(20,30,2)
(40,30,2)
(4,13,2)
(36,33,2)
(21,30,2)
(33,24,2)
(31,30,2)
(10,30,2)
(36,5,2)
(28,30,2)
(22,30,2)
(24,13,2)
(2,33,2)
(28,13,2)
(17,10,2)
(40,33,2)
(12,13,2)
(16,33,2)
(35,33,2)
(21,33,2)
(41,33,2)
(23,12,2)
(28,33,2)
(11,30,2)
(35,16,2)
(5,30,2)
(26,13,2)
(6,30,2)
(37,30,2)
(20,33,2)
(30,35,2)
(33,26,2)
(42,33,2)
(8,39,2)
(21,46,2)
(10,33,2)
(30,13,2)
-----------------------------------
(0,hdr)
(1,numcmpts)
(2,hdr)
(3,maxcmpts)
(4,hdr->numcmpts)
(5,hdr->numcmpts)
(6,hdr)
(7,cmptno)
(8,assert(cmptno >= hdr->numcmpts)
(9,if (hdr->numcmpts >= hdr->maxcmpts)
(10,return 0;)
(11,numcmpts)
(12,hdr->numcmpts)
(13,mif_hdr_t *hdr)
(14,)
(15,hdr)
(16,hdr->numcmpts)
(17,RET)
(18,hdr)
(19,hdr)
(20,cmpt)
(21,hdr->cmpts[hdr->numcmpts] = cmpt)
(22,hdr)
(23,hdr->cmpts[hdr->numcmpts])
(24,hdr->numcmpts)
(25,return -1;)
(26,hdr->maxcmpts)
(27,int cmptno)
(28,hdr->cmpts)
(29,)
(30,mif_hdr_growcmpts(hdr, hdr->numcmpts + 128)
(31,1)
(32,hdr)
(33,hdr->numcmpts >= hdr->maxcmpts)
(34,numcmpts)
(35,hdr->numcmpts + 128)
(36,++hdr->numcmpts)
(37,-1)
(38,)
(39,cmptno >= hdr->numcmpts)
(40,numcmpts)
(41,cmpts)
(42,128)
(43,if (mif_hdr_growcmpts(hdr, hdr->numcmpts + 128)
(44,numcmpts)
(45,0)
(46,mif_cmpt_t *cmpt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffe694ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffb2a0ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff6100030000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
int mif_validate(jas_stream_t *in) {
uint_fast32_t magic;
int i;
int n;
assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN);
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
magic = (JAS_CAST(uint_fast32_t, buf[0]) << 24) | 	  (JAS_CAST(uint_fast32_t, buf[1]) << 16) | 	  (JAS_CAST(uint_fast32_t, buf[2]) << 8) | 	  buf[3];
if(magic != MIF_MAGIC)
return -1;
=======================
