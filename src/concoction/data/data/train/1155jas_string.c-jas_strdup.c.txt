-----label-----
0
-----code-----
char *jas_strdup(const char *s)
{
	int n;
	char *p;
	n = strlen(s) + 1;
	if (!(p = jas_malloc(n * sizeof(char)))) {
		return 0;
	}
	strcpy(p, s);
	return p;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
17,18
18,19
18,20
20,21
20,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
34,35
34,36
35,36
36,37
37,38
37,39
38,39
40,41
40,42
41,42
43,44
43,45
44,45
46,47
47,48
47,49
50,51
51,52
53,54
54,55
54,56
54,57
55,56
57,58
59,60
61,62
62,63
-----nextToken-----
2,4,5,7,9,10,14,16,19,21,22,26,30,32,33,39,42,45,48,49,52,56,58,60,63
-----computeFrom-----
24,25
24,26
27,28
27,29
37,38
37,39
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
char *jas_strdup(const char *s){	int n;	char *p;	n = strlen(s) + 1;	if (!(p = jas_malloc(n * sizeof(char)))) {		return 0;	}	strcpy(p, s);	return p;}
char
*jas_strdup(const char *s)
*
jas_strdup
const char *s
const char
*s
*
s
{	int n;	char *p;	n = strlen(s) + 1;	if (!(p = jas_malloc(n * sizeof(char)))) {		return 0;	}	strcpy(p, s);	return p;}
int n;
int n;
int
n
n
char *p;
char *p;
char
*p
*
p
n = strlen(s) + 1;
n = strlen(s) + 1
n
n
strlen(s) + 1
strlen(s)
strlen
strlen
s
s
1
if (!(p = jas_malloc(n * sizeof(char)))) {		return 0;	}
!(p = jas_malloc(n * sizeof(char)))
(p = jas_malloc(n * sizeof(char)))
p = jas_malloc(n * sizeof(char))
p
p
jas_malloc(n * sizeof(char))
jas_malloc
jas_malloc
n * sizeof(char)
n
n
sizeof(char)
char
char

{		return 0;	}
return 0;
0
strcpy(p, s);
strcpy(p, s)
strcpy
strcpy
p
p
s
s
return p;
p
p
-----joern-----
(19,21,0)
(9,15,0)
(0,19,0)
(21,16,0)
(3,14,0)
(26,9,0)
(4,2,0)
(17,6,0)
(20,9,0)
(3,17,0)
(10,6,0)
(10,21,0)
(24,6,0)
(19,6,0)
(18,6,0)
(22,19,0)
(12,10,0)
(23,21,0)
(10,15,0)
(20,17,0)
(17,20,0)
(16,21,0)
(14,3,0)
(7,14,0)
(0,4,0)
(3,16,0)
(9,20,0)
(27,6,0)
(21,23,0)
(11,17,0)
(1,10,0)
(16,3,0)
(5,21,0)
(13,4,0)
(8,3,0)
(25,20,0)
(22,10,1)
(21,16,1)
(3,17,1)
(3,14,1)
(20,25,1)
(8,5,1)
(25,9,1)
(10,15,1)
(26,11,1)
(17,20,1)
(0,4,1)
(7,8,1)
(14,7,1)
(10,21,1)
(13,23,1)
(9,26,1)
(16,3,1)
(19,22,1)
(4,13,1)
(12,1,1)
(9,15,1)
(10,12,1)
(1,23,1)
(20,9,1)
(5,17,1)
(19,21,1)
(0,19,1)
(23,21,1)
(0,4,2)
(0,19,2)
(12,23,2)
(13,23,2)
(3,17,2)
(10,15,2)
(1,23,2)
(23,21,2)
(20,9,2)
(10,21,2)
(4,23,2)
(9,15,2)
(19,21,2)
(22,23,2)
(16,3,2)
(19,23,2)
(17,20,2)
(3,14,2)
(21,16,2)
(10,23,2)
-----------------------------------
(0,RET)
(1,p)
(2,)
(3,n * sizeof(char)
(4,return 0;)
(5,p)
(6,)
(7,char)
(8,n)
(9,strlen(s)
(10,strcpy(p, s)
(11,n)
(12,s)
(13,0)
(14,sizeof(char)
(15,const char *s)
(16,jas_malloc(n * sizeof(char)
(17,n = strlen(s)
(18,n)
(19,return p;)
(20,strlen(s)
(21,p = jas_malloc(n * sizeof(char)
(22,p)
(23,!(p = jas_malloc(n * sizeof(char)
(24,if (!(p = jas_malloc(n * sizeof(char)
(25,1)
(26,s)
(27,p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff9cf9a66300000000ffffffffffffffff21faa66300000000ffffffffffffffff21faa66300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5c00030300ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
char *jas_strdup(const char *s) {
int n;
char *p;
n = strlen(s) + 1;
strcpy(p, s);
return p;
=======================
