-----label-----
0
-----code-----
jas_stream_t *jas_stream_memopen(char *buf, int bufsize)
{
	jas_stream_t *stream;
	jas_stream_memobj_t *obj;

	if (!(stream = jas_stream_create())) {
		return 0;
	}

	/* A stream associated with a memory buffer is always opened
	for both reading and writing in binary mode. */
	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;

	/* Since the stream data is already resident in memory, buffering
	is not necessary. */
	/* But... It still may be faster to use buffering anyways. */
	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);

	/* Select the operations for a memory stream. */
	stream->ops_ = &jas_stream_memops;

	/* Allocate memory for the underlying memory stream object. */
	if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {
		jas_stream_destroy(stream);
		return 0;
	}
	stream->obj_ = (void *) obj;

	/* Initialize a few important members of the memory stream object. */
	obj->myalloc_ = 0;
	obj->buf_ = 0;

	/* If the buffer size specified is nonpositive, then the buffer
	is allocated internally and automatically grown as needed. */
	if (bufsize <= 0) {
		obj->bufsize_ = 1024;
		obj->growable_ = 1;
	} else {
		obj->bufsize_ = bufsize;
		obj->growable_ = 0;
	}
	if (buf) {
		obj->buf_ = (unsigned char *) buf;
	} else {
		obj->buf_ = jas_malloc(obj->bufsize_);
		obj->myalloc_ = 1;
	}
	if (!obj->buf_) {
		jas_stream_close(stream);
		return 0;
	}

	if (bufsize > 0 && buf) {
		/* If a buffer was supplied by the caller and its length is positive,
		  make the associated buffer data appear in the stream initially. */
		obj->len_ = bufsize;
	} else {
		/* The stream is initially empty. */
		obj->len_ = 0;
	}
	obj->pos_ = 0;
	
	return stream;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
9,11
12,13
12,14
14,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
16,29
16,30
16,31
16,32
17,18
18,19
18,20
19,20
21,22
21,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
31,33
32,33
33,34
34,35
34,36
35,36
37,38
38,39
40,41
41,42
43,44
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
50,52
51,52
53,54
55,56
57,58
58,59
58,60
58,61
58,62
58,63
59,60
61,62
63,64
67,68
68,69
68,70
69,70
69,71
70,71
73,74
74,75
76,77
76,78
77,78
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
92,93
92,94
93,94
95,96
97,98
99,100
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
106,108
108,109
110,111
112,113
113,114
113,115
114,115
114,116
115,116
119,120
120,121
120,122
121,122
121,123
122,123
126,127
126,128
126,129
127,128
127,129
128,129
131,132
131,133
132,133
133,134
133,135
134,135
134,136
135,136
139,140
140,141
140,142
141,142
141,143
142,143
146,147
146,148
147,148
148,149
148,150
149,150
149,151
150,151
153,154
155,156
156,157
156,158
157,158
157,159
158,159
162,163
162,164
162,165
163,164
165,166
166,167
167,168
167,169
168,169
168,170
169,170
172,173
172,174
173,174
173,175
175,176
177,178
179,180
179,181
180,181
181,182
181,183
182,183
182,184
183,184
186,187
186,188
187,188
189,190
189,191
190,191
193,194
194,195
194,196
195,196
195,197
196,197
200,201
200,202
201,202
202,203
202,204
203,204
206,207
206,208
207,208
208,209
208,210
209,210
211,212
213,214
215,216
215,217
215,218
216,217
216,218
217,218
217,219
218,219
221,222
223,224
224,225
225,226
225,227
226,227
226,228
227,228
230,231
232,233
233,234
234,235
234,236
235,236
235,237
236,237
240,241
241,242
241,243
242,243
242,244
243,244
247,248
248,249
-----nextToken-----
3,5,6,8,10,11,13,15,20,22,23,27,29,30,36,39,42,47,48,52,54,56,60,62,64,65,66,71,72,75,81,84,88,89,94,96,98,103,104,107,109,111,116,117,118,123,124,125,129,130,136,137,138,143,144,145,151,152,154,159,160,161,164,170,171,174,176,178,184,185,188,191,192,197,198,199,204,205,210,212,214,219,220,222,228,229,231,237,238,239,244,245,246,249
-----computeFrom-----
34,35
34,36
44,45
44,46
49,50
49,51
50,51
50,52
68,69
68,70
79,80
79,81
100,101
100,102
113,114
113,115
120,121
120,122
127,128
127,129
133,134
133,135
140,141
140,142
148,149
148,150
156,157
156,158
167,168
167,169
181,182
181,183
194,195
194,196
216,217
216,218
217,218
217,219
225,226
225,227
234,235
234,236
241,242
241,243
-----guardedBy-----
219,231
-----guardedByNegation-----
129,154
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
jas_stream_t *jas_stream_memopen(char *buf, int bufsize){	jas_stream_t *stream;	jas_stream_memobj_t *obj;	if (!(stream = jas_stream_create())) {		return 0;	}	/* A stream associated with a memory buffer is always opened	for both reading and writing in binary mode. */	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;	/* Since the stream data is already resident in memory, buffering	is not necessary. */	/* But... It still may be faster to use buffering anyways. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	/* Select the operations for a memory stream. */	stream->ops_ = &jas_stream_memops;	/* Allocate memory for the underlying memory stream object. */	if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	stream->obj_ = (void *) obj;	/* Initialize a few important members of the memory stream object. */	obj->myalloc_ = 0;	obj->buf_ = 0;	/* If the buffer size specified is nonpositive, then the buffer	is allocated internally and automatically grown as needed. */	if (bufsize <= 0) {		obj->bufsize_ = 1024;		obj->growable_ = 1;	} else {		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}	if (buf) {		obj->buf_ = (unsigned char *) buf;	} else {		obj->buf_ = jas_malloc(obj->bufsize_);		obj->myalloc_ = 1;	}	if (!obj->buf_) {		jas_stream_close(stream);		return 0;	}	if (bufsize > 0 && buf) {		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	} else {		/* The stream is initially empty. */		obj->len_ = 0;	}	obj->pos_ = 0;		return stream;}
jas_stream_t
jas_stream_t
*jas_stream_memopen(char *buf, int bufsize)
*
jas_stream_memopen
char *buf
char
*buf
*
buf
int bufsize
int
bufsize
bufsize
{	jas_stream_t *stream;	jas_stream_memobj_t *obj;	if (!(stream = jas_stream_create())) {		return 0;	}	/* A stream associated with a memory buffer is always opened	for both reading and writing in binary mode. */	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;	/* Since the stream data is already resident in memory, buffering	is not necessary. */	/* But... It still may be faster to use buffering anyways. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	/* Select the operations for a memory stream. */	stream->ops_ = &jas_stream_memops;	/* Allocate memory for the underlying memory stream object. */	if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	stream->obj_ = (void *) obj;	/* Initialize a few important members of the memory stream object. */	obj->myalloc_ = 0;	obj->buf_ = 0;	/* If the buffer size specified is nonpositive, then the buffer	is allocated internally and automatically grown as needed. */	if (bufsize <= 0) {		obj->bufsize_ = 1024;		obj->growable_ = 1;	} else {		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}	if (buf) {		obj->buf_ = (unsigned char *) buf;	} else {		obj->buf_ = jas_malloc(obj->bufsize_);		obj->myalloc_ = 1;	}	if (!obj->buf_) {		jas_stream_close(stream);		return 0;	}	if (bufsize > 0 && buf) {		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	} else {		/* The stream is initially empty. */		obj->len_ = 0;	}	obj->pos_ = 0;		return stream;}
jas_stream_t *stream;
jas_stream_t *stream;
jas_stream_t
jas_stream_t
*stream
*
stream
jas_stream_memobj_t *obj;
jas_stream_memobj_t *obj;
jas_stream_memobj_t
jas_stream_memobj_t
*obj
*
obj
if (!(stream = jas_stream_create())) {		return 0;	}
!(stream = jas_stream_create())
(stream = jas_stream_create())
stream = jas_stream_create()
stream
stream
jas_stream_create()
jas_stream_create
jas_stream_create
{		return 0;	}
return 0;
0
stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;
stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
stream->openmode_
stream
stream
openmode_
JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
JAS_STREAM_READ | JAS_STREAM_WRITE
JAS_STREAM_READ
JAS_STREAM_READ
JAS_STREAM_WRITE
JAS_STREAM_WRITE
JAS_STREAM_BINARY
JAS_STREAM_BINARY
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0)
jas_stream_initbuf
jas_stream_initbuf
stream
stream
JAS_STREAM_FULLBUF
JAS_STREAM_FULLBUF
0
0
stream->ops_ = &jas_stream_memops;
stream->ops_ = &jas_stream_memops
stream->ops_
stream
stream
ops_
&jas_stream_memops
jas_stream_memops
jas_stream_memops
if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {		jas_stream_destroy(stream);		return 0;	}
!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))
(obj = jas_malloc(sizeof(jas_stream_memobj_t)))
obj = jas_malloc(sizeof(jas_stream_memobj_t))
obj
obj
jas_malloc(sizeof(jas_stream_memobj_t))
jas_malloc
jas_malloc
sizeof(jas_stream_memobj_t)
jas_stream_memobj_t
jas_stream_memobj_t
jas_stream_memobj_t

{		jas_stream_destroy(stream);		return 0;	}
jas_stream_destroy(stream);
jas_stream_destroy(stream)
jas_stream_destroy
jas_stream_destroy
stream
stream
return 0;
0
stream->obj_ = (void *) obj;
stream->obj_ = (void *) obj
stream->obj_
stream
stream
obj_
(void *) obj
void *
void
*
*
obj
obj
obj->myalloc_ = 0;
obj->myalloc_ = 0
obj->myalloc_
obj
obj
myalloc_
0
obj->buf_ = 0;
obj->buf_ = 0
obj->buf_
obj
obj
buf_
0
if (bufsize <= 0) {		obj->bufsize_ = 1024;		obj->growable_ = 1;	} else {		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}
bufsize <= 0
bufsize
bufsize
0
{		obj->bufsize_ = 1024;		obj->growable_ = 1;	}
obj->bufsize_ = 1024;
obj->bufsize_ = 1024
obj->bufsize_
obj
obj
bufsize_
1024
obj->growable_ = 1;
obj->growable_ = 1
obj->growable_
obj
obj
growable_
1
{		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}
obj->bufsize_ = bufsize;
obj->bufsize_ = bufsize
obj->bufsize_
obj
obj
bufsize_
bufsize
bufsize
obj->growable_ = 0;
obj->growable_ = 0
obj->growable_
obj
obj
growable_
0
if (buf) {		obj->buf_ = (unsigned char *) buf;	} else {		obj->buf_ = jas_malloc(obj->bufsize_);		obj->myalloc_ = 1;	}
buf
buf
{		obj->buf_ = (unsigned char *) buf;	}
obj->buf_ = (unsigned char *) buf;
obj->buf_ = (unsigned char *) buf
obj->buf_
obj
obj
buf_
(unsigned char *) buf
unsigned char *
unsigned char
*
*
buf
buf
{		obj->buf_ = jas_malloc(obj->bufsize_);		obj->myalloc_ = 1;	}
obj->buf_ = jas_malloc(obj->bufsize_);
obj->buf_ = jas_malloc(obj->bufsize_)
obj->buf_
obj
obj
buf_
jas_malloc(obj->bufsize_)
jas_malloc
jas_malloc
obj->bufsize_
obj
obj
bufsize_
obj->myalloc_ = 1;
obj->myalloc_ = 1
obj->myalloc_
obj
obj
myalloc_
1
if (!obj->buf_) {		jas_stream_close(stream);		return 0;	}
!obj->buf_
obj->buf_
obj
obj
buf_
{		jas_stream_close(stream);		return 0;	}
jas_stream_close(stream);
jas_stream_close(stream)
jas_stream_close
jas_stream_close
stream
stream
return 0;
0
if (bufsize > 0 && buf) {		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	} else {		/* The stream is initially empty. */		obj->len_ = 0;	}
bufsize > 0 && buf
bufsize > 0
bufsize
bufsize
0
buf
buf
{		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	}
obj->len_ = bufsize;
obj->len_ = bufsize
obj->len_
obj
obj
len_
bufsize
bufsize
{		/* The stream is initially empty. */		obj->len_ = 0;	}
obj->len_ = 0;
obj->len_ = 0
obj->len_
obj
obj
len_
0
obj->pos_ = 0;
obj->pos_ = 0
obj->pos_
obj
obj
pos_
0
return stream;
stream
stream
-----joern-----
(42,48,0)
(41,37,0)
(36,23,0)
(12,41,0)
(17,15,0)
(24,16,0)
(36,35,0)
(23,9,0)
(27,49,0)
(15,30,0)
(16,39,0)
(46,2,0)
(14,6,0)
(14,1,0)
(0,44,0)
(30,44,0)
(7,38,0)
(18,38,0)
(13,6,0)
(47,10,0)
(36,41,0)
(31,10,0)
(36,2,0)
(43,38,0)
(3,40,0)
(48,35,0)
(16,24,0)
(44,30,0)
(33,10,0)
(10,1,0)
(34,30,0)
(28,26,0)
(22,12,0)
(25,38,0)
(36,3,0)
(29,19,0)
(2,16,0)
(20,38,0)
(35,5,0)
(4,14,0)
(10,49,0)
(32,38,0)
(24,1,0)
(6,14,0)
(11,14,0)
(49,10,0)
(45,24,0)
(2,38,0)
(26,23,0)
(14,30,0)
(19,3,0)
(50,39,0)
(21,14,0)
(8,16,0)
(39,16,0)
(30,15,0)
(15,1,0)
(21,11,1)
(36,41,1)
(39,16,1)
(10,47,1)
(24,45,1)
(4,21,1)
(44,30,1)
(41,12,1)
(22,39,1)
(31,44,1)
(27,10,1)
(23,26,1)
(33,31,1)
(11,39,1)
(30,15,1)
(39,50,1)
(16,24,1)
(2,46,1)
(12,22,1)
(0,30,1)
(46,6,1)
(45,8,1)
(47,33,1)
(48,42,1)
(29,49,1)
(6,13,1)
(50,16,1)
(36,3,1)
(36,35,1)
(17,34,1)
(19,29,1)
(15,17,1)
(14,30,1)
(10,1,1)
(14,1,1)
(2,16,1)
(49,10,1)
(28,6,1)
(44,0,1)
(8,49,1)
(24,1,1)
(6,14,1)
(15,1,1)
(36,23,1)
(13,14,1)
(3,19,1)
(49,27,1)
(14,4,1)
(36,2,1)
(35,48,1)
(26,28,1)
(42,44,1)
(8,49,2)
(39,49,2)
(29,49,2)
(30,15,2)
(12,39,2)
(28,6,2)
(4,39,2)
(6,39,2)
(45,49,2)
(21,39,2)
(2,16,2)
(3,49,2)
(27,44,2)
(41,39,2)
(36,41,2)
(15,1,2)
(49,44,2)
(10,1,2)
(39,16,2)
(46,6,2)
(14,1,2)
(19,49,2)
(26,6,2)
(23,6,2)
(48,44,2)
(6,14,2)
(13,39,2)
(36,2,2)
(2,6,2)
(49,10,2)
(50,49,2)
(42,44,2)
(33,44,2)
(14,30,2)
(11,39,2)
(44,30,2)
(31,44,2)
(16,24,2)
(16,49,2)
(36,35,2)
(36,23,2)
(24,1,2)
(35,44,2)
(14,39,2)
(47,44,2)
(36,3,2)
(10,44,2)
(24,49,2)
(22,39,2)
-----------------------------------
(0,0)
(1,jas_stream_t *stream)
(2,return pos;)
(3,return -1;)
(4,SEEK_SET)
(5,)
(6,jas_stream_seek(stream, oldpos, SEEK_SET)
(7,pos)
(8,pos)
(9,)
(10,jas_stream_seek(stream, 0, SEEK_END)
(11,stream)
(12,-1)
(13,0)
(14,jas_stream_seek(stream, oldpos, SEEK_SET)
(15,jas_stream_tell(stream)
(16,pos = jas_stream_tell(stream)
(17,stream)
(18,if ((oldpos = jas_stream_tell(stream)
(19,-1)
(20,oldpos)
(21,oldpos)
(22,1)
(23,return -1;)
(24,jas_stream_tell(stream)
(25,if (jas_stream_seek(stream, 0, SEEK_END)
(26,-1)
(27,0)
(28,1)
(29,1)
(30,oldpos = jas_stream_tell(stream)
(31,stream)
(32,if ((pos = jas_stream_tell(stream)
(33,0)
(34,oldpos)
(35,return -1;)
(36,RET)
(37,)
(38,)
(39,(pos = jas_stream_tell(stream)
(40,)
(41,return -1;)
(42,1)
(43,if (jas_stream_seek(stream, oldpos, SEEK_SET)
(44,(oldpos = jas_stream_tell(stream)
(45,stream)
(46,pos)
(47,SEEK_END)
(48,-1)
(49,jas_stream_seek(stream, 0, SEEK_END)
(50,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff1a34ad6300000000ffffffffffffffff6334ad6300000000ffffffffffffffff6334ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5800030000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
jas_stream_t *jas_stream_memopen(char *buf, int bufsize) {
jas_stream_t *stream;
jas_stream_memobj_t *obj;
stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);
stream->ops_ = &jas_stream_memops;
stream->obj_ = (void *) obj;
obj->myalloc_ = 0;
obj->buf_ = 0;
if(bufsize <= 0)
obj->bufsize_ = 1024;
obj->growable_ = 1;
obj->buf_ = jas_malloc(obj->bufsize_);
obj->myalloc_ = 1;
obj->len_ = 0;
obj->pos_ = 0;
return stream;
=======================
