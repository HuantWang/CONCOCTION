-----label-----
0
-----code-----
int jas_eprintf(const char *fmt, ...)
{
	int ret;
	va_list ap;

	va_start(ap, fmt);
	ret = vfprintf(stderr, fmt, ap);
	va_end(ap);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
23,26
24,25
26,27
28,29
30,31
31,32
31,33
32,33
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
44,45
44,46
45,46
47,48
49,50
50,51
-----nextToken-----
2,4,6,8,9,13,15,19,21,25,27,29,33,36,38,40,42,46,48,51
-----computeFrom-----
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int jas_eprintf(const char *fmt, ...){	int ret;	va_list ap;	va_start(ap, fmt);	ret = vfprintf(stderr, fmt, ap);	va_end(ap);	return ret;}
int
jas_eprintf(const char *fmt, ...)
jas_eprintf
const char *fmt
const char
*fmt
*
fmt
{	int ret;	va_list ap;	va_start(ap, fmt);	ret = vfprintf(stderr, fmt, ap);	va_end(ap);	return ret;}
int ret;
int ret;
int
ret
ret
va_list ap;
va_list ap;
va_list
va_list
ap
ap
va_start(ap, fmt);
va_start(ap, fmt)
va_start
va_start
ap
ap
fmt
fmt
ret = vfprintf(stderr, fmt, ap);
ret = vfprintf(stderr, fmt, ap)
ret
ret
vfprintf(stderr, fmt, ap)
vfprintf
vfprintf
stderr
stderr
fmt
fmt
ap
ap
va_end(ap);
va_end(ap)
va_end
va_end
ap
ap
return ret;
ret
ret
-----joern-----
(19,35,0)
(35,2,0)
(45,15,0)
(51,33,0)
(1,39,0)
(16,48,0)
(46,33,0)
(32,14,0)
(12,0,0)
(24,23,0)
(24,0,0)
(0,50,0)
(27,54,0)
(49,27,0)
(53,25,0)
(37,46,0)
(36,0,0)
(31,29,0)
(55,25,0)
(23,33,0)
(42,33,0)
(29,4,0)
(28,33,0)
(2,52,0)
(14,24,0)
(35,50,0)
(14,52,0)
(18,24,0)
(17,29,0)
(9,35,0)
(14,39,0)
(23,43,0)
(2,2,0)
(8,11,0)
(25,2,0)
(29,17,0)
(7,35,0)
(48,39,0)
(13,39,0)
(5,17,0)
(17,39,0)
(0,24,0)
(41,2,0)
(20,23,0)
(22,52,0)
(10,14,0)
(17,2,0)
(38,27,0)
(30,48,0)
(6,2,0)
(47,52,0)
(35,54,0)
(21,54,0)
(35,52,0)
(17,52,0)
(24,14,0)
(25,4,0)
(15,39,0)
(40,33,0)
(27,50,0)
(34,46,0)
(0,3,0)
(14,2,0)
(25,52,0)
(44,17,0)
(26,23,0)
(27,49,1)
(38,48,1)
(17,52,1)
(53,55,1)
(15,39,1)
(2,41,1)
(49,38,1)
(35,19,1)
(14,10,1)
(39,1,1)
(52,47,1)
(18,12,1)
(29,4,1)
(48,39,1)
(16,15,1)
(14,2,1)
(55,2,1)
(14,52,1)
(0,24,1)
(19,9,1)
(22,23,1)
(37,25,1)
(1,13,1)
(15,45,1)
(48,30,1)
(2,2,1)
(45,0,1)
(36,29,1)
(29,31,1)
(44,5,1)
(20,26,1)
(25,52,1)
(25,2,1)
(9,7,1)
(31,17,1)
(23,20,1)
(17,44,1)
(24,23,1)
(10,32,1)
(29,17,1)
(34,46,1)
(30,16,1)
(41,6,1)
(17,39,1)
(25,4,1)
(5,48,1)
(35,2,1)
(47,22,1)
(24,14,1)
(25,53,1)
(6,27,1)
(45,29,1)
(35,52,1)
(2,52,1)
(23,43,1)
(14,39,1)
(35,50,1)
(13,35,1)
(27,50,1)
(12,36,1)
(7,25,1)
(32,18,1)
(0,50,1)
(55,52,1)
(46,37,1)
(17,2,1)
(16,39,1)
(25,52,2)
(34,46,2)
(24,29,2)
(0,50,2)
(24,23,2)
(0,29,2)
(2,25,2)
(25,25,2)
(1,25,2)
(9,25,2)
(15,48,2)
(7,25,2)
(17,2,2)
(27,25,2)
(41,25,2)
(14,39,2)
(29,48,2)
(35,2,2)
(32,29,2)
(36,29,2)
(19,25,2)
(44,48,2)
(6,25,2)
(0,24,2)
(35,50,2)
(12,29,2)
(18,29,2)
(29,4,2)
(30,48,2)
(35,25,2)
(45,48,2)
(49,25,2)
(39,25,2)
(25,4,2)
(48,39,2)
(27,50,2)
(16,25,2)
(2,52,2)
(23,43,2)
(29,17,2)
(31,48,2)
(17,48,2)
(15,39,2)
(24,14,2)
(2,2,2)
(38,25,2)
(25,2,2)
(13,25,2)
(48,25,2)
(35,52,2)
(14,2,2)
(16,48,2)
(30,25,2)
(55,25,2)
(14,29,2)
(5,48,2)
(10,29,2)
(14,52,2)
(17,39,2)
(17,52,2)
(53,25,2)
(48,48,2)
-----------------------------------
(0,fprintf(out, " %02x", dp[i + j])
(1,0)
(2,i += 16)
(3,)
(4,size_t len)
(5,i)
(6,i)
(7,out)
(8,if (i + j < len)
(9,"%04x:")
(10,j)
(11,)
(12," %02x")
(13,j)
(14,i + j)
(15,++j)
(16,j)
(17,i + j)
(18,dp)
(19,i)
(20,data)
(21,for (j = 0; j < 16; ++j)
(22,i)
(23,dp = data)
(24,dp[i + j])
(25,i < len)
(26,dp)
(27,fprintf(out, "\\n")
(28,for (i = 0; i < len; i += 16)
(29,i + j < len)
(30,16)
(31,len)
(32,i)
(33,)
(34,RET)
(35,fprintf(out, "%04x:", i)
(36,out)
(37,0)
(38,out)
(39,j = 0)
(40,j)
(41,16)
(42,dp)
(43,void *data)
(44,j)
(45,j)
(46,return 0;)
(47,0)
(48,j < 16)
(49,"\\n")
(50,FILE *out)
(51,i)
(52,i = 0)
(53,len)
(54,)
(55,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e9030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff1a34ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffff5834ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff5f00030000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
arg03:0x4100000000
arg02:0x2d66ff
arg01:0x2d64ff
arg00:0x2d46ff
=========trace=========
int jas_eprintf(const char *fmt, ...) {
int ret;
va_list ap;
ret = vfprintf(stderr, fmt, ap);
return ret;
=======================
