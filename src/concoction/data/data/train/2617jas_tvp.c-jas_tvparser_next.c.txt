-----label-----
0
-----code-----
int jas_tvparser_next(jas_tvparser_t *tvp)
{
	char *p;
	char *tag;
	char *val;

	/* Skip any leading whitespace. */
	p = tvp->pos;
	while (*p != '\0' && isspace(*p)) {
		++p;
	}

	/* Has the end of the input data been reached? */
	if (*p == '\0') {
		/* No more tags are present. */
		tvp->pos = p;
		return 1;
	}

	/* Does the tag name begin with a valid character? */
	if (!JAS_TVP_ISTAG(*p)) {
		return -1;
	}

	/* Remember where the tag name begins. */
	tag = p;

	/* Find the end of the tag name. */
	while (*p != '\0' && JAS_TVP_ISTAG(*p)) {
		++p;
	}

	/* Has the end of the input data been reached? */
	if (*p == '\0') {
		/* The value field is empty. */
		tvp->tag = tag;
		tvp->val = "";
		tvp->pos = p;
		return 0;
	}

	/* Is a value field not present? */
	if (*p != '=') {
		if (*p != '\0' && !isspace(*p)) {
			return -1;
		}
		*p++ = '\0';
		tvp->tag = tag;
		tvp->val = "";
		tvp->pos = p;
		return 0;
	}

	*p++ = '\0';

	val = p;
	while (*p != '\0' && !isspace(*p)) {
		++p;
	}

	if (*p != '\0') {
		*p++ = '\0';
	}

	tvp->pos = p;
	tvp->tag = tag;
	tvp->val = val;

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
12,13
13,14
13,15
15,16
15,17
18,19
19,20
19,21
21,22
21,23
24,25
25,26
25,27
27,28
27,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
38,39
38,40
39,40
39,41
40,41
40,42
41,42
42,43
45,46
45,47
46,47
48,49
49,50
51,52
52,53
53,54
54,55
56,57
56,58
57,58
57,59
58,59
59,60
62,63
62,64
63,64
64,65
64,66
65,66
65,67
66,67
69,70
71,72
73,74
73,75
74,75
75,76
75,77
76,77
78,79
79,80
81,82
82,83
83,84
85,86
86,87
86,88
87,88
89,90
91,92
91,93
92,93
92,94
93,94
93,95
94,95
95,96
98,99
98,100
99,100
101,102
102,103
104,105
105,106
106,107
107,108
109,110
109,111
110,111
110,112
111,112
112,113
115,116
115,117
115,118
115,119
116,117
117,118
117,119
118,119
118,120
119,120
122,123
124,125
125,126
125,127
126,127
126,128
127,128
131,132
132,133
132,134
133,134
133,135
134,135
137,138
139,140
141,142
141,143
142,143
142,144
143,144
144,145
147,148
147,149
147,150
147,151
147,152
147,153
148,149
148,150
149,150
149,151
150,151
150,152
151,152
152,153
155,156
156,157
156,158
157,158
159,160
160,161
162,163
163,164
164,165
166,167
167,168
167,169
168,169
169,170
170,171
173,174
174,175
174,176
175,176
175,177
176,177
179,180
181,182
182,183
182,184
183,184
183,185
184,185
188,189
189,190
189,191
190,191
190,192
191,192
194,195
196,197
198,199
199,200
199,201
200,201
201,202
202,203
205,206
206,207
206,208
207,208
209,210
211,212
211,213
212,213
212,214
213,214
213,215
214,215
215,216
218,219
219,220
219,221
220,221
222,223
223,224
225,226
226,227
227,228
228,229
230,231
230,232
231,232
231,233
232,233
233,234
236,237
237,238
238,239
238,240
239,240
240,241
241,242
244,245
245,246
245,247
246,247
246,248
247,248
250,251
252,253
253,254
253,255
254,255
254,256
255,256
258,259
260,261
261,262
261,263
262,263
262,264
263,264
266,267
268,269
-----nextToken-----
2,4,7,9,10,14,16,17,20,22,23,26,28,29,33,36,37,43,44,47,50,55,60,61,67,68,70,72,77,80,84,88,90,96,97,100,103,108,113,114,120,121,123,128,129,130,135,136,138,140,145,146,153,154,158,161,165,171,172,177,178,180,185,186,187,192,193,195,197,203,204,208,210,216,217,221,224,229,234,235,242,243,248,249,251,256,257,259,264,265,267,269
-----computeFrom-----
31,32
31,33
39,40
39,41
40,41
40,42
57,58
57,59
64,65
64,66
86,87
86,88
92,93
92,94
93,94
93,95
110,111
110,112
117,118
117,119
125,126
125,127
132,133
132,134
142,143
142,144
149,150
149,151
150,151
150,152
167,168
167,169
174,175
174,176
182,183
182,184
189,190
189,191
199,200
199,201
206,207
206,208
212,213
212,214
213,214
213,215
231,232
231,233
238,239
238,240
245,246
245,247
253,254
253,255
261,262
261,263
-----guardedBy-----
60,70
113,138
145,195
234,242
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int jas_tvparser_next(jas_tvparser_t *tvp){	char *p;	char *tag;	char *val;	/* Skip any leading whitespace. */	p = tvp->pos;	while (*p != '\0' && isspace(*p)) {		++p;	}	/* Has the end of the input data been reached? */	if (*p == '\0') {		/* No more tags are present. */		tvp->pos = p;		return 1;	}	/* Does the tag name begin with a valid character? */	if (!JAS_TVP_ISTAG(*p)) {		return -1;	}	/* Remember where the tag name begins. */	tag = p;	/* Find the end of the tag name. */	while (*p != '\0' && JAS_TVP_ISTAG(*p)) {		++p;	}	/* Has the end of the input data been reached? */	if (*p == '\0') {		/* The value field is empty. */		tvp->tag = tag;		tvp->val = "";		tvp->pos = p;		return 0;	}	/* Is a value field not present? */	if (*p != '=') {		if (*p != '\0' && !isspace(*p)) {			return -1;		}		*p++ = '\0';		tvp->tag = tag;		tvp->val = "";		tvp->pos = p;		return 0;	}	*p++ = '\0';	val = p;	while (*p != '\0' && !isspace(*p)) {		++p;	}	if (*p != '\0') {		*p++ = '\0';	}	tvp->pos = p;	tvp->tag = tag;	tvp->val = val;	return 0;}
int
jas_tvparser_next(jas_tvparser_t *tvp)
jas_tvparser_next
jas_tvparser_t *tvp
jas_tvparser_t
jas_tvparser_t
*tvp
*
tvp
{	char *p;	char *tag;	char *val;	/* Skip any leading whitespace. */	p = tvp->pos;	while (*p != '\0' && isspace(*p)) {		++p;	}	/* Has the end of the input data been reached? */	if (*p == '\0') {		/* No more tags are present. */		tvp->pos = p;		return 1;	}	/* Does the tag name begin with a valid character? */	if (!JAS_TVP_ISTAG(*p)) {		return -1;	}	/* Remember where the tag name begins. */	tag = p;	/* Find the end of the tag name. */	while (*p != '\0' && JAS_TVP_ISTAG(*p)) {		++p;	}	/* Has the end of the input data been reached? */	if (*p == '\0') {		/* The value field is empty. */		tvp->tag = tag;		tvp->val = "";		tvp->pos = p;		return 0;	}	/* Is a value field not present? */	if (*p != '=') {		if (*p != '\0' && !isspace(*p)) {			return -1;		}		*p++ = '\0';		tvp->tag = tag;		tvp->val = "";		tvp->pos = p;		return 0;	}	*p++ = '\0';	val = p;	while (*p != '\0' && !isspace(*p)) {		++p;	}	if (*p != '\0') {		*p++ = '\0';	}	tvp->pos = p;	tvp->tag = tag;	tvp->val = val;	return 0;}
char *p;
char *p;
char
*p
*
p
char *tag;
char *tag;
char
*tag
*
tag
char *val;
char *val;
char
*val
*
val
p = tvp->pos;
p = tvp->pos
p
p
tvp->pos
tvp
tvp
pos
while (*p != '\0' && isspace(*p)) {		++p;	}
*p != '\0' && isspace(*p)
*p != '\0'
*p
p
p
'\0'
isspace(*p)
isspace
isspace
*p
p
p
{		++p;	}
++p;
++p
p
p
if (*p == '\0') {		/* No more tags are present. */		tvp->pos = p;		return 1;	}
*p == '\0'
*p
p
p
'\0'
{		/* No more tags are present. */		tvp->pos = p;		return 1;	}
tvp->pos = p;
tvp->pos = p
tvp->pos
tvp
tvp
pos
p
p
return 1;
1
if (!JAS_TVP_ISTAG(*p)) {		return -1;	}
!JAS_TVP_ISTAG(*p)
JAS_TVP_ISTAG(*p)
JAS_TVP_ISTAG
JAS_TVP_ISTAG
*p
p
p
{		return -1;	}
return -1;
-1
1
tag = p;
tag = p
tag
tag
p
p
while (*p != '\0' && JAS_TVP_ISTAG(*p)) {		++p;	}
*p != '\0' && JAS_TVP_ISTAG(*p)
*p != '\0'
*p
p
p
'\0'
JAS_TVP_ISTAG(*p)
JAS_TVP_ISTAG
JAS_TVP_ISTAG
*p
p
p
{		++p;	}
++p;
++p
p
p
if (*p == '\0') {		/* The value field is empty. */		tvp->tag = tag;		tvp->val = "";		tvp->pos = p;		return 0;	}
*p == '\0'
*p
p
p
'\0'
{		/* The value field is empty. */		tvp->tag = tag;		tvp->val = "";		tvp->pos = p;		return 0;	}
tvp->tag = tag;
tvp->tag = tag
tvp->tag
tvp
tvp
tag
tag
tag
tvp->val = "";
tvp->val = ""
tvp->val
tvp
tvp
val
""
tvp->pos = p;
tvp->pos = p
tvp->pos
tvp
tvp
pos
p
p
return 0;
0
if (*p != '=') {		if (*p != '\0' && !isspace(*p)) {			return -1;		}		*p++ = '\0';		tvp->tag = tag;		tvp->val = "";		tvp->pos = p;		return 0;	}
*p != '='
*p
p
p
'='
{		if (*p != '\0' && !isspace(*p)) {			return -1;		}		*p++ = '\0';		tvp->tag = tag;		tvp->val = "";		tvp->pos = p;		return 0;	}
if (*p != '\0' && !isspace(*p)) {			return -1;		}
*p != '\0' && !isspace(*p)
*p != '\0'
*p
p
p
'\0'
!isspace(*p)
isspace(*p)
isspace
isspace
*p
p
p
{			return -1;		}
return -1;
-1
1
*p++ = '\0';
*p++ = '\0'
*p++
p++
p
p
'\0'
tvp->tag = tag;
tvp->tag = tag
tvp->tag
tvp
tvp
tag
tag
tag
tvp->val = "";
tvp->val = ""
tvp->val
tvp
tvp
val
""
tvp->pos = p;
tvp->pos = p
tvp->pos
tvp
tvp
pos
p
p
return 0;
0
*p++ = '\0';
*p++ = '\0'
*p++
p++
p
p
'\0'
val = p;
val = p
val
val
p
p
while (*p != '\0' && !isspace(*p)) {		++p;	}
*p != '\0' && !isspace(*p)
*p != '\0'
*p
p
p
'\0'
!isspace(*p)
isspace(*p)
isspace
isspace
*p
p
p
{		++p;	}
++p;
++p
p
p
if (*p != '\0') {		*p++ = '\0';	}
*p != '\0'
*p
p
p
'\0'
{		*p++ = '\0';	}
*p++ = '\0';
*p++ = '\0'
*p++
p++
p
p
'\0'
tvp->pos = p;
tvp->pos = p
tvp->pos
tvp
tvp
pos
p
p
tvp->tag = tag;
tvp->tag = tag
tvp->tag
tvp
tvp
tag
tag
tag
tvp->val = val;
tvp->val = val
tvp->val
tvp
tvp
val
val
val
return 0;
0
-----joern-----
(13,11,0)
(9,1,0)
(0,8,0)
(3,9,0)
(8,13,0)
(5,1,0)
(10,2,0)
(8,1,0)
(5,2,0)
(13,8,0)
(4,8,0)
(7,9,0)
(6,5,0)
(13,8,1)
(4,9,1)
(12,5,1)
(7,3,1)
(6,13,1)
(5,1,1)
(8,0,1)
(8,1,1)
(9,7,1)
(9,1,1)
(6,9,1)
(5,6,1)
(0,4,1)
(4,9,2)
(9,1,2)
(5,1,2)
(8,9,2)
(0,9,2)
(13,8,2)
(13,9,2)
(8,1,2)
-----------------------------------
(0,buf)
(1,jas_tvparser_t *tvp)
(2,)
(3,tvp)
(4,tvp)
(5,jas_free(tvp)
(6,tvp)
(7,buf)
(8,tvp->buf)
(9,tvp->buf)
(10,if (tvp->buf)
(11,)
(12,RET)
(13,jas_free(tvp->buf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0x000800000000000001000000000000000100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffffe694ad6300000000ffffffffffffffff4095ad6300000000ffffffffffffffff4095ad6300000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
A-data:0xff4fff9100040000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
=========trace=========
int jas_tvparser_next(jas_tvparser_t *tvp) {
char *p;
char *tag;
char *val;
p = tvp->pos;
if(*p == 'tvp->pos = p;
return 1;
=======================
