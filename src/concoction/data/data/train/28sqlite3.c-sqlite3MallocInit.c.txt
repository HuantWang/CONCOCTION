-----label-----
0
-----code-----
int sqlite3MallocInit(void){
printf("\nfile_name:%s\n",__FILE__);
printf("function_name:%s\n",__func__);
printf("------function start!------\n");
printf("int sqlite3MallocInit(void){\n");
  if( sqlite3GlobalConfig.m.xMalloc==0 ){printf("if()\n");
  
    printf("sqlite3MemSetDefault();\n");
    sqlite3MemSetDefault();
  }
  memset(&mem0, 0, sizeof(mem0));
  if( sqlite3GlobalConfig.bCoreMutex ){printf("if(sqlite3GlobalConfig.bCoreMutex)\n");
  
    mem0.mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MEM);
  }
  if( sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100
      && sqlite3GlobalConfig.nScratch>0 ){printf("if(sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100       && sqlite3GlobalConfig.nScratch>0)\n");
      
    printf("int i, n, sz;\n");
    int i, n, sz;
    printf("ScratchFreeslot *pSlot;\n");
    ScratchFreeslot *pSlot;
    printf("sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);\n");
sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);
    sqlite3GlobalConfig.szScratch = sz;
    printf("pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;\n");
pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;
    printf("n = sqlite3GlobalConfig.nScratch;\n");
n = sqlite3GlobalConfig.nScratch;
    mem0.pScratchFree = pSlot;
    mem0.nScratchFree = n;
    for(i=0; i<n-1; i++){printf("for(i=0;i<n-1;i++)\n");
    
      printf("pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);\n");
pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);
      printf("pSlot = pSlot->pNext;\n");
pSlot = pSlot->pNext;
    }
    printf("pSlot->pNext = 0;\n");
pSlot->pNext = 0;
    mem0.pScratchEnd = (void*)&pSlot[1];
  }else{
    mem0.pScratchEnd = 0;
    sqlite3GlobalConfig.pScratch = 0;
    sqlite3GlobalConfig.szScratch = 0;
    sqlite3GlobalConfig.nScratch = 0;
  }
  if( sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512
      || sqlite3GlobalConfig.nPage<1 ){printf("if(sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512       || sqlite3GlobalConfig.nPage<1)\n");
      
    sqlite3GlobalConfig.pPage = 0;
    sqlite3GlobalConfig.szPage = 0;
    sqlite3GlobalConfig.nPage = 0;
  }
  return sqlite3GlobalConfig.m.xInit(sqlite3GlobalConfig.m.pAppData);
printf("------function end!------\n");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
10,11
11,12
11,13
11,14
12,13
16,17
17,18
17,19
17,20
18,19
21,22
23,24
24,25
24,26
25,26
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
35,37
36,37
36,38
37,38
42,43
42,44
42,45
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
53,54
54,55
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
62,63
65,66
66,67
66,68
67,68
70,71
70,72
71,72
71,73
72,73
75,76
75,77
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
90,91
92,93
92,94
92,95
93,94
93,95
94,95
94,96
95,96
95,97
96,97
99,100
99,101
100,101
100,102
101,102
105,106
105,107
106,107
106,108
107,108
111,112
111,113
111,114
111,115
111,116
111,117
111,118
111,119
111,120
111,121
111,122
111,123
111,124
111,125
111,126
111,127
111,128
111,129
112,113
113,114
113,115
114,115
117,118
118,119
118,120
119,120
122,123
123,124
123,125
123,126
123,127
125,126
127,128
129,130
131,132
132,133
132,134
133,134
136,137
137,138
137,139
138,139
140,141
140,142
143,144
144,145
144,146
145,146
148,149
149,150
149,151
150,151
152,153
152,154
153,154
155,156
155,157
156,157
159,160
160,161
160,162
161,162
161,163
162,163
165,166
167,168
168,169
168,170
169,170
172,173
173,174
173,175
174,175
176,177
176,178
177,178
177,179
178,179
180,181
182,183
182,184
183,184
186,187
187,188
187,189
188,189
191,192
192,193
192,194
193,194
195,196
195,197
196,197
199,200
200,201
200,202
201,202
201,203
202,203
205,206
207,208
208,209
208,210
209,210
209,211
210,211
213,214
215,216
215,217
215,218
215,219
216,217
217,218
217,219
218,219
221,222
221,223
222,223
224,225
224,226
225,226
228,229
229,230
231,232
231,233
231,234
231,235
231,236
232,233
233,234
233,235
234,235
237,238
238,239
238,240
239,240
242,243
243,244
243,245
244,245
244,246
245,246
248,249
248,250
249,250
249,251
250,251
252,253
254,255
255,256
255,257
256,257
258,259
258,260
259,260
259,261
261,262
263,264
265,266
266,267
266,268
267,268
270,271
271,272
271,273
272,273
274,275
274,276
275,276
278,279
279,280
279,281
280,281
283,284
284,285
284,286
285,286
285,287
286,287
290,291
291,292
291,293
292,293
292,294
293,294
296,297
296,298
297,298
297,299
299,300
301,302
302,303
302,304
303,304
306,307
306,308
306,309
306,310
307,308
308,309
308,310
309,310
309,311
310,311
314,315
315,316
315,317
316,317
316,318
317,318
321,322
322,323
322,324
323,324
323,325
324,325
328,329
329,330
329,331
330,331
330,332
331,332
335,336
335,337
336,337
336,338
337,338
337,339
338,339
338,340
339,340
339,341
340,341
344,345
344,346
345,346
345,347
346,347
350,351
350,352
351,352
351,353
352,353
356,357
356,358
356,359
356,360
357,358
358,359
358,360
359,360
362,363
363,364
363,365
364,365
364,366
365,366
369,370
370,371
370,372
371,372
371,373
372,373
376,377
377,378
377,379
378,379
378,380
379,380
383,384
384,385
384,386
385,386
385,387
386,387
386,388
387,388
391,392
391,393
392,393
392,394
393,394
397,398
398,399
398,400
399,400
-----nextToken-----
2,4,6,8,13,14,15,19,20,22,26,27,31,32,38,39,40,41,46,47,51,52,56,60,63,64,68,69,73,74,79,80,85,86,89,91,97,98,102,103,104,108,109,110,115,116,120,121,124,126,128,130,134,135,139,141,142,146,147,151,154,157,158,163,164,166,170,171,175,179,181,184,185,189,190,194,197,198,203,204,206,211,212,214,219,220,223,226,227,230,235,236,240,241,246,247,251,253,257,260,262,264,268,269,273,276,277,281,282,287,288,289,294,295,298,300,304,305,311,312,313,318,319,320,325,326,327,332,333,334,341,342,343,347,348,349,353,354,355,360,361,366,367,368,373,374,375,380,381,382,388,389,390,394,395,396,400,401
-----computeFrom-----
34,35
34,36
82,83
82,84
93,94
93,95
94,95
94,96
99,100
99,101
105,106
105,107
149,150
149,151
160,161
160,162
173,174
173,175
192,193
192,194
200,201
200,202
208,209
208,210
217,218
217,219
221,222
221,223
224,225
224,226
243,244
243,245
255,256
255,257
271,272
271,273
284,285
284,286
291,292
291,293
308,309
308,310
315,316
315,317
322,323
322,324
329,330
329,331
336,337
336,338
337,338
337,339
338,339
338,340
344,345
344,346
350,351
350,352
363,364
363,365
370,371
370,372
377,378
377,379
-----guardedBy-----
103,164
98,185
109,198
108,197
353,380
348,374
354,381
342,367
-----guardedByNegation-----
103,326
98,319
109,333
108,332
-----lastLexicalUse-----
103,326
98,319
109,333
108,332
-----jump-----
103,326
98,319
109,333
108,332
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
int sqlite3MallocInit(void){printf("\nfile_name:%s\n",__FILE__);printf("function_name:%s\n",__func__);printf("------function start!------\n");printf("int sqlite3MallocInit(void){\n");  if( sqlite3GlobalConfig.m.xMalloc==0 ){printf("if()\n");      printf("sqlite3MemSetDefault();\n");    sqlite3MemSetDefault();  }  memset(&mem0, 0, sizeof(mem0));  if( sqlite3GlobalConfig.bCoreMutex ){printf("if(sqlite3GlobalConfig.bCoreMutex)\n");      mem0.mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MEM);  }  if( sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100      && sqlite3GlobalConfig.nScratch>0 ){printf("if(sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100       && sqlite3GlobalConfig.nScratch>0)\n");          printf("int i, n, sz;\n");    int i, n, sz;    printf("ScratchFreeslot *pSlot;\n");    ScratchFreeslot *pSlot;    printf("sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);\n");sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);    sqlite3GlobalConfig.szScratch = sz;    printf("pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;\n");pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;    printf("n = sqlite3GlobalConfig.nScratch;\n");n = sqlite3GlobalConfig.nScratch;    mem0.pScratchFree = pSlot;    mem0.nScratchFree = n;    for(i=0; i<n-1; i++){printf("for(i=0;i<n-1;i++)\n");          printf("pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);\n");pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);      printf("pSlot = pSlot->pNext;\n");pSlot = pSlot->pNext;    }    printf("pSlot->pNext = 0;\n");pSlot->pNext = 0;    mem0.pScratchEnd = (void*)&pSlot[1];  }else{    mem0.pScratchEnd = 0;    sqlite3GlobalConfig.pScratch = 0;    sqlite3GlobalConfig.szScratch = 0;    sqlite3GlobalConfig.nScratch = 0;  }  if( sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512      || sqlite3GlobalConfig.nPage<1 ){printf("if(sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512       || sqlite3GlobalConfig.nPage<1)\n");          sqlite3GlobalConfig.pPage = 0;    sqlite3GlobalConfig.szPage = 0;    sqlite3GlobalConfig.nPage = 0;  }  return sqlite3GlobalConfig.m.xInit(sqlite3GlobalConfig.m.pAppData);printf("------function end!------\n");}
int
sqlite3MallocInit(void)
sqlite3MallocInit
void
void


{printf("\nfile_name:%s\n",__FILE__);printf("function_name:%s\n",__func__);printf("------function start!------\n");printf("int sqlite3MallocInit(void){\n");  if( sqlite3GlobalConfig.m.xMalloc==0 ){printf("if()\n");      printf("sqlite3MemSetDefault();\n");    sqlite3MemSetDefault();  }  memset(&mem0, 0, sizeof(mem0));  if( sqlite3GlobalConfig.bCoreMutex ){printf("if(sqlite3GlobalConfig.bCoreMutex)\n");      mem0.mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MEM);  }  if( sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100      && sqlite3GlobalConfig.nScratch>0 ){printf("if(sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100       && sqlite3GlobalConfig.nScratch>0)\n");          printf("int i, n, sz;\n");    int i, n, sz;    printf("ScratchFreeslot *pSlot;\n");    ScratchFreeslot *pSlot;    printf("sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);\n");sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);    sqlite3GlobalConfig.szScratch = sz;    printf("pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;\n");pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;    printf("n = sqlite3GlobalConfig.nScratch;\n");n = sqlite3GlobalConfig.nScratch;    mem0.pScratchFree = pSlot;    mem0.nScratchFree = n;    for(i=0; i<n-1; i++){printf("for(i=0;i<n-1;i++)\n");          printf("pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);\n");pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);      printf("pSlot = pSlot->pNext;\n");pSlot = pSlot->pNext;    }    printf("pSlot->pNext = 0;\n");pSlot->pNext = 0;    mem0.pScratchEnd = (void*)&pSlot[1];  }else{    mem0.pScratchEnd = 0;    sqlite3GlobalConfig.pScratch = 0;    sqlite3GlobalConfig.szScratch = 0;    sqlite3GlobalConfig.nScratch = 0;  }  if( sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512      || sqlite3GlobalConfig.nPage<1 ){printf("if(sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512       || sqlite3GlobalConfig.nPage<1)\n");          sqlite3GlobalConfig.pPage = 0;    sqlite3GlobalConfig.szPage = 0;    sqlite3GlobalConfig.nPage = 0;  }  return sqlite3GlobalConfig.m.xInit(sqlite3GlobalConfig.m.pAppData);printf("------function end!------\n");}
printf("\nfile_name:%s\n",__FILE__);
printf("\nfile_name:%s\n",__FILE__)
printf
printf
"\nfile_name:%s\n"
__FILE__
printf("function_name:%s\n",__func__);
printf("function_name:%s\n",__func__)
printf
printf
"function_name:%s\n"
__func__
__func__
printf("------function start!------\n");
printf("------function start!------\n")
printf
printf
"------function start!------\n"
printf("int sqlite3MallocInit(void){\n");
printf("int sqlite3MallocInit(void){\n")
printf
printf
"int sqlite3MallocInit(void){\n"
if( sqlite3GlobalConfig.m.xMalloc==0 ){printf("if()\n");      printf("sqlite3MemSetDefault();\n");    sqlite3MemSetDefault();  }
sqlite3GlobalConfig.m.xMalloc==0
sqlite3GlobalConfig.m.xMalloc
sqlite3GlobalConfig.m
sqlite3GlobalConfig
sqlite3GlobalConfig
m
xMalloc
0
{printf("if()\n");      printf("sqlite3MemSetDefault();\n");    sqlite3MemSetDefault();  }
printf("if()\n");
printf("if()\n")
printf
printf
"if()\n"
printf("sqlite3MemSetDefault();\n");
printf("sqlite3MemSetDefault();\n")
printf
printf
"sqlite3MemSetDefault();\n"
sqlite3MemSetDefault();
sqlite3MemSetDefault()
sqlite3MemSetDefault
sqlite3MemSetDefault
memset(&mem0, 0, sizeof(mem0));
memset(&mem0, 0, sizeof(mem0))
memset
memset
&mem0
mem0
mem0
0
sizeof(mem0)
mem0
mem0
mem0

if( sqlite3GlobalConfig.bCoreMutex ){printf("if(sqlite3GlobalConfig.bCoreMutex)\n");      mem0.mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MEM);  }
sqlite3GlobalConfig.bCoreMutex
sqlite3GlobalConfig
sqlite3GlobalConfig
bCoreMutex
{printf("if(sqlite3GlobalConfig.bCoreMutex)\n");      mem0.mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MEM);  }
printf("if(sqlite3GlobalConfig.bCoreMutex)\n");
printf("if(sqlite3GlobalConfig.bCoreMutex)\n")
printf
printf
"if(sqlite3GlobalConfig.bCoreMutex)\n"
mem0.mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MEM);
mem0.mutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MEM)
mem0.mutex
mem0
mem0
mutex
sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MEM)
sqlite3MutexAlloc
sqlite3MutexAlloc
SQLITE_MUTEX_STATIC_MEM
SQLITE_MUTEX_STATIC_MEM
if( sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100      && sqlite3GlobalConfig.nScratch>0 ){printf("if(sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100       && sqlite3GlobalConfig.nScratch>0)\n");          printf("int i, n, sz;\n");    int i, n, sz;    printf("ScratchFreeslot *pSlot;\n");    ScratchFreeslot *pSlot;    printf("sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);\n");sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);    sqlite3GlobalConfig.szScratch = sz;    printf("pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;\n");pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;    printf("n = sqlite3GlobalConfig.nScratch;\n");n = sqlite3GlobalConfig.nScratch;    mem0.pScratchFree = pSlot;    mem0.nScratchFree = n;    for(i=0; i<n-1; i++){printf("for(i=0;i<n-1;i++)\n");          printf("pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);\n");pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);      printf("pSlot = pSlot->pNext;\n");pSlot = pSlot->pNext;    }    printf("pSlot->pNext = 0;\n");pSlot->pNext = 0;    mem0.pScratchEnd = (void*)&pSlot[1];  }else{    mem0.pScratchEnd = 0;    sqlite3GlobalConfig.pScratch = 0;    sqlite3GlobalConfig.szScratch = 0;    sqlite3GlobalConfig.nScratch = 0;  }
sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100      && sqlite3GlobalConfig.nScratch>0
sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100
sqlite3GlobalConfig.pScratch
sqlite3GlobalConfig
sqlite3GlobalConfig
pScratch
sqlite3GlobalConfig.szScratch>=100
sqlite3GlobalConfig.szScratch
sqlite3GlobalConfig
sqlite3GlobalConfig
szScratch
100
sqlite3GlobalConfig.nScratch>0
sqlite3GlobalConfig.nScratch
sqlite3GlobalConfig
sqlite3GlobalConfig
nScratch
0
{printf("if(sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100       && sqlite3GlobalConfig.nScratch>0)\n");          printf("int i, n, sz;\n");    int i, n, sz;    printf("ScratchFreeslot *pSlot;\n");    ScratchFreeslot *pSlot;    printf("sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);\n");sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);    sqlite3GlobalConfig.szScratch = sz;    printf("pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;\n");pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;    printf("n = sqlite3GlobalConfig.nScratch;\n");n = sqlite3GlobalConfig.nScratch;    mem0.pScratchFree = pSlot;    mem0.nScratchFree = n;    for(i=0; i<n-1; i++){printf("for(i=0;i<n-1;i++)\n");          printf("pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);\n");pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);      printf("pSlot = pSlot->pNext;\n");pSlot = pSlot->pNext;    }    printf("pSlot->pNext = 0;\n");pSlot->pNext = 0;    mem0.pScratchEnd = (void*)&pSlot[1];  }
printf("if(sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100       && sqlite3GlobalConfig.nScratch>0)\n");
printf("if(sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100       && sqlite3GlobalConfig.nScratch>0)\n")
printf
printf
"if(sqlite3GlobalConfig.pScratch && sqlite3GlobalConfig.szScratch>=100       && sqlite3GlobalConfig.nScratch>0)\n"
printf("int i, n, sz;\n");
printf("int i, n, sz;\n")
printf
printf
"int i, n, sz;\n"
int i, n, sz;
int i, n, sz;
int
i
i
n
n
sz
sz
printf("ScratchFreeslot *pSlot;\n");
printf("ScratchFreeslot *pSlot;\n")
printf
printf
"ScratchFreeslot *pSlot;\n"
ScratchFreeslot *pSlot;
ScratchFreeslot *pSlot;
ScratchFreeslot
ScratchFreeslot
*pSlot
*
pSlot
printf("sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);\n");
printf("sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);\n")
printf
printf
"sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);\n"
sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch);
sz = ROUNDDOWN8(sqlite3GlobalConfig.szScratch)
sz
sz
ROUNDDOWN8(sqlite3GlobalConfig.szScratch)
ROUNDDOWN8
ROUNDDOWN8
sqlite3GlobalConfig.szScratch
sqlite3GlobalConfig
sqlite3GlobalConfig
szScratch
sqlite3GlobalConfig.szScratch = sz;
sqlite3GlobalConfig.szScratch = sz
sqlite3GlobalConfig.szScratch
sqlite3GlobalConfig
sqlite3GlobalConfig
szScratch
sz
sz
printf("pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;\n");
printf("pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;\n")
printf
printf
"pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;\n"
pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch;
pSlot = (ScratchFreeslot*)sqlite3GlobalConfig.pScratch
pSlot
pSlot
(ScratchFreeslot*)sqlite3GlobalConfig.pScratch
ScratchFreeslot*
ScratchFreeslot
ScratchFreeslot
*
*
sqlite3GlobalConfig.pScratch
sqlite3GlobalConfig
sqlite3GlobalConfig
pScratch
printf("n = sqlite3GlobalConfig.nScratch;\n");
printf("n = sqlite3GlobalConfig.nScratch;\n")
printf
printf
"n = sqlite3GlobalConfig.nScratch;\n"
n = sqlite3GlobalConfig.nScratch;
n = sqlite3GlobalConfig.nScratch
n
n
sqlite3GlobalConfig.nScratch
sqlite3GlobalConfig
sqlite3GlobalConfig
nScratch
mem0.pScratchFree = pSlot;
mem0.pScratchFree = pSlot
mem0.pScratchFree
mem0
mem0
pScratchFree
pSlot
pSlot
mem0.nScratchFree = n;
mem0.nScratchFree = n
mem0.nScratchFree
mem0
mem0
nScratchFree
n
n
for(i=0; i<n-1; i++){printf("for(i=0;i<n-1;i++)\n");          printf("pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);\n");pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);      printf("pSlot = pSlot->pNext;\n");pSlot = pSlot->pNext;    }
i=0;
i=0
i
i
0
i<n-1
i
i
n-1
n
n
1
i++
i
i
{printf("for(i=0;i<n-1;i++)\n");          printf("pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);\n");pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);      printf("pSlot = pSlot->pNext;\n");pSlot = pSlot->pNext;    }
printf("for(i=0;i<n-1;i++)\n");
printf("for(i=0;i<n-1;i++)\n")
printf
printf
"for(i=0;i<n-1;i++)\n"
printf("pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);\n");
printf("pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);\n")
printf
printf
"pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);\n"
pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot);
pSlot->pNext = (ScratchFreeslot*)(sz+(char*)pSlot)
pSlot->pNext
pSlot
pSlot
pNext
(ScratchFreeslot*)(sz+(char*)pSlot)
ScratchFreeslot*
ScratchFreeslot
ScratchFreeslot
*
*
(sz+(char*)pSlot)
sz+(char*)pSlot
sz
sz
(char*)pSlot
char*
char
*
*
pSlot
pSlot
printf("pSlot = pSlot->pNext;\n");
printf("pSlot = pSlot->pNext;\n")
printf
printf
"pSlot = pSlot->pNext;\n"
pSlot = pSlot->pNext;
pSlot = pSlot->pNext
pSlot
pSlot
pSlot->pNext
pSlot
pSlot
pNext
printf("pSlot->pNext = 0;\n");
printf("pSlot->pNext = 0;\n")
printf
printf
"pSlot->pNext = 0;\n"
pSlot->pNext = 0;
pSlot->pNext = 0
pSlot->pNext
pSlot
pSlot
pNext
0
mem0.pScratchEnd = (void*)&pSlot[1];
mem0.pScratchEnd = (void*)&pSlot[1]
mem0.pScratchEnd
mem0
mem0
pScratchEnd
(void*)&pSlot[1]
void*
void
*
*
&pSlot[1]
pSlot[1]
pSlot
pSlot
1
{    mem0.pScratchEnd = 0;    sqlite3GlobalConfig.pScratch = 0;    sqlite3GlobalConfig.szScratch = 0;    sqlite3GlobalConfig.nScratch = 0;  }
mem0.pScratchEnd = 0;
mem0.pScratchEnd = 0
mem0.pScratchEnd
mem0
mem0
pScratchEnd
0
sqlite3GlobalConfig.pScratch = 0;
sqlite3GlobalConfig.pScratch = 0
sqlite3GlobalConfig.pScratch
sqlite3GlobalConfig
sqlite3GlobalConfig
pScratch
0
sqlite3GlobalConfig.szScratch = 0;
sqlite3GlobalConfig.szScratch = 0
sqlite3GlobalConfig.szScratch
sqlite3GlobalConfig
sqlite3GlobalConfig
szScratch
0
sqlite3GlobalConfig.nScratch = 0;
sqlite3GlobalConfig.nScratch = 0
sqlite3GlobalConfig.nScratch
sqlite3GlobalConfig
sqlite3GlobalConfig
nScratch
0
if( sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512      || sqlite3GlobalConfig.nPage<1 ){printf("if(sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512       || sqlite3GlobalConfig.nPage<1)\n");          sqlite3GlobalConfig.pPage = 0;    sqlite3GlobalConfig.szPage = 0;    sqlite3GlobalConfig.nPage = 0;  }
sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512      || sqlite3GlobalConfig.nPage<1
sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512
sqlite3GlobalConfig.pPage==0
sqlite3GlobalConfig.pPage
sqlite3GlobalConfig
sqlite3GlobalConfig
pPage
0
sqlite3GlobalConfig.szPage<512
sqlite3GlobalConfig.szPage
sqlite3GlobalConfig
sqlite3GlobalConfig
szPage
512
sqlite3GlobalConfig.nPage<1
sqlite3GlobalConfig.nPage
sqlite3GlobalConfig
sqlite3GlobalConfig
nPage
1
{printf("if(sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512       || sqlite3GlobalConfig.nPage<1)\n");          sqlite3GlobalConfig.pPage = 0;    sqlite3GlobalConfig.szPage = 0;    sqlite3GlobalConfig.nPage = 0;  }
printf("if(sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512       || sqlite3GlobalConfig.nPage<1)\n");
printf("if(sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512       || sqlite3GlobalConfig.nPage<1)\n")
printf
printf
"if(sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512       || sqlite3GlobalConfig.nPage<1)\n"
sqlite3GlobalConfig.pPage = 0;
sqlite3GlobalConfig.pPage = 0
sqlite3GlobalConfig.pPage
sqlite3GlobalConfig
sqlite3GlobalConfig
pPage
0
sqlite3GlobalConfig.szPage = 0;
sqlite3GlobalConfig.szPage = 0
sqlite3GlobalConfig.szPage
sqlite3GlobalConfig
sqlite3GlobalConfig
szPage
0
sqlite3GlobalConfig.nPage = 0;
sqlite3GlobalConfig.nPage = 0
sqlite3GlobalConfig.nPage
sqlite3GlobalConfig
sqlite3GlobalConfig
nPage
0
return sqlite3GlobalConfig.m.xInit(sqlite3GlobalConfig.m.pAppData);
sqlite3GlobalConfig.m.xInit(sqlite3GlobalConfig.m.pAppData)
sqlite3GlobalConfig.m.xInit
sqlite3GlobalConfig.m
sqlite3GlobalConfig
sqlite3GlobalConfig
m
xInit
sqlite3GlobalConfig.m.pAppData
sqlite3GlobalConfig.m
sqlite3GlobalConfig
sqlite3GlobalConfig
m
pAppData
printf("------function end!------\n");
printf("------function end!------\n")
printf
printf
"------function end!------\n"
-----joern-----
(41,151,0)
(173,190,0)
(163,146,0)
(194,102,0)
(6,64,0)
(93,65,0)
(83,125,0)
(34,15,0)
(193,68,0)
(86,132,0)
(122,1,0)
(74,65,0)
(107,145,0)
(123,107,0)
(38,143,0)
(34,125,0)
(92,10,0)
(180,199,0)
(23,192,0)
(157,140,0)
(153,34,0)
(2,131,0)
(42,6,0)
(15,34,0)
(209,85,0)
(7,74,0)
(156,199,0)
(65,203,0)
(49,184,0)
(164,167,0)
(128,132,0)
(151,138,0)
(30,157,0)
(184,69,0)
(20,69,0)
(188,125,0)
(130,44,0)
(127,88,0)
(64,69,0)
(129,140,0)
(65,161,0)
(89,142,0)
(39,69,0)
(85,125,0)
(91,199,0)
(6,42,0)
(154,69,0)
(174,108,0)
(150,176,0)
(12,209,0)
(27,187,0)
(11,198,0)
(146,195,0)
(148,156,0)
(55,73,0)
(42,61,0)
(65,74,0)
(29,127,0)
(74,7,0)
(179,160,0)
(209,12,0)
(195,146,0)
(186,133,0)
(77,22,0)
(9,199,0)
(139,111,0)
(88,127,0)
(210,199,0)
(146,44,0)
(190,195,0)
(138,135,0)
(124,69,0)
(137,61,0)
(158,116,0)
(135,203,0)
(58,20,0)
(203,67,0)
(162,55,0)
(78,15,0)
(81,203,0)
(155,108,0)
(140,65,0)
(16,72,0)
(15,26,0)
(132,211,0)
(160,179,0)
(206,90,0)
(84,51,0)
(147,136,0)
(103,199,0)
(135,138,0)
(203,199,0)
(19,114,0)
(141,108,0)
(65,140,0)
(209,49,0)
(43,49,0)
(133,118,0)
(123,69,0)
(81,190,0)
(12,69,0)
(56,179,0)
(208,67,0)
(94,68,0)
(104,108,0)
(61,42,0)
(127,140,0)
(115,180,0)
(146,163,0)
(140,199,0)
(122,132,0)
(212,9,0)
(182,107,0)
(85,184,0)
(134,144,0)
(114,141,0)
(117,206,0)
(132,125,0)
(131,195,0)
(169,130,0)
(68,70,0)
(167,108,0)
(192,199,0)
(191,69,0)
(1,70,0)
(105,143,0)
(90,125,0)
(47,72,0)
(119,103,0)
(100,125,0)
(107,182,0)
(211,132,0)
(13,118,0)
(45,127,0)
(22,199,0)
(118,20,0)
(118,133,0)
(4,129,0)
(184,132,0)
(173,125,0)
(116,69,0)
(196,102,0)
(18,131,0)
(97,173,0)
(67,203,0)
(195,69,0)
(175,190,0)
(44,146,0)
(179,187,0)
(206,123,0)
(136,199,0)
(48,1,0)
(79,160,0)
(44,130,0)
(20,118,0)
(152,100,0)
(101,73,0)
(197,88,0)
(51,73,0)
(133,125,0)
(68,108,0)
(126,191,0)
(143,184,0)
(72,144,0)
(113,130,0)
(88,201,0)
(160,125,0)
(132,122,0)
(132,184,0)
(125,73,0)
(6,66,0)
(5,47,0)
(129,4,0)
(87,65,0)
(35,64,0)
(49,209,0)
(183,36,0)
(110,191,0)
(68,184,0)
(72,47,0)
(63,140,0)
(102,125,0)
(99,210,0)
(7,70,0)
(130,125,0)
(151,4,0)
(26,69,0)
(96,85,0)
(75,141,0)
(66,6,0)
(81,25,0)
(111,69,0)
(190,81,0)
(21,7,0)
(53,69,0)
(90,206,0)
(64,6,0)
(166,2,0)
(102,211,0)
(59,160,0)
(112,199,0)
(138,100,0)
(25,69,0)
(71,69,0)
(176,125,0)
(40,20,0)
(118,195,0)
(181,83,0)
(200,2,0)
(95,199,0)
(35,83,0)
(185,104,0)
(178,184,0)
(82,25,0)
(47,125,0)
(157,199,0)
(33,90,0)
(107,123,0)
(17,35,0)
(100,70,0)
(83,35,0)
(52,173,0)
(131,2,0)
(80,61,0)
(182,176,0)
(121,124,0)
(10,199,0)
(1,122,0)
(57,157,0)
(28,202,0)
(62,203,0)
(20,203,0)
(170,154,0)
(36,199,0)
(176,182,0)
(67,161,0)
(2,125,0)
(165,135,0)
(46,90,0)
(168,47,0)
(85,209,0)
(54,207,0)
(202,69,0)
(159,26,0)
(50,39,0)
(205,71,0)
(149,174,0)
(20,161,0)
(157,207,0)
(138,151,0)
(145,107,0)
(106,34,0)
(98,210,0)
(171,69,0)
(37,1,0)
(211,195,0)
(120,85,0)
(0,135,0)
(204,36,0)
(177,211,0)
(3,7,0)
(24,114,0)
(60,207,0)
(125,100,0)
(187,69,0)
(132,203,0)
(114,70,0)
(61,125,0)
(142,69,0)
(172,83,0)
(8,49,0)
(31,133,0)
(144,69,0)
(76,81,0)
(100,138,0)
(4,151,0)
(198,69,0)
(189,129,0)
(109,155,0)
(157,125,0)
(211,102,0)
(207,108,0)
(190,173,0)
(32,176,0)
(35,83,1)
(194,122,1)
(1,48,1)
(173,52,1)
(182,176,1)
(129,140,1)
(39,50,1)
(67,208,1)
(210,98,1)
(49,184,1)
(37,178,1)
(107,145,1)
(208,62,1)
(29,45,1)
(186,31,1)
(88,197,1)
(148,203,1)
(142,89,1)
(166,71,1)
(168,123,1)
(150,32,1)
(76,190,1)
(22,77,1)
(65,93,1)
(206,117,1)
(33,39,1)
(178,202,1)
(6,42,1)
(14,125,1)
(132,128,1)
(157,140,1)
(122,1,1)
(176,125,1)
(81,190,1)
(65,203,1)
(100,70,1)
(106,153,1)
(190,173,1)
(100,138,1)
(132,203,1)
(149,143,1)
(187,27,1)
(51,84,1)
(179,160,1)
(204,183,1)
(139,184,1)
(120,96,1)
(44,130,1)
(31,116,1)
(6,66,1)
(131,2,1)
(184,132,1)
(159,15,1)
(16,47,1)
(2,125,1)
(110,126,1)
(147,10,1)
(107,182,1)
(176,150,1)
(75,114,1)
(21,3,1)
(23,207,1)
(132,125,1)
(42,61,1)
(143,184,1)
(35,17,1)
(55,162,1)
(85,120,1)
(160,59,1)
(26,159,1)
(43,111,1)
(92,180,1)
(151,4,1)
(157,207,1)
(40,118,1)
(138,151,1)
(2,200,1)
(117,90,1)
(133,186,1)
(71,205,1)
(60,167,1)
(88,127,1)
(203,67,1)
(85,184,1)
(154,170,1)
(126,124,1)
(131,18,1)
(20,203,1)
(114,19,1)
(10,92,1)
(136,147,1)
(68,70,1)
(127,140,1)
(129,189,1)
(105,12,1)
(80,35,1)
(89,187,1)
(132,211,1)
(207,54,1)
(9,212,1)
(4,129,1)
(3,63,1)
(84,88,1)
(1,70,1)
(146,44,1)
(88,201,1)
(153,64,1)
(86,211,1)
(79,195,1)
(164,68,1)
(123,107,1)
(206,90,1)
(202,28,1)
(125,100,1)
(54,60,1)
(200,166,1)
(190,195,1)
(41,152,1)
(49,8,1)
(124,121,1)
(170,20,1)
(19,24,1)
(132,122,1)
(11,14,1)
(102,196,1)
(27,179,1)
(209,49,1)
(47,5,1)
(7,21,1)
(61,137,1)
(188,55,1)
(87,74,1)
(189,41,1)
(23,88,1)
(109,174,1)
(81,76,1)
(64,6,1)
(134,72,1)
(81,203,1)
(180,115,1)
(45,140,1)
(162,51,1)
(90,125,1)
(83,181,1)
(38,105,1)
(197,127,1)
(48,37,1)
(65,161,1)
(8,43,1)
(57,103,1)
(137,80,1)
(211,177,1)
(12,209,1)
(83,125,1)
(181,172,1)
(177,102,1)
(119,192,1)
(128,86,1)
(7,70,1)
(85,125,1)
(30,9,1)
(65,74,1)
(211,102,1)
(68,94,1)
(118,133,1)
(25,82,1)
(36,204,1)
(133,125,1)
(173,125,1)
(5,168,1)
(34,125,1)
(67,161,1)
(23,143,1)
(121,198,1)
(61,125,1)
(118,13,1)
(140,65,1)
(155,109,1)
(99,36,1)
(20,118,1)
(68,184,1)
(96,49,1)
(63,156,1)
(143,38,1)
(52,97,1)
(152,188,1)
(17,83,1)
(78,34,1)
(130,113,1)
(20,161,1)
(191,110,1)
(205,191,1)
(135,0,1)
(97,154,1)
(93,87,1)
(138,135,1)
(58,40,1)
(185,141,1)
(34,106,1)
(23,14,1)
(160,125,1)
(103,119,1)
(195,146,1)
(72,47,1)
(32,206,1)
(144,134,1)
(192,23,1)
(165,151,1)
(15,34,1)
(115,210,1)
(15,78,1)
(196,194,1)
(118,195,1)
(174,149,1)
(59,79,1)
(179,56,1)
(18,2,1)
(104,185,1)
(209,85,1)
(157,57,1)
(211,195,1)
(50,26,1)
(146,163,1)
(198,11,1)
(190,175,1)
(56,160,1)
(28,25,1)
(114,70,1)
(13,133,1)
(24,155,1)
(30,157,1)
(111,139,1)
(47,125,1)
(0,165,1)
(102,125,1)
(74,7,1)
(20,58,1)
(127,29,1)
(135,203,1)
(167,164,1)
(77,136,1)
(157,125,1)
(72,16,1)
(158,144,1)
(82,81,1)
(193,104,1)
(113,169,1)
(62,22,1)
(172,142,1)
(130,125,1)
(175,173,1)
(169,131,1)
(141,75,1)
(46,33,1)
(94,193,1)
(156,148,1)
(98,99,1)
(116,158,1)
(90,46,1)
(138,151,2)
(117,14,2)
(179,14,2)
(24,143,2)
(64,6,2)
(41,88,2)
(211,195,2)
(126,14,2)
(65,203,2)
(129,88,2)
(195,14,2)
(129,140,2)
(90,125,2)
(104,143,2)
(32,14,2)
(17,14,2)
(138,135,2)
(85,49,2)
(15,34,2)
(80,14,2)
(130,14,2)
(100,138,2)
(118,14,2)
(146,163,2)
(59,14,2)
(194,14,2)
(75,143,2)
(20,203,2)
(81,203,2)
(186,14,2)
(182,176,2)
(206,90,2)
(181,14,2)
(35,14,2)
(167,143,2)
(4,129,2)
(131,14,2)
(179,160,2)
(130,125,2)
(122,14,2)
(11,14,2)
(114,70,2)
(113,14,2)
(157,125,2)
(67,161,2)
(68,184,2)
(1,70,2)
(71,14,2)
(49,14,2)
(131,2,2)
(172,14,2)
(132,125,2)
(44,130,2)
(169,14,2)
(196,14,2)
(37,14,2)
(58,14,2)
(176,14,2)
(106,14,2)
(206,14,2)
(176,125,2)
(124,14,2)
(12,14,2)
(142,14,2)
(13,14,2)
(1,14,2)
(160,14,2)
(133,125,2)
(46,14,2)
(188,88,2)
(175,14,2)
(153,14,2)
(28,14,2)
(50,14,2)
(34,125,2)
(65,161,2)
(197,127,2)
(34,14,2)
(6,14,2)
(151,88,2)
(94,143,2)
(207,143,2)
(125,88,2)
(82,14,2)
(178,14,2)
(195,146,2)
(152,88,2)
(111,14,2)
(15,14,2)
(86,14,2)
(141,143,2)
(78,14,2)
(88,201,2)
(0,88,2)
(139,14,2)
(205,14,2)
(123,14,2)
(90,14,2)
(52,14,2)
(26,14,2)
(6,42,2)
(105,14,2)
(27,14,2)
(133,14,2)
(146,14,2)
(190,14,2)
(48,14,2)
(177,14,2)
(97,14,2)
(170,14,2)
(209,49,2)
(155,143,2)
(51,88,2)
(134,14,2)
(85,184,2)
(132,122,2)
(203,67,2)
(173,14,2)
(14,88,2)
(38,14,2)
(68,143,2)
(211,102,2)
(166,14,2)
(31,14,2)
(144,14,2)
(120,49,2)
(138,88,2)
(33,14,2)
(122,1,2)
(132,203,2)
(85,125,2)
(81,14,2)
(68,70,2)
(118,195,2)
(135,203,2)
(107,182,2)
(89,14,2)
(96,49,2)
(187,14,2)
(64,14,2)
(140,65,2)
(102,125,2)
(72,47,2)
(47,125,2)
(116,14,2)
(54,143,2)
(184,14,2)
(42,14,2)
(44,14,2)
(168,14,2)
(159,14,2)
(19,143,2)
(137,14,2)
(74,7,2)
(42,61,2)
(193,143,2)
(8,14,2)
(83,14,2)
(35,83,2)
(123,107,2)
(109,143,2)
(65,74,2)
(209,85,2)
(81,190,2)
(190,195,2)
(160,125,2)
(60,143,2)
(132,14,2)
(150,14,2)
(20,161,2)
(61,14,2)
(121,14,2)
(5,14,2)
(173,125,2)
(55,88,2)
(146,44,2)
(191,14,2)
(107,14,2)
(2,14,2)
(118,133,2)
(100,70,2)
(190,173,2)
(114,143,2)
(174,143,2)
(185,143,2)
(25,14,2)
(151,4,2)
(18,14,2)
(76,14,2)
(39,14,2)
(20,14,2)
(43,14,2)
(162,88,2)
(132,211,2)
(56,14,2)
(127,140,2)
(40,14,2)
(72,14,2)
(149,143,2)
(198,14,2)
(184,132,2)
(49,184,2)
(84,88,2)
(100,88,2)
(209,14,2)
(135,88,2)
(4,88,2)
(107,145,2)
(61,125,2)
(128,14,2)
(6,66,2)
(7,70,2)
(157,207,2)
(12,209,2)
(182,14,2)
(79,14,2)
(125,100,2)
(88,127,2)
(16,14,2)
(83,125,2)
(143,14,2)
(211,14,2)
(189,88,2)
(164,143,2)
(20,118,2)
(165,88,2)
(158,14,2)
(2,125,2)
(47,14,2)
(30,157,2)
(102,14,2)
(154,14,2)
(202,14,2)
(110,14,2)
(143,184,2)
(200,14,2)
(157,140,2)
-----------------------------------
(0,1)
(1,db->aCollSeq)
(2,pColl[0])
(3,db)
(4,sizeof(*pColl)
(5,2)
(6,(char*)
(7,db->aCollSeq)
(8,0)
(9,printf("------function end!------\\n")
(10,printf("static CollSeq *findCollSeqEntry(   sqlite3 *db,          /* Database connection */   const char *zName,    /* Name of the collating sequence */   int create            /* Create a new entry if true */ )
(11,"if(pColl)
(12,assert( pDel==0 || pDel==pColl )
(13,zName)
(14,pColl)
(15,pColl[1].enc)
(16,enc)
(17,zName)
(18,zName)
(19,mallocFailed)
(20,memcpy(pColl[0].zName, zName, nName)
(21,aCollSeq)
(22,printf("int nName = sqlite3Strlen30(zName)
(23,"return pColl;\\n")
(24,db)
(25,pColl[0].zName[nName] = 0)
(26,pColl[1].enc = SQLITE_UTF16LE)
(27,SQLITE_UTF8)
(28,"pDel = sqlite3HashInsert(&db->aCollSeq, pColl[0].zName, nName, pColl)
(29,pColl)
(30,RET)
(31,pColl)
(32,pColl)
(33,pColl)
(34,pColl[1])
(35,pColl[1].zName)
(36,printf("\\nfile_name:%s\\n",__FILE__)
(37,db)
(38,0)
(39,printf("pColl[2].zName = (char*)
(40,zName)
(41,3)
(42,&pColl[3])
(43,pDel)
(44,&pColl[3])
(45,0)
(46,2)
(47,pColl[2])
(48,aCollSeq)
(49,pDel==0)
(50,"pColl[2].zName = (char*)
(51,printf("if(0==pColl && create)
(52,0)
(53,if( pDel!=0 )
(54,0)
(55,printf("pColl = sqlite3DbMallocZero(db, 3*sizeof(*pColl)
(56,enc)
(57,pColl)
(58,nName)
(59,0)
(60,pColl)
(61,pColl[3])
(62,nName)
(63,pColl)
(64,pColl[1].zName = (char*)
(65,sqlite3HashFind(&db->aCollSeq, zName, nName)
(66,char*)
(67,sqlite3Strlen30(zName)
(68,sqlite3DbFree(db, pDel)
(69,)
(70,sqlite3 *db)
(71,printf("pColl[0].zName = (char*)
(72,pColl[2].enc)
(73,)
(74,&db->aCollSeq)
(75,1)
(76,nName)
(77,"int nName = sqlite3Strlen30(zName)
(78,enc)
(79,pColl)
(80,pColl)
(81,pColl[0].zName[nName])
(82,0)
(83,pColl[1])
(84,"if(0==pColl && create)
(85,pDel==pColl)
(86,nName)
(87,zName)
(88,0==pColl && create)
(89,"pColl[1].zName = (char*)
(90,pColl[2])
(91,nName)
(92,"static CollSeq *findCollSeqEntry(   sqlite3 *db,          /* Database connection */   const char *zName,    /* Name of the collating sequence */   int create            /* Create a new entry if true */ )
(93,nName)
(94,pDel)
(95,pColl)
(96,pDel)
(97,pColl)
(98,__func__)
(99,"function_name:%s\\n")
(100,sqlite3DbMallocZero(db, 3*sizeof(*pColl)
(101,if( pColl )
(102,pColl[0])
(103,printf("------function end!------\\n")
(104,printf("sqlite3DbFree(db, pDel)
(105,pDel)
(106,1)
(107,(char*)
(108,)
(109,"db->mallocFailed = 1;\\n")
(110,0)
(111,printf("assert( pDel==0 || pDel==pColl )
(112,if( 0==pColl && create )
(113,3)
(114,db->mallocFailed)
(115,"------function start!------\\n")
(116,printf("memcpy(pColl[0].zName, zName, nName)
(117,zName)
(118,pColl[0].zName)
(119,"------function end!------\\n")
(120,pColl)
(121,"CollSeq *pDel = 0;\\n")
(122,&db->aCollSeq)
(123,pColl[2].zName = (char*)
(124,printf("CollSeq *pDel = 0;\\n")
(125,pColl = sqlite3DbMallocZero(db, 3*sizeof(*pColl)
(126,pDel)
(127,0==pColl)
(128,pColl)
(129,*pColl)
(130,pColl[3])
(131,pColl[0].zName)
(132,sqlite3HashInsert(&db->aCollSeq, pColl[0].zName, nName, pColl)
(133,pColl[0])
(134,SQLITE_UTF16BE)
(135,nName + 1)
(136,printf("CollSeq *pColl;\\n")
(137,3)
(138,3*sizeof(*pColl)
(139,"assert( pDel==0 || pDel==pColl )
(140,pColl = sqlite3HashFind(&db->aCollSeq, zName, nName)
(141,db->mallocFailed = 1)
(142,printf("pColl[1].zName = (char*)
(143,pDel!=0)
(144,pColl[2].enc = SQLITE_UTF16BE)
(145,char*)
(146,(char*)
(147,"CollSeq *pColl;\\n")
(148,"pColl = sqlite3HashFind(&db->aCollSeq, zName, nName)
(149,"if(pDel!=0)
(150,3)
(151,3*sizeof(*pColl)
(152,db)
(153,pColl)
(154,printf("pColl[0].zName[nName] = 0;\\n")
(155,printf("db->mallocFailed = 1;\\n")
(156,printf("pColl = sqlite3HashFind(&db->aCollSeq, zName, nName)
(157,return pColl;)
(158,"memcpy(pColl[0].zName, zName, nName)
(159,SQLITE_UTF16LE)
(160,pColl[0])
(161,const char *zName)
(162,"pColl = sqlite3DbMallocZero(db, 3*sizeof(*pColl)
(163,char*)
(164,"pColl = 0;\\n")
(165,nName)
(166,pColl)
(167,printf("pColl = 0;\\n")
(168,pColl)
(169,pColl)
(170,"pColl[0].zName[nName] = 0;\\n")
(171,pDel)
(172,pColl)
(173,pColl[0])
(174,printf("if(pDel!=0)
(175,zName)
(176,pColl[3])
(177,zName)
(178,pDel)
(179,pColl[0].enc)
(180,printf("------function start!------\\n")
(181,1)
(182,&pColl[3])
(183,"\\nfile_name:%s\\n")
(184,pDel = sqlite3HashInsert(&db->aCollSeq, pColl[0].zName, nName, pColl)
(185,"sqlite3DbFree(db, pDel)
(186,0)
(187,pColl[0].enc = SQLITE_UTF8)
(188,pColl)
(189,pColl)
(190,pColl[0].zName)
(191,*pDel = 0)
(192,printf("return pColl;\\n")
(193,db)
(194,pColl)
(195,pColl[0].zName = (char*)
(196,0)
(197,create)
(198,printf("if(pColl)
(199,)
(200,0)
(201,int create)
(202,printf("pDel = sqlite3HashInsert(&db->aCollSeq, pColl[0].zName, nName, pColl)
(203,nName = sqlite3Strlen30(zName)
(204,__FILE__)
(205,"pColl[0].zName = (char*)
(206,pColl[2].zName)
(207,pColl = 0)
(208,zName)
(209,pDel==0 || pDel==pColl)
(210,printf("function_name:%s\\n",__func__)
(211,pColl[0].zName)
(212,"------function end!------\\n")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
----------------dynamic----------------
=======testcase========
model_version:0x01000000
stdin-stat:0x000800000000000001000000ffffffff0100000000000000a4810000e8030000e8030000ffffffff0000000000000000ffffffffffffffff0010000000000000ffffffffffffffff2ff9366400000000ffffffffffffffff9ff8366400000000ffffffffffffffff9ff8366400000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
stdin:0x2e5c000b00000000000000000000000000000000
=========trace=========
int sqlite3MallocInit(void){
if()
sqlite3MemSetDefault();
if(sqlite3GlobalConfig.pPage==0 || sqlite3GlobalConfig.szPage<512       || sqlite3GlobalConfig.nPage<1)
=======================
