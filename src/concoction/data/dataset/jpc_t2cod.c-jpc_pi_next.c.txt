-----label-----
0
-----code-----
int jpc_pi_next(jpc_pi_t *pi)
{
	jpc_pchg_t *pchg;
	int ret;


	for (;;) {

		pi->valid = false;

		if (!pi->pchg) {
			++pi->pchgno;
			pi->compno = 0;
			pi->rlvlno = 0;
			pi->prcno = 0;
			pi->lyrno = 0;
			pi->prgvolfirst = true;
			if (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)) {
				pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);
			} else if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)) {
				pi->pchg = &pi->defaultpchg;
			} else {
				return 1;
			}
		}

		pchg = pi->pchg;
		switch (pchg->prgord) {
		case JPC_COD_LRCPPRG:
			ret = jpc_pi_nextlrcp(pi);
			break;
		case JPC_COD_RLCPPRG:
			ret = jpc_pi_nextrlcp(pi);
			break;
		case JPC_COD_RPCLPRG:
			ret = jpc_pi_nextrpcl(pi);
			break;
		case JPC_COD_PCRLPRG:
			ret = jpc_pi_nextpcrl(pi);
			break;
		case JPC_COD_CPRLPRG:
			ret = jpc_pi_nextcprl(pi);
			break;
		default:
			ret = -1;
			break;
		}
		if (!ret) {
			pi->valid = true;
			++pi->pktno;
			return 0;
		}
		pi->pchg = 0;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
22,23
24,25
24,26
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
29,30
29,31
30,31
34,35
34,36
35,36
36,37
36,38
37,38
40,41
40,42
40,43
40,44
40,45
40,46
40,47
41,42
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
63,65
64,65
68,69
69,70
69,71
70,71
70,72
71,72
75,76
76,77
76,78
77,78
77,79
78,79
82,83
82,84
82,85
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
91,92
91,93
92,93
95,96
96,97
97,98
97,99
98,99
98,100
99,100
102,103
102,104
102,105
103,104
105,106
105,107
106,107
109,110
109,111
110,111
113,114
113,115
113,116
114,115
114,116
115,116
115,117
116,117
119,120
119,121
120,121
122,123
122,124
123,124
126,127
127,128
128,129
128,130
129,130
129,131
130,131
133,134
134,135
134,136
135,136
138,139
139,140
141,142
142,143
142,144
143,144
145,146
145,147
146,147
149,150
149,151
150,151
150,152
151,152
154,155
154,156
154,157
154,158
154,159
154,160
154,161
154,162
154,163
154,164
154,165
154,166
154,167
154,168
154,169
154,170
154,171
154,172
155,156
156,157
158,159
159,160
159,161
160,161
162,163
162,164
163,164
165,166
168,169
169,170
171,172
172,173
172,174
173,174
175,176
175,177
176,177
178,179
181,182
182,183
184,185
185,186
185,187
186,187
188,189
188,190
189,190
191,192
194,195
195,196
197,198
198,199
198,200
199,200
201,202
201,203
202,203
204,205
207,208
208,209
210,211
211,212
211,213
212,213
214,215
214,216
215,216
217,218
221,222
222,223
222,224
223,224
225,226
228,229
228,230
229,230
230,231
232,233
232,234
232,235
233,234
234,235
234,236
235,236
235,237
236,237
240,241
241,242
242,243
242,244
243,244
246,247
248,249
249,250
249,251
250,251
250,252
251,252
-----nextToken-----
2,4,7,9,10,15,17,18,21,23,25,31,32,33,38,39,45,46,51,52,53,58,59,60,65,66,67,72,73,74,79,80,81,86,87,90,93,94,100,101,104,107,108,111,112,117,118,121,124,125,131,132,136,137,140,144,147,148,152,153,157,161,164,166,167,170,174,177,179,180,183,187,190,192,193,196,200,203,205,206,209,213,216,218,219,220,224,226,227,231,237,238,239,244,245,247,252,253,254
-----computeFrom-----
28,29
28,30
48,49
48,50
55,56
55,57
62,63
62,64
69,70
69,71
76,77
76,78
83,84
83,85
97,98
97,99
114,115
114,116
128,129
128,130
142,143
142,144
159,160
159,161
172,173
172,174
185,186
185,187
198,199
198,200
211,212
211,213
222,223
222,224
234,235
234,236
249,250
249,251
-----guardedBy-----
87,112
94,108
93,111
124,136
-----guardedByNegation-----
87,118
94,125
93,136
90,121
-----lastLexicalUse-----
87,118
94,125
93,136
-----jump-----
87,118
94,125
93,136
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;NullStatement;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;
-----ast_node-----
int jpc_pi_next(jpc_pi_t *pi){	jpc_pchg_t *pchg;	int ret;	for (;;) {		pi->valid = false;		if (!pi->pchg) {			++pi->pchgno;			pi->compno = 0;			pi->rlvlno = 0;			pi->prcno = 0;			pi->lyrno = 0;			pi->prgvolfirst = true;			if (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);			} else if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = &pi->defaultpchg;			} else {				return 1;			}		}		pchg = pi->pchg;		switch (pchg->prgord) {		case JPC_COD_LRCPPRG:			ret = jpc_pi_nextlrcp(pi);			break;		case JPC_COD_RLCPPRG:			ret = jpc_pi_nextrlcp(pi);			break;		case JPC_COD_RPCLPRG:			ret = jpc_pi_nextrpcl(pi);			break;		case JPC_COD_PCRLPRG:			ret = jpc_pi_nextpcrl(pi);			break;		case JPC_COD_CPRLPRG:			ret = jpc_pi_nextcprl(pi);			break;		default:			ret = -1;			break;		}		if (!ret) {			pi->valid = true;			++pi->pktno;			return 0;		}		pi->pchg = 0;	}}
int
jpc_pi_next(jpc_pi_t *pi)
jpc_pi_next
jpc_pi_t *pi
jpc_pi_t
jpc_pi_t
*pi
*
pi
{	jpc_pchg_t *pchg;	int ret;	for (;;) {		pi->valid = false;		if (!pi->pchg) {			++pi->pchgno;			pi->compno = 0;			pi->rlvlno = 0;			pi->prcno = 0;			pi->lyrno = 0;			pi->prgvolfirst = true;			if (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);			} else if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = &pi->defaultpchg;			} else {				return 1;			}		}		pchg = pi->pchg;		switch (pchg->prgord) {		case JPC_COD_LRCPPRG:			ret = jpc_pi_nextlrcp(pi);			break;		case JPC_COD_RLCPPRG:			ret = jpc_pi_nextrlcp(pi);			break;		case JPC_COD_RPCLPRG:			ret = jpc_pi_nextrpcl(pi);			break;		case JPC_COD_PCRLPRG:			ret = jpc_pi_nextpcrl(pi);			break;		case JPC_COD_CPRLPRG:			ret = jpc_pi_nextcprl(pi);			break;		default:			ret = -1;			break;		}		if (!ret) {			pi->valid = true;			++pi->pktno;			return 0;		}		pi->pchg = 0;	}}
jpc_pchg_t *pchg;
jpc_pchg_t *pchg;
jpc_pchg_t
jpc_pchg_t
*pchg
*
pchg
int ret;
int ret;
int
ret
ret
for (;;) {		pi->valid = false;		if (!pi->pchg) {			++pi->pchgno;			pi->compno = 0;			pi->rlvlno = 0;			pi->prcno = 0;			pi->lyrno = 0;			pi->prgvolfirst = true;			if (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);			} else if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = &pi->defaultpchg;			} else {				return 1;			}		}		pchg = pi->pchg;		switch (pchg->prgord) {		case JPC_COD_LRCPPRG:			ret = jpc_pi_nextlrcp(pi);			break;		case JPC_COD_RLCPPRG:			ret = jpc_pi_nextrlcp(pi);			break;		case JPC_COD_RPCLPRG:			ret = jpc_pi_nextrpcl(pi);			break;		case JPC_COD_PCRLPRG:			ret = jpc_pi_nextpcrl(pi);			break;		case JPC_COD_CPRLPRG:			ret = jpc_pi_nextcprl(pi);			break;		default:			ret = -1;			break;		}		if (!ret) {			pi->valid = true;			++pi->pktno;			return 0;		}		pi->pchg = 0;	}
;
{		pi->valid = false;		if (!pi->pchg) {			++pi->pchgno;			pi->compno = 0;			pi->rlvlno = 0;			pi->prcno = 0;			pi->lyrno = 0;			pi->prgvolfirst = true;			if (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);			} else if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = &pi->defaultpchg;			} else {				return 1;			}		}		pchg = pi->pchg;		switch (pchg->prgord) {		case JPC_COD_LRCPPRG:			ret = jpc_pi_nextlrcp(pi);			break;		case JPC_COD_RLCPPRG:			ret = jpc_pi_nextrlcp(pi);			break;		case JPC_COD_RPCLPRG:			ret = jpc_pi_nextrpcl(pi);			break;		case JPC_COD_PCRLPRG:			ret = jpc_pi_nextpcrl(pi);			break;		case JPC_COD_CPRLPRG:			ret = jpc_pi_nextcprl(pi);			break;		default:			ret = -1;			break;		}		if (!ret) {			pi->valid = true;			++pi->pktno;			return 0;		}		pi->pchg = 0;	}
pi->valid = false;
pi->valid = false
pi->valid
pi
pi
valid
false
if (!pi->pchg) {			++pi->pchgno;			pi->compno = 0;			pi->rlvlno = 0;			pi->prcno = 0;			pi->lyrno = 0;			pi->prgvolfirst = true;			if (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);			} else if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = &pi->defaultpchg;			} else {				return 1;			}		}
!pi->pchg
pi->pchg
pi
pi
pchg
{			++pi->pchgno;			pi->compno = 0;			pi->rlvlno = 0;			pi->prcno = 0;			pi->lyrno = 0;			pi->prgvolfirst = true;			if (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);			} else if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = &pi->defaultpchg;			} else {				return 1;			}		}
++pi->pchgno;
++pi->pchgno
pi->pchgno
pi
pi
pchgno
pi->compno = 0;
pi->compno = 0
pi->compno
pi
pi
compno
0
pi->rlvlno = 0;
pi->rlvlno = 0
pi->rlvlno
pi
pi
rlvlno
0
pi->prcno = 0;
pi->prcno = 0
pi->prcno
pi
pi
prcno
0
pi->lyrno = 0;
pi->lyrno = 0
pi->lyrno
pi
pi
lyrno
0
pi->prgvolfirst = true;
pi->prgvolfirst = true
pi->prgvolfirst
pi
pi
prgvolfirst
true
if (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);			} else if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = &pi->defaultpchg;			} else {				return 1;			}
pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)
pi->pchgno
pi
pi
pchgno
jpc_pchglist_numpchgs(pi->pchglist)
jpc_pchglist_numpchgs
jpc_pchglist_numpchgs
pi->pchglist
pi
pi
pchglist
{				pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);			}
pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno);
pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno)
pi->pchg
pi
pi
pchg
jpc_pchglist_get(pi->pchglist, pi->pchgno)
jpc_pchglist_get
jpc_pchglist_get
pi->pchglist
pi
pi
pchglist
pi->pchgno
pi
pi
pchgno
if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)) {				pi->pchg = &pi->defaultpchg;			} else {				return 1;			}
pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)
pi->pchgno
pi
pi
pchgno
jpc_pchglist_numpchgs(pi->pchglist)
jpc_pchglist_numpchgs
jpc_pchglist_numpchgs
pi->pchglist
pi
pi
pchglist
{				pi->pchg = &pi->defaultpchg;			}
pi->pchg = &pi->defaultpchg;
pi->pchg = &pi->defaultpchg
pi->pchg
pi
pi
pchg
&pi->defaultpchg
pi->defaultpchg
pi
pi
defaultpchg
{				return 1;			}
return 1;
1
pchg = pi->pchg;
pchg = pi->pchg
pchg
pchg
pi->pchg
pi
pi
pchg
switch (pchg->prgord) {		case JPC_COD_LRCPPRG:			ret = jpc_pi_nextlrcp(pi);			break;		case JPC_COD_RLCPPRG:			ret = jpc_pi_nextrlcp(pi);			break;		case JPC_COD_RPCLPRG:			ret = jpc_pi_nextrpcl(pi);			break;		case JPC_COD_PCRLPRG:			ret = jpc_pi_nextpcrl(pi);			break;		case JPC_COD_CPRLPRG:			ret = jpc_pi_nextcprl(pi);			break;		default:			ret = -1;			break;		}
pchg->prgord
pchg
pchg
prgord
{		case JPC_COD_LRCPPRG:			ret = jpc_pi_nextlrcp(pi);			break;		case JPC_COD_RLCPPRG:			ret = jpc_pi_nextrlcp(pi);			break;		case JPC_COD_RPCLPRG:			ret = jpc_pi_nextrpcl(pi);			break;		case JPC_COD_PCRLPRG:			ret = jpc_pi_nextpcrl(pi);			break;		case JPC_COD_CPRLPRG:			ret = jpc_pi_nextcprl(pi);			break;		default:			ret = -1;			break;		}
case JPC_COD_LRCPPRG:
JPC_COD_LRCPPRG
JPC_COD_LRCPPRG
ret = jpc_pi_nextlrcp(pi);
ret = jpc_pi_nextlrcp(pi)
ret
ret
jpc_pi_nextlrcp(pi)
jpc_pi_nextlrcp
jpc_pi_nextlrcp
pi
pi
break;
case JPC_COD_RLCPPRG:
JPC_COD_RLCPPRG
JPC_COD_RLCPPRG
ret = jpc_pi_nextrlcp(pi);
ret = jpc_pi_nextrlcp(pi)
ret
ret
jpc_pi_nextrlcp(pi)
jpc_pi_nextrlcp
jpc_pi_nextrlcp
pi
pi
break;
case JPC_COD_RPCLPRG:
JPC_COD_RPCLPRG
JPC_COD_RPCLPRG
ret = jpc_pi_nextrpcl(pi);
ret = jpc_pi_nextrpcl(pi)
ret
ret
jpc_pi_nextrpcl(pi)
jpc_pi_nextrpcl
jpc_pi_nextrpcl
pi
pi
break;
case JPC_COD_PCRLPRG:
JPC_COD_PCRLPRG
JPC_COD_PCRLPRG
ret = jpc_pi_nextpcrl(pi);
ret = jpc_pi_nextpcrl(pi)
ret
ret
jpc_pi_nextpcrl(pi)
jpc_pi_nextpcrl
jpc_pi_nextpcrl
pi
pi
break;
case JPC_COD_CPRLPRG:
JPC_COD_CPRLPRG
JPC_COD_CPRLPRG
ret = jpc_pi_nextcprl(pi);
ret = jpc_pi_nextcprl(pi)
ret
ret
jpc_pi_nextcprl(pi)
jpc_pi_nextcprl
jpc_pi_nextcprl
pi
pi
break;
default:
ret = -1;
ret = -1
ret
ret
-1
1
break;
if (!ret) {			pi->valid = true;			++pi->pktno;			return 0;		}
!ret
ret
ret
{			pi->valid = true;			++pi->pktno;			return 0;		}
pi->valid = true;
pi->valid = true
pi->valid
pi
pi
valid
true
++pi->pktno;
++pi->pktno
pi->pktno
pi
pi
pktno
return 0;
0
pi->pchg = 0;
pi->pchg = 0
pi->pchg
pi
pi
pchg
0
-----joern-----
(132,497,0)
(91,416,0)
(351,173,0)
(565,435,0)
(13,107,0)
(325,391,0)
(103,173,0)
(137,7,0)
(324,188,0)
(357,471,0)
(272,161,0)
(370,173,0)
(337,173,0)
(211,59,0)
(286,553,0)
(85,524,0)
(308,147,0)
(113,214,0)
(252,407,0)
(111,47,0)
(345,173,0)
(147,173,0)
(185,240,0)
(532,221,0)
(156,71,0)
(78,380,0)
(136,111,0)
(400,173,0)
(346,353,0)
(452,63,0)
(242,269,0)
(187,439,0)
(281,221,0)
(279,299,0)
(24,51,0)
(374,19,0)
(118,289,0)
(157,107,0)
(86,454,0)
(465,173,0)
(541,325,0)
(208,19,0)
(230,7,0)
(21,161,0)
(25,40,0)
(30,272,0)
(1,494,0)
(146,19,0)
(300,166,0)
(334,33,0)
(326,566,0)
(241,161,0)
(171,516,0)
(123,527,0)
(209,414,0)
(360,436,0)
(525,190,0)
(542,400,0)
(429,147,0)
(137,351,0)
(528,389,0)
(66,384,0)
(145,193,0)
(320,490,0)
(137,237,0)
(184,405,0)
(167,234,0)
(77,300,0)
(349,343,0)
(454,375,0)
(557,374,0)
(303,380,0)
(421,541,0)
(362,319,0)
(277,406,0)
(362,217,0)
(503,413,0)
(0,516,0)
(250,269,0)
(410,376,0)
(478,319,0)
(336,565,0)
(85,34,0)
(443,159,0)
(14,221,0)
(444,531,0)
(273,377,0)
(338,212,0)
(218,306,0)
(468,275,0)
(490,36,0)
(119,386,0)
(137,345,0)
(364,247,0)
(138,54,0)
(445,99,0)
(144,149,0)
(125,103,0)
(344,71,0)
(261,564,0)
(288,407,0)
(169,506,0)
(322,375,0)
(462,81,0)
(428,309,0)
(412,6,0)
(304,128,0)
(161,221,0)
(322,197,0)
(548,162,0)
(253,349,0)
(39,527,0)
(369,37,0)
(270,250,0)
(551,237,0)
(98,221,0)
(75,298,0)
(549,119,0)
(418,366,0)
(147,298,0)
(188,398,0)
(420,351,0)
(504,453,0)
(314,173,0)
(524,85,0)
(31,563,0)
(419,221,0)
(240,73,0)
(488,480,0)
(319,325,0)
(562,453,0)
(386,323,0)
(143,445,0)
(307,173,0)
(545,483,0)
(254,22,0)
(379,2,0)
(510,375,0)
(529,361,0)
(465,162,0)
(166,64,0)
(150,505,0)
(444,438,0)
(11,159,0)
(106,337,0)
(37,10,0)
(116,562,0)
(300,377,0)
(497,154,0)
(330,298,0)
(402,130,0)
(217,362,0)
(349,253,0)
(72,234,0)
(27,432,0)
(489,496,0)
(538,143,0)
(366,173,0)
(339,314,0)
(95,154,0)
(384,471,0)
(2,547,0)
(139,286,0)
(393,26,0)
(397,344,0)
(127,149,0)
(237,173,0)
(304,569,0)
(119,1,0)
(411,7,0)
(180,194,0)
(385,475,0)
(490,366,0)
(558,37,0)
(370,547,0)
(186,405,0)
(414,275,0)
(147,270,0)
(289,484,0)
(45,337,0)
(357,109,0)
(449,531,0)
(533,406,0)
(22,476,0)
(245,561,0)
(288,297,0)
(407,288,0)
(166,400,0)
(564,255,0)
(395,144,0)
(365,142,0)
(523,247,0)
(117,173,0)
(347,107,0)
(176,553,0)
(295,97,0)
(1,119,0)
(468,500,0)
(553,176,0)
(296,540,0)
(211,344,0)
(40,173,0)
(1,526,0)
(32,129,0)
(307,6,0)
(490,563,0)
(372,180,0)
(380,173,0)
(377,409,0)
(439,476,0)
(137,370,0)
(403,87,0)
(496,166,0)
(38,191,0)
(6,412,0)
(176,307,0)
(193,236,0)
(439,187,0)
(469,225,0)
(124,385,0)
(459,505,0)
(111,173,0)
(553,286,0)
(62,552,0)
(483,556,0)
(140,375,0)
(70,227,0)
(466,409,0)
(201,366,0)
(399,122,0)
(117,54,0)
(212,456,0)
(215,394,0)
(191,341,0)
(60,197,0)
(519,221,0)
(516,173,0)
(2,379,0)
(464,399,0)
(197,323,0)
(42,328,0)
(250,270,0)
(112,227,0)
(537,277,0)
(481,40,0)
(277,7,0)
(401,524,0)
(266,138,0)
(380,166,0)
(197,322,0)
(137,563,0)
(490,509,0)
(377,273,0)
(506,173,0)
(223,449,0)
(64,173,0)
(296,323,0)
(15,384,0)
(508,290,0)
(20,446,0)
(277,370,0)
(176,43,0)
(378,80,0)
(33,173,0)
(500,468,0)
(557,128,0)
(358,54,0)
(359,72,0)
(85,67,0)
(166,237,0)
(407,161,0)
(166,563,0)
(518,330,0)
(107,347,0)
(83,298,0)
(96,446,0)
(153,166,0)
(200,306,0)
(51,109,0)
(566,476,0)
(249,67,0)
(490,7,0)
(47,111,0)
(138,173,0)
(166,509,0)
(140,413,0)
(122,140,0)
(74,59,0)
(148,410,0)
(527,173,0)
(7,166,0)
(469,412,0)
(565,547,0)
(318,138,0)
(224,47,0)
(455,408,0)
(153,173,0)
(479,2,0)
(207,212,0)
(347,526,0)
(515,431,0)
(205,221,0)
(19,374,0)
(424,273,0)
(78,214,0)
(243,493,0)
(386,269,0)
(365,173,0)
(264,408,0)
(412,152,0)
(538,476,0)
(181,60,0)
(239,545,0)
(438,444,0)
(509,173,0)
(272,451,0)
(209,525,0)
(525,457,0)
(358,173,0)
(316,214,0)
(67,249,0)
(413,121,0)
(6,130,0)
(321,197,0)
(409,377,0)
(528,236,0)
(8,412,0)
(84,361,0)
(306,173,0)
(240,173,0)
(294,445,0)
(505,173,0)
(382,117,0)
(548,372,0)
(456,105,0)
(237,109,0)
(36,162,0)
(255,564,0)
(166,366,0)
(135,111,0)
(232,242,0)
(414,209,0)
(388,494,0)
(270,147,0)
(158,221,0)
(276,250,0)
(456,212,0)
(29,357,0)
(217,298,0)
(90,224,0)
(277,351,0)
(179,32,0)
(441,330,0)
(354,99,0)
(427,298,0)
(283,103,0)
(362,506,0)
(128,557,0)
(246,376,0)
(233,249,0)
(263,224,0)
(341,191,0)
(97,6,0)
(187,469,0)
(398,393,0)
(142,365,0)
(348,441,0)
(105,51,0)
(121,173,0)
(523,361,0)
(347,516,0)
(103,540,0)
(277,83,0)
(282,40,0)
(473,123,0)
(54,21,0)
(58,153,0)
(28,255,0)
(195,392,0)
(166,456,0)
(121,413,0)
(80,156,0)
(9,313,0)
(166,345,0)
(540,103,0)
(329,548,0)
(494,1,0)
(159,173,0)
(265,364,0)
(541,173,0)
(194,26,0)
(226,541,0)
(279,148,0)
(163,156,0)
(122,399,0)
(271,375,0)
(67,195,0)
(523,87,0)
(371,370,0)
(461,380,0)
(235,330,0)
(59,123,0)
(425,172,0)
(76,173,0)
(497,132,0)
(315,161,0)
(524,123,0)
(442,528,0)
(250,375,0)
(137,509,0)
(309,173,0)
(559,173,0)
(228,538,0)
(172,505,0)
(405,54,0)
(343,173,0)
(33,476,0)
(383,406,0)
(313,191,0)
(377,300,0)
(361,344,0)
(198,221,0)
(269,250,0)
(60,466,0)
(80,155,0)
(33,569,0)
(191,313,0)
(257,408,0)
(559,161,0)
(92,566,0)
(390,299,0)
(134,296,0)
(59,211,0)
(144,173,0)
(490,237,0)
(69,240,0)
(451,272,0)
(5,164,0)
(330,441,0)
(137,436,0)
(446,322,0)
(290,344,0)
(190,137,0)
(301,221,0)
(277,36,0)
(379,474,0)
(343,349,0)
(190,73,0)
(166,406,0)
(475,385,0)
(400,142,0)
(545,325,0)
(466,60,0)
(99,445,0)
(387,545,0)
(137,253,0)
(35,87,0)
(20,476,0)
(163,123,0)
(469,187,0)
(227,173,0)
(431,502,0)
(128,304,0)
(350,132,0)
(189,509,0)
(97,173,0)
(193,97,0)
(447,76,0)
(560,398,0)
(227,162,0)
(166,83,0)
(543,499,0)
(277,366,0)
(405,173,0)
(522,358,0)
(309,142,0)
(194,392,0)
(342,159,0)
(304,386,0)
(492,559,0)
(490,400,0)
(269,386,0)
(327,370,0)
(507,469,0)
(248,272,0)
(3,190,0)
(514,140,0)
(76,54,0)
(490,221,0)
(368,273,0)
(468,409,0)
(191,296,0)
(72,566,0)
(343,73,0)
(180,162,0)
(483,545,0)
(476,438,0)
(560,173,0)
(180,372,0)
(310,439,0)
(363,548,0)
(412,469,0)
(216,221,0)
(137,366,0)
(253,137,0)
(398,560,0)
(19,73,0)
(474,47,0)
(206,517,0)
(446,20,0)
(115,156,0)
(213,547,0)
(4,560,0)
(474,379,0)
(550,51,0)
(556,297,0)
(416,144,0)
(63,75,0)
(413,140,0)
(47,224,0)
(40,547,0)
(166,36,0)
(262,365,0)
(527,123,0)
(535,345,0)
(110,64,0)
(89,496,0)
(364,156,0)
(496,105,0)
(188,393,0)
(18,451,0)
(375,129,0)
(458,569,0)
(517,173,0)
(225,128,0)
(78,500,0)
(133,345,0)
(129,32,0)
(546,563,0)
(231,323,0)
(505,172,0)
(138,410,0)
(278,435,0)
(123,484,0)
(543,306,0)
(457,525,0)
(174,9,0)
(166,351,0)
(51,173,0)
(82,538,0)
(271,63,0)
(195,67,0)
(297,288,0)
(539,561,0)
(512,238,0)
(76,444,0)
(373,528,0)
(540,296,0)
(538,173,0)
(374,557,0)
(75,173,0)
(565,173,0)
(569,33,0)
(190,173,0)
(312,565,0)
(214,78,0)
(406,149,0)
(454,466,0)
(153,122,0)
(100,145,0)
(355,373,0)
(410,148,0)
(159,342,0)
(540,475,0)
(430,163,0)
(227,149,0)
(251,249,0)
(490,83,0)
(482,343,0)
(566,173,0)
(137,64,0)
(297,556,0)
(526,1,0)
(536,400,0)
(513,439,0)
(307,176,0)
(408,173,0)
(437,143,0)
(392,194,0)
(23,531,0)
(380,78,0)
(466,454,0)
(286,173,0)
(426,389,0)
(545,173,0)
(356,307,0)
(51,471,0)
(313,9,0)
(568,358,0)
(219,436,0)
(451,379,0)
(521,475,0)
(258,83,0)
(483,561,0)
(247,132,0)
(496,142,0)
(137,83,0)
(120,471,0)
(224,173,0)
(151,553,0)
(88,2,0)
(144,162,0)
(154,123,0)
(180,416,0)
(300,142,0)
(432,392,0)
(322,446,0)
(325,241,0)
(175,221,0)
(53,464,0)
(351,73,0)
(357,324,0)
(490,64,0)
(183,60,0)
(277,237,0)
(10,37,0)
(177,314,0)
(441,184,0)
(330,173,0)
(477,300,0)
(44,313,0)
(277,400,0)
(366,54,0)
(341,399,0)
(108,180,0)
(225,130,0)
(154,497,0)
(56,9,0)
(287,465,0)
(467,241,0)
(247,523,0)
(456,166,0)
(220,465,0)
(275,468,0)
(438,476,0)
(79,509,0)
(49,357,0)
(501,425,0)
(541,297,0)
(299,279,0)
(328,557,0)
(440,344,0)
(107,173,0)
(140,122,0)
(511,527,0)
(435,565,0)
(404,286,0)
(291,152,0)
(381,34,0)
(554,337,0)
(408,257,0)
(257,309,0)
(41,121,0)
(51,105,0)
(292,373,0)
(464,314,0)
(141,289,0)
(83,173,0)
(129,564,0)
(305,188,0)
(497,393,0)
(68,389,0)
(152,341,0)
(75,63,0)
(284,559,0)
(148,279,0)
(435,278,0)
(52,153,0)
(166,436,0)
(431,289,0)
(277,345,0)
(238,476,0)
(161,559,0)
(425,173,0)
(314,464,0)
(236,193,0)
(485,75,0)
(427,385,0)
(353,502,0)
(280,221,0)
(22,173,0)
(509,137,0)
(425,73,0)
(449,298,0)
(353,123,0)
(132,247,0)
(557,328,0)
(290,155,0)
(255,173,0)
(416,194,0)
(361,523,0)
(37,173,0)
(417,221,0)
(170,242,0)
(102,524,0)
(358,568,0)
(563,173,0)
(277,563,0)
(93,76,0)
(410,138,0)
(259,221,0)
(234,72,0)
(432,123,0)
(149,453,0)
(63,271,0)
(297,541,0)
(202,211,0)
(48,358,0)
(475,540,0)
(345,562,0)
(399,464,0)
(99,323,0)
(105,456,0)
(212,173,0)
(454,296,0)
(166,370,0)
(300,173,0)
(277,384,0)
(162,180,0)
(425,137,0)
(137,400,0)
(487,270,0)
(342,289,0)
(537,490,0)
(434,154,0)
(121,298,0)
(273,173,0)
(19,137,0)
(131,454,0)
(192,560,0)
(328,22,0)
(422,405,0)
(561,173,0)
(555,64,0)
(64,6,0)
(448,34,0)
(67,85,0)
(517,54,0)
(380,142,0)
(471,453,0)
(516,347,0)
(490,351,0)
(349,227,0)
(385,427,0)
(87,123,0)
(255,298,0)
(392,432,0)
(104,255,0)
(375,323,0)
(465,149,0)
(392,195,0)
(260,342,0)
(165,386,0)
(561,483,0)
(311,278,0)
(398,188,0)
(343,137,0)
(137,36,0)
(319,173,0)
(249,156,0)
(337,554,0)
(137,384,0)
(268,190,0)
(137,406,0)
(384,173,0)
(73,240,0)
(293,83,0)
(212,471,0)
(222,163,0)
(182,322,0)
(340,241,0)
(57,323,0)
(548,173,0)
(238,173,0)
(9,476,0)
(530,59,0)
(20,173,0)
(567,22,0)
(275,414,0)
(126,393,0)
(449,173,0)
(433,299,0)
(299,173,0)
(548,149,0)
(166,384,0)
(531,444,0)
(439,173,0)
(160,427,0)
(203,427,0)
(476,323,0)
(526,414,0)
(178,365,0)
(196,285,0)
(563,325,0)
(128,225,0)
(376,161,0)
(241,325,0)
(317,309,0)
(490,384,0)
(188,324,0)
(153,142,0)
(450,221,0)
(409,468,0)
(119,375,0)
(101,376,0)
(332,457,0)
(491,36,0)
(32,117,0)
(379,451,0)
(298,217,0)
(274,494,0)
(2,173,0)
(253,465,0)
(117,32,0)
(319,362,0)
(61,195,0)
(335,194,0)
(236,528,0)
(168,187,0)
(184,441,0)
(109,26,0)
(50,277,0)
(566,72,0)
(517,279,0)
(43,130,0)
(10,499,0)
(94,407,0)
(376,410,0)
(560,109,0)
(279,517,0)
(498,119,0)
(21,54,0)
(352,271,0)
(188,109,0)
(475,375,0)
(214,197,0)
(436,476,0)
(460,97,0)
(309,166,0)
(105,496,0)
(414,526,0)
(277,436,0)
(277,570,0)
(470,225,0)
(172,425,0)
(107,137,0)
(357,173,0)
(247,364,0)
(355,570,0)
(490,345,0)
(396,343,0)
(495,238,0)
(238,145,0)
(19,173,0)
(531,449,0)
(193,145,0)
(465,253,0)
(166,7,0)
(463,144,0)
(156,163,0)
(393,497,0)
(436,173,0)
(224,547,0)
(34,344,0)
(374,271,0)
(7,173,0)
(306,325,0)
(406,173,0)
(500,78,0)
(55,20,0)
(298,391,0)
(409,466,0)
(109,188,0)
(87,523,0)
(65,21,0)
(9,173,0)
(199,36,0)
(271,374,0)
(314,476,0)
(333,117,0)
(40,25,0)
(560,471,0)
(269,242,0)
(306,543,0)
(556,483,0)
(97,193,0)
(331,432,0)
(427,173,0)
(544,323,0)
(423,307,0)
(12,75,0)
(34,85,0)
(145,238,0)
(17,288,0)
(569,304,0)
(506,362,0)
(162,26,0)
(445,375,0)
(415,21,0)
(472,33,0)
(405,184,0)
(457,99,0)
(129,375,0)
(526,347,0)
(416,180,0)
(278,528,0)
(204,304,0)
(143,538,0)
(277,509,0)
(564,129,0)
(107,73,0)
(486,425,0)
(367,237,0)
(244,319,0)
(520,506,0)
(122,153,0)
(43,176,0)
(36,173,0)
(534,351,0)
(309,257,0)
(16,221,0)
(490,406,0)
(302,457,0)
(445,143,0)
(277,64,0)
(227,349,0)
(494,99,0)
(267,398,0)
(373,355,0)
(152,130,0)
(444,76,0)
(114,20,0)
(190,525,0)
(144,416,0)
(229,517,0)
(212,109,0)
(324,357,0)
(210,364,0)
(496,173,0)
(47,474,0)
(22,328,0)
(46,449,0)
(525,209,0)
(242,173,0)
(372,548,0)
(399,341,0)
(490,370,0)
(286,476,0)
(490,436,0)
(341,152,0)
(37,298,0)
(256,121,0)
(119,498,1)
(318,568,1)
(534,420,1)
(7,230,1)
(120,384,1)
(202,80,1)
(36,491,1)
(137,563,1)
(21,415,1)
(500,78,1)
(51,109,1)
(495,512,1)
(357,173,1)
(103,283,1)
(182,321,1)
(135,136,1)
(482,465,1)
(162,180,1)
(565,336,1)
(330,173,1)
(491,199,1)
(380,142,1)
(531,23,1)
(566,326,1)
(219,360,1)
(119,375,1)
(154,123,1)
(541,325,1)
(160,103,1)
(184,405,1)
(166,237,1)
(326,92,1)
(136,224,1)
(409,377,1)
(64,110,1)
(137,384,1)
(527,173,1)
(443,11,1)
(24,496,1)
(464,53,1)
(80,156,1)
(300,166,1)
(300,477,1)
(138,173,1)
(566,476,1)
(137,253,1)
(211,59,1)
(248,18,1)
(137,7,1)
(332,302,1)
(218,474,1)
(505,173,1)
(446,20,1)
(399,464,1)
(269,250,1)
(297,288,1)
(349,227,1)
(148,410,1)
(548,329,1)
(292,435,1)
(303,409,1)
(569,33,1)
(325,241,1)
(356,6,1)
(319,244,1)
(567,254,1)
(398,560,1)
(550,24,1)
(410,376,1)
(75,173,1)
(154,95,1)
(475,385,1)
(121,173,1)
(137,64,1)
(212,109,1)
(41,153,1)
(551,367,1)
(150,425,1)
(31,257,1)
(376,161,1)
(469,187,1)
(490,36,1)
(314,476,1)
(161,559,1)
(119,386,1)
(256,41,1)
(153,173,1)
(311,565,1)
(475,375,1)
(104,510,1)
(128,304,1)
(328,22,1)
(137,351,1)
(553,151,1)
(501,486,1)
(242,173,1)
(227,149,1)
(137,400,1)
(121,256,1)
(253,465,1)
(307,6,1)
(54,21,1)
(494,388,1)
(255,28,1)
(425,501,1)
(435,565,1)
(255,298,1)
(361,84,1)
(454,296,1)
(166,456,1)
(337,173,1)
(529,87,1)
(357,109,1)
(545,173,1)
(140,375,1)
(516,171,1)
(437,538,1)
(305,324,1)
(140,413,1)
(289,141,1)
(540,103,1)
(411,556,1)
(40,547,1)
(414,209,1)
(295,145,1)
(255,173,1)
(435,278,1)
(166,83,1)
(427,298,1)
(478,506,1)
(277,83,1)
(153,142,1)
(271,63,1)
(180,194,1)
(264,455,1)
(2,173,1)
(277,50,1)
(466,60,1)
(302,190,1)
(131,377,1)
(277,563,1)
(407,161,1)
(244,478,1)
(8,469,1)
(92,476,1)
(60,197,1)
(249,233,1)
(372,548,1)
(23,449,1)
(144,463,1)
(22,567,1)
(275,468,1)
(188,393,1)
(166,7,1)
(535,342,1)
(115,344,1)
(297,541,1)
(294,354,1)
(300,173,1)
(97,6,1)
(183,454,1)
(379,451,1)
(107,137,1)
(354,197,1)
(486,137,1)
(47,224,1)
(84,529,1)
(63,452,1)
(180,108,1)
(192,324,1)
(45,161,1)
(222,430,1)
(47,111,1)
(508,162,1)
(271,352,1)
(35,364,1)
(235,518,1)
(190,73,1)
(488,184,1)
(43,176,1)
(353,123,1)
(565,547,1)
(188,324,1)
(100,238,1)
(118,149,1)
(34,381,1)
(425,137,1)
(60,181,1)
(274,119,1)
(237,551,1)
(563,173,1)
(334,472,1)
(304,386,1)
(137,83,1)
(117,173,1)
(167,72,1)
(226,298,1)
(159,173,1)
(490,345,1)
(392,432,1)
(299,433,1)
(75,298,1)
(124,427,1)
(184,441,1)
(299,173,1)
(429,242,1)
(556,297,1)
(254,374,1)
(565,173,1)
(137,370,1)
(486,73,1)
(467,340,1)
(99,445,1)
(548,173,1)
(166,436,1)
(365,173,1)
(547,213,1)
(224,173,1)
(163,222,1)
(562,116,1)
(327,371,1)
(454,86,1)
(250,276,1)
(474,379,1)
(506,173,1)
(432,331,1)
(330,235,1)
(51,173,1)
(312,528,1)
(358,54,1)
(378,290,1)
(93,447,1)
(33,334,1)
(460,295,1)
(538,228,1)
(288,407,1)
(403,35,1)
(364,156,1)
(346,431,1)
(87,403,1)
(170,232,1)
(328,42,1)
(96,20,1)
(193,145,1)
(398,267,1)
(510,234,1)
(490,366,1)
(380,166,1)
(384,173,1)
(77,386,1)
(85,34,1)
(166,509,1)
(90,263,1)
(370,327,1)
(537,490,1)
(210,265,1)
(533,471,1)
(470,152,1)
(564,261,1)
(153,58,1)
(396,482,1)
(331,27,1)
(339,177,1)
(229,410,1)
(509,173,1)
(400,542,1)
(111,173,1)
(397,342,1)
(359,566,1)
(125,134,1)
(447,531,1)
(497,132,1)
(277,351,1)
(381,448,1)
(525,457,1)
(97,173,1)
(490,83,1)
(95,434,1)
(78,214,1)
(548,149,1)
(560,173,1)
(439,476,1)
(439,310,1)
(490,384,1)
(477,77,1)
(530,202,1)
(282,481,1)
(316,380,1)
(9,173,1)
(55,114,1)
(101,246,1)
(405,173,1)
(253,349,1)
(277,406,1)
(260,123,1)
(376,101,1)
(22,476,1)
(277,36,1)
(496,166,1)
(546,31,1)
(490,320,1)
(0,107,1)
(531,449,1)
(122,140,1)
(176,553,1)
(116,345,1)
(409,466,1)
(166,345,1)
(277,400,1)
(340,563,1)
(177,122,1)
(261,255,1)
(85,524,1)
(277,370,1)
(232,165,1)
(224,90,1)
(145,238,1)
(166,351,1)
(358,522,1)
(557,374,1)
(186,422,1)
(129,564,1)
(388,274,1)
(431,515,1)
(19,208,1)
(475,521,1)
(442,474,1)
(157,13,1)
(240,173,1)
(569,458,1)
(428,166,1)
(523,361,1)
(20,55,1)
(307,423,1)
(22,173,1)
(330,298,1)
(144,162,1)
(438,444,1)
(204,557,1)
(211,344,1)
(250,375,1)
(263,547,1)
(555,225,1)
(336,312,1)
(19,137,1)
(561,539,1)
(310,513,1)
(188,305,1)
(137,406,1)
(213,370,1)
(319,173,1)
(545,239,1)
(277,509,1)
(127,406,1)
(380,173,1)
(190,173,1)
(490,406,1)
(425,73,1)
(224,547,1)
(227,162,1)
(166,563,1)
(306,200,1)
(345,133,1)
(19,73,1)
(344,440,1)
(398,393,1)
(526,347,1)
(382,179,1)
(212,207,1)
(383,533,1)
(400,173,1)
(20,173,1)
(329,363,1)
(59,74,1)
(559,173,1)
(52,291,1)
(444,531,1)
(4,192,1)
(490,400,1)
(433,390,1)
(247,364,1)
(143,437,1)
(123,527,1)
(239,387,1)
(516,173,1)
(144,173,1)
(290,508,1)
(121,298,1)
(343,396,1)
(541,421,1)
(358,173,1)
(143,538,1)
(74,530,1)
(449,298,1)
(30,248,1)
(69,185,1)
(107,173,1)
(176,307,1)
(89,212,1)
(64,173,1)
(357,471,1)
(390,517,1)
(202,156,1)
(309,317,1)
(490,64,1)
(279,299,1)
(520,169,1)
(169,83,1)
(349,343,1)
(83,258,1)
(122,153,1)
(517,173,1)
(368,300,1)
(290,344,1)
(458,33,1)
(405,54,1)
(25,40,1)
(36,173,1)
(80,378,1)
(197,322,1)
(159,443,1)
(454,375,1)
(267,560,1)
(145,100,1)
(436,219,1)
(277,64,1)
(553,286,1)
(347,516,1)
(515,211,1)
(407,252,1)
(37,298,1)
(72,566,1)
(483,545,1)
(415,65,1)
(140,514,1)
(463,395,1)
(487,147,1)
(166,370,1)
(67,249,1)
(566,173,1)
(272,30,1)
(416,91,1)
(420,148,1)
(306,325,1)
(468,409,1)
(262,400,1)
(21,161,1)
(483,561,1)
(322,446,1)
(518,405,1)
(561,173,1)
(464,314,1)
(141,118,1)
(277,237,1)
(240,69,1)
(456,212,1)
(272,161,1)
(7,173,1)
(146,470,1)
(568,358,1)
(341,191,1)
(227,70,1)
(371,43,1)
(166,406,1)
(306,173,1)
(3,526,1)
(108,372,1)
(373,528,1)
(171,0,1)
(114,182,1)
(522,48,1)
(425,173,1)
(455,309,1)
(509,189,1)
(449,173,1)
(147,298,1)
(471,120,1)
(528,236,1)
(113,316,1)
(538,476,1)
(406,383,1)
(473,289,1)
(40,173,1)
(384,66,1)
(149,127,1)
(82,294,1)
(190,268,1)
(257,408,1)
(273,424,1)
(50,355,1)
(490,7,1)
(214,113,1)
(138,54,1)
(459,150,1)
(137,345,1)
(56,174,1)
(494,99,1)
(268,3,1)
(137,366,1)
(416,144,1)
(166,36,1)
(168,439,1)
(188,398,1)
(223,46,1)
(370,173,1)
(270,147,1)
(366,201,1)
(189,79,1)
(355,373,1)
(2,479,1)
(511,39,1)
(387,297,1)
(314,339,1)
(102,401,1)
(385,124,1)
(492,284,1)
(187,439,1)
(490,563,1)
(377,273,1)
(153,166,1)
(147,308,1)
(46,436,1)
(61,432,1)
(542,536,1)
(392,195,1)
(335,393,1)
(241,467,1)
(560,109,1)
(42,22,1)
(481,196,1)
(277,384,1)
(66,15,1)
(86,131,1)
(137,36,1)
(313,44,1)
(286,173,1)
(430,115,1)
(166,384,1)
(179,564,1)
(252,94,1)
(468,500,1)
(11,260,1)
(148,279,1)
(166,400,1)
(78,380,1)
(181,183,1)
(375,129,1)
(234,167,1)
(279,517,1)
(76,54,1)
(445,143,1)
(53,314,1)
(250,270,1)
(431,289,1)
(505,459,1)
(408,264,1)
(270,487,1)
(234,72,1)
(465,220,1)
(291,275,1)
(278,528,1)
(190,137,1)
(251,61,1)
(513,507,1)
(49,29,1)
(37,173,1)
(404,139,1)
(558,369,1)
(137,436,1)
(564,255,1)
(436,173,1)
(441,330,1)
(67,85,1)
(379,2,1)
(242,170,1)
(9,476,1)
(207,338,1)
(236,193,1)
(34,344,1)
(142,365,1)
(512,442,1)
(366,173,1)
(195,67,1)
(185,351,1)
(269,242,1)
(405,186,1)
(73,240,1)
(10,37,1)
(523,87,1)
(283,125,1)
(408,173,1)
(369,543,1)
(27,335,1)
(138,266,1)
(91,144,1)
(342,289,1)
(427,203,1)
(559,492,1)
(212,471,1)
(548,162,1)
(117,333,1)
(401,249,1)
(357,49,1)
(271,375,1)
(1,119,1)
(201,418,1)
(128,557,1)
(218,215,1)
(560,4,1)
(432,123,1)
(132,247,1)
(196,554,1)
(441,348,1)
(147,173,1)
(314,173,1)
(144,149,1)
(309,173,1)
(416,194,1)
(503,121,1)
(278,311,1)
(129,32,1)
(496,142,1)
(395,372,1)
(134,99,1)
(497,154,1)
(174,38,1)
(172,425,1)
(163,123,1)
(489,89,1)
(448,524,1)
(227,173,1)
(352,63,1)
(6,412,1)
(263,25,1)
(247,523,1)
(178,262,1)
(418,562,1)
(434,126,1)
(18,2,1)
(496,489,1)
(343,137,1)
(380,461,1)
(65,366,1)
(260,353,1)
(449,223,1)
(524,123,1)
(105,496,1)
(277,366,1)
(48,172,1)
(363,36,1)
(33,476,1)
(479,88,1)
(543,306,1)
(286,404,1)
(557,328,1)
(33,173,1)
(237,173,1)
(215,234,1)
(133,535,1)
(106,45,1)
(277,345,1)
(524,102,1)
(277,436,1)
(220,287,1)
(110,555,1)
(439,173,1)
(350,154,1)
(428,142,1)
(88,47,1)
(374,271,1)
(422,556,1)
(246,138,1)
(517,54,1)
(304,569,1)
(345,173,1)
(319,325,1)
(465,173,1)
(385,427,1)
(377,300,1)
(214,197,1)
(412,469,1)
(111,135,1)
(249,156,1)
(517,206,1)
(37,558,1)
(257,309,1)
(444,76,1)
(338,7,1)
(107,73,1)
(446,96,1)
(321,375,1)
(226,10,1)
(193,97,1)
(423,356,1)
(362,506,1)
(70,112,1)
(277,7,1)
(549,347,1)
(230,411,1)
(410,138,1)
(265,350,1)
(413,121,1)
(343,173,1)
(29,237,1)
(298,217,1)
(58,52,1)
(199,109,1)
(525,190,1)
(218,275,1)
(506,520,1)
(466,454,1)
(427,173,1)
(461,303,1)
(521,385,1)
(172,505,1)
(556,483,1)
(228,82,1)
(554,337,1)
(76,93,1)
(476,438,1)
(238,476,1)
(59,123,1)
(284,315,1)
(13,468,1)
(457,99,1)
(200,218,1)
(266,318,1)
(218,488,1)
(490,237,1)
(1,494,1)
(393,497,1)
(362,319,1)
(351,173,1)
(445,375,1)
(208,146,1)
(333,382,1)
(412,152,1)
(320,148,1)
(238,173,1)
(19,173,1)
(180,372,1)
(75,12,1)
(79,257,1)
(341,399,1)
(308,429,1)
(166,366,1)
(9,56,1)
(373,292,1)
(258,293,1)
(15,554,1)
(318,54,1)
(309,166,1)
(348,330,1)
(238,495,1)
(32,117,1)
(451,272,1)
(424,368,1)
(76,173,1)
(293,325,1)
(322,375,1)
(72,359,1)
(474,47,1)
(276,270,1)
(353,346,1)
(165,296,1)
(225,128,1)
(191,313,1)
(296,540,1)
(20,476,1)
(117,54,1)
(374,19,1)
(465,149,1)
(103,173,1)
(233,251,1)
(485,19,1)
(507,64,1)
(412,8,1)
(137,509,1)
(273,173,1)
(472,204,1)
(498,549,1)
(275,414,1)
(399,122,1)
(560,471,1)
(38,399,1)
(241,161,1)
(97,460,1)
(317,428,1)
(456,105,1)
(490,370,1)
(537,277,1)
(490,509,1)
(17,541,1)
(539,245,1)
(51,550,1)
(139,307,1)
(563,546,1)
(94,17,1)
(126,211,1)
(465,162,1)
(337,106,1)
(351,534,1)
(367,194,1)
(347,107,1)
(206,229,1)
(365,178,1)
(536,172,1)
(286,476,1)
(421,226,1)
(481,435,1)
(137,237,1)
(187,168,1)
(51,471,1)
(83,173,1)
(212,173,1)
(300,142,1)
(360,184,1)
(2,547,1)
(109,188,1)
(440,397,1)
(540,475,1)
(324,357,1)
(217,362,1)
(514,413,1)
(313,9,1)
(105,51,1)
(527,511,1)
(490,436,1)
(12,485,1)
(457,332,1)
(40,282,1)
(112,343,1)
(28,104,1)
(287,509,1)
(545,325,1)
(39,473,1)
(209,525,1)
(309,142,1)
(538,173,1)
(63,75,1)
(342,159,1)
(203,160,1)
(166,64,1)
(414,526,1)
(44,9,1)
(151,286,1)
(364,210,1)
(452,75,1)
(343,73,1)
(526,1,1)
(107,157,1)
(180,416,1)
(361,344,1)
(152,341,1)
(386,269,1)
(307,173,1)
(496,173,1)
(194,392,1)
(191,296,1)
(245,545,1)
(406,173,1)
(87,123,1)
(490,351,1)
(541,173,1)
(156,163,1)
(413,503,1)
(469,225,1)
(31,257,2)
(217,362,2)
(428,172,2)
(272,47,2)
(272,161,2)
(247,523,2)
(357,173,2)
(556,275,2)
(94,275,2)
(180,416,2)
(182,234,2)
(543,184,2)
(9,173,2)
(535,554,2)
(110,275,2)
(497,154,2)
(561,173,2)
(410,172,2)
(137,400,2)
(436,184,2)
(162,211,2)
(153,142,2)
(353,342,2)
(420,148,2)
(226,184,2)
(300,234,2)
(533,554,2)
(263,435,2)
(264,172,2)
(355,373,2)
(442,474,2)
(7,173,2)
(34,344,2)
(228,234,2)
(214,197,2)
(444,184,2)
(212,109,2)
(103,234,2)
(180,372,2)
(27,211,2)
(137,436,2)
(516,173,2)
(432,211,2)
(324,211,2)
(490,436,2)
(288,184,2)
(136,554,2)
(275,414,2)
(238,476,2)
(425,148,2)
(396,257,2)
(78,214,2)
(19,173,2)
(161,559,2)
(166,456,2)
(153,173,2)
(449,298,2)
(128,304,2)
(233,211,2)
(424,234,2)
(278,474,2)
(438,184,2)
(275,468,2)
(157,468,2)
(236,193,2)
(537,490,2)
(252,184,2)
(10,474,2)
(409,377,2)
(427,298,2)
(525,190,2)
(445,375,2)
(469,275,2)
(17,257,2)
(87,123,2)
(176,307,2)
(112,257,2)
(76,54,2)
(170,234,2)
(474,435,2)
(400,173,2)
(119,375,2)
(148,554,2)
(490,509,2)
(528,236,2)
(47,275,2)
(317,172,2)
(474,379,2)
(226,257,2)
(256,275,2)
(101,554,2)
(441,556,2)
(270,234,2)
(241,257,2)
(527,173,2)
(541,275,2)
(373,528,2)
(152,341,2)
(153,275,2)
(378,211,2)
(486,257,2)
(435,474,2)
(250,234,2)
(116,554,2)
(376,161,2)
(17,234,2)
(509,257,2)
(328,275,2)
(299,410,2)
(475,375,2)
(252,474,2)
(328,22,2)
(438,444,2)
(180,194,2)
(95,211,2)
(251,211,2)
(414,209,2)
(166,400,2)
(541,325,2)
(17,184,2)
(105,496,2)
(166,406,2)
(423,275,2)
(277,563,2)
(190,137,2)
(541,257,2)
(469,187,2)
(193,474,2)
(342,289,2)
(89,556,2)
(464,275,2)
(319,325,2)
(286,275,2)
(439,275,2)
(111,554,2)
(347,468,2)
(133,554,2)
(497,132,2)
(541,474,2)
(569,275,2)
(407,161,2)
(156,163,2)
(412,152,2)
(296,234,2)
(94,257,2)
(466,377,2)
(60,377,2)
(149,554,2)
(421,234,2)
(140,413,2)
(269,242,2)
(341,275,2)
(224,547,2)
(82,234,2)
(144,372,2)
(530,342,2)
(490,64,2)
(49,211,2)
(277,351,2)
(487,234,2)
(277,436,2)
(304,569,2)
(150,257,2)
(556,234,2)
(490,406,2)
(203,234,2)
(465,149,2)
(360,184,2)
(212,556,2)
(76,173,2)
(364,211,2)
(320,148,2)
(189,257,2)
(397,342,2)
(515,342,2)
(415,554,2)
(154,123,2)
(465,257,2)
(180,211,2)
(343,137,2)
(507,275,2)
(249,156,2)
(554,337,2)
(381,211,2)
(199,211,2)
(306,234,2)
(483,297,2)
(353,123,2)
(61,211,2)
(496,173,2)
(267,324,2)
(370,275,2)
(271,275,2)
(495,474,2)
(122,153,2)
(247,211,2)
(65,554,2)
(330,556,2)
(524,211,2)
(193,145,2)
(277,83,2)
(240,148,2)
(352,275,2)
(166,64,2)
(374,271,2)
(208,275,2)
(132,247,2)
(107,73,2)
(555,275,2)
(137,253,2)
(291,275,2)
(454,377,2)
(399,464,2)
(454,296,2)
(9,275,2)
(201,554,2)
(435,565,2)
(255,298,2)
(299,173,2)
(310,275,2)
(94,234,2)
(90,435,2)
(399,275,2)
(366,173,2)
(278,528,2)
(545,173,2)
(269,250,2)
(252,257,2)
(141,554,2)
(369,275,2)
(490,384,2)
(223,184,2)
(306,325,2)
(85,211,2)
(288,275,2)
(194,392,2)
(518,556,2)
(413,121,2)
(416,194,2)
(117,234,2)
(416,144,2)
(564,234,2)
(382,234,2)
(429,234,2)
(403,211,2)
(166,556,2)
(563,257,2)
(316,409,2)
(271,375,2)
(307,6,2)
(74,342,2)
(122,275,2)
(22,173,2)
(431,289,2)
(200,474,2)
(297,541,2)
(373,435,2)
(36,211,2)
(234,184,2)
(108,372,2)
(427,234,2)
(465,162,2)
(525,526,2)
(143,538,2)
(336,474,2)
(137,384,2)
(436,173,2)
(355,435,2)
(490,237,2)
(313,9,2)
(414,468,2)
(529,211,2)
(248,47,2)
(357,471,2)
(195,67,2)
(521,234,2)
(211,211,2)
(526,468,2)
(534,148,2)
(279,299,2)
(25,40,2)
(137,237,2)
(564,255,2)
(501,257,2)
(421,184,2)
(101,172,2)
(517,410,2)
(59,123,2)
(196,554,2)
(447,184,2)
(172,148,2)
(197,322,2)
(560,324,2)
(254,275,2)
(531,184,2)
(188,393,2)
(558,184,2)
(10,234,2)
(409,466,2)
(2,173,2)
(309,166,2)
(566,476,2)
(271,63,2)
(500,409,2)
(162,180,2)
(354,234,2)
(56,275,2)
(348,556,2)
(364,156,2)
(277,7,2)
(10,37,2)
(513,275,2)
(557,275,2)
(242,234,2)
(297,474,2)
(20,234,2)
(505,173,2)
(468,409,2)
(250,270,2)
(166,7,2)
(84,211,2)
(137,83,2)
(456,556,2)
(72,566,2)
(67,85,2)
(467,257,2)
(548,173,2)
(151,275,2)
(255,234,2)
(277,64,2)
(277,406,2)
(541,184,2)
(481,554,2)
(215,234,2)
(362,506,2)
(263,275,2)
(295,474,2)
(123,554,2)
(374,275,2)
(306,474,2)
(374,19,2)
(338,556,2)
(380,166,2)
(368,234,2)
(33,275,2)
(219,184,2)
(275,234,2)
(19,275,2)
(565,474,2)
(136,435,2)
(136,275,2)
(129,234,2)
(200,234,2)
(410,554,2)
(6,275,2)
(304,275,2)
(32,234,2)
(107,468,2)
(501,148,2)
(339,275,2)
(372,211,2)
(293,257,2)
(190,526,2)
(117,173,2)
(359,184,2)
(134,234,2)
(104,234,2)
(361,211,2)
(302,526,2)
(458,275,2)
(481,435,2)
(425,137,2)
(342,159,2)
(153,166,2)
(277,237,2)
(4,324,2)
(166,237,2)
(64,173,2)
(191,313,2)
(404,275,2)
(313,275,2)
(433,410,2)
(63,275,2)
(369,474,2)
(51,173,2)
(225,128,2)
(282,435,2)
(38,275,2)
(32,117,2)
(558,474,2)
(193,97,2)
(191,296,2)
(377,273,2)
(6,412,2)
(187,275,2)
(237,211,2)
(115,342,2)
(448,211,2)
(51,471,2)
(166,563,2)
(234,72,2)
(565,173,2)
(380,173,2)
(111,173,2)
(551,211,2)
(543,275,2)
(47,554,2)
(99,445,2)
(390,410,2)
(557,374,2)
(398,393,2)
(111,435,2)
(200,184,2)
(220,257,2)
(260,342,2)
(294,234,2)
(67,211,2)
(2,547,2)
(407,257,2)
(525,457,2)
(439,173,2)
(137,257,2)
(109,188,2)
(540,475,2)
(344,342,2)
(224,173,2)
(166,345,2)
(119,347,2)
(174,275,2)
(37,474,2)
(226,234,2)
(47,111,2)
(369,234,2)
(314,275,2)
(445,234,2)
(474,47,2)
(506,257,2)
(490,36,2)
(407,474,2)
(34,211,2)
(69,148,2)
(137,406,2)
(560,471,2)
(77,234,2)
(75,275,2)
(135,435,2)
(331,211,2)
(15,554,2)
(288,257,2)
(109,211,2)
(138,54,2)
(460,474,2)
(120,554,2)
(33,173,2)
(131,377,2)
(468,500,2)
(485,275,2)
(306,173,2)
(449,173,2)
(300,142,2)
(405,556,2)
(257,408,2)
(505,148,2)
(137,563,2)
(505,257,2)
(46,184,2)
(188,398,2)
(406,173,2)
(416,372,2)
(351,148,2)
(380,409,2)
(474,554,2)
(370,173,2)
(224,554,2)
(35,211,2)
(422,556,2)
(309,172,2)
(490,366,2)
(17,474,2)
(277,36,2)
(347,107,2)
(308,234,2)
(55,234,2)
(540,234,2)
(191,275,2)
(128,557,2)
(75,173,2)
(322,375,2)
(148,172,2)
(290,211,2)
(25,435,2)
(125,234,2)
(128,275,2)
(139,275,2)
(434,211,2)
(322,234,2)
(63,75,2)
(556,297,2)
(379,47,2)
(126,211,2)
(241,161,2)
(309,142,2)
(143,234,2)
(509,173,2)
(490,83,2)
(386,234,2)
(531,449,2)
(147,234,2)
(506,173,2)
(52,275,2)
(349,227,2)
(405,173,2)
(393,211,2)
(73,148,2)
(54,21,2)
(297,288,2)
(346,342,2)
(79,257,2)
(523,87,2)
(311,474,2)
(418,554,2)
(202,342,2)
(169,257,2)
(252,234,2)
(97,173,2)
(384,554,2)
(225,275,2)
(384,173,2)
(218,474,2)
(486,148,2)
(19,73,2)
(526,347,2)
(227,173,2)
(538,173,2)
(58,275,2)
(414,526,2)
(50,435,2)
(135,554,2)
(218,234,2)
(444,76,2)
(357,211,2)
(145,474,2)
(276,234,2)
(324,357,2)
(557,328,2)
(210,211,2)
(332,526,2)
(358,173,2)
(147,298,2)
(496,556,2)
(2,47,2)
(548,211,2)
(425,73,2)
(470,275,2)
(432,123,2)
(351,173,2)
(435,278,2)
(129,32,2)
(237,173,2)
(477,234,2)
(496,142,2)
(287,257,2)
(212,471,2)
(547,275,2)
(400,172,2)
(537,277,2)
(561,297,2)
(443,554,2)
(171,468,2)
(321,234,2)
(457,99,2)
(159,342,2)
(177,275,2)
(227,162,2)
(83,173,2)
(184,556,2)
(305,324,2)
(152,275,2)
(523,361,2)
(138,173,2)
(172,425,2)
(425,173,2)
(135,275,2)
(540,103,2)
(85,524,2)
(388,347,2)
(72,184,2)
(437,234,2)
(97,6,2)
(242,173,2)
(253,465,2)
(475,385,2)
(252,275,2)
(7,556,2)
(119,386,2)
(494,99,2)
(274,347,2)
(455,556,2)
(375,129,2)
(229,410,2)
(307,173,2)
(372,548,2)
(523,211,2)
(277,384,2)
(137,351,2)
(146,275,2)
(105,556,2)
(107,173,2)
(206,410,2)
(209,526,2)
(412,275,2)
(24,556,2)
(192,324,2)
(37,173,2)
(113,409,2)
(268,526,2)
(357,109,2)
(376,172,2)
(211,344,2)
(558,234,2)
(41,275,2)
(300,166,2)
(405,54,2)
(369,184,2)
(22,476,2)
(494,347,2)
(160,234,2)
(298,257,2)
(548,149,2)
(227,257,2)
(556,257,2)
(40,547,2)
(166,436,2)
(159,554,2)
(408,556,2)
(539,297,2)
(0,468,2)
(527,554,2)
(47,435,2)
(33,476,2)
(100,474,2)
(211,59,2)
(464,314,2)
(103,173,2)
(188,324,2)
(556,184,2)
(365,172,2)
(304,386,2)
(296,540,2)
(184,405,2)
(21,554,2)
(309,173,2)
(409,234,2)
(490,370,2)
(172,257,2)
(330,173,2)
(277,400,2)
(224,275,2)
(545,325,2)
(568,172,2)
(137,64,2)
(517,54,2)
(297,275,2)
(240,173,2)
(282,554,2)
(421,275,2)
(121,173,2)
(327,275,2)
(184,441,2)
(340,257,2)
(314,476,2)
(511,554,2)
(28,234,2)
(122,140,2)
(407,184,2)
(142,172,2)
(345,173,2)
(277,509,2)
(263,554,2)
(498,347,2)
(334,275,2)
(266,172,2)
(358,54,2)
(213,275,2)
(90,554,2)
(11,554,2)
(439,476,2)
(474,275,2)
(491,211,2)
(548,162,2)
(250,375,2)
(190,73,2)
(142,365,2)
(92,184,2)
(560,173,2)
(22,275,2)
(407,234,2)
(297,257,2)
(431,342,2)
(393,497,2)
(343,73,2)
(156,342,2)
(428,556,2)
(538,234,2)
(490,345,2)
(42,275,2)
(187,439,2)
(471,554,2)
(137,345,2)
(37,298,2)
(138,172,2)
(232,234,2)
(166,351,2)
(85,34,2)
(496,166,2)
(350,211,2)
(317,556,2)
(318,172,2)
(376,554,2)
(194,211,2)
(325,257,2)
(40,435,2)
(329,211,2)
(185,148,2)
(326,184,2)
(478,257,2)
(367,211,2)
(264,556,2)
(569,33,2)
(53,275,2)
(387,297,2)
(325,241,2)
(421,257,2)
(463,372,2)
(80,156,2)
(138,554,2)
(483,561,2)
(217,257,2)
(516,468,2)
(238,474,2)
(473,554,2)
(408,173,2)
(412,469,2)
(20,476,2)
(253,349,2)
(43,176,2)
(459,148,2)
(514,275,2)
(86,377,2)
(277,345,2)
(443,342,2)
(568,358,2)
(449,184,2)
(273,173,2)
(441,330,2)
(197,234,2)
(490,148,2)
(238,173,2)
(277,435,2)
(517,173,2)
(288,474,2)
(140,275,2)
(553,275,2)
(277,366,2)
(195,211,2)
(121,298,2)
(288,234,2)
(239,297,2)
(566,184,2)
(430,342,2)
(466,454,2)
(132,211,2)
(66,554,2)
(37,275,2)
(129,564,2)
(425,257,2)
(273,234,2)
(303,409,2)
(11,342,2)
(83,257,2)
(545,297,2)
(47,224,2)
(226,275,2)
(365,173,2)
(94,184,2)
(10,275,2)
(118,554,2)
(543,474,2)
(111,275,2)
(145,238,2)
(179,234,2)
(522,172,2)
(349,257,2)
(401,211,2)
(207,556,2)
(508,211,2)
(398,560,2)
(99,234,2)
(222,342,2)
(356,275,2)
(559,173,2)
(166,509,2)
(306,184,2)
(379,2,2)
(392,195,2)
(265,211,2)
(566,173,2)
(94,474,2)
(440,342,2)
(102,211,2)
(148,279,2)
(39,554,2)
(455,172,2)
(410,138,2)
(253,257,2)
(461,409,2)
(446,234,2)
(64,275,2)
(520,257,2)
(318,554,2)
(383,554,2)
(306,275,2)
(319,173,2)
(166,83,2)
(558,275,2)
(563,173,2)
(392,432,2)
(309,556,2)
(292,435,2)
(468,234,2)
(88,47,2)
(538,476,2)
(1,347,2)
(114,234,2)
(260,554,2)
(543,306,2)
(395,372,2)
(542,172,2)
(202,211,2)
(536,172,2)
(123,527,2)
(1,494,2)
(29,211,2)
(297,234,2)
(257,556,2)
(181,377,2)
(74,211,2)
(21,161,2)
(150,148,2)
(510,234,2)
(288,407,2)
(258,257,2)
(255,173,2)
(137,509,2)
(469,225,2)
(490,351,2)
(512,474,2)
(307,275,2)
(466,60,2)
(121,275,2)
(452,275,2)
(236,474,2)
(48,172,2)
(91,372,2)
(343,173,2)
(36,173,2)
(385,427,2)
(479,47,2)
(54,554,2)
(497,211,2)
(163,342,2)
(556,474,2)
(73,240,2)
(204,275,2)
(407,275,2)
(392,211,2)
(137,366,2)
(472,275,2)
(347,516,2)
(172,505,2)
(90,275,2)
(377,300,2)
(218,275,2)
(178,172,2)
(117,54,2)
(380,142,2)
(371,275,2)
(167,184,2)
(335,211,2)
(300,173,2)
(543,234,2)
(342,342,2)
(246,554,2)
(186,556,2)
(13,468,2)
(249,211,2)
(176,553,2)
(343,257,2)
(137,370,2)
(261,234,2)
(361,344,2)
(490,563,2)
(406,554,2)
(341,191,2)
(163,123,2)
(37,184,2)
(244,257,2)
(20,173,2)
(25,554,2)
(107,137,2)
(212,173,2)
(319,257,2)
(385,234,2)
(363,211,2)
(549,347,2)
(96,234,2)
(375,234,2)
(8,275,2)
(476,184,2)
(330,298,2)
(144,162,2)
(12,275,2)
(246,172,2)
(59,211,2)
(80,211,2)
(459,257,2)
(245,297,2)
(489,556,2)
(483,545,2)
(176,275,2)
(410,376,2)
(465,173,2)
(1,119,2)
(446,20,2)
(475,234,2)
(476,438,2)
(546,257,2)
(168,275,2)
(297,184,2)
(144,173,2)
(377,234,2)
(562,554,2)
(60,197,2)
(235,556,2)
(37,234,2)
(183,377,2)
(166,370,2)
(342,554,2)
(211,342,2)
(44,275,2)
(67,249,2)
(40,554,2)
(266,554,2)
(257,309,2)
(490,400,2)
(76,184,2)
(148,410,2)
(556,483,2)
(530,211,2)
(286,476,2)
(70,257,2)
(362,257,2)
(188,211,2)
(209,525,2)
(456,212,2)
(451,272,2)
(247,364,2)
(147,173,2)
(78,380,2)
(18,47,2)
(411,556,2)
(3,526,2)
(456,105,2)
(43,275,2)
(312,474,2)
(488,184,2)
(257,172,2)
(541,234,2)
(408,172,2)
(349,343,2)
(30,47,2)
(9,476,2)
(17,275,2)
(553,286,2)
(413,275,2)
(565,547,2)
(230,556,2)
(137,36,2)
(314,173,2)
(500,78,2)
(362,319,2)
(290,344,2)
(541,173,2)
(23,184,2)
(40,173,2)
(277,370,2)
(279,410,2)
(93,184,2)
(224,435,2)
(398,324,2)
(166,36,2)
(421,474,2)
(322,446,2)
(140,375,2)
(399,122,2)
(166,366,2)
(270,147,2)
(262,172,2)
(159,173,2)
(190,173,2)
(227,149,2)
(482,257,2)
(366,554,2)
(289,554,2)
(345,554,2)
(457,526,2)
(10,184,2)
(144,149,2)
(87,211,2)
(154,211,2)
(97,474,2)
(279,517,2)
(166,384,2)
(528,474,2)
(526,1,2)
(59,342,2)
(137,7,2)
(226,474,2)
(78,409,2)
(444,531,2)
(341,399,2)
(75,298,2)
(358,172,2)
(214,409,2)
(269,234,2)
(51,556,2)
(286,173,2)
(283,234,2)
(567,275,2)
(105,51,2)
(503,275,2)
(333,234,2)
(454,375,2)
(445,143,2)
(560,109,2)
(427,173,2)
(200,275,2)
(165,234,2)
(524,123,2)
(550,556,2)
(19,137,2)
(298,217,2)
(337,173,2)
(490,7,2)
(127,554,2)
(379,451,2)
(124,234,2)
(51,109,2)
(451,47,2)
(386,269,2)
(218,184,2)
-----------------------------------
(0,pi)
(1,(try0 << r)
(2,pi->lyrno)
(3,pi)
(4,xstep)
(5,for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\\n\\t\\t\\t  picomp->numrlvls; ++rlvlno, ++pirlvl)
(6,pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind)
(7,pi->x)
(8,prchind)
(9,pi->pirlvl)
(10,++pi->picomp)
(11,pi)
(12,picomp)
(13,pi)
(14,rpx)
(15,pi)
(16,picomp)
(17,int)
(18,int)
(19,pi->y)
(20,pi->pirlvl)
(21,pchg->rlvlnostart)
(22,pi->pirlvl)
(23,pirlvls)
(24,pi)
(25,++pi->lyrno)
(26,)
(27,picomp)
(28,picomp)
(29,pi)
(30,lyrnoend)
(31,pi)
(32,1 - pi->rlvlno)
(33,pi->pirlvl)
(34,rlvlno - 1)
(35,picomp)
(36,pi->ystep)
(37,pi->picomp)
(38,trx0)
(39,pi)
(40,pi->lyrno)
(41,pi)
(42,prcheightexpn)
(43,assert(pi->prcno < pi->pirlvl->numprcs)
(44,prcwidthexpn)
(45,pi)
(46,pi)
(47,pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs)
(48,pi)
(49,xstep)
(50,0)
(51,pi->xstep)
(52,pi)
(53,prcwidthexpn)
(54,pi->rlvlno = pchg->rlvlnostart)
(55,pirlvl)
(56,pirlvl)
(57,if (pi->pirlvl->numprcs == 0)
(58,x)
(59,picomp->numrlvls)
(60,1 << rpx)
(61,1)
(62,for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=\\n\\t\\t\\t  pi->xstep - (pi->x % pi->xstep)
(63,pi->picomp->vsamp)
(64,pi->prcno)
(65,pchg)
(66,xstep)
(67,pirlvl->prcheightexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(68,skip:)
(69,ystart)
(70,ystep)
(71,)
(72,pi->pirlvl->numprcs)
(73,pi->y = pi->ystart)
(74,numrlvls)
(75,pi->picomp)
(76,pi->rlvlno)
(77,pi)
(78,pi->x % (1 << rpx)
(79,pi)
(80,++pirlvl)
(81,)
(82,pi)
(83,pi->picomp)
(84,1)
(85,picomp->numrlvls - rlvlno - 1)
(86,r)
(87,picomp->numrlvls)
(88,pi)
(89,pi)
(90,lyrno)
(91,ystep)
(92,pi)
(93,rlvlno)
(94,pchg)
(95,hsamp)
(96,prcwidthexpn)
(97,pi->prcno)
(98,trx0)
(99,rpy = r + pi->pirlvl->prcheightexpn)
(100,prclyrnos)
(101,rlvlnoend)
(102,numrlvls)
(103,pi->xstart)
(104,pi)
(105,pi->x % pi->xstep)
(106,prgvolfirst)
(107,pi->y)
(108,ystep)
(109,pi->xstep = (!pi->xstep)
(110,prcno)
(111,pi->numlyrs)
(112,pi)
(113,rpx)
(114,pi)
(115,pirlvl)
(116,0)
(117,pi->rlvlno)
(118,compno)
(119,try0 << r)
(120,0)
(121,pi->picomp)
(122,JPC_CEILDIV(pi->x, pi->picomp->hsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(123,picomp = pi->picomps)
(124,hsamp)
(125,pi)
(126,xstep)
(127,0)
(128,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(129,pi->picomp->numrlvls - 1 - pi->rlvlno)
(130,)
(131,trx0)
(132,1 << (pirlvl->prcwidthexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(133,prgvolfirst)
(134,trx0)
(135,numlyrs)
(136,pi)
(137,pi->y +=\\n\\t\\t  pi->ystep - (pi->y % pi->ystep)
(138,pi->rlvlno)
(139,pi)
(140,pi->picomp->hsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(141,0)
(142,pi->x = pi->xstart)
(143,pi->pirlvl->prcheightexpn)
(144,pi->ystep)
(145,pi->pirlvl->prclyrnos)
(146,pi)
(147,pi->picomp)
(148,pi->rlvlno < pchg->rlvlnoend &&\\n\\t  pi->rlvlno < pi->maxrlvls)
(149,pi->ystep = 0)
(150,pi)
(151,numprcs)
(152,prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(153,pi->x)
(154,picomp->hsamp)
(155,)
(156,pirlvl = picomp->pirlvls)
(157,y)
(158,prchind)
(159,pi->numcomps)
(160,pi)
(161,pchg = pi->pchg)
(162,pi->ystep = (!pi->ystep)
(163,picomp->pirlvls)
(164,)
(165,try0)
(166,pi->x +=\\n\\t\\t\\t  pi->xstep - (pi->x % pi->xstep)
(167,0)
(168,numhprcs)
(169,pi)
(170,ystart)
(171,ystart)
(172,pi->y < pi->yend)
(173,register jpc_pi_t *pi)
(174,pi)
(175,rpy)
(176,pi->prcno < pi->pirlvl->numprcs)
(177,pi)
(178,xstart)
(179,1)
(180,(!pi->ystep)
(181,rpx)
(182,r)
(183,1)
(184,pi->rlvlno >= pi->picomp->numrlvls)
(185,pi)
(186,rlvlno)
(187,pi->pirlvl->numhprcs)
(188,(!pi->xstep)
(189,y)
(190,pi->y)
(191,JPC_FLOORDIVPOW2(trx0,\\n\\t\\t\\t\\t\\t\\t  pi->pirlvl->prcwidthexpn)
(192,pi)
(193,pi->pirlvl->prclyrnos[pi->prcno])
(194,ystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(195,1 << (pirlvl->prcheightexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(196,goto skip;)
(197,rpx = r + pi->pirlvl->prcwidthexpn)
(198,xstep)
(199,pi)
(200,compno)
(201,rlvlno)
(202,rlvlno)
(203,picomp)
(204,try0)
(205,r)
(206,rlvlno)
(207,xstep)
(208,y)
(209,!(pi->y % (1 << rpy)
(210,prcwidthexpn)
(211,rlvlno <\\n\\t\\t\\t  picomp->numrlvls)
(212,pi->xstep)
(213,0)
(214,1 << rpx)
(215,continue;)
(216,for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&\\n\\t  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno)
(217,&pi->picomps[pi->compno])
(218,pi)
(219,pirlvl)
(220,ystep)
(221,)
(222,pirlvls)
(223,picomp)
(224,pi->lyrno)
(225,prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(226,pi)
(227,pi->ystep)
(228,pirlvl)
(229,pi)
(230,x)
(231,if (pi->rlvlno >= pi->picomp->numrlvls)
(232,pi)
(233,prcheightexpn)
(234,pi->pirlvl->numprcs == 0)
(235,picomp)
(236,&pi->pirlvl->prclyrnos[pi->prcno])
(237,pi->xstep)
(238,pi->pirlvl)
(239,compno)
(240,pi->ystart)
(241,pchg->compnostart)
(242,pi->ystart)
(243,for (pi->compno = pchg->compnostart,\\n\\t\\t\\t\\t  pi->picomp = &pi->picomps[pi->compno];\\n\\t\\t\\t\\t  pi->compno < JAS_CAST(int, pchg->compnoend)
(244,compno)
(245,pi)
(246,pchg)
(247,pirlvl->prcwidthexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(248,pchg)
(249,pirlvl->prcheightexpn)
(250,pi->picomp->vsamp << r)
(251,pirlvl)
(252,compnoend)
(253,pi->ystep - (pi->y % pi->ystep)
(254,pi)
(255,pi->picomp)
(256,picomp)
(257,pi->x < pi->xend)
(258,picomp)
(259,pchg)
(260,compno)
(261,numrlvls)
(262,pi)
(263,pi)
(264,xend)
(265,pirlvl)
(266,rlvlno)
(267,xstep)
(268,y)
(269,JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r)
(270,pi->picomp->vsamp)
(271,pi->picomp->vsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(272,pchg->lyrnoend)
(273,pi->xstart)
(274,1)
(275,((pi->x == pi->xstart && ((trx0 << r)
(276,r)
(277,return 0;)
(278,*prclyrno)
(279,pi->rlvlno < pi->maxrlvls)
(280,prcvind)
(281,prclyrno)
(282,lyrno)
(283,xstart)
(284,pi)
(285,)
(286,pi->pirlvl)
(287,pi)
(288,JAS_CAST(int, pchg->compnoend)
(289,compno = 0)
(290,++rlvlno)
(291,prchind)
(292,prclyrno)
(293,pi)
(294,r)
(295,pi)
(296,trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r)
(297,pi->compno < JAS_CAST(int, pchg->compnoend)
(298,pi->picomp = &pi->picomps[pi->compno])
(299,pi->maxrlvls)
(300,pi->x)
(301,compno)
(302,1)
(303,pi)
(304,JPC_FLOORDIVPOW2(try0,\\n\\t\\t\\t\\t\\t\\t  pi->pirlvl->prcheightexpn)
(305,xstep)
(306,pi->compno)
(307,pi->prcno)
(308,picomp)
(309,pi->x)
(310,pirlvl)
(311,prclyrno)
(312,pi)
(313,pi->pirlvl->prcwidthexpn)
(314,pi->pirlvl)
(315,pchg)
(316,1)
(317,x)
(318,pi)
(319,pi->compno)
(320,1)
(321,rpx)
(322,r + pi->pirlvl->prcwidthexpn)
(323,)
(324,!pi->xstep)
(325,pi->compno = pchg->compnostart)
(326,pirlvl)
(327,lyrno)
(328,pi->pirlvl->prcheightexpn)
(329,ystep)
(330,pi->picomp)
(331,vsamp)
(332,rpy)
(333,rlvlno)
(334,pirlvl)
(335,ystep)
(336,lyrno)
(337,pi->prgvolfirst)
(338,pi)
(339,pirlvl)
(340,pchg)
(341,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(342,compno < pi->numcomps)
(343,pi->y)
(344,rlvlno = 0)
(345,pi->prgvolfirst)
(346,picomp)
(347,pi->y == pi->ystart)
(348,numrlvls)
(349,pi->y % pi->ystep)
(350,1)
(351,pi->y)
(352,r)
(353,++picomp)
(354,rpy)
(355,++(*prclyrno)
(356,pi)
(357,pi->xstep)
(358,pi->rlvlno)
(359,numprcs)
(360,pi)
(361,rlvlno - 1)
(362,pi->picomps[pi->compno])
(363,pi)
(364,pirlvl->prcwidthexpn)
(365,pi->xstart)
(366,pi->rlvlno)
(367,pi)
(368,pi)
(369,pi)
(370,pi->lyrno)
(371,pi)
(372,!pi->ystep)
(373,*prclyrno)
(374,JPC_CEILDIV(pi->y, pi->picomp->vsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(375,r = pi->picomp->numrlvls - 1 - pi->rlvlno)
(376,pchg->rlvlnoend)
(377,pi->x == pi->xstart)
(378,pirlvl)
(379,pi->lyrno < JAS_CAST(int, pchg->lyrnoend)
(380,pi->x)
(381,1)
(382,pi)
(383,ystep)
(384,pi->xstep)
(385,pi->picomp->hsamp)
(386,try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r)
(387,pi)
(388,rpy)
(389,)
(390,pi)
(391,)
(392,picomp->vsamp * (1 << (pirlvl->prcheightexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(393,xstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(394,)
(395,pi)
(396,y)
(397,rlvlno)
(398,JAS_MIN(pi->xstep, xstep)
(399,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(400,pi->x)
(401,picomp)
(402,for (pi->lyrno = 0; pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend)
(403,numrlvls)
(404,pirlvl)
(405,pi->rlvlno)
(406,pi->ystep)
(407,pchg->compnoend)
(408,pi->xend)
(409,pi->x == pi->xstart && ((trx0 << r)
(410,pi->rlvlno < pchg->rlvlnoend)
(411,pi)
(412,prcvind * pi->pirlvl->numhprcs + prchind)
(413,pi->picomp->hsamp)
(414,(pi->y == pi->ystart && ((try0 << r)
(415,rlvlnostart)
(416,JAS_MIN(pi->ystep, ystep)
(417,ystep)
(418,pi)
(419,rlvlno)
(420,pi)
(421,compno)
(422,pi)
(423,prcno)
(424,xstart)
(425,pi->y)
(426,if (pi->lyrno >= *prclyrno)
(427,pi->picomp)
(428,pi)
(429,pi)
(430,picomp)
(431,++compno)
(432,picomp->vsamp)
(433,maxrlvls)
(434,picomp)
(435,pi->lyrno >= *prclyrno)
(436,pi->pirlvl)
(437,prcheightexpn)
(438,&pi->picomp->pirlvls[pi->rlvlno])
(439,pi->pirlvl)
(440,0)
(441,pi->picomp->numrlvls)
(442,prclyrno)
(443,numcomps)
(444,pi->picomp->pirlvls[pi->rlvlno])
(445,r + pi->pirlvl->prcheightexpn)
(446,pi->pirlvl->prcwidthexpn)
(447,pi)
(448,rlvlno)
(449,pi->picomp)
(450,try0)
(451,JAS_CAST(int, pchg->lyrnoend)
(452,vsamp)
(453,)
(454,trx0 << r)
(455,pi)
(456,pi->xstep - (pi->x % pi->xstep)
(457,1 << rpy)
(458,prcheightexpn)
(459,yend)
(460,prcno)
(461,x)
(462,for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=\\n\\t\\t  pi->ystep - (pi->y % pi->ystep)
(463,ystep)
(464,pi->pirlvl->prcwidthexpn)
(465,pi->ystep)
(466,(trx0 << r)
(467,compnostart)
(468,(pi->x == pi->xstart && ((trx0 << r)
(469,prcvind * pi->pirlvl->numhprcs)
(470,prcvind)
(471,pi->xstep = 0)
(472,pi)
(473,picomp)
(474,pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend)
(475,pi->picomp->hsamp << r)
(476,pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno])
(477,x)
(478,pi)
(479,lyrno)
(480,)
(481,pi)
(482,pi)
(483,pi->compno <\\n\\t\\t\\t\\t  pi->numcomps)
(484,)
(485,pi)
(486,pi)
(487,vsamp)
(488,continue;)
(489,x)
(490,return 1;)
(491,ystep)
(492,pchg)
(493,)
(494,1 << rpy)
(495,pirlvl)
(496,pi->x)
(497,picomp->hsamp * (1 << (pirlvl->prcwidthexpn +\\n\\t\\t\\t\\t  picomp->numrlvls - rlvlno - 1)
(498,r)
(499,)
(500,!(pi->x % (1 << rpx)
(501,y)
(502,)
(503,hsamp)
(504,for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\\n\\t\\t  ++compno, ++picomp)
(505,pi->yend)
(506,pi->picomps)
(507,prcvind)
(508,rlvlno)
(509,pi->y)
(510,r)
(511,picomps)
(512,pi)
(513,pi)
(514,r)
(515,compno)
(516,pi->ystart)
(517,pi->rlvlno)
(518,pi)
(519,if (!pi->prgvolfirst)
(520,picomps)
(521,r)
(522,rlvlno)
(523,picomp->numrlvls - rlvlno - 1)
(524,picomp->numrlvls)
(525,pi->y % (1 << rpy)
(526,pi->y == pi->ystart && ((try0 << r)
(527,pi->picomps)
(528,prclyrno = &pi->pirlvl->prclyrnos[pi->prcno])
(529,rlvlno)
(530,picomp)
(531,pi->picomp->pirlvls)
(532,pirlvl)
(533,pi)
(534,y)
(535,pi)
(536,pi)
(537,RET)
(538,pi->pirlvl)
(539,numcomps)
(540,JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r)
(541,pi->compno)
(542,x)
(543,++pi->compno)
(544,if (((pi->x == pi->xstart && ((trx0 << r)
(545,pi->compno)
(546,compno)
(547,pi->lyrno = 0)
(548,pi->ystep)
(549,try0)
(550,xstep)
(551,xstep)
(552,)
(553,pi->pirlvl->numprcs)
(554,!pi->prgvolfirst)
(555,pi)
(556,pi->compno < JAS_CAST(int, pchg->compnoend)
(557,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\\n\\t\\t\\t\\t\\t\\t  << r)
(558,picomp)
(559,pi->pchg)
(560,pi->xstep)
(561,pi->numcomps)
(562,pi->prgvolfirst = 0)
(563,pi->compno)
(564,pi->picomp->numrlvls)
(565,pi->lyrno)
(566,pi->pirlvl)
(567,pirlvl)
(568,++pi->rlvlno)
(569,pi->pirlvl->prcheightexpn)
(570,)
-----cfg-----
(128,126)
(133,152)
(135,133)
(7,18)
(140,152)
(142,140)
(15,24)
(16,15)
(18,16)
(146,152)
(148,146)
(21,29)
(21,104)
(22,21)
(152,158)
(152,169)
(24,22)
(26,33)
(155,163)
(27,26)
(156,155)
(29,27)
(30,38)
(158,156)
(31,30)
(160,164)
(161,160)
(33,31)
(35,43)
(163,161)
(164,171)
(36,35)
(166,18)
(38,36)
(167,166)
(40,48)
(169,167)
(41,40)
(43,41)
(45,53)
(46,45)
(48,46)
(50,59)
(51,50)
(53,51)
(56,68)
(56,82)
(57,63)
(59,57)
(60,56)
(61,60)
(63,61)
(65,104)
(66,72)
(68,66)
(69,65)
(70,75)
(72,70)
(73,69)
(75,73)
(79,91)
(79,98)
(80,86)
(82,80)
(83,79)
(84,83)
(86,84)
(88,104)
(89,95)
(91,89)
(92,88)
(93,92)
(95,93)
(98,171)
(100,108)
(102,100)
(104,102)
(106,114)
(106,121)
(106,128)
(106,135)
(106,142)
(106,148)
(108,106)
(112,152)
(114,112)
(119,152)
(121,119)
(126,152)
-----path-----
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,68,66,72,70,75,73,69,65,104,102,100,108,106,114,112,152,158,156,155,163
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,68,66,72,70,75,73,69,65,104,102,100,108,106,121,119,152,158,156,155,163
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,68,66,72,70,75,73,69,65,104,102,100,108,106,128,126,152,158,156,155,163
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,68,66,72,70,75,73,69,65,104,102,100,108,106,135,133,152,158,156,155,163
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,68,66,72,70,75,73,69,65,104,102,100,108,106,142,140,152,158,156,155,163
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,68,66,72,70,75,73,69,65,104,102,100,108,106,148,146,152,158,156,155,163
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,82,80,86,84,83,79,91,89,95,93,92,88,104,102,100,108,106,114,112,152
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,82,80,86,84,83,79,91,89,95,93,92,88,104,102,100,108,106,121,119,152
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,82,80,86,84,83,79,91,89,95,93,92,88,104,102,100,108,106,128,126,152
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,82,80,86,84,83,79,91,89,95,93,92,88,104,102,100,108,106,135,133,152
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,82,80,86,84,83,79,91,89,95,93,92,88,104,102,100,108,106,142,140,152
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,82,80,86,84,83,79,91,89,95,93,92,88,104,102,100,108,106,148,146,152
7,18,16,15,24,22,21,29,27,26,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,59,57,63,61,60,56,82,80,86,84,83,79,98,171
7,18,16,15,24,22,21,104,102,100,108,106,114,112,152,158,156,155,163,161,160,164,171
7,18,16,15,24,22,21,104,102,100,108,106,121,119,152,158,156,155,163,161,160,164,171
7,18,16,15,24,22,21,104,102,100,108,106,128,126,152,158,156,155,163,161,160,164,171
7,18,16,15,24,22,21,104,102,100,108,106,135,133,152,158,156,155,163,161,160,164,171
7,18,16,15,24,22,21,104,102,100,108,106,142,140,152,158,156,155,163,161,160,164,171
7,18,16,15,24,22,21,104,102,100,108,106,148,146,152,158,156,155,163,161,160,164,171
-----cfgNode-----
5,<global>
6,<empty>
7,int jpc_pi_next (jpc_pi_t *pi)
8,jpc_pi_t *pi
9,<empty>
10,jpc_pchg_t* pchg
11,int ret
12,for (;;)
13,<empty>
14,<empty>
15,pi->valid = false
16,pi->valid
17,pi
18,valid
19,false
20,if (!pi->pchg)
21,!pi->pchg
22,pi->pchg
23,pi
24,pchg
25,<empty>
26,++pi->pchgno
27,pi->pchgno
28,pi
29,pchgno
30,pi->compno = 0
31,pi->compno
32,pi
33,compno
34,0
35,pi->rlvlno = 0
36,pi->rlvlno
37,pi
38,rlvlno
39,0
40,pi->prcno = 0
41,pi->prcno
42,pi
43,prcno
44,0
45,pi->lyrno = 0
46,pi->lyrno
47,pi
48,lyrno
49,0
50,pi->prgvolfirst = true
51,pi->prgvolfirst
52,pi
53,prgvolfirst
54,true
55,if (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist))
56,pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)
57,pi->pchgno
58,pi
59,pchgno
60,jpc_pchglist_numpchgs(pi->pchglist)
61,pi->pchglist
62,pi
63,pchglist
64,<empty>
65,pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno)
66,pi->pchg
67,pi
68,pchg
69,jpc_pchglist_get(pi->pchglist, pi->pchgno)
70,pi->pchglist
71,pi
72,pchglist
73,pi->pchgno
74,pi
75,pchgno
76,else
77,<empty>
78,if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist))
79,pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)
80,pi->pchgno
81,pi
82,pchgno
83,jpc_pchglist_numpchgs(pi->pchglist)
84,pi->pchglist
85,pi
86,pchglist
87,<empty>
88,pi->pchg = &pi->defaultpchg
89,pi->pchg
90,pi
91,pchg
92,&pi->defaultpchg
93,pi->defaultpchg
94,pi
95,defaultpchg
96,else
97,<empty>
98,return 1;
99,1
100,pchg = pi->pchg
101,pchg
102,pi->pchg
103,pi
104,pchg
105,switch(pchg->prgord)
106,pchg->prgord
107,pchg
108,prgord
109,<empty>
110,case JPC_COD_LRCPPRG:
111,JPC_COD_LRCPPRG
112,ret = jpc_pi_nextlrcp(pi)
113,ret
114,jpc_pi_nextlrcp(pi)
115,pi
116,break;
117,case JPC_COD_RLCPPRG:
118,JPC_COD_RLCPPRG
119,ret = jpc_pi_nextrlcp(pi)
120,ret
121,jpc_pi_nextrlcp(pi)
122,pi
123,break;
124,case JPC_COD_RPCLPRG:
125,JPC_COD_RPCLPRG
126,ret = jpc_pi_nextrpcl(pi)
127,ret
128,jpc_pi_nextrpcl(pi)
129,pi
130,break;
131,case JPC_COD_PCRLPRG:
132,JPC_COD_PCRLPRG
133,ret = jpc_pi_nextpcrl(pi)
134,ret
135,jpc_pi_nextpcrl(pi)
136,pi
137,break;
138,case JPC_COD_CPRLPRG:
139,JPC_COD_CPRLPRG
140,ret = jpc_pi_nextcprl(pi)
141,ret
142,jpc_pi_nextcprl(pi)
143,pi
144,break;
145,default:
146,ret = -1
147,ret
148,-1
149,1
150,break;
151,if (!ret)
152,!ret
153,ret
154,<empty>
155,pi->valid = true
156,pi->valid
157,pi
158,valid
159,true
160,++pi->pktno
161,pi->pktno
162,pi
163,pktno
164,return 0;
165,0
166,pi->pchg = 0
167,pi->pchg
168,pi
169,pchg
170,0
171,RET
172,jpc_pi_t *pi
173,RET
174,int jpc_pi_next (jpc_pi_t *pi)
175,jpc_pi_t *pi
176,<empty>
177,jpc_pchg_t* pchg
178,int ret
179,for (;;)
180,<empty>
181,<empty>
182,pi->valid = false
183,pi->valid
184,pi
185,valid
186,false
187,if (!pi->pchg)
188,!pi->pchg
189,pi->pchg
190,pi
191,pchg
192,<empty>
193,++pi->pchgno
194,pi->pchgno
195,pi
196,pchgno
197,pi->compno = 0
198,pi->compno
199,pi
200,compno
201,0
202,pi->rlvlno = 0
203,pi->rlvlno
204,pi
205,rlvlno
206,0
207,pi->prcno = 0
208,pi->prcno
209,pi
210,prcno
211,0
212,pi->lyrno = 0
213,pi->lyrno
214,pi
215,lyrno
216,0
217,pi->prgvolfirst = true
218,pi->prgvolfirst
219,pi
220,prgvolfirst
221,true
222,if (pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist))
223,pi->pchgno < jpc_pchglist_numpchgs(pi->pchglist)
224,pi->pchgno
225,pi
226,pchgno
227,jpc_pchglist_numpchgs(pi->pchglist)
228,pi->pchglist
229,pi
230,pchglist
231,<empty>
232,pi->pchg = jpc_pchglist_get(pi->pchglist, pi->pchgno)
233,pi->pchg
234,pi
235,pchg
236,jpc_pchglist_get(pi->pchglist, pi->pchgno)
237,pi->pchglist
238,pi
239,pchglist
240,pi->pchgno
241,pi
242,pchgno
243,else
244,<empty>
245,if (pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist))
246,pi->pchgno == jpc_pchglist_numpchgs(pi->pchglist)
247,pi->pchgno
248,pi
249,pchgno
250,jpc_pchglist_numpchgs(pi->pchglist)
251,pi->pchglist
252,pi
253,pchglist
254,<empty>
255,pi->pchg = &pi->defaultpchg
256,pi->pchg
257,pi
258,pchg
259,&pi->defaultpchg
260,pi->defaultpchg
261,pi
262,defaultpchg
263,else
264,<empty>
265,return 1;
266,1
267,pchg = pi->pchg
268,pchg
269,pi->pchg
270,pi
271,pchg
272,switch(pchg->prgord)
273,pchg->prgord
274,pchg
275,prgord
276,<empty>
277,case JPC_COD_LRCPPRG:
278,JPC_COD_LRCPPRG
279,ret = jpc_pi_nextlrcp(pi)
280,ret
281,jpc_pi_nextlrcp(pi)
282,pi
283,break;
284,case JPC_COD_RLCPPRG:
285,JPC_COD_RLCPPRG
286,ret = jpc_pi_nextrlcp(pi)
287,ret
288,jpc_pi_nextrlcp(pi)
289,pi
290,break;
291,case JPC_COD_RPCLPRG:
292,JPC_COD_RPCLPRG
293,ret = jpc_pi_nextrpcl(pi)
294,ret
295,jpc_pi_nextrpcl(pi)
296,pi
297,break;
298,case JPC_COD_PCRLPRG:
299,JPC_COD_PCRLPRG
300,ret = jpc_pi_nextpcrl(pi)
301,ret
302,jpc_pi_nextpcrl(pi)
303,pi
304,break;
305,case JPC_COD_CPRLPRG:
306,JPC_COD_CPRLPRG
307,ret = jpc_pi_nextcprl(pi)
308,ret
309,jpc_pi_nextcprl(pi)
310,pi
311,break;
312,default:
313,ret = -1
314,ret
315,-1
316,1
317,break;
318,if (!ret)
319,!ret
320,ret
321,<empty>
322,pi->valid = true
323,pi->valid
324,pi
325,valid
326,true
327,++pi->pktno
328,pi->pktno
329,pi
330,pktno
331,return 0;
332,0
333,pi->pchg = 0
334,pi->pchg
335,pi
336,pchg
337,0
338,RET
339,jpc_pi_t *pi
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
int jpc_pi_next(jpc_pi_t *pi) {
jpc_pchg_t *pchg;
int ret;
pi->valid = false;
pchg = pi->pchg;
switch(pchg->prgord)
ret = jpc_pi_nextlrcp(pi);
pi->pchg = 0;
pi->valid = false;
if(!pi->pchg)
++pi->pchgno;
pi->compno = 0;
pi->rlvlno = 0;
pi->prcno = 0;
pi->lyrno = 0;
pi->prgvolfirst = true;
return 1;
=======================
