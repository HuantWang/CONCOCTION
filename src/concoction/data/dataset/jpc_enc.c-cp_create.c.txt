-----label-----
0
-----code-----
static jpc_enc_cp_t *cp_create(char *optstr, jas_image_t *image)
{
	jpc_enc_cp_t *cp;
	jas_tvparser_t *tvp;
	int ret;
	int numilyrrates;
	double *ilyrrates;
	int i;
	int tagid;
	jpc_enc_tcp_t *tcp;
	jpc_enc_tccp_t *tccp;
	jpc_enc_ccp_t *ccp;
	int cmptno;
	uint_fast16_t rlvlno;
	uint_fast16_t prcwidthexpn;
	uint_fast16_t prcheightexpn;
	bool enablemct;
	uint_fast32_t jp2overhead;
	uint_fast16_t lyrno;
	uint_fast32_t hsteplcm;
	uint_fast32_t vsteplcm;
	bool mctvalid;

	tvp = 0;
	cp = 0;
	ilyrrates = 0;
	numilyrrates = 0;

	if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))) {
		goto error;
	}

	prcwidthexpn = 15;
	prcheightexpn = 15;
	enablemct = true;
	jp2overhead = 0;

	cp->ccps = 0;
	cp->debug = 0;
	cp->imgareatlx = UINT_FAST32_MAX;
	cp->imgareatly = UINT_FAST32_MAX;
	cp->refgrdwidth = 0;
	cp->refgrdheight = 0;
	cp->tilegrdoffx = UINT_FAST32_MAX;
	cp->tilegrdoffy = UINT_FAST32_MAX;
	cp->tilewidth = 0;
	cp->tileheight = 0;
	cp->numcmpts = jas_image_numcmpts(image);

	hsteplcm = 1;
	vsteplcm = 1;
	for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {
		if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=
		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +
		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {
			jas_eprintf("unsupported image type\n");
			goto error;
		}
		/* Note: We ought to be calculating the LCMs here.  Fix some day. */
		hsteplcm *= jas_image_cmpthstep(image, cmptno);
		vsteplcm *= jas_image_cmptvstep(image, cmptno);
	}

	if (!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)))) {
		goto error;
	}
	for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts); ++cmptno,
	  ++ccp) {
		ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);
		ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);
		/* XXX - this isn't quite correct for more general image */
		ccp->sampgrdsubstepx = 0;
		ccp->sampgrdsubstepx = 0;
		ccp->prec = jas_image_cmptprec(image, cmptno);
		ccp->sgnd = jas_image_cmptsgnd(image, cmptno);
		ccp->numstepsizes = 0;
		memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));
	}

	cp->rawsize = jas_image_rawsize(image);
	cp->totalsize = UINT_FAST32_MAX;

	tcp = &cp->tcp;
	tcp->csty = 0;
	tcp->intmode = true;
	tcp->prg = JPC_COD_LRCPPRG;
	tcp->numlyrs = 1;
	tcp->ilyrrates = 0;

	tccp = &cp->tccp;
	tccp->csty = 0;
	tccp->maxrlvls = 6;
	tccp->cblkwidthexpn = 6;
	tccp->cblkheightexpn = 6;
	tccp->cblksty = 0;
	tccp->numgbits = 2;

	if (!(tvp = jas_tvparser_create(optstr ? optstr : ""))) {
		goto error;
	}

	while (!(ret = jas_tvparser_next(tvp))) {
		switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,
		  jas_tvparser_gettag(tvp)))->id) {
		case OPT_DEBUG:
			cp->debug = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_IMGAREAOFFX:
			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_IMGAREAOFFY:
			cp->imgareatly = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_TILEGRDOFFX:
			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_TILEGRDOFFY:
			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_TILEWIDTH:
			cp->tilewidth = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_TILEHEIGHT:
			cp->tileheight = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_PRCWIDTH:
			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
			break;
		case OPT_PRCHEIGHT:
			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
			break;
		case OPT_CBLKWIDTH:
			tccp->cblkwidthexpn =
			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
			break;
		case OPT_CBLKHEIGHT:
			tccp->cblkheightexpn =
			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
			break;
		case OPT_MODE:
			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,
			  jas_tvparser_getval(tvp)))->id) < 0) {
				jas_eprintf("ignoring invalid mode %s\n",
				  jas_tvparser_getval(tvp));
			} else {
				tcp->intmode = (tagid == MODE_INT);
			}
			break;
		case OPT_PRG:
			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
			  jas_tvparser_getval(tvp)))->id) < 0) {
				jas_eprintf("ignoring invalid progression order %s\n",
				  jas_tvparser_getval(tvp));
			} else {
				tcp->prg = tagid;
			}
			break;
		case OPT_NOMCT:
			enablemct = false;
			break;
		case OPT_MAXRLVLS:
			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_SOP:
			cp->tcp.csty |= JPC_COD_SOP;
			break;
		case OPT_EPH:
			cp->tcp.csty |= JPC_COD_EPH;
			break;
		case OPT_LAZY:
			tccp->cblksty |= JPC_COX_LAZY;
			break;
		case OPT_TERMALL:
			tccp->cblksty |= JPC_COX_TERMALL;
			break;
		case OPT_SEGSYM:
			tccp->cblksty |= JPC_COX_SEGSYM;
			break;
		case OPT_VCAUSAL:
			tccp->cblksty |= JPC_COX_VSC;
			break;
		case OPT_RESET:
			tccp->cblksty |= JPC_COX_RESET;
			break;
		case OPT_PTERM:
			tccp->cblksty |= JPC_COX_PTERM;
			break;
		case OPT_NUMGBITS:
			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));
			break;
		case OPT_RATE:
			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,
			  &cp->totalsize)) {
				jas_eprintf("ignoring bad rate specifier %s\n",
				  jas_tvparser_getval(tvp));
			}
			break;
		case OPT_ILYRRATES:
			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,
			  &ilyrrates)) {
				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",
				  jas_tvparser_getval(tvp));
			}
			break;

		case OPT_JP2OVERHEAD:
			jp2overhead = atoi(jas_tvparser_getval(tvp));
			break;
		default:
			jas_eprintf("warning: ignoring invalid option %s\n",
			 jas_tvparser_gettag(tvp));
			break;
		}
	}

	jas_tvparser_destroy(tvp);
	tvp = 0;

	if (cp->totalsize != UINT_FAST32_MAX) {
		cp->totalsize = (cp->totalsize > jp2overhead) ?
		  (cp->totalsize - jp2overhead) : 0;
	}

	if (cp->imgareatlx == UINT_FAST32_MAX) {
		cp->imgareatlx = 0;
	} else {
		if (hsteplcm != 1) {
			jas_eprintf("warning: overriding imgareatlx value\n");
		}
		cp->imgareatlx *= hsteplcm;
	}
	if (cp->imgareatly == UINT_FAST32_MAX) {
		cp->imgareatly = 0;
	} else {
		if (vsteplcm != 1) {
			jas_eprintf("warning: overriding imgareatly value\n");
		}
		cp->imgareatly *= vsteplcm;
	}
	cp->refgrdwidth = cp->imgareatlx + jas_image_width(image);
	cp->refgrdheight = cp->imgareatly + jas_image_height(image);
	if (cp->tilegrdoffx == UINT_FAST32_MAX) {
		cp->tilegrdoffx = cp->imgareatlx;
	}
	if (cp->tilegrdoffy == UINT_FAST32_MAX) {
		cp->tilegrdoffy = cp->imgareatly;
	}
	if (!cp->tilewidth) {
		cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;
	}
	if (!cp->tileheight) {
		cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;
	}

	if (cp->numcmpts == 3) {
		mctvalid = true;
		for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {
			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||
			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||
			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||
			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {
				mctvalid = false;
			}
		}
	} else {
		mctvalid = false;
	}
	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB) {
		jas_eprintf("warning: color space apparently not RGB\n");
	}
	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB) {
		tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);
	} else {
		tcp->mctid = JPC_MCT_NONE;
	}
	tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS);

	for (rlvlno = 0; rlvlno < tccp->maxrlvls; ++rlvlno) {
		tccp->prcwidthexpns[rlvlno] = prcwidthexpn;
		tccp->prcheightexpns[rlvlno] = prcheightexpn;
	}
	if (prcwidthexpn != 15 || prcheightexpn != 15) {
		tccp->csty |= JPC_COX_PRT;
	}

	/* Ensure that the tile width and height is valid. */
	if (!cp->tilewidth) {
		jas_eprintf("invalid tile width %lu\n", (unsigned long)
		  cp->tilewidth);
		goto error;
	}
	if (!cp->tileheight) {
		jas_eprintf("invalid tile height %lu\n", (unsigned long)
		  cp->tileheight);
		goto error;
	}

	/* Ensure that the tile grid offset is valid. */
	if (cp->tilegrdoffx > cp->imgareatlx ||
	  cp->tilegrdoffy > cp->imgareatly ||
	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||
	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly) {
		jas_eprintf("invalid tile grid offset (%lu, %lu)\n",
		  (unsigned long) cp->tilegrdoffx, (unsigned long)
		  cp->tilegrdoffy);
		goto error;
	}

	cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,
	  cp->tilewidth);
	cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,
	  cp->tileheight);
	cp->numtiles = cp->numhtiles * cp->numvtiles;

	if (ilyrrates && numilyrrates > 0) {
		tcp->numlyrs = numilyrrates + 1;
		if (!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *
		  sizeof(jpc_fix_t)))) {
			goto error;
		}
		for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1); ++i) {
			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);
		}
	}

	/* Ensure that the integer mode is used in the case of lossless
	  coding. */
	if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)) {
		jas_eprintf("cannot use real mode for lossless coding\n");
		goto error;
	}

	/* Ensure that the precinct width is valid. */
	if (prcwidthexpn > 15) {
		jas_eprintf("invalid precinct width\n");
		goto error;
	}

	/* Ensure that the precinct height is valid. */
	if (prcheightexpn > 15) {
		jas_eprintf("invalid precinct height\n");
		goto error;
	}

	/* Ensure that the code block width is valid. */
	if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12) {
		jas_eprintf("invalid code block width %d\n",
		  JPC_POW2(cp->tccp.cblkwidthexpn));
		goto error;
	}

	/* Ensure that the code block height is valid. */
	if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12) {
		jas_eprintf("invalid code block height %d\n",
		  JPC_POW2(cp->tccp.cblkheightexpn));
		goto error;
	}

	/* Ensure that the code block size is not too large. */
	if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12) {
		jas_eprintf("code block size too large\n");
		goto error;
	}

	/* Ensure that the number of layers is valid. */
	if (cp->tcp.numlyrs > 16384) {
		jas_eprintf("too many layers\n");
		goto error;
	}

	/* There must be at least one resolution level. */
	if (cp->tccp.maxrlvls < 1) {
		jas_eprintf("must be at least one resolution level\n");
		goto error;
	}

	/* Ensure that the number of guard bits is valid. */
	if (cp->tccp.numgbits > 8) {
		jas_eprintf("invalid number of guard bits\n");
		goto error;
	}

	/* Ensure that the rate is within the legal range. */
	if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize) {
		jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);
	}

	/* Ensure that the intermediate layer rates are valid. */
	if (tcp->numlyrs > 1) {
		/* The intermediate layers rates must increase monotonically. */
		for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {
			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {
				jas_eprintf("intermediate layer rates must increase monotonically\n");
				goto error;
			}
		}
		/* The intermediate layer rates must be less than the overall rate. */
		if (cp->totalsize != UINT_FAST32_MAX) {
			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {
				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)
				  / cp->rawsize) {
					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");
					goto error;
				}
			}
		}
	}

	if (ilyrrates) {
		jas_free(ilyrrates);
	}

	return cp;

error:

	if (ilyrrates) {
		jas_free(ilyrrates);
	}
	if (tvp) {
		jas_tvparser_destroy(tvp);
	}
	if (cp) {
		jpc_enc_cp_destroy(cp);
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
9,11
12,13
12,14
13,14
15,16
15,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
18,29
18,30
18,31
18,32
18,33
18,34
18,35
18,36
18,37
18,38
18,39
18,40
18,41
18,42
18,43
18,44
18,45
18,46
18,47
18,48
18,49
18,50
18,51
18,52
18,53
18,54
18,55
18,56
18,57
18,58
18,59
18,60
18,61
18,62
18,63
18,64
18,65
18,66
18,67
18,68
18,69
18,70
18,71
18,72
18,73
18,74
18,75
18,76
18,77
18,78
18,79
18,80
18,81
18,82
18,83
18,84
18,85
18,86
18,87
18,88
18,89
18,90
18,91
18,92
18,93
18,94
18,95
18,96
18,97
18,98
18,99
18,100
18,101
18,102
18,103
18,104
18,105
18,106
18,107
18,108
18,109
18,110
18,111
18,112
18,113
18,114
18,115
18,116
18,117
18,118
18,119
18,120
18,121
18,122
18,123
18,124
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
28,29
30,31
30,32
33,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
43,44
44,45
44,46
46,47
46,48
49,50
50,51
50,52
52,53
54,55
55,56
55,57
57,58
59,60
60,61
60,62
61,62
63,64
63,65
66,67
67,68
67,69
68,69
70,71
70,72
73,74
74,75
74,76
75,76
77,78
77,79
80,81
81,82
81,83
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
106,107
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
130,131
132,133
133,134
133,135
135,136
137,138
138,139
138,140
139,140
142,143
143,144
143,145
144,145
147,148
148,149
148,150
149,150
152,153
153,154
153,155
154,155
157,158
157,159
158,159
159,160
160,161
160,162
161,162
163,164
163,165
164,165
166,167
167,168
167,169
168,169
171,172
172,173
174,175
175,176
175,177
176,177
179,180
180,181
180,182
181,182
184,185
185,186
185,187
186,187
189,190
190,191
190,192
191,192
194,195
195,196
195,197
196,197
196,198
197,198
201,202
202,203
202,204
203,204
203,205
204,205
208,209
209,210
209,211
210,211
210,212
211,212
214,215
216,217
217,218
217,219
218,219
218,220
219,220
222,223
224,225
225,226
225,227
226,227
226,228
227,228
231,232
232,233
232,234
233,234
233,235
234,235
238,239
239,240
239,241
240,241
240,242
241,242
244,245
246,247
247,248
247,249
248,249
248,250
249,250
252,253
254,255
255,256
255,257
256,257
256,258
257,258
261,262
262,263
262,264
263,264
263,265
264,265
268,269
269,270
269,271
270,271
270,272
271,272
274,275
274,276
275,276
277,278
279,280
280,281
280,282
281,282
284,285
285,286
285,287
286,287
289,290
289,291
289,292
289,293
290,291
291,292
291,293
292,293
295,296
295,297
296,297
298,299
298,300
299,300
301,302
303,304
304,305
306,307
306,308
306,309
307,308
307,309
308,309
308,310
309,310
309,311
310,311
310,312
311,312
311,313
311,314
312,313
314,315
316,317
318,319
318,320
318,321
319,320
321,322
323,324
325,326
325,327
326,327
328,329
330,331
330,332
331,332
331,333
332,333
332,334
332,335
333,334
335,336
337,338
339,340
339,341
339,342
340,341
342,343
344,345
346,347
346,348
347,348
349,350
351,352
351,353
352,353
353,354
353,355
354,355
357,358
359,360
360,361
360,362
361,362
363,364
363,365
363,366
364,365
366,367
368,369
370,371
371,372
371,373
372,373
374,375
374,376
374,377
375,376
377,378
379,380
381,382
381,383
382,383
383,384
384,385
384,386
385,386
385,387
386,387
389,390
389,391
390,391
392,393
392,394
393,394
393,395
394,395
397,398
398,399
398,400
399,400
402,403
403,404
405,406
406,407
407,408
407,409
408,409
409,410
411,412
412,413
414,415
415,416
416,417
417,418
417,419
418,419
418,420
419,420
422,423
422,424
423,424
425,426
427,428
428,429
428,430
429,430
429,431
430,431
433,434
435,436
436,437
436,438
437,438
439,440
440,441
440,442
441,442
444,445
445,446
445,447
446,447
446,448
447,448
451,452
452,453
452,454
453,454
453,455
454,455
458,459
459,460
459,461
460,461
460,462
461,462
464,465
466,467
467,468
467,469
468,469
468,470
469,470
473,474
474,475
474,476
475,476
475,477
476,477
480,481
481,482
481,483
482,483
484,485
485,486
485,487
486,487
489,490
490,491
490,492
491,492
491,493
492,493
496,497
497,498
497,499
498,499
498,500
499,500
503,504
504,505
504,506
505,506
505,507
506,507
510,511
511,512
511,513
512,513
512,514
513,514
517,518
518,519
518,520
519,520
519,521
520,521
524,525
525,526
525,527
526,527
526,528
527,528
531,532
531,533
532,533
533,534
534,535
534,536
535,536
537,538
537,539
538,539
540,541
540,542
540,543
541,542
543,544
546,547
547,548
549,550
549,551
550,551
551,552
552,553
552,554
553,554
555,556
555,557
556,557
558,559
560,561
561,562
561,563
562,563
562,564
563,564
563,565
564,565
566,567
566,568
566,569
567,568
569,570
571,572
571,573
572,573
574,575
577,578
577,579
577,580
577,581
577,582
577,583
577,584
577,585
577,586
577,587
577,588
577,589
577,590
577,591
577,592
577,593
577,594
577,595
577,596
577,597
577,598
577,599
577,600
577,601
577,602
577,603
577,604
577,605
577,606
577,607
577,608
577,609
577,610
577,611
577,612
577,613
577,614
577,615
577,616
577,617
577,618
577,619
577,620
577,621
577,622
577,623
577,624
577,625
577,626
577,627
577,628
577,629
577,630
577,631
577,632
577,633
577,634
577,635
577,636
577,637
577,638
577,639
577,640
577,641
577,642
577,643
577,644
577,645
577,646
577,647
577,648
577,649
577,650
577,651
577,652
577,653
577,654
577,655
577,656
577,657
577,658
577,659
577,660
577,661
578,579
579,580
581,582
582,583
582,584
583,584
583,585
584,585
587,588
587,589
588,589
590,591
590,592
591,592
593,594
596,597
597,598
599,600
600,601
600,602
601,602
601,603
602,603
605,606
605,607
606,607
608,609
608,610
609,610
611,612
614,615
615,616
617,618
618,619
618,620
619,620
619,621
620,621
623,624
623,625
624,625
626,627
626,628
627,628
629,630
632,633
633,634
635,636
636,637
636,638
637,638
637,639
638,639
641,642
641,643
642,643
644,645
644,646
645,646
647,648
650,651
651,652
653,654
654,655
654,656
655,656
655,657
656,657
659,660
659,661
660,661
662,663
662,664
663,664
665,666
668,669
669,670
671,672
672,673
672,674
673,674
673,675
674,675
677,678
677,679
678,679
680,681
680,682
681,682
683,684
686,687
687,688
689,690
690,691
690,692
691,692
691,693
692,693
695,696
695,697
696,697
698,699
698,700
699,700
701,702
704,705
705,706
707,708
708,709
708,710
709,710
711,712
711,713
712,713
714,715
714,716
715,716
717,718
717,719
718,719
720,721
723,724
724,725
726,727
727,728
727,729
728,729
730,731
730,732
731,732
733,734
733,735
734,735
736,737
736,738
737,738
739,740
742,743
743,744
745,746
746,747
746,748
747,748
747,749
748,749
751,752
751,753
752,753
754,755
754,756
755,756
757,758
757,759
758,759
760,761
763,764
764,765
766,767
767,768
767,769
768,769
768,770
769,770
772,773
772,774
773,774
775,776
775,777
776,777
778,779
778,780
779,780
781,782
784,785
785,786
787,788
787,789
787,790
788,789
788,790
789,790
790,791
790,792
791,792
793,794
793,795
794,795
794,796
795,796
797,798
797,799
797,800
798,799
800,801
802,803
802,804
803,804
805,806
809,810
810,811
811,812
811,813
811,814
812,813
815,816
815,817
816,817
818,819
820,821
821,822
822,823
822,824
823,824
823,825
824,825
827,828
828,829
828,830
829,830
831,832
834,835
835,836
837,838
837,839
837,840
838,839
838,840
839,840
840,841
840,842
841,842
843,844
843,845
844,845
844,846
845,846
847,848
847,849
847,850
848,849
850,851
852,853
852,854
853,854
855,856
859,860
860,861
861,862
861,863
861,864
862,863
865,866
865,867
866,867
868,869
870,871
871,872
872,873
872,874
873,874
873,875
874,875
877,878
880,881
881,882
883,884
884,885
884,886
885,886
889,890
890,891
892,893
893,894
893,895
894,895
894,896
895,896
898,899
898,900
899,900
901,902
901,903
902,903
904,905
907,908
908,909
910,911
911,912
911,913
912,913
912,914
913,914
913,915
914,915
918,919
921,922
922,923
924,925
925,926
925,927
926,927
926,928
927,928
927,929
928,929
932,933
935,936
936,937
938,939
939,940
939,941
940,941
940,942
941,942
944,945
947,948
948,949
950,951
951,952
951,953
952,953
952,954
953,954
956,957
959,960
960,961
962,963
963,964
963,965
964,965
964,966
965,966
968,969
971,972
972,973
974,975
975,976
975,977
976,977
976,978
977,978
980,981
983,984
984,985
986,987
987,988
987,989
988,989
988,990
989,990
992,993
995,996
996,997
998,999
999,1000
999,1001
1000,1001
1000,1002
1001,1002
1004,1005
1007,1008
1008,1009
1010,1011
1011,1012
1011,1013
1012,1013
1012,1014
1013,1014
1013,1015
1014,1015
1018,1019
1018,1020
1019,1020
1021,1022
1021,1023
1022,1023
1024,1025
1027,1028
1028,1029
1030,1031
1030,1032
1031,1032
1031,1033
1031,1034
1031,1035
1032,1033
1034,1035
1034,1036
1035,1036
1037,1038
1039,1040
1039,1041
1040,1041
1043,1044
1044,1045
1044,1046
1045,1046
1048,1049
1049,1050
1050,1051
1050,1052
1050,1053
1051,1052
1054,1055
1054,1056
1055,1056
1057,1058
1060,1061
1061,1062
1063,1064
1063,1065
1064,1065
1064,1066
1064,1067
1064,1068
1065,1066
1067,1068
1067,1069
1068,1069
1070,1071
1072,1073
1073,1074
1075,1076
1076,1077
1078,1079
1079,1080
1080,1081
1080,1082
1080,1083
1081,1082
1084,1085
1084,1086
1085,1086
1087,1088
1090,1091
1091,1092
1093,1094
1094,1095
1094,1096
1095,1096
1097,1098
1097,1099
1098,1099
1100,1101
1100,1102
1101,1102
1103,1104
1107,1108
1108,1109
1108,1110
1108,1111
1109,1110
1112,1113
1112,1114
1113,1114
1115,1116
1118,1119
1119,1120
1119,1121
1120,1121
1122,1123
1124,1125
1125,1126
1125,1127
1126,1127
1129,1130
1129,1131
1130,1131
1130,1132
1131,1132
1131,1133
1132,1133
1135,1136
1137,1138
1138,1139
1139,1140
1139,1141
1140,1141
1140,1142
1141,1142
1144,1145
1144,1146
1144,1147
1145,1146
1146,1147
1146,1148
1147,1148
1147,1149
1148,1149
1151,1152
1153,1154
1154,1155
1154,1156
1155,1156
1155,1157
1156,1157
1159,1160
1162,1163
1162,1164
1162,1165
1163,1164
1163,1165
1164,1165
1164,1166
1165,1166
1168,1169
1170,1171
1171,1172
1172,1173
1172,1174
1173,1174
1173,1175
1174,1175
1178,1179
1178,1180
1179,1180
1179,1181
1180,1181
1180,1182
1181,1182
1184,1185
1185,1186
1186,1187
1186,1188
1187,1188
1190,1191
1191,1192
1191,1193
1192,1193
1192,1194
1193,1194
1196,1197
1198,1199
1198,1200
1198,1201
1199,1200
1199,1201
1200,1201
1200,1202
1201,1202
1204,1205
1206,1207
1207,1208
1208,1209
1208,1210
1209,1210
1209,1211
1210,1211
1214,1215
1214,1216
1215,1216
1215,1217
1216,1217
1216,1218
1217,1218
1220,1221
1221,1222
1222,1223
1222,1224
1223,1224
1226,1227
1227,1228
1227,1229
1228,1229
1228,1230
1229,1230
1232,1233
1234,1235
1235,1236
1235,1237
1236,1237
1236,1238
1237,1238
1240,1241
1240,1242
1241,1242
1241,1243
1242,1243
1245,1246
1245,1247
1246,1247
1248,1249
1250,1251
1251,1252
1251,1253
1252,1253
1252,1254
1253,1254
1256,1257
1256,1258
1257,1258
1257,1259
1258,1259
1261,1262
1261,1263
1262,1263
1264,1265
1266,1267
1266,1268
1267,1268
1267,1269
1268,1269
1268,1270
1269,1270
1272,1273
1274,1275
1275,1276
1276,1277
1276,1278
1277,1278
1277,1279
1278,1279
1281,1282
1281,1283
1282,1283
1285,1286
1285,1287
1286,1287
1286,1288
1287,1288
1287,1289
1288,1289
1291,1292
1293,1294
1294,1295
1295,1296
1295,1297
1296,1297
1296,1298
1297,1298
1300,1301
1300,1302
1301,1302
1304,1305
1304,1306
1305,1306
1306,1307
1306,1308
1307,1308
1310,1311
1311,1312
1312,1313
1312,1314
1313,1314
1313,1315
1314,1315
1317,1318
1317,1319
1318,1319
1318,1320
1319,1320
1322,1323
1322,1324
1323,1324
1326,1327
1326,1328
1327,1328
1328,1329
1328,1330
1329,1330
1332,1333
1333,1334
1334,1335
1334,1336
1335,1336
1335,1337
1336,1337
1339,1340
1339,1341
1340,1341
1340,1342
1341,1342
1344,1345
1344,1346
1345,1346
1348,1349
1348,1350
1348,1351
1349,1350
1349,1351
1350,1351
1350,1352
1351,1352
1355,1356
1355,1357
1356,1357
1357,1358
1357,1359
1358,1359
1361,1362
1361,1363
1361,1364
1361,1365
1362,1363
1363,1364
1363,1365
1364,1365
1367,1368
1367,1369
1368,1369
1370,1371
1370,1372
1371,1372
1373,1374
1375,1376
1376,1377
1378,1379
1379,1380
1379,1381
1380,1381
1380,1382
1381,1382
1381,1383
1382,1383
1382,1384
1383,1384
1383,1385
1384,1385
1384,1386
1384,1387
1385,1386
1387,1388
1389,1390
1391,1392
1391,1393
1391,1394
1392,1393
1394,1395
1397,1398
1397,1399
1398,1399
1398,1400
1398,1401
1399,1400
1401,1402
1403,1404
1405,1406
1405,1407
1405,1408
1406,1407
1408,1409
1411,1412
1411,1413
1412,1413
1412,1414
1412,1415
1413,1414
1415,1416
1417,1418
1419,1420
1419,1421
1419,1422
1420,1421
1422,1423
1425,1426
1425,1427
1426,1427
1426,1428
1426,1429
1427,1428
1429,1430
1431,1432
1433,1434
1433,1435
1433,1436
1434,1435
1436,1437
1439,1440
1440,1441
1441,1442
1441,1443
1442,1443
1445,1446
1446,1447
1447,1448
1447,1449
1448,1449
1451,1452
1451,1453
1452,1453
1452,1454
1453,1454
1453,1455
1454,1455
1456,1457
1458,1459
1458,1460
1459,1460
1459,1461
1460,1461
1462,1463
1462,1464
1463,1464
1465,1466
1467,1468
1469,1470
1470,1471
1471,1472
1471,1473
1472,1473
1475,1476
1475,1477
1475,1478
1476,1477
1476,1478
1477,1478
1477,1479
1478,1479
1480,1481
1482,1483
1482,1484
1483,1484
1483,1485
1484,1485
1486,1487
1486,1488
1487,1488
1489,1490
1491,1492
1493,1494
1494,1495
1495,1496
1495,1497
1496,1497
1496,1498
1497,1498
1500,1501
1500,1502
1500,1503
1501,1502
1502,1503
1502,1504
1503,1504
1506,1507
1507,1508
1509,1510
1510,1511
1512,1513
1513,1514
1514,1515
1514,1516
1515,1516
1515,1517
1516,1517
1519,1520
1521,1522
1522,1523
1522,1524
1523,1524
1523,1525
1524,1525
1527,1528
1527,1529
1527,1530
1528,1529
1529,1530
1529,1531
1530,1531
1533,1534
1534,1535
1536,1537
1537,1538
1539,1540
1539,1541
1539,1542
1539,1543
1540,1541
1541,1542
1541,1543
1542,1543
1545,1546
1545,1547
1546,1547
1548,1549
1548,1550
1549,1550
1552,1553
1553,1554
1555,1556
1555,1557
1556,1557
1557,1558
1557,1559
1558,1559
1558,1560
1559,1560
1559,1561
1560,1561
1563,1564
1565,1566
1567,1568
1568,1569
1568,1570
1569,1570
1569,1571
1570,1571
1570,1572
1571,1572
1574,1575
1576,1577
1578,1579
1578,1580
1579,1580
1579,1581
1580,1581
1580,1582
1581,1582
1584,1585
1584,1586
1585,1586
1588,1589
1589,1590
1590,1591
1590,1592
1591,1592
1591,1593
1592,1593
1595,1596
1597,1598
1597,1599
1598,1599
1599,1600
1599,1601
1600,1601
1603,1604
1603,1605
1604,1605
1605,1606
1605,1607
1605,1608
1606,1607
1609,1610
1609,1611
1610,1611
1610,1612
1613,1614
1613,1615
1614,1615
1617,1618
1619,1620
1619,1621
1620,1621
1621,1622
1621,1623
1622,1623
1625,1626
1625,1627
1626,1627
1627,1628
1627,1629
1627,1630
1628,1629
1631,1632
1631,1633
1632,1633
1632,1634
1635,1636
1635,1637
1636,1637
1639,1640
1641,1642
1641,1643
1642,1643
1642,1644
1643,1644
1643,1645
1644,1645
1644,1646
1645,1646
1645,1647
1646,1647
1646,1648
1647,1648
1650,1651
1650,1652
1651,1652
1654,1655
1654,1656
1655,1656
1655,1657
1656,1657
1659,1660
1659,1661
1660,1661
1663,1664
1663,1665
1664,1665
1664,1666
1665,1666
1665,1667
1666,1667
1669,1670
1669,1671
1670,1671
1673,1674
1673,1675
1674,1675
1677,1678
1677,1679
1678,1679
1678,1680
1679,1680
1679,1681
1680,1681
1683,1684
1683,1685
1684,1685
1687,1688
1687,1689
1688,1689
1691,1692
1691,1693
1692,1693
1693,1694
1693,1695
1693,1696
1693,1697
1694,1695
1697,1698
1697,1699
1698,1699
1698,1700
1701,1702
1701,1703
1702,1703
1705,1706
1705,1707
1706,1707
1706,1708
1709,1710
1709,1711
1710,1711
1713,1714
1715,1716
1716,1717
1716,1718
1717,1718
1717,1719
1718,1719
1721,1722
1721,1723
1721,1724
1722,1723
1724,1725
1724,1726
1725,1726
1725,1727
1726,1727
1729,1730
1729,1731
1730,1731
1733,1734
1733,1735
1734,1735
1737,1738
1738,1739
1738,1740
1739,1740
1739,1741
1740,1741
1743,1744
1743,1745
1743,1746
1744,1745
1746,1747
1746,1748
1747,1748
1747,1749
1748,1749
1751,1752
1751,1753
1752,1753
1755,1756
1755,1757
1756,1757
1759,1760
1760,1761
1760,1762
1761,1762
1761,1763
1762,1763
1765,1766
1765,1767
1766,1767
1766,1768
1767,1768
1770,1771
1770,1772
1771,1772
1774,1775
1774,1776
1775,1776
1775,1777
1776,1777
1778,1779
1778,1780
1779,1780
1782,1783
1782,1784
1782,1785
1782,1786
1782,1787
1782,1788
1783,1784
1784,1785
1784,1786
1785,1786
1785,1787
1786,1787
1789,1790
1789,1791
1790,1791
1793,1794
1793,1795
1794,1795
1795,1796
1796,1797
1796,1798
1797,1798
1797,1799
1798,1799
1801,1802
1801,1803
1802,1803
1804,1805
1804,1806
1805,1806
1806,1807
1806,1808
1807,1808
1807,1809
1808,1809
1812,1813
1813,1814
1813,1815
1814,1815
1817,1818
1818,1819
1820,1821
1821,1822
1822,1823
1823,1824
1825,1826
1826,1827
1827,1828
1827,1829
1828,1829
1828,1830
1829,1830
1829,1831
1830,1831
1830,1832
1831,1832
1834,1835
1836,1837
1837,1838
1838,1839
1838,1840
1839,1840
1839,1841
1840,1841
1844,1845
1844,1846
1845,1846
1846,1847
1846,1848
1847,1848
1850,1851
1852,1853
1852,1854
1853,1854
1853,1855
1854,1855
1857,1858
1857,1859
1858,1859
1859,1860
1859,1861
1860,1861
1863,1864
1865,1866
1865,1867
1866,1867
1866,1868
1867,1868
1870,1871
1870,1872
1871,1872
1872,1873
1872,1874
1873,1874
1876,1877
1878,1879
1878,1880
1879,1880
1879,1881
1880,1881
1880,1882
1881,1882
1881,1883
1882,1883
1882,1884
1883,1884
1888,1889
1888,1890
1889,1890
1889,1891
1890,1891
1890,1892
1891,1892
1896,1897
1896,1898
1897,1898
1898,1899
1898,1900
1898,1901
1899,1900
1902,1903
1902,1904
1903,1904
1905,1906
1905,1907
1906,1907
1906,1908
1907,1908
1911,1912
1913,1914
1913,1915
1914,1915
1914,1916
1915,1916
1915,1917
1916,1917
1916,1918
1917,1918
1917,1919
1918,1919
1923,1924
1923,1925
1924,1925
1924,1926
1925,1926
1925,1927
1926,1927
1931,1932
1931,1933
1932,1933
1933,1934
1933,1935
1933,1936
1934,1935
1937,1938
1937,1939
1938,1939
1940,1941
1940,1942
1941,1942
1941,1943
1942,1943
1946,1947
1948,1949
1948,1950
1949,1950
1949,1951
1950,1951
1950,1952
1951,1952
1951,1953
1952,1953
1952,1954
1953,1954
1957,1958
1957,1959
1958,1959
1958,1960
1959,1960
1964,1965
1964,1966
1965,1966
1966,1967
1966,1968
1967,1968
1970,1971
1972,1973
1972,1974
1973,1974
1973,1975
1974,1975
1974,1976
1975,1976
1975,1977
1976,1977
1981,1982
1981,1983
1982,1983
1983,1984
1983,1985
1984,1985
1987,1988
1989,1990
1989,1991
1990,1991
1990,1992
1991,1992
1991,1993
1992,1993
1992,1994
1993,1994
1998,1999
1998,2000
1999,2000
2000,2001
2000,2002
2001,2002
2004,2005
2006,2007
2006,2008
2007,2008
2007,2009
2008,2009
2008,2010
2009,2010
2009,2011
2010,2011
2015,2016
2015,2017
2016,2017
2017,2018
2017,2019
2018,2019
2021,2022
2023,2024
2023,2025
2024,2025
2024,2026
2025,2026
2025,2027
2026,2027
2026,2028
2027,2028
2030,2031
2032,2033
2032,2034
2033,2034
2033,2035
2034,2035
2037,2038
2037,2039
2038,2039
2041,2042
2042,2043
2043,2044
2043,2045
2043,2046
2043,2047
2044,2045
2047,2048
2047,2049
2048,2049
2048,2050
2051,2052
2051,2053
2052,2053
2055,2056
2055,2057
2056,2057
2056,2058
2059,2060
2059,2061
2060,2061
2063,2064
2063,2065
2064,2065
2064,2066
2065,2066
2065,2067
2066,2067
2070,2071
2070,2072
2071,2072
2071,2073
2071,2074
2071,2075
2072,2073
2073,2074
2073,2075
2074,2075
2077,2078
2077,2079
2078,2079
2078,2080
2079,2080
2082,2083
2082,2084
2083,2084
2086,2087
2087,2088
2089,2090
2090,2091
2090,2092
2091,2092
2091,2093
2092,2093
2092,2094
2093,2094
2093,2095
2094,2095
2097,2098
2099,2100
2099,2101
2100,2101
2100,2102
2101,2102
2104,2105
2104,2106
2105,2106
2108,2109
2108,2110
2109,2110
2110,2111
2110,2112
2111,2112
2114,2115
2116,2117
2116,2118
2117,2118
2117,2119
2118,2119
2118,2120
2119,2120
2122,2123
2124,2125
2125,2126
2125,2127
2125,2128
2125,2129
2126,2127
2127,2128
2127,2129
2128,2129
2131,2132
2131,2133
2132,2133
2134,2135
2134,2136
2135,2136
2135,2137
2136,2137
2140,2141
2141,2142
2143,2144
2144,2145
2144,2146
2145,2146
2145,2147
2146,2147
2146,2148
2147,2148
2149,2150
2149,2151
2150,2151
2150,2152
2151,2152
2154,2155
2156,2157
2156,2158
2157,2158
2158,2159
2158,2160
2159,2160
2159,2161
2162,2163
2162,2164
2163,2164
2166,2167
2166,2168
2167,2168
2170,2171
2170,2172
2171,2172
2172,2173
2172,2174
2173,2174
2176,2177
2178,2179
2178,2180
2179,2180
2181,2182
2182,2183
2183,2184
2183,2185
2184,2185
2186,2187
2188,2189
2189,2190
2191,2192
2191,2193
2193,2194
2193,2195
2194,2195
2196,2197
2197,2198
2198,2199
2198,2200
2199,2200
2201,2202
2203,2204
2203,2205
2204,2205
2206,2207
2207,2208
2208,2209
2208,2210
2209,2210
2211,2212
2213,2214
2213,2215
2214,2215
2216,2217
2217,2218
2218,2219
2218,2220
2219,2220
2221,2222
2223,2224
-----nextToken-----
3,5,6,8,10,11,14,16,17,22,24,25,29,31,32,35,37,40,42,45,47,48,51,53,56,58,62,64,65,69,71,72,76,78,79,82,84,88,90,94,96,100,102,105,107,111,113,117,119,123,125,129,131,134,136,140,141,145,146,150,151,155,156,162,165,169,170,173,177,178,182,183,187,188,192,193,198,199,200,205,206,207,212,213,215,220,221,223,228,229,230,235,236,237,242,243,245,250,251,253,258,259,260,265,266,267,272,273,276,278,282,283,287,288,293,294,297,300,302,305,313,315,317,320,322,324,327,329,334,336,338,341,343,345,348,350,355,356,358,362,365,367,369,373,376,378,380,387,388,391,395,396,400,401,404,410,413,420,421,424,426,431,432,434,438,442,443,448,449,450,455,456,457,462,463,465,470,471,472,477,478,479,483,487,488,493,494,495,500,501,502,507,508,509,514,515,516,521,522,523,528,529,530,536,539,542,544,545,548,554,557,559,565,568,570,573,575,576,580,585,586,589,592,594,595,598,603,604,607,610,612,613,616,621,622,625,628,630,631,634,639,640,643,646,648,649,652,657,658,661,664,666,667,670,675,676,679,682,684,685,688,693,694,697,700,702,703,706,710,713,716,719,721,722,725,729,732,735,738,740,741,744,749,750,753,756,759,761,762,765,770,771,774,777,780,782,783,786,792,796,799,801,804,806,807,808,813,814,817,819,825,826,830,832,833,836,842,846,849,851,854,856,857,858,863,864,867,869,875,876,878,879,882,886,887,888,891,896,897,900,903,905,906,909,915,916,917,919,920,923,929,930,931,933,934,937,942,943,945,946,949,954,955,957,958,961,966,967,969,970,973,978,979,981,982,985,990,991,993,994,997,1002,1003,1005,1006,1009,1015,1016,1017,1020,1023,1025,1026,1029,1033,1036,1038,1041,1042,1046,1047,1052,1053,1056,1058,1059,1062,1066,1069,1071,1074,1077,1082,1083,1086,1088,1089,1092,1096,1099,1102,1104,1105,1106,1110,1111,1114,1116,1117,1121,1123,1127,1128,1133,1134,1136,1142,1143,1149,1150,1152,1157,1158,1160,1161,1166,1167,1169,1175,1176,1177,1182,1183,1188,1189,1194,1195,1197,1202,1203,1205,1211,1212,1213,1218,1219,1224,1225,1230,1231,1233,1238,1239,1243,1244,1247,1249,1254,1255,1259,1260,1263,1265,1270,1271,1273,1279,1280,1283,1284,1289,1290,1292,1298,1299,1302,1303,1308,1309,1315,1316,1320,1321,1324,1325,1330,1331,1337,1338,1342,1343,1346,1347,1352,1353,1354,1359,1360,1365,1366,1369,1372,1374,1377,1386,1388,1390,1393,1395,1396,1400,1402,1404,1407,1409,1410,1414,1416,1418,1421,1423,1424,1428,1430,1432,1435,1437,1438,1443,1444,1449,1450,1455,1457,1461,1464,1466,1468,1473,1474,1479,1481,1485,1488,1490,1492,1498,1499,1504,1505,1508,1511,1517,1518,1520,1525,1526,1531,1532,1535,1538,1543,1544,1547,1550,1551,1554,1561,1562,1564,1566,1572,1573,1575,1577,1582,1583,1586,1587,1593,1594,1596,1601,1602,1607,1608,1611,1612,1615,1616,1618,1623,1624,1629,1630,1633,1634,1637,1638,1640,1648,1649,1652,1653,1657,1658,1661,1662,1667,1668,1671,1672,1675,1676,1681,1682,1685,1686,1689,1690,1695,1696,1699,1700,1703,1704,1707,1708,1711,1712,1714,1719,1720,1723,1727,1728,1731,1732,1735,1736,1741,1742,1745,1749,1750,1753,1754,1757,1758,1763,1764,1768,1769,1772,1773,1777,1780,1781,1787,1788,1791,1792,1799,1800,1803,1809,1810,1811,1815,1816,1819,1824,1832,1833,1835,1841,1842,1843,1848,1849,1851,1855,1856,1861,1862,1864,1868,1869,1874,1875,1877,1884,1885,1886,1887,1892,1893,1894,1895,1900,1901,1904,1908,1909,1910,1912,1919,1920,1921,1922,1927,1928,1929,1930,1935,1936,1939,1943,1944,1945,1947,1954,1955,1956,1960,1961,1962,1963,1968,1969,1971,1977,1978,1979,1980,1985,1986,1988,1994,1995,1996,1997,2002,2003,2005,2011,2012,2013,2014,2019,2020,2022,2028,2029,2031,2035,2036,2039,2040,2045,2046,2049,2050,2053,2054,2057,2058,2061,2062,2067,2068,2069,2075,2076,2080,2081,2084,2085,2088,2095,2096,2098,2102,2103,2106,2107,2112,2113,2115,2120,2121,2123,2129,2130,2133,2137,2138,2139,2142,2148,2152,2153,2155,2160,2161,2164,2165,2168,2169,2174,2175,2177,2180,2185,2187,2190,2192,2195,2200,2202,2205,2210,2212,2215,2220,2222,2224
-----computeFrom-----
138,139
138,140
143,144
143,145
148,149
148,150
153,154
153,155
160,161
160,162
175,176
175,177
180,181
180,182
185,186
185,187
190,191
190,192
195,196
195,197
202,203
202,204
209,210
209,211
217,218
217,219
225,226
225,227
232,233
232,234
239,240
239,241
247,248
247,249
255,256
255,257
262,263
262,264
269,270
269,271
280,281
280,282
285,286
285,287
291,292
291,293
295,296
295,297
308,309
308,310
309,310
309,311
310,311
310,312
330,331
330,332
331,332
331,333
360,361
360,362
371,372
371,373
384,385
384,386
392,393
392,394
417,418
417,419
428,429
428,430
436,437
436,438
445,446
445,447
452,453
452,454
459,460
459,461
467,468
467,469
474,475
474,476
481,482
481,483
490,491
490,492
497,498
497,499
504,505
504,506
511,512
511,513
518,519
518,520
525,526
525,527
534,535
534,536
552,553
552,554
582,583
582,584
600,601
600,602
618,619
618,620
636,637
636,638
654,655
654,656
672,673
672,674
690,691
690,692
708,709
708,710
727,728
727,729
746,747
746,748
767,768
767,769
788,789
788,790
790,791
790,792
822,823
822,824
828,829
828,830
838,839
838,840
840,841
840,842
872,873
872,874
884,885
884,886
893,894
893,895
911,912
911,913
925,926
925,927
939,940
939,941
951,952
951,953
963,964
963,965
975,976
975,977
987,988
987,989
999,1000
999,1001
1011,1012
1011,1013
1094,1095
1094,1096
1125,1126
1125,1127
1130,1131
1130,1132
1139,1140
1139,1141
1146,1147
1146,1148
1154,1155
1154,1156
1163,1164
1163,1165
1172,1173
1172,1174
1180,1181
1180,1182
1191,1192
1191,1193
1199,1200
1199,1201
1208,1209
1208,1210
1216,1217
1216,1218
1227,1228
1227,1229
1235,1236
1235,1237
1240,1241
1240,1242
1251,1252
1251,1253
1256,1257
1256,1258
1267,1268
1267,1269
1276,1277
1276,1278
1286,1287
1286,1288
1295,1296
1295,1297
1312,1313
1312,1314
1317,1318
1317,1319
1334,1335
1334,1336
1339,1340
1339,1341
1349,1350
1349,1351
1357,1358
1357,1359
1363,1364
1363,1365
1367,1368
1367,1369
1380,1381
1380,1382
1381,1382
1381,1383
1382,1383
1382,1384
1383,1384
1383,1385
1397,1398
1397,1399
1411,1412
1411,1413
1425,1426
1425,1427
1441,1442
1441,1443
1447,1448
1447,1449
1452,1453
1452,1454
1453,1454
1453,1455
1458,1459
1458,1460
1476,1477
1476,1478
1477,1478
1477,1479
1482,1483
1482,1484
1495,1496
1495,1497
1514,1515
1514,1516
1522,1523
1522,1524
1541,1542
1541,1543
1545,1546
1545,1547
1557,1558
1557,1559
1568,1569
1568,1570
1579,1580
1579,1581
1580,1581
1580,1582
1584,1585
1584,1586
1590,1591
1590,1592
1642,1643
1642,1644
1643,1644
1643,1645
1644,1645
1644,1646
1645,1646
1645,1647
1654,1655
1654,1656
1663,1664
1663,1665
1664,1665
1664,1666
1677,1678
1677,1679
1678,1679
1678,1680
1716,1717
1716,1718
1724,1725
1724,1726
1738,1739
1738,1740
1746,1747
1746,1748
1760,1761
1760,1762
1765,1766
1765,1767
1775,1776
1775,1777
1778,1779
1778,1780
1784,1785
1784,1786
1789,1790
1789,1791
1796,1797
1796,1798
1804,1805
1804,1806
1806,1807
1806,1808
1828,1829
1828,1830
1829,1830
1829,1831
1853,1854
1853,1855
1866,1867
1866,1868
1879,1880
1879,1881
1880,1881
1880,1882
1888,1889
1888,1890
1914,1915
1914,1916
1915,1916
1915,1917
1923,1924
1923,1925
1949,1950
1949,1951
1950,1951
1950,1952
1973,1974
1973,1975
1990,1991
1990,1992
2007,2008
2007,2009
2024,2025
2024,2026
2025,2026
2025,2027
2032,2033
2032,2034
2064,2065
2064,2066
2073,2074
2073,2075
2077,2078
2077,2079
2078,2079
2078,2080
2091,2092
2091,2093
2104,2105
2104,2106
2117,2118
2117,2119
2127,2128
2127,2129
2131,2132
2131,2133
2134,2135
2134,2136
2145,2146
2145,2147
2156,2157
2156,2158
-----guardedBy-----
804,817
806,819
854,867
856,869
1134,1158
1133,1157
1166,1175
1167,1176
1203,1212
1202,1211
1271,1280
1270,1283
1290,1299
1289,1302
1682,1712
1668,1704
1689,1711
1777,1800
1780,1791
1894,1910
1893,1909
1892,1908
1929,1945
1928,1944
1927,1943
2036,2054
2040,2062
2039,2061
2067,2152
2068,2138
2121,2165
2120,2168
-----guardedByNegation-----
792,830
842,878
1166,1194
1167,1195
1203,1231
1202,1230
-----lastLexicalUse-----
1166,1194
1167,1195
1203,1231
1202,1230
-----jump-----
1166,1194
1167,1195
1203,1231
1202,1230
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;GotoStatement;Name;ProblemStatement;ExpressionStatement;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ProblemStatement;ProblemStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;GotoStatement;Name;WhileStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;GotoStatement;Name;ProblemStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ProblemStatement;ProblemStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static jpc_enc_cp_t *cp_create(char *optstr, jas_image_t *image){	jpc_enc_cp_t *cp;	jas_tvparser_t *tvp;	int ret;	int numilyrrates;	double *ilyrrates;	int i;	int tagid;	jpc_enc_tcp_t *tcp;	jpc_enc_tccp_t *tccp;	jpc_enc_ccp_t *ccp;	int cmptno;	uint_fast16_t rlvlno;	uint_fast16_t prcwidthexpn;	uint_fast16_t prcheightexpn;	bool enablemct;	uint_fast32_t jp2overhead;	uint_fast16_t lyrno;	uint_fast32_t hsteplcm;	uint_fast32_t vsteplcm;	bool mctvalid;	tvp = 0;	cp = 0;	ilyrrates = 0;	numilyrrates = 0;	if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))) {		goto error;	}	prcwidthexpn = 15;	prcheightexpn = 15;	enablemct = true;	jp2overhead = 0;	cp->ccps = 0;	cp->debug = 0;	cp->imgareatlx = UINT_FAST32_MAX;	cp->imgareatly = UINT_FAST32_MAX;	cp->refgrdwidth = 0;	cp->refgrdheight = 0;	cp->tilegrdoffx = UINT_FAST32_MAX;	cp->tilegrdoffy = UINT_FAST32_MAX;	cp->tilewidth = 0;	cp->tileheight = 0;	cp->numcmpts = jas_image_numcmpts(image);	hsteplcm = 1;	vsteplcm = 1;	for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {		if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {			jas_eprintf("unsupported image type\n");			goto error;		}		/* Note: We ought to be calculating the LCMs here.  Fix some day. */		hsteplcm *= jas_image_cmpthstep(image, cmptno);		vsteplcm *= jas_image_cmptvstep(image, cmptno);	}	if (!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)))) {		goto error;	}	for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts); ++cmptno,	  ++ccp) {		ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);		ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);		/* XXX - this isn't quite correct for more general image */		ccp->sampgrdsubstepx = 0;		ccp->sampgrdsubstepx = 0;		ccp->prec = jas_image_cmptprec(image, cmptno);		ccp->sgnd = jas_image_cmptsgnd(image, cmptno);		ccp->numstepsizes = 0;		memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));	}	cp->rawsize = jas_image_rawsize(image);	cp->totalsize = UINT_FAST32_MAX;	tcp = &cp->tcp;	tcp->csty = 0;	tcp->intmode = true;	tcp->prg = JPC_COD_LRCPPRG;	tcp->numlyrs = 1;	tcp->ilyrrates = 0;	tccp = &cp->tccp;	tccp->csty = 0;	tccp->maxrlvls = 6;	tccp->cblkwidthexpn = 6;	tccp->cblkheightexpn = 6;	tccp->cblksty = 0;	tccp->numgbits = 2;	if (!(tvp = jas_tvparser_create(optstr ? optstr : ""))) {		goto error;	}	while (!(ret = jas_tvparser_next(tvp))) {		switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id) {		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}	}	jas_tvparser_destroy(tvp);	tvp = 0;	if (cp->totalsize != UINT_FAST32_MAX) {		cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0;	}	if (cp->imgareatlx == UINT_FAST32_MAX) {		cp->imgareatlx = 0;	} else {		if (hsteplcm != 1) {			jas_eprintf("warning: overriding imgareatlx value\n");		}		cp->imgareatlx *= hsteplcm;	}	if (cp->imgareatly == UINT_FAST32_MAX) {		cp->imgareatly = 0;	} else {		if (vsteplcm != 1) {			jas_eprintf("warning: overriding imgareatly value\n");		}		cp->imgareatly *= vsteplcm;	}	cp->refgrdwidth = cp->imgareatlx + jas_image_width(image);	cp->refgrdheight = cp->imgareatly + jas_image_height(image);	if (cp->tilegrdoffx == UINT_FAST32_MAX) {		cp->tilegrdoffx = cp->imgareatlx;	}	if (cp->tilegrdoffy == UINT_FAST32_MAX) {		cp->tilegrdoffy = cp->imgareatly;	}	if (!cp->tilewidth) {		cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;	}	if (!cp->tileheight) {		cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;	}	if (cp->numcmpts == 3) {		mctvalid = true;		for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}	} else {		mctvalid = false;	}	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB) {		jas_eprintf("warning: color space apparently not RGB\n");	}	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB) {		tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);	} else {		tcp->mctid = JPC_MCT_NONE;	}	tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS);	for (rlvlno = 0; rlvlno < tccp->maxrlvls; ++rlvlno) {		tccp->prcwidthexpns[rlvlno] = prcwidthexpn;		tccp->prcheightexpns[rlvlno] = prcheightexpn;	}	if (prcwidthexpn != 15 || prcheightexpn != 15) {		tccp->csty |= JPC_COX_PRT;	}	/* Ensure that the tile width and height is valid. */	if (!cp->tilewidth) {		jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth);		goto error;	}	if (!cp->tileheight) {		jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight);		goto error;	}	/* Ensure that the tile grid offset is valid. */	if (cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly ||	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly) {		jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy);		goto error;	}	cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,	  cp->tilewidth);	cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,	  cp->tileheight);	cp->numtiles = cp->numhtiles * cp->numvtiles;	if (ilyrrates && numilyrrates > 0) {		tcp->numlyrs = numilyrrates + 1;		if (!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *		  sizeof(jpc_fix_t)))) {			goto error;		}		for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1); ++i) {			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);		}	}	/* Ensure that the integer mode is used in the case of lossless	  coding. */	if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)) {		jas_eprintf("cannot use real mode for lossless coding\n");		goto error;	}	/* Ensure that the precinct width is valid. */	if (prcwidthexpn > 15) {		jas_eprintf("invalid precinct width\n");		goto error;	}	/* Ensure that the precinct height is valid. */	if (prcheightexpn > 15) {		jas_eprintf("invalid precinct height\n");		goto error;	}	/* Ensure that the code block width is valid. */	if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12) {		jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn));		goto error;	}	/* Ensure that the code block height is valid. */	if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12) {		jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn));		goto error;	}	/* Ensure that the code block size is not too large. */	if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12) {		jas_eprintf("code block size too large\n");		goto error;	}	/* Ensure that the number of layers is valid. */	if (cp->tcp.numlyrs > 16384) {		jas_eprintf("too many layers\n");		goto error;	}	/* There must be at least one resolution level. */	if (cp->tccp.maxrlvls < 1) {		jas_eprintf("must be at least one resolution level\n");		goto error;	}	/* Ensure that the number of guard bits is valid. */	if (cp->tccp.numgbits > 8) {		jas_eprintf("invalid number of guard bits\n");		goto error;	}	/* Ensure that the rate is within the legal range. */	if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize) {		jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);	}	/* Ensure that the intermediate layer rates are valid. */	if (tcp->numlyrs > 1) {		/* The intermediate layers rates must increase monotonically. */		for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}		/* The intermediate layer rates must be less than the overall rate. */		if (cp->totalsize != UINT_FAST32_MAX) {			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}	}	if (ilyrrates) {		jas_free(ilyrrates);	}	return cp;error:	if (ilyrrates) {		jas_free(ilyrrates);	}	if (tvp) {		jas_tvparser_destroy(tvp);	}	if (cp) {		jpc_enc_cp_destroy(cp);	}	return 0;}
static jpc_enc_cp_t
jpc_enc_cp_t
*cp_create(char *optstr, jas_image_t *image)
*
cp_create
char *optstr
char
*optstr
*
optstr
jas_image_t *image
jas_image_t
jas_image_t
*image
*
image
{	jpc_enc_cp_t *cp;	jas_tvparser_t *tvp;	int ret;	int numilyrrates;	double *ilyrrates;	int i;	int tagid;	jpc_enc_tcp_t *tcp;	jpc_enc_tccp_t *tccp;	jpc_enc_ccp_t *ccp;	int cmptno;	uint_fast16_t rlvlno;	uint_fast16_t prcwidthexpn;	uint_fast16_t prcheightexpn;	bool enablemct;	uint_fast32_t jp2overhead;	uint_fast16_t lyrno;	uint_fast32_t hsteplcm;	uint_fast32_t vsteplcm;	bool mctvalid;	tvp = 0;	cp = 0;	ilyrrates = 0;	numilyrrates = 0;	if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))) {		goto error;	}	prcwidthexpn = 15;	prcheightexpn = 15;	enablemct = true;	jp2overhead = 0;	cp->ccps = 0;	cp->debug = 0;	cp->imgareatlx = UINT_FAST32_MAX;	cp->imgareatly = UINT_FAST32_MAX;	cp->refgrdwidth = 0;	cp->refgrdheight = 0;	cp->tilegrdoffx = UINT_FAST32_MAX;	cp->tilegrdoffy = UINT_FAST32_MAX;	cp->tilewidth = 0;	cp->tileheight = 0;	cp->numcmpts = jas_image_numcmpts(image);	hsteplcm = 1;	vsteplcm = 1;	for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {		if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {			jas_eprintf("unsupported image type\n");			goto error;		}		/* Note: We ought to be calculating the LCMs here.  Fix some day. */		hsteplcm *= jas_image_cmpthstep(image, cmptno);		vsteplcm *= jas_image_cmptvstep(image, cmptno);	}	if (!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)))) {		goto error;	}	for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts); ++cmptno,	  ++ccp) {		ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);		ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);		/* XXX - this isn't quite correct for more general image */		ccp->sampgrdsubstepx = 0;		ccp->sampgrdsubstepx = 0;		ccp->prec = jas_image_cmptprec(image, cmptno);		ccp->sgnd = jas_image_cmptsgnd(image, cmptno);		ccp->numstepsizes = 0;		memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));	}	cp->rawsize = jas_image_rawsize(image);	cp->totalsize = UINT_FAST32_MAX;	tcp = &cp->tcp;	tcp->csty = 0;	tcp->intmode = true;	tcp->prg = JPC_COD_LRCPPRG;	tcp->numlyrs = 1;	tcp->ilyrrates = 0;	tccp = &cp->tccp;	tccp->csty = 0;	tccp->maxrlvls = 6;	tccp->cblkwidthexpn = 6;	tccp->cblkheightexpn = 6;	tccp->cblksty = 0;	tccp->numgbits = 2;	if (!(tvp = jas_tvparser_create(optstr ? optstr : ""))) {		goto error;	}	while (!(ret = jas_tvparser_next(tvp))) {		switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id) {		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}	}	jas_tvparser_destroy(tvp);	tvp = 0;	if (cp->totalsize != UINT_FAST32_MAX) {		cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0;	}	if (cp->imgareatlx == UINT_FAST32_MAX) {		cp->imgareatlx = 0;	} else {		if (hsteplcm != 1) {			jas_eprintf("warning: overriding imgareatlx value\n");		}		cp->imgareatlx *= hsteplcm;	}	if (cp->imgareatly == UINT_FAST32_MAX) {		cp->imgareatly = 0;	} else {		if (vsteplcm != 1) {			jas_eprintf("warning: overriding imgareatly value\n");		}		cp->imgareatly *= vsteplcm;	}	cp->refgrdwidth = cp->imgareatlx + jas_image_width(image);	cp->refgrdheight = cp->imgareatly + jas_image_height(image);	if (cp->tilegrdoffx == UINT_FAST32_MAX) {		cp->tilegrdoffx = cp->imgareatlx;	}	if (cp->tilegrdoffy == UINT_FAST32_MAX) {		cp->tilegrdoffy = cp->imgareatly;	}	if (!cp->tilewidth) {		cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;	}	if (!cp->tileheight) {		cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;	}	if (cp->numcmpts == 3) {		mctvalid = true;		for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}	} else {		mctvalid = false;	}	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB) {		jas_eprintf("warning: color space apparently not RGB\n");	}	if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB) {		tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);	} else {		tcp->mctid = JPC_MCT_NONE;	}	tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS);	for (rlvlno = 0; rlvlno < tccp->maxrlvls; ++rlvlno) {		tccp->prcwidthexpns[rlvlno] = prcwidthexpn;		tccp->prcheightexpns[rlvlno] = prcheightexpn;	}	if (prcwidthexpn != 15 || prcheightexpn != 15) {		tccp->csty |= JPC_COX_PRT;	}	/* Ensure that the tile width and height is valid. */	if (!cp->tilewidth) {		jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth);		goto error;	}	if (!cp->tileheight) {		jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight);		goto error;	}	/* Ensure that the tile grid offset is valid. */	if (cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly ||	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly) {		jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy);		goto error;	}	cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,	  cp->tilewidth);	cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,	  cp->tileheight);	cp->numtiles = cp->numhtiles * cp->numvtiles;	if (ilyrrates && numilyrrates > 0) {		tcp->numlyrs = numilyrrates + 1;		if (!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *		  sizeof(jpc_fix_t)))) {			goto error;		}		for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1); ++i) {			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);		}	}	/* Ensure that the integer mode is used in the case of lossless	  coding. */	if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)) {		jas_eprintf("cannot use real mode for lossless coding\n");		goto error;	}	/* Ensure that the precinct width is valid. */	if (prcwidthexpn > 15) {		jas_eprintf("invalid precinct width\n");		goto error;	}	/* Ensure that the precinct height is valid. */	if (prcheightexpn > 15) {		jas_eprintf("invalid precinct height\n");		goto error;	}	/* Ensure that the code block width is valid. */	if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12) {		jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn));		goto error;	}	/* Ensure that the code block height is valid. */	if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12) {		jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn));		goto error;	}	/* Ensure that the code block size is not too large. */	if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12) {		jas_eprintf("code block size too large\n");		goto error;	}	/* Ensure that the number of layers is valid. */	if (cp->tcp.numlyrs > 16384) {		jas_eprintf("too many layers\n");		goto error;	}	/* There must be at least one resolution level. */	if (cp->tccp.maxrlvls < 1) {		jas_eprintf("must be at least one resolution level\n");		goto error;	}	/* Ensure that the number of guard bits is valid. */	if (cp->tccp.numgbits > 8) {		jas_eprintf("invalid number of guard bits\n");		goto error;	}	/* Ensure that the rate is within the legal range. */	if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize) {		jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);	}	/* Ensure that the intermediate layer rates are valid. */	if (tcp->numlyrs > 1) {		/* The intermediate layers rates must increase monotonically. */		for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}		/* The intermediate layer rates must be less than the overall rate. */		if (cp->totalsize != UINT_FAST32_MAX) {			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}	}	if (ilyrrates) {		jas_free(ilyrrates);	}	return cp;error:	if (ilyrrates) {		jas_free(ilyrrates);	}	if (tvp) {		jas_tvparser_destroy(tvp);	}	if (cp) {		jpc_enc_cp_destroy(cp);	}	return 0;}
jpc_enc_cp_t *cp;
jpc_enc_cp_t *cp;
jpc_enc_cp_t
jpc_enc_cp_t
*cp
*
cp
jas_tvparser_t *tvp;
jas_tvparser_t *tvp;
jas_tvparser_t
jas_tvparser_t
*tvp
*
tvp
int ret;
int ret;
int
ret
ret
int numilyrrates;
int numilyrrates;
int
numilyrrates
numilyrrates
double *ilyrrates;
double *ilyrrates;
double
*ilyrrates
*
ilyrrates
int i;
int i;
int
i
i
int tagid;
int tagid;
int
tagid
tagid
jpc_enc_tcp_t *tcp;
jpc_enc_tcp_t *tcp;
jpc_enc_tcp_t
jpc_enc_tcp_t
*tcp
*
tcp
jpc_enc_tccp_t *tccp;
jpc_enc_tccp_t *tccp;
jpc_enc_tccp_t
jpc_enc_tccp_t
*tccp
*
tccp
jpc_enc_ccp_t *ccp;
jpc_enc_ccp_t *ccp;
jpc_enc_ccp_t
jpc_enc_ccp_t
*ccp
*
ccp
int cmptno;
int cmptno;
int
cmptno
cmptno
uint_fast16_t rlvlno;
uint_fast16_t rlvlno;
uint_fast16_t
uint_fast16_t
rlvlno
rlvlno
uint_fast16_t prcwidthexpn;
uint_fast16_t prcwidthexpn;
uint_fast16_t
uint_fast16_t
prcwidthexpn
prcwidthexpn
uint_fast16_t prcheightexpn;
uint_fast16_t prcheightexpn;
uint_fast16_t
uint_fast16_t
prcheightexpn
prcheightexpn
bool enablemct;
bool enablemct;
bool
enablemct
enablemct
uint_fast32_t jp2overhead;
uint_fast32_t jp2overhead;
uint_fast32_t
uint_fast32_t
jp2overhead
jp2overhead
uint_fast16_t lyrno;
uint_fast16_t lyrno;
uint_fast16_t
uint_fast16_t
lyrno
lyrno
uint_fast32_t hsteplcm;
uint_fast32_t hsteplcm;
uint_fast32_t
uint_fast32_t
hsteplcm
hsteplcm
uint_fast32_t vsteplcm;
uint_fast32_t vsteplcm;
uint_fast32_t
uint_fast32_t
vsteplcm
vsteplcm
bool mctvalid;
bool mctvalid;
bool
mctvalid
mctvalid
tvp = 0;
tvp = 0
tvp
tvp
0
cp = 0;
cp = 0
cp
cp
0
ilyrrates = 0;
ilyrrates = 0
ilyrrates
ilyrrates
0
numilyrrates = 0;
numilyrrates = 0
numilyrrates
numilyrrates
0
if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))) {		goto error;	}
!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))
(cp = jas_malloc(sizeof(jpc_enc_cp_t)))
cp = jas_malloc(sizeof(jpc_enc_cp_t))
cp
cp
jas_malloc(sizeof(jpc_enc_cp_t))
jas_malloc
jas_malloc
sizeof(jpc_enc_cp_t)
jpc_enc_cp_t
jpc_enc_cp_t
jpc_enc_cp_t

{		goto error;	}
goto error;
error
prcwidthexpn = 15;
prcwidthexpn = 15
prcwidthexpn
prcwidthexpn
15
prcheightexpn = 15;
prcheightexpn = 15
prcheightexpn
prcheightexpn
15
enablemct = true;
enablemct = true
enablemct
enablemct
true
jp2overhead = 0;
jp2overhead = 0
jp2overhead
jp2overhead
0
cp->ccps = 0;
cp->ccps = 0
cp->ccps
cp
cp
ccps
0
cp->debug = 0;
cp->debug = 0
cp->debug
cp
cp
debug
0
cp->imgareatlx = UINT_FAST32_MAX;
cp->imgareatlx = UINT_FAST32_MAX
cp->imgareatlx
cp
cp
imgareatlx
UINT_FAST32_MAX
UINT_FAST32_MAX
cp->imgareatly = UINT_FAST32_MAX;
cp->imgareatly = UINT_FAST32_MAX
cp->imgareatly
cp
cp
imgareatly
UINT_FAST32_MAX
UINT_FAST32_MAX
cp->refgrdwidth = 0;
cp->refgrdwidth = 0
cp->refgrdwidth
cp
cp
refgrdwidth
0
cp->refgrdheight = 0;
cp->refgrdheight = 0
cp->refgrdheight
cp
cp
refgrdheight
0
cp->tilegrdoffx = UINT_FAST32_MAX;
cp->tilegrdoffx = UINT_FAST32_MAX
cp->tilegrdoffx
cp
cp
tilegrdoffx
UINT_FAST32_MAX
UINT_FAST32_MAX
cp->tilegrdoffy = UINT_FAST32_MAX;
cp->tilegrdoffy = UINT_FAST32_MAX
cp->tilegrdoffy
cp
cp
tilegrdoffy
UINT_FAST32_MAX
UINT_FAST32_MAX
cp->tilewidth = 0;
cp->tilewidth = 0
cp->tilewidth
cp
cp
tilewidth
0
cp->tileheight = 0;
cp->tileheight = 0
cp->tileheight
cp
cp
tileheight
0
cp->numcmpts = jas_image_numcmpts(image);
cp->numcmpts = jas_image_numcmpts(image)
cp->numcmpts
cp
cp
numcmpts
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
hsteplcm = 1;
hsteplcm = 1
hsteplcm
hsteplcm
1
vsteplcm = 1;
vsteplcm = 1
vsteplcm
vsteplcm
1
for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {		if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {			jas_eprintf("unsupported image type\n");			goto error;		}		/* Note: We ought to be calculating the LCMs here.  Fix some day. */		hsteplcm *= jas_image_cmpthstep(image, cmptno);		vsteplcm *= jas_image_cmptvstep(image, cmptno);	}
cmptno = 0;
cmptno = 0
cmptno
cmptno
0
cmptno < jas_image_numcmpts(image)
cmptno
cmptno
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
++cmptno
cmptno
cmptno
{		if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {			jas_eprintf("unsupported image type\n");			goto error;		}		/* Note: We ought to be calculating the LCMs here.  Fix some day. */		hsteplcm *= jas_image_cmpthstep(image, cmptno);		vsteplcm *= jas_image_cmptvstep(image, cmptno);	}
if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)) {			jas_eprintf("unsupported image type\n");			goto error;		}
jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)
jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=		  jas_image_brx(image)
jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno)
jas_image_cmptbrx(image, cmptno)
jas_image_cmptbrx
jas_image_cmptbrx
image
image
cmptno
cmptno
jas_image_cmpthstep(image, cmptno)
jas_image_cmpthstep
jas_image_cmpthstep
image
image
cmptno
cmptno
jas_image_brx(image)
jas_image_brx
jas_image_brx
image
image
jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)
jas_image_cmptbry(image, cmptno) +		  jas_image_cmptvstep(image, cmptno)
jas_image_cmptbry(image, cmptno)
jas_image_cmptbry
jas_image_cmptbry
image
image
cmptno
cmptno
jas_image_cmptvstep(image, cmptno)
jas_image_cmptvstep
jas_image_cmptvstep
image
image
cmptno
cmptno
jas_image_bry(image)
jas_image_bry
jas_image_bry
image
image
{			jas_eprintf("unsupported image type\n");			goto error;		}
jas_eprintf("unsupported image type\n");
jas_eprintf("unsupported image type\n")
jas_eprintf
jas_eprintf
"unsupported image type\n"
goto error;
error
hsteplcm *= jas_image_cmpthstep(image, cmptno);
hsteplcm *= jas_image_cmpthstep(image, cmptno)
hsteplcm
hsteplcm
jas_image_cmpthstep(image, cmptno)
jas_image_cmpthstep
jas_image_cmpthstep
image
image
cmptno
cmptno
vsteplcm *= jas_image_cmptvstep(image, cmptno);
vsteplcm *= jas_image_cmptvstep(image, cmptno)
vsteplcm
vsteplcm
jas_image_cmptvstep(image, cmptno)
jas_image_cmptvstep
jas_image_cmptvstep
image
image
cmptno
cmptno
if (!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)))) {		goto error;	}
!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)))
(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)))
cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t))
cp->ccps
cp
cp
ccps
jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t))
jas_malloc
jas_malloc
cp->numcmpts * sizeof(jpc_enc_ccp_t)
cp->numcmpts
cp
cp
numcmpts
sizeof(jpc_enc_ccp_t)
jpc_enc_ccp_t
jpc_enc_ccp_t
jpc_enc_ccp_t

{		goto error;	}
goto error;
error
for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts);
++cmptno,	  ++ccp
++cmptno,	  ++ccp
++cmptno
cmptno
cmptno
++ccp
ccp
ccp
p
) {		ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);		ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);		/* XXX - this isn't quite correct for more general image */		ccp->sampgrdsubstepx = 0;		ccp->sampgrdsubstepx = 0;		ccp->prec = jas_image_cmptprec(image, cmptno);		ccp->sgnd = jas_image_cmptsgnd(image, cmptno);		ccp->numstepsizes = 0;		memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));	}
cp->rawsize = jas_image_rawsize(image);
cp->rawsize = jas_image_rawsize(image)
cp->rawsize
cp
cp
rawsize
jas_image_rawsize(image)
jas_image_rawsize
jas_image_rawsize
image
image
cp->totalsize = UINT_FAST32_MAX;
cp->totalsize = UINT_FAST32_MAX
cp->totalsize
cp
cp
totalsize
UINT_FAST32_MAX
UINT_FAST32_MAX
tcp = &cp->tcp;
tcp = &cp->tcp
tcp
tcp
&cp->tcp
cp->tcp
cp
cp
tcp
tcp->csty = 0;
tcp->csty = 0
tcp->csty
tcp
tcp
csty
0
tcp->intmode = true;
tcp->intmode = true
tcp->intmode
tcp
tcp
intmode
true
tcp->prg = JPC_COD_LRCPPRG;
tcp->prg = JPC_COD_LRCPPRG
tcp->prg
tcp
tcp
prg
JPC_COD_LRCPPRG
JPC_COD_LRCPPRG
tcp->numlyrs = 1;
tcp->numlyrs = 1
tcp->numlyrs
tcp
tcp
numlyrs
1
tcp->ilyrrates = 0;
tcp->ilyrrates = 0
tcp->ilyrrates
tcp
tcp
ilyrrates
0
tccp = &cp->tccp;
tccp = &cp->tccp
tccp
tccp
&cp->tccp
cp->tccp
cp
cp
tccp
tccp->csty = 0;
tccp->csty = 0
tccp->csty
tccp
tccp
csty
0
tccp->maxrlvls = 6;
tccp->maxrlvls = 6
tccp->maxrlvls
tccp
tccp
maxrlvls
6
tccp->cblkwidthexpn = 6;
tccp->cblkwidthexpn = 6
tccp->cblkwidthexpn
tccp
tccp
cblkwidthexpn
6
tccp->cblkheightexpn = 6;
tccp->cblkheightexpn = 6
tccp->cblkheightexpn
tccp
tccp
cblkheightexpn
6
tccp->cblksty = 0;
tccp->cblksty = 0
tccp->cblksty
tccp
tccp
cblksty
0
tccp->numgbits = 2;
tccp->numgbits = 2
tccp->numgbits
tccp
tccp
numgbits
2
if (!(tvp = jas_tvparser_create(optstr ? optstr : ""))) {		goto error;	}
!(tvp = jas_tvparser_create(optstr ? optstr : ""))
(tvp = jas_tvparser_create(optstr ? optstr : ""))
tvp = jas_tvparser_create(optstr ? optstr : "")
tvp
tvp
jas_tvparser_create(optstr ? optstr : "")
jas_tvparser_create
jas_tvparser_create
optstr ? optstr : ""
optstr
optstr
optstr
optstr
""
{		goto error;	}
goto error;
error
while (!(ret = jas_tvparser_next(tvp))) {		switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id) {		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}	}
!(ret = jas_tvparser_next(tvp))
(ret = jas_tvparser_next(tvp))
ret = jas_tvparser_next(tvp)
ret
ret
jas_tvparser_next(tvp)
jas_tvparser_next
jas_tvparser_next
tvp
tvp
{		switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id) {		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}	}
switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id) {		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}
jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))->id
jas_taginfo_nonull(jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp)))
jas_taginfo_nonull
jas_taginfo_nonull
jas_taginfos_lookup(encopts,		  jas_tvparser_gettag(tvp))
jas_taginfos_lookup
jas_taginfos_lookup
encopts
encopts
jas_tvparser_gettag(tvp)
jas_tvparser_gettag
jas_tvparser_gettag
tvp
tvp
id
{		case OPT_DEBUG:			cp->debug = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFX:			cp->imgareatlx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_IMGAREAOFFY:			cp->imgareatly = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFX:			cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEGRDOFFY:			cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEWIDTH:			cp->tilewidth = atoi(jas_tvparser_getval(tvp));			break;		case OPT_TILEHEIGHT:			cp->tileheight = atoi(jas_tvparser_getval(tvp));			break;		case OPT_PRCWIDTH:			prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_PRCHEIGHT:			prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKWIDTH:			tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_CBLKHEIGHT:			tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));			break;		case OPT_MODE:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}			break;		case OPT_PRG:			if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}			break;		case OPT_NOMCT:			enablemct = false;			break;		case OPT_MAXRLVLS:			tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));			break;		case OPT_SOP:			cp->tcp.csty |= JPC_COD_SOP;			break;		case OPT_EPH:			cp->tcp.csty |= JPC_COD_EPH;			break;		case OPT_LAZY:			tccp->cblksty |= JPC_COX_LAZY;			break;		case OPT_TERMALL:			tccp->cblksty |= JPC_COX_TERMALL;			break;		case OPT_SEGSYM:			tccp->cblksty |= JPC_COX_SEGSYM;			break;		case OPT_VCAUSAL:			tccp->cblksty |= JPC_COX_VSC;			break;		case OPT_RESET:			tccp->cblksty |= JPC_COX_RESET;			break;		case OPT_PTERM:			tccp->cblksty |= JPC_COX_PTERM;			break;		case OPT_NUMGBITS:			cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));			break;		case OPT_RATE:			if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_ILYRRATES:			if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}			break;		case OPT_JP2OVERHEAD:			jp2overhead = atoi(jas_tvparser_getval(tvp));			break;		default:			jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));			break;		}
case OPT_DEBUG:
OPT_DEBUG
OPT_DEBUG
cp->debug = atoi(jas_tvparser_getval(tvp));
cp->debug = atoi(jas_tvparser_getval(tvp))
cp->debug
cp
cp
debug
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_IMGAREAOFFX:
OPT_IMGAREAOFFX
OPT_IMGAREAOFFX
cp->imgareatlx = atoi(jas_tvparser_getval(tvp));
cp->imgareatlx = atoi(jas_tvparser_getval(tvp))
cp->imgareatlx
cp
cp
imgareatlx
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_IMGAREAOFFY:
OPT_IMGAREAOFFY
OPT_IMGAREAOFFY
cp->imgareatly = atoi(jas_tvparser_getval(tvp));
cp->imgareatly = atoi(jas_tvparser_getval(tvp))
cp->imgareatly
cp
cp
imgareatly
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_TILEGRDOFFX:
OPT_TILEGRDOFFX
OPT_TILEGRDOFFX
cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp));
cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp))
cp->tilegrdoffx
cp
cp
tilegrdoffx
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_TILEGRDOFFY:
OPT_TILEGRDOFFY
OPT_TILEGRDOFFY
cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp));
cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp))
cp->tilegrdoffy
cp
cp
tilegrdoffy
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_TILEWIDTH:
OPT_TILEWIDTH
OPT_TILEWIDTH
cp->tilewidth = atoi(jas_tvparser_getval(tvp));
cp->tilewidth = atoi(jas_tvparser_getval(tvp))
cp->tilewidth
cp
cp
tilewidth
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_TILEHEIGHT:
OPT_TILEHEIGHT
OPT_TILEHEIGHT
cp->tileheight = atoi(jas_tvparser_getval(tvp));
cp->tileheight = atoi(jas_tvparser_getval(tvp))
cp->tileheight
cp
cp
tileheight
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_PRCWIDTH:
OPT_PRCWIDTH
OPT_PRCWIDTH
prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
prcwidthexpn
prcwidthexpn
jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
jpc_floorlog2
jpc_floorlog2
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_PRCHEIGHT:
OPT_PRCHEIGHT
OPT_PRCHEIGHT
prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
prcheightexpn
prcheightexpn
jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
jpc_floorlog2
jpc_floorlog2
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_CBLKWIDTH:
OPT_CBLKWIDTH
OPT_CBLKWIDTH
tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
tccp->cblkwidthexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
tccp->cblkwidthexpn
tccp
tccp
cblkwidthexpn
jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
jpc_floorlog2
jpc_floorlog2
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_CBLKHEIGHT:
OPT_CBLKHEIGHT
OPT_CBLKHEIGHT
tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)));
tccp->cblkheightexpn =			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
tccp->cblkheightexpn
tccp
tccp
cblkheightexpn
jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
jpc_floorlog2
jpc_floorlog2
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_MODE:
OPT_MODE
OPT_MODE
if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->intmode = (tagid == MODE_INT);			}
(tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id) < 0
(tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id)
tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id
tagid
tagid
jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))->id
jas_taginfo_nonull(jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp)))
jas_taginfo_nonull
jas_taginfo_nonull
jas_taginfos_lookup(modetab,			  jas_tvparser_getval(tvp))
jas_taginfos_lookup
jas_taginfos_lookup
modetab
modetab
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
id
0
{				jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));			}
jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp));
jas_eprintf("ignoring invalid mode %s\n",				  jas_tvparser_getval(tvp))
jas_eprintf
jas_eprintf
"ignoring invalid mode %s\n"
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
{				tcp->intmode = (tagid == MODE_INT);			}
tcp->intmode = (tagid == MODE_INT);
tcp->intmode = (tagid == MODE_INT)
tcp->intmode
tcp
tcp
intmode
(tagid == MODE_INT)
tagid == MODE_INT
tagid
tagid
MODE_INT
MODE_INT
break;
case OPT_PRG:
OPT_PRG
OPT_PRG
if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0) {				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			} else {				tcp->prg = tagid;			}
(tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id) < 0
(tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id)
tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id
tagid
tagid
jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))->id
jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp)))
jas_taginfo_nonull
jas_taginfo_nonull
jas_taginfos_lookup(prgordtab,			  jas_tvparser_getval(tvp))
jas_taginfos_lookup
jas_taginfos_lookup
prgordtab
prgordtab
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
id
0
{				jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));			}
jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp));
jas_eprintf("ignoring invalid progression order %s\n",				  jas_tvparser_getval(tvp))
jas_eprintf
jas_eprintf
"ignoring invalid progression order %s\n"
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
{				tcp->prg = tagid;			}
tcp->prg = tagid;
tcp->prg = tagid
tcp->prg
tcp
tcp
prg
tagid
tagid
break;
case OPT_NOMCT:
OPT_NOMCT
OPT_NOMCT
enablemct = false;
enablemct = false
enablemct
enablemct
false
break;
case OPT_MAXRLVLS:
OPT_MAXRLVLS
OPT_MAXRLVLS
tccp->maxrlvls = atoi(jas_tvparser_getval(tvp));
tccp->maxrlvls = atoi(jas_tvparser_getval(tvp))
tccp->maxrlvls
tccp
tccp
maxrlvls
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_SOP:
OPT_SOP
OPT_SOP
cp->tcp.csty |= JPC_COD_SOP;
cp->tcp.csty |= JPC_COD_SOP
cp->tcp.csty
cp->tcp
cp
cp
tcp
csty
JPC_COD_SOP
JPC_COD_SOP
break;
case OPT_EPH:
OPT_EPH
OPT_EPH
cp->tcp.csty |= JPC_COD_EPH;
cp->tcp.csty |= JPC_COD_EPH
cp->tcp.csty
cp->tcp
cp
cp
tcp
csty
JPC_COD_EPH
JPC_COD_EPH
break;
case OPT_LAZY:
OPT_LAZY
OPT_LAZY
tccp->cblksty |= JPC_COX_LAZY;
tccp->cblksty |= JPC_COX_LAZY
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_LAZY
JPC_COX_LAZY
break;
case OPT_TERMALL:
OPT_TERMALL
OPT_TERMALL
tccp->cblksty |= JPC_COX_TERMALL;
tccp->cblksty |= JPC_COX_TERMALL
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_TERMALL
JPC_COX_TERMALL
break;
case OPT_SEGSYM:
OPT_SEGSYM
OPT_SEGSYM
tccp->cblksty |= JPC_COX_SEGSYM;
tccp->cblksty |= JPC_COX_SEGSYM
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_SEGSYM
JPC_COX_SEGSYM
break;
case OPT_VCAUSAL:
OPT_VCAUSAL
OPT_VCAUSAL
tccp->cblksty |= JPC_COX_VSC;
tccp->cblksty |= JPC_COX_VSC
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_VSC
JPC_COX_VSC
break;
case OPT_RESET:
OPT_RESET
OPT_RESET
tccp->cblksty |= JPC_COX_RESET;
tccp->cblksty |= JPC_COX_RESET
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_RESET
JPC_COX_RESET
break;
case OPT_PTERM:
OPT_PTERM
OPT_PTERM
tccp->cblksty |= JPC_COX_PTERM;
tccp->cblksty |= JPC_COX_PTERM
tccp->cblksty
tccp
tccp
cblksty
JPC_COX_PTERM
JPC_COX_PTERM
break;
case OPT_NUMGBITS:
OPT_NUMGBITS
OPT_NUMGBITS
cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp));
cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp))
cp->tccp.numgbits
cp->tccp
cp
cp
tccp
numgbits
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_RATE:
OPT_RATE
OPT_RATE
if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)) {				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}
ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,			  &cp->totalsize)
ratestrtosize
ratestrtosize
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
cp->rawsize
cp
cp
rawsize
&cp->totalsize
cp->totalsize
cp
cp
totalsize
{				jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));			}
jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp));
jas_eprintf("ignoring bad rate specifier %s\n",				  jas_tvparser_getval(tvp))
jas_eprintf
jas_eprintf
"ignoring bad rate specifier %s\n"
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_ILYRRATES:
OPT_ILYRRATES
OPT_ILYRRATES
if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)) {				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}
jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,			  &ilyrrates)
jpc_atoaf
jpc_atoaf
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
&numilyrrates
numilyrrates
numilyrrates
&ilyrrates
ilyrrates
ilyrrates
{				jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));			}
jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp));
jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",				  jas_tvparser_getval(tvp))
jas_eprintf
jas_eprintf
"warning: invalid intermediate layer rates specifier ignored (%s)\n"
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
case OPT_JP2OVERHEAD:
OPT_JP2OVERHEAD
OPT_JP2OVERHEAD
jp2overhead = atoi(jas_tvparser_getval(tvp));
jp2overhead = atoi(jas_tvparser_getval(tvp))
jp2overhead
jp2overhead
atoi(jas_tvparser_getval(tvp))
atoi
atoi
jas_tvparser_getval(tvp)
jas_tvparser_getval
jas_tvparser_getval
tvp
tvp
break;
default:
jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp));
jas_eprintf("warning: ignoring invalid option %s\n",			 jas_tvparser_gettag(tvp))
jas_eprintf
jas_eprintf
"warning: ignoring invalid option %s\n"
jas_tvparser_gettag(tvp)
jas_tvparser_gettag
jas_tvparser_gettag
tvp
tvp
break;
jas_tvparser_destroy(tvp);
jas_tvparser_destroy(tvp)
jas_tvparser_destroy
jas_tvparser_destroy
tvp
tvp
tvp = 0;
tvp = 0
tvp
tvp
0
if (cp->totalsize != UINT_FAST32_MAX) {		cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0;	}
cp->totalsize != UINT_FAST32_MAX
cp->totalsize
cp
cp
totalsize
UINT_FAST32_MAX
UINT_FAST32_MAX
{		cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0;	}
cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0;
cp->totalsize = (cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0
cp->totalsize
cp
cp
totalsize
(cp->totalsize > jp2overhead) ?		  (cp->totalsize - jp2overhead) : 0
(cp->totalsize > jp2overhead)
cp->totalsize > jp2overhead
cp->totalsize
cp
cp
totalsize
jp2overhead
jp2overhead
(cp->totalsize - jp2overhead)
cp->totalsize - jp2overhead
cp->totalsize
cp
cp
totalsize
jp2overhead
jp2overhead
0
if (cp->imgareatlx == UINT_FAST32_MAX) {		cp->imgareatlx = 0;	} else {		if (hsteplcm != 1) {			jas_eprintf("warning: overriding imgareatlx value\n");		}		cp->imgareatlx *= hsteplcm;	}
cp->imgareatlx == UINT_FAST32_MAX
cp->imgareatlx
cp
cp
imgareatlx
UINT_FAST32_MAX
UINT_FAST32_MAX
{		cp->imgareatlx = 0;	}
cp->imgareatlx = 0;
cp->imgareatlx = 0
cp->imgareatlx
cp
cp
imgareatlx
0
{		if (hsteplcm != 1) {			jas_eprintf("warning: overriding imgareatlx value\n");		}		cp->imgareatlx *= hsteplcm;	}
if (hsteplcm != 1) {			jas_eprintf("warning: overriding imgareatlx value\n");		}
hsteplcm != 1
hsteplcm
hsteplcm
1
{			jas_eprintf("warning: overriding imgareatlx value\n");		}
jas_eprintf("warning: overriding imgareatlx value\n");
jas_eprintf("warning: overriding imgareatlx value\n")
jas_eprintf
jas_eprintf
"warning: overriding imgareatlx value\n"
cp->imgareatlx *= hsteplcm;
cp->imgareatlx *= hsteplcm
cp->imgareatlx
cp
cp
imgareatlx
hsteplcm
hsteplcm
if (cp->imgareatly == UINT_FAST32_MAX) {		cp->imgareatly = 0;	} else {		if (vsteplcm != 1) {			jas_eprintf("warning: overriding imgareatly value\n");		}		cp->imgareatly *= vsteplcm;	}
cp->imgareatly == UINT_FAST32_MAX
cp->imgareatly
cp
cp
imgareatly
UINT_FAST32_MAX
UINT_FAST32_MAX
{		cp->imgareatly = 0;	}
cp->imgareatly = 0;
cp->imgareatly = 0
cp->imgareatly
cp
cp
imgareatly
0
{		if (vsteplcm != 1) {			jas_eprintf("warning: overriding imgareatly value\n");		}		cp->imgareatly *= vsteplcm;	}
if (vsteplcm != 1) {			jas_eprintf("warning: overriding imgareatly value\n");		}
vsteplcm != 1
vsteplcm
vsteplcm
1
{			jas_eprintf("warning: overriding imgareatly value\n");		}
jas_eprintf("warning: overriding imgareatly value\n");
jas_eprintf("warning: overriding imgareatly value\n")
jas_eprintf
jas_eprintf
"warning: overriding imgareatly value\n"
cp->imgareatly *= vsteplcm;
cp->imgareatly *= vsteplcm
cp->imgareatly
cp
cp
imgareatly
vsteplcm
vsteplcm
cp->refgrdwidth = cp->imgareatlx + jas_image_width(image);
cp->refgrdwidth = cp->imgareatlx + jas_image_width(image)
cp->refgrdwidth
cp
cp
refgrdwidth
cp->imgareatlx + jas_image_width(image)
cp->imgareatlx
cp
cp
imgareatlx
jas_image_width(image)
jas_image_width
jas_image_width
image
image
cp->refgrdheight = cp->imgareatly + jas_image_height(image);
cp->refgrdheight = cp->imgareatly + jas_image_height(image)
cp->refgrdheight
cp
cp
refgrdheight
cp->imgareatly + jas_image_height(image)
cp->imgareatly
cp
cp
imgareatly
jas_image_height(image)
jas_image_height
jas_image_height
image
image
if (cp->tilegrdoffx == UINT_FAST32_MAX) {		cp->tilegrdoffx = cp->imgareatlx;	}
cp->tilegrdoffx == UINT_FAST32_MAX
cp->tilegrdoffx
cp
cp
tilegrdoffx
UINT_FAST32_MAX
UINT_FAST32_MAX
{		cp->tilegrdoffx = cp->imgareatlx;	}
cp->tilegrdoffx = cp->imgareatlx;
cp->tilegrdoffx = cp->imgareatlx
cp->tilegrdoffx
cp
cp
tilegrdoffx
cp->imgareatlx
cp
cp
imgareatlx
if (cp->tilegrdoffy == UINT_FAST32_MAX) {		cp->tilegrdoffy = cp->imgareatly;	}
cp->tilegrdoffy == UINT_FAST32_MAX
cp->tilegrdoffy
cp
cp
tilegrdoffy
UINT_FAST32_MAX
UINT_FAST32_MAX
{		cp->tilegrdoffy = cp->imgareatly;	}
cp->tilegrdoffy = cp->imgareatly;
cp->tilegrdoffy = cp->imgareatly
cp->tilegrdoffy
cp
cp
tilegrdoffy
cp->imgareatly
cp
cp
imgareatly
if (!cp->tilewidth) {		cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;	}
!cp->tilewidth
cp->tilewidth
cp
cp
tilewidth
{		cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;	}
cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;
cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx
cp->tilewidth
cp
cp
tilewidth
cp->refgrdwidth - cp->tilegrdoffx
cp->refgrdwidth
cp
cp
refgrdwidth
cp->tilegrdoffx
cp
cp
tilegrdoffx
if (!cp->tileheight) {		cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;	}
!cp->tileheight
cp->tileheight
cp
cp
tileheight
{		cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;	}
cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;
cp->tileheight = cp->refgrdheight - cp->tilegrdoffy
cp->tileheight
cp
cp
tileheight
cp->refgrdheight - cp->tilegrdoffy
cp->refgrdheight
cp
cp
refgrdheight
cp->tilegrdoffy
cp
cp
tilegrdoffy
if (cp->numcmpts == 3) {		mctvalid = true;		for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}	} else {		mctvalid = false;	}
cp->numcmpts == 3
cp->numcmpts
cp
cp
numcmpts
3
{		mctvalid = true;		for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}	}
mctvalid = true;
mctvalid = true
mctvalid
mctvalid
true
for (cmptno = 0; cmptno < jas_image_numcmpts(image); ++cmptno) {			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}
cmptno = 0;
cmptno = 0
cmptno
cmptno
0
cmptno < jas_image_numcmpts(image)
cmptno
cmptno
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
++cmptno
cmptno
cmptno
{			if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}		}
if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)) {				mctvalid = false;			}
jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)
jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0)
jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0)
jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0)
jas_image_cmptprec(image, cmptno)
jas_image_cmptprec
jas_image_cmptprec
image
image
cmptno
cmptno
jas_image_cmptprec(image, 0)
jas_image_cmptprec
jas_image_cmptprec
image
image
0
jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0)
jas_image_cmptsgnd(image, cmptno)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
cmptno
cmptno
jas_image_cmptsgnd(image, 0)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
0
jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0)
jas_image_cmptwidth(image, cmptno)
jas_image_cmptwidth
jas_image_cmptwidth
image
image
cmptno
cmptno
jas_image_cmptwidth(image, 0)
jas_image_cmptwidth
jas_image_cmptwidth
image
image
0
jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)
jas_image_cmptheight(image, cmptno)
jas_image_cmptheight
jas_image_cmptheight
image
image
cmptno
cmptno
jas_image_cmptheight(image, 0)
jas_image_cmptheight
jas_image_cmptheight
image
image
0
{				mctvalid = false;			}
mctvalid = false;
mctvalid = false
mctvalid
mctvalid
false
{		mctvalid = false;	}
mctvalid = false;
mctvalid = false
mctvalid
mctvalid
false
if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB) {		jas_eprintf("warning: color space apparently not RGB\n");	}
mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB
mctvalid && enablemct
mctvalid
mctvalid
enablemct
enablemct
jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB
jas_clrspc_fam(jas_image_clrspc(image))
jas_clrspc_fam
jas_clrspc_fam
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
JAS_CLRSPC_FAM_RGB
JAS_CLRSPC_FAM_RGB
{		jas_eprintf("warning: color space apparently not RGB\n");	}
jas_eprintf("warning: color space apparently not RGB\n");
jas_eprintf("warning: color space apparently not RGB\n")
jas_eprintf
jas_eprintf
"warning: color space apparently not RGB\n"
if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB) {		tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);	} else {		tcp->mctid = JPC_MCT_NONE;	}
mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB
mctvalid && enablemct
mctvalid
mctvalid
enablemct
enablemct
jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB
jas_clrspc_fam(jas_image_clrspc(image))
jas_clrspc_fam
jas_clrspc_fam
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
JAS_CLRSPC_FAM_RGB
JAS_CLRSPC_FAM_RGB
{		tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);	}
tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);
tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT)
tcp->mctid
tcp
tcp
mctid
(tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT)
(tcp->intmode)
tcp->intmode
tcp
tcp
intmode
(JPC_MCT_RCT)
JPC_MCT_RCT
JPC_MCT_RCT
(JPC_MCT_ICT)
JPC_MCT_ICT
JPC_MCT_ICT
{		tcp->mctid = JPC_MCT_NONE;	}
tcp->mctid = JPC_MCT_NONE;
tcp->mctid = JPC_MCT_NONE
tcp->mctid
tcp
tcp
mctid
JPC_MCT_NONE
JPC_MCT_NONE
tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS);
tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS)
tccp->qmfbid
tccp
tccp
qmfbid
(tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS)
(tcp->intmode)
tcp->intmode
tcp
tcp
intmode
(JPC_COX_RFT)
JPC_COX_RFT
JPC_COX_RFT
(JPC_COX_INS)
JPC_COX_INS
JPC_COX_INS
for (rlvlno = 0; rlvlno < tccp->maxrlvls; ++rlvlno) {		tccp->prcwidthexpns[rlvlno] = prcwidthexpn;		tccp->prcheightexpns[rlvlno] = prcheightexpn;	}
rlvlno = 0;
rlvlno = 0
rlvlno
rlvlno
0
rlvlno < tccp->maxrlvls
rlvlno
rlvlno
tccp->maxrlvls
tccp
tccp
maxrlvls
++rlvlno
rlvlno
rlvlno
{		tccp->prcwidthexpns[rlvlno] = prcwidthexpn;		tccp->prcheightexpns[rlvlno] = prcheightexpn;	}
tccp->prcwidthexpns[rlvlno] = prcwidthexpn;
tccp->prcwidthexpns[rlvlno] = prcwidthexpn
tccp->prcwidthexpns[rlvlno]
tccp->prcwidthexpns
tccp
tccp
prcwidthexpns
rlvlno
rlvlno
prcwidthexpn
prcwidthexpn
tccp->prcheightexpns[rlvlno] = prcheightexpn;
tccp->prcheightexpns[rlvlno] = prcheightexpn
tccp->prcheightexpns[rlvlno]
tccp->prcheightexpns
tccp
tccp
prcheightexpns
rlvlno
rlvlno
prcheightexpn
prcheightexpn
if (prcwidthexpn != 15 || prcheightexpn != 15) {		tccp->csty |= JPC_COX_PRT;	}
prcwidthexpn != 15 || prcheightexpn != 15
prcwidthexpn != 15
prcwidthexpn
prcwidthexpn
15
prcheightexpn != 15
prcheightexpn
prcheightexpn
15
{		tccp->csty |= JPC_COX_PRT;	}
tccp->csty |= JPC_COX_PRT;
tccp->csty |= JPC_COX_PRT
tccp->csty
tccp
tccp
csty
JPC_COX_PRT
JPC_COX_PRT
if (!cp->tilewidth) {		jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth);		goto error;	}
!cp->tilewidth
cp->tilewidth
cp
cp
tilewidth
{		jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth);		goto error;	}
jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth);
jas_eprintf("invalid tile width %lu\n", (unsigned long)		  cp->tilewidth)
jas_eprintf
jas_eprintf
"invalid tile width %lu\n"
(unsigned long)		  cp->tilewidth
unsigned long
unsigned long

cp->tilewidth
cp
cp
tilewidth
goto error;
error
if (!cp->tileheight) {		jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight);		goto error;	}
!cp->tileheight
cp->tileheight
cp
cp
tileheight
{		jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight);		goto error;	}
jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight);
jas_eprintf("invalid tile height %lu\n", (unsigned long)		  cp->tileheight)
jas_eprintf
jas_eprintf
"invalid tile height %lu\n"
(unsigned long)		  cp->tileheight
unsigned long
unsigned long

cp->tileheight
cp
cp
tileheight
goto error;
error
if (cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly ||	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly) {		jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy);		goto error;	}
cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly ||	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly
cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly ||	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx
cp->tilegrdoffx > cp->imgareatlx ||	  cp->tilegrdoffy > cp->imgareatly
cp->tilegrdoffx > cp->imgareatlx
cp->tilegrdoffx
cp
cp
tilegrdoffx
cp->imgareatlx
cp
cp
imgareatlx
cp->tilegrdoffy > cp->imgareatly
cp->tilegrdoffy
cp
cp
tilegrdoffy
cp->imgareatly
cp
cp
imgareatly
cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx
cp->tilegrdoffx + cp->tilewidth
cp->tilegrdoffx
cp
cp
tilegrdoffx
cp->tilewidth
cp
cp
tilewidth
cp->imgareatlx
cp
cp
imgareatlx
cp->tilegrdoffy + cp->tileheight < cp->imgareatly
cp->tilegrdoffy + cp->tileheight
cp->tilegrdoffy
cp
cp
tilegrdoffy
cp->tileheight
cp
cp
tileheight
cp->imgareatly
cp
cp
imgareatly
{		jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy);		goto error;	}
jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy);
jas_eprintf("invalid tile grid offset (%lu, %lu)\n",		  (unsigned long) cp->tilegrdoffx, (unsigned long)		  cp->tilegrdoffy)
jas_eprintf
jas_eprintf
"invalid tile grid offset (%lu, %lu)\n"
(unsigned long) cp->tilegrdoffx
unsigned long
unsigned long

cp->tilegrdoffx
cp
cp
tilegrdoffx
(unsigned long)		  cp->tilegrdoffy
unsigned long
unsigned long

cp->tilegrdoffy
cp
cp
tilegrdoffy
goto error;
error
cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,	  cp->tilewidth);
cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,	  cp->tilewidth)
cp->numhtiles
cp
cp
numhtiles
JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,	  cp->tilewidth)
JPC_CEILDIV
JPC_CEILDIV
cp->refgrdwidth - cp->tilegrdoffx
cp->refgrdwidth
cp
cp
refgrdwidth
cp->tilegrdoffx
cp
cp
tilegrdoffx
cp->tilewidth
cp
cp
tilewidth
cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,	  cp->tileheight);
cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,	  cp->tileheight)
cp->numvtiles
cp
cp
numvtiles
JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,	  cp->tileheight)
JPC_CEILDIV
JPC_CEILDIV
cp->refgrdheight - cp->tilegrdoffy
cp->refgrdheight
cp
cp
refgrdheight
cp->tilegrdoffy
cp
cp
tilegrdoffy
cp->tileheight
cp
cp
tileheight
cp->numtiles = cp->numhtiles * cp->numvtiles;
cp->numtiles = cp->numhtiles * cp->numvtiles
cp->numtiles
cp
cp
numtiles
cp->numhtiles * cp->numvtiles
cp->numhtiles
cp
cp
numhtiles
cp->numvtiles
cp
cp
numvtiles
if (ilyrrates && numilyrrates > 0) {		tcp->numlyrs = numilyrrates + 1;		if (!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *		  sizeof(jpc_fix_t)))) {			goto error;		}		for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1); ++i) {			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);		}	}
ilyrrates && numilyrrates > 0
ilyrrates
ilyrrates
numilyrrates > 0
numilyrrates
numilyrrates
0
{		tcp->numlyrs = numilyrrates + 1;		if (!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *		  sizeof(jpc_fix_t)))) {			goto error;		}		for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1); ++i) {			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);		}	}
tcp->numlyrs = numilyrrates + 1;
tcp->numlyrs = numilyrrates + 1
tcp->numlyrs
tcp
tcp
numlyrs
numilyrrates + 1
numilyrrates
numilyrrates
1
if (!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *		  sizeof(jpc_fix_t)))) {			goto error;		}
!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *		  sizeof(jpc_fix_t)))
(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *		  sizeof(jpc_fix_t)))
tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *		  sizeof(jpc_fix_t))
tcp->ilyrrates
tcp
tcp
ilyrrates
jas_malloc((tcp->numlyrs - 1) *		  sizeof(jpc_fix_t))
jas_malloc
jas_malloc
(tcp->numlyrs - 1) *		  sizeof(jpc_fix_t)
(tcp->numlyrs - 1)
tcp->numlyrs - 1
tcp->numlyrs
tcp
tcp
numlyrs
1
sizeof(jpc_fix_t)
jpc_fix_t
jpc_fix_t
jpc_fix_t

{			goto error;		}
goto error;
error
for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1);
++i
++i
i
i
i
) {			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);		}
if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)) {		jas_eprintf("cannot use real mode for lossless coding\n");		goto error;	}
cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)
cp->totalsize == UINT_FAST32_MAX
cp->totalsize
cp
cp
totalsize
UINT_FAST32_MAX
UINT_FAST32_MAX
(!cp->tcp.intmode)
!cp->tcp.intmode
cp->tcp.intmode
cp->tcp
cp
cp
tcp
intmode
{		jas_eprintf("cannot use real mode for lossless coding\n");		goto error;	}
jas_eprintf("cannot use real mode for lossless coding\n");
jas_eprintf("cannot use real mode for lossless coding\n")
jas_eprintf
jas_eprintf
"cannot use real mode for lossless coding\n"
goto error;
error
if (prcwidthexpn > 15) {		jas_eprintf("invalid precinct width\n");		goto error;	}
prcwidthexpn > 15
prcwidthexpn
prcwidthexpn
15
{		jas_eprintf("invalid precinct width\n");		goto error;	}
jas_eprintf("invalid precinct width\n");
jas_eprintf("invalid precinct width\n")
jas_eprintf
jas_eprintf
"invalid precinct width\n"
goto error;
error
if (prcheightexpn > 15) {		jas_eprintf("invalid precinct height\n");		goto error;	}
prcheightexpn > 15
prcheightexpn
prcheightexpn
15
{		jas_eprintf("invalid precinct height\n");		goto error;	}
jas_eprintf("invalid precinct height\n");
jas_eprintf("invalid precinct height\n")
jas_eprintf
jas_eprintf
"invalid precinct height\n"
goto error;
error
if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12) {		jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn));		goto error;	}
cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12
cp->tccp.cblkwidthexpn < 2
cp->tccp.cblkwidthexpn
cp->tccp
cp
cp
tccp
cblkwidthexpn
2
cp->tccp.cblkwidthexpn > 12
cp->tccp.cblkwidthexpn
cp->tccp
cp
cp
tccp
cblkwidthexpn
12
{		jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn));		goto error;	}
jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn));
jas_eprintf("invalid code block width %d\n",		  JPC_POW2(cp->tccp.cblkwidthexpn))
jas_eprintf
jas_eprintf
"invalid code block width %d\n"
JPC_POW2(cp->tccp.cblkwidthexpn)
JPC_POW2
JPC_POW2
cp->tccp.cblkwidthexpn
cp->tccp
cp
cp
tccp
cblkwidthexpn
goto error;
error
if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12) {		jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn));		goto error;	}
cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12
cp->tccp.cblkheightexpn < 2
cp->tccp.cblkheightexpn
cp->tccp
cp
cp
tccp
cblkheightexpn
2
cp->tccp.cblkheightexpn > 12
cp->tccp.cblkheightexpn
cp->tccp
cp
cp
tccp
cblkheightexpn
12
{		jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn));		goto error;	}
jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn));
jas_eprintf("invalid code block height %d\n",		  JPC_POW2(cp->tccp.cblkheightexpn))
jas_eprintf
jas_eprintf
"invalid code block height %d\n"
JPC_POW2(cp->tccp.cblkheightexpn)
JPC_POW2
JPC_POW2
cp->tccp.cblkheightexpn
cp->tccp
cp
cp
tccp
cblkheightexpn
goto error;
error
if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12) {		jas_eprintf("code block size too large\n");		goto error;	}
cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12
cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn
cp->tccp.cblkwidthexpn
cp->tccp
cp
cp
tccp
cblkwidthexpn
cp->tccp.cblkheightexpn
cp->tccp
cp
cp
tccp
cblkheightexpn
12
{		jas_eprintf("code block size too large\n");		goto error;	}
jas_eprintf("code block size too large\n");
jas_eprintf("code block size too large\n")
jas_eprintf
jas_eprintf
"code block size too large\n"
goto error;
error
if (cp->tcp.numlyrs > 16384) {		jas_eprintf("too many layers\n");		goto error;	}
cp->tcp.numlyrs > 16384
cp->tcp.numlyrs
cp->tcp
cp
cp
tcp
numlyrs
16384
{		jas_eprintf("too many layers\n");		goto error;	}
jas_eprintf("too many layers\n");
jas_eprintf("too many layers\n")
jas_eprintf
jas_eprintf
"too many layers\n"
goto error;
error
if (cp->tccp.maxrlvls < 1) {		jas_eprintf("must be at least one resolution level\n");		goto error;	}
cp->tccp.maxrlvls < 1
cp->tccp.maxrlvls
cp->tccp
cp
cp
tccp
maxrlvls
1
{		jas_eprintf("must be at least one resolution level\n");		goto error;	}
jas_eprintf("must be at least one resolution level\n");
jas_eprintf("must be at least one resolution level\n")
jas_eprintf
jas_eprintf
"must be at least one resolution level\n"
goto error;
error
if (cp->tccp.numgbits > 8) {		jas_eprintf("invalid number of guard bits\n");		goto error;	}
cp->tccp.numgbits > 8
cp->tccp.numgbits
cp->tccp
cp
cp
tccp
numgbits
8
{		jas_eprintf("invalid number of guard bits\n");		goto error;	}
jas_eprintf("invalid number of guard bits\n");
jas_eprintf("invalid number of guard bits\n")
jas_eprintf
jas_eprintf
"invalid number of guard bits\n"
goto error;
error
if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize) {		jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);	}
cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize
cp->totalsize != UINT_FAST32_MAX
cp->totalsize
cp
cp
totalsize
UINT_FAST32_MAX
UINT_FAST32_MAX
cp->totalsize > cp->rawsize
cp->totalsize
cp
cp
totalsize
cp->rawsize
cp
cp
rawsize
{		jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);	}
jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize);
jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize)
jas_eprintf
jas_eprintf
"warning: specified rate is unreasonably large (%lu > %lu)\n"
(unsigned long) cp->totalsize
unsigned long
unsigned long

cp->totalsize
cp
cp
totalsize
(unsigned long) cp->rawsize
unsigned long
unsigned long

cp->rawsize
cp
cp
rawsize
if (tcp->numlyrs > 1) {		/* The intermediate layers rates must increase monotonically. */		for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}		/* The intermediate layer rates must be less than the overall rate. */		if (cp->totalsize != UINT_FAST32_MAX) {			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}	}
tcp->numlyrs > 1
tcp->numlyrs
tcp
tcp
numlyrs
1
{		/* The intermediate layers rates must increase monotonically. */		for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}		/* The intermediate layer rates must be less than the overall rate. */		if (cp->totalsize != UINT_FAST32_MAX) {			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}	}
for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno) {			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}
lyrno = 0;
lyrno = 0
lyrno
lyrno
0
lyrno + 2 < tcp->numlyrs
lyrno + 2
lyrno
lyrno
2
tcp->numlyrs
tcp
tcp
numlyrs
++lyrno
lyrno
lyrno
{			if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}		}
if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]) {				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}
tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]
tcp->ilyrrates[lyrno]
tcp->ilyrrates
tcp
tcp
ilyrrates
lyrno
lyrno
tcp->ilyrrates[lyrno + 1]
tcp->ilyrrates
tcp
tcp
ilyrrates
lyrno + 1
lyrno
lyrno
1
{				jas_eprintf("intermediate layer rates must increase monotonically\n");				goto error;			}
jas_eprintf("intermediate layer rates must increase monotonically\n");
jas_eprintf("intermediate layer rates must increase monotonically\n")
jas_eprintf
jas_eprintf
"intermediate layer rates must increase monotonically\n"
goto error;
error
if (cp->totalsize != UINT_FAST32_MAX) {			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}
cp->totalsize != UINT_FAST32_MAX
cp->totalsize
cp
cp
totalsize
UINT_FAST32_MAX
UINT_FAST32_MAX
{			for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}		}
for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno) {				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}
lyrno = 0;
lyrno = 0
lyrno
lyrno
0
lyrno < tcp->numlyrs - 1
lyrno
lyrno
tcp->numlyrs - 1
tcp->numlyrs
tcp
tcp
numlyrs
1
++lyrno
lyrno
lyrno
{				if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}			}
if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize) {					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}
jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)				  / cp->rawsize
jpc_fixtodbl(tcp->ilyrrates[lyrno])
jpc_fixtodbl
jpc_fixtodbl
tcp->ilyrrates[lyrno]
tcp->ilyrrates
tcp
tcp
ilyrrates
lyrno
lyrno
((double) cp->totalsize)				  / cp->rawsize
((double) cp->totalsize)
(double) cp->totalsize
double
double

cp->totalsize
cp
cp
totalsize
cp->rawsize
cp
cp
rawsize
{					jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");					goto error;				}
jas_eprintf("warning: intermediate layer rates must be less than overall rate\n");
jas_eprintf("warning: intermediate layer rates must be less than overall rate\n")
jas_eprintf
jas_eprintf
"warning: intermediate layer rates must be less than overall rate\n"
goto error;
error
if (ilyrrates) {		jas_free(ilyrrates);	}
ilyrrates
ilyrrates
{		jas_free(ilyrrates);	}
jas_free(ilyrrates);
jas_free(ilyrrates)
jas_free
jas_free
ilyrrates
ilyrrates
return cp;
cp
cp
error:	if (ilyrrates) {		jas_free(ilyrrates);	}
error
if (ilyrrates) {		jas_free(ilyrrates);	}
ilyrrates
ilyrrates
{		jas_free(ilyrrates);	}
jas_free(ilyrrates);
jas_free(ilyrrates)
jas_free
jas_free
ilyrrates
ilyrrates
if (tvp) {		jas_tvparser_destroy(tvp);	}
tvp
tvp
{		jas_tvparser_destroy(tvp);	}
jas_tvparser_destroy(tvp);
jas_tvparser_destroy(tvp)
jas_tvparser_destroy
jas_tvparser_destroy
tvp
tvp
if (cp) {		jpc_enc_cp_destroy(cp);	}
cp
cp
{		jpc_enc_cp_destroy(cp);	}
jpc_enc_cp_destroy(cp);
jpc_enc_cp_destroy(cp)
jpc_enc_cp_destroy
jpc_enc_cp_destroy
cp
cp
return 0;
0
-----joern-----
(761,1130,0)
(1168,597,0)
(864,543,0)
(385,1290,0)
(551,977,0)
(861,387,0)
(1168,336,0)
(344,1178,0)
(987,635,0)
(118,1128,0)
(551,1002,0)
(848,1178,0)
(761,192,0)
(115,180,0)
(818,103,0)
(1350,69,0)
(135,1178,0)
(394,66,0)
(629,967,0)
(43,977,0)
(1363,1335,0)
(516,1373,0)
(305,657,0)
(566,252,0)
(1290,880,0)
(1070,1383,0)
(744,1349,0)
(329,894,0)
(375,387,0)
(774,420,0)
(1180,358,0)
(981,294,0)
(1168,69,0)
(417,7,0)
(642,1178,0)
(761,416,0)
(932,1144,0)
(306,488,0)
(243,1062,0)
(364,158,0)
(608,835,0)
(1321,1214,0)
(346,624,0)
(205,1062,0)
(1168,68,0)
(457,1124,0)
(481,416,0)
(1384,885,0)
(1079,1374,0)
(268,1178,0)
(1255,585,0)
(1015,1237,0)
(761,1032,0)
(1125,675,0)
(1273,1282,0)
(562,217,0)
(75,593,0)
(1010,517,0)
(519,387,0)
(127,306,0)
(323,155,0)
(1253,630,0)
(543,387,0)
(551,1178,0)
(362,847,0)
(983,1403,0)
(1201,955,0)
(303,494,0)
(1349,904,0)
(1168,416,0)
(205,1060,0)
(864,514,0)
(1024,817,0)
(655,408,0)
(252,835,0)
(1387,378,0)
(1125,817,0)
(1168,955,0)
(551,1162,0)
(368,326,0)
(626,731,0)
(68,771,0)
(824,136,0)
(700,998,0)
(586,579,0)
(952,799,0)
(976,659,0)
(1162,635,0)
(481,942,0)
(796,513,0)
(575,1148,0)
(1076,1249,0)
(484,248,0)
(1288,904,0)
(1242,160,0)
(1168,970,0)
(1350,861,0)
(1385,835,0)
(1045,270,0)
(127,1403,0)
(551,1170,0)
(25,970,0)
(256,663,0)
(551,1256,0)
(834,1102,0)
(336,783,0)
(122,69,0)
(524,19,0)
(1249,1336,0)
(551,1206,0)
(304,991,0)
(225,1394,0)
(1144,615,0)
(259,760,0)
(1201,589,0)
(907,416,0)
(576,674,0)
(818,205,0)
(192,464,0)
(715,1300,0)
(663,742,0)
(55,812,0)
(1263,514,0)
(756,1178,0)
(41,11,0)
(547,1305,0)
(1026,320,0)
(1263,589,0)
(326,1178,0)
(590,879,0)
(735,835,0)
(1100,18,0)
(1378,376,0)
(481,1169,0)
(400,160,0)
(522,1218,0)
(1353,1349,0)
(787,919,0)
(343,758,0)
(531,491,0)
(551,688,0)
(677,387,0)
(436,55,0)
(127,1117,0)
(271,302,0)
(101,1131,0)
(1348,485,0)
(551,1117,0)
(319,206,0)
(560,75,0)
(119,927,0)
(551,192,0)
(1230,217,0)
(1263,1244,0)
(713,767,0)
(703,473,0)
(977,320,0)
(1263,164,0)
(1089,817,0)
(809,669,0)
(389,69,0)
(441,387,0)
(908,69,0)
(256,1170,0)
(1373,516,0)
(296,104,0)
(524,112,0)
(185,381,0)
(1350,192,0)
(320,1178,0)
(1263,760,0)
(1263,336,0)
(1201,416,0)
(1397,1126,0)
(1326,40,0)
(256,1054,0)
(554,127,0)
(500,234,0)
(205,927,0)
(4,543,0)
(280,326,0)
(907,514,0)
(1112,320,0)
(760,1267,0)
(747,1198,0)
(394,309,0)
(447,1400,0)
(481,321,0)
(1094,1178,0)
(1168,314,0)
(503,537,0)
(538,826,0)
(1054,742,0)
(805,857,0)
(30,153,0)
(1171,687,0)
(1168,1032,0)
(551,1367,0)
(905,1113,0)
(1026,66,0)
(1350,1154,0)
(1264,693,0)
(39,1026,0)
(1368,1207,0)
(1263,1403,0)
(1344,1178,0)
(115,284,0)
(357,834,0)
(1190,847,0)
(1350,416,0)
(1168,964,0)
(390,1281,0)
(761,1116,0)
(213,1144,0)
(722,134,0)
(214,125,0)
(991,205,0)
(958,677,0)
(270,1218,0)
(670,492,0)
(928,103,0)
(239,223,0)
(1263,1335,0)
(1349,1344,0)
(1335,706,0)
(929,1050,0)
(1263,306,0)
(740,962,0)
(737,387,0)
(619,224,0)
(1189,1299,0)
(856,541,0)
(1053,962,0)
(1092,676,0)
(403,1394,0)
(1263,321,0)
(970,907,0)
(551,317,0)
(1270,181,0)
(1202,1101,0)
(205,760,0)
(1350,796,0)
(14,1327,0)
(859,1190,0)
(1150,1280,0)
(895,931,0)
(127,1062,0)
(752,155,0)
(1360,69,0)
(1107,1377,0)
(842,412,0)
(1073,600,0)
(551,378,0)
(1341,387,0)
(333,1178,0)
(1203,1083,0)
(1157,817,0)
(962,1299,0)
(1201,1282,0)
(864,1169,0)
(379,768,0)
(551,411,0)
(1403,742,0)
(938,1396,0)
(1168,949,0)
(864,796,0)
(782,205,0)
(864,1197,0)
(864,1244,0)
(965,886,0)
(1104,1226,0)
(567,481,0)
(514,756,0)
(864,589,0)
(1062,426,0)
(655,998,0)
(317,114,0)
(353,768,0)
(1219,648,0)
(551,758,0)
(751,368,0)
(434,1217,0)
(313,411,0)
(127,174,0)
(626,305,0)
(165,1305,0)
(284,750,0)
(1201,69,0)
(761,336,0)
(705,544,0)
(467,1089,0)
(280,952,0)
(481,758,0)
(761,861,0)
(374,1367,0)
(1113,1218,0)
(440,1305,0)
(1209,1138,0)
(1168,701,0)
(67,326,0)
(904,69,0)
(761,68,0)
(559,931,0)
(676,1092,0)
(1259,583,0)
(1263,688,0)
(184,1211,0)
(439,1047,0)
(400,387,0)
(917,600,0)
(1136,1086,0)
(256,1032,0)
(603,473,0)
(38,1176,0)
(901,906,0)
(761,18,0)
(205,514,0)
(521,1400,0)
(90,469,0)
(1350,317,0)
(1372,387,0)
(1325,362,0)
(551,567,0)
(158,387,0)
(969,1272,0)
(481,174,0)
(153,481,0)
(864,861,0)
(1350,1282,0)
(864,1080,0)
(1350,1080,0)
(1065,1014,0)
(619,1182,0)
(1334,64,0)
(492,1290,0)
(1193,1385,0)
(704,156,0)
(687,387,0)
(1263,473,0)
(284,1190,0)
(986,1249,0)
(962,1290,0)
(469,1218,0)
(1135,180,0)
(39,584,0)
(180,1299,0)
(1201,164,0)
(864,375,0)
(26,1313,0)
(1310,1327,0)
(821,187,0)
(739,1219,0)
(348,519,0)
(688,1011,0)
(584,39,0)
(1177,865,0)
(864,18,0)
(638,819,0)
(205,955,0)
(1246,1126,0)
(68,387,0)
(1288,419,0)
(894,329,0)
(1050,845,0)
(1201,409,0)
(297,817,0)
(1324,317,0)
(1201,796,0)
(964,1132,0)
(205,164,0)
(650,669,0)
(1159,835,0)
(1263,68,0)
(761,906,0)
(366,1265,0)
(486,1271,0)
(1360,1137,0)
(761,796,0)
(205,949,0)
(922,1095,0)
(501,187,0)
(256,955,0)
(761,1117,0)
(711,524,0)
(1308,1079,0)
(170,668,0)
(608,155,0)
(274,383,0)
(511,584,0)
(331,204,0)
(1401,735,0)
(755,640,0)
(57,865,0)
(1000,320,0)
(1150,387,0)
(363,1199,0)
(1168,861,0)
(481,1116,0)
(1337,387,0)
(412,1400,0)
(481,964,0)
(955,742,0)
(551,18,0)
(554,687,0)
(189,1233,0)
(879,387,0)
(1350,1169,0)
(845,868,0)
(498,69,0)
(1201,758,0)
(780,69,0)
(568,1153,0)
(470,172,0)
(1112,1039,0)
(551,356,0)
(442,69,0)
(481,409,0)
(1274,585,0)
(740,91,0)
(494,320,0)
(1309,850,0)
(836,804,0)
(1168,663,0)
(317,387,0)
(688,387,0)
(864,491,0)
(1148,387,0)
(376,862,0)
(481,411,0)
(742,877,0)
(598,1218,0)
(365,89,0)
(962,387,0)
(347,1256,0)
(335,585,0)
(205,1256,0)
(412,842,0)
(1075,452,0)
(149,380,0)
(540,836,0)
(127,1080,0)
(468,659,0)
(481,1162,0)
(1316,387,0)
(646,1170,0)
(409,742,0)
(1336,105,0)
(1219,739,0)
(1303,642,0)
(112,69,0)
(285,1200,0)
(887,742,0)
(864,1117,0)
(1231,181,0)
(228,1112,0)
(54,643,0)
(285,765,0)
(1405,931,0)
(1208,518,0)
(1393,362,0)
(256,69,0)
(1399,1263,0)
(137,218,0)
(1261,933,0)
(819,1218,0)
(967,345,0)
(420,774,0)
(1248,69,0)
(1082,1178,0)
(928,1281,0)
(256,164,0)
(1271,783,0)
(177,1138,0)
(1109,841,0)
(659,817,0)
(1247,783,0)
(475,553,0)
(791,1280,0)
(864,949,0)
(1168,1170,0)
(1034,1015,0)
(49,955,0)
(205,1032,0)
(1376,1179,0)
(706,1178,0)
(850,1270,0)
(1350,554,0)
(1335,387,0)
(551,273,0)
(920,974,0)
(384,1057,0)
(1168,1154,0)
(492,1299,0)
(1134,1239,0)
(481,1282,0)
(256,1154,0)
(481,1197,0)
(176,387,0)
(801,441,0)
(954,525,0)
(234,668,0)
(1114,1367,0)
(398,69,0)
(864,580,0)
(1395,1178,0)
(1101,682,0)
(1355,713,0)
(874,628,0)
(935,1089,0)
(877,742,0)
(740,193,0)
(931,895,0)
(256,589,0)
(1182,619,0)
(553,65,0)
(1350,314,0)
(85,701,0)
(551,276,0)
(631,47,0)
(551,760,0)
(127,906,0)
(714,1024,0)
(140,69,0)
(1168,18,0)
(1390,634,0)
(648,326,0)
(843,845,0)
(732,1252,0)
(205,409,0)
(572,1178,0)
(125,847,0)
(1024,1374,0)
(809,302,0)
(466,1011,0)
(92,179,0)
(1105,1378,0)
(631,991,0)
(1170,783,0)
(279,1398,0)
(256,68,0)
(1350,964,0)
(654,69,0)
(197,1030,0)
(551,693,0)
(246,1178,0)
(1350,1170,0)
(712,69,0)
(199,69,0)
(1088,192,0)
(761,970,0)
(818,476,0)
(1341,326,0)
(708,1349,0)
(177,387,0)
(551,436,0)
(1224,583,0)
(1096,782,0)
(1403,404,0)
(551,955,0)
(722,904,0)
(1350,955,0)
(1045,363,0)
(904,1288,0)
(1279,1218,0)
(205,1116,0)
(337,112,0)
(481,543,0)
(1371,495,0)
(256,1335,0)
(522,1137,0)
(202,1047,0)
(565,238,0)
(1059,1302,0)
(1263,1130,0)
(292,1335,0)
(1140,1374,0)
(1069,68,0)
(244,649,0)
(101,951,0)
(586,136,0)
(232,387,0)
(761,306,0)
(256,949,0)
(1269,164,0)
(1102,69,0)
(265,650,0)
(491,387,0)
(566,585,0)
(562,1099,0)
(205,306,0)
(127,1170,0)
(675,1125,0)
(256,174,0)
(1350,597,0)
(387,396,0)
(508,387,0)
(547,387,0)
(864,473,0)
(551,554,0)
(907,760,0)
(1394,66,0)
(97,826,0)
(127,1032,0)
(256,317,0)
(907,1154,0)
(180,387,0)
(536,918,0)
(1196,1178,0)
(1377,294,0)
(1169,387,0)
(432,1396,0)
(256,1080,0)
(455,1047,0)
(332,1084,0)
(907,1116,0)
(432,725,0)
(879,1180,0)
(978,156,0)
(864,597,0)
(156,978,0)
(551,970,0)
(355,1240,0)
(256,1117,0)
(205,1130,0)
(429,346,0)
(205,1403,0)
(18,742,0)
(907,543,0)
(392,1298,0)
(528,927,0)
(1035,681,0)
(142,543,0)
(205,1341,0)
(1350,1060,0)
(1176,38,0)
(862,376,0)
(951,101,0)
(212,320,0)
(600,917,0)
(1263,192,0)
(86,980,0)
(987,783,0)
(203,234,0)
(369,559,0)
(265,904,0)
(532,69,0)
(655,1238,0)
(445,1188,0)
(1281,928,0)
(1311,65,0)
(481,1054,0)
(597,1064,0)
(254,69,0)
(551,1080,0)
(400,305,0)
(960,494,0)
(974,824,0)
(864,760,0)
(1378,1218,0)
(1168,1256,0)
(48,919,0)
(1017,1295,0)
(716,18,0)
(481,164,0)
(127,688,0)
(127,861,0)
(818,339,0)
(267,1218,0)
(1350,321,0)
(1190,387,0)
(16,495,0)
(1042,554,0)
(632,329,0)
(1064,597,0)
(205,1162,0)
(481,1244,0)
(761,1197,0)
(985,964,0)
(761,1080,0)
(385,476,0)
(127,543,0)
(551,964,0)
(820,481,0)
(552,387,0)
(768,6,0)
(959,1178,0)
(732,1218,0)
(7,1178,0)
(339,636,0)
(888,1002,0)
(104,1218,0)
(559,55,0)
(761,597,0)
(426,69,0)
(265,387,0)
(10,387,0)
(1190,284,0)
(589,963,0)
(553,1344,0)
(880,1181,0)
(362,1325,0)
(383,1215,0)
(452,315,0)
(551,164,0)
(1146,1376,0)
(1201,1256,0)
(860,218,0)
(205,174,0)
(1226,387,0)
(127,796,0)
(907,1256,0)
(1322,1209,0)
(127,760,0)
(359,150,0)
(1086,585,0)
(1201,18,0)
(1338,174,0)
(1168,1341,0)
(91,740,0)
(162,69,0)
(312,69,0)
(574,302,0)
(684,816,0)
(1317,774,0)
(396,387,0)
(907,1080,0)
(1128,118,0)
(205,964,0)
(1263,1154,0)
(98,387,0)
(217,817,0)
(227,223,0)
(1033,1086,0)
(13,69,0)
(340,269,0)
(864,567,0)
(1239,387,0)
(320,682,0)
(1325,232,0)
(761,321,0)
(127,701,0)
(759,973,0)
(1377,36,0)
(946,1218,0)
(8,533,0)
(1201,514,0)
(58,927,0)
(1270,850,0)
(487,807,0)
(1357,1010,0)
(183,160,0)
(316,36,0)
(400,650,0)
(864,1335,0)
(783,987,0)
(1275,1099,0)
(1071,1162,0)
(491,205,0)
(378,66,0)
(551,416,0)
(10,1240,0)
(523,786,0)
(808,426,0)
(1168,192,0)
(1259,615,0)
(984,69,0)
(614,450,0)
(208,1131,0)
(833,69,0)
(471,1178,0)
(494,303,0)
(736,419,0)
(302,574,0)
(855,280,0)
(609,69,0)
(1398,1242,0)
(864,411,0)
(480,167,0)
(930,1178,0)
(584,511,0)
(1073,529,0)
(725,1178,0)
(17,196,0)
(147,720,0)
(32,439,0)
(1350,473,0)
(600,1073,0)
(645,488,0)
(907,942,0)
(161,1220,0)
(574,476,0)
(233,387,0)
(879,1011,0)
(907,970,0)
(806,528,0)
(864,906,0)
(782,103,0)
(761,949,0)
(275,428,0)
(907,1282,0)
(525,320,0)
(776,212,0)
(205,1170,0)
(551,225,0)
(362,387,0)
(761,174,0)
(602,978,0)
(407,491,0)
(361,125,0)
(669,809,0)
(723,524,0)
(788,538,0)
(1381,452,0)
(578,648,0)
(419,1288,0)
(1201,1117,0)
(551,1341,0)
(179,387,0)
(265,134,0)
(1174,69,0)
(175,899,0)
(174,1102,0)
(127,663,0)
(551,980,0)
(1019,1222,0)
(1170,608,0)
(551,1060,0)
(1350,949,0)
(1309,817,0)
(765,285,0)
(907,906,0)
(256,688,0)
(481,1403,0)
(276,1327,0)
(1055,1015,0)
(29,1314,0)
(256,1060,0)
(256,796,0)
(771,1178,0)
(643,817,0)
(457,28,0)
(1201,970,0)
(481,1170,0)
(233,537,0)
(127,192,0)
(1056,817,0)
(231,1277,0)
(1220,387,0)
(1327,276,0)
(125,619,0)
(256,597,0)
(481,1256,0)
(1138,1329,0)
(213,70,0)
(127,164,0)
(1201,336,0)
(1122,879,0)
(272,218,0)
(1275,1374,0)
(132,69,0)
(519,305,0)
(1000,1132,0)
(98,826,0)
(1168,1244,0)
(173,601,0)
(1057,387,0)
(71,1394,0)
(496,1128,0)
(549,314,0)
(178,643,0)
(527,1030,0)
(1350,1032,0)
(866,656,0)
(1350,663,0)
(260,1366,0)
(1160,36,0)
(381,1374,0)
(9,882,0)
(488,1178,0)
(1113,905,0)
(48,825,0)
(907,688,0)
(481,955,0)
(696,998,0)
(889,677,0)
(444,222,0)
(23,688,0)
(1263,1162,0)
(993,1297,0)
(761,314,0)
(1138,1238,0)
(1366,1279,0)
(1400,412,0)
(611,817,0)
(354,276,0)
(127,317,0)
(849,1178,0)
(761,1341,0)
(991,631,0)
(155,817,0)
(1190,1336,0)
(256,1162,0)
(565,737,0)
(232,1299,0)
(1143,1001,0)
(1201,663,0)
(782,1222,0)
(1228,69,0)
(551,514,0)
(109,1272,0)
(864,192,0)
(256,321,0)
(66,1172,0)
(213,320,0)
(794,537,0)
(37,1224,0)
(308,309,0)
(551,248,0)
(881,1032,0)
(777,539,0)
(225,583,0)
(568,675,0)
(551,1154,0)
(508,305,0)
(1263,409,0)
(216,873,0)
(1205,400,0)
(770,492,0)
(1263,758,0)
(1168,1282,0)
(726,1150,0)
(345,967,0)
(656,925,0)
(553,134,0)
(539,1265,0)
(551,321,0)
(864,68,0)
(435,1056,0)
(1084,70,0)
(181,1374,0)
(256,964,0)
(205,942,0)
(779,404,0)
(156,1019,0)
(1349,708,0)
(637,1356,0)
(235,1373,0)
(1139,1298,0)
(852,1110,0)
(668,69,0)
(1048,387,0)
(176,834,0)
(595,69,0)
(1034,830,0)
(494,886,0)
(537,233,0)
(90,731,0)
(1211,482,0)
(719,478,0)
(1080,387,0)
(713,387,0)
(996,635,0)
(526,1057,0)
(722,387,0)
(992,409,0)
(597,761,0)
(761,1062,0)
(276,640,0)
(1074,158,0)
(599,1178,0)
(127,68,0)
(283,267,0)
(1060,847,0)
(1209,387,0)
(401,213,0)
(288,379,0)
(641,69,0)
(93,387,0)
(1024,1099,0)
(1018,735,0)
(256,1341,0)
(1206,320,0)
(796,742,0)
(1184,378,0)
(78,381,0)
(494,70,0)
(604,1214,0)
(824,974,0)
(1200,285,0)
(1191,508,0)
(635,423,0)
(1350,970,0)
(864,519,0)
(1168,1060,0)
(256,758,0)
(1350,68,0)
(956,1178,0)
(110,69,0)
(551,68,0)
(569,1226,0)
(991,103,0)
(1160,294,0)
(205,554,0)
(485,585,0)
(256,1169,0)
(1027,987,0)
(564,104,0)
(551,949,0)
(481,18,0)
(256,701,0)
(1127,895,0)
(754,36,0)
(937,552,0)
(256,861,0)
(761,69,0)
(481,1341,0)
(864,1170,0)
(153,387,0)
(1402,1242,0)
(1346,1154,0)
(237,1082,0)
(382,51,0)
(1077,1170,0)
(136,586,0)
(999,1201,0)
(104,296,0)
(1339,977,0)
(515,301,0)
(841,1325,0)
(367,705,0)
(508,979,0)
(534,1177,0)
(841,1109,0)
(739,511,0)
(174,324,0)
(418,1178,0)
(125,387,0)
(885,387,0)
(907,1062,0)
(342,232,0)
(1201,861,0)
(485,817,0)
(205,701,0)
(1226,160,0)
(1183,1249,0)
(182,567,0)
(1350,589,0)
(1148,1267,0)
(1086,817,0)
(460,172,0)
(907,164,0)
(1168,1169,0)
(336,1136,0)
(477,1139,0)
(1263,1341,0)
(761,942,0)
(831,580,0)
(1280,1150,0)
(924,1148,0)
(1289,1060,0)
(861,767,0)
(1352,1252,0)
(303,697,0)
(74,1116,0)
(1350,174,0)
(529,1157,0)
(44,492,0)
(481,1080,0)
(912,416,0)
(1117,886,0)
(1145,307,0)
(256,942,0)
(378,320,0)
(405,782,0)
(834,176,0)
(20,593,0)
(1382,697,0)
(864,306,0)
(127,69,0)
(987,771,0)
(1276,1074,0)
(287,433,0)
(1168,1117,0)
(1272,109,0)
(1139,335,0)
(1000,55,0)
(411,320,0)
(592,410,0)
(56,1356,0)
(330,648,0)
(1396,1311,0)
(656,866,0)
(481,192,0)
(1007,1178,0)
(148,1219,0)
(2,321,0)
(864,1256,0)
(459,527,0)
(885,633,0)
(898,1178,0)
(316,149,0)
(768,379,0)
(1092,722,0)
(256,314,0)
(773,761,0)
(155,608,0)
(512,213,0)
(130,567,0)
(1133,774,0)
(53,188,0)
(674,441,0)
(138,1178,0)
(551,861,0)
(807,387,0)
(481,1032,0)
(1227,460,0)
(1146,946,0)
(551,420,0)
(1099,562,0)
(761,473,0)
(709,894,0)
(1085,385,0)
(927,1178,0)
(310,1102,0)
(868,11,0)
(551,597,0)
(1260,1316,0)
(589,783,0)
(979,879,0)
(241,436,0)
(720,355,0)
(127,321,0)
(358,179,0)
(1350,1062,0)
(587,75,0)
(864,1116,0)
(761,589,0)
(1263,964,0)
(1111,758,0)
(1136,835,0)
(1391,1145,0)
(1040,1060,0)
(907,321,0)
(492,387,0)
(1099,1275,0)
(723,452,0)
(1263,1256,0)
(478,40,0)
(644,1108,0)
(551,1204,0)
(5,176,0)
(1168,1062,0)
(356,387,0)
(1130,783,0)
(109,234,0)
(127,1154,0)
(349,847,0)
(594,1209,0)
(55,559,0)
(528,1095,0)
(897,460,0)
(890,1383,0)
(1168,409,0)
(404,1178,0)
(934,813,0)
(1301,181,0)
(761,1403,0)
(917,1207,0)
(1201,1116,0)
(1026,39,0)
(782,387,0)
(256,436,0)
(127,409,0)
(516,808,0)
(622,278,0)
(705,387,0)
(1312,1157,0)
(551,942,0)
(1201,192,0)
(127,314,0)
(973,177,0)
(864,314,0)
(1168,1054,0)
(1389,1178,0)
(660,1026,0)
(309,1216,0)
(505,52,0)
(227,1178,0)
(1157,529,0)
(1297,1178,0)
(153,1015,0)
(1201,701,0)
(248,387,0)
(972,1034,0)
(143,1333,0)
(278,396,0)
(211,1302,0)
(753,607,0)
(380,1218,0)
(871,233,0)
(127,1116,0)
(1350,906,0)
(472,594,0)
(302,271,0)
(125,1336,0)
(1279,1366,0)
(19,1178,0)
(193,933,0)
(864,1060,0)
(1253,544,0)
(127,1197,0)
(283,612,0)
(1164,69,0)
(481,589,0)
(864,1130,0)
(605,538,0)
(205,336,0)
(864,409,0)
(667,352,0)
(551,1244,0)
(1031,1080,0)
(481,906,0)
(1337,614,0)
(127,1054,0)
(422,158,0)
(1250,1026,0)
(923,127,0)
(991,706,0)
(205,411,0)
(823,177,0)
(731,69,0)
(598,1228,0)
(493,69,0)
(1262,1244,0)
(1284,69,0)
(328,525,0)
(1166,409,0)
(386,1216,0)
(177,973,0)
(256,1062,0)
(1198,747,0)
(615,1144,0)
(955,1297,0)
(1201,906,0)
(530,69,0)
(76,1341,0)
(1350,1117,0)
(1394,1039,0)
(1350,543,0)
(602,387,0)
(127,1130,0)
(628,874,0)
(551,1054,0)
(761,964,0)
(511,739,0)
(1188,285,0)
(679,283,0)
(64,70,0)
(525,70,0)
(1010,503,0)
(614,1337,0)
(658,1238,0)
(1223,1131,0)
(94,1314,0)
(1074,747,0)
(684,817,0)
(1168,1197,0)
(64,593,0)
(864,336,0)
(864,1206,0)
(761,411,0)
(345,6,0)
(1200,1073,0)
(942,742,0)
(481,796,0)
(1306,69,0)
(256,1244,0)
(952,1017,0)
(489,1000,0)
(1201,760,0)
(467,1278,0)
(155,585,0)
(1263,436,0)
(1108,55,0)
(399,1278,0)
(195,499,0)
(351,69,0)
(1350,1116,0)
(256,970,0)
(1263,69,0)
(481,436,0)
(1108,919,0)
(187,756,0)
(256,336,0)
(1263,701,0)
(721,1226,0)
(451,899,0)
(495,631,0)
(1009,1178,0)
(205,663,0)
(1201,1367,0)
(724,611,0)
(907,1117,0)
(1046,69,0)
(310,819,0)
(673,352,0)
(376,1378,0)
(360,874,0)
(441,674,0)
(1350,1244,0)
(170,832,0)
(1392,1178,0)
(948,1178,0)
(1356,56,0)
(815,69,0)
(761,1170,0)
(907,174,0)
(397,436,0)
(1305,547,0)
(1298,178,0)
(252,566,0)
(218,756,0)
(1365,1401,0)
(1263,1170,0)
(621,630,0)
(864,688,0)
(281,1294,0)
(761,1154,0)
(481,701,0)
(205,597,0)
(266,1169,0)
(975,980,0)
(137,1017,0)
(1257,455,0)
(1253,1280,0)
(1034,767,0)
(65,553,0)
(818,706,0)
(172,460,0)
(479,521,0)
(509,1050,0)
(980,387,0)
(785,783,0)
(225,346,0)
(415,356,0)
(551,519,0)
(1201,473,0)
(1168,1116,0)
(301,870,0)
(153,830,0)
(909,655,0)
(436,320,0)
(205,416,0)
(814,119,0)
(761,164,0)
(907,796,0)
(886,1178,0)
(1204,742,0)
(103,69,0)
(602,1299,0)
(864,554,0)
(1057,1180,0)
(1081,517,0)
(607,585,0)
(864,955,0)
(1067,602,0)
(431,69,0)
(75,1351,0)
(1201,68,0)
(1332,339,0)
(588,1190,0)
(682,1101,0)
(1367,1159,0)
(864,276,0)
(1388,649,0)
(885,326,0)
(128,1178,0)
(1266,64,0)
(180,1290,0)
(84,336,0)
(1263,1282,0)
(864,1062,0)
(205,1197,0)
(830,443,0)
(1168,589,0)
(907,1032,0)
(473,1360,0)
(628,450,0)
(207,1178,0)
(127,949,0)
(998,1178,0)
(38,889,0)
(979,508,0)
(1168,306,0)
(880,1290,0)
(309,308,0)
(828,1124,0)
(1316,307,0)
(1073,1200,0)
(286,46,0)
(212,824,0)
(89,686,0)
(1201,1197,0)
(234,1265,0)
(539,668,0)
(1147,686,0)
(551,906,0)
(551,1116,0)
(746,765,0)
(761,688,0)
(455,817,0)
(205,68,0)
(1128,496,0)
(844,840,0)
(1201,1154,0)
(455,529,0)
(1214,817,0)
(1226,731,0)
(250,1178,0)
(1034,387,0)
(1350,758,0)
(481,473,0)
(1258,306,0)
(381,1270,0)
(423,307,0)
(256,409,0)
(385,631,0)
(192,387,0)
(502,697,0)
(156,464,0)
(758,904,0)
(743,1086,0)
(495,387,0)
(760,387,0)
(1168,473,0)
(1268,1222,0)
(381,817,0)
(1263,970,0)
(899,767,0)
(481,306,0)
(131,1204,0)
(692,598,0)
(205,473,0)
(205,543,0)
(1200,1120,0)
(134,198,0)
(1188,817,0)
(903,69,0)
(393,552,0)
(256,306,0)
(1086,1136,0)
(423,635,0)
(277,816,0)
(661,464,0)
(205,1054,0)
(1161,885,0)
(1168,688,0)
(426,808,0)
(1343,949,0)
(1240,10,0)
(1109,103,0)
(1271,1163,0)
(573,942,0)
(98,326,0)
(911,899,0)
(769,314,0)
(508,731,0)
(862,857,0)
(280,387,0)
(1109,339,0)
(119,528,0)
(1366,108,0)
(220,157,0)
(238,565,0)
(761,1162,0)
(1314,387,0)
(70,1083,0)
(1216,309,0)
(1112,586,0)
(1176,1022,0)
(907,1197,0)
(6,345,0)
(907,554,0)
(107,611,0)
(537,503,0)
(1034,481,0)
(1350,1197,0)
(520,1083,0)
(1226,1104,0)
(648,387,0)
(179,481,0)
(1153,19,0)
(1263,861,0)
(1155,69,0)
(358,1180,0)
(991,339,0)
(1098,1109,0)
(149,316,0)
(219,1178,0)
(761,701,0)
(1372,1138,0)
(798,1344,0)
(1254,1275,0)
(1396,387,0)
(213,886,0)
(551,352,0)
(694,1178,0)
(446,677,0)
(464,1178,0)
(1168,543,0)
(232,1290,0)
(979,65,0)
(1314,464,0)
(900,889,0)
(245,264,0)
(1201,1244,0)
(864,1002,0)
(551,1282,0)
(1354,1048,0)
(1168,1335,0)
(341,1000,0)
(869,375,0)
(388,713,0)
(551,1169,0)
(1199,1215,0)
(159,1112,0)
(635,996,0)
(449,1207,0)
(88,732,0)
(864,1054,0)
(205,1117,0)
(21,283,0)
(261,1178,0)
(196,443,0)
(60,1064,0)
(872,1178,0)
(907,1169,0)
(481,949,0)
(1311,1178,0)
(1364,1403,0)
(561,153,0)
(51,742,0)
(1376,1146,0)
(1270,381,0)
(585,827,0)
(816,870,0)
(230,485,0)
(877,188,0)
(127,1335,0)
(212,66,0)
(383,1061,0)
(307,1316,0)
(727,1215,0)
(710,626,0)
(111,1362,0)
(1072,114,0)
(379,640,0)
(402,599,0)
(1263,955,0)
(127,964,0)
(864,420,0)
(551,491,0)
(300,282,0)
(1020,1178,0)
(1208,408,0)
(1336,978,0)
(1263,18,0)
(1201,1062,0)
(766,69,0)
(653,225,0)
(1294,358,0)
(205,321,0)
(626,160,0)
(1160,832,0)
(906,1263,0)
(179,358,0)
(1037,144,0)
(633,885,0)
(1201,321,0)
(1003,167,0)
(907,1341,0)
(944,1337,0)
(1291,192,0)
(551,1130,0)
(1350,306,0)
(734,265,0)
(689,69,0)
(907,1244,0)
(837,428,0)
(1043,69,0)
(1168,758,0)
(1054,872,0)
(1108,320,0)
(633,1238,0)
(556,7,0)
(1267,69,0)
(781,1188,0)
(205,1080,0)
(1116,383,0)
(256,1130,0)
(807,731,0)
(428,387,0)
(1204,227,0)
(124,188,0)
(1109,706,0)
(919,1108,0)
(307,1145,0)
(1215,727,0)
(70,64,0)
(1185,963,0)
(652,69,0)
(1029,1178,0)
(552,750,0)
(97,973,0)
(428,1344,0)
(1350,1403,0)
(1252,1178,0)
(864,1032,0)
(413,499,0)
(1151,767,0)
(1119,19,0)
(907,589,0)
(782,706,0)
(1168,1130,0)
(1350,760,0)
(1201,1170,0)
(761,317,0)
(551,1403,0)
(701,1039,0)
(1207,917,0)
(949,783,0)
(256,1116,0)
(671,1116,0)
(907,1335,0)
(839,98,0)
(1350,688,0)
(546,1117,0)
(476,385,0)
(783,827,0)
(1124,457,0)
(1132,1178,0)
(1263,543,0)
(127,336,0)
(899,830,0)
(761,554,0)
(205,1169,0)
(476,574,0)
(971,46,0)
(790,232,0)
(460,897,0)
(481,861,0)
(1263,597,0)
(1263,1060,0)
(363,1045,0)
(1305,165,0)
(492,670,0)
(232,631,0)
(854,565,0)
(371,951,0)
(1201,942,0)
(1201,1080,0)
(768,404,0)
(356,750,0)
(127,473,0)
(591,919,0)
(1154,1179,0)
(1,1178,0)
(1206,150,0)
(659,1047,0)
(387,236,0)
(1263,1116,0)
(551,336,0)
(3,508,0)
(1323,870,0)
(596,1178,0)
(1165,1374,0)
(864,416,0)
(458,1383,0)
(758,387,0)
(1131,101,0)
(651,320,0)
(167,1379,0)
(907,1130,0)
(248,1019,0)
(850,1361,0)
(1349,387,0)
(258,317,0)
(1282,742,0)
(642,1218,0)
(756,297,0)
(550,1265,0)
(24,68,0)
(256,554,0)
(103,1362,0)
(1093,1160,0)
(620,601,0)
(1149,179,0)
(1263,796,0)
(1319,283,0)
(665,1178,0)
(42,1206,0)
(838,1178,0)
(1002,1180,0)
(172,886,0)
(301,816,0)
(868,845,0)
(1141,280,0)
(864,1367,0)
(50,193,0)
(1120,1200,0)
(1400,521,0)
(819,310,0)
(1201,949,0)
(899,175,0)
(761,758,0)
(1362,103,0)
(1249,847,0)
(816,816,0)
(747,1074,0)
(1263,942,0)
(169,376,0)
(873,1300,0)
(1347,818,0)
(507,987,0)
(864,1282,0)
(742,1178,0)
(1350,411,0)
(1101,387,0)
(1154,742,0)
(473,387,0)
(816,144,0)
(438,111,0)
(627,905,0)
(1215,1199,0)
(610,789,0)
(1201,306,0)
(1210,1396,0)
(761,1244,0)
(864,495,0)
(273,70,0)
(1129,818,0)
(907,306,0)
(127,1256,0)
(991,387,0)
(524,723,0)
(1180,1178,0)
(1340,807,0)
(1209,326,0)
(1229,212,0)
(864,1048,0)
(1217,634,0)
(156,387,0)
(1234,1228,0)
(907,314,0)
(718,420,0)
(450,628,0)
(263,566,0)
(672,547,0)
(829,865,0)
(285,1188,0)
(302,809,0)
(1050,387,0)
(864,317,0)
(181,817,0)
(141,248,0)
(177,326,0)
(853,1178,0)
(864,248,0)
(1095,817,0)
(481,1130,0)
(813,204,0)
(577,1178,0)
(864,1154,0)
(1268,817,0)
(809,841,0)
(907,964,0)
(761,1054,0)
(205,436,0)
(234,109,0)
(170,1265,0)
(35,842,0)
(179,767,0)
(151,946,0)
(1350,1130,0)
(664,1178,0)
(763,633,0)
(1153,1381,0)
(34,970,0)
(51,864,0)
(1195,1132,0)
(256,18,0)
(1112,66,0)
(846,1218,0)
(1350,336,0)
(1350,164,0)
(730,735,0)
(571,771,0)
(990,1341,0)
(391,273,0)
(1201,1060,0)
(731,90,0)
(1057,1011,0)
(1356,326,0)
(553,387,0)
(127,589,0)
(961,1062,0)
(262,306,0)
(322,69,0)
(616,205,0)
(1017,952,0)
(127,1162,0)
(841,809,0)
(551,174,0)
(1256,178,0)
(453,69,0)
(1201,411,0)
(385,1299,0)
(551,663,0)
(196,1218,0)
(1179,69,0)
(513,1178,0)
(941,1082,0)
(1168,554,0)
(1068,362,0)
(462,544,0)
(152,1108,0)
(205,1335,0)
(454,1032,0)
(1137,1360,0)
(1089,467,0)
(1190,1267,0)
(1018,785,0)
(907,758,0)
(481,336,0)
(247,566,0)
(1241,1381,0)
(793,69,0)
(481,970,0)
(294,1178,0)
(864,701,0)
(967,1218,0)
(1263,411,0)
(307,423,0)
(1350,1335,0)
(1102,310,0)
(218,137,0)
(416,160,0)
(919,48,0)
(768,742,0)
(586,1112,0)
(907,192,0)
(223,227,0)
(355,187,0)
(290,455,0)
(707,69,0)
(1097,1287,0)
(1103,1244,0)
(1349,134,0)
(178,1178,0)
(481,314,0)
(1242,731,0)
(1187,137,0)
(1109,205,0)
(265,1344,0)
(1153,568,0)
(1130,1385,0)
(551,1062,0)
(296,100,0)
(1361,562,0)
(98,1138,0)
(121,1057,0)
(1278,467,0)
(1006,764,0)
(134,526,0)
(897,786,0)
(1167,1337,0)
(1263,1032,0)
(529,455,0)
(693,387,0)
(496,593,0)
(111,1218,0)
(1182,264,0)
(1263,174,0)
(907,409,0)
(698,170,0)
(864,758,0)
(1104,229,0)
(127,416,0)
(1168,317,0)
(1298,1139,0)
(1219,148,0)
(1092,971,0)
(179,830,0)
(1240,355,0)
(0,1178,0)
(127,955,0)
(907,336,0)
(327,1209,0)
(907,1162,0)
(1168,1367,0)
(1350,1054,0)
(1201,1032,0)
(750,284,0)
(1025,1148,0)
(725,432,0)
(864,964,0)
(630,1253,0)
(1109,387,0)
(1056,917,0)
(481,870,0)
(936,551,0)
(118,865,0)
(127,1244,0)
(1350,942,0)
(188,877,0)
(907,68,0)
(485,1348,0)
(205,1154,0)
(229,1104,0)
(845,1050,0)
(36,69,0)
(913,579,0)
(669,650,0)
(205,375,0)
(224,619,0)
(739,649,0)
(735,1018,0)
(305,713,0)
(907,1054,0)
(1091,1178,0)
(205,1282,0)
(318,496,0)
(864,970,0)
(1005,1014,0)
(551,1335,0)
(1314,1019,0)
(256,192,0)
(481,1154,0)
(127,1341,0)
(647,69,0)
(217,562,0)
(864,977,0)
(100,668,0)
(1019,1178,0)
(864,321,0)
(168,765,0)
(270,1045,0)
(525,886,0)
(761,1282,0)
(826,98,0)
(82,1218,0)
(31,408,0)
(1375,1153,0)
(1238,633,0)
(674,1022,0)
(994,69,0)
(548,1316,0)
(865,1178,0)
(907,1170,0)
(1087,1045,0)
(943,1178,0)
(942,1201,0)
(256,416,0)
(551,375,0)
(864,1403,0)
(1064,387,0)
(205,1244,0)
(722,1344,0)
(762,1162,0)
(1038,485,0)
(701,320,0)
(1169,103,0)
(558,1125,0)
(686,89,0)
(1238,655,0)
(1201,1403,0)
(818,387,0)
(1222,782,0)
(551,473,0)
(77,301,0)
(1226,305,0)
(1201,314,0)
(892,98,0)
(626,271,0)
(429,1224,0)
(432,552,0)
(443,830,0)
(1244,599,0)
(314,387,0)
(563,19,0)
(205,758,0)
(1224,429,0)
(1372,326,0)
(87,737,0)
(251,747,0)
(580,1336,0)
(526,134,0)
(1256,387,0)
(1108,1132,0)
(910,723,0)
(1242,387,0)
(158,1074,0)
(878,165,0)
(164,1348,0)
(896,1178,0)
(1201,554,0)
(1168,796,0)
(1188,1047,0)
(675,568,0)
(761,955,0)
(882,583,0)
(218,387,0)
(613,1372,0)
(907,597,0)
(1032,387,0)
(557,175,0)
(1404,1268,0)
(870,1178,0)
(1011,1178,0)
(65,979,0)
(242,640,0)
(792,380,0)
(193,740,0)
(1327,742,0)
(425,177,0)
(1245,242,0)
(137,1187,0)
(210,1048,0)
(1201,317,0)
(503,1010,0)
(205,970,0)
(240,101,0)
(187,387,0)
(11,1277,0)
(1201,1341,0)
(481,269,0)
(424,727,0)
(907,949,0)
(463,592,0)
(1201,1169,0)
(1251,180,0)
(1238,1138,0)
(73,1259,0)
(1350,1367,0)
(1201,174,0)
(971,1092,0)
(150,1044,0)
(1263,1169,0)
(127,1282,0)
(299,1224,0)
(778,164,0)
(745,514,0)
(1214,1321,0)
(127,411,0)
(1168,514,0)
(907,1367,0)
(907,317,0)
(1302,680,0)
(551,1197,0)
(256,473,0)
(957,593,0)
(713,1015,0)
(1331,942,0)
(1330,10,0)
(840,579,0)
(551,796,0)
(713,481,0)
(481,554,0)
(1175,1178,0)
(171,1178,0)
(510,1206,0)
(797,547,0)
(1372,874,0)
(867,1215,0)
(1106,580,0)
(153,767,0)
(1022,674,0)
(298,385,0)
(256,1197,0)
(79,1351,0)
(962,740,0)
(1153,112,0)
(687,554,0)
(1350,1162,0)
(717,1002,0)
(1283,69,0)
(611,1120,0)
(1090,223,0)
(1222,1019,0)
(633,408,0)
(66,394,0)
(297,756,0)
(980,725,0)
(528,144,0)
(334,457,0)
(1381,167,0)
(22,1080,0)
(620,1267,0)
(1131,387,0)
(847,1178,0)
(116,452,0)
(200,1034,0)
(1333,1178,0)
(1173,705,0)
(617,69,0)
(977,48,0)
(127,18,0)
(1117,320,0)
(518,1218,0)
(1394,225,0)
(1116,320,0)
(669,153,0)
(205,796,0)
(795,1178,0)
(180,631,0)
(1218,267,0)
(481,663,0)
(593,1178,0)
(1350,1341,0)
(45,1178,0)
(807,526,0)
(416,387,0)
(11,868,0)
(1263,314,0)
(619,125,0)
(256,514,0)
(772,949,0)
(1168,1403,0)
(335,1139,0)
(623,1130,0)
(427,906,0)
(1356,387,0)
(437,69,0)
(830,69,0)
(166,693,0)
(1292,1178,0)
(535,56,0)
(481,1367,0)
(421,1242,0)
(947,525,0)
(1282,1168,0)
(1299,1178,0)
(915,191,0)
(187,355,0)
(826,97,0)
(799,952,0)
(352,134,0)
(702,38,0)
(1192,39,0)
(1144,213,0)
(1351,75,0)
(810,1178,0)
(1236,583,0)
(127,1367,0)
(907,411,0)
(456,514,0)
(276,1160,0)
(1158,458,0)
(1263,416,0)
(1350,409,0)
(1201,597,0)
(1078,69,0)
(1172,66,0)
(338,119,0)
(350,118,0)
(481,1060,0)
(1036,894,0)
(545,1178,0)
(324,174,0)
(1080,830,0)
(626,387,0)
(1201,1335,0)
(1120,611,0)
(1286,1159,0)
(1249,1183,0)
(643,178,0)
(581,518,0)
(139,589,0)
(883,928,0)
(899,387,0)
(864,693,0)
(18,6,0)
(1014,1311,0)
(802,1197,0)
(1058,1197,0)
(120,1004,0)
(280,1138,0)
(567,387,0)
(625,256,0)
(377,1321,0)
(406,785,0)
(582,1199,0)
(1148,575,0)
(551,314,0)
(291,482,0)
(649,739,0)
(551,1048,0)
(309,394,0)
(894,178,0)
(295,722,0)
(1095,528,0)
(271,1034,0)
(469,90,0)
(481,1335,0)
(693,339,0)
(1386,553,0)
(774,742,0)
(448,701,0)
(205,18,0)
(1201,964,0)
(324,387,0)
(160,1178,0)
(205,906,0)
(997,737,0)
(205,688,0)
(481,68,0)
(1120,659,0)
(952,280,0)
(1285,375,0)
(1213,1256,0)
(1263,1117,0)
(987,387,0)
(39,786,0)
(1014,387,0)
(221,1095,0)
(1243,870,0)
(256,760,0)
(205,317,0)
(256,1282,0)
(655,368,0)
(1369,796,0)
(1321,1374,0)
(372,971,0)
(866,1218,0)
(989,1054,0)
(907,473,0)
(481,514,0)
(1244,742,0)
(1249,1267,0)
(314,731,0)
(1381,1302,0)
(518,1208,0)
(723,1302,0)
(659,1120,0)
(775,1047,0)
(414,270,0)
(917,1056,0)
(400,731,0)
(181,1270,0)
(271,626,0)
(785,1018,0)
(857,862,0)
(1168,164,0)
(1168,411,0)
(1318,861,0)
(106,1178,0)
(1002,387,0)
(1239,1178,0)
(1350,18,0)
(1056,1047,0)
(525,328,0)
(902,1169,0)
(551,543,0)
(127,436,0)
(851,1154,0)
(1263,663,0)
(1198,165,0)
(284,115,0)
(894,387,0)
(761,543,0)
(1325,841,0)
(684,1374,0)
(864,352,0)
(648,1219,0)
(133,656,0)
(127,554,0)
(373,1204,0)
(154,69,0)
(1162,387,0)
(321,1344,0)
(1272,36,0)
(113,238,0)
(678,273,0)
(256,1403,0)
(1275,817,0)
(1156,1279,0)
(1314,115,0)
(916,626,0)
(807,305,0)
(891,668,0)
(1168,436,0)
(1220,1121,0)
(1350,514,0)
(411,1333,0)
(117,51,0)
(33,1054,0)
(737,565,0)
(978,602,0)
(566,817,0)
(62,1178,0)
(834,282,0)
(580,387,0)
(761,1060,0)
(465,597,0)
(691,441,0)
(551,580,0)
(601,1218,0)
(99,1178,0)
(256,1367,0)
(551,495,0)
(850,1309,0)
(555,1178,0)
(683,1178,0)
(650,265,0)
(864,942,0)
(551,701,0)
(761,514,0)
(1168,942,0)
(824,212,0)
(1000,223,0)
(129,1178,0)
(618,768,0)
(876,640,0)
(931,842,0)
(682,320,0)
(995,785,0)
(127,1169,0)
(188,387,0)
(193,1104,0)
(633,998,0)
(27,670,0)
(194,69,0)
(761,409,0)
(1320,336,0)
(1063,1052,0)
(289,663,0)
(1201,543,0)
(884,539,0)
(408,1208,0)
(1361,850,0)
(732,7,0)
(1242,1398,0)
(864,164,0)
(1057,526,0)
(1293,1282,0)
(1401,783,0)
(945,1350,0)
(205,1367,0)
(205,861,0)
(521,1218,0)
(1028,687,0)
(1177,784,0)
(1201,436,0)
(551,409,0)
(761,1169,0)
(1199,363,0)
(757,955,0)
(1316,178,0)
(1298,387,0)
(127,942,0)
(1342,328,0)
(1328,796,0)
(127,514,0)
(1263,317,0)
(1152,315,0)
(375,1138,0)
(1350,436,0)
(1084,320,0)
(256,1256,0)
(946,1146,0)
(592,865,0)
(677,889,0)
(1099,1024,0)
(481,597,0)
(1294,817,0)
(1021,1182,0)
(864,1204,0)
(157,1128,0)
(1060,387,0)
(874,1372,0)
(1209,594,0)
(1084,308,0)
(419,1218,0)
(1039,1178,0)
(95,1275,0)
(722,1092,0)
(953,1178,0)
(615,1259,0)
(59,1109,0)
(893,602,0)
(543,1299,0)
(526,807,0)
(970,742,0)
(136,824,0)
(1225,964,0)
(115,1314,0)
(765,817,0)
(483,112,0)
(738,1064,0)
(153,669,0)
(858,722,0)
(551,1032,0)
(172,70,0)
(968,928,0)
(36,316,0)
(1394,320,0)
(723,167,0)
(1095,1374,0)
(1221,586,0)
(236,387,0)
(215,265,0)
(964,320,0)
(1380,589,0)
(1265,1178,0)
(125,1267,0)
(1032,1290,0)
(978,1336,0)
(905,83,0)
(1296,308,0)
(506,522,0)
(551,306,0)
(346,429,0)
(1026,1039,0)
(928,706,0)
(949,252,0)
(822,400,0)
(232,1325,0)
(420,170,0)
(907,1403,0)
(205,314,0)
(352,387,0)
(72,69,0)
(12,1377,0)
(1383,458,0)
(928,387,0)
(811,551,0)
(497,1113,0)
(606,1178,0)
(668,100,0)
(1201,1130,0)
(1272,294,0)
(1348,835,0)
(114,1178,0)
(1013,1022,0)
(1048,1015,0)
(864,1162,0)
(761,663,0)
(1263,1062,0)
(481,760,0)
(1016,69,0)
(205,528,0)
(1168,760,0)
(697,579,0)
(1263,949,0)
(1197,1350,0)
(1023,494,0)
(1396,432,0)
(733,1117,0)
(713,830,0)
(80,469,0)
(81,335,0)
(544,1253,0)
(362,1267,0)
(864,663,0)
(1373,1218,0)
(1201,1162,0)
(800,861,0)
(428,904,0)
(127,1060,0)
(1383,1070,0)
(10,326,0)
(940,102,0)
(551,51,0)
(864,174,0)
(1179,1376,0)
(63,1298,0)
(926,907,0)
(15,568,0)
(1142,356,0)
(1115,866,0)
(355,720,0)
(370,1181,0)
(907,663,0)
(695,172,0)
(1315,864,0)
(1084,886,0)
(607,1163,0)
(538,756,0)
(433,1178,0)
(602,631,0)
(864,1341,0)
(1381,1153,0)
(163,1101,0)
(1004,1313,0)
(190,579,0)
(1201,688,0)
(1181,880,0)
(212,1039,0)
(662,1397,0)
(1168,1162,0)
(761,1256,0)
(907,955,0)
(179,1015,0)
(1263,906,0)
(816,684,0)
(476,818,0)
(504,319,0)
(1207,817,0)
(1218,846,0)
(1345,156,0)
(1212,10,0)
(538,387,0)
(807,160,0)
(803,786,0)
(720,1218,0)
(311,1039,0)
(165,1198,0)
(962,631,0)
(1168,906,0)
(1367,783,0)
(223,1000,0)
(1235,69,0)
(420,640,0)
(889,38,0)
(1350,1256,0)
(1168,174,0)
(127,597,0)
(1201,1054,0)
(1118,1157,0)
(875,1272,0)
(648,1138,0)
(481,317,0)
(428,837,0)
(982,176,0)
(89,817,0)
(1168,321,0)
(914,1356,0)
(936,1239,0)
(1137,522,0)
(205,589,0)
(164,783,0)
(267,283,0)
(362,1336,0)
(358,1294,0)
(396,278,0)
(907,436,0)
(257,69,0)
(1224,865,0)
(127,758,0)
(686,1047,0)
(1359,1024,0)
(481,693,0)
(395,1168,0)
(1280,1253,0)
(663,433,0)
(950,1252,0)
(1267,620,0)
(728,760,0)
(1307,69,0)
(256,906,0)
(205,1110,0)
(249,1309,0)
(750,1178,0)
(321,387,0)
(761,760,0)
(201,663,0)
(385,387,0)
(1232,684,0)
(368,655,0)
(650,400,0)
(209,614,0)
(732,226,0)
(186,428,0)
(450,614,0)
(191,1041,0)
(528,528,0)
(481,816,0)
(907,861,0)
(1290,69,0)
(1104,193,0)
(145,519,0)
(430,940,0)
(273,320,0)
(1351,865,0)
(1181,1218,0)
(808,516,0)
(963,835,0)
(490,872,0)
(761,1335,0)
(1350,701,0)
(863,615,0)
(562,1361,0)
(1370,321,0)
(514,387,0)
(767,1178,0)
(96,69,0)
(1001,786,0)
(1124,1218,0)
(1278,524,0)
(1263,1197,0)
(699,1150,0)
(782,339,0)
(368,387,0)
(1051,297,0)
(735,1401,0)
(308,1084,0)
(826,538,0)
(1017,137,0)
(100,296,0)
(1052,789,0)
(443,196,0)
(907,69,0)
(570,1401,0)
(1263,1080,0)
(552,432,0)
(1148,847,0)
(1263,554,0)
(551,1014,0)
(126,897,0)
(544,705,0)
(685,583,0)
(409,256,0)
(1062,742,0)
(380,149,0)
(907,1060,0)
(1362,111,0)
(524,1278,0)
(601,620,0)
(1358,368,0)
(741,688,0)
(1066,1178,0)
(481,375,0)
(481,1062,0)
(966,927,0)
(146,962,0)
(602,1290,0)
(508,160,0)
(690,324,0)
(253,804,0)
(180,115,0)
(408,69,0)
(649,387,0)
(879,979,0)
(306,320,0)
(639,233,0)
(61,411,0)
(205,192,0)
(529,1073,0)
(6,69,0)
(864,436,0)
(1263,1367,0)
(474,1017,0)
(1008,706,0)
(256,543,0)
(481,688,0)
(973,97,0)
(906,742,0)
(974,579,0)
(748,294,0)
(842,931,0)
(1222,1268,0)
(649,756,0)
(255,324,0)
(481,1117,0)
(293,416,0)
(325,991,0)
(127,970,0)
(761,436,0)
(1249,387,0)
(553,904,0)
(542,1372,0)
(1049,684,0)
(907,701,0)
(713,305,0)
(172,320,0)
(1194,1084,0)
(907,18,0)
(1168,1080,0)
(157,1218,0)
(256,411,0)
(461,69,0)
(1263,1054,0)
(1022,1176,0)
(666,513,0)
(1034,271,0)
(1012,974,0)
(1128,157,0)
(1186,69,0)
(864,749,0)
(458,1218,0)
(1228,598,0)
(551,589,0)
(697,303,0)
(761,1367,0)
(65,1311,0)
(1197,742,0)
(729,1130,0)
(282,834,0)
(123,1056,0)
(481,491,0)
(988,559,0)
(551,580,1)
(582,363,1)
(539,777,1)
(1252,1352,1)
(674,441,1)
(1168,964,1)
(1346,857,1)
(1201,597,1)
(864,514,1)
(1371,670,1)
(1167,944,1)
(362,1393,1)
(883,56,1)
(277,528,1)
(104,564,1)
(893,1067,1)
(573,1331,1)
(125,847,1)
(655,998,1)
(283,1319,1)
(432,1396,1)
(1201,409,1)
(265,134,1)
(1349,1344,1)
(1173,367,1)
(1042,687,1)
(670,27,1)
(1120,659,1)
(1263,1060,1)
(1226,160,1)
(507,1027,1)
(1350,411,1)
(1298,178,1)
(551,1048,1)
(259,857,1)
(1207,1368,1)
(481,1054,1)
(1369,1328,1)
(400,160,1)
(603,703,1)
(564,891,1)
(191,915,1)
(446,1198,1)
(1201,543,1)
(481,870,1)
(1350,1062,1)
(1255,1274,1)
(354,1327,1)
(895,931,1)
(407,119,1)
(1289,1040,1)
(1276,158,1)
(876,755,1)
(650,265,1)
(1320,84,1)
(1263,317,1)
(256,164,1)
(843,1050,1)
(177,1138,1)
(113,565,1)
(1168,1130,1)
(85,448,1)
(1024,1374,1)
(11,868,1)
(127,1062,1)
(858,372,1)
(297,1051,1)
(586,1221,1)
(551,1341,1)
(481,416,1)
(233,639,1)
(834,1102,1)
(1188,817,1)
(551,663,1)
(481,1062,1)
(341,1204,1)
(453,830,1)
(494,320,1)
(1086,585,1)
(1381,452,1)
(907,1080,1)
(1200,1120,1)
(1344,798,1)
(897,460,1)
(365,1147,1)
(714,1359,1)
(256,1062,1)
(602,893,1)
(205,18,1)
(127,758,1)
(1146,946,1)
(613,1351,1)
(1349,134,1)
(179,387,1)
(1281,390,1)
(864,411,1)
(660,897,1)
(635,423,1)
(424,1215,1)
(331,813,1)
(728,259,1)
(481,1403,1)
(875,969,1)
(947,954,1)
(946,151,1)
(761,1367,1)
(695,126,1)
(691,801,1)
(349,1060,1)
(487,1340,1)
(906,901,1)
(1263,1162,1)
(255,690,1)
(172,320,1)
(1201,321,1)
(870,1323,1)
(1201,760,1)
(232,631,1)
(248,387,1)
(1190,1336,1)
(806,1361,1)
(864,1256,1)
(1245,170,1)
(1190,387,1)
(190,913,1)
(1350,1170,1)
(551,567,1)
(1092,676,1)
(326,67,1)
(741,464,1)
(243,857,1)
(941,237,1)
(1104,229,1)
(1168,1170,1)
(864,1403,1)
(1279,1218,1)
(807,731,1)
(1263,1130,1)
(1201,970,1)
(667,837,1)
(199,1360,1)
(366,550,1)
(864,701,1)
(769,857,1)
(748,981,1)
(521,479,1)
(980,387,1)
(864,314,1)
(1272,36,1)
(481,1116,1)
(761,1060,1)
(478,719,1)
(887,1039,1)
(465,1064,1)
(196,1218,1)
(1394,320,1)
(770,44,1)
(232,1299,1)
(590,1014,1)
(306,1258,1)
(442,1128,1)
(1168,1367,1)
(1141,855,1)
(908,1179,1)
(1201,1117,1)
(928,968,1)
(1263,164,1)
(1026,1039,1)
(495,387,1)
(551,192,1)
(358,179,1)
(907,321,1)
(266,857,1)
(265,734,1)
(554,1042,1)
(316,149,1)
(441,691,1)
(567,387,1)
(857,862,1)
(1350,1054,1)
(551,1032,1)
(1396,387,1)
(1325,232,1)
(1282,1273,1)
(1039,311,1)
(1241,319,1)
(551,164,1)
(655,909,1)
(879,1122,1)
(321,387,1)
(761,949,1)
(765,168,1)
(960,697,1)
(1381,1153,1)
(538,605,1)
(346,429,1)
(1025,924,1)
(1174,731,1)
(1008,1335,1)
(830,443,1)
(638,174,1)
(1005,750,1)
(602,1299,1)
(42,1381,1)
(457,1124,1)
(1259,583,1)
(907,306,1)
(761,1197,1)
(761,192,1)
(1263,964,1)
(551,317,1)
(553,387,1)
(648,326,1)
(699,544,1)
(1321,1214,1)
(228,303,1)
(1168,1060,1)
(604,377,1)
(692,1234,1)
(732,7,1)
(1400,521,1)
(1350,760,1)
(127,701,1)
(525,886,1)
(1378,1218,1)
(61,320,1)
(1353,1183,1)
(631,991,1)
(242,640,1)
(385,298,1)
(179,1015,1)
(127,192,1)
(1398,1242,1)
(455,817,1)
(386,308,1)
(170,668,1)
(1195,964,1)
(1179,1376,1)
(589,783,1)
(585,1255,1)
(172,470,1)
(435,686,1)
(283,679,1)
(502,1382,1)
(1229,586,1)
(551,1117,1)
(234,203,1)
(494,1023,1)
(620,601,1)
(702,889,1)
(1201,663,1)
(818,1129,1)
(834,357,1)
(864,248,1)
(127,1169,1)
(615,1144,1)
(551,589,1)
(559,931,1)
(1263,1282,1)
(1144,213,1)
(592,865,1)
(761,1335,1)
(496,318,1)
(301,515,1)
(1402,631,1)
(127,416,1)
(949,783,1)
(912,1299,1)
(1148,387,1)
(484,141,1)
(1123,286,1)
(436,241,1)
(1244,742,1)
(174,1338,1)
(1263,1116,1)
(136,586,1)
(551,906,1)
(38,889,1)
(481,1335,1)
(1350,758,1)
(890,199,1)
(1239,387,1)
(244,1219,1)
(1350,970,1)
(920,212,1)
(511,739,1)
(1303,1070,1)
(864,1315,1)
(1048,210,1)
(1405,857,1)
(1022,1013,1)
(205,1116,1)
(551,495,1)
(1169,387,1)
(1263,1170,1)
(761,317,1)
(1361,562,1)
(823,425,1)
(979,879,1)
(212,1039,1)
(1079,1308,1)
(345,967,1)
(1201,999,1)
(1104,1226,1)
(30,561,1)
(132,36,1)
(276,354,1)
(864,473,1)
(973,759,1)
(989,33,1)
(127,1060,1)
(946,1218,1)
(181,817,1)
(1350,1256,1)
(859,115,1)
(1053,146,1)
(1168,970,1)
(205,514,1)
(256,409,1)
(406,730,1)
(668,100,1)
(1168,1335,1)
(711,910,1)
(481,174,1)
(907,1256,1)
(982,5,1)
(127,473,1)
(1165,870,1)
(970,25,1)
(428,1344,1)
(885,326,1)
(1054,742,1)
(534,1123,1)
(864,1204,1)
(709,134,1)
(1350,688,1)
(890,493,1)
(1387,1184,1)
(928,103,1)
(291,1211,1)
(51,742,1)
(491,531,1)
(481,1060,1)
(551,276,1)
(256,955,1)
(819,1218,1)
(1153,1375,1)
(1272,294,1)
(987,771,1)
(1261,193,1)
(1168,597,1)
(816,816,1)
(213,70,1)
(807,387,1)
(994,907,1)
(864,567,1)
(782,405,1)
(1347,385,1)
(1109,103,1)
(153,1015,1)
(515,77,1)
(466,688,1)
(395,1282,1)
(296,104,1)
(1168,554,1)
(178,643,1)
(551,949,1)
(841,1109,1)
(98,326,1)
(400,305,1)
(864,317,1)
(856,996,1)
(1102,310,1)
(1016,1350,1)
(118,865,1)
(1147,439,1)
(890,1164,1)
(43,1339,1)
(130,191,1)
(1001,1143,1)
(1150,726,1)
(1168,473,1)
(724,659,1)
(1278,467,1)
(1224,865,1)
(1073,1200,1)
(1168,760,1)
(481,1117,1)
(294,748,1)
(829,1082,1)
(974,1012,1)
(747,1074,1)
(275,1336,1)
(890,994,1)
(899,387,1)
(907,942,1)
(1084,332,1)
(238,565,1)
(864,1116,1)
(1168,317,1)
(77,175,1)
(1394,403,1)
(907,1170,1)
(653,1394,1)
(1185,589,1)
(1080,387,1)
(1258,262,1)
(9,346,1)
(949,772,1)
(265,387,1)
(1081,1010,1)
(508,731,1)
(205,68,1)
(1148,1025,1)
(67,1341,1)
(717,888,1)
(909,368,1)
(500,1272,1)
(1182,619,1)
(1323,1243,1)
(942,742,1)
(1112,159,1)
(481,1256,1)
(1128,496,1)
(1137,522,1)
(626,731,1)
(1350,18,1)
(10,387,1)
(1350,1335,1)
(761,688,1)
(1324,771,1)
(1201,1169,1)
(1350,942,1)
(1018,785,1)
(481,68,1)
(382,109,1)
(1021,1183,1)
(256,964,1)
(978,156,1)
(475,979,1)
(1181,370,1)
(1168,416,1)
(761,970,1)
(34,857,1)
(600,1073,1)
(1134,592,1)
(761,1032,1)
(840,579,1)
(551,1403,1)
(142,1011,1)
(874,1372,1)
(907,1282,1)
(915,301,1)
(722,134,1)
(172,886,1)
(551,543,1)
(256,1282,1)
(205,758,1)
(648,387,1)
(127,1154,1)
(883,1138,1)
(1000,489,1)
(19,563,1)
(1168,906,1)
(205,1170,1)
(914,637,1)
(993,955,1)
(1123,231,1)
(317,387,1)
(877,188,1)
(1351,865,1)
(1249,847,1)
(280,326,1)
(907,1154,1)
(628,450,1)
(722,387,1)
(808,516,1)
(256,970,1)
(1084,886,1)
(647,355,1)
(1360,1137,1)
(907,760,1)
(773,597,1)
(383,1215,1)
(630,1253,1)
(1144,932,1)
(362,387,1)
(1375,1241,1)
(1201,1162,1)
(727,1215,1)
(846,1218,1)
(884,1377,1)
(73,882,1)
(626,305,1)
(1357,1198,1)
(601,173,1)
(851,1346,1)
(298,1085,1)
(1335,387,1)
(551,1335,1)
(214,361,1)
(205,1244,1)
(761,1244,1)
(1032,454,1)
(723,1302,1)
(116,1075,1)
(256,1335,1)
(1138,1238,1)
(1022,674,1)
(1161,655,1)
(929,509,1)
(1298,387,1)
(1092,722,1)
(362,1336,1)
(761,1403,1)
(175,557,1)
(866,1218,1)
(375,387,1)
(1201,1256,1)
(205,942,1)
(1024,714,1)
(563,1119,1)
(256,543,1)
(1158,890,1)
(562,1099,1)
(537,794,1)
(1097,1172,1)
(338,814,1)
(213,320,1)
(492,387,1)
(1268,817,1)
(270,414,1)
(1278,399,1)
(180,1299,1)
(381,78,1)
(1263,701,1)
(187,387,1)
(836,540,1)
(995,406,1)
(938,1210,1)
(551,970,1)
(864,164,1)
(1108,55,1)
(201,404,1)
(1068,232,1)
(385,1290,1)
(761,1054,1)
(217,817,1)
(87,630,1)
(141,481,1)
(1139,1298,1)
(48,919,1)
(847,349,1)
(1355,519,1)
(205,760,1)
(436,320,1)
(687,1028,1)
(1304,1123,1)
(781,445,1)
(1160,294,1)
(807,305,1)
(180,631,1)
(890,132,1)
(292,1363,1)
(86,1311,1)
(718,774,1)
(167,1003,1)
(986,109,1)
(991,103,1)
(235,1062,1)
(119,927,1)
(125,214,1)
(565,737,1)
(415,574,1)
(934,1361,1)
(850,1309,1)
(944,874,1)
(945,1197,1)
(1326,478,1)
(814,1281,1)
(356,1142,1)
(907,964,1)
(1260,1162,1)
(864,760,1)
(127,436,1)
(907,554,1)
(409,742,1)
(1263,409,1)
(1367,374,1)
(1168,1162,1)
(774,1133,1)
(626,710,1)
(180,387,1)
(1090,1000,1)
(494,886,1)
(1350,945,1)
(1026,1250,1)
(371,101,1)
(864,1169,1)
(149,380,1)
(193,740,1)
(183,416,1)
(234,1265,1)
(907,1197,1)
(170,698,1)
(526,1057,1)
(642,1303,1)
(1002,717,1)
(1118,455,1)
(1034,481,1)
(551,1130,1)
(508,160,1)
(706,1008,1)
(768,618,1)
(1302,211,1)
(1074,1276,1)
(440,547,1)
(809,669,1)
(907,688,1)
(400,1205,1)
(844,136,1)
(1350,317,1)
(1123,1390,1)
(205,1282,1)
(267,283,1)
(999,942,1)
(1201,317,1)
(285,1188,1)
(962,387,1)
(18,716,1)
(321,1370,1)
(481,861,1)
(1116,320,1)
(891,857,1)
(725,432,1)
(905,1113,1)
(50,574,1)
(1263,1032,1)
(508,305,1)
(720,1218,1)
(519,145,1)
(92,1002,1)
(782,339,1)
(276,1327,1)
(281,179,1)
(761,589,1)
(122,904,1)
(864,1244,1)
(1073,529,1)
(127,1117,1)
(287,663,1)
(181,1374,1)
(381,817,1)
(586,1112,1)
(127,923,1)
(1109,387,1)
(967,1218,1)
(1111,857,1)
(792,754,1)
(791,1150,1)
(33,1297,1)
(18,742,1)
(271,626,1)
(1350,416,1)
(1330,187,1)
(205,1154,1)
(551,225,1)
(158,387,1)
(1350,597,1)
(455,1047,1)
(481,411,1)
(1168,1282,1)
(523,594,1)
(632,894,1)
(963,1185,1)
(1381,1302,1)
(256,942,1)
(458,1218,1)
(864,416,1)
(303,697,1)
(1381,1241,1)
(212,776,1)
(234,668,1)
(1099,1275,1)
(649,756,1)
(10,1212,1)
(1332,693,1)
(239,1000,1)
(894,1036,1)
(218,756,1)
(205,1367,1)
(356,387,1)
(761,436,1)
(1376,1146,1)
(1168,1197,1)
(205,1054,1)
(722,295,1)
(236,387,1)
(763,885,1)
(211,1059,1)
(1382,579,1)
(272,860,1)
(678,391,1)
(619,224,1)
(690,857,1)
(629,18,1)
(824,212,1)
(525,947,1)
(481,1244,1)
(1000,55,1)
(256,1367,1)
(130,301,1)
(584,39,1)
(633,763,1)
(713,481,1)
(481,1367,1)
(127,1032,1)
(1350,1403,1)
(1388,244,1)
(419,736,1)
(1281,928,1)
(153,767,1)
(598,692,1)
(256,411,1)
(516,1373,1)
(125,1267,1)
(819,638,1)
(1120,611,1)
(1131,208,1)
(70,64,1)
(551,1062,1)
(1176,1022,1)
(412,1400,1)
(1135,1251,1)
(256,192,1)
(320,682,1)
(894,178,1)
(542,613,1)
(983,513,1)
(480,329,1)
(256,306,1)
(551,955,1)
(481,955,1)
(153,830,1)
(869,56,1)
(302,271,1)
(518,1218,1)
(1263,949,1)
(907,1054,1)
(524,711,1)
(503,537,1)
(1168,758,1)
(936,551,1)
(940,430,1)
(290,917,1)
(524,112,1)
(990,76,1)
(546,733,1)
(1263,1399,1)
(481,321,1)
(1056,817,1)
(1095,1374,1)
(1193,1130,1)
(495,16,1)
(1354,175,1)
(614,209,1)
(1168,395,1)
(951,371,1)
(1372,1138,1)
(1160,36,1)
(722,1344,1)
(551,796,1)
(1350,1341,1)
(1280,1150,1)
(1115,133,1)
(1397,662,1)
(205,375,1)
(324,387,1)
(1002,387,1)
(907,1335,1)
(1241,723,1)
(1201,1032,1)
(1270,381,1)
(442,457,1)
(481,375,1)
(155,817,1)
(1201,688,1)
(571,68,1)
(405,1096,1)
(399,467,1)
(1151,861,1)
(1263,942,1)
(256,1341,1)
(1254,95,1)
(481,701,1)
(818,103,1)
(481,1162,1)
(1201,554,1)
(7,556,1)
(508,3,1)
(416,293,1)
(1249,387,1)
(1222,1268,1)
(1220,161,1)
(1259,615,1)
(492,1290,1)
(594,472,1)
(227,223,1)
(689,1290,1)
(1145,1391,1)
(163,1202,1)
(179,1149,1)
(1226,305,1)
(801,38,1)
(826,538,1)
(861,1318,1)
(176,387,1)
(720,147,1)
(864,1162,1)
(1350,1032,1)
(54,1256,1)
(271,1034,1)
(1350,955,1)
(256,514,1)
(205,1335,1)
(443,196,1)
(597,1064,1)
(205,861,1)
(1034,1015,1)
(1275,1254,1)
(256,1162,1)
(49,757,1)
(796,742,1)
(1238,633,1)
(1123,1261,1)
(202,452,1)
(1172,66,1)
(493,408,1)
(761,411,1)
(780,761,1)
(1038,164,1)
(481,816,1)
(1234,857,1)
(649,1388,1)
(309,1216,1)
(36,316,1)
(58,178,1)
(481,1080,1)
(4,142,1)
(800,706,1)
(278,622,1)
(1142,415,1)
(1263,18,1)
(871,1357,1)
(1294,281,1)
(746,1188,1)
(907,970,1)
(1093,276,1)
(1177,865,1)
(218,387,1)
(987,635,1)
(162,1228,1)
(864,1367,1)
(505,846,1)
(707,6,1)
(1337,1167,1)
(1263,314,1)
(1201,1054,1)
(297,817,1)
(489,341,1)
(355,1240,1)
(551,248,1)
(761,955,1)
(1232,1049,1)
(518,581,1)
(59,1325,1)
(81,1271,1)
(797,747,1)
(687,387,1)
(89,817,1)
(1201,1154,1)
(256,1032,1)
(1074,158,1)
(721,569,1)
(225,583,1)
(205,192,1)
(481,314,1)
(398,426,1)
(890,254,1)
(318,157,1)
(551,861,1)
(127,970,1)
(1220,387,1)
(1350,306,1)
(551,1204,1)
(286,971,1)
(1109,1098,1)
(976,529,1)
(685,1236,1)
(76,756,1)
(1123,331,1)
(391,1351,1)
(111,1218,1)
(256,554,1)
(164,783,1)
(740,962,1)
(911,451,1)
(172,70,1)
(151,1154,1)
(1129,1347,1)
(1394,66,1)
(314,549,1)
(626,387,1)
(404,779,1)
(488,645,1)
(416,387,1)
(1356,914,1)
(907,543,1)
(794,233,1)
(745,335,1)
(1058,802,1)
(223,1000,1)
(890,908,1)
(1242,387,1)
(156,1345,1)
(256,597,1)
(602,631,1)
(551,314,1)
(731,90,1)
(1263,1341,1)
(127,1403,1)
(127,861,1)
(776,1229,1)
(53,887,1)
(456,745,1)
(553,904,1)
(256,174,1)
(611,107,1)
(907,317,1)
(127,1130,1)
(332,1194,1)
(88,1304,1)
(1124,828,1)
(273,320,1)
(1348,485,1)
(928,706,1)
(761,543,1)
(256,625,1)
(1380,1159,1)
(818,339,1)
(551,306,1)
(1298,392,1)
(890,689,1)
(760,387,1)
(127,336,1)
(1201,18,1)
(688,23,1)
(107,724,1)
(761,321,1)
(1263,758,1)
(367,1176,1)
(1188,1047,1)
(1309,817,1)
(1168,192,1)
(1218,267,1)
(551,375,1)
(1098,59,1)
(1316,387,1)
(180,1290,1)
(1035,236,1)
(1350,1244,1)
(1314,1019,1)
(139,1380,1)
(419,1218,1)
(553,1386,1)
(188,124,1)
(1147,1047,1)
(1377,36,1)
(1201,861,1)
(991,706,1)
(470,695,1)
(840,844,1)
(592,463,1)
(1123,1246,1)
(1263,1197,1)
(1168,861,1)
(254,55,1)
(1341,990,1)
(890,1016,1)
(1242,731,1)
(551,1080,1)
(1378,1105,1)
(212,66,1)
(481,1170,1)
(1351,79,1)
(1168,589,1)
(1112,1039,1)
(935,711,1)
(907,436,1)
(1309,249,1)
(212,320,1)
(1350,314,1)
(1052,1063,1)
(1207,817,1)
(713,830,1)
(1171,857,1)
(663,289,1)
(1177,534,1)
(521,1218,1)
(1350,1282,1)
(256,758,1)
(1201,955,1)
(761,760,1)
(739,1219,1)
(205,616,1)
(845,843,1)
(1014,1065,1)
(1286,1367,1)
(485,817,1)
(368,326,1)
(921,897,1)
(551,1206,1)
(1100,857,1)
(1154,742,1)
(1310,14,1)
(256,1154,1)
(1299,1189,1)
(1401,783,1)
(761,1256,1)
(864,796,1)
(14,379,1)
(526,807,1)
(1263,1117,1)
(115,1314,1)
(127,554,1)
(761,861,1)
(551,18,1)
(1168,1403,1)
(1296,1084,1)
(1263,1335,1)
(260,727,1)
(485,230,1)
(68,1069,1)
(256,317,1)
(732,1252,1)
(335,585,1)
(1201,701,1)
(723,910,1)
(280,1141,1)
(902,266,1)
(917,1056,1)
(158,422,1)
(56,1356,1)
(1201,758,1)
(384,352,1)
(127,1162,1)
(529,455,1)
(299,225,1)
(1350,436,1)
(580,387,1)
(64,593,1)
(1364,983,1)
(907,336,1)
(1054,989,1)
(431,668,1)
(137,218,1)
(1159,1286,1)
(387,396,1)
(428,904,1)
(233,387,1)
(539,668,1)
(761,1080,1)
(1263,306,1)
(1338,324,1)
(713,1015,1)
(923,554,1)
(551,356,1)
(127,1282,1)
(1290,880,1)
(179,830,1)
(864,964,1)
(1263,68,1)
(1079,1374,1)
(1263,861,1)
(146,50,1)
(864,409,1)
(186,275,1)
(761,1170,1)
(890,398,1)
(164,1269,1)
(1336,978,1)
(1095,221,1)
(567,182,1)
(1209,326,1)
(565,854,1)
(519,387,1)
(628,874,1)
(1168,409,1)
(1263,1154,1)
(1123,856,1)
(127,164,1)
(761,409,1)
(1247,585,1)
(1034,200,1)
(782,103,1)
(1372,326,1)
(1162,387,1)
(205,543,1)
(540,511,1)
(574,476,1)
(939,732,1)
(1264,1281,1)
(6,345,1)
(1192,1026,1)
(1190,1267,1)
(1095,817,1)
(217,1230,1)
(639,871,1)
(1050,387,1)
(1168,164,1)
(508,387,1)
(75,587,1)
(864,1032,1)
(1062,961,1)
(481,306,1)
(39,786,1)
(1215,1199,1)
(619,125,1)
(761,1341,1)
(768,742,1)
(182,130,1)
(530,1267,1)
(342,271,1)
(1231,562,1)
(919,787,1)
(188,387,1)
(1361,850,1)
(864,554,1)
(643,817,1)
(127,514,1)
(303,494,1)
(1350,514,1)
(152,644,1)
(1201,1060,1)
(1341,387,1)
(1089,817,1)
(1350,68,1)
(481,820,1)
(90,469,1)
(761,473,1)
(1240,10,1)
(1117,546,1)
(439,32,1)
(1168,1341,1)
(998,696,1)
(626,160,1)
(481,758,1)
(1085,708,1)
(336,1320,1)
(822,841,1)
(450,614,1)
(890,72,1)
(1099,1024,1)
(248,484,1)
(528,927,1)
(1157,817,1)
(1210,552,1)
(308,1296,1)
(864,1335,1)
(205,306,1)
(473,603,1)
(459,136,1)
(802,857,1)
(981,236,1)
(1267,620,1)
(343,1111,1)
(761,663,1)
(807,160,1)
(180,1135,1)
(479,447,1)
(907,1341,1)
(1266,1334,1)
(284,115,1)
(127,306,1)
(205,964,1)
(127,314,1)
(552,750,1)
(666,796,1)
(430,119,1)
(220,857,1)
(1188,781,1)
(270,1218,1)
(288,242,1)
(1045,270,1)
(1366,1279,1)
(512,401,1)
(957,20,1)
(1140,1165,1)
(109,234,1)
(621,1253,1)
(1131,387,1)
(759,177,1)
(864,276,1)
(1112,320,1)
(1201,314,1)
(205,554,1)
(872,490,1)
(157,220,1)
(1013,674,1)
(837,428,1)
(1217,434,1)
(1228,598,1)
(441,387,1)
(551,352,1)
(991,387,1)
(813,934,1)
(23,741,1)
(370,1032,1)
(551,491,1)
(1325,362,1)
(118,350,1)
(735,1401,1)
(551,436,1)
(917,1207,1)
(120,539,1)
(762,1071,1)
(1263,192,1)
(1168,1244,1)
(1402,670,1)
(485,585,1)
(177,387,1)
(1112,66,1)
(1130,783,1)
(32,600,1)
(1350,796,1)
(907,861,1)
(888,1019,1)
(1199,363,1)
(205,416,1)
(75,593,1)
(867,857,1)
(175,899,1)
(1056,1047,1)
(127,964,1)
(752,323,1)
(1101,387,1)
(1109,339,1)
(607,753,1)
(1168,955,1)
(127,1367,1)
(757,433,1)
(394,309,1)
(1393,1068,1)
(1103,872,1)
(265,1344,1)
(554,687,1)
(709,837,1)
(358,1294,1)
(205,317,1)
(1403,1364,1)
(397,895,1)
(79,725,1)
(879,387,1)
(899,830,1)
(551,597,1)
(325,304,1)
(551,942,1)
(101,1131,1)
(1048,387,1)
(362,1267,1)
(127,409,1)
(742,877,1)
(547,672,1)
(522,1218,1)
(1270,181,1)
(1128,118,1)
(874,360,1)
(256,1197,1)
(428,387,1)
(551,1054,1)
(1253,544,1)
(115,180,1)
(1123,715,1)
(568,675,1)
(385,631,1)
(256,1117,1)
(232,387,1)
(782,706,1)
(787,1108,1)
(408,1208,1)
(428,186,1)
(1191,879,1)
(637,7,1)
(359,1206,1)
(205,336,1)
(328,1342,1)
(1168,688,1)
(569,740,1)
(97,826,1)
(1206,510,1)
(1160,1093,1)
(156,464,1)
(1201,473,1)
(1181,1218,1)
(786,803,1)
(1239,1134,1)
(974,579,1)
(890,833,1)
(458,1158,1)
(205,1117,1)
(337,857,1)
(548,1260,1)
(760,728,1)
(738,60,1)
(1003,480,1)
(663,742,1)
(1257,290,1)
(256,336,1)
(761,554,1)
(616,491,1)
(380,792,1)
(205,688,1)
(655,408,1)
(892,973,1)
(854,737,1)
(181,1301,1)
(559,988,1)
(1349,387,1)
(94,29,1)
(392,63,1)
(1201,796,1)
(304,495,1)
(1340,1057,1)
(1205,822,1)
(879,1180,1)
(89,365,1)
(372,708,1)
(179,481,1)
(481,164,1)
(1123,610,1)
(881,857,1)
(256,1080,1)
(1244,1262,1)
(1222,782,1)
(1242,421,1)
(1350,964,1)
(1040,160,1)
(962,1299,1)
(740,91,1)
(761,314,1)
(650,400,1)
(1024,817,1)
(816,684,1)
(156,1019,1)
(329,894,1)
(1201,174,1)
(907,1062,1)
(988,369,1)
(890,1306,1)
(761,336,1)
(1382,840,1)
(1148,847,1)
(561,650,1)
(334,1128,1)
(816,870,1)
(127,543,1)
(98,839,1)
(65,553,1)
(355,187,1)
(686,89,1)
(1202,651,1)
(1396,938,1)
(82,599,1)
(1350,409,1)
(1212,1330,1)
(842,412,1)
(205,1256,1)
(173,760,1)
(1086,817,1)
(273,678,1)
(954,1017,1)
(242,1245,1)
(426,808,1)
(1000,320,1)
(203,500,1)
(970,742,1)
(751,1358,1)
(127,174,1)
(551,693,1)
(972,626,1)
(729,608,1)
(834,176,1)
(44,1180,1)
(553,1344,1)
(469,80,1)
(420,774,1)
(205,1169,1)
(885,1384,1)
(433,287,1)
(263,949,1)
(705,387,1)
(921,594,1)
(1263,597,1)
(153,481,1)
(449,1056,1)
(1211,184,1)
(1350,1367,1)
(782,387,1)
(1199,582,1)
(481,942,1)
(761,306,1)
(633,998,1)
(551,378,1)
(1294,817,1)
(379,640,1)
(1246,1397,1)
(1321,1374,1)
(1350,1154,1)
(1265,366,1)
(469,1218,1)
(1017,952,1)
(924,1398,1)
(174,324,1)
(1350,906,1)
(568,15,1)
(598,1218,1)
(1249,1336,1)
(570,1365,1)
(251,1074,1)
(864,68,1)
(208,1223,1)
(225,1394,1)
(97,973,1)
(1359,1275,1)
(991,205,1)
(1238,655,1)
(1168,174,1)
(1263,411,1)
(1274,996,1)
(962,1053,1)
(966,58,1)
(463,921,1)
(761,68,1)
(166,1264,1)
(143,411,1)
(975,86,1)
(205,589,1)
(313,61,1)
(864,1060,1)
(589,139,1)
(723,452,1)
(557,899,1)
(890,846,1)
(127,1335,1)
(379,768,1)
(1123,26,1)
(285,765,1)
(205,906,1)
(754,857,1)
(713,387,1)
(16,1371,1)
(205,1080,1)
(1226,387,1)
(761,1130,1)
(991,339,1)
(566,585,1)
(942,573,1)
(169,1070,1)
(551,519,1)
(656,866,1)
(767,1151,1)
(1130,623,1)
(362,847,1)
(761,1154,1)
(1243,927,1)
(907,589,1)
(1101,163,1)
(1197,742,1)
(906,742,1)
(127,1256,1)
(524,19,1)
(1350,543,1)
(451,205,1)
(352,387,1)
(1046,103,1)
(890,162,1)
(205,949,1)
(1350,192,1)
(460,172,1)
(481,1169,1)
(1183,1249,1)
(1385,1193,1)
(328,525,1)
(1201,1341,1)
(10,326,1)
(633,408,1)
(864,336,1)
(833,127,1)
(1031,857,1)
(381,1374,1)
(864,906,1)
(364,539,1)
(237,1252,1)
(1201,589,1)
(1263,589,1)
(697,579,1)
(510,42,1)
(1227,172,1)
(1208,518,1)
(551,51,1)
(761,1282,1)
(1055,1048,1)
(864,18,1)
(864,192,1)
(253,836,1)
(971,1092,1)
(539,1265,1)
(511,584,1)
(111,438,1)
(39,1192,1)
(1194,378,1)
(464,661,1)
(1108,1132,1)
(964,1225,1)
(123,435,1)
(368,751,1)
(64,1266,1)
(1401,570,1)
(481,317,1)
(1373,235,1)
(525,70,1)
(761,164,1)
(1011,466,1)
(886,965,1)
(531,407,1)
(1304,1177,1)
(307,1316,1)
(907,314,1)
(241,397,1)
(22,1031,1)
(256,436,1)
(608,155,1)
(137,1187,1)
(256,796,1)
(937,980,1)
(421,1402,1)
(1123,1081,1)
(231,11,1)
(864,688,1)
(551,964,1)
(380,1218,1)
(1331,857,1)
(1263,906,1)
(890,780,1)
(353,288,1)
(850,1270,1)
(649,387,1)
(72,256,1)
(481,554,1)
(547,387,1)
(3,1191,1)
(1297,993,1)
(1350,473,1)
(307,1145,1)
(481,473,1)
(955,49,1)
(868,845,1)
(205,473,1)
(1166,992,1)
(529,1157,1)
(1263,970,1)
(81,783,1)
(1060,1289,1)
(1107,12,1)
(492,770,1)
(550,294,1)
(864,1002,1)
(862,376,1)
(308,1084,1)
(205,970,1)
(494,70,1)
(907,926,1)
(879,1011,1)
(301,816,1)
(864,1080,1)
(700,19,1)
(890,712,1)
(256,1169,1)
(1268,1404,1)
(127,1244,1)
(1034,830,1)
(927,966,1)
(842,35,1)
(744,1353,1)
(654,383,1)
(864,1117,1)
(1133,1317,1)
(423,307,1)
(1059,600,1)
(1221,1112,1)
(775,202,1)
(481,1341,1)
(1134,921,1)
(60,857,1)
(551,1169,1)
(1116,671,1)
(1113,1218,1)
(755,227,1)
(256,701,1)
(860,952,1)
(247,263,1)
(147,857,1)
(535,1356,1)
(282,834,1)
(117,382,1)
(932,213,1)
(256,1116,1)
(1082,941,1)
(1060,387,1)
(200,972,1)
(701,320,1)
(154,1201,1)
(127,906,1)
(1201,436,1)
(153,387,1)
(1263,760,1)
(254,905,1)
(785,995,1)
(1269,778,1)
(425,282,1)
(127,663,1)
(452,116,1)
(205,164,1)
(864,580,1)
(659,1047,1)
(1168,1256,1)
(581,31,1)
(1027,1247,1)
(1263,336,1)
(481,409,1)
(205,927,1)
(127,760,1)
(907,174,1)
(368,387,1)
(601,1218,1)
(1143,511,1)
(329,632,1)
(1076,986,1)
(955,742,1)
(1109,205,1)
(509,41,1)
(103,1362,1)
(330,578,1)
(481,970,1)
(1398,279,1)
(1168,411,1)
(958,446,1)
(403,71,1)
(252,566,1)
(327,1322,1)
(165,1305,1)
(961,243,1)
(352,673,1)
(684,1374,1)
(698,420,1)
(311,701,1)
(477,81,1)
(821,720,1)
(552,387,1)
(385,1299,1)
(926,970,1)
(1249,1076,1)
(232,1290,1)
(864,420,1)
(1014,387,1)
(1201,1080,1)
(1170,783,1)
(1168,949,1)
(1206,320,1)
(1337,387,1)
(205,314,1)
(1251,1314,1)
(429,1224,1)
(35,412,1)
(481,543,1)
(127,68,1)
(1263,416,1)
(300,834,1)
(907,1117,1)
(1153,568,1)
(551,321,1)
(1350,321,1)
(907,906,1)
(476,385,1)
(973,177,1)
(551,688,1)
(1372,542,1)
(1201,336,1)
(1201,1403,1)
(1117,320,1)
(543,387,1)
(551,1002,1)
(1168,68,1)
(1010,503,1)
(256,688,1)
(1377,1107,1)
(1262,1103,1)
(1071,1321,1)
(857,805,1)
(682,1101,1)
(1363,114,1)
(1198,165,1)
(126,786,1)
(579,190,1)
(551,701,1)
(551,1170,1)
(713,767,1)
(907,1244,1)
(141,1015,1)
(659,817,1)
(1015,1055,1)
(288,640,1)
(661,192,1)
(31,857,1)
(314,387,1)
(1263,1256,1)
(907,1116,1)
(275,575,1)
(978,602,1)
(726,699,1)
(771,571,1)
(1168,942,1)
(293,912,1)
(481,1032,1)
(400,387,1)
(602,387,1)
(481,663,1)
(205,1130,1)
(777,884,1)
(779,1403,1)
(205,796,1)
(1123,197,1)
(256,760,1)
(93,593,1)
(420,718,1)
(145,348,1)
(991,325,1)
(256,906,1)
(864,589,1)
(1064,387,1)
(864,977,1)
(481,589,1)
(642,1218,1)
(1072,317,1)
(1236,1172,1)
(185,181,1)
(774,742,1)
(1263,796,1)
(184,238,1)
(168,746,1)
(1288,419,1)
(369,436,1)
(319,504,1)
(1012,920,1)
(643,54,1)
(864,375,1)
(1263,955,1)
(551,1282,1)
(790,342,1)
(223,239,1)
(323,1170,1)
(1088,1291,1)
(890,530,1)
(551,980,1)
(1106,575,1)
(205,1162,1)
(551,473,1)
(347,1213,1)
(1263,436,1)
(121,384,1)
(623,729,1)
(761,964,1)
(1225,985,1)
(669,153,1)
(841,1325,1)
(434,628,1)
(161,939,1)
(1316,178,1)
(414,1087,1)
(481,1197,1)
(551,1060,1)
(1168,336,1)
(1263,688,1)
(1189,543,1)
(1168,1032,1)
(310,819,1)
(727,424,1)
(1224,37,1)
(633,885,1)
(1049,277,1)
(1373,1218,1)
(1108,320,1)
(1282,742,1)
(1168,18,1)
(1204,373,1)
(393,937,1)
(447,1405,1)
(1226,721,1)
(839,892,1)
(1209,1138,1)
(127,1116,1)
(551,760,1)
(481,1282,1)
(205,1197,1)
(693,166,1)
(768,404,1)
(1026,320,1)
(551,420,1)
(205,955,1)
(890,707,1)
(907,955,1)
(587,560,1)
(1345,704,1)
(864,955,1)
(350,496,1)
(1319,21,1)
(551,68,1)
(992,857,1)
(205,174,1)
(882,9,1)
(1350,701,1)
(1391,1316,1)
(309,308,1)
(734,215,1)
(864,1054,1)
(1123,505,1)
(245,1182,1)
(895,1127,1)
(605,788,1)
(1308,816,1)
(1034,767,1)
(765,817,1)
(672,797,1)
(551,554,1)
(1201,192,1)
(1216,386,1)
(1356,387,1)
(1000,1132,1)
(551,811,1)
(574,302,1)
(209,1337,1)
(1028,1171,1)
(712,1168,1)
(1200,285,1)
(100,296,1)
(987,507,1)
(29,356,1)
(551,514,1)
(1238,658,1)
(1124,1218,1)
(1170,646,1)
(1349,744,1)
(538,387,1)
(170,1265,1)
(551,1256,1)
(1162,762,1)
(761,174,1)
(445,1120,1)
(890,110,1)
(551,416,1)
(1209,387,1)
(591,1108,1)
(383,274,1)
(1136,1086,1)
(889,677,1)
(385,387,1)
(324,255,1)
(1342,525,1)
(785,783,1)
(223,1090,1)
(864,1170,1)
(1350,949,1)
(1197,1058,1)
(1224,583,1)
(221,922,1)
(481,693,1)
(57,829,1)
(524,1278,1)
(614,1337,1)
(907,1367,1)
(907,192,1)
(1105,169,1)
(156,387,1)
(213,886,1)
(481,688,1)
(119,528,1)
(864,321,1)
(761,1162,1)
(417,642,1)
(473,387,1)
(1034,387,1)
(899,911,1)
(409,1166,1)
(289,201,1)
(952,280,1)
(889,900,1)
(1317,1160,1)
(1301,1231,1)
(878,1305,1)
(900,677,1)
(1190,847,1)
(1201,906,1)
(451,339,1)
(1157,1312,1)
(1219,148,1)
(127,597,1)
(1263,1403,1)
(824,974,1)
(715,873,1)
(736,758,1)
(496,593,1)
(1201,949,1)
(747,251,1)
(460,1227,1)
(716,1100,1)
(514,387,1)
(5,951,1)
(952,799,1)
(809,841,1)
(1119,1265,1)
(924,305,1)
(1316,548,1)
(486,607,1)
(670,492,1)
(818,706,1)
(907,416,1)
(1291,767,1)
(1204,742,1)
(127,942,1)
(84,335,1)
(648,1138,1)
(1123,1035,1)
(1374,1140,1)
(490,1054,1)
(56,535,1)
(562,217,1)
(1122,590,1)
(928,387,1)
(481,906,1)
(907,1403,1)
(1201,1130,1)
(256,1256,1)
(713,388,1)
(110,1102,1)
(894,387,1)
(1125,817,1)
(1263,174,1)
(630,621,1)
(1168,796,1)
(1396,1311,1)
(732,88,1)
(363,1045,1)
(256,1060,1)
(936,1239,1)
(127,1197,1)
(618,353,1)
(420,640,1)
(1032,387,1)
(114,1072,1)
(552,393,1)
(1109,706,1)
(476,818,1)
(864,949,1)
(205,321,1)
(1057,1011,1)
(640,876,1)
(996,635,1)
(305,713,1)
(1279,1156,1)
(977,320,1)
(673,667,1)
(985,1333,1)
(980,975,1)
(1250,660,1)
(37,299,1)
(249,1270,1)
(280,1138,1)
(705,1173,1)
(1372,387,1)
(481,336,1)
(907,1060,1)
(1327,1310,1)
(1356,326,1)
(134,526,1)
(723,524,1)
(1057,1180,1)
(1201,1170,1)
(165,878,1)
(1350,164,1)
(811,1220,1)
(1219,648,1)
(125,1336,1)
(497,627,1)
(127,1341,1)
(551,1014,1)
(864,1048,1)
(826,98,1)
(112,483,1)
(1201,942,1)
(514,456,1)
(646,1077,1)
(1050,929,1)
(205,1341,1)
(256,1244,1)
(551,273,1)
(890,154,1)
(1253,1280,1)
(864,1130,1)
(1087,867,1)
(1352,950,1)
(551,1116,1)
(192,1088,1)
(448,886,1)
(1367,783,1)
(80,314,1)
(845,1050,1)
(580,831,1)
(907,68,1)
(192,387,1)
(907,1032,1)
(282,300,1)
(645,306,1)
(622,93,1)
(873,216,1)
(863,73,1)
(1271,486,1)
(964,320,1)
(215,400,1)
(907,411,1)
(688,387,1)
(758,343,1)
(1201,1244,1)
(549,769,1)
(1362,111,1)
(1154,851,1)
(644,977,1)
(951,101,1)
(205,597,1)
(1017,137,1)
(126,1001,1)
(820,567,1)
(907,409,1)
(611,817,1)
(133,355,1)
(1201,164,1)
(375,1285,1)
(1168,663,1)
(1315,51,1)
(831,1106,1)
(538,756,1)
(684,817,1)
(411,320,1)
(336,783,1)
(1153,112,1)
(1351,75,1)
(26,1004,1)
(1343,963,1)
(1168,314,1)
(317,258,1)
(361,1021,1)
(491,387,1)
(1263,514,1)
(1339,1381,1)
(1263,1080,1)
(1306,112,1)
(256,1130,1)
(427,857,1)
(335,1139,1)
(63,477,1)
(256,416,1)
(1350,589,1)
(388,1355,1)
(1263,473,1)
(1198,747,1)
(376,1378,1)
(1263,1244,1)
(1168,321,1)
(864,495,1)
(551,409,1)
(1153,19,1)
(472,1209,1)
(283,612,1)
(432,552,1)
(1349,904,1)
(98,387,1)
(1263,554,1)
(39,1026,1)
(904,1288,1)
(1184,70,1)
(274,1116,1)
(1057,387,1)
(468,976,1)
(1089,935,1)
(655,368,1)
(528,1095,1)
(481,192,1)
(954,97,1)
(1063,630,1)
(761,18,1)
(1271,783,1)
(1350,663,1)
(583,685,1)
(1156,260,1)
(864,174,1)
(761,796,1)
(1168,1080,1)
(210,1354,1)
(127,411,1)
(818,205,1)
(1201,1197,1)
(1086,1033,1)
(407,940,1)
(723,167,1)
(594,1209,1)
(205,411,1)
(38,702,1)
(890,442,1)
(986,864,1)
(907,701,1)
(1180,358,1)
(256,68,1)
(890,431,1)
(855,474,1)
(256,589,1)
(104,1218,1)
(1168,1116,1)
(136,824,1)
(897,786,1)
(127,955,1)
(1384,1161,1)
(864,970,1)
(919,1108,1)
(671,74,1)
(1386,475,1)
(55,559,1)
(885,387,1)
(761,1062,1)
(864,1206,1)
(1358,375,1)
(818,387,1)
(256,1403,1)
(864,306,1)
(1168,1062,1)
(1263,1367,1)
(1168,436,1)
(15,675,1)
(216,951,1)
(1272,875,1)
(205,409,1)
(1113,497,1)
(783,987,1)
(225,653,1)
(262,1132,1)
(377,1374,1)
(150,359,1)
(1263,663,1)
(1314,464,1)
(1070,1383,1)
(51,117,1)
(861,387,1)
(1350,861,1)
(258,1324,1)
(1001,786,1)
(627,895,1)
(1285,869,1)
(551,1154,1)
(462,705,1)
(553,134,1)
(1256,347,1)
(907,796,1)
(866,1115,1)
(761,1169,1)
(610,1052,1)
(374,1114,1)
(907,597,1)
(922,806,1)
(1350,1197,1)
(907,514,1)
(696,700,1)
(1148,1267,1)
(1377,294,1)
(768,6,1)
(551,174,1)
(422,364,1)
(187,501,1)
(205,1060,1)
(205,663,1)
(378,1387,1)
(761,514,1)
(1108,152,1)
(439,1047,1)
(1275,1374,1)
(402,1244,1)
(1168,1154,1)
(481,964,1)
(109,1272,1)
(74,727,1)
(788,98,1)
(659,468,1)
(1350,1162,1)
(506,473,1)
(600,917,1)
(355,720,1)
(1127,931,1)
(240,1131,1)
(910,167,1)
(481,760,1)
(205,701,1)
(1293,857,1)
(196,17,1)
(127,18,1)
(438,1169,1)
(256,949,1)
(566,247,1)
(1214,817,1)
(560,79,1)
(481,796,1)
(1036,709,1)
(761,773,1)
(1026,66,1)
(625,409,1)
(864,1197,1)
(1114,1348,1)
(390,928,1)
(913,328,1)
(1201,1335,1)
(551,758,1)
(119,338,1)
(1256,387,1)
(658,655,1)
(979,508,1)
(1350,1116,1)
(899,767,1)
(1273,1293,1)
(377,1079,1)
(1201,68,1)
(127,949,1)
(761,701,1)
(1350,1130,1)
(864,543,1)
(807,487,1)
(1149,92,1)
(1123,253,1)
(1084,70,1)
(701,85,1)
(1168,1054,1)
(602,1290,1)
(1004,120,1)
(737,997,1)
(910,686,1)
(1128,157,1)
(677,958,1)
(1226,731,1)
(179,767,1)
(864,597,1)
(160,183,1)
(1230,1099,1)
(481,1154,1)
(27,492,1)
(566,817,1)
(864,436,1)
(710,916,1)
(1350,336,1)
(551,1197,1)
(455,1257,1)
(1263,1054,1)
(230,1038,1)
(708,1349,1)
(882,583,1)
(864,1282,1)
(400,731,1)
(647,656,1)
(481,491,1)
(588,859,1)
(864,693,1)
(907,473,1)
(1164,1263,1)
(1249,1267,1)
(648,330,1)
(1201,1116,1)
(1333,143,1)
(890,654,1)
(761,597,1)
(197,527,1)
(864,758,1)
(127,1080,1)
(1381,167,1)
(551,1367,1)
(32,1302,1)
(284,1190,1)
(556,417,1)
(1365,1385,1)
(674,576,1)
(750,284,1)
(21,82,1)
(677,387,1)
(280,387,1)
(373,131,1)
(177,326,1)
(558,1375,1)
(41,1176,1)
(684,1232,1)
(697,502,1)
(504,723,1)
(551,411,1)
(454,881,1)
(205,1062,1)
(1350,1080,1)
(1168,1169,1)
(1201,514,1)
(1280,791,1)
(396,278,1)
(864,519,1)
(1404,782,1)
(1209,327,1)
(1062,742,1)
(1383,458,1)
(733,488,1)
(761,942,1)
(205,528,1)
(761,1117,1)
(1350,1169,1)
(131,48,1)
(20,865,1)
(1123,245,1)
(761,1116,1)
(1080,22,1)
(155,585,1)
(907,1169,1)
(1368,449,1)
(1201,1367,1)
(348,1398,1)
(782,205,1)
(1201,306,1)
(921,328,1)
(218,272,1)
(256,1054,1)
(1314,387,1)
(1350,554,1)
(205,436,1)
(1125,558,1)
(205,1403,1)
(213,512,1)
(256,18,1)
(1201,411,1)
(756,297,1)
(1168,543,1)
(1069,24,1)
(890,122,1)
(1314,94,1)
(1328,742,1)
(1394,1039,1)
(737,387,1)
(864,491,1)
(593,957,1)
(575,1148,1)
(256,663,1)
(339,1332,1)
(357,176,1)
(492,1299,1)
(401,863,1)
(127,796,1)
(481,597,1)
(481,18,1)
(965,1117,1)
(739,649,1)
(483,337,1)
(1214,604,1)
(730,1401,1)
(528,528,1)
(1065,1005,1)
(1263,543,1)
(1305,440,1)
(679,21,1)
(73,583,1)
(1201,1282,1)
(669,650,1)
(1263,1169,1)
(265,904,1)
(1057,121,1)
(1403,742,1)
(997,87,1)
(778,1136,1)
(17,1080,1)
(525,320,1)
(916,476,1)
(798,321,1)
(805,862,1)
(1169,902,1)
(901,427,1)
(1350,1060,1)
(576,441,1)
(124,53,1)
(1390,1217,1)
(1047,775,1)
(551,977,1)
(651,326,1)
(544,705,1)
(962,1290,1)
(1312,1118,1)
(127,317,1)
(864,1154,1)
(301,870,1)
(919,591,1)
(513,666,1)
(551,336,1)
(1033,743,1)
(654,1366,1)
(1132,1195,1)
(1327,742,1)
(127,321,1)
(1064,738,1)
(864,1341,1)
(153,30,1)
(675,1125,1)
(968,883,1)
(803,523,1)
(378,320,1)
(131,150,1)
(864,1062,1)
(1213,1344,1)
(101,240,1)
(98,1138,1)
(1150,387,1)
(238,113,1)
(1123,291,1)
(1263,321,1)
(481,514,1)
(24,998,1)
(962,631,1)
(1123,1097,1)
(205,1032,1)
(1176,38,1)
(1305,547,1)
(907,949,1)
(735,1018,1)
(95,1321,1)
(613,1259,1)
(1201,416,1)
(977,43,1)
(1023,960,1)
(1096,248,1)
(864,352,1)
(501,821,1)
(939,1304,1)
(187,756,1)
(722,904,1)
(551,1244,1)
(864,861,1)
(967,629,1)
(256,861,1)
(1350,174,1)
(66,394,1)
(71,1259,1)
(256,314,1)
(1322,303,1)
(1242,160,1)
(987,387,1)
(544,462,1)
(907,164,1)
(890,453,1)
(1077,252,1)
(1275,817,1)
(193,1104,1)
(78,185,1)
(880,1181,1)
(527,459,1)
(662,1377,1)
(732,1218,1)
(761,416,1)
(411,313,1)
(176,982,1)
(907,663,1)
(864,663,1)
(1311,65,1)
(127,589,1)
(772,1343,1)
(1168,514,1)
(703,857,1)
(1318,800,1)
(125,387,1)
(597,465,1)
(474,97,1)
(907,1130,1)
(1168,306,1)
(1334,273,1)
(177,823,1)
(481,1130,1)
(1263,1062,1)
(931,842,1)
(543,4,1)
(1019,1222,1)
(761,906,1)
(2,847,1)
(796,1369,1)
(481,436,1)
(693,387,1)
(1223,238,1)
(155,752,1)
(890,1046,1)
(295,858,1)
(302,809,1)
(1123,1326,1)
(599,402,1)
(907,1162,1)
(25,34,1)
(256,1170,1)
(864,942,1)
(157,1218,1)
(1335,292,1)
(127,1170,1)
(256,321,1)
(704,580,1)
(159,228,1)
(256,473,1)
(890,1174,1)
(1190,588,1)
(467,1089,1)
(1370,2,1)
(719,282,1)
(127,1054,1)
(481,949,1)
(360,1372,1)
(1067,156,1)
(1201,964,1)
(1051,514,1)
(969,379,1)
(1168,1117,1)
(12,628,1)
(276,640,1)
(865,57,1)
(127,688,1)
(607,585,1)
(753,735,1)
(811,939,1)
(1399,906,1)
(65,979,1)
(828,334,1)
(68,387,1)
(907,758,1)
(586,579,1)
(761,758,1)
(279,1242,1)
(890,647,1)
(1075,329,1)
(758,387,1)
(306,320,1)
(1350,1117,1)
(537,233,1)
(1168,701,1)
(232,790,1)
(1084,320,1)
(1056,123,1)
(907,18,1)
(578,584,1)
(1201,1062,1)
(522,506,1)
(686,1047,1)
(551,1162,1)
(743,336,1)
(181,817,2)
(1350,861,2)
(824,212,2)
(551,1341,2)
(723,524,2)
(1171,857,2)
(481,473,2)
(971,1092,2)
(740,91,2)
(1290,880,2)
(553,387,2)
(212,1039,2)
(1168,942,2)
(1080,857,2)
(1144,1259,2)
(737,387,2)
(602,387,2)
(134,837,2)
(987,771,2)
(123,686,2)
(1188,1120,2)
(816,816,2)
(1168,663,2)
(811,136,2)
(481,164,2)
(156,387,2)
(1250,897,2)
(1405,857,2)
(684,1361,2)
(345,967,2)
(205,1170,2)
(551,282,2)
(757,996,2)
(713,387,2)
(1180,846,2)
(493,857,2)
(514,996,2)
(1259,1259,2)
(137,97,2)
(414,857,2)
(318,857,2)
(160,236,2)
(1382,136,2)
(383,1215,2)
(1027,996,2)
(152,1381,2)
(851,857,2)
(271,476,2)
(1010,503,2)
(579,328,2)
(164,335,2)
(368,56,2)
(761,554,2)
(714,1321,2)
(1011,236,2)
(1168,906,2)
(907,18,2)
(459,136,2)
(777,1377,2)
(104,857,2)
(590,574,2)
(811,238,2)
(197,136,2)
(724,529,2)
(1069,236,2)
(1023,328,2)
(386,1351,2)
(864,409,2)
(1144,1172,2)
(1263,436,2)
(1168,192,2)
(494,136,2)
(529,455,2)
(1139,996,2)
(946,857,2)
(256,597,2)
(301,816,2)
(193,574,2)
(980,574,2)
(1263,1367,2)
(1354,175,2)
(528,1361,2)
(182,175,2)
(334,1128,2)
(481,192,2)
(1022,38,2)
(732,1252,2)
(481,436,2)
(628,450,2)
(267,283,2)
(436,895,2)
(551,977,2)
(1050,387,2)
(940,119,2)
(130,175,2)
(1350,1054,2)
(1350,18,2)
(1150,387,2)
(1198,747,2)
(78,562,2)
(1366,727,2)
(172,594,2)
(1261,574,2)
(818,205,2)
(256,1117,2)
(1350,758,2)
(408,1208,2)
(613,1172,2)
(153,481,2)
(467,1089,2)
(215,841,2)
(1249,387,2)
(907,861,2)
(1398,1242,2)
(361,1183,2)
(761,1130,2)
(551,356,2)
(306,320,2)
(451,846,2)
(1120,659,2)
(1201,589,2)
(1098,271,2)
(371,238,2)
(531,1281,2)
(1351,574,2)
(205,1154,2)
(1117,320,2)
(34,857,2)
(1201,949,2)
(1168,1062,2)
(761,955,2)
(864,248,2)
(1168,1080,2)
(98,387,2)
(435,686,2)
(939,511,2)
(205,436,2)
(481,758,2)
(256,1130,2)
(158,387,2)
(673,837,2)
(1000,320,2)
(455,817,2)
(432,574,2)
(205,174,2)
(266,857,2)
(643,817,2)
(1201,554,2)
(1147,686,2)
(1298,387,2)
(1161,655,2)
(907,164,2)
(973,177,2)
(506,857,2)
(1055,175,2)
(127,964,2)
(1134,897,2)
(1070,1070,2)
(127,164,2)
(1095,1374,2)
(1404,846,2)
(127,1080,2)
(977,320,2)
(127,1154,2)
(716,857,2)
(125,387,2)
(1263,416,2)
(254,857,2)
(205,1341,2)
(394,309,2)
(761,1116,2)
(1297,996,2)
(314,857,2)
(1201,1054,2)
(469,857,2)
(600,917,2)
(864,317,2)
(864,1162,2)
(357,951,2)
(1333,996,2)
(1263,68,2)
(1370,236,2)
(87,630,2)
(450,614,2)
(864,1170,2)
(633,408,2)
(808,857,2)
(205,589,2)
(944,874,2)
(761,1080,2)
(1361,1321,2)
(529,1157,2)
(791,1176,2)
(1253,544,2)
(1314,464,2)
(508,305,2)
(732,1304,2)
(1294,846,2)
(607,585,2)
(330,897,2)
(183,236,2)
(205,528,2)
(1173,1176,2)
(256,436,2)
(1353,1183,2)
(55,559,2)
(1222,846,2)
(1169,857,2)
(597,1064,2)
(119,927,2)
(670,492,2)
(1120,529,2)
(481,306,2)
(907,1032,2)
(1350,1197,2)
(864,192,2)
(205,1117,2)
(525,886,2)
(1357,1198,2)
(192,236,2)
(457,1124,2)
(458,1218,2)
(574,302,2)
(1263,1080,2)
(678,1351,2)
(1057,387,2)
(1201,416,2)
(1048,387,2)
(718,379,2)
(962,387,2)
(543,387,2)
(1123,996,2)
(722,387,2)
(1338,857,2)
(646,335,2)
(713,830,2)
(407,1281,2)
(1201,1282,2)
(153,387,2)
(864,906,2)
(522,857,2)
(205,1197,2)
(973,282,2)
(762,1321,2)
(256,321,2)
(1036,846,2)
(567,175,2)
(270,857,2)
(385,1299,2)
(354,379,2)
(1201,1403,2)
(621,1176,2)
(687,857,2)
(256,1170,2)
(551,473,2)
(1304,1183,2)
(629,857,2)
(480,329,2)
(1304,1198,2)
(1350,796,2)
(256,314,2)
(684,817,2)
(196,1218,2)
(481,906,2)
(1298,996,2)
(1309,562,2)
(483,857,2)
(551,1048,2)
(205,1080,2)
(303,697,2)
(205,411,2)
(384,837,2)
(712,857,2)
(907,701,2)
(305,713,2)
(916,476,2)
(248,846,2)
(481,693,2)
(481,1256,2)
(156,464,2)
(335,996,2)
(35,857,2)
(864,416,2)
(285,1188,2)
(938,574,2)
(205,663,2)
(1318,236,2)
(895,857,2)
(205,1054,2)
(952,97,2)
(816,870,2)
(703,857,2)
(205,473,2)
(355,857,2)
(378,1351,2)
(687,387,2)
(864,597,2)
(553,134,2)
(1350,321,2)
(94,574,2)
(613,1351,2)
(675,1125,2)
(82,996,2)
(1014,574,2)
(192,387,2)
(155,335,2)
(512,1259,2)
(663,996,2)
(1231,562,2)
(602,631,2)
(864,519,2)
(1131,238,2)
(1263,1062,2)
(1272,846,2)
(1154,742,2)
(1290,857,2)
(485,817,2)
(303,494,2)
(908,857,2)
(864,760,2)
(866,1218,2)
(109,234,2)
(860,97,2)
(1176,38,2)
(952,799,2)
(1123,630,2)
(837,846,2)
(1356,846,2)
(551,1206,2)
(1118,917,2)
(481,1116,2)
(864,436,2)
(1254,1321,2)
(573,857,2)
(248,387,2)
(907,1130,2)
(1135,574,2)
(439,686,2)
(1201,164,2)
(551,238,2)
(49,996,2)
(175,846,2)
(1304,238,2)
(1169,387,2)
(740,574,2)
(1002,387,2)
(1225,996,2)
(1177,1123,2)
(1168,1116,2)
(481,1117,2)
(432,1396,2)
(1282,857,2)
(223,846,2)
(874,1172,2)
(576,38,2)
(1205,841,2)
(1170,335,2)
(1032,857,2)
(1153,112,2)
(122,857,2)
(907,964,2)
(1201,1060,2)
(481,964,2)
(288,379,2)
(6,345,2)
(773,857,2)
(888,846,2)
(110,857,2)
(562,1099,2)
(1242,387,2)
(64,1351,2)
(65,553,2)
(481,1060,2)
(1226,305,2)
(885,387,2)
(7,846,2)
(1350,164,2)
(731,857,2)
(864,688,2)
(1376,1146,2)
(127,1117,2)
(1386,574,2)
(494,886,2)
(735,1401,2)
(1190,387,2)
(409,857,2)
(1314,387,2)
(991,339,2)
(907,949,2)
(1208,518,2)
(1092,722,2)
(642,1218,2)
(63,996,2)
(906,742,2)
(822,841,2)
(911,846,2)
(141,846,2)
(551,758,2)
(1050,1176,2)
(332,1351,2)
(605,973,2)
(811,1172,2)
(907,192,2)
(170,668,2)
(81,335,2)
(516,1373,2)
(551,543,2)
(1131,387,2)
(454,857,2)
(481,175,2)
(1125,817,2)
(551,411,2)
(523,594,2)
(964,320,2)
(695,511,2)
(895,931,2)
(1325,271,2)
(924,846,2)
(1143,511,2)
(963,335,2)
(100,296,2)
(564,857,2)
(1190,574,2)
(826,538,2)
(55,895,2)
(1278,467,2)
(761,663,2)
(398,857,2)
(426,808,2)
(142,236,2)
(1019,846,2)
(417,846,2)
(1263,1117,2)
(967,1218,2)
(1192,897,2)
(127,554,2)
(717,846,2)
(737,630,2)
(767,236,2)
(625,857,2)
(259,857,2)
(1168,416,2)
(1263,18,2)
(1311,65,2)
(551,420,2)
(551,861,2)
(205,18,2)
(239,1000,2)
(979,574,2)
(620,601,2)
(214,1183,2)
(1349,1183,2)
(1350,514,2)
(1021,1183,2)
(1367,335,2)
(376,1378,2)
(1239,328,2)
(256,1403,2)
(648,1138,2)
(104,1218,2)
(845,1176,2)
(873,951,2)
(256,1162,2)
(481,68,2)
(907,760,2)
(907,589,2)
(1084,70,2)
(551,1377,2)
(1228,598,2)
(329,894,2)
(761,473,2)
(843,1176,2)
(1221,303,2)
(101,238,2)
(1017,97,2)
(360,1351,2)
(518,857,2)
(283,612,2)
(1247,996,2)
(353,379,2)
(373,846,2)
(864,580,2)
(682,996,2)
(551,701,2)
(177,326,2)
(1119,236,2)
(755,846,2)
(481,514,2)
(811,628,2)
(1360,1137,2)
(864,1154,2)
(551,589,2)
(231,1176,2)
(209,874,2)
(983,996,2)
(752,335,2)
(1181,1218,2)
(1071,1321,2)
(1304,574,2)
(127,409,2)
(615,1172,2)
(1100,857,2)
(302,271,2)
(256,949,2)
(1101,387,2)
(735,1018,2)
(1350,1130,2)
(401,1259,2)
(402,996,2)
(1214,236,2)
(876,846,2)
(1201,1341,2)
(48,919,2)
(362,1267,2)
(213,70,2)
(901,857,2)
(1168,964,2)
(551,225,2)
(841,1109,2)
(1304,630,2)
(176,387,2)
(39,1026,2)
(1168,514,2)
(991,706,2)
(185,562,2)
(1372,1351,2)
(1219,897,2)
(283,996,2)
(258,236,2)
(1256,387,2)
(604,236,2)
(797,747,2)
(419,857,2)
(400,305,2)
(1099,1321,2)
(1172,1351,2)
(1201,514,2)
(864,1002,2)
(1116,320,2)
(442,857,2)
(481,336,2)
(400,731,2)
(368,387,2)
(1201,1367,2)
(1125,1375,2)
(362,1336,2)
(648,326,2)
(316,857,2)
(864,473,2)
(1201,174,2)
(470,594,2)
(1201,1162,2)
(166,1281,2)
(516,857,2)
(205,597,2)
(761,174,2)
(1351,865,2)
(907,663,2)
(127,949,2)
(594,1209,2)
(542,1172,2)
(649,897,2)
(285,765,2)
(1104,229,2)
(802,857,2)
(477,996,2)
(864,949,2)
(137,218,2)
(551,174,2)
(462,1176,2)
(38,889,2)
(668,857,2)
(441,38,2)
(401,1172,2)
(134,526,2)
(1209,326,2)
(495,670,2)
(256,1032,2)
(481,1054,2)
(1314,574,2)
(1263,543,2)
(551,1204,2)
(551,1282,2)
(37,1259,2)
(971,708,2)
(256,1116,2)
(760,857,2)
(481,411,2)
(946,1218,2)
(970,857,2)
(907,1154,2)
(1201,1062,2)
(124,996,2)
(292,236,2)
(481,1130,2)
(218,387,2)
(894,846,2)
(1185,335,2)
(157,1218,2)
(726,1176,2)
(864,1080,2)
(481,1162,2)
(6,857,2)
(972,476,2)
(670,846,2)
(205,543,2)
(481,18,2)
(205,964,2)
(496,857,2)
(847,236,2)
(914,846,2)
(232,271,2)
(660,897,2)
(954,282,2)
(1035,236,2)
(400,160,2)
(650,841,2)
(864,314,2)
(127,1256,2)
(879,1180,2)
(1263,1170,2)
(798,236,2)
(551,693,2)
(59,271,2)
(551,1244,2)
(429,1259,2)
(1008,236,2)
(1373,857,2)
(118,857,2)
(1382,328,2)
(1160,36,2)
(548,1321,2)
(1209,387,2)
(551,68,2)
(428,1344,2)
(761,411,2)
(540,511,2)
(818,387,2)
(1065,574,2)
(551,491,2)
(382,109,2)
(15,1375,2)
(396,278,2)
(1219,648,2)
(1384,655,2)
(551,248,2)
(1086,585,2)
(1168,68,2)
(1381,167,2)
(700,236,2)
(601,857,2)
(5,951,2)
(265,1344,2)
(492,846,2)
(481,409,2)
(693,387,2)
(864,663,2)
(591,1108,2)
(423,1321,2)
(412,1400,2)
(1123,511,2)
(100,857,2)
(894,387,2)
(1209,1138,2)
(220,857,2)
(864,964,2)
(242,640,2)
(1127,857,2)
(907,1256,2)
(256,906,2)
(101,1131,2)
(302,476,2)
(355,1240,2)
(1146,946,2)
(1022,674,2)
(366,236,2)
(1210,574,2)
(899,387,2)
(615,1259,2)
(1198,165,2)
(705,1176,2)
(325,670,2)
(811,1183,2)
(618,379,2)
(1258,996,2)
(711,910,2)
(519,1398,2)
(2,236,2)
(696,236,2)
(447,857,2)
(1123,1198,2)
(761,321,2)
(864,1367,2)
(686,1047,2)
(1062,857,2)
(830,857,2)
(1402,846,2)
(905,895,2)
(247,335,2)
(502,328,2)
(991,103,2)
(907,1403,2)
(481,942,2)
(1375,1241,2)
(551,951,2)
(761,436,2)
(1263,1341,2)
(1034,481,2)
(1321,1361,2)
(515,175,2)
(1136,1086,2)
(739,1219,2)
(502,136,2)
(1172,66,2)
(631,991,2)
(814,1281,2)
(1312,917,2)
(1153,1241,2)
(73,1172,2)
(864,321,2)
(962,1299,2)
(659,529,2)
(1201,663,2)
(256,1256,2)
(551,906,2)
(1002,846,2)
(149,380,2)
(1201,760,2)
(1263,409,2)
(761,942,2)
(179,830,2)
(551,1130,2)
(503,1198,2)
(699,1176,2)
(864,554,2)
(654,857,2)
(626,160,2)
(1343,335,2)
(256,411,2)
(1150,1176,2)
(1381,846,2)
(761,336,2)
(644,1381,2)
(833,857,2)
(1003,329,2)
(1123,1361,2)
(949,335,2)
(723,167,2)
(1270,562,2)
(1168,1170,2)
(481,1154,2)
(72,857,2)
(907,758,2)
(864,1032,2)
(303,328,2)
(1263,955,2)
(551,306,2)
(748,236,2)
(632,846,2)
(301,870,2)
(378,320,2)
(855,97,2)
(284,1190,2)
(1084,320,2)
(1356,326,2)
(256,68,2)
(1168,861,2)
(1123,951,2)
(782,387,2)
(913,328,2)
(535,846,2)
(365,329,2)
(785,783,2)
(1201,942,2)
(234,1265,2)
(216,951,2)
(1112,303,2)
(996,1321,2)
(1288,857,2)
(551,970,2)
(931,857,2)
(297,996,2)
(10,326,2)
(1280,1150,2)
(504,723,2)
(936,551,2)
(184,238,2)
(416,236,2)
(476,708,2)
(1025,846,2)
(551,1197,2)
(842,412,2)
(1336,978,2)
(628,874,2)
(761,906,2)
(807,837,2)
(1074,158,2)
(335,1139,2)
(165,747,2)
(441,387,2)
(350,857,2)
(611,529,2)
(51,109,2)
(1060,236,2)
(864,514,2)
(256,1062,2)
(756,996,2)
(1344,236,2)
(1015,175,2)
(887,996,2)
(1108,1132,2)
(763,655,2)
(393,574,2)
(1371,670,2)
(205,927,2)
(780,857,2)
(553,1344,2)
(1070,846,2)
(280,1138,2)
(921,897,2)
(481,816,2)
(1038,335,2)
(923,857,2)
(127,314,2)
(980,387,2)
(864,1054,2)
(1350,970,2)
(243,857,2)
(111,857,2)
(1079,1361,2)
(1068,271,2)
(1026,897,2)
(428,904,2)
(1226,160,2)
(256,758,2)
(1201,688,2)
(1302,600,2)
(551,136,2)
(551,1117,2)
(1073,529,2)
(303,136,2)
(1266,1351,2)
(551,708,2)
(702,1198,2)
(562,217,2)
(511,739,2)
(136,586,2)
(1403,996,2)
(11,1176,2)
(1148,387,2)
(1201,336,2)
(205,906,2)
(1377,628,2)
(897,511,2)
(857,862,2)
(311,996,2)
(955,996,2)
(149,857,2)
(1270,181,2)
(1201,1117,2)
(125,1267,2)
(193,1104,2)
(1268,846,2)
(871,1198,2)
(1128,496,2)
(117,109,2)
(761,1367,2)
(1028,857,2)
(807,305,2)
(987,996,2)
(1367,783,2)
(492,1299,2)
(551,574,2)
(1253,1280,2)
(1346,857,2)
(686,89,2)
(761,1282,2)
(713,767,2)
(1263,1335,2)
(1301,562,2)
(774,379,2)
(326,996,2)
(120,539,2)
(581,857,2)
(90,857,2)
(1001,511,2)
(1244,996,2)
(864,68,2)
(202,329,2)
(127,857,2)
(669,841,2)
(551,336,2)
(1024,1374,2)
(1139,1298,2)
(1385,335,2)
(1201,861,2)
(356,574,2)
(1199,363,2)
(1101,996,2)
(841,1325,2)
(551,409,2)
(1350,1062,2)
(1279,1218,2)
(127,436,2)
(1151,236,2)
(1377,294,2)
(987,635,2)
(1387,1351,2)
(626,731,2)
(826,98,2)
(1234,857,2)
(421,846,2)
(932,1172,2)
(754,857,2)
(235,857,2)
(1199,857,2)
(1263,663,2)
(1390,628,2)
(1363,236,2)
(212,66,2)
(688,236,2)
(991,670,2)
(1263,1244,2)
(1298,178,2)
(1401,783,2)
(256,1341,2)
(341,846,2)
(1350,192,2)
(375,56,2)
(907,688,2)
(897,460,2)
(481,1244,2)
(43,1381,2)
(734,841,2)
(1168,701,2)
(1350,317,2)
(782,706,2)
(907,314,2)
(904,857,2)
(513,996,2)
(907,796,2)
(891,857,2)
(713,481,2)
(1168,1341,2)
(556,846,2)
(1230,1321,2)
(1274,996,2)
(1014,387,2)
(544,1176,2)
(907,174,2)
(1259,1172,2)
(761,1162,2)
(1304,951,2)
(1381,1302,2)
(1197,742,2)
(551,317,2)
(76,996,2)
(907,409,2)
(89,329,2)
(524,112,2)
(205,409,2)
(738,857,2)
(481,1335,2)
(358,846,2)
(1056,817,2)
(589,783,2)
(970,742,2)
(818,339,2)
(1102,857,2)
(225,1259,2)
(32,686,2)
(309,1351,2)
(821,857,2)
(790,271,2)
(537,1198,2)
(729,335,2)
(850,562,2)
(147,857,2)
(907,1282,2)
(1213,236,2)
(864,164,2)
(1181,857,2)
(1148,847,2)
(739,897,2)
(1263,758,2)
(385,387,2)
(939,236,2)
(811,511,2)
(1326,282,2)
(146,574,2)
(173,857,2)
(256,970,2)
(1263,701,2)
(316,149,2)
(1108,1381,2)
(862,1070,2)
(1291,236,2)
(127,1032,2)
(907,1244,2)
(1241,846,2)
(932,1259,2)
(1288,419,2)
(602,1299,2)
(551,964,2)
(783,996,2)
(551,554,2)
(530,857,2)
(768,379,2)
(323,335,2)
(551,1154,2)
(1281,846,2)
(481,491,2)
(939,282,2)
(143,996,2)
(213,886,2)
(1049,1361,2)
(263,335,2)
(907,1062,2)
(162,857,2)
(811,574,2)
(314,387,2)
(306,996,2)
(256,306,2)
(256,514,2)
(265,134,2)
(481,663,2)
(1201,955,2)
(939,1176,2)
(753,335,2)
(1350,473,2)
(1401,335,2)
(127,1367,2)
(551,1403,2)
(228,303,2)
(786,594,2)
(95,1321,2)
(213,1259,2)
(1201,1130,2)
(907,1060,2)
(615,1144,2)
(370,857,2)
(1350,857,2)
(256,942,2)
(127,1054,2)
(1317,379,2)
(481,597,2)
(600,1073,2)
(568,1375,2)
(501,857,2)
(650,400,2)
(1324,236,2)
(39,786,2)
(856,996,2)
(1263,1054,2)
(153,841,2)
(450,874,2)
(988,895,2)
(1102,310,2)
(481,1367,2)
(127,1060,2)
(1236,1172,2)
(1168,1169,2)
(156,575,2)
(1168,760,2)
(252,335,2)
(205,68,2)
(1211,238,2)
(1257,917,2)
(448,996,2)
(1201,317,2)
(1393,271,2)
(1045,270,2)
(369,895,2)
(589,335,2)
(394,1351,2)
(1360,857,2)
(557,846,2)
(274,727,2)
(1168,955,2)
(1124,1218,2)
(816,684,2)
(265,904,2)
(586,1112,2)
(882,1259,2)
(328,282,2)
(153,830,2)
(1057,1180,2)
(907,1335,2)
(172,511,2)
(21,996,2)
(1123,1176,2)
(761,192,2)
(633,655,2)
(551,1116,2)
(759,282,2)
(1369,996,2)
(288,846,2)
(260,727,2)
(602,1290,2)
(1123,238,2)
(281,846,2)
(508,160,2)
(460,511,2)
(271,626,2)
(425,282,2)
(1090,1000,2)
(66,1351,2)
(1154,857,2)
(626,476,2)
(1179,1376,2)
(1315,109,2)
(1123,539,2)
(1201,597,2)
(1222,782,2)
(276,379,2)
(355,720,2)
(172,70,2)
(761,317,2)
(1123,708,2)
(1109,387,2)
(551,580,2)
(551,760,2)
(119,528,2)
(893,575,2)
(566,335,2)
(256,1197,2)
(1167,874,2)
(818,708,2)
(68,236,2)
(1168,174,2)
(481,554,2)
(630,1176,2)
(415,574,2)
(1394,66,2)
(256,317,2)
(4,236,2)
(1072,236,2)
(1060,387,2)
(61,996,2)
(1383,458,2)
(1168,1054,2)
(225,583,2)
(1285,56,2)
(58,236,2)
(363,1045,2)
(151,857,2)
(667,837,2)
(1263,970,2)
(127,1197,2)
(349,236,2)
(1350,1341,2)
(1129,708,2)
(1116,727,2)
(1201,857,2)
(1243,236,2)
(1138,1238,2)
(1267,857,2)
(1218,996,2)
(347,236,2)
(551,192,2)
(675,1375,2)
(1350,1060,2)
(238,630,2)
(1182,619,2)
(97,973,2)
(922,1361,2)
(611,817,2)
(881,857,2)
(380,1218,2)
(542,1351,2)
(864,589,2)
(864,1204,2)
(974,303,2)
(900,1198,2)
(761,861,2)
(327,303,2)
(937,574,2)
(697,136,2)
(205,336,2)
(854,630,2)
(205,1169,2)
(1123,628,2)
(127,1170,2)
(205,416,2)
(1304,708,2)
(1263,554,2)
(1168,1117,2)
(187,756,2)
(127,306,2)
(465,857,2)
(1095,1361,2)
(1321,1374,2)
(1391,1321,2)
(1130,783,2)
(864,1244,2)
(1314,1019,2)
(256,336,2)
(551,1361,2)
(1350,1162,2)
(1218,267,2)
(460,172,2)
(761,1197,2)
(907,436,2)
(635,423,2)
(551,514,2)
(951,101,2)
(539,1377,2)
(628,1172,2)
(1122,574,2)
(710,476,2)
(761,18,2)
(761,1256,2)
(993,996,2)
(551,567,2)
(296,857,2)
(768,846,2)
(662,1377,2)
(864,567,2)
(1340,837,2)
(1249,1336,2)
(112,857,2)
(928,706,2)
(1168,1256,2)
(511,897,2)
(1058,857,2)
(88,1304,2)
(205,317,2)
(1304,1377,2)
(723,1302,2)
(127,861,2)
(761,1341,2)
(996,635,2)
(1316,387,2)
(1372,387,2)
(1238,655,2)
(295,708,2)
(640,846,2)
(519,387,2)
(89,817,2)
(603,857,2)
(705,387,2)
(1201,321,2)
(113,630,2)
(270,1218,2)
(1263,1256,2)
(1339,1381,2)
(10,857,2)
(1123,1172,2)
(939,238,2)
(728,857,2)
(136,824,2)
(551,314,2)
(594,303,2)
(1263,906,2)
(1184,1351,2)
(1160,294,2)
(623,335,2)
(1040,236,2)
(1089,817,2)
(1337,874,2)
(565,737,2)
(942,742,2)
(64,593,2)
(981,236,2)
(1264,1281,2)
(256,1335,2)
(813,1361,2)
(481,1197,2)
(1304,236,2)
(9,1259,2)
(806,1361,2)
(205,949,2)
(1356,387,2)
(126,594,2)
(84,335,2)
(526,1057,2)
(1168,543,2)
(1350,306,2)
(1073,917,2)
(547,747,2)
(761,409,2)
(377,1361,2)
(551,321,2)
(782,846,2)
(221,1361,2)
(383,727,2)
(127,416,2)
(481,1341,2)
(217,817,2)
(431,857,2)
(864,411,2)
(527,136,2)
(1396,574,2)
(934,1361,2)
(156,1019,2)
(97,826,2)
(1298,335,2)
(538,387,2)
(1201,192,2)
(1108,320,2)
(538,973,2)
(890,846,2)
(782,205,2)
(697,579,2)
(352,387,2)
(882,583,2)
(1123,846,2)
(481,796,2)
(109,1272,2)
(549,857,2)
(126,511,2)
(521,857,2)
(601,1218,2)
(256,796,2)
(336,335,2)
(1275,1321,2)
(1109,339,2)
(962,631,2)
(1112,320,2)
(1373,1218,2)
(528,528,2)
(1087,857,2)
(1320,335,2)
(38,1198,2)
(41,1176,2)
(1263,964,2)
(1140,236,2)
(199,857,2)
(701,996,2)
(127,758,2)
(1168,949,2)
(1168,1335,2)
(551,1032,2)
(939,996,2)
(929,1176,2)
(1073,1200,2)
(708,1183,2)
(1085,708,2)
(1308,1361,2)
(416,387,2)
(649,387,2)
(1201,701,2)
(256,688,2)
(1263,314,2)
(1104,1226,2)
(180,574,2)
(850,1270,2)
(1052,630,2)
(686,686,2)
(365,686,2)
(880,857,2)
(551,796,2)
(107,529,2)
(1263,192,2)
(709,846,2)
(1148,1267,2)
(379,846,2)
(592,865,2)
(1045,857,2)
(256,18,2)
(725,574,2)
(807,731,2)
(811,1377,2)
(850,1309,2)
(907,1169,2)
(1000,1132,2)
(584,39,2)
(381,817,2)
(547,387,2)
(998,236,2)
(1403,742,2)
(747,539,2)
(1132,996,2)
(731,90,2)
(722,708,2)
(890,1070,2)
(1349,904,2)
(1270,381,2)
(1137,857,2)
(739,649,2)
(256,964,2)
(1010,1198,2)
(1259,583,2)
(602,575,2)
(92,846,2)
(1123,1183,2)
(1350,409,2)
(800,236,2)
(551,949,2)
(677,387,2)
(768,6,2)
(967,857,2)
(125,847,2)
(127,970,2)
(554,687,2)
(1144,213,2)
(756,297,2)
(205,861,2)
(1304,846,2)
(926,857,2)
(794,1198,2)
(742,877,2)
(1160,379,2)
(494,328,2)
(75,79,2)
(1350,314,2)
(177,282,2)
(191,301,2)
(907,336,2)
(1316,1321,2)
(874,1351,2)
(253,511,2)
(154,857,2)
(685,1172,2)
(1306,857,2)
(205,1162,2)
(232,1299,2)
(976,529,2)
(608,155,2)
(205,321,2)
(1223,238,2)
(1350,964,2)
(488,996,2)
(280,326,2)
(1332,1281,2)
(211,600,2)
(907,1341,2)
(157,857,2)
(1190,1336,2)
(1263,306,2)
(846,996,2)
(1099,1275,2)
(744,1183,2)
(1263,317,2)
(1348,485,2)
(761,964,2)
(551,1176,2)
(121,837,2)
(51,742,2)
(818,706,2)
(429,1224,2)
(1304,628,2)
(481,416,2)
(1201,543,2)
(803,594,2)
(115,1314,2)
(868,1176,2)
(1168,1244,2)
(424,857,2)
(1222,1268,2)
(569,574,2)
(604,1361,2)
(760,387,2)
(951,238,2)
(50,574,2)
(193,740,2)
(1104,574,2)
(720,857,2)
(732,1218,2)
(335,585,2)
(98,1138,2)
(1195,996,2)
(376,1070,2)
(1130,335,2)
(296,104,2)
(722,134,2)
(1180,358,2)
(3,574,2)
(1056,1047,2)
(958,1198,2)
(551,597,2)
(1361,850,2)
(928,846,2)
(205,688,2)
(177,1138,2)
(907,1162,2)
(939,846,2)
(54,236,2)
(864,1206,2)
(1106,575,2)
(272,97,2)
(974,579,2)
(127,473,2)
(1232,1361,2)
(862,376,2)
(997,630,2)
(746,1120,2)
(310,819,2)
(127,1062,2)
(551,378,2)
(565,630,2)
(686,329,2)
(1246,1377,2)
(111,1218,2)
(331,1361,2)
(864,1117,2)
(761,1032,2)
(127,1116,2)
(241,895,2)
(864,1197,2)
(899,830,2)
(132,857,2)
(668,100,2)
(1123,236,2)
(1067,575,2)
(300,951,2)
(18,742,2)
(1321,236,2)
(232,387,2)
(1149,846,2)
(1004,539,2)
(659,817,2)
(1197,857,2)
(127,18,2)
(863,1259,2)
(1137,522,2)
(1016,857,2)
(742,996,2)
(1215,857,2)
(1336,575,2)
(436,320,2)
(942,857,2)
(1168,970,2)
(66,394,2)
(10,387,2)
(1327,742,2)
(788,973,2)
(1034,387,2)
(158,539,2)
(761,949,2)
(631,670,2)
(1226,387,2)
(907,543,2)
(1188,1047,2)
(525,282,2)
(1168,1130,2)
(127,1403,2)
(627,895,2)
(1305,747,2)
(1032,387,2)
(761,688,2)
(205,1130,2)
(704,575,2)
(708,1349,2)
(1351,75,2)
(1092,708,2)
(1142,574,2)
(443,857,2)
(205,1244,2)
(1117,996,2)
(387,396,2)
(481,589,2)
(834,1102,2)
(174,857,2)
(186,846,2)
(404,996,2)
(761,970,2)
(1239,897,2)
(271,1034,2)
(580,387,2)
(921,594,2)
(1260,1321,2)
(217,1321,2)
(284,115,2)
(256,1169,2)
(1239,594,2)
(968,846,2)
(481,688,2)
(212,303,2)
(453,857,2)
(127,68,2)
(1109,205,2)
(868,845,2)
(301,175,2)
(1263,760,2)
(619,125,2)
(485,585,2)
(1263,164,2)
(164,783,2)
(761,306,2)
(379,640,2)
(551,980,2)
(1034,476,2)
(1275,1374,2)
(127,942,2)
(67,996,2)
(1201,1169,2)
(291,238,2)
(1325,232,2)
(456,996,2)
(1335,387,2)
(761,1054,2)
(841,271,2)
(587,79,2)
(256,416,2)
(1228,857,2)
(177,387,2)
(653,1259,2)
(304,670,2)
(116,329,2)
(1200,1120,2)
(741,236,2)
(1168,306,2)
(992,857,2)
(1263,473,2)
(551,352,2)
(181,562,2)
(1350,411,2)
(693,1281,2)
(811,1361,2)
(127,1169,2)
(1141,97,2)
(1017,952,2)
(1168,1162,2)
(1396,1311,2)
(1350,1403,2)
(939,1183,2)
(1304,511,2)
(1056,686,2)
(761,514,2)
(907,473,2)
(551,1198,2)
(672,747,2)
(921,328,2)
(864,1062,2)
(210,175,2)
(962,1290,2)
(655,998,2)
(551,375,2)
(1208,857,2)
(80,857,2)
(427,857,2)
(553,574,2)
(518,1218,2)
(761,543,2)
(585,996,2)
(568,675,2)
(1170,783,2)
(1046,857,2)
(355,187,2)
(761,1335,2)
(761,1062,2)
(256,543,2)
(1350,1080,2)
(939,1377,2)
(864,174,2)
(1168,409,2)
(169,1070,2)
(127,411,2)
(782,103,2)
(837,428,2)
(1372,1172,2)
(995,335,2)
(713,1015,2)
(468,529,2)
(878,747,2)
(481,870,2)
(381,1374,2)
(907,942,2)
(1350,1117,2)
(127,1130,2)
(823,282,2)
(758,387,2)
(1321,1214,2)
(25,857,2)
(907,1170,2)
(346,1259,2)
(524,910,2)
(1031,857,2)
(335,335,2)
(1115,355,2)
(22,857,2)
(989,996,2)
(824,974,2)
(165,1305,2)
(508,731,2)
(1168,321,2)
(1383,846,2)
(484,846,2)
(761,1117,2)
(1350,554,2)
(1217,628,2)
(907,317,2)
(758,857,2)
(910,846,2)
(949,783,2)
(492,1290,2)
(227,846,2)
(1394,320,2)
(1054,996,2)
(345,857,2)
(870,236,2)
(362,387,2)
(834,176,2)
(497,895,2)
(912,236,2)
(127,597,2)
(1089,711,2)
(1253,1176,2)
(286,708,2)
(551,416,2)
(440,747,2)
(1112,66,2)
(1331,857,2)
(701,320,2)
(477,335,2)
(582,857,2)
(320,996,2)
(1267,620,2)
(481,1170,2)
(196,857,2)
(628,1351,2)
(939,951,2)
(244,897,2)
(308,1351,2)
(491,1281,2)
(807,160,2)
(787,1108,2)
(1330,857,2)
(420,379,2)
(844,136,2)
(1394,1039,2)
(1128,857,2)
(1201,436,2)
(1201,964,2)
(374,335,2)
(864,543,2)
(362,271,2)
(1272,36,2)
(205,375,2)
(864,693,2)
(991,387,2)
(276,1327,2)
(1168,1032,2)
(1018,335,2)
(805,1070,2)
(1399,857,2)
(907,68,2)
(12,628,2)
(308,1084,2)
(658,655,2)
(771,236,2)
(443,196,2)
(961,857,2)
(600,686,2)
(551,511,2)
(1095,817,2)
(1201,1170,2)
(864,861,2)
(1168,1282,2)
(428,387,2)
(1263,336,2)
(792,857,2)
(1107,628,2)
(125,1183,2)
(56,846,2)
(845,1050,2)
(179,767,2)
(1226,574,2)
(1239,387,2)
(39,897,2)
(1074,539,2)
(103,857,2)
(562,1321,2)
(358,179,2)
(1341,996,2)
(1224,583,2)
(256,473,2)
(1372,1138,2)
(205,955,2)
(828,1128,2)
(864,1048,2)
(761,1244,2)
(481,760,2)
(36,316,2)
(571,236,2)
(377,236,2)
(761,68,2)
(342,271,2)
(98,973,2)
(360,1172,2)
(884,1377,2)
(205,1256,2)
(29,574,2)
(218,97,2)
(655,408,2)
(1350,336,2)
(529,917,2)
(834,951,2)
(1057,1011,2)
(1224,865,2)
(127,1282,2)
(761,1403,2)
(180,1290,2)
(458,1070,2)
(1190,847,2)
(985,996,2)
(524,19,2)
(1358,56,2)
(505,846,2)
(1103,996,2)
(978,602,2)
(203,1272,2)
(920,303,2)
(256,409,2)
(1201,1080,2)
(430,119,2)
(1275,817,2)
(559,895,2)
(1381,452,2)
(551,688,2)
(1201,906,2)
(137,1187,2)
(1019,1222,2)
(1271,335,2)
(1005,574,2)
(939,539,2)
(127,701,2)
(449,686,2)
(864,420,2)
(1053,574,2)
(801,38,2)
(732,7,2)
(991,205,2)
(692,857,2)
(698,379,2)
(1062,742,2)
(131,846,2)
(1273,857,2)
(551,1054,2)
(276,640,2)
(537,233,2)
(566,817,2)
(118,865,2)
(599,996,2)
(1269,335,2)
(928,387,2)
(127,192,2)
(656,355,2)
(722,904,2)
(433,996,2)
(200,476,2)
(633,998,2)
(978,575,2)
(1226,731,2)
(598,1218,2)
(256,1282,2)
(1263,857,2)
(637,846,2)
(1162,387,2)
(899,846,2)
(1350,701,2)
(552,750,2)
(643,236,2)
(320,682,2)
(1348,335,2)
(1189,236,2)
(761,314,2)
(614,874,2)
(155,817,2)
(1136,335,2)
(811,846,2)
(1263,321,2)
(1201,306,2)
(419,1218,2)
(770,846,2)
(584,897,2)
(1350,416,2)
(1000,846,2)
(1325,362,2)
(460,594,2)
(816,1361,2)
(1242,731,2)
(1124,1128,2)
(282,951,2)
(987,387,2)
(174,324,2)
(1201,473,2)
(1400,857,2)
(1238,56,2)
(977,1381,2)
(1077,335,2)
(1263,1032,2)
(840,136,2)
(379,379,2)
(251,539,2)
(294,236,2)
(723,846,2)
(172,320,2)
(256,174,2)
(864,1341,2)
(1362,111,2)
(255,857,2)
(205,942,2)
(98,326,2)
(649,756,2)
(1168,1403,2)
(626,387,2)
(1350,1256,2)
(411,320,2)
(367,1176,2)
(1350,1335,2)
(986,846,2)
(103,1362,2)
(1024,817,2)
(205,1403,2)
(947,282,2)
(861,387,2)
(53,996,2)
(715,951,2)
(864,1335,2)
(905,1113,2)
(669,650,2)
(205,1335,2)
(179,846,2)
(907,955,2)
(528,1095,2)
(479,857,2)
(1349,1344,2)
(26,539,2)
(1138,56,2)
(818,103,2)
(56,1356,2)
(127,906,2)
(1168,589,2)
(487,837,2)
(280,97,2)
(420,640,2)
(508,387,2)
(1013,38,2)
(481,1032,2)
(478,282,2)
(809,841,2)
(819,857,2)
(1350,1032,2)
(127,955,2)
(1207,686,2)
(978,156,2)
(362,847,2)
(476,385,2)
(227,223,2)
(551,1014,2)
(939,630,2)
(808,516,2)
(495,387,2)
(1168,411,2)
(481,955,2)
(114,236,2)
(127,1162,2)
(213,1172,2)
(321,236,2)
(1088,236,2)
(648,897,2)
(796,996,2)
(1064,387,2)
(1293,857,2)
(23,236,2)
(719,282,2)
(880,1181,2)
(1282,742,2)
(551,1172,2)
(400,387,2)
(1023,136,2)
(819,1218,2)
(1086,335,2)
(551,436,2)
(1176,1022,2)
(346,429,2)
(176,951,2)
(906,857,2)
(1168,597,2)
(864,18,2)
(1179,857,2)
(1355,1398,2)
(1374,236,2)
(233,1198,2)
(1039,996,2)
(551,1060,2)
(945,857,2)
(864,942,2)
(1397,1377,2)
(846,1218,2)
(1303,846,2)
(824,303,2)
(551,630,2)
(1224,1259,2)
(339,1281,2)
(864,977,2)
(1263,1282,2)
(512,1172,2)
(218,756,2)
(481,1403,2)
(439,1047,2)
(1139,335,2)
(1219,148,2)
(1276,539,2)
(782,339,2)
(388,1398,2)
(761,1154,2)
(1350,597,2)
(1147,329,2)
(232,1290,2)
(379,768,2)
(1245,379,2)
(902,857,2)
(249,562,2)
(651,996,2)
(74,727,2)
(1335,236,2)
(464,236,2)
(1168,758,2)
(1108,55,2)
(864,1403,2)
(167,329,2)
(127,1341,2)
(473,857,2)
(830,443,2)
(597,857,2)
(736,857,2)
(1190,1267,2)
(252,566,2)
(127,1244,2)
(324,387,2)
(610,630,2)
(159,303,2)
(70,1351,2)
(864,375,2)
(864,336,2)
(1123,282,2)
(324,857,2)
(927,236,2)
(747,1074,2)
(1341,387,2)
(317,387,2)
(321,387,2)
(1168,1367,2)
(570,335,2)
(1220,939,2)
(400,841,2)
(1242,160,2)
(781,1120,2)
(551,1169,2)
(1350,949,2)
(1272,294,2)
(1350,760,2)
(633,885,2)
(190,328,2)
(1364,996,2)
(1350,955,2)
(864,955,2)
(481,701,2)
(955,742,2)
(1042,857,2)
(1188,817,2)
(1168,554,2)
(1242,846,2)
(127,317,2)
(1112,1039,2)
(161,939,2)
(1328,996,2)
(358,1294,2)
(811,1198,2)
(1299,236,2)
(1350,1116,2)
(894,178,2)
(127,543,2)
(509,1176,2)
(928,103,2)
(907,1054,2)
(201,996,2)
(452,329,2)
(256,861,2)
(205,314,2)
(645,996,2)
(319,723,2)
(1278,711,2)
(1123,136,2)
(586,579,2)
(1174,857,2)
(1294,817,2)
(969,846,2)
(481,1282,2)
(1200,529,2)
(528,927,2)
(172,886,2)
(1383,1070,2)
(626,305,2)
(721,574,2)
(907,1367,2)
(960,136,2)
(761,1060,2)
(939,574,2)
(180,1299,2)
(491,387,2)
(85,996,2)
(510,1381,2)
(1304,539,2)
(534,1123,2)
(1304,282,2)
(375,387,2)
(310,857,2)
(127,663,2)
(1251,574,2)
(1209,303,2)
(223,1000,2)
(188,387,2)
(635,1321,2)
(1168,436,2)
(411,996,2)
(1176,1198,2)
(553,904,2)
(363,857,2)
(659,1047,2)
(857,1070,2)
(1334,1351,2)
(265,841,2)
(256,760,2)
(1133,379,2)
(1350,1282,2)
(669,153,2)
(256,955,2)
(907,1116,2)
(81,996,2)
(1201,1244,2)
(153,1015,2)
(1162,1321,2)
(745,996,2)
(205,796,2)
(213,320,2)
(1240,857,2)
(864,970,2)
(391,1351,2)
(864,796,2)
(1168,857,2)
(551,942,2)
(1350,589,2)
(265,387,2)
(1376,857,2)
(1238,633,2)
(1168,1197,2)
(279,846,2)
(751,56,2)
(466,236,2)
(1244,742,2)
(578,897,2)
(765,1120,2)
(979,508,2)
(1319,21,2)
(1157,917,2)
(522,1218,2)
(697,328,2)
(1263,796,2)
(725,432,2)
(730,335,2)
(647,857,2)
(917,1207,2)
(1350,543,2)
(127,321,2)
(31,857,2)
(1026,1039,2)
(551,955,2)
(467,711,2)
(761,416,2)
(592,921,2)
(796,742,2)
(1202,996,2)
(455,1047,2)
(79,574,2)
(842,857,2)
(964,996,2)
(273,320,2)
(455,917,2)
(1114,335,2)
(1279,727,2)
(1201,411,2)
(245,1183,2)
(740,962,2)
(353,846,2)
(1075,329,2)
(688,387,2)
(1350,1169,2)
(136,303,2)
(907,411,2)
(1200,285,2)
(256,1080,2)
(907,321,2)
(917,686,2)
(18,857,2)
(1349,134,2)
(1304,1176,2)
(559,931,2)
(205,1116,2)
(1240,10,2)
(864,701,2)
(476,818,2)
(188,996,2)
(392,335,2)
(861,236,2)
(1263,949,2)
(1168,336,2)
(71,1259,2)
(63,335,2)
(907,1080,2)
(656,866,2)
(778,335,2)
(919,1381,2)
(691,38,2)
(598,857,2)
(481,543,2)
(648,387,2)
(807,387,2)
(521,1218,2)
(811,996,2)
(1361,562,2)
(426,857,2)
(115,574,2)
(329,846,2)
(409,742,2)
(205,554,2)
(170,379,2)
(242,379,2)
(1349,387,2)
(826,973,2)
(1201,796,2)
(1372,326,2)
(1400,521,2)
(1156,727,2)
(289,996,2)
(1304,996,2)
(1024,1321,2)
(1096,846,2)
(1168,473,2)
(256,589,2)
(328,525,2)
(761,758,2)
(885,655,2)
(1263,1116,2)
(772,335,2)
(1381,1153,2)
(205,701,2)
(690,857,2)
(422,539,2)
(1034,767,2)
(1034,1015,2)
(1054,742,2)
(630,1253,2)
(1113,1218,2)
(1305,547,2)
(619,224,2)
(552,574,2)
(1263,589,2)
(1214,817,2)
(1289,236,2)
(16,670,2)
(97,282,2)
(864,276,2)
(1194,1351,2)
(858,708,2)
(1249,847,2)
(163,996,2)
(1109,706,2)
(1168,164,2)
(1168,314,2)
(551,18,2)
(1256,236,2)
(586,303,2)
(733,996,2)
(127,336,2)
(500,1272,2)
(539,1265,2)
(1048,175,2)
(722,1344,2)
(205,1062,2)
(1123,1377,2)
(406,335,2)
(1158,846,2)
(1323,236,2)
(939,136,2)
(1193,335,2)
(550,236,2)
(879,574,2)
(127,760,2)
(305,1398,2)
(775,329,2)
(864,1169,2)
(874,1372,2)
(1350,68,2)
(1304,1361,2)
(879,387,2)
(551,1367,2)
(907,554,2)
(885,326,2)
(256,1154,2)
(1109,271,2)
(1206,320,2)
(412,857,2)
(1249,846,2)
(403,1259,2)
(907,416,2)
(90,469,2)
(831,575,2)
(761,589,2)
(779,996,2)
(1201,1335,2)
(907,597,2)
(909,56,2)
(917,1056,2)
(809,669,2)
(551,628,2)
(551,495,2)
(445,1120,2)
(470,511,2)
(864,1282,2)
(1337,387,2)
(526,837,2)
(89,686,2)
(309,1216,2)
(1350,663,2)
(181,1374,2)
(897,786,2)
(481,949,2)
(580,575,2)
(1359,1321,2)
(127,589,2)
(1177,865,2)
(1398,846,2)
(297,817,2)
(575,1148,2)
(290,917,2)
(287,996,2)
(1047,329,2)
(1034,830,2)
(867,857,2)
(1158,1070,2)
(1105,1070,2)
(481,174,2)
(1378,1218,2)
(68,387,2)
(1304,136,2)
(481,317,2)
(150,1381,2)
(566,585,2)
(811,708,2)
(256,857,2)
(907,306,2)
(768,742,2)
(1204,742,2)
(674,38,2)
(481,970,2)
(642,846,2)
(889,677,2)
(864,491,2)
(496,593,2)
(109,846,2)
(1322,303,2)
(1268,817,2)
(42,1381,2)
(1128,118,2)
(551,519,2)
(735,335,2)
(514,387,2)
(727,1215,2)
(907,514,2)
(811,630,2)
(1263,688,2)
(1097,1172,2)
(1350,1154,2)
(684,1374,2)
(309,308,2)
(1059,600,2)
(336,783,2)
(1263,1197,2)
(1350,1367,2)
(408,857,2)
(1001,786,2)
(1201,18,2)
(1263,1403,2)
(1281,928,2)
(494,70,2)
(385,631,2)
(494,320,2)
(1109,103,2)
(1201,1032,2)
(677,1198,2)
(1165,236,2)
(774,742,2)
(1263,514,2)
(526,807,2)
(65,574,2)
(979,879,2)
(420,774,2)
(619,1183,2)
(205,306,2)
(1128,157,2)
(1093,379,2)
(1012,303,2)
(607,335,2)
(1168,688,2)
(127,796,2)
(1134,594,2)
(256,663,2)
(205,1282,2)
(551,539,2)
(17,857,2)
(551,996,2)
(70,64,2)
(563,236,2)
(1366,1279,2)
(338,1281,2)
(761,701,2)
(939,628,2)
(839,973,2)
(639,1198,2)
(864,495,2)
(866,355,2)
(428,846,2)
(1157,817,2)
(380,857,2)
(1153,19,2)
(554,857,2)
(575,846,2)
(952,280,2)
(175,899,2)
(372,708,2)
(1123,574,2)
(864,1256,2)
(1026,66,2)
(574,476,2)
(1345,575,2)
(205,970,2)
(551,236,2)
(44,846,2)
(551,1335,2)
(982,951,2)
(30,841,2)
(212,320,2)
(458,846,2)
(267,996,2)
(233,387,2)
(811,539,2)
(1076,846,2)
(663,742,2)
(820,175,2)
(679,21,2)
(364,539,2)
(399,711,2)
(469,1218,2)
(883,846,2)
(205,514,2)
(539,668,2)
(432,552,2)
(385,708,2)
(551,1062,2)
(1394,1259,2)
(48,1381,2)
(475,574,2)
(674,441,2)
(907,1117,2)
(761,597,2)
(864,352,2)
(1263,1169,2)
(1120,611,2)
(1201,68,2)
(1263,1060,2)
(811,1176,2)
(897,594,2)
(262,996,2)
(899,767,2)
(785,335,2)
(1263,597,2)
(256,701,2)
(616,1281,2)
(180,631,2)
(907,970,2)
(395,857,2)
(256,1244,2)
(1362,857,2)
(65,979,2)
(205,760,2)
(1086,817,2)
(1017,137,2)
(864,758,2)
(405,846,2)
(889,1198,2)
(307,1321,2)
(60,857,2)
(1259,615,2)
(313,996,2)
(307,1145,2)
(392,996,2)
(583,1172,2)
(180,387,2)
(205,192,2)
(238,565,2)
(551,164,2)
(485,335,2)
(343,857,2)
(765,817,2)
(655,56,2)
(661,236,2)
(1198,539,2)
(1201,1197,2)
(1229,303,2)
(877,996,2)
(1255,996,2)
(864,1116,2)
(574,708,2)
(907,1197,2)
(187,857,2)
(682,1101,2)
(875,846,2)
(127,688,2)
(481,1169,2)
(769,857,2)
(1263,174,2)
(127,174,2)
(481,861,2)
(1064,857,2)
(551,1080,2)
(19,236,2)
(1057,837,2)
(915,301,2)
(168,1120,2)
(551,276,2)
(381,562,2)
(153,767,2)
(1201,1116,2)
(1350,942,2)
(960,328,2)
(907,857,2)
(1206,1381,2)
(352,837,2)
(236,387,2)
(1018,785,2)
(205,1367,2)
(761,1170,2)
(293,236,2)
(1263,861,2)
(127,514,2)
(302,809,2)
(75,593,2)
(761,760,2)
(1215,1199,2)
(446,1198,2)
(551,51,2)
(155,585,2)
(397,895,2)
(1304,1172,2)
(1220,387,2)
(337,857,2)
(1168,317,2)
(170,1265,2)
(284,574,2)
(507,996,2)
(14,379,2)
(282,834,2)
(965,996,2)
(863,1172,2)
(1377,36,2)
(1081,1198,2)
(1201,1154,2)
(811,282,2)
(1262,996,2)
(11,868,2)
(695,594,2)
(551,1183,2)
(474,97,2)
(525,320,2)
(768,404,2)
(939,1198,2)
(551,846,2)
(1084,886,2)
(1286,335,2)
(551,663,2)
(1365,335,2)
(1092,676,2)
(36,857,2)
(1201,409,2)
(720,1218,2)
(139,335,2)
(1168,1060,2)
(77,175,2)
(975,574,2)
(620,857,2)
(935,711,2)
(1263,942,2)
(836,511,2)
(205,1032,2)
(859,574,2)
(561,841,2)
(205,758,2)
(434,628,2)
(892,973,2)
(1207,817,2)
(1168,18,2)
(904,1288,2)
(879,1011,2)
(1113,895,2)
(256,192,2)
(552,387,2)
(1380,335,2)
(939,1361,2)
(1153,568,2)
(463,921,2)
(1263,1162,2)
(1265,236,2)
(1396,387,2)
(1201,314,2)
(481,1080,2)
(1084,1351,2)
(727,857,2)
(473,387,2)
(966,236,2)
(907,906,2)
(1263,411,2)
(1183,1249,2)
(761,796,2)
(1070,1383,2)
(936,1239,2)
(864,1060,2)
(1214,1361,2)
(1164,857,2)
(551,1162,2)
(125,1336,2)
(73,1259,2)
(551,1002,2)
(1227,594,2)
(962,574,2)
(33,996,2)
(761,164,2)
(317,236,2)
(1350,1170,2)
(1201,1256,2)
(508,574,2)
(1378,1070,2)
(1350,1244,2)
(1079,1374,2)
(256,1060,2)
(761,1169,2)
(655,368,2)
(298,708,2)
(481,321,2)
(872,996,2)
(707,857,2)
(348,1398,2)
(179,1015,2)
(390,846,2)
(864,306,2)
(205,1281,2)
(486,335,2)
(307,1316,2)
(588,574,2)
(489,846,2)
(999,857,2)
(1350,174,2)
(1159,335,2)
(178,236,2)
(567,387,2)
(511,584,2)
(490,996,2)
(1134,328,2)
(706,236,2)
(492,387,2)
(666,996,2)
(1080,387,2)
(1183,846,2)
(689,857,2)
(608,335,2)
(481,1062,2)
(650,265,2)
(811,236,2)
(864,109,2)
(1201,758,2)
(133,355,2)
(1350,436,2)
(809,271,2)
(280,387,2)
(1216,1351,2)
(256,1054,2)
(1309,817,2)
(1350,688,2)
(256,554,2)
(115,180,2)
(256,164,2)
(1310,379,2)
(994,857,2)
(472,303,2)
(551,1256,2)
(558,1375,2)
(1033,335,2)
(277,1361,2)
(145,1398,2)
(275,846,2)
(205,164,2)
(1342,282,2)
(939,1172,2)
(1166,857,2)
(1327,379,2)
(503,537,2)
(368,326,2)
(1316,178,2)
(1000,55,2)
(1026,320,2)
(1368,686,2)
(869,56,2)
(438,857,2)
(1201,970,2)
(1388,897,2)
(864,1130,2)
(273,1351,2)
(1212,857,2)
(1148,846,2)
(990,996,2)
(285,1120,2)
(1191,574,2)
(119,1281,2)
(750,284,2)
(886,996,2)
(1099,1024,2)
(1350,906,2)
(205,1060,2)
(671,727,2)
(1263,1154,2)
(356,387,2)
(1249,1267,2)
(538,756,2)
(614,1337,2)
(1111,857,2)
(179,387,2)
(423,307,2)
(27,846,2)
(1280,1176,2)
(525,70,2)
(481,314,2)
(1051,996,2)
(543,236,2)
(178,643,2)
(840,579,2)
(1347,708,2)
(1168,1154,2)
(811,951,2)
(919,1108,2)
(256,1367,2)
(359,1381,2)
(1145,1321,2)
(481,375,2)
(208,238,2)
(618,846,2)
(457,1128,2)
(1063,630,2)
(127,1335,2)
(240,238,2)
(761,857,2)
(234,668,2)
(1146,857,2)
(776,303,2)
(723,452,2)
(1296,1351,2)
(1263,1130,2)
(743,335,2)
(1168,796,2)
(546,996,2)
(560,79,2)
(1182,1183,2)
(1227,511,2)
(234,1272,2)
(1204,846,2)
(877,188,2)
(299,1259,2)
(230,335,2)
(86,574,2)
(638,857,2)
(187,387,2)
(931,842,2)
(232,631,2)
(783,987,2)
(551,273,2)
(939,708,2)
(179,481,2)
(524,1278,2)
(544,705,2)
(24,236,2)
(1311,574,2)
(225,1394,2)
(385,1290,2)
(750,574,2)
(713,1398,2)
(551,1170,2)
(1271,783,2)
-----------------------------------
(0,cp)
(1,i)
(2,cp)
(3,tilegrdoffy)
(4,tilegrdoffx)
(5,cp)
(6,tccp->maxrlvls = atoi(jas_tvparser_getval(tvp)
(7,tvp = 0)
(8,for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno)
(9,i)
(10,cp->totalsize)
(11,jas_eprintf("invalid code block height %d\\n",\\n\\t\\t  JPC_POW2(cp->tccp.cblkheightexpn)
(12,prcwidthexpn)
(13,case OPT_SOP:)
(14,tccp)
(15,JAS_CLRSPC_FAM_RGB)
(16,tilegrdoffx)
(17,tvp)
(18,tccp->maxrlvls)
(19,enablemct = true)
(20,numilyrrates)
(21,optstr)
(22,imgareatly)
(23,refgrdheight)
(24,cp)
(25,cblksty)
(26,goto error;)
(27,UINT_FAST32_MAX)
(28,)
(29,cp)
(30,imgareatly)
(31,jp2overhead)
(32,cmptno)
(33,tccp)
(34,tccp)
(35,id)
(36,prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(37,i)
(38,cp->tccp.cblkheightexpn < 2)
(39,tcp->ilyrrates[lyrno])
(40,)
(41,"invalid code block height %d\\n")
(42,tcp)
(43,mctid)
(44,cp)
(45,cmptno)
(46,)
(47,)
(48,tcp->mctid = (tcp->intmode)
(49,cblkheightexpn)
(50,"invalid tile grid offset (%lu, %lu)
(51,tccp->csty)
(52,)
(53,cp)
(54,image)
(55,tcp->intmode = (tagid == MODE_INT)
(56,cp->totalsize != UINT_FAST32_MAX)
(57,0)
(58,hsteplcm)
(59,cp)
(60,cp)
(61,tcp)
(62,mctvalid)
(63,cp)
(64,numilyrrates + 1)
(65,JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,\\n\\t  cp->tileheight)
(66,tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1)
(67,UINT_FAST32_MAX)
(68,cp->ccps)
(69,)
(70,tcp->numlyrs = numilyrrates + 1)
(71,tcp)
(72,break;)
(73,i)
(74,tcp)
(75,numilyrrates > 0)
(76,cp)
(77,vsteplcm)
(78,cmptno)
(79,ilyrrates)
(80,tvp)
(81,cmptno)
(82,tvp)
(83,)
(84,ccp)
(85,ilyrrates)
(86,cp)
(87,cp)
(88,tvp)
(89,jas_image_numcmpts(image)
(90,atoi(jas_tvparser_getval(tvp)
(91,unsigned long)
(92,cp)
(93,cp)
(94,refgrdwidth)
(95,image)
(96,case OPT_TERMALL:)
(97,cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize)
(98,cp->totalsize)
(99,if (cp->tilegrdoffy == UINT_FAST32_MAX)
(100,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(101,cp->tccp.maxrlvls)
(102,)
(103,cp->imgareatlx = atoi(jas_tvparser_getval(tvp)
(104,jas_tvparser_getval(tvp)
(105,)
(106,lyrno)
(107,0)
(108,)
(109,prcwidthexpn != 15 || prcheightexpn != 15)
(110,break;)
(111,jas_tvparser_getval(tvp)
(112,enablemct = false)
(113,16384)
(114,cp->debug = 0)
(115,cp->refgrdwidth - cp->tilegrdoffx)
(116,true)
(117,csty)
(118,&ilyrrates)
(119,hsteplcm != 1)
(120,"invalid precinct height\\n")
(121,refgrdheight)
(122,break;)
(123,cmptno)
(124,tccp)
(125,cp->tilewidth)
(126,lyrno)
(127,cp->tcp.csty |= JPC_COD_EPH)
(128,if (cp->imgareatlx == UINT_FAST32_MAX)
(129,hsteplcm)
(130,cp)
(131,tccp)
(132,break;)
(133,"ignoring bad rate specifier %s\\n")
(134,cp->tileheight = cp->refgrdheight - cp->tilegrdoffy)
(135,if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize)
(136,tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1])
(137,(unsigned long)
(138,if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t)
(139,sampgrdsubstepx)
(140,case OPT_PTERM:)
(141,cp)
(142,cp)
(143,0)
(144,)
(145,tilegrdoffy)
(146,cp)
(147,tvp)
(148,double)
(149,atoi(jas_tvparser_getval(tvp)
(150,tcp->mctid = JPC_MCT_NONE)
(151,tvp)
(152,intmode)
(153,cp->imgareatly)
(154,break;)
(155,jas_image_cmptsgnd(image, cmptno)
(156,cp->refgrdwidth)
(157,jas_tvparser_getval(tvp)
(158,cp->tccp)
(159,ilyrrates)
(160,cp->tilegrdoffy = UINT_FAST32_MAX)
(161,cp)
(162,break;)
(163,tcp)
(164,ccp->sampgrdstepy)
(165,cp->tccp.cblkwidthexpn > 12)
(166,imgareatlx)
(167,mctvalid = false)
(168,0)
(169,encopts)
(170,tccp->prcheightexpns[rlvlno] = prcheightexpn)
(171,jp2overhead)
(172,tcp->numlyrs)
(173,tvp)
(174,cp->tccp.numgbits)
(175,cp->imgareatly == UINT_FAST32_MAX)
(176,cp->tccp)
(177,cp->totalsize)
(178,cp->numcmpts = jas_image_numcmpts(image)
(179,cp->imgareatly)
(180,cp->tilegrdoffx)
(181,jas_image_cmptbry(image, cmptno)
(182,imgareatly)
(183,UINT_FAST32_MAX)
(184,"too many layers\\n")
(185,image)
(186,tileheight)
(187,cp->rawsize)
(188,cp->tccp)
(189,if (jas_image_cmptprec(image, cmptno)
(190,0)
(191,jas_eprintf("warning: overriding imgareatly value\\n")
(192,cp->refgrdwidth)
(193,jas_eprintf("invalid tile grid offset (%lu, %lu)
(194,case OPT_CBLKHEIGHT:)
(195,if (cp->totalsize != UINT_FAST32_MAX)
(196,jas_tvparser_getval(tvp)
(197,goto error;)
(198,)
(199,break;)
(200,imgareatly)
(201,tccp)
(202,cmptno)
(203,15)
(204,)
(205,cp->imgareatlx *= hsteplcm)
(206,)
(207,ret)
(208,tccp)
(209,intmode)
(210,imgareatly)
(211,false)
(212,tcp->ilyrrates)
(213,tcp->numlyrs)
(214,tilewidth)
(215,cp)
(216,"must be at least one resolution level\\n")
(217,jas_image_brx(image)
(218,cp->rawsize)
(219,if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(220,tvp)
(221,cmptno)
(222,)
(223,(tcp->intmode)
(224,unsigned long)
(225,tcp->ilyrrates[i])
(226,)
(227,tccp->qmfbid = (tcp->intmode)
(228,tcp)
(229,unsigned long)
(230,cmptno)
(231,goto error;)
(232,cp->tilegrdoffx)
(233,cp->tccp)
(234,prcheightexpn != 15)
(235,tvp)
(236,!(cp = jas_malloc(sizeof(jpc_enc_cp_t)
(237,cp)
(238,cp->tcp.numlyrs > 16384)
(239,JPC_COX_INS)
(240,maxrlvls)
(241,intmode)
(242,++rlvlno)
(243,tccp)
(244,cp)
(245,goto error;)
(246,if (ilyrrates)
(247,cmptno)
(248,cp->refgrdwidth)
(249,image)
(250,if (ilyrrates && numilyrrates > 0)
(251,2)
(252,ccp->prec = jas_image_cmptprec(image, cmptno)
(253,goto error;)
(254,break;)
(255,tccp)
(256,tccp->cblksty |= JPC_COX_TERMALL)
(257,case OPT_TILEHEIGHT:)
(258,debug)
(259,cp)
(260,"ignoring invalid progression order %s\\n")
(261,tccp)
(262,tcp)
(263,image)
(264,)
(265,cp->tileheight)
(266,cp)
(267,jas_tvparser_create(optstr ? optstr : "")
(268,ilyrrates)
(269,)
(270,jas_tvparser_getval(tvp)
(271,cp->tilegrdoffy > cp->imgareatly)
(272,rawsize)
(273,tcp->numlyrs)
(274,tagid)
(275,cp)
(276,tccp->prcwidthexpns[rlvlno])
(277,vsteplcm)
(278,sizeof(jpc_enc_cp_t)
(279,UINT_FAST32_MAX)
(280,cp->totalsize)
(281,image)
(282,cp->tccp.numgbits > 8)
(283,optstr ? optstr : "")
(284,JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,\\n\\t  cp->tilewidth)
(285,jas_image_cmptheight(image, cmptno)
(286,goto error;)
(287,6)
(288,rlvlno)
(289,cblkwidthexpn)
(290,image)
(291,goto error;)
(292,imgareatlx)
(293,tilegrdoffy)
(294,prcwidthexpn = 15)
(295,tileheight)
(296,atoi(jas_tvparser_getval(tvp)
(297,jas_image_rawsize(image)
(298,tilegrdoffx)
(299,ilyrrates)
(300,8)
(301,vsteplcm != 1)
(302,cp->tilegrdoffy > cp->imgareatly ||\\n\\t  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(303,lyrno + 2 < tcp->numlyrs)
(304,cp)
(305,cp->tilegrdoffy = cp->imgareatly)
(306,tcp->prg)
(307,cp->numcmpts * sizeof(jpc_enc_ccp_t)
(308,tcp->numlyrs - 1)
(309,(tcp->numlyrs - 1)
(310,atoi(jas_tvparser_getval(tvp)
(311,0)
(312,case OPT_PRG:)
(313,csty)
(314,cp->tilegrdoffy)
(315,)
(316,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(317,cp->debug)
(318,numilyrrates)
(319,jas_eprintf("warning: color space apparently not RGB\\n")
(320,tcp = &cp->tcp)
(321,cp->tileheight)
(322,default:)
(323,image)
(324,cp->tccp)
(325,imgareatlx)
(326,cp->totalsize = UINT_FAST32_MAX)
(327,totalsize)
(328,tcp->numlyrs > 1)
(329,cp->numcmpts == 3)
(330,totalsize)
(331,goto error;)
(332,numlyrs)
(333,if (prcwidthexpn != 15 || prcheightexpn != 15)
(334,"warning: invalid intermediate layer rates specifier ignored (%s)
(335,cmptno < JAS_CAST(int, cp->numcmpts)
(336,ccp->sampgrdstepx)
(337,enablemct)
(338,1)
(339,cp->imgareatlx = 0)
(340,if (vsteplcm != 1)
(341,tcp)
(342,cp)
(343,tileheight)
(344,if (cp->tccp.maxrlvls < 1)
(345,atoi(jas_tvparser_getval(tvp)
(346,tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i])
(347,numcmpts)
(348,cp)
(349,0)
(350,ilyrrates)
(351,case OPT_JP2OVERHEAD:)
(352,cp->tileheight)
(353,tccp)
(354,rlvlno)
(355,ratestrtosize(jas_tvparser_getval(tvp)
(356,cp->numhtiles)
(357,numgbits)
(358,cp->imgareatly + jas_image_height(image)
(359,JPC_MCT_NONE)
(360,UINT_FAST32_MAX)
(361,cp)
(362,cp->tilewidth)
(363,jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(364,cp)
(365,image)
(366,15)
(367,cp)
(368,cp->totalsize)
(369,tagid)
(370,tvp)
(371,1)
(372,"invalid tile height %lu\\n")
(373,qmfbid)
(374,sampgrdsubstepx)
(375,cp->totalsize)
(376,jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(377,cmptno)
(378,tcp->ilyrrates)
(379,rlvlno < tccp->maxrlvls)
(380,jas_tvparser_getval(tvp)
(381,jas_image_cmptvstep(image, cmptno)
(382,tccp)
(383,tcp->prg = tagid)
(384,cp)
(385,cp->tilegrdoffx)
(386,jpc_fix_t)
(387,cp = jas_malloc(sizeof(jpc_enc_cp_t)
(388,imgareatly)
(389,case OPT_MODE:)
(390,UINT_FAST32_MAX)
(391,tcp)
(392,numcmpts)
(393,numhtiles)
(394,jas_malloc((tcp->numlyrs - 1)
(395,JPC_COX_PTERM)
(396,jas_malloc(sizeof(jpc_enc_cp_t)
(397,tcp)
(398,break;)
(399,JAS_CLRSPC_FAM_RGB)
(400,cp->tilegrdoffy)
(401,tcp)
(402,2)
(403,ilyrrates)
(404,tccp->maxrlvls = 6)
(405,imgareatlx)
(406,ccp)
(407,cp)
(408,jp2overhead = atoi(jas_tvparser_getval(tvp)
(409,tccp->cblksty)
(410,)
(411,tcp->csty)
(412,jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(413,for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno)
(414,tvp)
(415,cp)
(416,cp->tilegrdoffy)
(417,tvp)
(418,if (tcp->numlyrs > 1)
(419,jas_tvparser_getval(tvp)
(420,tccp->prcheightexpns[rlvlno])
(421,tilegrdoffy)
(422,tccp)
(423,jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)
(424,0)
(425,cp)
(426,tccp->cblkheightexpn =\\n\\t\\t\\t  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(427,tccp)
(428,cp->tileheight)
(429,jpc_dbltofix(ilyrrates[i])
(430,"warning: overriding imgareatlx value\\n")
(431,break;)
(432,cp->numhtiles * cp->numvtiles)
(433,tccp->cblkwidthexpn = 6)
(434,"cannot use real mode for lossless coding\\n")
(435,image)
(436,tcp->intmode)
(437,case OPT_CBLKWIDTH:)
(438,tvp)
(439,++cmptno)
(440,cblkwidthexpn)
(441,cp->tccp)
(442,break;)
(443,atoi(jas_tvparser_getval(tvp)
(444,if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1])
(445,image)
(446,cp)
(447,modetab)
(448,tcp)
(449,image)
(450,!cp->tcp.intmode)
(451,cp)
(452,mctvalid = true)
(453,break;)
(454,tilegrdoffx)
(455,jas_image_cmptsgnd(image, cmptno)
(456,rawsize)
(457,jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)
(458,jas_tvparser_next(tvp)
(459,"intermediate layer rates must increase monotonically\\n")
(460,tcp->numlyrs - 1)
(461,case OPT_PRCWIDTH:)
(462,cblkwidthexpn)
(463,ilyrrates)
(464,cp->refgrdwidth = 0)
(465,csty)
(466,0)
(467,jas_clrspc_fam(jas_image_clrspc(image)
(468,cmptno)
(469,jas_tvparser_getval(tvp)
(470,numlyrs)
(471,if (tvp)
(472,UINT_FAST32_MAX)
(473,cp->debug)
(474,"warning: specified rate is unreasonably large (%lu > %lu)
(475,cp)
(476,cp->tilegrdoffx > cp->imgareatlx)
(477,int)
(478,jas_eprintf("invalid number of guard bits\\n")
(479,tvp)
(480,mctvalid)
(481,cp->imgareatly *= vsteplcm)
(482,)
(483,false)
(484,refgrdwidth)
(485,jas_image_cmptvstep(image, cmptno)
(486,ccp)
(487,tilegrdoffy)
(488,tcp->prg = JPC_COD_LRCPPRG)
(489,intmode)
(490,0)
(491,cp->imgareatlx)
(492,cp->tilegrdoffx)
(493,break;)
(494,tcp->numlyrs)
(495,cp->tilegrdoffx)
(496,&numilyrrates)
(497,tvp)
(498,case OPT_TILEGRDOFFX:)
(499,)
(500,prcheightexpn)
(501,rawsize)
(502,2)
(503,JPC_POW2(cp->tccp.cblkwidthexpn)
(504,"warning: color space apparently not RGB\\n")
(505,goto error;)
(506,tvp)
(507,ccps)
(508,cp->tilegrdoffy)
(509,cp)
(510,mctid)
(511,jpc_fixtodbl(tcp->ilyrrates[lyrno])
(512,numlyrs)
(513,tccp->csty = 0)
(514,cp->rawsize)
(515,1)
(516,atoi(jas_tvparser_getval(tvp)
(517,)
(518,jas_tvparser_getval(tvp)
(519,cp->tilegrdoffy)
(520,for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1)
(521,jas_tvparser_getval(tvp)
(522,jas_tvparser_getval(tvp)
(523,lyrno)
(524,enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(525,tcp->numlyrs)
(526,cp->refgrdheight - cp->tilegrdoffy)
(527,jas_eprintf("intermediate layer rates must increase monotonically\\n")
(528,hsteplcm *= jas_image_cmpthstep(image, cmptno)
(529,jas_image_cmptsgnd(image, cmptno)
(530,break;)
(531,imgareatlx)
(532,case OPT_TILEWIDTH:)
(533,)
(534,ilyrrates)
(535,UINT_FAST32_MAX)
(536,switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(537,cp->tccp.cblkwidthexpn)
(538,cp->rawsize)
(539,prcheightexpn > 15)
(540,"warning: intermediate layer rates must be less than overall rate\\n")
(541,)
(542,totalsize)
(543,cp->tilegrdoffx)
(544,cp->tccp.cblkwidthexpn)
(545,for (rlvlno = 0; rlvlno < tccp->maxrlvls; ++rlvlno)
(546,numlyrs)
(547,cp->tccp)
(548,numcmpts)
(549,tilegrdoffy)
(550,prcheightexpn)
(551,return 0;)
(552,cp->numhtiles)
(553,cp->tileheight)
(554,cp->tcp.csty)
(555,error:)
(556,0)
(557,UINT_FAST32_MAX)
(558,image)
(559,tagid == MODE_INT)
(560,numilyrrates)
(561,cp)
(562,jas_image_cmptbrx(image, cmptno)
(563,true)
(564,tvp)
(565,cp->tcp.numlyrs)
(566,jas_image_cmptprec(image, cmptno)
(567,cp->imgareatly)
(568,jas_clrspc_fam(jas_image_clrspc(image)
(569,cp)
(570,stepsizes)
(571,0)
(572,numilyrrates)
(573,cblksty)
(574,cp->tilegrdoffx > cp->imgareatlx ||\\n\\t  cp->tilegrdoffy > cp->imgareatly ||\\n\\t  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(575,!cp->tilewidth)
(576,cblkheightexpn)
(577,if (cp->tilegrdoffx == UINT_FAST32_MAX)
(578,cp)
(579,lyrno = 0)
(580,cp->tilewidth)
(581,tvp)
(582,id)
(583,i = 0)
(584,jpc_fixtodbl(tcp->ilyrrates[lyrno])
(585,cmptno = 0)
(586,tcp->ilyrrates[lyrno])
(587,0)
(588,tilewidth)
(589,ccp->sampgrdsubstepx)
(590,cp)
(591,JPC_MCT_RCT)
(592,jas_free(ilyrrates)
(593,numilyrrates = 0)
(594,cp->totalsize != UINT_FAST32_MAX)
(595,case OPT_NOMCT:)
(596,if (!cp->tilewidth)
(597,cp->tcp.csty)
(598,jas_tvparser_gettag(tvp)
(599,tccp->numgbits = 2)
(600,jas_image_cmptprec(image, cmptno)
(601,jas_tvparser_getval(tvp)
(602,cp->tilegrdoffx)
(603,debug)
(604,image)
(605,rawsize)
(606,if (cp->tilegrdoffx > cp->imgareatlx ||\\n\\t  cp->tilegrdoffy > cp->imgareatly ||\\n\\t  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(607,++cmptno)
(608,ccp->sgnd = jas_image_cmptsgnd(image, cmptno)
(609,if (ratestrtosize(jas_tvparser_getval(tvp)
(610,goto error;)
(611,jas_image_cmptwidth(image, 0)
(612,char *optstr)
(613,cp)
(614,cp->tcp.intmode)
(615,JAS_CAST(int, tcp->numlyrs - 1)
(616,hsteplcm)
(617,case OPT_DEBUG:)
(618,maxrlvls)
(619,(unsigned long)
(620,atoi(jas_tvparser_getval(tvp)
(621,12)
(622,jpc_enc_cp_t)
(623,numstepsizes)
(624,)
(625,JPC_COX_TERMALL)
(626,cp->tilegrdoffy)
(627,"ignoring invalid mode %s\\n")
(628,cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)
(629,tvp)
(630,cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12)
(631,cp->tilegrdoffx = cp->imgareatlx)
(632,3)
(633,cp->totalsize - jp2overhead)
(634,)
(635,cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)
(636,)
(637,cp)
(638,tvp)
(639,tccp)
(640,rlvlno = 0)
(641,case OPT_RESET:)
(642,jas_tvparser_destroy(tvp)
(643,jas_image_numcmpts(image)
(644,tcp)
(645,JPC_COD_LRCPPRG)
(646,sgnd)
(647,break;)
(648,cp->totalsize)
(649,cp->rawsize)
(650,cp->tilegrdoffy + cp->tileheight)
(651,tcp)
(652,if (jpc_atoaf(jas_tvparser_getval(tvp)
(653,i)
(654,break;)
(655,cp->totalsize > jp2overhead)
(656,jas_eprintf("ignoring bad rate specifier %s\\n",\\n\\t\\t\\t\\t  jas_tvparser_getval(tvp)
(657,)
(658,0)
(659,jas_image_cmptwidth(image, cmptno)
(660,tcp)
(661,0)
(662,"invalid precinct width\\n")
(663,tccp->cblkwidthexpn)
(664,if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12)
(665,if (cp->tcp.numlyrs > 16384)
(666,0)
(667,cp)
(668,prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(669,cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(670,cp->tilegrdoffx == UINT_FAST32_MAX)
(671,prg)
(672,tccp)
(673,tileheight)
(674,cp->tccp.cblkheightexpn)
(675,jas_clrspc_fam(jas_image_clrspc(image)
(676,unsigned long)
(677,cp->tccp)
(678,numlyrs)
(679,optstr)
(680,)
(681,)
(682,&cp->tcp)
(683,if (cp->numcmpts == 3)
(684,jas_image_cmptvstep(image, cmptno)
(685,0)
(686,cmptno < jas_image_numcmpts(image)
(687,cp->tcp)
(688,cp->refgrdheight)
(689,break;)
(690,cp)
(691,tccp)
(692,tvp)
(693,cp->imgareatlx)
(694,if (!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)
(695,tcp)
(696,0)
(697,lyrno + 2)
(698,prcheightexpn)
(699,cp)
(700,jp2overhead)
(701,tcp->ilyrrates)
(702,2)
(703,cp)
(704,cp)
(705,cp->tccp)
(706,cp->imgareatlx = UINT_FAST32_MAX)
(707,break;)
(708,!cp->tileheight)
(709,cp)
(710,tilegrdoffy)
(711,enablemct)
(712,break;)
(713,cp->imgareatly)
(714,cmptno)
(715,goto error;)
(716,maxrlvls)
(717,refgrdheight)
(718,rlvlno)
(719,"invalid number of guard bits\\n")
(720,jas_tvparser_getval(tvp)
(721,tilegrdoffy)
(722,cp->tileheight)
(723,mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(724,image)
(725,cp->numtiles = cp->numhtiles * cp->numvtiles)
(726,tccp)
(727,(tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(728,tilewidth)
(729,ccp)
(730,0)
(731,cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp)
(732,jas_tvparser_destroy(tvp)
(733,tcp)
(734,tileheight)
(735,memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes)
(736,tvp)
(737,cp->tcp)
(738,tcp)
(739,((double)
(740,(unsigned long)
(741,cp)
(742,tccp = &cp->tccp)
(743,image)
(744,tileheight)
(745,cp)
(746,image)
(747,cp->tccp.cblkwidthexpn < 2)
(748,15)
(749,)
(750,cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,\\n\\t  cp->tilewidth)
(751,totalsize)
(752,cmptno)
(753,cmptno)
(754,prcwidthexpn)
(755,rlvlno)
(756,cp->rawsize = jas_image_rawsize(image)
(757,tccp)
(758,cp->tileheight)
(759,UINT_FAST32_MAX)
(760,cp->tilewidth)
(761,cp->tcp.csty |= JPC_COD_SOP)
(762,ccps)
(763,jp2overhead)
(764,)
(765,jas_image_cmptheight(image, 0)
(766,case OPT_MAXRLVLS:)
(767,cp->imgareatly = UINT_FAST32_MAX)
(768,tccp->maxrlvls)
(769,cp)
(770,tilegrdoffx)
(771,cp->ccps = 0)
(772,prec)
(773,JPC_COD_SOP)
(774,tccp->prcheightexpns)
(775,0)
(776,ilyrrates)
(777,15)
(778,ccp)
(779,6)
(780,break;)
(781,cmptno)
(782,cp->imgareatlx)
(783,ccp = cp->ccps)
(784,)
(785,ccp->stepsizes)
(786,lyrno = 0)
(787,JPC_MCT_ICT)
(788,cp)
(789,)
(790,tilegrdoffx)
(791,cblkheightexpn)
(792,tvp)
(793,case OPT_IMGAREAOFFX:)
(794,cblkwidthexpn)
(795,if (!cp->tileheight)
(796,tccp->csty)
(797,cp)
(798,0)
(799,unsigned long)
(800,cp)
(801,cp)
(802,tccp)
(803,0)
(804,)
(805,id)
(806,hsteplcm)
(807,cp->tilegrdoffy)
(808,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(809,cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(810,for (cmptno = 0; cmptno < jas_image_numcmpts(image)
(811,0)
(812,)
(813,jas_eprintf("unsupported image type\\n")
(814,hsteplcm)
(815,if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(816,vsteplcm *= jas_image_cmptvstep(image, cmptno)
(817,jas_image_t *image)
(818,cp->imgareatlx)
(819,jas_tvparser_getval(tvp)
(820,vsteplcm)
(821,cp)
(822,cp)
(823,totalsize)
(824,tcp->ilyrrates[lyrno + 1])
(825,)
(826,cp->totalsize > cp->rawsize)
(827,)
(828,tvp)
(829,ilyrrates)
(830,cp->imgareatly = atoi(jas_tvparser_getval(tvp)
(831,tilewidth)
(832,)
(833,break;)
(834,cp->tccp.numgbits)
(835,)
(836,jas_eprintf("warning: intermediate layer rates must be less than overall rate\\n")
(837,!cp->tileheight)
(838,tvp)
(839,totalsize)
(840,++lyrno)
(841,cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx)
(842,jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(843,cblkheightexpn)
(844,lyrno)
(845,cp->tccp.cblkheightexpn)
(846,!(tvp = jas_tvparser_create(optstr ? optstr : "")
(847,cp->tilewidth = 0)
(848,ccp)
(849,if (!cp->tileheight)
(850,jas_image_cmptbry(image, cmptno)
(851,cblkwidthexpn)
(852,if (hsteplcm != 1)
(853,if (prcwidthexpn > 15)
(854,numlyrs)
(855,cp)
(856,goto error;)
(857,jas_taginfo_nonull(jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(858,cp)
(859,cp)
(860,cp)
(861,cp->imgareatly)
(862,jas_taginfo_nonull(jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(863,int)
(864,tccp->csty |= JPC_COX_PRT)
(865,ilyrrates = 0)
(866,jas_tvparser_getval(tvp)
(867,tagid)
(868,JPC_POW2(cp->tccp.cblkheightexpn)
(869,cp)
(870,vsteplcm = 1)
(871,cp)
(872,tccp->cblksty = 0)
(873,jas_eprintf("must be at least one resolution level\\n")
(874,cp->totalsize == UINT_FAST32_MAX)
(875,15)
(876,0)
(877,&cp->tccp)
(878,12)
(879,cp->refgrdheight)
(880,atoi(jas_tvparser_getval(tvp)
(881,cp)
(882,++i)
(883,cp)
(884,prcheightexpn)
(885,cp->totalsize)
(886,tcp->numlyrs = 1)
(887,tccp)
(888,cp)
(889,cp->tccp.cblkheightexpn)
(890,ret)
(891,prcheightexpn)
(892,cp)
(893,tilegrdoffx)
(894,cp->numcmpts)
(895,(tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(896,enablemct)
(897,lyrno < tcp->numlyrs - 1)
(898,tagid)
(899,cp->imgareatly)
(900,cblkheightexpn)
(901,cblksty)
(902,imgareatlx)
(903,if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(904,cp->tileheight = atoi(jas_tvparser_getval(tvp)
(905,jas_eprintf("ignoring invalid mode %s\\n",\\n\\t\\t\\t\\t  jas_tvparser_getval(tvp)
(906,tccp->cblksty)
(907,tccp->cblksty |= JPC_COX_SEGSYM)
(908,break;)
(909,jp2overhead)
(910,mctvalid)
(911,imgareatly)
(912,cp)
(913,lyrno)
(914,totalsize)
(915,"warning: overriding imgareatly value\\n")
(916,cp)
(917,jas_image_cmptprec(image, cmptno)
(918,)
(919,(tcp->intmode)
(920,lyrno)
(921,ilyrrates)
(922,image)
(923,JPC_COD_EPH)
(924,cp)
(925,)
(926,JPC_COX_SEGSYM)
(927,hsteplcm = 1)
(928,cp->imgareatlx)
(929,tccp)
(930,if (cp->totalsize != UINT_FAST32_MAX)
(931,tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(932,1)
(933,)
(934,"unsupported image type\\n")
(935,image)
(936,RET)
(937,cp)
(938,numvtiles)
(939,cp)
(940,jas_eprintf("warning: overriding imgareatlx value\\n")
(941,0)
(942,tccp->cblksty)
(943,if (prcheightexpn > 15)
(944,cp)
(945,JPC_COX_VSC)
(946,jas_tvparser_getval(tvp)
(947,numlyrs)
(948,if (ilyrrates)
(949,ccp->prec)
(950,tvp)
(951,cp->tccp.maxrlvls < 1)
(952,(unsigned long)
(953,vsteplcm)
(954,tcp)
(955,tccp->cblkheightexpn)
(956,prcwidthexpn)
(957,0)
(958,tccp)
(959,if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(960,tcp)
(961,cblkheightexpn)
(962,cp->tilegrdoffx)
(963,ccp->sampgrdsubstepx = 0)
(964,tcp->intmode)
(965,1)
(966,1)
(967,jas_tvparser_getval(tvp)
(968,imgareatlx)
(969,prcwidthexpn)
(970,tccp->cblksty)
(971,jas_eprintf("invalid tile height %lu\\n", (unsigned long)
(972,cp)
(973,cp->totalsize != UINT_FAST32_MAX)
(974,lyrno + 1)
(975,numtiles)
(976,image)
(977,tcp->mctid)
(978,cp->refgrdwidth - cp->tilegrdoffx)
(979,cp->refgrdheight - cp->tilegrdoffy)
(980,cp->numtiles)
(981,prcwidthexpn)
(982,tccp)
(983,tccp)
(984,case OPT_LAZY:)
(985,tcp)
(986,cp)
(987,cp->ccps)
(988,MODE_INT)
(989,cblksty)
(990,totalsize)
(991,cp->imgareatlx)
(992,tccp)
(993,6)
(994,break;)
(995,stepsizes)
(996,!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)
(997,tcp)
(998,jp2overhead = 0)
(999,JPC_COX_RESET)
(1000,tcp->intmode)
(1001,++lyrno)
(1002,cp->refgrdheight)
(1003,false)
(1004,jas_eprintf("invalid precinct height\\n")
(1005,cp)
(1006,if (jpc_fixtodbl(tcp->ilyrrates[lyrno])
(1007,if (cp->tccp.numgbits > 8)
(1008,UINT_FAST32_MAX)
(1009,if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12)
(1010,jas_eprintf("invalid code block width %d\\n",\\n\\t\\t  JPC_POW2(cp->tccp.cblkwidthexpn)
(1011,cp->refgrdheight = 0)
(1012,1)
(1013,12)
(1014,cp->numvtiles)
(1015,cp->imgareatly = 0)
(1016,break;)
(1017,jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)
(1018,sizeof(ccp->stepsizes)
(1019,cp->refgrdwidth = cp->imgareatlx + jas_image_width(image)
(1020,if (!(tvp = jas_tvparser_create(optstr ? optstr : "")
(1021,"invalid tile width %lu\\n")
(1022,cp->tccp.cblkheightexpn > 12)
(1023,numlyrs)
(1024,jas_image_cmpthstep(image, cmptno)
(1025,tilewidth)
(1026,tcp->ilyrrates)
(1027,cp)
(1028,tcp)
(1029,if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12)
(1030,)
(1031,cp)
(1032,cp->tilegrdoffx)
(1033,cmptno)
(1034,cp->imgareatly)
(1035,goto error;)
(1036,numcmpts)
(1037,if (jas_image_cmptbrx(image, cmptno)
(1038,image)
(1039,tcp->ilyrrates = 0)
(1040,cp)
(1041,)
(1042,csty)
(1043,case OPT_IMGAREAOFFY:)
(1044,)
(1045,jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1046,break;)
(1047,cmptno = 0)
(1048,cp->imgareatly)
(1049,image)
(1050,cp->tccp)
(1051,image)
(1052,jas_eprintf("code block size too large\\n")
(1053,tilegrdoffx)
(1054,tccp->cblksty)
(1055,0)
(1056,jas_image_cmptprec(image, cmptno)
(1057,cp->refgrdheight)
(1058,cblksty)
(1059,mctvalid)
(1060,cp->tilewidth)
(1061,)
(1062,tccp->cblkheightexpn)
(1063,"code block size too large\\n")
(1064,cp->tcp)
(1065,numvtiles)
(1066,for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts)
(1067,cp)
(1068,cp)
(1069,ccps)
(1070,!(ret = jas_tvparser_next(tvp)
(1071,cp)
(1072,0)
(1073,jas_image_cmptsgnd(image, cmptno)
(1074,cp->tccp.cblkwidthexpn)
(1075,mctvalid)
(1076,tilewidth)
(1077,ccp)
(1078,case OPT_EPH:)
(1079,++cmptno)
(1080,cp->imgareatly)
(1081,goto error;)
(1082,cp = 0)
(1083,)
(1084,tcp->numlyrs)
(1085,cp)
(1086,jas_image_cmpthstep(image, cmptno)
(1087,prgordtab)
(1088,refgrdwidth)
(1089,jas_image_clrspc(image)
(1090,JPC_COX_RFT)
(1091,while (!(ret = jas_tvparser_next(tvp)
(1092,(unsigned long)
(1093,prcwidthexpn)
(1094,if (!cp->tilewidth)
(1095,jas_image_cmpthstep(image, cmptno)
(1096,cp)
(1097,goto error;)
(1098,imgareatlx)
(1099,jas_image_cmptbrx(image, cmptno)
(1100,tccp)
(1101,cp->tcp)
(1102,cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp)
(1103,tccp)
(1104,(unsigned long)
(1105,tvp)
(1106,cp)
(1107,15)
(1108,tcp->intmode)
(1109,cp->imgareatlx)
(1110,)
(1111,cp)
(1112,tcp->ilyrrates)
(1113,jas_tvparser_getval(tvp)
(1114,ccp)
(1115,tvp)
(1116,tcp->prg)
(1117,tcp->numlyrs)
(1118,image)
(1119,enablemct)
(1120,jas_image_cmptwidth(image, cmptno)
(1121,)
(1122,refgrdheight)
(1123,ilyrrates)
(1124,jas_tvparser_getval(tvp)
(1125,jas_image_clrspc(image)
(1126,)
(1127,0)
(1128,jpc_atoaf(jas_tvparser_getval(tvp)
(1129,imgareatlx)
(1130,ccp->numstepsizes)
(1131,cp->tccp)
(1132,tcp->intmode = true)
(1133,prcheightexpns)
(1134,cp)
(1135,tilegrdoffx)
(1136,ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno)
(1137,atoi(jas_tvparser_getval(tvp)
(1138,cp->totalsize = (cp->totalsize > jp2overhead)
(1139,JAS_CAST(int, cp->numcmpts)
(1140,0)
(1141,totalsize)
(1142,numhtiles)
(1143,lyrno)
(1144,tcp->numlyrs - 1)
(1145,sizeof(jpc_enc_ccp_t)
(1146,atoi(jas_tvparser_getval(tvp)
(1147,cmptno)
(1148,cp->tilewidth)
(1149,imgareatly)
(1150,cp->tccp)
(1151,UINT_FAST32_MAX)
(1152,for (cmptno = 0; cmptno < jas_image_numcmpts(image)
(1153,enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(1154,tccp->cblkwidthexpn)
(1155,case OPT_PRCHEIGHT:)
(1156,tvp)
(1157,jas_image_cmptsgnd(image, 0)
(1158,tvp)
(1159,ccp->sampgrdsubstepx = 0)
(1160,tccp->prcwidthexpns[rlvlno] = prcwidthexpn)
(1161,cp)
(1162,cp->ccps)
(1163,)
(1164,break;)
(1165,cmptno)
(1166,cblksty)
(1167,tcp)
(1168,tccp->cblksty |= JPC_COX_PTERM)
(1169,cp->imgareatlx)
(1170,ccp->sgnd)
(1171,cp)
(1172,!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1)
(1173,tccp)
(1174,break;)
(1175,prcheightexpn)
(1176,cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12)
(1177,jas_free(ilyrrates)
(1178,)
(1179,tccp->cblkwidthexpn =\\n\\t\\t\\t  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(1180,cp->refgrdheight = cp->imgareatly + jas_image_height(image)
(1181,jas_tvparser_getval(tvp)
(1182,jas_eprintf("invalid tile width %lu\\n", (unsigned long)
(1183,!cp->tilewidth)
(1184,tcp)
(1185,0)
(1186,case OPT_RATE:)
(1187,unsigned long)
(1188,jas_image_cmptheight(image, cmptno)
(1189,UINT_FAST32_MAX)
(1190,cp->tilewidth)
(1191,cp)
(1192,lyrno)
(1193,0)
(1194,tcp)
(1195,true)
(1196,if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)
(1197,tccp->cblksty)
(1198,cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12)
(1199,jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1200,jas_image_cmptwidth(image, cmptno)
(1201,tccp->cblksty |= JPC_COX_RESET)
(1202,cp)
(1203,if (!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1)
(1204,tccp->qmfbid)
(1205,tilegrdoffy)
(1206,tcp->mctid)
(1207,jas_image_cmptprec(image, 0)
(1208,atoi(jas_tvparser_getval(tvp)
(1209,cp->totalsize)
(1210,cp)
(1211,jas_eprintf("too many layers\\n")
(1212,totalsize)
(1213,cp)
(1214,jas_image_numcmpts(image)
(1215,tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1216,sizeof(jpc_fix_t)
(1217,jas_eprintf("cannot use real mode for lossless coding\\n")
(1218,tvp = jas_tvparser_create(optstr ? optstr : "")
(1219,(double)
(1220,jpc_enc_cp_destroy(cp)
(1221,lyrno)
(1222,cp->imgareatlx + jas_image_width(image)
(1223,cp)
(1224,ilyrrates[i])
(1225,intmode)
(1226,cp->tilegrdoffy)
(1227,1)
(1228,jas_eprintf("warning: ignoring invalid option %s\\n",\\n\\t\\t\\t jas_tvparser_gettag(tvp)
(1229,tcp)
(1230,image)
(1231,image)
(1232,cmptno)
(1233,)
(1234,"warning: ignoring invalid option %s\\n")
(1235,case OPT_ILYRRATES:)
(1236,i)
(1237,)
(1238,(cp->totalsize > jp2overhead)
(1239,return cp;)
(1240,&cp->totalsize)
(1241,mctvalid)
(1242,cp->tilegrdoffy)
(1243,vsteplcm)
(1244,tccp->numgbits)
(1245,rlvlno)
(1246,goto error;)
(1247,ccp)
(1248,case OPT_NUMGBITS:)
(1249,cp->tilewidth)
(1250,ilyrrates)
(1251,cp)
(1252,tvp = 0)
(1253,cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn)
(1254,cmptno)
(1255,0)
(1256,cp->numcmpts)
(1257,cmptno)
(1258,prg)
(1259,i < JAS_CAST(int, tcp->numlyrs - 1)
(1260,cp)
(1261,goto error;)
(1262,numgbits)
(1263,tccp->cblksty |= JPC_COX_LAZY)
(1264,cp)
(1265,prcheightexpn = 15)
(1266,1)
(1267,cp->tilewidth = atoi(jas_tvparser_getval(tvp)
(1268,jas_image_width(image)
(1269,sampgrdstepy)
(1270,jas_image_cmptbry(image, cmptno)
(1271,++ccp)
(1272,prcwidthexpn != 15)
(1273,cblksty)
(1274,cmptno)
(1275,jas_image_cmptbrx(image, cmptno)
(1276,cblkwidthexpn)
(1277,)
(1278,jas_clrspc_fam(jas_image_clrspc(image)
(1279,jas_tvparser_getval(tvp)
(1280,cp->tccp.cblkheightexpn)
(1281,cp->imgareatlx == UINT_FAST32_MAX)
(1282,tccp->cblksty)
(1283,case OPT_SEGSYM:)
(1284,case OPT_TILEGRDOFFY:)
(1285,totalsize)
(1286,0)
(1287,)
(1288,atoi(jas_tvparser_getval(tvp)
(1289,tilewidth)
(1290,cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp)
(1291,cp)
(1292,rlvlno)
(1293,tccp)
(1294,jas_image_height(image)
(1295,)
(1296,1)
(1297,tccp->cblkheightexpn = 6)
(1298,cp->numcmpts)
(1299,cp->tilegrdoffx = UINT_FAST32_MAX)
(1300,)
(1301,cmptno)
(1302,mctvalid = false)
(1303,tvp)
(1304,tvp)
(1305,cp->tccp.cblkwidthexpn)
(1306,break;)
(1307,case OPT_VCAUSAL:)
(1308,cmptno)
(1309,jas_image_bry(image)
(1310,prcwidthexpns)
(1311,cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,\\n\\t  cp->tileheight)
(1312,0)
(1313,)
(1314,cp->refgrdwidth)
(1315,JPC_COX_PRT)
(1316,cp->numcmpts)
(1317,tccp)
(1318,imgareatly)
(1319,"")
(1320,sampgrdstepx)
(1321,cmptno < jas_image_numcmpts(image)
(1322,cp)
(1323,1)
(1324,cp)
(1325,cp->tilegrdoffx + cp->tilewidth)
(1326,goto error;)
(1327,tccp->prcwidthexpns)
(1328,tccp)
(1329,)
(1330,cp)
(1331,tccp)
(1332,0)
(1333,tcp->csty = 0)
(1334,numilyrrates)
(1335,cp->imgareatlx)
(1336,cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx)
(1337,cp->tcp)
(1338,numgbits)
(1339,tcp)
(1340,cp)
(1341,cp->totalsize)
(1342,1)
(1343,ccp)
(1344,cp->tileheight = 0)
(1345,refgrdwidth)
(1346,tccp)
(1347,cp)
(1348,ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno)
(1349,cp->tileheight)
(1350,tccp->cblksty |= JPC_COX_VSC)
(1351,ilyrrates && numilyrrates > 0)
(1352,0)
(1353,cp)
(1354,cp)
(1355,cp)
(1356,cp->totalsize)
(1357,"invalid code block width %d\\n")
(1358,cp)
(1359,image)
(1360,cp->debug = atoi(jas_tvparser_getval(tvp)
(1361,jas_image_cmptbrx(image, cmptno)
(1362,atoi(jas_tvparser_getval(tvp)
(1363,cp)
(1364,maxrlvls)
(1365,ccp)
(1366,jas_eprintf("ignoring invalid progression order %s\\n",\\n\\t\\t\\t\\t  jas_tvparser_getval(tvp)
(1367,ccp->sampgrdsubstepx)
(1368,0)
(1369,csty)
(1370,tileheight)
(1371,cp)
(1372,cp->totalsize)
(1373,jas_tvparser_getval(tvp)
(1374,cmptno = 0)
(1375,enablemct)
(1376,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(1377,prcwidthexpn > 15)
(1378,jas_tvparser_gettag(tvp)
(1379,)
(1380,ccp)
(1381,mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(1382,lyrno)
(1383,ret = jas_tvparser_next(tvp)
(1384,totalsize)
(1385,ccp->numstepsizes = 0)
(1386,tileheight)
(1387,ilyrrates)
(1388,rawsize)
(1389,tcp)
(1390,goto error;)
(1391,jpc_enc_ccp_t)
(1392,if (cp)
(1393,tilewidth)
(1394,tcp->ilyrrates)
(1395,if (cp->imgareatly == UINT_FAST32_MAX)
(1396,cp->numvtiles)
(1397,jas_eprintf("invalid precinct width\\n")
(1398,cp->tilegrdoffy == UINT_FAST32_MAX)
(1399,JPC_COX_LAZY)
(1400,jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1401,ccp->stepsizes)
(1402,cp)
(1403,tccp->maxrlvls)
(1404,image)
(1405,tagid)
-----cfg-----
(1024,1016)
(1026,1024)
(1027,1045)
(1028,1035)
(1030,1028)
(1031,1027)
(7,31)
(1032,1041)
(1033,1038)
(1035,1033)
(1036,1032)
(1038,1036)
(1039,1031)
(1041,1039)
(1042,1054)
(1042,1056)
(1043,1049)
(1045,1043)
(1046,1042)
(1047,1052)
(1049,1047)
(1050,1046)
(1052,1050)
(1054,1063)
(1054,1094)
(31,34)
(1056,1054)
(34,37)
(1060,1072)
(37,40)
(1061,1064)
(1063,1061)
(40,48)
(1064,1060)
(44,1349)
(44,1354)
(44,1359)
(44,1361)
(44,52)
(1068,1084)
(1068,1349)
(1068,1354)
(1068,1359)
(1068,1361)
(45,44)
(1069,1068)
(1070,1078)
(47,45)
(48,47)
(1072,1070)
(1073,1069)
(1074,1073)
(1075,1080)
(52,55)
(1076,1075)
(1078,1076)
(55,58)
(1080,1074)
(58,61)
(1084,1085)
(61,67)
(1085,1087)
(1087,1088)
(64,72)
(1088,1094)
(65,64)
(1090,1103)
(1090,1107)
(67,65)
(1091,1090)
(1091,1100)
(1092,1091)
(69,77)
(70,69)
(1094,1092)
(72,70)
(1096,1090)
(1097,1096)
(74,82)
(1098,1101)
(75,74)
(1100,1098)
(77,75)
(1101,1097)
(79,87)
(1103,1349)
(1103,1354)
(1103,1359)
(1103,1361)
(80,79)
(82,80)
(1107,1111)
(1107,1115)
(84,92)
(85,84)
(87,85)
(1111,1349)
(1111,1354)
(1111,1359)
(1111,1361)
(89,97)
(90,89)
(1115,1119)
(1115,1128)
(92,90)
(94,102)
(95,94)
(1119,1349)
(1119,1354)
(1119,1359)
(1119,1361)
(97,95)
(99,107)
(1123,1145)
(1123,1154)
(100,99)
(1124,1123)
(1124,1135)
(1125,1124)
(102,100)
(1126,1129)
(104,112)
(1128,1126)
(105,104)
(1129,1125)
(107,105)
(1131,1123)
(1132,1131)
(109,117)
(1133,1136)
(110,109)
(1135,1133)
(112,110)
(1136,1132)
(114,120)
(115,118)
(1139,1349)
(1139,1354)
(1139,1359)
(1139,1361)
(117,115)
(1141,1139)
(118,114)
(1142,1141)
(1143,1146)
(120,123)
(1145,1143)
(1146,1142)
(123,128)
(1149,1171)
(1149,1180)
(1150,1149)
(1150,1161)
(1151,1150)
(128,133)
(1152,1155)
(1154,1152)
(131,142)
(131,179)
(1155,1151)
(133,131)
(1157,1149)
(1158,1157)
(135,133)
(1159,1162)
(1161,1159)
(1162,1158)
(139,161)
(139,166)
(140,139)
(140,152)
(1165,1349)
(1165,1354)
(1165,1359)
(1165,1361)
(141,148)
(142,145)
(1167,1165)
(1168,1167)
(1169,1172)
(145,141)
(1171,1169)
(148,140)
(1172,1168)
(150,139)
(1175,1189)
(1175,1197)
(151,158)
(1176,1175)
(152,155)
(1177,1185)
(1178,1181)
(155,151)
(1180,1178)
(1181,1177)
(1182,1176)
(158,150)
(1183,1186)
(161,1349)
(161,1354)
(161,1359)
(161,1361)
(1185,1183)
(1186,1182)
(164,171)
(1189,1349)
(1189,1354)
(1189,1359)
(1189,1361)
(166,164)
(1193,1201)
(1193,1209)
(169,135)
(1194,1193)
(171,169)
(1195,1198)
(1197,1195)
(1198,1194)
(175,189)
(175,1349)
(175,1354)
(175,1359)
(175,1361)
(176,175)
(1201,1349)
(1201,1354)
(1201,1359)
(1201,1361)
(177,184)
(179,177)
(180,176)
(1205,1213)
(1205,1221)
(181,180)
(1206,1205)
(182,185)
(1207,1210)
(184,182)
(1209,1207)
(185,181)
(1210,1206)
(189,191)
(1213,1349)
(1213,1354)
(1213,1359)
(1213,1361)
(190,195)
(191,193)
(193,190)
(1217,1225)
(1217,1233)
(1218,1217)
(195,196)
(1219,1222)
(196,200)
(197,206)
(1221,1219)
(198,201)
(1222,1218)
(200,198)
(201,197)
(1225,1349)
(1225,1354)
(1225,1359)
(1225,1361)
(203,213)
(204,203)
(1229,1246)
(1229,1259)
(206,204)
(1230,1229)
(1230,1238)
(1231,1230)
(208,217)
(1233,1231)
(210,208)
(211,210)
(1235,1229)
(1236,1241)
(213,211)
(214,222)
(1238,1236)
(215,214)
(1239,1235)
(217,215)
(1241,1239)
(219,227)
(1243,1259)
(220,219)
(1245,1251)
(222,220)
(1246,1249)
(1247,1245)
(224,232)
(225,224)
(1249,1247)
(1250,1243)
(227,225)
(1251,1254)
(1252,1250)
(229,237)
(230,229)
(1254,1252)
(1256,1264)
(1256,1341)
(1256,1343)
(232,230)
(1257,1256)
(234,244)
(235,234)
(1259,1257)
(237,235)
(239,248)
(1264,1268)
(241,239)
(242,241)
(1267,1282)
(1267,1299)
(244,242)
(1268,1273)
(245,253)
(246,245)
(1271,1267)
(248,246)
(1273,1271)
(250,258)
(1274,1268)
(251,250)
(253,251)
(1278,1292)
(1278,1274)
(255,263)
(1279,1287)
(256,255)
(1280,1279)
(258,256)
(1282,1280)
(260,268)
(1284,1278)
(261,260)
(1285,1288)
(263,261)
(1287,1285)
(1288,1284)
(265,273)
(266,265)
(268,266)
(1292,1349)
(1292,1354)
(1292,1359)
(1292,1361)
(270,280)
(271,270)
(1296,1304)
(1296,1341)
(1296,1343)
(273,271)
(1297,1296)
(1299,1297)
(276,1349)
(276,1354)
(276,1359)
(276,1361)
(276,290)
(277,276)
(279,277)
(280,279)
(1304,1312)
(1307,1323)
(1307,1341)
(1307,1343)
(1309,1307)
(1310,1309)
(287,298)
(287,613)
(288,287)
(1312,1310)
(290,288)
(1314,1312)
(294,307)
(294,317)
(294,327)
(294,337)
(294,347)
(294,357)
(294,367)
(294,378)
(294,387)
(294,395)
(294,406)
(294,422)
(294,451)
(294,470)
(294,479)
(294,490)
(294,500)
(294,509)
(294,517)
(294,525)
(294,533)
(294,541)
(294,549)
(294,558)
(294,568)
(294,587)
(294,604)
(294,610)
(1318,1335)
(1318,1314)
(295,300)
(1319,1327)
(296,295)
(1320,1319)
(1321,1320)
(298,296)
(1323,1321)
(300,294)
(1325,1318)
(1326,1333)
(1327,1330)
(304,290)
(1328,1326)
(305,309)
(1330,1328)
(307,305)
(1331,1325)
(308,304)
(309,308)
(1333,1331)
(1335,1349)
(1335,1354)
(1335,1359)
(1335,1361)
(314,290)
(315,319)
(1341,1343)
(317,315)
(318,314)
(1343,1363)
(319,318)
(324,290)
(1349,1354)
(1349,1359)
(1349,1361)
(325,329)
(327,325)
(328,324)
(329,328)
(1354,1359)
(1354,1361)
(334,290)
(1359,1361)
(335,339)
(1361,1363)
(337,335)
(338,334)
(339,338)
(344,290)
(345,349)
(347,345)
(348,344)
(349,348)
(354,290)
(355,359)
(357,355)
(358,354)
(359,358)
(364,290)
(365,369)
(367,365)
(368,364)
(369,368)
(374,290)
(376,374)
(377,376)
(378,377)
(383,290)
(385,383)
(386,385)
(387,386)
(392,290)
(393,398)
(395,393)
(396,392)
(397,396)
(398,397)
(403,290)
(404,409)
(406,404)
(407,403)
(408,407)
(409,408)
(415,429)
(415,436)
(416,415)
(418,416)
(419,424)
(420,419)
(422,420)
(424,418)
(427,290)
(429,427)
(433,290)
(434,437)
(436,434)
(437,433)
(444,458)
(444,465)
(445,444)
(447,445)
(448,453)
(449,448)
(451,449)
(453,447)
(456,290)
(458,456)
(462,290)
(463,462)
(465,463)
(470,290)
(476,290)
(477,481)
(479,477)
(480,476)
(481,480)
(486,290)
(487,486)
(488,491)
(490,488)
(491,487)
(496,290)
(497,496)
(498,501)
(500,498)
(501,497)
(506,290)
(507,506)
(509,507)
(514,290)
(515,514)
(517,515)
(522,290)
(523,522)
(525,523)
(530,290)
(531,530)
(533,531)
(538,290)
(539,538)
(541,539)
(546,290)
(547,546)
(549,547)
(554,290)
(555,561)
(556,559)
(558,556)
(559,555)
(560,554)
(561,560)
(567,580)
(567,290)
(568,572)
(570,576)
(572,570)
(573,567)
(574,573)
(576,574)
(578,290)
(580,578)
(586,596)
(586,290)
(587,589)
(589,591)
(591,586)
(594,290)
(596,594)
(601,290)
(603,601)
(604,603)
(608,290)
(610,608)
(613,615)
(615,622)
(619,628)
(619,645)
(620,619)
(622,620)
(625,645)
(626,633)
(628,626)
(629,625)
(630,638)
(630,629)
(631,630)
(633,631)
(635,629)
(636,635)
(638,636)
(642,651)
(642,656)
(643,642)
(645,643)
(648,671)
(649,648)
(651,649)
(656,660)
(656,665)
(660,665)
(662,671)
(663,662)
(665,663)
(668,677)
(668,682)
(669,668)
(671,669)
(674,696)
(675,674)
(677,675)
(682,686)
(682,691)
(686,691)
(688,696)
(689,688)
(691,689)
(693,706)
(694,700)
(696,694)
(697,693)
(698,701)
(700,698)
(701,697)
(703,717)
(704,710)
(706,704)
(707,703)
(708,711)
(710,708)
(711,707)
(714,723)
(714,731)
(715,714)
(717,715)
(720,731)
(721,726)
(723,721)
(724,720)
(726,724)
(728,737)
(728,745)
(729,728)
(731,729)
(734,745)
(735,740)
(737,735)
(738,734)
(740,738)
(742,750)
(742,762)
(743,742)
(745,743)
(747,762)
(748,754)
(750,748)
(751,747)
(752,757)
(754,752)
(755,751)
(757,755)
(759,767)
(759,779)
(760,759)
(762,760)
(764,779)
(765,771)
(767,765)
(768,764)
(769,774)
(771,769)
(772,768)
(774,772)
(776,782)
(776,835)
(777,776)
(779,777)
(782,787)
(787,792)
(790,802)
(790,840)
(792,790)
(794,792)
(798,830)
(798,794)
(799,798)
(799,823)
(800,799)
(800,816)
(801,800)
(801,809)
(802,805)
(805,801)
(808,800)
(809,812)
(812,808)
(815,799)
(816,819)
(819,815)
(822,798)
(823,826)
(826,822)
(830,794)
(835,840)
(839,849)
(839,853)
(840,839)
(840,845)
(843,839)
(844,843)
(845,844)
(849,853)
(852,865)
(852,877)
(853,852)
(853,858)
(856,852)
(857,856)
(858,857)
(862,882)
(863,869)
(865,863)
(866,862)
(867,866)
(869,867)
(874,882)
(875,874)
(877,875)
(879,891)
(880,886)
(882,880)
(883,879)
(884,883)
(886,884)
(891,898)
(894,906)
(894,918)
(896,894)
(898,896)
(899,898)
(902,913)
(903,902)
(904,903)
(906,904)
(909,899)
(910,909)
(911,910)
(913,911)
(917,928)
(917,934)
(918,917)
(918,921)
(921,917)
(925,934)
(926,925)
(928,926)
(931,939)
(931,948)
(932,931)
(934,932)
(936,1349)
(936,1354)
(936,1359)
(936,1361)
(938,936)
(939,942)
(940,938)
(942,940)
(945,953)
(945,965)
(946,945)
(948,946)
(950,1349)
(950,1354)
(950,1359)
(950,1361)
(952,950)
(953,956)
(954,952)
(956,954)
(959,1002)
(959,1015)
(960,959)
(960,991)
(961,960)
(961,980)
(962,961)
(962,972)
(963,968)
(965,963)
(966,962)
(968,966)
(969,961)
(970,975)
(972,970)
(973,969)
(975,973)
(976,960)
(977,986)
(978,983)
(980,978)
(981,977)
(983,981)
(984,976)
(986,984)
(987,959)
(988,997)
(989,994)
(991,989)
(992,988)
(994,992)
(995,987)
(997,995)
(999,1349)
(999,1354)
(999,1359)
(999,1361)
(1001,1007)
(1002,1005)
(1003,1001)
(1005,1003)
(1006,999)
(1007,1010)
(1008,1006)
(1010,1008)
(1012,1030)
(1013,1020)
(1015,1013)
(1016,1012)
(1017,1026)
(1018,1023)
(1020,1018)
(1021,1017)
(1023,1021)
-----path-----
7,31,34,37,40,48,47,45,44,1349,1354,1359,1361,1363
7,31,34,37,40,48,47,45,44,1349,1354,1361,1363
7,31,34,37,40,48,47,45,44,1349,1359,1361,1363
7,31,34,37,40,48,47,45,44,1349,1361,1363
7,31,34,37,40,48,47,45,44,1354,1359,1361,1363
7,31,34,37,40,48,47,45,44,1354,1361,1363
7,31,34,37,40,48,47,45,44,1359,1361,1363
7,31,34,37,40,48,47,45,44,1361,1363
7,31,34,37,40,48,47,45,44,52,55,58,61,67,65,64,72,70,69,77,75,74,82,80,79,87,85,84,92,90,89,97,95,94,102,100,99,107,105,104,112,110,109,117,115,118,114,120,123,128,133
-----cfgNode-----
5,<global>
6,<empty>
7,jpc_enc_cp_t cp_create (char *optstr,jas_image_t *image)
8,char *optstr
9,jas_image_t *image
10,<empty>
11,jpc_enc_cp_t* cp
12,jas_tvparser_t* tvp
13,int ret
14,int numilyrrates
15,double* ilyrrates
16,int i
17,int tagid
18,jpc_enc_tcp_t* tcp
19,jpc_enc_tccp_t* tccp
20,jpc_enc_ccp_t* ccp
21,int cmptno
22,uint_fast16_t rlvlno
23,uint_fast16_t prcwidthexpn
24,uint_fast16_t prcheightexpn
25,bool enablemct
26,uint_fast32_t jp2overhead
27,uint_fast16_t lyrno
28,uint_fast32_t hsteplcm
29,uint_fast32_t vsteplcm
30,bool mctvalid
31,tvp = 0
32,tvp
33,0
34,cp = 0
35,cp
36,0
37,ilyrrates = 0
38,ilyrrates
39,0
40,numilyrrates = 0
41,numilyrrates
42,0
43,if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t))))
44,!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))
45,cp = jas_malloc(sizeof(jpc_enc_cp_t))
46,cp
47,jas_malloc(sizeof(jpc_enc_cp_t))
48,sizeof(jpc_enc_cp_t)
49,jpc_enc_cp_t
50,<empty>
51,goto error;
52,prcwidthexpn = 15
53,prcwidthexpn
54,15
55,prcheightexpn = 15
56,prcheightexpn
57,15
58,enablemct = true
59,enablemct
60,true
61,jp2overhead = 0
62,jp2overhead
63,0
64,cp->ccps = 0
65,cp->ccps
66,cp
67,ccps
68,0
69,cp->debug = 0
70,cp->debug
71,cp
72,debug
73,0
74,cp->imgareatlx = UINT_FAST32_MAX
75,cp->imgareatlx
76,cp
77,imgareatlx
78,UINT_FAST32_MAX
79,cp->imgareatly = UINT_FAST32_MAX
80,cp->imgareatly
81,cp
82,imgareatly
83,UINT_FAST32_MAX
84,cp->refgrdwidth = 0
85,cp->refgrdwidth
86,cp
87,refgrdwidth
88,0
89,cp->refgrdheight = 0
90,cp->refgrdheight
91,cp
92,refgrdheight
93,0
94,cp->tilegrdoffx = UINT_FAST32_MAX
95,cp->tilegrdoffx
96,cp
97,tilegrdoffx
98,UINT_FAST32_MAX
99,cp->tilegrdoffy = UINT_FAST32_MAX
100,cp->tilegrdoffy
101,cp
102,tilegrdoffy
103,UINT_FAST32_MAX
104,cp->tilewidth = 0
105,cp->tilewidth
106,cp
107,tilewidth
108,0
109,cp->tileheight = 0
110,cp->tileheight
111,cp
112,tileheight
113,0
114,cp->numcmpts = jas_image_numcmpts(image)
115,cp->numcmpts
116,cp
117,numcmpts
118,jas_image_numcmpts(image)
119,image
120,hsteplcm = 1
121,hsteplcm
122,1
123,vsteplcm = 1
124,vsteplcm
125,1
126,for (cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno)
127,<empty>
128,cmptno = 0
129,cmptno
130,0
131,cmptno < jas_image_numcmpts(image)
132,cmptno
133,jas_image_numcmpts(image)
134,image
135,++cmptno
136,cmptno
137,<empty>
138,if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=
139,		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +
140,		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image))
141,jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=
142,		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +
143,		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)
144,jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=
145,		  jas_image_brx(image)
146,jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno)
147,jas_image_cmptbrx(image, cmptno)
148,image
149,cmptno
150,jas_image_cmpthstep(image, cmptno)
151,image
152,cmptno
153,jas_image_brx(image)
154,image
155,jas_image_cmptbry(image, cmptno) +
156,		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)
157,jas_image_cmptbry(image, cmptno) +
158,		  jas_image_cmptvstep(image, cmptno)
159,jas_image_cmptbry(image, cmptno)
160,image
161,cmptno
162,jas_image_cmptvstep(image, cmptno)
163,image
164,cmptno
165,jas_image_bry(image)
166,image
167,<empty>
168,jas_eprintf("unsupported image type\n")
169,"unsupported image type\n"
170,goto error;
171,hsteplcm *= jas_image_cmpthstep(image, cmptno)
172,hsteplcm
173,jas_image_cmpthstep(image, cmptno)
174,image
175,cmptno
176,vsteplcm *= jas_image_cmptvstep(image, cmptno)
177,vsteplcm
178,jas_image_cmptvstep(image, cmptno)
179,image
180,cmptno
181,if (!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t))))
182,!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)))
183,cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t))
184,cp->ccps
185,cp
186,ccps
187,jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t))
188,cp->numcmpts * sizeof(jpc_enc_ccp_t)
189,cp->numcmpts
190,cp
191,numcmpts
192,sizeof(jpc_enc_ccp_t)
193,jpc_enc_ccp_t
194,<empty>
195,goto error;
196,for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts);
197,++cmptno,
198,	  ++ccp
199,++cmptno
200,cmptno
201,++ccp
202,ccp
203,p
204,) {
205,		ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);
206,		ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);
207,		/* XXX - this isn't quite correct for more general image */
208,		ccp->sampgrdsubstepx = 0;
209,		ccp->sampgrdsubstepx = 0;
210,		ccp->prec = jas_image_cmptprec(image, cmptno);
211,		ccp->sgnd = jas_image_cmptsgnd(image, cmptno);
212,		ccp->numstepsizes = 0;
213,		memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));
214,	}
215,cp->rawsize = jas_image_rawsize(image)
216,cp->rawsize
217,cp
218,rawsize
219,jas_image_rawsize(image)
220,image
221,cp->totalsize = UINT_FAST32_MAX
222,cp->totalsize
223,cp
224,totalsize
225,UINT_FAST32_MAX
226,tcp = &cp->tcp
227,tcp
228,&cp->tcp
229,cp->tcp
230,cp
231,tcp
232,tcp->csty = 0
233,tcp->csty
234,tcp
235,csty
236,0
237,tcp->intmode = true
238,tcp->intmode
239,tcp
240,intmode
241,true
242,tcp->prg = JPC_COD_LRCPPRG
243,tcp->prg
244,tcp
245,prg
246,JPC_COD_LRCPPRG
247,tcp->numlyrs = 1
248,tcp->numlyrs
249,tcp
250,numlyrs
251,1
252,tcp->ilyrrates = 0
253,tcp->ilyrrates
254,tcp
255,ilyrrates
256,0
257,tccp = &cp->tccp
258,tccp
259,&cp->tccp
260,cp->tccp
261,cp
262,tccp
263,tccp->csty = 0
264,tccp->csty
265,tccp
266,csty
267,0
268,tccp->maxrlvls = 6
269,tccp->maxrlvls
270,tccp
271,maxrlvls
272,6
273,tccp->cblkwidthexpn = 6
274,tccp->cblkwidthexpn
275,tccp
276,cblkwidthexpn
277,6
278,tccp->cblkheightexpn = 6
279,tccp->cblkheightexpn
280,tccp
281,cblkheightexpn
282,6
283,tccp->cblksty = 0
284,tccp->cblksty
285,tccp
286,cblksty
287,0
288,tccp->numgbits = 2
289,tccp->numgbits
290,tccp
291,numgbits
292,2
293,if (!(tvp = jas_tvparser_create(optstr ? optstr : "")))
294,!(tvp = jas_tvparser_create(optstr ? optstr : ""))
295,tvp = jas_tvparser_create(optstr ? optstr : "")
296,tvp
297,jas_tvparser_create(optstr ? optstr : "")
298,optstr ? optstr : ""
299,optstr
300,optstr
301,""
302,<empty>
303,goto error;
304,while (!(ret = jas_tvparser_next(tvp)))
305,!(ret = jas_tvparser_next(tvp))
306,ret = jas_tvparser_next(tvp)
307,ret
308,jas_tvparser_next(tvp)
309,tvp
310,<empty>
311,switch(jas_taginfo_nonull(jas_taginfos_lookup(encopts,
312,		  jas_tvparser_gettag(tvp)))->id)
313,jas_taginfo_nonull(jas_taginfos_lookup(encopts,
314,		  jas_tvparser_gettag(tvp)))->id
315,jas_taginfo_nonull(jas_taginfos_lookup(encopts,
316,		  jas_tvparser_gettag(tvp)))
317,jas_taginfos_lookup(encopts,
318,		  jas_tvparser_gettag(tvp))
319,encopts
320,jas_tvparser_gettag(tvp)
321,tvp
322,id
323,<empty>
324,case OPT_DEBUG:
325,OPT_DEBUG
326,cp->debug = atoi(jas_tvparser_getval(tvp))
327,cp->debug
328,cp
329,debug
330,atoi(jas_tvparser_getval(tvp))
331,jas_tvparser_getval(tvp)
332,tvp
333,break;
334,case OPT_IMGAREAOFFX:
335,OPT_IMGAREAOFFX
336,cp->imgareatlx = atoi(jas_tvparser_getval(tvp))
337,cp->imgareatlx
338,cp
339,imgareatlx
340,atoi(jas_tvparser_getval(tvp))
341,jas_tvparser_getval(tvp)
342,tvp
343,break;
344,case OPT_IMGAREAOFFY:
345,OPT_IMGAREAOFFY
346,cp->imgareatly = atoi(jas_tvparser_getval(tvp))
347,cp->imgareatly
348,cp
349,imgareatly
350,atoi(jas_tvparser_getval(tvp))
351,jas_tvparser_getval(tvp)
352,tvp
353,break;
354,case OPT_TILEGRDOFFX:
355,OPT_TILEGRDOFFX
356,cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp))
357,cp->tilegrdoffx
358,cp
359,tilegrdoffx
360,atoi(jas_tvparser_getval(tvp))
361,jas_tvparser_getval(tvp)
362,tvp
363,break;
364,case OPT_TILEGRDOFFY:
365,OPT_TILEGRDOFFY
366,cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp))
367,cp->tilegrdoffy
368,cp
369,tilegrdoffy
370,atoi(jas_tvparser_getval(tvp))
371,jas_tvparser_getval(tvp)
372,tvp
373,break;
374,case OPT_TILEWIDTH:
375,OPT_TILEWIDTH
376,cp->tilewidth = atoi(jas_tvparser_getval(tvp))
377,cp->tilewidth
378,cp
379,tilewidth
380,atoi(jas_tvparser_getval(tvp))
381,jas_tvparser_getval(tvp)
382,tvp
383,break;
384,case OPT_TILEHEIGHT:
385,OPT_TILEHEIGHT
386,cp->tileheight = atoi(jas_tvparser_getval(tvp))
387,cp->tileheight
388,cp
389,tileheight
390,atoi(jas_tvparser_getval(tvp))
391,jas_tvparser_getval(tvp)
392,tvp
393,break;
394,case OPT_PRCWIDTH:
395,OPT_PRCWIDTH
396,prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
397,prcwidthexpn
398,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
399,atoi(jas_tvparser_getval(tvp))
400,jas_tvparser_getval(tvp)
401,tvp
402,break;
403,case OPT_PRCHEIGHT:
404,OPT_PRCHEIGHT
405,prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
406,prcheightexpn
407,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
408,atoi(jas_tvparser_getval(tvp))
409,jas_tvparser_getval(tvp)
410,tvp
411,break;
412,case OPT_CBLKWIDTH:
413,OPT_CBLKWIDTH
414,tccp->cblkwidthexpn =
415,			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
416,tccp->cblkwidthexpn
417,tccp
418,cblkwidthexpn
419,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
420,atoi(jas_tvparser_getval(tvp))
421,jas_tvparser_getval(tvp)
422,tvp
423,break;
424,case OPT_CBLKHEIGHT:
425,OPT_CBLKHEIGHT
426,tccp->cblkheightexpn =
427,			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
428,tccp->cblkheightexpn
429,tccp
430,cblkheightexpn
431,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
432,atoi(jas_tvparser_getval(tvp))
433,jas_tvparser_getval(tvp)
434,tvp
435,break;
436,case OPT_MODE:
437,OPT_MODE
438,if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,
439,			  jas_tvparser_getval(tvp)))->id) < 0)
440,(tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,
441,			  jas_tvparser_getval(tvp)))->id) < 0
442,tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,
443,			  jas_tvparser_getval(tvp)))->id
444,tagid
445,jas_taginfo_nonull(jas_taginfos_lookup(modetab,
446,			  jas_tvparser_getval(tvp)))->id
447,jas_taginfo_nonull(jas_taginfos_lookup(modetab,
448,			  jas_tvparser_getval(tvp)))
449,jas_taginfos_lookup(modetab,
450,			  jas_tvparser_getval(tvp))
451,modetab
452,jas_tvparser_getval(tvp)
453,tvp
454,id
455,0
456,<empty>
457,jas_eprintf("ignoring invalid mode %s\n",
458,				  jas_tvparser_getval(tvp))
459,"ignoring invalid mode %s\n"
460,jas_tvparser_getval(tvp)
461,tvp
462,else
463,<empty>
464,tcp->intmode = (tagid == MODE_INT)
465,tcp->intmode
466,tcp
467,intmode
468,tagid == MODE_INT
469,tagid
470,MODE_INT
471,break;
472,case OPT_PRG:
473,OPT_PRG
474,if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
475,			  jas_tvparser_getval(tvp)))->id) < 0)
476,(tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
477,			  jas_tvparser_getval(tvp)))->id) < 0
478,tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
479,			  jas_tvparser_getval(tvp)))->id
480,tagid
481,jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
482,			  jas_tvparser_getval(tvp)))->id
483,jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
484,			  jas_tvparser_getval(tvp)))
485,jas_taginfos_lookup(prgordtab,
486,			  jas_tvparser_getval(tvp))
487,prgordtab
488,jas_tvparser_getval(tvp)
489,tvp
490,id
491,0
492,<empty>
493,jas_eprintf("ignoring invalid progression order %s\n",
494,				  jas_tvparser_getval(tvp))
495,"ignoring invalid progression order %s\n"
496,jas_tvparser_getval(tvp)
497,tvp
498,else
499,<empty>
500,tcp->prg = tagid
501,tcp->prg
502,tcp
503,prg
504,tagid
505,break;
506,case OPT_NOMCT:
507,OPT_NOMCT
508,enablemct = false
509,enablemct
510,false
511,break;
512,case OPT_MAXRLVLS:
513,OPT_MAXRLVLS
514,tccp->maxrlvls = atoi(jas_tvparser_getval(tvp))
515,tccp->maxrlvls
516,tccp
517,maxrlvls
518,atoi(jas_tvparser_getval(tvp))
519,jas_tvparser_getval(tvp)
520,tvp
521,break;
522,case OPT_SOP:
523,OPT_SOP
524,cp->tcp.csty |= JPC_COD_SOP
525,cp->tcp.csty
526,cp->tcp
527,cp
528,tcp
529,csty
530,JPC_COD_SOP
531,break;
532,case OPT_EPH:
533,OPT_EPH
534,cp->tcp.csty |= JPC_COD_EPH
535,cp->tcp.csty
536,cp->tcp
537,cp
538,tcp
539,csty
540,JPC_COD_EPH
541,break;
542,case OPT_LAZY:
543,OPT_LAZY
544,tccp->cblksty |= JPC_COX_LAZY
545,tccp->cblksty
546,tccp
547,cblksty
548,JPC_COX_LAZY
549,break;
550,case OPT_TERMALL:
551,OPT_TERMALL
552,tccp->cblksty |= JPC_COX_TERMALL
553,tccp->cblksty
554,tccp
555,cblksty
556,JPC_COX_TERMALL
557,break;
558,case OPT_SEGSYM:
559,OPT_SEGSYM
560,tccp->cblksty |= JPC_COX_SEGSYM
561,tccp->cblksty
562,tccp
563,cblksty
564,JPC_COX_SEGSYM
565,break;
566,case OPT_VCAUSAL:
567,OPT_VCAUSAL
568,tccp->cblksty |= JPC_COX_VSC
569,tccp->cblksty
570,tccp
571,cblksty
572,JPC_COX_VSC
573,break;
574,case OPT_RESET:
575,OPT_RESET
576,tccp->cblksty |= JPC_COX_RESET
577,tccp->cblksty
578,tccp
579,cblksty
580,JPC_COX_RESET
581,break;
582,case OPT_PTERM:
583,OPT_PTERM
584,tccp->cblksty |= JPC_COX_PTERM
585,tccp->cblksty
586,tccp
587,cblksty
588,JPC_COX_PTERM
589,break;
590,case OPT_NUMGBITS:
591,OPT_NUMGBITS
592,cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp))
593,cp->tccp.numgbits
594,cp->tccp
595,cp
596,tccp
597,numgbits
598,atoi(jas_tvparser_getval(tvp))
599,jas_tvparser_getval(tvp)
600,tvp
601,break;
602,case OPT_RATE:
603,OPT_RATE
604,if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,
605,			  &cp->totalsize))
606,ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,
607,			  &cp->totalsize)
608,jas_tvparser_getval(tvp)
609,tvp
610,cp->rawsize
611,cp
612,rawsize
613,&cp->totalsize
614,cp->totalsize
615,cp
616,totalsize
617,<empty>
618,jas_eprintf("ignoring bad rate specifier %s\n",
619,				  jas_tvparser_getval(tvp))
620,"ignoring bad rate specifier %s\n"
621,jas_tvparser_getval(tvp)
622,tvp
623,break;
624,case OPT_ILYRRATES:
625,OPT_ILYRRATES
626,if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,
627,			  &ilyrrates))
628,jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,
629,			  &ilyrrates)
630,jas_tvparser_getval(tvp)
631,tvp
632,&numilyrrates
633,numilyrrates
634,&ilyrrates
635,ilyrrates
636,<empty>
637,jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",
638,				  jas_tvparser_getval(tvp))
639,"warning: invalid intermediate layer rates specifier ignored (%s)\n"
640,jas_tvparser_getval(tvp)
641,tvp
642,break;
643,case OPT_JP2OVERHEAD:
644,OPT_JP2OVERHEAD
645,jp2overhead = atoi(jas_tvparser_getval(tvp))
646,jp2overhead
647,atoi(jas_tvparser_getval(tvp))
648,jas_tvparser_getval(tvp)
649,tvp
650,break;
651,default:
652,jas_eprintf("warning: ignoring invalid option %s\n",
653,			 jas_tvparser_gettag(tvp))
654,"warning: ignoring invalid option %s\n"
655,jas_tvparser_gettag(tvp)
656,tvp
657,break;
658,jas_tvparser_destroy(tvp)
659,tvp
660,tvp = 0
661,tvp
662,0
663,if (cp->totalsize != UINT_FAST32_MAX)
664,cp->totalsize != UINT_FAST32_MAX
665,cp->totalsize
666,cp
667,totalsize
668,UINT_FAST32_MAX
669,<empty>
670,cp->totalsize = (cp->totalsize > jp2overhead) ?
671,		  (cp->totalsize - jp2overhead) : 0
672,cp->totalsize
673,cp
674,totalsize
675,(cp->totalsize > jp2overhead) ?
676,		  (cp->totalsize - jp2overhead) : 0
677,cp->totalsize > jp2overhead
678,cp->totalsize
679,cp
680,totalsize
681,jp2overhead
682,cp->totalsize - jp2overhead
683,cp->totalsize
684,cp
685,totalsize
686,jp2overhead
687,0
688,if (cp->imgareatlx == UINT_FAST32_MAX)
689,cp->imgareatlx == UINT_FAST32_MAX
690,cp->imgareatlx
691,cp
692,imgareatlx
693,UINT_FAST32_MAX
694,<empty>
695,cp->imgareatlx = 0
696,cp->imgareatlx
697,cp
698,imgareatlx
699,0
700,else
701,<empty>
702,if (hsteplcm != 1)
703,hsteplcm != 1
704,hsteplcm
705,1
706,<empty>
707,jas_eprintf("warning: overriding imgareatlx value\n")
708,"warning: overriding imgareatlx value\n"
709,cp->imgareatlx *= hsteplcm
710,cp->imgareatlx
711,cp
712,imgareatlx
713,hsteplcm
714,if (cp->imgareatly == UINT_FAST32_MAX)
715,cp->imgareatly == UINT_FAST32_MAX
716,cp->imgareatly
717,cp
718,imgareatly
719,UINT_FAST32_MAX
720,<empty>
721,cp->imgareatly = 0
722,cp->imgareatly
723,cp
724,imgareatly
725,0
726,else
727,<empty>
728,if (vsteplcm != 1)
729,vsteplcm != 1
730,vsteplcm
731,1
732,<empty>
733,jas_eprintf("warning: overriding imgareatly value\n")
734,"warning: overriding imgareatly value\n"
735,cp->imgareatly *= vsteplcm
736,cp->imgareatly
737,cp
738,imgareatly
739,vsteplcm
740,cp->refgrdwidth = cp->imgareatlx + jas_image_width(image)
741,cp->refgrdwidth
742,cp
743,refgrdwidth
744,cp->imgareatlx + jas_image_width(image)
745,cp->imgareatlx
746,cp
747,imgareatlx
748,jas_image_width(image)
749,image
750,cp->refgrdheight = cp->imgareatly + jas_image_height(image)
751,cp->refgrdheight
752,cp
753,refgrdheight
754,cp->imgareatly + jas_image_height(image)
755,cp->imgareatly
756,cp
757,imgareatly
758,jas_image_height(image)
759,image
760,if (cp->tilegrdoffx == UINT_FAST32_MAX)
761,cp->tilegrdoffx == UINT_FAST32_MAX
762,cp->tilegrdoffx
763,cp
764,tilegrdoffx
765,UINT_FAST32_MAX
766,<empty>
767,cp->tilegrdoffx = cp->imgareatlx
768,cp->tilegrdoffx
769,cp
770,tilegrdoffx
771,cp->imgareatlx
772,cp
773,imgareatlx
774,if (cp->tilegrdoffy == UINT_FAST32_MAX)
775,cp->tilegrdoffy == UINT_FAST32_MAX
776,cp->tilegrdoffy
777,cp
778,tilegrdoffy
779,UINT_FAST32_MAX
780,<empty>
781,cp->tilegrdoffy = cp->imgareatly
782,cp->tilegrdoffy
783,cp
784,tilegrdoffy
785,cp->imgareatly
786,cp
787,imgareatly
788,if (!cp->tilewidth)
789,!cp->tilewidth
790,cp->tilewidth
791,cp
792,tilewidth
793,<empty>
794,cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx
795,cp->tilewidth
796,cp
797,tilewidth
798,cp->refgrdwidth - cp->tilegrdoffx
799,cp->refgrdwidth
800,cp
801,refgrdwidth
802,cp->tilegrdoffx
803,cp
804,tilegrdoffx
805,if (!cp->tileheight)
806,!cp->tileheight
807,cp->tileheight
808,cp
809,tileheight
810,<empty>
811,cp->tileheight = cp->refgrdheight - cp->tilegrdoffy
812,cp->tileheight
813,cp
814,tileheight
815,cp->refgrdheight - cp->tilegrdoffy
816,cp->refgrdheight
817,cp
818,refgrdheight
819,cp->tilegrdoffy
820,cp
821,tilegrdoffy
822,if (cp->numcmpts == 3)
823,cp->numcmpts == 3
824,cp->numcmpts
825,cp
826,numcmpts
827,3
828,<empty>
829,mctvalid = true
830,mctvalid
831,true
832,for (cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno)
833,<empty>
834,cmptno = 0
835,cmptno
836,0
837,cmptno < jas_image_numcmpts(image)
838,cmptno
839,jas_image_numcmpts(image)
840,image
841,++cmptno
842,cmptno
843,<empty>
844,if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||
845,			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||
846,			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||
847,			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0))
848,jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||
849,			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||
850,			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||
851,			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)
852,jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||
853,			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||
854,			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0)
855,jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||
856,			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0)
857,jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0)
858,jas_image_cmptprec(image, cmptno)
859,image
860,cmptno
861,jas_image_cmptprec(image, 0)
862,image
863,0
864,jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0)
865,jas_image_cmptsgnd(image, cmptno)
866,image
867,cmptno
868,jas_image_cmptsgnd(image, 0)
869,image
870,0
871,jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0)
872,jas_image_cmptwidth(image, cmptno)
873,image
874,cmptno
875,jas_image_cmptwidth(image, 0)
876,image
877,0
878,jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)
879,jas_image_cmptheight(image, cmptno)
880,image
881,cmptno
882,jas_image_cmptheight(image, 0)
883,image
884,0
885,<empty>
886,mctvalid = false
887,mctvalid
888,false
889,else
890,<empty>
891,mctvalid = false
892,mctvalid
893,false
894,if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB)
895,mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB
896,mctvalid && enablemct
897,mctvalid
898,enablemct
899,jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB
900,jas_clrspc_fam(jas_image_clrspc(image))
901,jas_image_clrspc(image)
902,image
903,JAS_CLRSPC_FAM_RGB
904,<empty>
905,jas_eprintf("warning: color space apparently not RGB\n")
906,"warning: color space apparently not RGB\n"
907,if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB)
908,mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB
909,mctvalid && enablemct
910,mctvalid
911,enablemct
912,jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB
913,jas_clrspc_fam(jas_image_clrspc(image))
914,jas_image_clrspc(image)
915,image
916,JAS_CLRSPC_FAM_RGB
917,<empty>
918,tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT)
919,tcp->mctid
920,tcp
921,mctid
922,(tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT)
923,tcp->intmode
924,tcp
925,intmode
926,JPC_MCT_RCT
927,JPC_MCT_ICT
928,else
929,<empty>
930,tcp->mctid = JPC_MCT_NONE
931,tcp->mctid
932,tcp
933,mctid
934,JPC_MCT_NONE
935,tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS)
936,tccp->qmfbid
937,tccp
938,qmfbid
939,(tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS)
940,tcp->intmode
941,tcp
942,intmode
943,JPC_COX_RFT
944,JPC_COX_INS
945,for (rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno)
946,<empty>
947,rlvlno = 0
948,rlvlno
949,0
950,rlvlno < tccp->maxrlvls
951,rlvlno
952,tccp->maxrlvls
953,tccp
954,maxrlvls
955,++rlvlno
956,rlvlno
957,<empty>
958,tccp->prcwidthexpns[rlvlno] = prcwidthexpn
959,tccp->prcwidthexpns[rlvlno]
960,tccp->prcwidthexpns
961,tccp
962,prcwidthexpns
963,rlvlno
964,prcwidthexpn
965,tccp->prcheightexpns[rlvlno] = prcheightexpn
966,tccp->prcheightexpns[rlvlno]
967,tccp->prcheightexpns
968,tccp
969,prcheightexpns
970,rlvlno
971,prcheightexpn
972,if (prcwidthexpn != 15 || prcheightexpn != 15)
973,prcwidthexpn != 15 || prcheightexpn != 15
974,prcwidthexpn != 15
975,prcwidthexpn
976,15
977,prcheightexpn != 15
978,prcheightexpn
979,15
980,<empty>
981,tccp->csty |= JPC_COX_PRT
982,tccp->csty
983,tccp
984,csty
985,JPC_COX_PRT
986,if (!cp->tilewidth)
987,!cp->tilewidth
988,cp->tilewidth
989,cp
990,tilewidth
991,<empty>
992,jas_eprintf("invalid tile width %lu\n", (unsigned long)
993,		  cp->tilewidth)
994,"invalid tile width %lu\n"
995,(unsigned long)
996,		  cp->tilewidth
997,unsigned long
998,cp->tilewidth
999,cp
1000,tilewidth
1001,goto error;
1002,if (!cp->tileheight)
1003,!cp->tileheight
1004,cp->tileheight
1005,cp
1006,tileheight
1007,<empty>
1008,jas_eprintf("invalid tile height %lu\n", (unsigned long)
1009,		  cp->tileheight)
1010,"invalid tile height %lu\n"
1011,(unsigned long)
1012,		  cp->tileheight
1013,unsigned long
1014,cp->tileheight
1015,cp
1016,tileheight
1017,goto error;
1018,if (cp->tilegrdoffx > cp->imgareatlx ||
1019,	  cp->tilegrdoffy > cp->imgareatly ||
1020,	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||
1021,	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
1022,cp->tilegrdoffx > cp->imgareatlx ||
1023,	  cp->tilegrdoffy > cp->imgareatly ||
1024,	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||
1025,	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly
1026,cp->tilegrdoffx > cp->imgareatlx ||
1027,	  cp->tilegrdoffy > cp->imgareatly ||
1028,	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx
1029,cp->tilegrdoffx > cp->imgareatlx ||
1030,	  cp->tilegrdoffy > cp->imgareatly
1031,cp->tilegrdoffx > cp->imgareatlx
1032,cp->tilegrdoffx
1033,cp
1034,tilegrdoffx
1035,cp->imgareatlx
1036,cp
1037,imgareatlx
1038,cp->tilegrdoffy > cp->imgareatly
1039,cp->tilegrdoffy
1040,cp
1041,tilegrdoffy
1042,cp->imgareatly
1043,cp
1044,imgareatly
1045,cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx
1046,cp->tilegrdoffx + cp->tilewidth
1047,cp->tilegrdoffx
1048,cp
1049,tilegrdoffx
1050,cp->tilewidth
1051,cp
1052,tilewidth
1053,cp->imgareatlx
1054,cp
1055,imgareatlx
1056,cp->tilegrdoffy + cp->tileheight < cp->imgareatly
1057,cp->tilegrdoffy + cp->tileheight
1058,cp->tilegrdoffy
1059,cp
1060,tilegrdoffy
1061,cp->tileheight
1062,cp
1063,tileheight
1064,cp->imgareatly
1065,cp
1066,imgareatly
1067,<empty>
1068,jas_eprintf("invalid tile grid offset (%lu, %lu)\n",
1069,		  (unsigned long) cp->tilegrdoffx, (unsigned long)
1070,		  cp->tilegrdoffy)
1071,"invalid tile grid offset (%lu, %lu)\n"
1072,(unsigned long) cp->tilegrdoffx
1073,unsigned long
1074,cp->tilegrdoffx
1075,cp
1076,tilegrdoffx
1077,(unsigned long)
1078,		  cp->tilegrdoffy
1079,unsigned long
1080,cp->tilegrdoffy
1081,cp
1082,tilegrdoffy
1083,goto error;
1084,cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,
1085,	  cp->tilewidth)
1086,cp->numhtiles
1087,cp
1088,numhtiles
1089,JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,
1090,	  cp->tilewidth)
1091,cp->refgrdwidth - cp->tilegrdoffx
1092,cp->refgrdwidth
1093,cp
1094,refgrdwidth
1095,cp->tilegrdoffx
1096,cp
1097,tilegrdoffx
1098,cp->tilewidth
1099,cp
1100,tilewidth
1101,cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,
1102,	  cp->tileheight)
1103,cp->numvtiles
1104,cp
1105,numvtiles
1106,JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,
1107,	  cp->tileheight)
1108,cp->refgrdheight - cp->tilegrdoffy
1109,cp->refgrdheight
1110,cp
1111,refgrdheight
1112,cp->tilegrdoffy
1113,cp
1114,tilegrdoffy
1115,cp->tileheight
1116,cp
1117,tileheight
1118,cp->numtiles = cp->numhtiles * cp->numvtiles
1119,cp->numtiles
1120,cp
1121,numtiles
1122,cp->numhtiles * cp->numvtiles
1123,cp->numhtiles
1124,cp
1125,numhtiles
1126,cp->numvtiles
1127,cp
1128,numvtiles
1129,if (ilyrrates && numilyrrates > 0)
1130,ilyrrates && numilyrrates > 0
1131,ilyrrates
1132,numilyrrates > 0
1133,numilyrrates
1134,0
1135,<empty>
1136,tcp->numlyrs = numilyrrates + 1
1137,tcp->numlyrs
1138,tcp
1139,numlyrs
1140,numilyrrates + 1
1141,numilyrrates
1142,1
1143,if (!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *
1144,		  sizeof(jpc_fix_t))))
1145,!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *
1146,		  sizeof(jpc_fix_t)))
1147,tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *
1148,		  sizeof(jpc_fix_t))
1149,tcp->ilyrrates
1150,tcp
1151,ilyrrates
1152,jas_malloc((tcp->numlyrs - 1) *
1153,		  sizeof(jpc_fix_t))
1154,(tcp->numlyrs - 1) *
1155,		  sizeof(jpc_fix_t)
1156,tcp->numlyrs - 1
1157,tcp->numlyrs
1158,tcp
1159,numlyrs
1160,1
1161,sizeof(jpc_fix_t)
1162,jpc_fix_t
1163,<empty>
1164,goto error;
1165,for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1);
1166,++i
1167,i
1168,i
1169,) {
1170,			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);
1171,		}
1172,if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode))
1173,cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)
1174,cp->totalsize == UINT_FAST32_MAX
1175,cp->totalsize
1176,cp
1177,totalsize
1178,UINT_FAST32_MAX
1179,!cp->tcp.intmode
1180,cp->tcp.intmode
1181,cp->tcp
1182,cp
1183,tcp
1184,intmode
1185,<empty>
1186,jas_eprintf("cannot use real mode for lossless coding\n")
1187,"cannot use real mode for lossless coding\n"
1188,goto error;
1189,if (prcwidthexpn > 15)
1190,prcwidthexpn > 15
1191,prcwidthexpn
1192,15
1193,<empty>
1194,jas_eprintf("invalid precinct width\n")
1195,"invalid precinct width\n"
1196,goto error;
1197,if (prcheightexpn > 15)
1198,prcheightexpn > 15
1199,prcheightexpn
1200,15
1201,<empty>
1202,jas_eprintf("invalid precinct height\n")
1203,"invalid precinct height\n"
1204,goto error;
1205,if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12)
1206,cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12
1207,cp->tccp.cblkwidthexpn < 2
1208,cp->tccp.cblkwidthexpn
1209,cp->tccp
1210,cp
1211,tccp
1212,cblkwidthexpn
1213,2
1214,cp->tccp.cblkwidthexpn > 12
1215,cp->tccp.cblkwidthexpn
1216,cp->tccp
1217,cp
1218,tccp
1219,cblkwidthexpn
1220,12
1221,<empty>
1222,jas_eprintf("invalid code block width %d\n",
1223,		  JPC_POW2(cp->tccp.cblkwidthexpn))
1224,"invalid code block width %d\n"
1225,JPC_POW2(cp->tccp.cblkwidthexpn)
1226,cp->tccp.cblkwidthexpn
1227,cp->tccp
1228,cp
1229,tccp
1230,cblkwidthexpn
1231,goto error;
1232,if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12)
1233,cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12
1234,cp->tccp.cblkheightexpn < 2
1235,cp->tccp.cblkheightexpn
1236,cp->tccp
1237,cp
1238,tccp
1239,cblkheightexpn
1240,2
1241,cp->tccp.cblkheightexpn > 12
1242,cp->tccp.cblkheightexpn
1243,cp->tccp
1244,cp
1245,tccp
1246,cblkheightexpn
1247,12
1248,<empty>
1249,jas_eprintf("invalid code block height %d\n",
1250,		  JPC_POW2(cp->tccp.cblkheightexpn))
1251,"invalid code block height %d\n"
1252,JPC_POW2(cp->tccp.cblkheightexpn)
1253,cp->tccp.cblkheightexpn
1254,cp->tccp
1255,cp
1256,tccp
1257,cblkheightexpn
1258,goto error;
1259,if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12)
1260,cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12
1261,cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn
1262,cp->tccp.cblkwidthexpn
1263,cp->tccp
1264,cp
1265,tccp
1266,cblkwidthexpn
1267,cp->tccp.cblkheightexpn
1268,cp->tccp
1269,cp
1270,tccp
1271,cblkheightexpn
1272,12
1273,<empty>
1274,jas_eprintf("code block size too large\n")
1275,"code block size too large\n"
1276,goto error;
1277,if (cp->tcp.numlyrs > 16384)
1278,cp->tcp.numlyrs > 16384
1279,cp->tcp.numlyrs
1280,cp->tcp
1281,cp
1282,tcp
1283,numlyrs
1284,16384
1285,<empty>
1286,jas_eprintf("too many layers\n")
1287,"too many layers\n"
1288,goto error;
1289,if (cp->tccp.maxrlvls < 1)
1290,cp->tccp.maxrlvls < 1
1291,cp->tccp.maxrlvls
1292,cp->tccp
1293,cp
1294,tccp
1295,maxrlvls
1296,1
1297,<empty>
1298,jas_eprintf("must be at least one resolution level\n")
1299,"must be at least one resolution level\n"
1300,goto error;
1301,if (cp->tccp.numgbits > 8)
1302,cp->tccp.numgbits > 8
1303,cp->tccp.numgbits
1304,cp->tccp
1305,cp
1306,tccp
1307,numgbits
1308,8
1309,<empty>
1310,jas_eprintf("invalid number of guard bits\n")
1311,"invalid number of guard bits\n"
1312,goto error;
1313,if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize)
1314,cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize
1315,cp->totalsize != UINT_FAST32_MAX
1316,cp->totalsize
1317,cp
1318,totalsize
1319,UINT_FAST32_MAX
1320,cp->totalsize > cp->rawsize
1321,cp->totalsize
1322,cp
1323,totalsize
1324,cp->rawsize
1325,cp
1326,rawsize
1327,<empty>
1328,jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize)
1329,"warning: specified rate is unreasonably large (%lu > %lu)\n"
1330,(unsigned long) cp->totalsize
1331,unsigned long
1332,cp->totalsize
1333,cp
1334,totalsize
1335,(unsigned long) cp->rawsize
1336,unsigned long
1337,cp->rawsize
1338,cp
1339,rawsize
1340,if (tcp->numlyrs > 1)
1341,tcp->numlyrs > 1
1342,tcp->numlyrs
1343,tcp
1344,numlyrs
1345,1
1346,<empty>
1347,for (lyrno = 0;lyrno + 2 < tcp->numlyrs;++lyrno)
1348,<empty>
1349,lyrno = 0
1350,lyrno
1351,0
1352,lyrno + 2 < tcp->numlyrs
1353,lyrno + 2
1354,lyrno
1355,2
1356,tcp->numlyrs
1357,tcp
1358,numlyrs
1359,++lyrno
1360,lyrno
1361,<empty>
1362,if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1])
1363,tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]
1364,tcp->ilyrrates[lyrno]
1365,tcp->ilyrrates
1366,tcp
1367,ilyrrates
1368,lyrno
1369,tcp->ilyrrates[lyrno + 1]
1370,tcp->ilyrrates
1371,tcp
1372,ilyrrates
1373,lyrno + 1
1374,lyrno
1375,1
1376,<empty>
1377,jas_eprintf("intermediate layer rates must increase monotonically\n")
1378,"intermediate layer rates must increase monotonically\n"
1379,goto error;
1380,if (cp->totalsize != UINT_FAST32_MAX)
1381,cp->totalsize != UINT_FAST32_MAX
1382,cp->totalsize
1383,cp
1384,totalsize
1385,UINT_FAST32_MAX
1386,<empty>
1387,for (lyrno = 0;lyrno < tcp->numlyrs - 1;++lyrno)
1388,<empty>
1389,lyrno = 0
1390,lyrno
1391,0
1392,lyrno < tcp->numlyrs - 1
1393,lyrno
1394,tcp->numlyrs - 1
1395,tcp->numlyrs
1396,tcp
1397,numlyrs
1398,1
1399,++lyrno
1400,lyrno
1401,<empty>
1402,if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)
1403,				  / cp->rawsize)
1404,jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)
1405,				  / cp->rawsize
1406,jpc_fixtodbl(tcp->ilyrrates[lyrno])
1407,tcp->ilyrrates[lyrno]
1408,tcp->ilyrrates
1409,tcp
1410,ilyrrates
1411,lyrno
1412,((double) cp->totalsize)
1413,				  / cp->rawsize
1414,(double) cp->totalsize
1415,double
1416,cp->totalsize
1417,cp
1418,totalsize
1419,cp->rawsize
1420,cp
1421,rawsize
1422,<empty>
1423,jas_eprintf("warning: intermediate layer rates must be less than overall rate\n")
1424,"warning: intermediate layer rates must be less than overall rate\n"
1425,goto error;
1426,if (ilyrrates)
1427,ilyrrates
1428,<empty>
1429,jas_free(ilyrrates)
1430,ilyrrates
1431,return cp;
1432,cp
1433,error:
1434,
1435,	if (ilyrrates) {
1436,		jas_free(ilyrrates);
1437,	}
1438,if (ilyrrates)
1439,ilyrrates
1440,<empty>
1441,jas_free(ilyrrates)
1442,ilyrrates
1443,if (tvp)
1444,tvp
1445,<empty>
1446,jas_tvparser_destroy(tvp)
1447,tvp
1448,if (cp)
1449,cp
1450,<empty>
1451,jpc_enc_cp_destroy(cp)
1452,cp
1453,return 0;
1454,0
1455,RET
1456,char *optstr
1457,jas_image_t *image
1458,RET
1459,jpc_enc_cp_t cp_create (char *optstr,jas_image_t *image)
1460,char *optstr
1461,jas_image_t *image
1462,<empty>
1463,jpc_enc_cp_t* cp
1464,jas_tvparser_t* tvp
1465,int ret
1466,int numilyrrates
1467,double* ilyrrates
1468,int i
1469,int tagid
1470,jpc_enc_tcp_t* tcp
1471,jpc_enc_tccp_t* tccp
1472,jpc_enc_ccp_t* ccp
1473,int cmptno
1474,uint_fast16_t rlvlno
1475,uint_fast16_t prcwidthexpn
1476,uint_fast16_t prcheightexpn
1477,bool enablemct
1478,uint_fast32_t jp2overhead
1479,uint_fast16_t lyrno
1480,uint_fast32_t hsteplcm
1481,uint_fast32_t vsteplcm
1482,bool mctvalid
1483,tvp = 0
1484,tvp
1485,0
1486,cp = 0
1487,cp
1488,0
1489,ilyrrates = 0
1490,ilyrrates
1491,0
1492,numilyrrates = 0
1493,numilyrrates
1494,0
1495,if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t))))
1496,!(cp = jas_malloc(sizeof(jpc_enc_cp_t)))
1497,cp = jas_malloc(sizeof(jpc_enc_cp_t))
1498,cp
1499,jas_malloc(sizeof(jpc_enc_cp_t))
1500,sizeof(jpc_enc_cp_t)
1501,jpc_enc_cp_t
1502,<empty>
1503,goto error;
1504,prcwidthexpn = 15
1505,prcwidthexpn
1506,15
1507,prcheightexpn = 15
1508,prcheightexpn
1509,15
1510,enablemct = true
1511,enablemct
1512,true
1513,jp2overhead = 0
1514,jp2overhead
1515,0
1516,cp->ccps = 0
1517,cp->ccps
1518,cp
1519,ccps
1520,0
1521,cp->debug = 0
1522,cp->debug
1523,cp
1524,debug
1525,0
1526,cp->imgareatlx = UINT_FAST32_MAX
1527,cp->imgareatlx
1528,cp
1529,imgareatlx
1530,UINT_FAST32_MAX
1531,cp->imgareatly = UINT_FAST32_MAX
1532,cp->imgareatly
1533,cp
1534,imgareatly
1535,UINT_FAST32_MAX
1536,cp->refgrdwidth = 0
1537,cp->refgrdwidth
1538,cp
1539,refgrdwidth
1540,0
1541,cp->refgrdheight = 0
1542,cp->refgrdheight
1543,cp
1544,refgrdheight
1545,0
1546,cp->tilegrdoffx = UINT_FAST32_MAX
1547,cp->tilegrdoffx
1548,cp
1549,tilegrdoffx
1550,UINT_FAST32_MAX
1551,cp->tilegrdoffy = UINT_FAST32_MAX
1552,cp->tilegrdoffy
1553,cp
1554,tilegrdoffy
1555,UINT_FAST32_MAX
1556,cp->tilewidth = 0
1557,cp->tilewidth
1558,cp
1559,tilewidth
1560,0
1561,cp->tileheight = 0
1562,cp->tileheight
1563,cp
1564,tileheight
1565,0
1566,cp->numcmpts = jas_image_numcmpts(image)
1567,cp->numcmpts
1568,cp
1569,numcmpts
1570,jas_image_numcmpts(image)
1571,image
1572,hsteplcm = 1
1573,hsteplcm
1574,1
1575,vsteplcm = 1
1576,vsteplcm
1577,1
1578,for (cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno)
1579,<empty>
1580,cmptno = 0
1581,cmptno
1582,0
1583,cmptno < jas_image_numcmpts(image)
1584,cmptno
1585,jas_image_numcmpts(image)
1586,image
1587,++cmptno
1588,cmptno
1589,<empty>
1590,if (jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=
1591,		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +
1592,		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image))
1593,jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=
1594,		  jas_image_brx(image) || jas_image_cmptbry(image, cmptno) +
1595,		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)
1596,jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno) <=
1597,		  jas_image_brx(image)
1598,jas_image_cmptbrx(image, cmptno) + jas_image_cmpthstep(image, cmptno)
1599,jas_image_cmptbrx(image, cmptno)
1600,image
1601,cmptno
1602,jas_image_cmpthstep(image, cmptno)
1603,image
1604,cmptno
1605,jas_image_brx(image)
1606,image
1607,jas_image_cmptbry(image, cmptno) +
1608,		  jas_image_cmptvstep(image, cmptno) <= jas_image_bry(image)
1609,jas_image_cmptbry(image, cmptno) +
1610,		  jas_image_cmptvstep(image, cmptno)
1611,jas_image_cmptbry(image, cmptno)
1612,image
1613,cmptno
1614,jas_image_cmptvstep(image, cmptno)
1615,image
1616,cmptno
1617,jas_image_bry(image)
1618,image
1619,<empty>
1620,jas_eprintf("unsupported image type\n")
1621,"unsupported image type\n"
1622,goto error;
1623,hsteplcm *= jas_image_cmpthstep(image, cmptno)
1624,hsteplcm
1625,jas_image_cmpthstep(image, cmptno)
1626,image
1627,cmptno
1628,vsteplcm *= jas_image_cmptvstep(image, cmptno)
1629,vsteplcm
1630,jas_image_cmptvstep(image, cmptno)
1631,image
1632,cmptno
1633,if (!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t))))
1634,!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)))
1635,cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t))
1636,cp->ccps
1637,cp
1638,ccps
1639,jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t))
1640,cp->numcmpts * sizeof(jpc_enc_ccp_t)
1641,cp->numcmpts
1642,cp
1643,numcmpts
1644,sizeof(jpc_enc_ccp_t)
1645,jpc_enc_ccp_t
1646,<empty>
1647,goto error;
1648,for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts);
1649,++cmptno,
1650,	  ++ccp
1651,++cmptno
1652,cmptno
1653,++ccp
1654,ccp
1655,p
1656,) {
1657,		ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);
1658,		ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);
1659,		/* XXX - this isn't quite correct for more general image */
1660,		ccp->sampgrdsubstepx = 0;
1661,		ccp->sampgrdsubstepx = 0;
1662,		ccp->prec = jas_image_cmptprec(image, cmptno);
1663,		ccp->sgnd = jas_image_cmptsgnd(image, cmptno);
1664,		ccp->numstepsizes = 0;
1665,		memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));
1666,	}
1667,cp->rawsize = jas_image_rawsize(image)
1668,cp->rawsize
1669,cp
1670,rawsize
1671,jas_image_rawsize(image)
1672,image
1673,cp->totalsize = UINT_FAST32_MAX
1674,cp->totalsize
1675,cp
1676,totalsize
1677,UINT_FAST32_MAX
1678,tcp = &cp->tcp
1679,tcp
1680,&cp->tcp
1681,cp->tcp
1682,cp
1683,tcp
1684,tcp->csty = 0
1685,tcp->csty
1686,tcp
1687,csty
1688,0
1689,tcp->intmode = true
1690,tcp->intmode
1691,tcp
1692,intmode
1693,true
1694,tcp->prg = JPC_COD_LRCPPRG
1695,tcp->prg
1696,tcp
1697,prg
1698,JPC_COD_LRCPPRG
1699,tcp->numlyrs = 1
1700,tcp->numlyrs
1701,tcp
1702,numlyrs
1703,1
1704,tcp->ilyrrates = 0
1705,tcp->ilyrrates
1706,tcp
1707,ilyrrates
1708,0
1709,tccp = &cp->tccp
1710,tccp
1711,&cp->tccp
1712,cp->tccp
1713,cp
1714,tccp
1715,tccp->csty = 0
1716,tccp->csty
1717,tccp
1718,csty
1719,0
1720,tccp->maxrlvls = 6
1721,tccp->maxrlvls
1722,tccp
1723,maxrlvls
1724,6
1725,tccp->cblkwidthexpn = 6
1726,tccp->cblkwidthexpn
1727,tccp
1728,cblkwidthexpn
1729,6
1730,tccp->cblkheightexpn = 6
1731,tccp->cblkheightexpn
1732,tccp
1733,cblkheightexpn
1734,6
1735,tccp->cblksty = 0
1736,tccp->cblksty
1737,tccp
1738,cblksty
1739,0
1740,tccp->numgbits = 2
1741,tccp->numgbits
1742,tccp
1743,numgbits
1744,2
1745,if (!(tvp = jas_tvparser_create(optstr ? optstr : "")))
1746,!(tvp = jas_tvparser_create(optstr ? optstr : ""))
1747,tvp = jas_tvparser_create(optstr ? optstr : "")
1748,tvp
1749,jas_tvparser_create(optstr ? optstr : "")
1750,optstr ? optstr : ""
1751,optstr
1752,optstr
1753,""
1754,<empty>
1755,goto error;
1756,while (!(ret = jas_tvparser_next(tvp)))
1757,!(ret = jas_tvparser_next(tvp))
1758,ret = jas_tvparser_next(tvp)
1759,ret
1760,jas_tvparser_next(tvp)
1761,tvp
1762,<empty>
1763,switch(jas_taginfo_nonull(jas_taginfos_lookup(encopts,
1764,		  jas_tvparser_gettag(tvp)))->id)
1765,jas_taginfo_nonull(jas_taginfos_lookup(encopts,
1766,		  jas_tvparser_gettag(tvp)))->id
1767,jas_taginfo_nonull(jas_taginfos_lookup(encopts,
1768,		  jas_tvparser_gettag(tvp)))
1769,jas_taginfos_lookup(encopts,
1770,		  jas_tvparser_gettag(tvp))
1771,encopts
1772,jas_tvparser_gettag(tvp)
1773,tvp
1774,id
1775,<empty>
1776,case OPT_DEBUG:
1777,OPT_DEBUG
1778,cp->debug = atoi(jas_tvparser_getval(tvp))
1779,cp->debug
1780,cp
1781,debug
1782,atoi(jas_tvparser_getval(tvp))
1783,jas_tvparser_getval(tvp)
1784,tvp
1785,break;
1786,case OPT_IMGAREAOFFX:
1787,OPT_IMGAREAOFFX
1788,cp->imgareatlx = atoi(jas_tvparser_getval(tvp))
1789,cp->imgareatlx
1790,cp
1791,imgareatlx
1792,atoi(jas_tvparser_getval(tvp))
1793,jas_tvparser_getval(tvp)
1794,tvp
1795,break;
1796,case OPT_IMGAREAOFFY:
1797,OPT_IMGAREAOFFY
1798,cp->imgareatly = atoi(jas_tvparser_getval(tvp))
1799,cp->imgareatly
1800,cp
1801,imgareatly
1802,atoi(jas_tvparser_getval(tvp))
1803,jas_tvparser_getval(tvp)
1804,tvp
1805,break;
1806,case OPT_TILEGRDOFFX:
1807,OPT_TILEGRDOFFX
1808,cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp))
1809,cp->tilegrdoffx
1810,cp
1811,tilegrdoffx
1812,atoi(jas_tvparser_getval(tvp))
1813,jas_tvparser_getval(tvp)
1814,tvp
1815,break;
1816,case OPT_TILEGRDOFFY:
1817,OPT_TILEGRDOFFY
1818,cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp))
1819,cp->tilegrdoffy
1820,cp
1821,tilegrdoffy
1822,atoi(jas_tvparser_getval(tvp))
1823,jas_tvparser_getval(tvp)
1824,tvp
1825,break;
1826,case OPT_TILEWIDTH:
1827,OPT_TILEWIDTH
1828,cp->tilewidth = atoi(jas_tvparser_getval(tvp))
1829,cp->tilewidth
1830,cp
1831,tilewidth
1832,atoi(jas_tvparser_getval(tvp))
1833,jas_tvparser_getval(tvp)
1834,tvp
1835,break;
1836,case OPT_TILEHEIGHT:
1837,OPT_TILEHEIGHT
1838,cp->tileheight = atoi(jas_tvparser_getval(tvp))
1839,cp->tileheight
1840,cp
1841,tileheight
1842,atoi(jas_tvparser_getval(tvp))
1843,jas_tvparser_getval(tvp)
1844,tvp
1845,break;
1846,case OPT_PRCWIDTH:
1847,OPT_PRCWIDTH
1848,prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
1849,prcwidthexpn
1850,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
1851,atoi(jas_tvparser_getval(tvp))
1852,jas_tvparser_getval(tvp)
1853,tvp
1854,break;
1855,case OPT_PRCHEIGHT:
1856,OPT_PRCHEIGHT
1857,prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
1858,prcheightexpn
1859,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
1860,atoi(jas_tvparser_getval(tvp))
1861,jas_tvparser_getval(tvp)
1862,tvp
1863,break;
1864,case OPT_CBLKWIDTH:
1865,OPT_CBLKWIDTH
1866,tccp->cblkwidthexpn =
1867,			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
1868,tccp->cblkwidthexpn
1869,tccp
1870,cblkwidthexpn
1871,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
1872,atoi(jas_tvparser_getval(tvp))
1873,jas_tvparser_getval(tvp)
1874,tvp
1875,break;
1876,case OPT_CBLKHEIGHT:
1877,OPT_CBLKHEIGHT
1878,tccp->cblkheightexpn =
1879,			  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
1880,tccp->cblkheightexpn
1881,tccp
1882,cblkheightexpn
1883,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)))
1884,atoi(jas_tvparser_getval(tvp))
1885,jas_tvparser_getval(tvp)
1886,tvp
1887,break;
1888,case OPT_MODE:
1889,OPT_MODE
1890,if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,
1891,			  jas_tvparser_getval(tvp)))->id) < 0)
1892,(tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,
1893,			  jas_tvparser_getval(tvp)))->id) < 0
1894,tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,
1895,			  jas_tvparser_getval(tvp)))->id
1896,tagid
1897,jas_taginfo_nonull(jas_taginfos_lookup(modetab,
1898,			  jas_tvparser_getval(tvp)))->id
1899,jas_taginfo_nonull(jas_taginfos_lookup(modetab,
1900,			  jas_tvparser_getval(tvp)))
1901,jas_taginfos_lookup(modetab,
1902,			  jas_tvparser_getval(tvp))
1903,modetab
1904,jas_tvparser_getval(tvp)
1905,tvp
1906,id
1907,0
1908,<empty>
1909,jas_eprintf("ignoring invalid mode %s\n",
1910,				  jas_tvparser_getval(tvp))
1911,"ignoring invalid mode %s\n"
1912,jas_tvparser_getval(tvp)
1913,tvp
1914,else
1915,<empty>
1916,tcp->intmode = (tagid == MODE_INT)
1917,tcp->intmode
1918,tcp
1919,intmode
1920,tagid == MODE_INT
1921,tagid
1922,MODE_INT
1923,break;
1924,case OPT_PRG:
1925,OPT_PRG
1926,if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
1927,			  jas_tvparser_getval(tvp)))->id) < 0)
1928,(tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
1929,			  jas_tvparser_getval(tvp)))->id) < 0
1930,tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
1931,			  jas_tvparser_getval(tvp)))->id
1932,tagid
1933,jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
1934,			  jas_tvparser_getval(tvp)))->id
1935,jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,
1936,			  jas_tvparser_getval(tvp)))
1937,jas_taginfos_lookup(prgordtab,
1938,			  jas_tvparser_getval(tvp))
1939,prgordtab
1940,jas_tvparser_getval(tvp)
1941,tvp
1942,id
1943,0
1944,<empty>
1945,jas_eprintf("ignoring invalid progression order %s\n",
1946,				  jas_tvparser_getval(tvp))
1947,"ignoring invalid progression order %s\n"
1948,jas_tvparser_getval(tvp)
1949,tvp
1950,else
1951,<empty>
1952,tcp->prg = tagid
1953,tcp->prg
1954,tcp
1955,prg
1956,tagid
1957,break;
1958,case OPT_NOMCT:
1959,OPT_NOMCT
1960,enablemct = false
1961,enablemct
1962,false
1963,break;
1964,case OPT_MAXRLVLS:
1965,OPT_MAXRLVLS
1966,tccp->maxrlvls = atoi(jas_tvparser_getval(tvp))
1967,tccp->maxrlvls
1968,tccp
1969,maxrlvls
1970,atoi(jas_tvparser_getval(tvp))
1971,jas_tvparser_getval(tvp)
1972,tvp
1973,break;
1974,case OPT_SOP:
1975,OPT_SOP
1976,cp->tcp.csty |= JPC_COD_SOP
1977,cp->tcp.csty
1978,cp->tcp
1979,cp
1980,tcp
1981,csty
1982,JPC_COD_SOP
1983,break;
1984,case OPT_EPH:
1985,OPT_EPH
1986,cp->tcp.csty |= JPC_COD_EPH
1987,cp->tcp.csty
1988,cp->tcp
1989,cp
1990,tcp
1991,csty
1992,JPC_COD_EPH
1993,break;
1994,case OPT_LAZY:
1995,OPT_LAZY
1996,tccp->cblksty |= JPC_COX_LAZY
1997,tccp->cblksty
1998,tccp
1999,cblksty
2000,JPC_COX_LAZY
2001,break;
2002,case OPT_TERMALL:
2003,OPT_TERMALL
2004,tccp->cblksty |= JPC_COX_TERMALL
2005,tccp->cblksty
2006,tccp
2007,cblksty
2008,JPC_COX_TERMALL
2009,break;
2010,case OPT_SEGSYM:
2011,OPT_SEGSYM
2012,tccp->cblksty |= JPC_COX_SEGSYM
2013,tccp->cblksty
2014,tccp
2015,cblksty
2016,JPC_COX_SEGSYM
2017,break;
2018,case OPT_VCAUSAL:
2019,OPT_VCAUSAL
2020,tccp->cblksty |= JPC_COX_VSC
2021,tccp->cblksty
2022,tccp
2023,cblksty
2024,JPC_COX_VSC
2025,break;
2026,case OPT_RESET:
2027,OPT_RESET
2028,tccp->cblksty |= JPC_COX_RESET
2029,tccp->cblksty
2030,tccp
2031,cblksty
2032,JPC_COX_RESET
2033,break;
2034,case OPT_PTERM:
2035,OPT_PTERM
2036,tccp->cblksty |= JPC_COX_PTERM
2037,tccp->cblksty
2038,tccp
2039,cblksty
2040,JPC_COX_PTERM
2041,break;
2042,case OPT_NUMGBITS:
2043,OPT_NUMGBITS
2044,cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp))
2045,cp->tccp.numgbits
2046,cp->tccp
2047,cp
2048,tccp
2049,numgbits
2050,atoi(jas_tvparser_getval(tvp))
2051,jas_tvparser_getval(tvp)
2052,tvp
2053,break;
2054,case OPT_RATE:
2055,OPT_RATE
2056,if (ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,
2057,			  &cp->totalsize))
2058,ratestrtosize(jas_tvparser_getval(tvp), cp->rawsize,
2059,			  &cp->totalsize)
2060,jas_tvparser_getval(tvp)
2061,tvp
2062,cp->rawsize
2063,cp
2064,rawsize
2065,&cp->totalsize
2066,cp->totalsize
2067,cp
2068,totalsize
2069,<empty>
2070,jas_eprintf("ignoring bad rate specifier %s\n",
2071,				  jas_tvparser_getval(tvp))
2072,"ignoring bad rate specifier %s\n"
2073,jas_tvparser_getval(tvp)
2074,tvp
2075,break;
2076,case OPT_ILYRRATES:
2077,OPT_ILYRRATES
2078,if (jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,
2079,			  &ilyrrates))
2080,jpc_atoaf(jas_tvparser_getval(tvp), &numilyrrates,
2081,			  &ilyrrates)
2082,jas_tvparser_getval(tvp)
2083,tvp
2084,&numilyrrates
2085,numilyrrates
2086,&ilyrrates
2087,ilyrrates
2088,<empty>
2089,jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)\n",
2090,				  jas_tvparser_getval(tvp))
2091,"warning: invalid intermediate layer rates specifier ignored (%s)\n"
2092,jas_tvparser_getval(tvp)
2093,tvp
2094,break;
2095,case OPT_JP2OVERHEAD:
2096,OPT_JP2OVERHEAD
2097,jp2overhead = atoi(jas_tvparser_getval(tvp))
2098,jp2overhead
2099,atoi(jas_tvparser_getval(tvp))
2100,jas_tvparser_getval(tvp)
2101,tvp
2102,break;
2103,default:
2104,jas_eprintf("warning: ignoring invalid option %s\n",
2105,			 jas_tvparser_gettag(tvp))
2106,"warning: ignoring invalid option %s\n"
2107,jas_tvparser_gettag(tvp)
2108,tvp
2109,break;
2110,jas_tvparser_destroy(tvp)
2111,tvp
2112,tvp = 0
2113,tvp
2114,0
2115,if (cp->totalsize != UINT_FAST32_MAX)
2116,cp->totalsize != UINT_FAST32_MAX
2117,cp->totalsize
2118,cp
2119,totalsize
2120,UINT_FAST32_MAX
2121,<empty>
2122,cp->totalsize = (cp->totalsize > jp2overhead) ?
2123,		  (cp->totalsize - jp2overhead) : 0
2124,cp->totalsize
2125,cp
2126,totalsize
2127,(cp->totalsize > jp2overhead) ?
2128,		  (cp->totalsize - jp2overhead) : 0
2129,cp->totalsize > jp2overhead
2130,cp->totalsize
2131,cp
2132,totalsize
2133,jp2overhead
2134,cp->totalsize - jp2overhead
2135,cp->totalsize
2136,cp
2137,totalsize
2138,jp2overhead
2139,0
2140,if (cp->imgareatlx == UINT_FAST32_MAX)
2141,cp->imgareatlx == UINT_FAST32_MAX
2142,cp->imgareatlx
2143,cp
2144,imgareatlx
2145,UINT_FAST32_MAX
2146,<empty>
2147,cp->imgareatlx = 0
2148,cp->imgareatlx
2149,cp
2150,imgareatlx
2151,0
2152,else
2153,<empty>
2154,if (hsteplcm != 1)
2155,hsteplcm != 1
2156,hsteplcm
2157,1
2158,<empty>
2159,jas_eprintf("warning: overriding imgareatlx value\n")
2160,"warning: overriding imgareatlx value\n"
2161,cp->imgareatlx *= hsteplcm
2162,cp->imgareatlx
2163,cp
2164,imgareatlx
2165,hsteplcm
2166,if (cp->imgareatly == UINT_FAST32_MAX)
2167,cp->imgareatly == UINT_FAST32_MAX
2168,cp->imgareatly
2169,cp
2170,imgareatly
2171,UINT_FAST32_MAX
2172,<empty>
2173,cp->imgareatly = 0
2174,cp->imgareatly
2175,cp
2176,imgareatly
2177,0
2178,else
2179,<empty>
2180,if (vsteplcm != 1)
2181,vsteplcm != 1
2182,vsteplcm
2183,1
2184,<empty>
2185,jas_eprintf("warning: overriding imgareatly value\n")
2186,"warning: overriding imgareatly value\n"
2187,cp->imgareatly *= vsteplcm
2188,cp->imgareatly
2189,cp
2190,imgareatly
2191,vsteplcm
2192,cp->refgrdwidth = cp->imgareatlx + jas_image_width(image)
2193,cp->refgrdwidth
2194,cp
2195,refgrdwidth
2196,cp->imgareatlx + jas_image_width(image)
2197,cp->imgareatlx
2198,cp
2199,imgareatlx
2200,jas_image_width(image)
2201,image
2202,cp->refgrdheight = cp->imgareatly + jas_image_height(image)
2203,cp->refgrdheight
2204,cp
2205,refgrdheight
2206,cp->imgareatly + jas_image_height(image)
2207,cp->imgareatly
2208,cp
2209,imgareatly
2210,jas_image_height(image)
2211,image
2212,if (cp->tilegrdoffx == UINT_FAST32_MAX)
2213,cp->tilegrdoffx == UINT_FAST32_MAX
2214,cp->tilegrdoffx
2215,cp
2216,tilegrdoffx
2217,UINT_FAST32_MAX
2218,<empty>
2219,cp->tilegrdoffx = cp->imgareatlx
2220,cp->tilegrdoffx
2221,cp
2222,tilegrdoffx
2223,cp->imgareatlx
2224,cp
2225,imgareatlx
2226,if (cp->tilegrdoffy == UINT_FAST32_MAX)
2227,cp->tilegrdoffy == UINT_FAST32_MAX
2228,cp->tilegrdoffy
2229,cp
2230,tilegrdoffy
2231,UINT_FAST32_MAX
2232,<empty>
2233,cp->tilegrdoffy = cp->imgareatly
2234,cp->tilegrdoffy
2235,cp
2236,tilegrdoffy
2237,cp->imgareatly
2238,cp
2239,imgareatly
2240,if (!cp->tilewidth)
2241,!cp->tilewidth
2242,cp->tilewidth
2243,cp
2244,tilewidth
2245,<empty>
2246,cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx
2247,cp->tilewidth
2248,cp
2249,tilewidth
2250,cp->refgrdwidth - cp->tilegrdoffx
2251,cp->refgrdwidth
2252,cp
2253,refgrdwidth
2254,cp->tilegrdoffx
2255,cp
2256,tilegrdoffx
2257,if (!cp->tileheight)
2258,!cp->tileheight
2259,cp->tileheight
2260,cp
2261,tileheight
2262,<empty>
2263,cp->tileheight = cp->refgrdheight - cp->tilegrdoffy
2264,cp->tileheight
2265,cp
2266,tileheight
2267,cp->refgrdheight - cp->tilegrdoffy
2268,cp->refgrdheight
2269,cp
2270,refgrdheight
2271,cp->tilegrdoffy
2272,cp
2273,tilegrdoffy
2274,if (cp->numcmpts == 3)
2275,cp->numcmpts == 3
2276,cp->numcmpts
2277,cp
2278,numcmpts
2279,3
2280,<empty>
2281,mctvalid = true
2282,mctvalid
2283,true
2284,for (cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno)
2285,<empty>
2286,cmptno = 0
2287,cmptno
2288,0
2289,cmptno < jas_image_numcmpts(image)
2290,cmptno
2291,jas_image_numcmpts(image)
2292,image
2293,++cmptno
2294,cmptno
2295,<empty>
2296,if (jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||
2297,			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||
2298,			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||
2299,			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0))
2300,jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||
2301,			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||
2302,			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0) ||
2303,			  jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)
2304,jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||
2305,			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0) ||
2306,			  jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0)
2307,jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0) ||
2308,			  jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0)
2309,jas_image_cmptprec(image, cmptno) != jas_image_cmptprec(image, 0)
2310,jas_image_cmptprec(image, cmptno)
2311,image
2312,cmptno
2313,jas_image_cmptprec(image, 0)
2314,image
2315,0
2316,jas_image_cmptsgnd(image, cmptno) != jas_image_cmptsgnd(image, 0)
2317,jas_image_cmptsgnd(image, cmptno)
2318,image
2319,cmptno
2320,jas_image_cmptsgnd(image, 0)
2321,image
2322,0
2323,jas_image_cmptwidth(image, cmptno) != jas_image_cmptwidth(image, 0)
2324,jas_image_cmptwidth(image, cmptno)
2325,image
2326,cmptno
2327,jas_image_cmptwidth(image, 0)
2328,image
2329,0
2330,jas_image_cmptheight(image, cmptno) != jas_image_cmptheight(image, 0)
2331,jas_image_cmptheight(image, cmptno)
2332,image
2333,cmptno
2334,jas_image_cmptheight(image, 0)
2335,image
2336,0
2337,<empty>
2338,mctvalid = false
2339,mctvalid
2340,false
2341,else
2342,<empty>
2343,mctvalid = false
2344,mctvalid
2345,false
2346,if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB)
2347,mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB
2348,mctvalid && enablemct
2349,mctvalid
2350,enablemct
2351,jas_clrspc_fam(jas_image_clrspc(image)) != JAS_CLRSPC_FAM_RGB
2352,jas_clrspc_fam(jas_image_clrspc(image))
2353,jas_image_clrspc(image)
2354,image
2355,JAS_CLRSPC_FAM_RGB
2356,<empty>
2357,jas_eprintf("warning: color space apparently not RGB\n")
2358,"warning: color space apparently not RGB\n"
2359,if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB)
2360,mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB
2361,mctvalid && enablemct
2362,mctvalid
2363,enablemct
2364,jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB
2365,jas_clrspc_fam(jas_image_clrspc(image))
2366,jas_image_clrspc(image)
2367,image
2368,JAS_CLRSPC_FAM_RGB
2369,<empty>
2370,tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT)
2371,tcp->mctid
2372,tcp
2373,mctid
2374,(tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT)
2375,tcp->intmode
2376,tcp
2377,intmode
2378,JPC_MCT_RCT
2379,JPC_MCT_ICT
2380,else
2381,<empty>
2382,tcp->mctid = JPC_MCT_NONE
2383,tcp->mctid
2384,tcp
2385,mctid
2386,JPC_MCT_NONE
2387,tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS)
2388,tccp->qmfbid
2389,tccp
2390,qmfbid
2391,(tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS)
2392,tcp->intmode
2393,tcp
2394,intmode
2395,JPC_COX_RFT
2396,JPC_COX_INS
2397,for (rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno)
2398,<empty>
2399,rlvlno = 0
2400,rlvlno
2401,0
2402,rlvlno < tccp->maxrlvls
2403,rlvlno
2404,tccp->maxrlvls
2405,tccp
2406,maxrlvls
2407,++rlvlno
2408,rlvlno
2409,<empty>
2410,tccp->prcwidthexpns[rlvlno] = prcwidthexpn
2411,tccp->prcwidthexpns[rlvlno]
2412,tccp->prcwidthexpns
2413,tccp
2414,prcwidthexpns
2415,rlvlno
2416,prcwidthexpn
2417,tccp->prcheightexpns[rlvlno] = prcheightexpn
2418,tccp->prcheightexpns[rlvlno]
2419,tccp->prcheightexpns
2420,tccp
2421,prcheightexpns
2422,rlvlno
2423,prcheightexpn
2424,if (prcwidthexpn != 15 || prcheightexpn != 15)
2425,prcwidthexpn != 15 || prcheightexpn != 15
2426,prcwidthexpn != 15
2427,prcwidthexpn
2428,15
2429,prcheightexpn != 15
2430,prcheightexpn
2431,15
2432,<empty>
2433,tccp->csty |= JPC_COX_PRT
2434,tccp->csty
2435,tccp
2436,csty
2437,JPC_COX_PRT
2438,if (!cp->tilewidth)
2439,!cp->tilewidth
2440,cp->tilewidth
2441,cp
2442,tilewidth
2443,<empty>
2444,jas_eprintf("invalid tile width %lu\n", (unsigned long)
2445,		  cp->tilewidth)
2446,"invalid tile width %lu\n"
2447,(unsigned long)
2448,		  cp->tilewidth
2449,unsigned long
2450,cp->tilewidth
2451,cp
2452,tilewidth
2453,goto error;
2454,if (!cp->tileheight)
2455,!cp->tileheight
2456,cp->tileheight
2457,cp
2458,tileheight
2459,<empty>
2460,jas_eprintf("invalid tile height %lu\n", (unsigned long)
2461,		  cp->tileheight)
2462,"invalid tile height %lu\n"
2463,(unsigned long)
2464,		  cp->tileheight
2465,unsigned long
2466,cp->tileheight
2467,cp
2468,tileheight
2469,goto error;
2470,if (cp->tilegrdoffx > cp->imgareatlx ||
2471,	  cp->tilegrdoffy > cp->imgareatly ||
2472,	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||
2473,	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
2474,cp->tilegrdoffx > cp->imgareatlx ||
2475,	  cp->tilegrdoffy > cp->imgareatly ||
2476,	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||
2477,	  cp->tilegrdoffy + cp->tileheight < cp->imgareatly
2478,cp->tilegrdoffx > cp->imgareatlx ||
2479,	  cp->tilegrdoffy > cp->imgareatly ||
2480,	  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx
2481,cp->tilegrdoffx > cp->imgareatlx ||
2482,	  cp->tilegrdoffy > cp->imgareatly
2483,cp->tilegrdoffx > cp->imgareatlx
2484,cp->tilegrdoffx
2485,cp
2486,tilegrdoffx
2487,cp->imgareatlx
2488,cp
2489,imgareatlx
2490,cp->tilegrdoffy > cp->imgareatly
2491,cp->tilegrdoffy
2492,cp
2493,tilegrdoffy
2494,cp->imgareatly
2495,cp
2496,imgareatly
2497,cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx
2498,cp->tilegrdoffx + cp->tilewidth
2499,cp->tilegrdoffx
2500,cp
2501,tilegrdoffx
2502,cp->tilewidth
2503,cp
2504,tilewidth
2505,cp->imgareatlx
2506,cp
2507,imgareatlx
2508,cp->tilegrdoffy + cp->tileheight < cp->imgareatly
2509,cp->tilegrdoffy + cp->tileheight
2510,cp->tilegrdoffy
2511,cp
2512,tilegrdoffy
2513,cp->tileheight
2514,cp
2515,tileheight
2516,cp->imgareatly
2517,cp
2518,imgareatly
2519,<empty>
2520,jas_eprintf("invalid tile grid offset (%lu, %lu)\n",
2521,		  (unsigned long) cp->tilegrdoffx, (unsigned long)
2522,		  cp->tilegrdoffy)
2523,"invalid tile grid offset (%lu, %lu)\n"
2524,(unsigned long) cp->tilegrdoffx
2525,unsigned long
2526,cp->tilegrdoffx
2527,cp
2528,tilegrdoffx
2529,(unsigned long)
2530,		  cp->tilegrdoffy
2531,unsigned long
2532,cp->tilegrdoffy
2533,cp
2534,tilegrdoffy
2535,goto error;
2536,cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,
2537,	  cp->tilewidth)
2538,cp->numhtiles
2539,cp
2540,numhtiles
2541,JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,
2542,	  cp->tilewidth)
2543,cp->refgrdwidth - cp->tilegrdoffx
2544,cp->refgrdwidth
2545,cp
2546,refgrdwidth
2547,cp->tilegrdoffx
2548,cp
2549,tilegrdoffx
2550,cp->tilewidth
2551,cp
2552,tilewidth
2553,cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,
2554,	  cp->tileheight)
2555,cp->numvtiles
2556,cp
2557,numvtiles
2558,JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,
2559,	  cp->tileheight)
2560,cp->refgrdheight - cp->tilegrdoffy
2561,cp->refgrdheight
2562,cp
2563,refgrdheight
2564,cp->tilegrdoffy
2565,cp
2566,tilegrdoffy
2567,cp->tileheight
2568,cp
2569,tileheight
2570,cp->numtiles = cp->numhtiles * cp->numvtiles
2571,cp->numtiles
2572,cp
2573,numtiles
2574,cp->numhtiles * cp->numvtiles
2575,cp->numhtiles
2576,cp
2577,numhtiles
2578,cp->numvtiles
2579,cp
2580,numvtiles
2581,if (ilyrrates && numilyrrates > 0)
2582,ilyrrates && numilyrrates > 0
2583,ilyrrates
2584,numilyrrates > 0
2585,numilyrrates
2586,0
2587,<empty>
2588,tcp->numlyrs = numilyrrates + 1
2589,tcp->numlyrs
2590,tcp
2591,numlyrs
2592,numilyrrates + 1
2593,numilyrrates
2594,1
2595,if (!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *
2596,		  sizeof(jpc_fix_t))))
2597,!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *
2598,		  sizeof(jpc_fix_t)))
2599,tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1) *
2600,		  sizeof(jpc_fix_t))
2601,tcp->ilyrrates
2602,tcp
2603,ilyrrates
2604,jas_malloc((tcp->numlyrs - 1) *
2605,		  sizeof(jpc_fix_t))
2606,(tcp->numlyrs - 1) *
2607,		  sizeof(jpc_fix_t)
2608,tcp->numlyrs - 1
2609,tcp->numlyrs
2610,tcp
2611,numlyrs
2612,1
2613,sizeof(jpc_fix_t)
2614,jpc_fix_t
2615,<empty>
2616,goto error;
2617,for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1);
2618,++i
2619,i
2620,i
2621,) {
2622,			tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i]);
2623,		}
2624,if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode))
2625,cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)
2626,cp->totalsize == UINT_FAST32_MAX
2627,cp->totalsize
2628,cp
2629,totalsize
2630,UINT_FAST32_MAX
2631,!cp->tcp.intmode
2632,cp->tcp.intmode
2633,cp->tcp
2634,cp
2635,tcp
2636,intmode
2637,<empty>
2638,jas_eprintf("cannot use real mode for lossless coding\n")
2639,"cannot use real mode for lossless coding\n"
2640,goto error;
2641,if (prcwidthexpn > 15)
2642,prcwidthexpn > 15
2643,prcwidthexpn
2644,15
2645,<empty>
2646,jas_eprintf("invalid precinct width\n")
2647,"invalid precinct width\n"
2648,goto error;
2649,if (prcheightexpn > 15)
2650,prcheightexpn > 15
2651,prcheightexpn
2652,15
2653,<empty>
2654,jas_eprintf("invalid precinct height\n")
2655,"invalid precinct height\n"
2656,goto error;
2657,if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12)
2658,cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12
2659,cp->tccp.cblkwidthexpn < 2
2660,cp->tccp.cblkwidthexpn
2661,cp->tccp
2662,cp
2663,tccp
2664,cblkwidthexpn
2665,2
2666,cp->tccp.cblkwidthexpn > 12
2667,cp->tccp.cblkwidthexpn
2668,cp->tccp
2669,cp
2670,tccp
2671,cblkwidthexpn
2672,12
2673,<empty>
2674,jas_eprintf("invalid code block width %d\n",
2675,		  JPC_POW2(cp->tccp.cblkwidthexpn))
2676,"invalid code block width %d\n"
2677,JPC_POW2(cp->tccp.cblkwidthexpn)
2678,cp->tccp.cblkwidthexpn
2679,cp->tccp
2680,cp
2681,tccp
2682,cblkwidthexpn
2683,goto error;
2684,if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12)
2685,cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12
2686,cp->tccp.cblkheightexpn < 2
2687,cp->tccp.cblkheightexpn
2688,cp->tccp
2689,cp
2690,tccp
2691,cblkheightexpn
2692,2
2693,cp->tccp.cblkheightexpn > 12
2694,cp->tccp.cblkheightexpn
2695,cp->tccp
2696,cp
2697,tccp
2698,cblkheightexpn
2699,12
2700,<empty>
2701,jas_eprintf("invalid code block height %d\n",
2702,		  JPC_POW2(cp->tccp.cblkheightexpn))
2703,"invalid code block height %d\n"
2704,JPC_POW2(cp->tccp.cblkheightexpn)
2705,cp->tccp.cblkheightexpn
2706,cp->tccp
2707,cp
2708,tccp
2709,cblkheightexpn
2710,goto error;
2711,if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12)
2712,cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12
2713,cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn
2714,cp->tccp.cblkwidthexpn
2715,cp->tccp
2716,cp
2717,tccp
2718,cblkwidthexpn
2719,cp->tccp.cblkheightexpn
2720,cp->tccp
2721,cp
2722,tccp
2723,cblkheightexpn
2724,12
2725,<empty>
2726,jas_eprintf("code block size too large\n")
2727,"code block size too large\n"
2728,goto error;
2729,if (cp->tcp.numlyrs > 16384)
2730,cp->tcp.numlyrs > 16384
2731,cp->tcp.numlyrs
2732,cp->tcp
2733,cp
2734,tcp
2735,numlyrs
2736,16384
2737,<empty>
2738,jas_eprintf("too many layers\n")
2739,"too many layers\n"
2740,goto error;
2741,if (cp->tccp.maxrlvls < 1)
2742,cp->tccp.maxrlvls < 1
2743,cp->tccp.maxrlvls
2744,cp->tccp
2745,cp
2746,tccp
2747,maxrlvls
2748,1
2749,<empty>
2750,jas_eprintf("must be at least one resolution level\n")
2751,"must be at least one resolution level\n"
2752,goto error;
2753,if (cp->tccp.numgbits > 8)
2754,cp->tccp.numgbits > 8
2755,cp->tccp.numgbits
2756,cp->tccp
2757,cp
2758,tccp
2759,numgbits
2760,8
2761,<empty>
2762,jas_eprintf("invalid number of guard bits\n")
2763,"invalid number of guard bits\n"
2764,goto error;
2765,if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize)
2766,cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize
2767,cp->totalsize != UINT_FAST32_MAX
2768,cp->totalsize
2769,cp
2770,totalsize
2771,UINT_FAST32_MAX
2772,cp->totalsize > cp->rawsize
2773,cp->totalsize
2774,cp
2775,totalsize
2776,cp->rawsize
2777,cp
2778,rawsize
2779,<empty>
2780,jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)\n", (unsigned long) cp->totalsize, (unsigned long) cp->rawsize)
2781,"warning: specified rate is unreasonably large (%lu > %lu)\n"
2782,(unsigned long) cp->totalsize
2783,unsigned long
2784,cp->totalsize
2785,cp
2786,totalsize
2787,(unsigned long) cp->rawsize
2788,unsigned long
2789,cp->rawsize
2790,cp
2791,rawsize
2792,if (tcp->numlyrs > 1)
2793,tcp->numlyrs > 1
2794,tcp->numlyrs
2795,tcp
2796,numlyrs
2797,1
2798,<empty>
2799,for (lyrno = 0;lyrno + 2 < tcp->numlyrs;++lyrno)
2800,<empty>
2801,lyrno = 0
2802,lyrno
2803,0
2804,lyrno + 2 < tcp->numlyrs
2805,lyrno + 2
2806,lyrno
2807,2
2808,tcp->numlyrs
2809,tcp
2810,numlyrs
2811,++lyrno
2812,lyrno
2813,<empty>
2814,if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1])
2815,tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1]
2816,tcp->ilyrrates[lyrno]
2817,tcp->ilyrrates
2818,tcp
2819,ilyrrates
2820,lyrno
2821,tcp->ilyrrates[lyrno + 1]
2822,tcp->ilyrrates
2823,tcp
2824,ilyrrates
2825,lyrno + 1
2826,lyrno
2827,1
2828,<empty>
2829,jas_eprintf("intermediate layer rates must increase monotonically\n")
2830,"intermediate layer rates must increase monotonically\n"
2831,goto error;
2832,if (cp->totalsize != UINT_FAST32_MAX)
2833,cp->totalsize != UINT_FAST32_MAX
2834,cp->totalsize
2835,cp
2836,totalsize
2837,UINT_FAST32_MAX
2838,<empty>
2839,for (lyrno = 0;lyrno < tcp->numlyrs - 1;++lyrno)
2840,<empty>
2841,lyrno = 0
2842,lyrno
2843,0
2844,lyrno < tcp->numlyrs - 1
2845,lyrno
2846,tcp->numlyrs - 1
2847,tcp->numlyrs
2848,tcp
2849,numlyrs
2850,1
2851,++lyrno
2852,lyrno
2853,<empty>
2854,if (jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)
2855,				  / cp->rawsize)
2856,jpc_fixtodbl(tcp->ilyrrates[lyrno]) > ((double) cp->totalsize)
2857,				  / cp->rawsize
2858,jpc_fixtodbl(tcp->ilyrrates[lyrno])
2859,tcp->ilyrrates[lyrno]
2860,tcp->ilyrrates
2861,tcp
2862,ilyrrates
2863,lyrno
2864,((double) cp->totalsize)
2865,				  / cp->rawsize
2866,(double) cp->totalsize
2867,double
2868,cp->totalsize
2869,cp
2870,totalsize
2871,cp->rawsize
2872,cp
2873,rawsize
2874,<empty>
2875,jas_eprintf("warning: intermediate layer rates must be less than overall rate\n")
2876,"warning: intermediate layer rates must be less than overall rate\n"
2877,goto error;
2878,if (ilyrrates)
2879,ilyrrates
2880,<empty>
2881,jas_free(ilyrrates)
2882,ilyrrates
2883,return cp;
2884,cp
2885,error:
2886,
2887,	if (ilyrrates) {
2888,		jas_free(ilyrrates);
2889,	}
2890,if (ilyrrates)
2891,ilyrrates
2892,<empty>
2893,jas_free(ilyrrates)
2894,ilyrrates
2895,if (tvp)
2896,tvp
2897,<empty>
2898,jas_tvparser_destroy(tvp)
2899,tvp
2900,if (cp)
2901,cp
2902,<empty>
2903,jpc_enc_cp_destroy(cp)
2904,cp
2905,return 0;
2906,0
2907,RET
2908,char *optstr
2909,jas_image_t *image
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
static jpc_enc_cp_t *cp_create(char *optstr, jas_image_t *image) {
jpc_enc_cp_t *cp;
jas_tvparser_t *tvp;
int ret;
int numilyrrates;
double *ilyrrates;
int i;
int tagid;
jpc_enc_tcp_t *tcp;
jpc_enc_tccp_t *tccp;
jpc_enc_ccp_t *ccp;
int cmptno;
uint_fast16_t rlvlno;
uint_fast16_t prcwidthexpn;
uint_fast16_t prcheightexpn;
bool enablemct;
uint_fast32_t jp2overhead;
uint_fast16_t lyrno;
uint_fast32_t hsteplcm;
uint_fast32_t vsteplcm;
bool mctvalid;
tvp = 0;
cp = 0;
ilyrrates = 0;
numilyrrates = 0;
prcwidthexpn = 15;
prcheightexpn = 15;
enablemct = true;
jp2overhead = 0;
cp->ccps = 0;
cp->debug = 0;
cp->imgareatlx = UINT_FAST32_MAX;
cp->imgareatly = UINT_FAST32_MAX;
cp->refgrdwidth = 0;
cp->refgrdheight = 0;
cp->tilegrdoffx = UINT_FAST32_MAX;
cp->tilegrdoffy = UINT_FAST32_MAX;
cp->tilewidth = 0;
cp->tileheight = 0;
cp->numcmpts = jas_image_numcmpts(image);
hsteplcm = 1;
vsteplcm = 1;
for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno)
hsteplcm *= jas_image_cmpthstep(image, cmptno);
vsteplcm *= jas_image_cmptvstep(image, cmptno);
for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno)
hsteplcm *= jas_image_cmpthstep(image, cmptno);
vsteplcm *= jas_image_cmptvstep(image, cmptno);
for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno)
hsteplcm *= jas_image_cmpthstep(image, cmptno);
vsteplcm *= jas_image_cmptvstep(image, cmptno);
for(cmptno = 0, ccp = cp->ccps;cmptno < JAS_CAST(int, cp->numcmpts);++cmptno, 	  ++ccp)
ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);
ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);
ccp->sampgrdsubstepx = 0;
ccp->sampgrdsubstepx = 0;
ccp->prec = jas_image_cmptprec(image, cmptno);
ccp->sgnd = jas_image_cmptsgnd(image, cmptno);
ccp->numstepsizes = 0;
memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));
for(cmptno = 0, ccp = cp->ccps;cmptno < JAS_CAST(int, cp->numcmpts);++cmptno, 	  ++ccp)
ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);
ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);
ccp->sampgrdsubstepx = 0;
ccp->sampgrdsubstepx = 0;
ccp->prec = jas_image_cmptprec(image, cmptno);
ccp->sgnd = jas_image_cmptsgnd(image, cmptno);
ccp->numstepsizes = 0;
memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));
for(cmptno = 0, ccp = cp->ccps;cmptno < JAS_CAST(int, cp->numcmpts);++cmptno, 	  ++ccp)
ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno);
ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno);
ccp->sampgrdsubstepx = 0;
ccp->sampgrdsubstepx = 0;
ccp->prec = jas_image_cmptprec(image, cmptno);
ccp->sgnd = jas_image_cmptsgnd(image, cmptno);
ccp->numstepsizes = 0;
memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes));
cp->rawsize = jas_image_rawsize(image);
cp->totalsize = UINT_FAST32_MAX;
tcp = &cp->tcp;
tcp->csty = 0;
tcp->intmode = true;
tcp->prg = JPC_COD_LRCPPRG;
tcp->numlyrs = 1;
tcp->ilyrrates = 0;
tccp = &cp->tccp;
tccp->csty = 0;
tccp->maxrlvls = 6;
tccp->cblkwidthexpn = 6;
tccp->cblkheightexpn = 6;
tccp->cblksty = 0;
tccp->numgbits = 2;
while(!(ret = jas_tvparser_next(tvp)))
switch(jas_taginfo_nonull(jas_taginfos_lookup(encopts, 		  jas_tvparser_gettag(tvp)))->id)
jp2overhead = atoi(jas_tvparser_getval(tvp));
jas_tvparser_destroy(tvp);
tvp = 0;
if(cp->imgareatlx == UINT_FAST32_MAX)
cp->imgareatlx = 0;
if(cp->imgareatly == UINT_FAST32_MAX)
cp->imgareatly = 0;
cp->refgrdwidth = cp->imgareatlx + jas_image_width(image);
cp->refgrdheight = cp->imgareatly + jas_image_height(image);
if(cp->tilegrdoffx == UINT_FAST32_MAX)
cp->tilegrdoffx = cp->imgareatlx;
if(cp->tilegrdoffy == UINT_FAST32_MAX)
cp->tilegrdoffy = cp->imgareatly;
if(!cp->tilewidth)
cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx;
if(!cp->tileheight)
cp->tileheight = cp->refgrdheight - cp->tilegrdoffy;
if(cp->numcmpts == 3)
mctvalid = true;
for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno)
for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno)
for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno)
if(mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB)
tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT);
tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS);
for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno)
tccp->prcwidthexpns[rlvlno] = prcwidthexpn;
tccp->prcheightexpns[rlvlno] = prcheightexpn;
for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno)
tccp->prcwidthexpns[rlvlno] = prcwidthexpn;
tccp->prcheightexpns[rlvlno] = prcheightexpn;
for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno)
tccp->prcwidthexpns[rlvlno] = prcwidthexpn;
tccp->prcheightexpns[rlvlno] = prcheightexpn;
for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno)
tccp->prcwidthexpns[rlvlno] = prcwidthexpn;
tccp->prcheightexpns[rlvlno] = prcheightexpn;
for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno)
tccp->prcwidthexpns[rlvlno] = prcwidthexpn;
tccp->prcheightexpns[rlvlno] = prcheightexpn;
for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno)
tccp->prcwidthexpns[rlvlno] = prcwidthexpn;
tccp->prcheightexpns[rlvlno] = prcheightexpn;
cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx, 	  cp->tilewidth);
cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy, 	  cp->tileheight);
cp->numtiles = cp->numhtiles * cp->numvtiles;
return cp;
=======================
