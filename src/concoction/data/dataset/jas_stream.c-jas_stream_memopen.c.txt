-----label-----
0
-----code-----
jas_stream_t *jas_stream_memopen(char *buf, int bufsize)
{
	jas_stream_t *stream;
	jas_stream_memobj_t *obj;

	if (!(stream = jas_stream_create())) {
		return 0;
	}

	/* A stream associated with a memory buffer is always opened
	for both reading and writing in binary mode. */
	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;

	/* Since the stream data is already resident in memory, buffering
	is not necessary. */
	/* But... It still may be faster to use buffering anyways. */
	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);

	/* Select the operations for a memory stream. */
	stream->ops_ = &jas_stream_memops;

	/* Allocate memory for the underlying memory stream object. */
	if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {
		jas_stream_destroy(stream);
		return 0;
	}
	stream->obj_ = (void *) obj;

	/* Initialize a few important members of the memory stream object. */
	obj->myalloc_ = 0;
	obj->buf_ = 0;

	/* If the buffer size specified is nonpositive, then the buffer
	is allocated internally and automatically grown as needed. */
	if (bufsize <= 0) {
		obj->bufsize_ = 1024;
		obj->growable_ = 1;
	} else {
		obj->bufsize_ = bufsize;
		obj->growable_ = 0;
	}
	if (buf) {
		obj->buf_ = (unsigned char *) buf;
	} else {
		obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char));
		obj->myalloc_ = 1;
	}
	if (!obj->buf_) {
		jas_stream_close(stream);
		return 0;
	}

	if (bufsize > 0 && buf) {
		/* If a buffer was supplied by the caller and its length is positive,
		  make the associated buffer data appear in the stream initially. */
		obj->len_ = bufsize;
	} else {
		/* The stream is initially empty. */
		obj->len_ = 0;
	}
	obj->pos_ = 0;
	
	return stream;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
9,11
12,13
12,14
14,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
16,29
16,30
16,31
16,32
17,18
18,19
18,20
19,20
21,22
21,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
31,33
32,33
33,34
34,35
34,36
35,36
37,38
38,39
40,41
41,42
43,44
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
50,52
51,52
53,54
55,56
57,58
58,59
58,60
58,61
58,62
58,63
59,60
61,62
63,64
67,68
68,69
68,70
69,70
69,71
70,71
73,74
74,75
76,77
76,78
77,78
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
92,93
92,94
93,94
95,96
97,98
99,100
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
106,108
108,109
110,111
112,113
113,114
113,115
114,115
114,116
115,116
119,120
120,121
120,122
121,122
121,123
122,123
126,127
126,128
126,129
127,128
127,129
128,129
131,132
131,133
132,133
133,134
133,135
134,135
134,136
135,136
139,140
140,141
140,142
141,142
141,143
142,143
146,147
146,148
147,148
148,149
148,150
149,150
149,151
150,151
153,154
155,156
156,157
156,158
157,158
157,159
158,159
162,163
162,164
162,165
163,164
165,166
166,167
167,168
167,169
168,169
168,170
169,170
172,173
172,174
173,174
173,175
175,176
177,178
179,180
179,181
180,181
181,182
181,183
182,183
182,184
183,184
186,187
186,188
187,188
189,190
189,191
190,191
190,192
191,192
194,195
195,196
195,197
198,199
199,200
199,201
200,201
200,202
201,202
205,206
205,207
206,207
207,208
207,209
208,209
211,212
211,213
212,213
213,214
213,215
214,215
216,217
218,219
220,221
220,222
220,223
221,222
221,223
222,223
222,224
223,224
226,227
228,229
229,230
230,231
230,232
231,232
231,233
232,233
235,236
237,238
238,239
239,240
239,241
240,241
240,242
241,242
245,246
246,247
246,248
247,248
247,249
248,249
252,253
253,254
-----nextToken-----
3,5,6,8,10,11,13,15,20,22,23,27,29,30,36,39,42,47,48,52,54,56,60,62,64,65,66,71,72,75,81,84,88,89,94,96,98,103,104,107,109,111,116,117,118,123,124,125,129,130,136,137,138,143,144,145,151,152,154,159,160,161,164,170,171,174,176,178,184,185,188,192,193,196,197,202,203,204,209,210,215,217,219,224,225,227,233,234,236,242,243,244,249,250,251,254
-----computeFrom-----
34,35
34,36
44,45
44,46
49,50
49,51
50,51
50,52
68,69
68,70
79,80
79,81
100,101
100,102
113,114
113,115
120,121
120,122
127,128
127,129
133,134
133,135
140,141
140,142
148,149
148,150
156,157
156,158
167,168
167,169
181,182
181,183
189,190
189,191
199,200
199,201
221,222
221,223
222,223
222,224
230,231
230,232
239,240
239,241
246,247
246,248
-----guardedBy-----
224,236
-----guardedByNegation-----
129,154
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
jas_stream_t *jas_stream_memopen(char *buf, int bufsize){	jas_stream_t *stream;	jas_stream_memobj_t *obj;	if (!(stream = jas_stream_create())) {		return 0;	}	/* A stream associated with a memory buffer is always opened	for both reading and writing in binary mode. */	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;	/* Since the stream data is already resident in memory, buffering	is not necessary. */	/* But... It still may be faster to use buffering anyways. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	/* Select the operations for a memory stream. */	stream->ops_ = &jas_stream_memops;	/* Allocate memory for the underlying memory stream object. */	if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	stream->obj_ = (void *) obj;	/* Initialize a few important members of the memory stream object. */	obj->myalloc_ = 0;	obj->buf_ = 0;	/* If the buffer size specified is nonpositive, then the buffer	is allocated internally and automatically grown as needed. */	if (bufsize <= 0) {		obj->bufsize_ = 1024;		obj->growable_ = 1;	} else {		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}	if (buf) {		obj->buf_ = (unsigned char *) buf;	} else {		obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char));		obj->myalloc_ = 1;	}	if (!obj->buf_) {		jas_stream_close(stream);		return 0;	}	if (bufsize > 0 && buf) {		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	} else {		/* The stream is initially empty. */		obj->len_ = 0;	}	obj->pos_ = 0;		return stream;}
jas_stream_t
jas_stream_t
*jas_stream_memopen(char *buf, int bufsize)
*
jas_stream_memopen
char *buf
char
*buf
*
buf
int bufsize
int
bufsize
bufsize
{	jas_stream_t *stream;	jas_stream_memobj_t *obj;	if (!(stream = jas_stream_create())) {		return 0;	}	/* A stream associated with a memory buffer is always opened	for both reading and writing in binary mode. */	stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;	/* Since the stream data is already resident in memory, buffering	is not necessary. */	/* But... It still may be faster to use buffering anyways. */	jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);	/* Select the operations for a memory stream. */	stream->ops_ = &jas_stream_memops;	/* Allocate memory for the underlying memory stream object. */	if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {		jas_stream_destroy(stream);		return 0;	}	stream->obj_ = (void *) obj;	/* Initialize a few important members of the memory stream object. */	obj->myalloc_ = 0;	obj->buf_ = 0;	/* If the buffer size specified is nonpositive, then the buffer	is allocated internally and automatically grown as needed. */	if (bufsize <= 0) {		obj->bufsize_ = 1024;		obj->growable_ = 1;	} else {		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}	if (buf) {		obj->buf_ = (unsigned char *) buf;	} else {		obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char));		obj->myalloc_ = 1;	}	if (!obj->buf_) {		jas_stream_close(stream);		return 0;	}	if (bufsize > 0 && buf) {		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	} else {		/* The stream is initially empty. */		obj->len_ = 0;	}	obj->pos_ = 0;		return stream;}
jas_stream_t *stream;
jas_stream_t *stream;
jas_stream_t
jas_stream_t
*stream
*
stream
jas_stream_memobj_t *obj;
jas_stream_memobj_t *obj;
jas_stream_memobj_t
jas_stream_memobj_t
*obj
*
obj
if (!(stream = jas_stream_create())) {		return 0;	}
!(stream = jas_stream_create())
(stream = jas_stream_create())
stream = jas_stream_create()
stream
stream
jas_stream_create()
jas_stream_create
jas_stream_create
{		return 0;	}
return 0;
0
stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;
stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
stream->openmode_
stream
stream
openmode_
JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
JAS_STREAM_READ | JAS_STREAM_WRITE
JAS_STREAM_READ
JAS_STREAM_READ
JAS_STREAM_WRITE
JAS_STREAM_WRITE
JAS_STREAM_BINARY
JAS_STREAM_BINARY
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0)
jas_stream_initbuf
jas_stream_initbuf
stream
stream
JAS_STREAM_FULLBUF
JAS_STREAM_FULLBUF
0
0
stream->ops_ = &jas_stream_memops;
stream->ops_ = &jas_stream_memops
stream->ops_
stream
stream
ops_
&jas_stream_memops
jas_stream_memops
jas_stream_memops
if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))) {		jas_stream_destroy(stream);		return 0;	}
!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))
(obj = jas_malloc(sizeof(jas_stream_memobj_t)))
obj = jas_malloc(sizeof(jas_stream_memobj_t))
obj
obj
jas_malloc(sizeof(jas_stream_memobj_t))
jas_malloc
jas_malloc
sizeof(jas_stream_memobj_t)
jas_stream_memobj_t
jas_stream_memobj_t
jas_stream_memobj_t

{		jas_stream_destroy(stream);		return 0;	}
jas_stream_destroy(stream);
jas_stream_destroy(stream)
jas_stream_destroy
jas_stream_destroy
stream
stream
return 0;
0
stream->obj_ = (void *) obj;
stream->obj_ = (void *) obj
stream->obj_
stream
stream
obj_
(void *) obj
void *
void
*
*
obj
obj
obj->myalloc_ = 0;
obj->myalloc_ = 0
obj->myalloc_
obj
obj
myalloc_
0
obj->buf_ = 0;
obj->buf_ = 0
obj->buf_
obj
obj
buf_
0
if (bufsize <= 0) {		obj->bufsize_ = 1024;		obj->growable_ = 1;	} else {		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}
bufsize <= 0
bufsize
bufsize
0
{		obj->bufsize_ = 1024;		obj->growable_ = 1;	}
obj->bufsize_ = 1024;
obj->bufsize_ = 1024
obj->bufsize_
obj
obj
bufsize_
1024
obj->growable_ = 1;
obj->growable_ = 1
obj->growable_
obj
obj
growable_
1
{		obj->bufsize_ = bufsize;		obj->growable_ = 0;	}
obj->bufsize_ = bufsize;
obj->bufsize_ = bufsize
obj->bufsize_
obj
obj
bufsize_
bufsize
bufsize
obj->growable_ = 0;
obj->growable_ = 0
obj->growable_
obj
obj
growable_
0
if (buf) {		obj->buf_ = (unsigned char *) buf;	} else {		obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char));		obj->myalloc_ = 1;	}
buf
buf
{		obj->buf_ = (unsigned char *) buf;	}
obj->buf_ = (unsigned char *) buf;
obj->buf_ = (unsigned char *) buf
obj->buf_
obj
obj
buf_
(unsigned char *) buf
unsigned char *
unsigned char
*
*
buf
buf
{		obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char));		obj->myalloc_ = 1;	}
obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char));
obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char))
obj->buf_
obj
obj
buf_
jas_malloc(obj->bufsize_ * sizeof(char))
jas_malloc
jas_malloc
obj->bufsize_ * sizeof(char)
obj->bufsize_
obj
obj
bufsize_
sizeof(char)
char
char

obj->myalloc_ = 1;
obj->myalloc_ = 1
obj->myalloc_
obj
obj
myalloc_
1
if (!obj->buf_) {		jas_stream_close(stream);		return 0;	}
!obj->buf_
obj->buf_
obj
obj
buf_
{		jas_stream_close(stream);		return 0;	}
jas_stream_close(stream);
jas_stream_close(stream)
jas_stream_close
jas_stream_close
stream
stream
return 0;
0
if (bufsize > 0 && buf) {		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	} else {		/* The stream is initially empty. */		obj->len_ = 0;	}
bufsize > 0 && buf
bufsize > 0
bufsize
bufsize
0
buf
buf
{		/* If a buffer was supplied by the caller and its length is positive,		  make the associated buffer data appear in the stream initially. */		obj->len_ = bufsize;	}
obj->len_ = bufsize;
obj->len_ = bufsize
obj->len_
obj
obj
len_
bufsize
bufsize
{		/* The stream is initially empty. */		obj->len_ = 0;	}
obj->len_ = 0;
obj->len_ = 0
obj->len_
obj
obj
len_
0
obj->pos_ = 0;
obj->pos_ = 0
obj->pos_
obj
obj
pos_
0
return stream;
stream
stream
-----joern-----
(10,94,0)
(3,40,0)
(13,130,0)
(120,60,0)
(72,144,0)
(125,103,0)
(5,73,0)
(71,65,0)
(6,0,0)
(111,104,0)
(83,52,0)
(32,42,0)
(30,103,0)
(145,18,0)
(68,29,0)
(21,30,0)
(134,41,0)
(11,144,0)
(68,104,0)
(114,18,0)
(98,91,0)
(93,129,0)
(18,109,0)
(38,85,0)
(8,130,0)
(131,25,0)
(96,101,0)
(25,103,0)
(105,146,0)
(2,145,0)
(121,108,0)
(23,48,0)
(5,102,0)
(81,103,0)
(76,93,0)
(31,63,0)
(121,24,0)
(123,68,0)
(14,73,0)
(135,94,0)
(69,4,0)
(15,63,0)
(150,12,0)
(119,66,0)
(40,101,0)
(33,85,0)
(18,140,0)
(136,23,0)
(58,60,0)
(86,87,0)
(97,47,0)
(121,11,0)
(63,109,0)
(98,33,0)
(69,142,0)
(104,109,0)
(49,60,0)
(116,101,0)
(145,103,0)
(104,68,0)
(34,11,0)
(114,0,0)
(35,5,0)
(121,38,0)
(42,130,0)
(98,114,0)
(4,113,0)
(118,81,0)
(0,78,0)
(54,5,0)
(55,87,0)
(105,103,0)
(60,101,0)
(59,103,0)
(73,88,0)
(12,130,0)
(105,4,0)
(61,48,0)
(108,22,0)
(52,78,0)
(92,38,0)
(1,129,0)
(16,45,0)
(56,104,0)
(60,130,0)
(149,101,0)
(137,110,0)
(85,33,0)
(121,145,0)
(81,57,0)
(110,103,0)
(121,25,0)
(9,145,0)
(148,91,0)
(48,80,0)
(110,4,0)
(73,130,0)
(103,59,0)
(41,52,0)
(143,97,0)
(50,30,0)
(35,97,0)
(20,130,0)
(122,107,0)
(27,25,0)
(33,98,0)
(94,135,0)
(45,65,0)
(121,110,0)
(69,29,0)
(149,30,0)
(5,12,0)
(85,36,0)
(66,130,0)
(127,101,0)
(8,149,0)
(17,81,0)
(35,66,0)
(121,41,0)
(124,69,0)
(19,65,0)
(105,85,0)
(66,101,0)
(84,125,0)
(112,101,0)
(121,93,0)
(77,23,0)
(53,125,0)
(135,103,0)
(114,103,0)
(57,74,0)
(7,108,0)
(142,69,0)
(95,114,0)
(147,114,0)
(107,130,0)
(132,103,0)
(39,11,0)
(91,98,0)
(89,57,0)
(108,103,0)
(28,41,0)
(139,60,0)
(121,73,0)
(90,105,0)
(30,149,0)
(45,116,0)
(107,102,0)
(51,101,0)
(105,144,0)
(144,101,0)
(114,98,0)
(126,127,0)
(130,20,0)
(146,105,0)
(38,103,0)
(99,8,0)
(121,87,0)
(87,103,0)
(125,127,0)
(44,105,0)
(64,22,0)
(82,121,0)
(130,13,0)
(79,101,0)
(65,45,0)
(115,88,0)
(35,121,0)
(117,101,0)
(23,103,0)
(62,130,0)
(4,69,0)
(133,93,0)
(67,101,0)
(141,18,0)
(70,115,0)
(93,103,0)
(37,101,0)
(11,103,0)
(22,140,0)
(88,101,0)
(100,38,0)
(87,40,0)
(41,103,0)
(26,12,0)
(138,8,0)
(30,21,0)
(25,0,0)
(116,45,0)
(43,101,0)
(129,36,0)
(12,116,0)
(48,109,0)
(121,8,0)
(42,24,0)
(103,135,0)
(106,110,0)
(121,12,0)
(128,108,0)
(88,115,0)
(46,73,0)
(17,68,1)
(149,30,1)
(131,63,1)
(28,0,1)
(52,83,1)
(18,109,1)
(108,103,1)
(99,138,1)
(89,81,1)
(54,107,1)
(125,103,1)
(115,70,1)
(53,57,1)
(121,87,1)
(68,29,1)
(83,41,1)
(35,121,1)
(88,115,1)
(10,132,1)
(132,88,1)
(111,56,1)
(147,95,1)
(76,85,1)
(31,15,1)
(30,21,1)
(25,27,1)
(121,108,1)
(41,103,1)
(121,93,1)
(86,55,1)
(118,17,1)
(12,26,1)
(27,131,1)
(123,104,1)
(93,103,1)
(20,62,1)
(35,66,1)
(14,46,1)
(30,50,1)
(38,100,1)
(121,11,1)
(108,7,1)
(91,148,1)
(82,42,1)
(18,141,1)
(49,116,1)
(116,45,1)
(145,103,1)
(144,72,1)
(48,109,1)
(34,39,1)
(136,68,1)
(72,11,1)
(69,124,1)
(41,134,1)
(138,59,1)
(8,130,1)
(121,12,1)
(124,110,1)
(94,10,1)
(30,103,1)
(105,85,1)
(66,119,1)
(11,34,1)
(35,5,1)
(46,60,1)
(13,130,1)
(48,61,1)
(106,75,1)
(103,135,1)
(143,13,1)
(114,147,1)
(90,4,1)
(58,49,1)
(97,143,1)
(95,38,1)
(3,87,1)
(81,103,1)
(104,111,1)
(110,103,1)
(77,136,1)
(60,120,1)
(135,94,1)
(84,53,1)
(68,123,1)
(45,65,1)
(25,103,1)
(126,125,1)
(35,97,1)
(114,18,1)
(63,109,1)
(134,28,1)
(4,69,1)
(22,64,1)
(105,144,1)
(60,130,1)
(85,33,1)
(120,139,1)
(110,137,1)
(59,103,1)
(1,93,1)
(121,41,1)
(90,129,1)
(137,106,1)
(133,76,1)
(75,22,1)
(55,149,1)
(38,103,1)
(128,18,1)
(63,31,1)
(105,103,1)
(56,146,1)
(130,20,1)
(148,114,1)
(121,110,1)
(33,98,1)
(50,8,1)
(127,126,1)
(7,128,1)
(69,29,1)
(42,130,1)
(119,127,1)
(81,118,1)
(57,89,1)
(150,13,1)
(105,4,1)
(87,86,1)
(121,25,1)
(141,145,1)
(121,145,1)
(23,103,1)
(100,92,1)
(32,146,1)
(8,99,1)
(121,82,1)
(104,109,1)
(73,14,1)
(98,114,1)
(65,71,1)
(0,6,1)
(93,133,1)
(129,1,1)
(12,130,1)
(92,75,1)
(66,130,1)
(114,0,1)
(69,142,1)
(75,52,1)
(71,19,1)
(40,3,1)
(39,40,1)
(105,44,1)
(139,58,1)
(146,105,1)
(9,2,1)
(122,59,1)
(53,48,1)
(107,130,1)
(61,23,1)
(5,12,1)
(5,73,1)
(64,108,1)
(70,73,1)
(114,103,1)
(87,103,1)
(19,16,1)
(145,9,1)
(15,144,1)
(26,150,1)
(125,84,1)
(121,38,1)
(68,104,1)
(121,8,1)
(107,122,1)
(98,91,1)
(16,12,1)
(23,77,1)
(121,73,1)
(6,25,1)
(73,130,1)
(5,54,1)
(42,32,1)
(44,90,1)
(2,63,1)
(11,103,1)
(60,13,2)
(3,59,2)
(116,45,2)
(28,63,2)
(15,59,2)
(33,75,2)
(108,103,2)
(26,13,2)
(70,13,2)
(130,20,2)
(40,59,2)
(35,97,2)
(45,13,2)
(56,146,2)
(42,146,2)
(5,12,2)
(5,59,2)
(30,103,2)
(105,144,2)
(81,103,2)
(12,130,2)
(53,146,2)
(150,13,2)
(123,104,2)
(87,59,2)
(76,75,2)
(69,142,2)
(12,13,2)
(121,87,2)
(63,59,2)
(87,103,2)
(133,75,2)
(114,18,2)
(59,103,2)
(41,103,2)
(124,75,2)
(146,59,2)
(104,146,2)
(35,121,2)
(8,59,2)
(121,25,2)
(99,59,2)
(81,68,2)
(55,59,2)
(5,73,2)
(38,75,2)
(135,13,2)
(61,68,2)
(63,109,2)
(13,130,2)
(145,103,2)
(41,63,2)
(23,103,2)
(66,146,2)
(120,13,2)
(147,75,2)
(121,41,2)
(149,30,2)
(97,13,2)
(77,68,2)
(148,75,2)
(106,75,2)
(85,33,2)
(68,146,2)
(125,103,2)
(135,94,2)
(46,13,2)
(110,103,2)
(38,103,2)
(68,29,2)
(54,59,2)
(121,8,2)
(0,63,2)
(105,4,2)
(121,146,2)
(57,68,2)
(66,130,2)
(93,103,2)
(103,135,2)
(48,68,2)
(59,13,2)
(14,13,2)
(105,59,2)
(19,13,2)
(105,85,2)
(90,59,2)
(91,75,2)
(107,130,2)
(89,68,2)
(25,63,2)
(115,13,2)
(8,130,2)
(18,63,2)
(84,146,2)
(30,21,2)
(127,146,2)
(9,63,2)
(88,13,2)
(104,109,2)
(49,13,2)
(98,75,2)
(17,68,2)
(132,13,2)
(4,69,2)
(143,13,2)
(18,109,2)
(136,68,2)
(103,13,2)
(25,103,2)
(4,75,2)
(128,63,2)
(11,103,2)
(129,75,2)
(114,103,2)
(58,13,2)
(92,75,2)
(149,59,2)
(98,114,2)
(23,68,2)
(137,75,2)
(111,146,2)
(72,59,2)
(65,13,2)
(119,146,2)
(139,13,2)
(105,103,2)
(114,0,2)
(31,59,2)
(114,75,2)
(116,13,2)
(86,59,2)
(95,75,2)
(68,104,2)
(145,63,2)
(42,130,2)
(82,146,2)
(83,63,2)
(118,68,2)
(141,63,2)
(27,63,2)
(35,66,2)
(122,59,2)
(88,115,2)
(125,146,2)
(134,63,2)
(32,146,2)
(64,63,2)
(93,75,2)
(131,63,2)
(121,11,2)
(16,13,2)
(121,145,2)
(22,63,2)
(34,59,2)
(121,110,2)
(1,75,2)
(11,59,2)
(44,59,2)
(100,75,2)
(30,59,2)
(33,98,2)
(144,59,2)
(121,73,2)
(73,130,2)
(138,59,2)
(69,75,2)
(121,12,2)
(126,146,2)
(71,13,2)
(75,59,2)
(50,59,2)
(52,63,2)
(108,63,2)
(121,93,2)
(10,13,2)
(48,109,2)
(94,13,2)
(45,65,2)
(98,91,2)
(85,75,2)
(60,130,2)
(121,108,2)
(7,63,2)
(39,59,2)
(110,75,2)
(69,29,2)
(107,59,2)
(146,105,2)
(2,63,2)
(6,63,2)
(73,13,2)
(35,5,2)
(121,38,2)
-----------------------------------
(0,obj->bufsize_ = 1024)
(1,1)
(2,obj)
(3,0)
(4,obj->buf_ = (unsigned char *)
(5,return 0;)
(6,1024)
(7,growable_)
(8,stream->obj_)
(9,bufsize_)
(10,jas_stream_memobj_t)
(11,obj->buf_)
(12,stream->openmode_)
(13,!(stream = jas_stream_create()
(14,ops_)
(15,bufsize)
(16,JAS_STREAM_READ)
(17,obj)
(18,obj->bufsize_ = bufsize)
(19,JAS_STREAM_WRITE)
(20,jas_stream_create()
(21,void *)
(22,obj->growable_ = 0)
(23,obj->len_)
(24,)
(25,obj->bufsize_)
(26,openmode_)
(27,bufsize_)
(28,obj)
(29,char *buf)
(30,(void *)
(31,0)
(32,stream)
(33,jas_malloc(obj->bufsize_ * sizeof(char)
(34,buf_)
(35,RET)
(36,)
(37,if (bufsize <= 0)
(38,obj->buf_)
(39,obj)
(40,obj->myalloc_ = 0)
(41,obj->growable_)
(42,jas_stream_close(stream)
(43,if (!(stream = jas_stream_create()
(44,buf_)
(45,JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY)
(46,stream)
(47,)
(48,obj->len_ = bufsize)
(49,stream)
(50,obj)
(51,obj)
(52,obj->growable_ = 1)
(53,obj)
(54,0)
(55,obj)
(56,bufsize)
(57,obj->len_ = 0)
(58,JAS_STREAM_FULLBUF)
(59,!(obj = jas_malloc(sizeof(jas_stream_memobj_t)
(60,jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0)
(61,bufsize)
(62,stream)
(63,bufsize <= 0)
(64,0)
(65,JAS_STREAM_WRITE | JAS_STREAM_BINARY)
(66,return stream;)
(67,stream)
(68,bufsize > 0 && buf)
(69,(unsigned char *)
(70,jas_stream_memops)
(71,JAS_STREAM_BINARY)
(72,0)
(73,stream->ops_)
(74,)
(75,buf)
(76,obj)
(77,len_)
(78,)
(79,if (bufsize > 0 && buf)
(80,)
(81,obj->len_)
(82,0)
(83,1)
(84,pos_)
(85,obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char)
(86,myalloc_)
(87,obj->myalloc_)
(88,stream->ops_ = &jas_stream_memops)
(89,0)
(90,obj)
(91,sizeof(char)
(92,obj)
(93,obj->myalloc_)
(94,sizeof(jas_stream_memobj_t)
(95,obj)
(96,if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)
(97,return 0;)
(98,obj->bufsize_ * sizeof(char)
(99,obj_)
(100,buf_)
(101,)
(102,)
(103,obj = jas_malloc(sizeof(jas_stream_memobj_t)
(104,bufsize > 0)
(105,obj->buf_)
(106,obj)
(107,jas_stream_destroy(stream)
(108,obj->growable_)
(109,int bufsize)
(110,obj->buf_)
(111,0)
(112,if (buf)
(113,)
(114,obj->bufsize_)
(115,&jas_stream_memops)
(116,stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY)
(117,if (!obj->buf_)
(118,len_)
(119,stream)
(120,0)
(121,return 0;)
(122,stream)
(123,buf)
(124,buf)
(125,obj->pos_)
(126,0)
(127,obj->pos_ = 0)
(128,obj)
(129,obj->myalloc_ = 1)
(130,stream = jas_stream_create()
(131,obj)
(132,obj)
(133,myalloc_)
(134,growable_)
(135,jas_malloc(sizeof(jas_stream_memobj_t)
(136,obj)
(137,buf_)
(138,stream)
(139,0)
(140,)
(141,bufsize)
(142,unsigned char *)
(143,0)
(144,obj->buf_ = 0)
(145,obj->bufsize_)
(146,!obj->buf_)
(147,bufsize_)
(148,char)
(149,stream->obj_ = (void *)
(150,stream)
-----cfg-----
(129,127)
(131,133)
(133,161)
(7,17)
(136,145)
(136,152)
(137,136)
(14,19)
(14,24)
(142,157)
(15,14)
(143,142)
(17,15)
(145,143)
(19,161)
(21,30)
(149,157)
(22,26)
(150,149)
(24,22)
(152,150)
(25,21)
(154,159)
(26,25)
(155,154)
(157,155)
(30,38)
(159,161)
(35,46)
(36,39)
(38,36)
(39,35)
(42,49)
(42,56)
(43,42)
(45,43)
(46,45)
(49,51)
(51,161)
(53,63)
(54,58)
(56,54)
(57,53)
(58,57)
(60,68)
(61,60)
(63,61)
(65,71)
(66,65)
(68,66)
(71,78)
(71,90)
(75,83)
(76,75)
(78,76)
(80,103)
(80,112)
(81,80)
(83,81)
(87,95)
(88,87)
(90,88)
(92,103)
(92,112)
(93,92)
(95,93)
(100,129)
(101,105)
(103,101)
(104,100)
(105,104)
(109,123)
(110,117)
(112,110)
(113,109)
(114,113)
(115,118)
(117,115)
(118,114)
(120,129)
(121,120)
(123,121)
(126,131)
(126,137)
(127,126)
-----path-----
7,17,15,14,19,161
7,17,15,14,24,22,26,25,21,30,38,36,39,35,46,45,43,42,49,51,161
7,17,15,14,24,22,26,25,21,30,38,36,39,35,46,45,43,42,56,54,58,57,53,63,61,60,68,66,65,71,78,76,75,83,81,80,103,101,105,104,100,129,127,126,131,133,161
7,17,15,14,24,22,26,25,21,30,38,36,39,35,46,45,43,42,56,54,58,57,53,63,61,60,68,66,65,71,78,76,75,83,81,80,103,101,105,104,100,129,127,126,137,136,145,143,142,157,155
7,17,15,14,24,22,26,25,21,30,38,36,39,35,46,45,43,42,56,54,58,57,53,63,61,60,68,66,65,71,78,76,75,83,81,80,103,101,105,104,100,129,127,126,137,136,152,150,149,157,155
7,17,15,14,24,22,26,25,21,30,38,36,39,35,46,45,43,42,56,54,58,57,53,63,61,60,68,66,65,71,78,76,75,83,81,80,112,110,117,115,118,114,113,109,123,121,120,129,127,126,131
7,17,15,14,24,22,26,25,21,30,38,36,39,35,46,45,43,42,56,54,58,57,53,63,61,60,68,66,65,71,78,76,75,83,81,80,112,110,117,115,118,114,113,109,123,121,120,129,127,126,137
7,17,15,14,24,22,26,25,21,30,38,36,39,35,46,45,43,42,56,54,58,57,53,63,61,60,68,66,65,71,90,88,87,95,93,92,103,101,105,104,100,129,127,126,131,133,161
7,17,15,14,24,22,26,25,21,30,38,36,39,35,46,45,43,42,56,54,58,57,53,63,61,60,68,66,65,71,90,88,87,95,93,92,103,101,105,104,100,129,127,126,137,136,145,143,142,157,155
7,17,15,14,24,22,26,25,21,30,38,36,39,35,46,45,43,42,56,54,58,57,53,63,61,60,68,66,65,71,90,88,87,95,93,92,103,101,105,104,100,129,127,126,137,136,152,150,149,157,155
7,17,15,14,24,22,26,25,21,30,38,36,39,35,46,45,43,42,56,54,58,57,53,63,61,60,68,66,65,71,90,88,87,95,93,92,112,110,117,115,118,114,113,109,123,121,120,129,127,126,131
7,17,15,14,24,22,26,25,21,30,38,36,39,35,46,45,43,42,56,54,58,57,53,63,61,60,68,66,65,71,90,88,87,95,93,92,112,110,117,115,118,114,113,109,123,121,120,129,127,126,137
-----cfgNode-----
5,<global>
6,<empty>
7,jas_stream_t jas_stream_memopen (char *buf,int bufsize)
8,char *buf
9,int bufsize
10,<empty>
11,jas_stream_t* stream
12,jas_stream_memobj_t* obj
13,if (!(stream = jas_stream_create()))
14,!(stream = jas_stream_create())
15,stream = jas_stream_create()
16,stream
17,jas_stream_create()
18,<empty>
19,return 0;
20,0
21,stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
22,stream->openmode_
23,stream
24,openmode_
25,JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
26,JAS_STREAM_READ | JAS_STREAM_WRITE
27,JAS_STREAM_READ
28,JAS_STREAM_WRITE
29,JAS_STREAM_BINARY
30,jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0)
31,stream
32,JAS_STREAM_FULLBUF
33,0
34,0
35,stream->ops_ = &jas_stream_memops
36,stream->ops_
37,stream
38,ops_
39,&jas_stream_memops
40,jas_stream_memops
41,if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t))))
42,!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))
43,obj = jas_malloc(sizeof(jas_stream_memobj_t))
44,obj
45,jas_malloc(sizeof(jas_stream_memobj_t))
46,sizeof(jas_stream_memobj_t)
47,jas_stream_memobj_t
48,<empty>
49,jas_stream_destroy(stream)
50,stream
51,return 0;
52,0
53,stream->obj_ = (void *) obj
54,stream->obj_
55,stream
56,obj_
57,(void *) obj
58,void *
59,obj
60,obj->myalloc_ = 0
61,obj->myalloc_
62,obj
63,myalloc_
64,0
65,obj->buf_ = 0
66,obj->buf_
67,obj
68,buf_
69,0
70,if (bufsize <= 0)
71,bufsize <= 0
72,bufsize
73,0
74,<empty>
75,obj->bufsize_ = 1024
76,obj->bufsize_
77,obj
78,bufsize_
79,1024
80,obj->growable_ = 1
81,obj->growable_
82,obj
83,growable_
84,1
85,else
86,<empty>
87,obj->bufsize_ = bufsize
88,obj->bufsize_
89,obj
90,bufsize_
91,bufsize
92,obj->growable_ = 0
93,obj->growable_
94,obj
95,growable_
96,0
97,if (buf)
98,buf
99,<empty>
100,obj->buf_ = (unsigned char *) buf
101,obj->buf_
102,obj
103,buf_
104,(unsigned char *) buf
105,unsigned char *
106,buf
107,else
108,<empty>
109,obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char))
110,obj->buf_
111,obj
112,buf_
113,jas_malloc(obj->bufsize_ * sizeof(char))
114,obj->bufsize_ * sizeof(char)
115,obj->bufsize_
116,obj
117,bufsize_
118,sizeof(char)
119,char
120,obj->myalloc_ = 1
121,obj->myalloc_
122,obj
123,myalloc_
124,1
125,if (!obj->buf_)
126,!obj->buf_
127,obj->buf_
128,obj
129,buf_
130,<empty>
131,jas_stream_close(stream)
132,stream
133,return 0;
134,0
135,if (bufsize > 0 && buf)
136,bufsize > 0 && buf
137,bufsize > 0
138,bufsize
139,0
140,buf
141,<empty>
142,obj->len_ = bufsize
143,obj->len_
144,obj
145,len_
146,bufsize
147,else
148,<empty>
149,obj->len_ = 0
150,obj->len_
151,obj
152,len_
153,0
154,obj->pos_ = 0
155,obj->pos_
156,obj
157,pos_
158,0
159,return stream;
160,stream
161,RET
162,char *buf
163,int bufsize
164,RET
165,jas_stream_t jas_stream_memopen (char *buf,int bufsize)
166,char *buf
167,int bufsize
168,<empty>
169,jas_stream_t* stream
170,jas_stream_memobj_t* obj
171,if (!(stream = jas_stream_create()))
172,!(stream = jas_stream_create())
173,stream = jas_stream_create()
174,stream
175,jas_stream_create()
176,<empty>
177,return 0;
178,0
179,stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
180,stream->openmode_
181,stream
182,openmode_
183,JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY
184,JAS_STREAM_READ | JAS_STREAM_WRITE
185,JAS_STREAM_READ
186,JAS_STREAM_WRITE
187,JAS_STREAM_BINARY
188,jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0)
189,stream
190,JAS_STREAM_FULLBUF
191,0
192,0
193,stream->ops_ = &jas_stream_memops
194,stream->ops_
195,stream
196,ops_
197,&jas_stream_memops
198,jas_stream_memops
199,if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t))))
200,!(obj = jas_malloc(sizeof(jas_stream_memobj_t)))
201,obj = jas_malloc(sizeof(jas_stream_memobj_t))
202,obj
203,jas_malloc(sizeof(jas_stream_memobj_t))
204,sizeof(jas_stream_memobj_t)
205,jas_stream_memobj_t
206,<empty>
207,jas_stream_destroy(stream)
208,stream
209,return 0;
210,0
211,stream->obj_ = (void *) obj
212,stream->obj_
213,stream
214,obj_
215,(void *) obj
216,void *
217,obj
218,obj->myalloc_ = 0
219,obj->myalloc_
220,obj
221,myalloc_
222,0
223,obj->buf_ = 0
224,obj->buf_
225,obj
226,buf_
227,0
228,if (bufsize <= 0)
229,bufsize <= 0
230,bufsize
231,0
232,<empty>
233,obj->bufsize_ = 1024
234,obj->bufsize_
235,obj
236,bufsize_
237,1024
238,obj->growable_ = 1
239,obj->growable_
240,obj
241,growable_
242,1
243,else
244,<empty>
245,obj->bufsize_ = bufsize
246,obj->bufsize_
247,obj
248,bufsize_
249,bufsize
250,obj->growable_ = 0
251,obj->growable_
252,obj
253,growable_
254,0
255,if (buf)
256,buf
257,<empty>
258,obj->buf_ = (unsigned char *) buf
259,obj->buf_
260,obj
261,buf_
262,(unsigned char *) buf
263,unsigned char *
264,buf
265,else
266,<empty>
267,obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char))
268,obj->buf_
269,obj
270,buf_
271,jas_malloc(obj->bufsize_ * sizeof(char))
272,obj->bufsize_ * sizeof(char)
273,obj->bufsize_
274,obj
275,bufsize_
276,sizeof(char)
277,char
278,obj->myalloc_ = 1
279,obj->myalloc_
280,obj
281,myalloc_
282,1
283,if (!obj->buf_)
284,!obj->buf_
285,obj->buf_
286,obj
287,buf_
288,<empty>
289,jas_stream_close(stream)
290,stream
291,return 0;
292,0
293,if (bufsize > 0 && buf)
294,bufsize > 0 && buf
295,bufsize > 0
296,bufsize
297,0
298,buf
299,<empty>
300,obj->len_ = bufsize
301,obj->len_
302,obj
303,len_
304,bufsize
305,else
306,<empty>
307,obj->len_ = 0
308,obj->len_
309,obj
310,len_
311,0
312,obj->pos_ = 0
313,obj->pos_
314,obj
315,pos_
316,0
317,return stream;
318,stream
319,RET
320,char *buf
321,int bufsize
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
jas_stream_t *jas_stream_memopen(char *buf, int bufsize) {
jas_stream_t *stream;
jas_stream_memobj_t *obj;
stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY;
jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0);
stream->ops_ = &jas_stream_memops;
stream->obj_ = (void *) obj;
obj->myalloc_ = 0;
obj->buf_ = 0;
if(bufsize <= 0)
obj->bufsize_ = 1024;
obj->growable_ = 1;
obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char));
obj->myalloc_ = 1;
obj->len_ = 0;
obj->pos_ = 0;
return stream;
=======================
