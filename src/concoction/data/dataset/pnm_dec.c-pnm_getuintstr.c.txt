-----label-----
0
-----code-----
static int pnm_getuintstr(jas_stream_t *in, uint_fast32_t *val)
{
	uint_fast32_t v;
	int c;

	/* Discard any leading whitespace. */
	do {
		if ((c = pnm_getc(in)) == EOF) {
			return -1;
		}
	} while (isspace(c));

	/* Parse the number. */
	v = 0;
	while (isdigit(c)) {
		v = 10 * v + c - '0';
		if ((c = pnm_getc(in)) < 0) {
			return -1;
		}
	}

	/* The number must be followed by whitespace. */
	if (!isspace(c)) {
		return -1;
	}

	if (val) {
		*val = v;
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
27,28
29,30
29,31
30,31
31,32
31,33
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
44,45
45,46
46,47
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
58,59
58,60
59,60
59,61
60,61
62,63
64,65
64,66
65,66
66,67
66,68
67,68
69,70
69,71
70,71
70,72
71,72
71,73
73,74
75,76
78,79
78,80
79,80
79,81
80,81
81,82
81,83
82,83
84,85
84,86
85,86
87,88
90,91
91,92
92,93
94,95
94,96
95,96
96,97
96,98
97,98
99,100
101,102
102,103
103,104
105,106
105,107
106,107
108,109
109,110
110,111
110,112
111,112
112,113
114,115
116,117
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,26,28,36,39,41,43,47,50,52,56,57,61,63,68,72,74,76,77,83,86,88,89,93,98,100,104,107,113,115,117
-----computeFrom-----
32,33
32,34
34,35
34,36
54,55
54,56
66,67
66,68
69,70
69,71
70,71
70,72
71,72
71,73
79,80
79,81
81,82
81,83
110,111
110,112
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int pnm_getuintstr(jas_stream_t *in, uint_fast32_t *val){	uint_fast32_t v;	int c;	/* Discard any leading whitespace. */	do {		if ((c = pnm_getc(in)) == EOF) {			return -1;		}	} while (isspace(c));	/* Parse the number. */	v = 0;	while (isdigit(c)) {		v = 10 * v + c - '0';		if ((c = pnm_getc(in)) < 0) {			return -1;		}	}	/* The number must be followed by whitespace. */	if (!isspace(c)) {		return -1;	}	if (val) {		*val = v;	}	return 0;}
static int
pnm_getuintstr(jas_stream_t *in, uint_fast32_t *val)
pnm_getuintstr
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
uint_fast32_t *val
uint_fast32_t
uint_fast32_t
*val
*
val
{	uint_fast32_t v;	int c;	/* Discard any leading whitespace. */	do {		if ((c = pnm_getc(in)) == EOF) {			return -1;		}	} while (isspace(c));	/* Parse the number. */	v = 0;	while (isdigit(c)) {		v = 10 * v + c - '0';		if ((c = pnm_getc(in)) < 0) {			return -1;		}	}	/* The number must be followed by whitespace. */	if (!isspace(c)) {		return -1;	}	if (val) {		*val = v;	}	return 0;}
uint_fast32_t v;
uint_fast32_t v;
uint_fast32_t
uint_fast32_t
v
v
int c;
int c;
int
c
c
do {		if ((c = pnm_getc(in)) == EOF) {			return -1;		}	} while (isspace(c));
{		if ((c = pnm_getc(in)) == EOF) {			return -1;		}	}
if ((c = pnm_getc(in)) == EOF) {			return -1;		}
(c = pnm_getc(in)) == EOF
(c = pnm_getc(in))
c = pnm_getc(in)
c
c
pnm_getc(in)
pnm_getc
pnm_getc
in
in
EOF
EOF
{			return -1;		}
return -1;
-1
1
isspace(c)
isspace
isspace
c
c
v = 0;
v = 0
v
v
0
while (isdigit(c)) {		v = 10 * v + c - '0';		if ((c = pnm_getc(in)) < 0) {			return -1;		}	}
isdigit(c)
isdigit
isdigit
c
c
{		v = 10 * v + c - '0';		if ((c = pnm_getc(in)) < 0) {			return -1;		}	}
v = 10 * v + c - '0';
v = 10 * v + c - '0'
v
v
10 * v + c - '0'
10 * v + c
10 * v
10
v
v
c
c
'0'
if ((c = pnm_getc(in)) < 0) {			return -1;		}
(c = pnm_getc(in)) < 0
(c = pnm_getc(in))
c = pnm_getc(in)
c
c
pnm_getc(in)
pnm_getc
pnm_getc
in
in
0
{			return -1;		}
return -1;
-1
1
if (!isspace(c)) {		return -1;	}
!isspace(c)
isspace(c)
isspace
isspace
c
c
{		return -1;	}
return -1;
-1
1
if (val) {		*val = v;	}
val
val
{		*val = v;	}
*val = v;
*val = v
*val
val
val
v
v
return 0;
0
-----joern-----
(76,81,0)
(20,10,0)
(74,111,0)
(12,77,0)
(7,84,0)
(106,45,0)
(34,36,0)
(50,20,0)
(40,60,0)
(80,28,0)
(23,27,0)
(66,105,0)
(27,60,0)
(13,69,0)
(71,105,0)
(45,5,0)
(19,84,0)
(12,107,0)
(5,68,0)
(53,80,0)
(12,41,0)
(7,35,0)
(11,40,0)
(51,2,0)
(68,62,0)
(102,105,0)
(85,15,0)
(52,45,0)
(96,105,0)
(1,28,0)
(43,10,0)
(37,15,0)
(111,74,0)
(41,24,0)
(63,103,0)
(36,61,0)
(31,60,0)
(32,72,0)
(100,34,0)
(6,105,0)
(103,60,0)
(111,62,0)
(38,60,0)
(44,77,0)
(48,28,0)
(9,36,0)
(73,103,0)
(75,41,0)
(31,94,0)
(108,102,0)
(54,101,0)
(94,95,0)
(45,62,0)
(2,35,0)
(22,107,0)
(35,20,0)
(95,49,0)
(94,31,0)
(56,81,0)
(21,38,0)
(57,64,0)
(90,15,0)
(17,105,0)
(26,52,0)
(4,17,0)
(46,19,0)
(27,32,0)
(42,20,0)
(0,105,0)
(77,17,0)
(69,76,0)
(3,68,0)
(39,95,0)
(12,103,0)
(49,5,0)
(8,77,0)
(25,31,0)
(68,5,0)
(32,64,0)
(45,52,0)
(5,45,0)
(33,80,0)
(77,60,0)
(104,88,0)
(35,14,0)
(35,103,0)
(69,60,0)
(7,12,0)
(109,69,0)
(41,60,0)
(12,20,0)
(5,49,0)
(101,15,0)
(20,60,0)
(86,107,0)
(78,15,0)
(40,55,0)
(91,74,0)
(84,18,0)
(49,95,0)
(107,60,0)
(110,38,0)
(12,27,0)
(24,61,0)
(65,105,0)
(107,102,0)
(59,12,0)
(12,34,0)
(103,101,0)
(88,68,0)
(55,40,0)
(72,28,0)
(81,76,0)
(89,15,0)
(83,72,0)
(99,31,0)
(10,15,0)
(87,105,0)
(97,57,0)
(95,94,0)
(93,41,0)
(92,24,0)
(72,32,0)
(30,105,0)
(29,111,0)
(16,27,0)
(12,15,0)
(79,15,0)
(76,69,0)
(67,40,0)
(70,34,0)
(12,38,0)
(95,62,0)
(24,28,0)
(28,82,0)
(47,15,0)
(68,88,0)
(98,58,0)
(34,60,0)
(38,57,0)
(52,26,1)
(77,44,1)
(10,43,1)
(86,55,1)
(91,29,1)
(38,21,1)
(24,92,1)
(7,84,1)
(92,41,1)
(45,62,1)
(57,97,1)
(94,31,1)
(104,3,1)
(95,94,1)
(22,86,1)
(83,27,1)
(73,49,1)
(75,80,1)
(28,48,1)
(27,16,1)
(50,42,1)
(56,76,1)
(46,49,1)
(12,41,1)
(72,28,1)
(35,2,1)
(76,69,1)
(40,11,1)
(44,8,1)
(31,60,1)
(72,83,1)
(20,50,1)
(59,30,1)
(35,20,1)
(68,88,1)
(4,77,1)
(70,100,1)
(102,108,1)
(24,28,1)
(107,60,1)
(12,59,1)
(100,24,1)
(74,91,1)
(1,81,1)
(34,70,1)
(9,34,1)
(40,60,1)
(12,20,1)
(12,38,1)
(80,53,1)
(80,28,1)
(59,87,1)
(12,103,1)
(49,95,1)
(21,110,1)
(69,60,1)
(13,109,1)
(32,72,1)
(49,5,1)
(12,34,1)
(29,81,1)
(7,12,1)
(84,19,1)
(67,36,1)
(43,20,1)
(11,67,1)
(5,45,1)
(93,75,1)
(54,103,1)
(99,39,1)
(27,60,1)
(103,60,1)
(12,27,1)
(97,38,1)
(108,107,1)
(81,76,1)
(12,107,1)
(103,63,1)
(110,32,1)
(5,68,1)
(63,73,1)
(111,62,1)
(41,60,1)
(59,71,1)
(12,77,1)
(48,1,1)
(38,60,1)
(45,52,1)
(33,28,1)
(34,60,1)
(109,10,1)
(36,9,1)
(7,35,1)
(17,4,1)
(25,99,1)
(30,102,1)
(16,23,1)
(42,101,1)
(87,17,1)
(51,111,1)
(20,60,1)
(107,22,1)
(55,40,1)
(8,55,1)
(88,104,1)
(19,46,1)
(95,62,1)
(101,54,1)
(31,25,1)
(69,13,1)
(106,68,1)
(35,103,1)
(53,33,1)
(68,62,1)
(23,80,1)
(26,106,1)
(71,0,1)
(41,93,1)
(111,74,1)
(81,56,1)
(3,95,1)
(77,60,1)
(67,57,1)
(0,55,1)
(2,51,1)
(33,111,1)
(9,80,2)
(67,81,2)
(100,80,2)
(7,35,2)
(32,72,2)
(68,95,2)
(59,81,2)
(20,49,2)
(93,80,2)
(36,80,2)
(104,95,2)
(53,111,2)
(41,60,2)
(44,55,2)
(111,74,2)
(17,55,2)
(84,49,2)
(68,62,2)
(11,81,2)
(95,62,2)
(40,81,2)
(106,68,2)
(45,62,2)
(12,107,2)
(12,27,2)
(1,81,2)
(55,111,2)
(75,80,2)
(54,49,2)
(35,111,2)
(2,111,2)
(88,95,2)
(92,80,2)
(12,81,2)
(12,20,2)
(5,95,2)
(20,60,2)
(50,49,2)
(87,55,2)
(38,60,2)
(77,55,2)
(72,28,2)
(80,81,2)
(41,80,2)
(63,49,2)
(22,55,2)
(32,80,2)
(4,55,2)
(3,95,2)
(48,81,2)
(102,55,2)
(12,34,2)
(111,62,2)
(110,80,2)
(40,60,2)
(33,111,2)
(30,55,2)
(28,81,2)
(72,80,2)
(81,76,2)
(29,81,2)
(107,55,2)
(80,28,2)
(11,111,2)
(51,111,2)
(71,55,2)
(5,68,2)
(12,38,2)
(94,31,2)
(91,81,2)
(52,68,2)
(26,68,2)
(35,103,2)
(49,5,2)
(77,60,2)
(19,49,2)
(7,12,2)
(35,20,2)
(23,80,2)
(103,49,2)
(56,49,2)
(69,49,2)
(95,94,2)
(69,60,2)
(12,111,2)
(21,80,2)
(53,81,2)
(55,81,2)
(59,111,2)
(86,55,2)
(76,69,2)
(83,80,2)
(57,80,2)
(8,55,2)
(34,60,2)
(27,80,2)
(34,80,2)
(13,49,2)
(49,95,2)
(24,28,2)
(67,111,2)
(73,49,2)
(40,111,2)
(0,55,2)
(38,80,2)
(43,49,2)
(12,103,2)
(101,49,2)
(46,49,2)
(74,81,2)
(107,60,2)
(111,81,2)
(109,49,2)
(42,49,2)
(108,55,2)
(33,81,2)
(27,60,2)
(68,88,2)
(76,49,2)
(16,80,2)
(81,49,2)
(55,40,2)
(45,52,2)
(70,80,2)
(24,80,2)
(12,41,2)
(7,84,2)
(31,60,2)
(103,60,2)
(97,80,2)
(45,68,2)
(10,49,2)
(80,111,2)
(5,45,2)
(12,77,2)
-----------------------------------
(0,abort()
(1,maxval)
(2,-1)
(3,in)
(4,3)
(5,pnm_getsintstr(in, &width)
(6,case PNM_TYPE_PBM:)
(7,RET)
(8,hdr)
(9,false)
(10,hdr->height = height)
(11,magic)
(12,return 0;)
(13,magic)
(14,)
(15,)
(16,maxval)
(17,hdr->numcmpts = 3)
(18,)
(19,-1)
(20,hdr->height)
(21,sgnd)
(22,numcmpts)
(23,hdr)
(24,hdr->maxval = maxval)
(25,magic)
(26,height)
(27,hdr->maxval)
(28,maxval = 1)
(29,in)
(30,break;)
(31,hdr->magic)
(32,hdr->maxval = -maxval)
(33,maxval)
(34,hdr->sgnd)
(35,return -1;)
(36,hdr->sgnd = false)
(37,width)
(38,hdr->sgnd)
(39,in)
(40,hdr->magic)
(41,hdr->maxval)
(42,hdr)
(43,height)
(44,numcmpts)
(45,pnm_getsintstr(in, &height)
(46,1)
(47,height)
(48,1)
(49,pnm_getint16(in, &hdr->magic)
(50,height)
(51,1)
(52,&height)
(53,0)
(54,width)
(55,pnm_type(hdr->magic)
(56,PNM_TYPE_PBM)
(57,hdr->sgnd = true)
(58,)
(59,0)
(60,pnm_hdr_t *hdr)
(61,)
(62,jas_stream_t *in)
(63,width)
(64,)
(65,default:)
(66,case PNM_TYPE_PPM:)
(67,hdr)
(68,pnm_getsintstr(in, &width)
(69,hdr->magic)
(70,sgnd)
(71,break;)
(72,-maxval)
(73,hdr)
(74,&maxval)
(75,hdr)
(76,pnm_type(hdr->magic)
(77,hdr->numcmpts)
(78,if (pnm_getint16(in, &hdr->magic)
(79,switch (pnm_type(hdr->magic)
(80,maxval < 0)
(81,pnm_type(hdr->magic)
(82,)
(83,maxval)
(84,return -1;)
(85,if (maxval < 0)
(86,hdr)
(87,break;)
(88,&width)
(89,maxval)
(90,if (pnm_type(hdr->magic)
(91,maxval)
(92,maxval)
(93,maxval)
(94,&hdr->magic)
(95,pnm_getint16(in, &hdr->magic)
(96,case PNM_TYPE_PGM:)
(97,true)
(98,if (pnm_getsintstr(in, &maxval)
(99,hdr)
(100,hdr)
(101,hdr->width = width)
(102,hdr->numcmpts = 1)
(103,hdr->width)
(104,width)
(105,)
(106,in)
(107,hdr->numcmpts)
(108,1)
(109,hdr)
(110,hdr)
(111,pnm_getsintstr(in, &maxval)
-----cfg-----
(66,70)
(67,66)
(70,72)
(7,19)
(16,26)
(16,24)
(17,16)
(19,17)
(23,72)
(24,23)
(26,19)
(26,28)
(28,32)
(32,39)
(32,57)
(35,48)
(37,35)
(38,37)
(39,38)
(45,32)
(45,53)
(46,45)
(48,46)
(52,72)
(53,52)
(56,61)
(56,67)
(56,70)
(57,56)
(60,72)
(61,60)
-----path-----
7,19,17,16,26,28,32,39,38,37,35,48,46,45,32,57,56,61,60,72
7,19,17,16,26,28,32,39,38,37,35,48,46,45,32,57,56,67,66,70,72
7,19,17,16,26,28,32,39,38,37,35,48,46,45,32,57,56,70,72
7,19,17,16,26,28,32,39,38,37,35,48,46,45,53,52,72
7,19,17,16,26,28,32,57,56,61,60,72
7,19,17,16,26,28,32,57,56,67,66,70,72
7,19,17,16,26,28,32,57,56,70,72
7,19,17,16,24,23,72
-----cfgNode-----
5,<global>
6,<empty>
7,int pnm_getuintstr (jas_stream_t *in,uint_fast32_t *val)
8,jas_stream_t *in
9,uint_fast32_t *val
10,<empty>
11,uint_fast32_t v
12,int c
13,do {
14,		if ((c = pnm_getc(in)) == EOF) {
15,			return -1;
16,		}
17,	} while (isspace(c));
18,<empty>
19,if ((c = pnm_getc(in)) == EOF)
20,(c = pnm_getc(in)) == EOF
21,c = pnm_getc(in)
22,c
23,pnm_getc(in)
24,in
25,EOF
26,<empty>
27,return -1;
28,-1
29,1
30,isspace(c)
31,c
32,v = 0
33,v
34,0
35,while (isdigit(c))
36,isdigit(c)
37,c
38,<empty>
39,v = 10 * v + c - '0'
40,v
41,10 * v + c - '0'
42,10 * v + c
43,10 * v
44,10
45,v
46,c
47,'0'
48,if ((c = pnm_getc(in)) < 0)
49,(c = pnm_getc(in)) < 0
50,c = pnm_getc(in)
51,c
52,pnm_getc(in)
53,in
54,0
55,<empty>
56,return -1;
57,-1
58,1
59,if (!isspace(c))
60,!isspace(c)
61,isspace(c)
62,c
63,<empty>
64,return -1;
65,-1
66,1
67,if (val)
68,val
69,<empty>
70,*val = v
71,*val
72,val
73,v
74,return 0;
75,0
76,RET
77,jas_stream_t *in
78,uint_fast32_t *val
79,RET
80,int pnm_getuintstr (jas_stream_t *in,uint_fast32_t *val)
81,jas_stream_t *in
82,uint_fast32_t *val
83,<empty>
84,uint_fast32_t v
85,int c
86,do {
87,		if ((c = pnm_getc(in)) == EOF) {
88,			return -1;
89,		}
90,	} while (isspace(c));
91,<empty>
92,if ((c = pnm_getc(in)) == EOF)
93,(c = pnm_getc(in)) == EOF
94,c = pnm_getc(in)
95,c
96,pnm_getc(in)
97,in
98,EOF
99,<empty>
100,return -1;
101,-1
102,1
103,isspace(c)
104,c
105,v = 0
106,v
107,0
108,while (isdigit(c))
109,isdigit(c)
110,c
111,<empty>
112,v = 10 * v + c - '0'
113,v
114,10 * v + c - '0'
115,10 * v + c
116,10 * v
117,10
118,v
119,c
120,'0'
121,if ((c = pnm_getc(in)) < 0)
122,(c = pnm_getc(in)) < 0
123,c = pnm_getc(in)
124,c
125,pnm_getc(in)
126,in
127,0
128,<empty>
129,return -1;
130,-1
131,1
132,if (!isspace(c))
133,!isspace(c)
134,isspace(c)
135,c
136,<empty>
137,return -1;
138,-1
139,1
140,if (val)
141,val
142,<empty>
143,*val = v
144,*val
145,val
146,v
147,return 0;
148,0
149,RET
150,jas_stream_t *in
151,uint_fast32_t *val
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
static int pnm_getuintstr(jas_stream_t *in, uint_fast32_t *val) {
uint_fast32_t v;
int c;
if((c = pnm_getc(in)) == EOF)
return -1;
=======================
