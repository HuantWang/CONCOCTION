-----label-----
0
-----code-----
jpc_fix_t jpc_mct_getsynweight(int mctid, int cmptno)
{
	jpc_fix_t synweight;

	synweight = JPC_FIX_ONE;
	switch (mctid) {
	case JPC_MCT_RCT:
		switch (cmptno) {
		case 0:
			synweight = jpc_dbltofix(sqrt(3.0));
			break;
		case 1:
			synweight = jpc_dbltofix(sqrt(0.6875));
			break;
		case 2:
			synweight = jpc_dbltofix(sqrt(0.6875));
			break;
		}
		break;
	case JPC_MCT_ICT:
		switch (cmptno) {
		case 0:
			synweight = jpc_dbltofix(sqrt(3.0000));
			break;
		case 1:
			synweight = jpc_dbltofix(sqrt(3.2584));
			break;
		case 2:
			synweight = jpc_dbltofix(sqrt(2.4755));
			break;
		}
		break;
#if 0
	default:
		synweight = JPC_FIX_ONE;
		break;
#endif
	}

	return synweight;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
8,9
10,11
10,12
12,13
14,15
14,16
14,17
14,18
15,16
16,17
16,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
30,32
30,33
30,34
30,35
30,36
31,32
32,33
34,35
34,36
35,36
37,38
37,39
37,40
37,41
37,42
37,43
37,44
37,45
37,46
38,39
40,41
41,42
41,43
42,43
44,45
44,46
45,46
47,48
47,49
48,49
52,53
54,55
55,56
55,57
56,57
58,59
58,60
59,60
61,62
61,63
62,63
66,67
68,69
69,70
69,71
70,71
72,73
72,74
73,74
75,76
75,77
76,77
81,82
82,83
84,85
84,86
85,86
87,88
87,89
87,90
87,91
87,92
87,93
87,94
87,95
87,96
88,89
90,91
91,92
91,93
92,93
94,95
94,96
95,96
97,98
97,99
98,99
102,103
104,105
105,106
105,107
106,107
108,109
108,110
109,110
111,112
111,113
112,113
116,117
118,119
119,120
119,121
120,121
122,123
122,124
123,124
125,126
125,127
126,127
131,132
132,133
-----nextToken-----
3,5,7,9,11,13,18,20,24,26,29,33,36,39,43,46,49,50,51,53,57,60,63,64,65,67,71,74,77,78,79,80,83,86,89,93,96,99,100,101,103,107,110,113,114,115,117,121,124,127,128,129,130,133
-----computeFrom-----
22,23
22,24
41,42
41,43
55,56
55,57
69,70
69,71
91,92
91,93
105,106
105,107
119,120
119,121
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;BreakStatement;CaseStatement;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;BreakStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
jpc_fix_t jpc_mct_getsynweight(int mctid, int cmptno){	jpc_fix_t synweight;	synweight = JPC_FIX_ONE;	switch (mctid) {	case JPC_MCT_RCT:		switch (cmptno) {		case 0:			synweight = jpc_dbltofix(sqrt(3.0));			break;		case 1:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		case 2:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		}		break;	case JPC_MCT_ICT:		switch (cmptno) {		case 0:			synweight = jpc_dbltofix(sqrt(3.0000));			break;		case 1:			synweight = jpc_dbltofix(sqrt(3.2584));			break;		case 2:			synweight = jpc_dbltofix(sqrt(2.4755));			break;		}		break;#if 0	default:		synweight = JPC_FIX_ONE;		break;#endif	}	return synweight;}
jpc_fix_t
jpc_fix_t
jpc_mct_getsynweight(int mctid, int cmptno)
jpc_mct_getsynweight
int mctid
int
mctid
mctid
int cmptno
int
cmptno
cmptno
{	jpc_fix_t synweight;	synweight = JPC_FIX_ONE;	switch (mctid) {	case JPC_MCT_RCT:		switch (cmptno) {		case 0:			synweight = jpc_dbltofix(sqrt(3.0));			break;		case 1:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		case 2:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		}		break;	case JPC_MCT_ICT:		switch (cmptno) {		case 0:			synweight = jpc_dbltofix(sqrt(3.0000));			break;		case 1:			synweight = jpc_dbltofix(sqrt(3.2584));			break;		case 2:			synweight = jpc_dbltofix(sqrt(2.4755));			break;		}		break;#if 0	default:		synweight = JPC_FIX_ONE;		break;#endif	}	return synweight;}
jpc_fix_t synweight;
jpc_fix_t synweight;
jpc_fix_t
jpc_fix_t
synweight
synweight
synweight = JPC_FIX_ONE;
synweight = JPC_FIX_ONE
synweight
synweight
JPC_FIX_ONE
JPC_FIX_ONE
switch (mctid) {	case JPC_MCT_RCT:		switch (cmptno) {		case 0:			synweight = jpc_dbltofix(sqrt(3.0));			break;		case 1:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		case 2:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		}		break;	case JPC_MCT_ICT:		switch (cmptno) {		case 0:			synweight = jpc_dbltofix(sqrt(3.0000));			break;		case 1:			synweight = jpc_dbltofix(sqrt(3.2584));			break;		case 2:			synweight = jpc_dbltofix(sqrt(2.4755));			break;		}		break;#if 0	default:		synweight = JPC_FIX_ONE;		break;#endif	}
mctid
mctid
{	case JPC_MCT_RCT:		switch (cmptno) {		case 0:			synweight = jpc_dbltofix(sqrt(3.0));			break;		case 1:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		case 2:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		}		break;	case JPC_MCT_ICT:		switch (cmptno) {		case 0:			synweight = jpc_dbltofix(sqrt(3.0000));			break;		case 1:			synweight = jpc_dbltofix(sqrt(3.2584));			break;		case 2:			synweight = jpc_dbltofix(sqrt(2.4755));			break;		}		break;#if 0	default:		synweight = JPC_FIX_ONE;		break;#endif	}
case JPC_MCT_RCT:
JPC_MCT_RCT
JPC_MCT_RCT
switch (cmptno) {		case 0:			synweight = jpc_dbltofix(sqrt(3.0));			break;		case 1:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		case 2:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		}
cmptno
cmptno
{		case 0:			synweight = jpc_dbltofix(sqrt(3.0));			break;		case 1:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		case 2:			synweight = jpc_dbltofix(sqrt(0.6875));			break;		}
case 0:
0
synweight = jpc_dbltofix(sqrt(3.0));
synweight = jpc_dbltofix(sqrt(3.0))
synweight
synweight
jpc_dbltofix(sqrt(3.0))
jpc_dbltofix
jpc_dbltofix
sqrt(3.0)
sqrt
sqrt
3.0
break;
case 1:
1
synweight = jpc_dbltofix(sqrt(0.6875));
synweight = jpc_dbltofix(sqrt(0.6875))
synweight
synweight
jpc_dbltofix(sqrt(0.6875))
jpc_dbltofix
jpc_dbltofix
sqrt(0.6875)
sqrt
sqrt
0.6875
break;
case 2:
2
synweight = jpc_dbltofix(sqrt(0.6875));
synweight = jpc_dbltofix(sqrt(0.6875))
synweight
synweight
jpc_dbltofix(sqrt(0.6875))
jpc_dbltofix
jpc_dbltofix
sqrt(0.6875)
sqrt
sqrt
0.6875
break;
break;
case JPC_MCT_ICT:
JPC_MCT_ICT
JPC_MCT_ICT
switch (cmptno) {		case 0:			synweight = jpc_dbltofix(sqrt(3.0000));			break;		case 1:			synweight = jpc_dbltofix(sqrt(3.2584));			break;		case 2:			synweight = jpc_dbltofix(sqrt(2.4755));			break;		}
cmptno
cmptno
{		case 0:			synweight = jpc_dbltofix(sqrt(3.0000));			break;		case 1:			synweight = jpc_dbltofix(sqrt(3.2584));			break;		case 2:			synweight = jpc_dbltofix(sqrt(2.4755));			break;		}
case 0:
0
synweight = jpc_dbltofix(sqrt(3.0000));
synweight = jpc_dbltofix(sqrt(3.0000))
synweight
synweight
jpc_dbltofix(sqrt(3.0000))
jpc_dbltofix
jpc_dbltofix
sqrt(3.0000)
sqrt
sqrt
3.0000
break;
case 1:
1
synweight = jpc_dbltofix(sqrt(3.2584));
synweight = jpc_dbltofix(sqrt(3.2584))
synweight
synweight
jpc_dbltofix(sqrt(3.2584))
jpc_dbltofix
jpc_dbltofix
sqrt(3.2584)
sqrt
sqrt
3.2584
break;
case 2:
2
synweight = jpc_dbltofix(sqrt(2.4755));
synweight = jpc_dbltofix(sqrt(2.4755))
synweight
synweight
jpc_dbltofix(sqrt(2.4755))
jpc_dbltofix
jpc_dbltofix
sqrt(2.4755)
sqrt
sqrt
2.4755
break;
break;
return synweight;
synweight
synweight
-----joern-----
(145,78,0)
(135,62,0)
(27,93,0)
(37,142,0)
(62,106,0)
(114,19,0)
(79,156,0)
(29,124,0)
(42,19,0)
(26,107,0)
(44,110,0)
(101,156,0)
(118,3,0)
(26,97,0)
(88,52,0)
(57,134,0)
(108,133,0)
(32,48,0)
(106,120,0)
(68,92,0)
(81,133,0)
(134,81,0)
(34,21,0)
(139,147,0)
(76,129,0)
(87,79,0)
(15,93,0)
(11,157,0)
(67,19,0)
(59,125,0)
(151,93,0)
(95,12,0)
(133,81,0)
(92,142,0)
(14,90,0)
(52,125,0)
(85,101,0)
(50,19,0)
(149,97,0)
(43,115,0)
(157,19,0)
(107,32,0)
(100,96,0)
(98,147,0)
(20,75,0)
(49,19,0)
(17,12,0)
(13,74,0)
(24,105,0)
(87,124,0)
(53,12,0)
(127,71,0)
(23,127,0)
(154,46,0)
(18,106,0)
(9,66,0)
(48,32,0)
(144,125,0)
(125,90,0)
(51,96,0)
(40,117,0)
(154,60,0)
(69,19,0)
(5,90,0)
(47,19,0)
(140,46,0)
(138,92,0)
(60,154,0)
(1,149,0)
(82,109,0)
(134,151,0)
(107,150,0)
(31,127,0)
(103,59,0)
(74,31,0)
(150,142,0)
(10,119,0)
(128,142,0)
(72,157,0)
(130,19,0)
(59,152,0)
(122,39,0)
(80,120,0)
(8,46,0)
(22,118,0)
(70,53,0)
(3,117,0)
(153,7,0)
(51,134,0)
(153,120,0)
(121,153,0)
(77,127,0)
(2,120,0)
(28,75,0)
(28,17,0)
(117,3,0)
(31,90,0)
(41,15,0)
(36,80,0)
(141,87,0)
(142,128,0)
(155,143,0)
(79,92,0)
(116,79,0)
(78,150,0)
(87,119,0)
(96,51,0)
(152,59,0)
(75,28,0)
(9,12,0)
(151,53,0)
(48,21,0)
(142,12,0)
(93,15,0)
(111,80,0)
(89,153,0)
(134,51,0)
(94,116,0)
(62,6,0)
(119,12,0)
(150,78,0)
(46,157,0)
(115,6,0)
(95,53,0)
(106,136,0)
(136,80,0)
(99,110,0)
(80,111,0)
(55,72,0)
(86,7,0)
(156,81,0)
(111,71,0)
(26,119,0)
(109,72,0)
(91,95,0)
(46,140,0)
(39,154,0)
(118,142,0)
(45,128,0)
(104,136,0)
(110,5,0)
(119,52,0)
(110,105,0)
(143,7,0)
(102,39,0)
(115,7,0)
(129,120,0)
(65,19,0)
(33,7,0)
(118,151,0)
(102,6,0)
(25,19,0)
(5,110,0)
(127,31,0)
(148,19,0)
(151,134,0)
(74,58,0)
(53,151,0)
(128,5,0)
(38,110,0)
(54,9,0)
(4,150,0)
(92,79,0)
(140,71,0)
(129,105,0)
(66,107,0)
(136,104,0)
(39,102,0)
(116,12,0)
(92,68,0)
(97,26,0)
(64,127,0)
(80,136,0)
(107,26,0)
(154,39,0)
(136,106,0)
(75,5,0)
(79,87,0)
(61,31,0)
(93,119,0)
(115,125,0)
(131,19,0)
(125,115,0)
(104,19,0)
(52,119,0)
(58,74,0)
(81,12,0)
(151,118,0)
(56,66,0)
(120,129,0)
(32,107,0)
(147,72,0)
(152,9,0)
(0,156,0)
(39,157,0)
(159,24,0)
(66,12,0)
(133,31,0)
(158,102,0)
(126,68,0)
(112,111,0)
(79,116,0)
(113,72,0)
(63,19,0)
(93,151,0)
(46,154,0)
(84,5,0)
(35,19,0)
(21,48,0)
(60,19,0)
(156,101,0)
(17,116,0)
(137,81,0)
(120,19,0)
(110,7,0)
(32,81,0)
(16,140,0)
(106,62,0)
(24,157,0)
(107,66,0)
(3,118,0)
(123,115,0)
(97,149,0)
(73,115,0)
(150,107,0)
(124,87,0)
(132,32,0)
(127,7,0)
(156,79,0)
(58,95,0)
(83,26,0)
(30,17,0)
(157,24,0)
(7,33,1)
(81,133,1)
(134,57,1)
(96,100,1)
(13,17,1)
(28,75,1)
(125,115,1)
(106,18,1)
(73,144,1)
(62,6,1)
(111,71,1)
(134,51,1)
(135,80,1)
(21,34,1)
(144,31,1)
(93,15,1)
(140,16,1)
(113,125,1)
(46,8,1)
(110,7,1)
(115,123,1)
(60,154,1)
(117,40,1)
(1,32,1)
(92,68,1)
(38,84,1)
(79,92,1)
(78,145,1)
(54,152,1)
(70,116,1)
(155,147,1)
(4,78,1)
(143,7,1)
(108,137,1)
(151,93,1)
(132,48,1)
(88,10,1)
(24,105,1)
(76,2,1)
(18,62,1)
(80,36,1)
(149,1,1)
(59,103,1)
(126,94,1)
(22,3,1)
(74,13,1)
(48,21,1)
(158,46,1)
(46,157,1)
(137,142,1)
(5,110,1)
(24,159,1)
(32,132,1)
(79,156,1)
(139,72,1)
(87,124,1)
(102,6,1)
(147,72,1)
(3,117,1)
(15,41,1)
(118,142,1)
(143,155,1)
(52,125,1)
(128,45,1)
(92,142,1)
(110,44,1)
(154,39,1)
(152,59,1)
(119,52,1)
(128,5,1)
(59,125,1)
(100,118,1)
(86,60,1)
(97,149,1)
(8,140,1)
(103,95,1)
(109,82,1)
(89,121,1)
(39,157,1)
(129,76,1)
(10,81,1)
(151,134,1)
(112,120,1)
(80,111,1)
(9,54,1)
(141,124,1)
(93,119,1)
(115,7,1)
(20,66,1)
(153,7,1)
(116,79,1)
(153,89,1)
(46,140,1)
(55,113,1)
(26,119,1)
(32,81,1)
(122,102,1)
(80,120,1)
(127,71,1)
(87,119,1)
(138,68,1)
(58,74,1)
(101,85,1)
(26,97,1)
(16,157,1)
(159,11,1)
(17,116,1)
(134,81,1)
(107,150,1)
(106,62,1)
(57,51,1)
(31,127,1)
(85,92,1)
(43,73,1)
(140,71,1)
(123,43,1)
(79,87,1)
(0,101,1)
(87,141,1)
(52,88,1)
(72,55,1)
(37,147,1)
(82,9,1)
(121,7,1)
(127,23,1)
(150,142,1)
(34,150,1)
(75,5,1)
(139,109,1)
(27,15,1)
(26,83,1)
(53,151,1)
(41,134,1)
(66,107,1)
(121,143,1)
(17,30,1)
(33,86,1)
(84,153,1)
(146,153,1)
(23,77,1)
(40,70,1)
(72,157,1)
(29,156,1)
(92,138,1)
(56,53,1)
(11,104,1)
(104,136,1)
(124,29,1)
(99,38,1)
(61,5,1)
(62,135,1)
(156,81,1)
(102,158,1)
(39,122,1)
(39,102,1)
(156,101,1)
(153,120,1)
(127,7,1)
(106,120,1)
(83,97,1)
(136,80,1)
(98,139,1)
(95,91,1)
(133,108,1)
(142,128,1)
(77,64,1)
(147,98,1)
(32,48,1)
(68,126,1)
(107,26,1)
(156,0,1)
(151,118,1)
(133,31,1)
(118,22,1)
(157,24,1)
(136,106,1)
(115,6,1)
(154,46,1)
(64,61,1)
(44,99,1)
(91,58,1)
(93,27,1)
(129,105,1)
(109,72,1)
(107,32,1)
(110,105,1)
(150,78,1)
(111,112,1)
(75,20,1)
(145,56,1)
(150,4,1)
(45,37,1)
(118,3,1)
(9,66,1)
(51,96,1)
(95,53,1)
(120,129,1)
(36,111,1)
(94,119,1)
(30,28,1)
(74,31,1)
(23,153,2)
(93,15,2)
(125,153,2)
(129,105,2)
(97,147,2)
(52,147,2)
(89,153,2)
(59,125,2)
(74,31,2)
(5,153,2)
(54,147,2)
(64,153,2)
(26,97,2)
(144,153,2)
(60,154,2)
(40,147,2)
(17,116,2)
(80,111,2)
(150,147,2)
(95,53,2)
(82,147,2)
(1,147,2)
(9,66,2)
(150,142,2)
(39,46,2)
(120,129,2)
(66,107,2)
(0,147,2)
(92,68,2)
(46,140,2)
(152,147,2)
(18,80,2)
(48,21,2)
(142,147,2)
(102,46,2)
(138,147,2)
(153,7,2)
(48,147,2)
(110,105,2)
(132,147,2)
(73,153,2)
(99,153,2)
(59,147,2)
(31,127,2)
(103,147,2)
(20,147,2)
(125,115,2)
(136,80,2)
(72,157,2)
(38,153,2)
(92,142,2)
(21,147,2)
(3,147,2)
(115,153,2)
(143,153,2)
(122,46,2)
(83,147,2)
(118,3,2)
(106,62,2)
(75,5,2)
(140,71,2)
(154,39,2)
(98,147,2)
(61,153,2)
(39,102,2)
(39,157,2)
(27,147,2)
(133,31,2)
(152,59,2)
(3,117,2)
(34,147,2)
(52,125,2)
(110,153,2)
(13,147,2)
(145,147,2)
(66,147,2)
(81,147,2)
(87,147,2)
(101,147,2)
(31,153,2)
(98,153,2)
(119,52,2)
(79,87,2)
(93,119,2)
(134,51,2)
(58,74,2)
(116,79,2)
(139,153,2)
(127,153,2)
(115,6,2)
(127,7,2)
(41,147,2)
(100,147,2)
(79,147,2)
(74,147,2)
(136,106,2)
(137,147,2)
(147,153,2)
(32,81,2)
(28,75,2)
(78,147,2)
(46,157,2)
(53,147,2)
(84,153,2)
(104,136,2)
(156,81,2)
(106,80,2)
(32,147,2)
(119,147,2)
(94,147,2)
(111,71,2)
(26,147,2)
(72,153,2)
(85,147,2)
(107,26,2)
(157,24,2)
(26,119,2)
(77,153,2)
(135,80,2)
(154,46,2)
(126,147,2)
(128,147,2)
(28,147,2)
(147,72,2)
(58,147,2)
(134,81,2)
(156,147,2)
(88,147,2)
(141,147,2)
(91,147,2)
(62,80,2)
(121,153,2)
(107,147,2)
(81,133,2)
(151,118,2)
(87,124,2)
(62,6,2)
(22,147,2)
(118,142,2)
(51,147,2)
(107,150,2)
(87,119,2)
(156,101,2)
(32,48,2)
(24,105,2)
(4,147,2)
(17,147,2)
(153,153,2)
(57,147,2)
(109,72,2)
(51,96,2)
(96,147,2)
(147,147,2)
(45,147,2)
(108,147,2)
(9,147,2)
(149,147,2)
(95,147,2)
(93,147,2)
(116,147,2)
(79,156,2)
(134,147,2)
(158,46,2)
(37,147,2)
(155,153,2)
(109,147,2)
(55,153,2)
(29,147,2)
(5,110,2)
(151,147,2)
(53,151,2)
(10,147,2)
(110,7,2)
(80,120,2)
(117,147,2)
(133,147,2)
(75,147,2)
(79,92,2)
(139,147,2)
(153,120,2)
(70,147,2)
(92,147,2)
(43,153,2)
(124,147,2)
(106,120,2)
(143,7,2)
(113,153,2)
(107,32,2)
(102,6,2)
(151,134,2)
(15,147,2)
(44,153,2)
(97,149,2)
(127,71,2)
(150,78,2)
(30,147,2)
(68,147,2)
(128,5,2)
(118,147,2)
(142,128,2)
(56,147,2)
(151,93,2)
(123,153,2)
(115,7,2)
-----------------------------------
(0,g)
(1,0.08131)
(2,numrows)
(3,jpc_dbltofix(-0.16875)
(4,r)
(5,c0p = jas_matrix_getref(c0, i, 0)
(6,jas_matrix_t *c2)
(7,i = 0)
(8,numcols)
(9,*c2p++ = v)
(10,b)
(11,numcols)
(12,)
(13,c1p)
(14,for (j = numcols; j > 0; --j)
(15,jpc_dbltofix(0.5)
(16,c1)
(17,*c0p++ = y)
(18,numrows)
(19,)
(20,c0p)
(21,-0.41869)
(22,r)
(23,0)
(24,jas_matrix_numcols(c0)
(25,y)
(26,jpc_fix_mul(jpc_dbltofix(-0.08131)
(27,b)
(28,*c0p++)
(29,0.114)
(30,y)
(31,c1p = jas_matrix_getref(c1, i, 0)
(32,jpc_fix_mul(jpc_dbltofix(-0.41869)
(33,0)
(34,0.41869)
(35,numrows)
(36,numrows)
(37,r)
(38,c0)
(39,jas_matrix_numcols(c2)
(40,0.16875)
(41,0.5)
(42,i)
(43,i)
(44,0)
(45,c0p)
(46,jas_matrix_numcols(c1)
(47,r)
(48,jpc_dbltofix(-0.41869)
(49,numcols)
(50,v)
(51,jpc_dbltofix(-0.33126)
(52,*c2p)
(53,u = jpc_fix_add3(jpc_fix_mul(jpc_dbltofix(-0.16875)
(54,v)
(55,numcols)
(56,v)
(57,g)
(58,*c1p++)
(59,c2p++)
(60,assert(jas_matrix_numcols(c1)
(61,c1p)
(62,jas_matrix_numrows(c2)
(63,g)
(64,c1)
(65,u)
(66,v = jpc_fix_add3(jpc_fix_mul(jpc_dbltofix(0.5)
(67,c2p)
(68,jpc_dbltofix(0.299)
(69,j)
(70,u)
(71,jas_matrix_t *c1)
(72,j = numcols)
(73,c2)
(74,c1p++)
(75,c0p++)
(76,c0)
(77,i)
(78,jpc_dbltofix(0.5)
(79,jpc_fix_add3(jpc_fix_mul(jpc_dbltofix(0.299)
(80,jas_matrix_numrows(c1)
(81,g = *c1p)
(82,j)
(83,b)
(84,c0p)
(85,0.587)
(86,i)
(87,jpc_fix_mul(jpc_dbltofix(0.114)
(88,c2p)
(89,numrows)
(90,)
(91,u)
(92,jpc_fix_mul(jpc_dbltofix(0.299)
(93,jpc_fix_mul(jpc_dbltofix(0.5)
(94,y)
(95,*c1p++ = u)
(96,-0.33126)
(97,jpc_dbltofix(-0.08131)
(98,0)
(99,i)
(100,0.33126)
(101,jpc_dbltofix(0.587)
(102,jas_matrix_numcols(c2)
(103,c2p)
(104,assert(jas_matrix_numrows(c1)
(105,jas_matrix_t *c0)
(106,jas_matrix_numrows(c2)
(107,jpc_fix_add3(jpc_fix_mul(jpc_dbltofix(0.5)
(108,c1p)
(109,--j)
(110,jas_matrix_getref(c0, i, 0)
(111,jas_matrix_numrows(c1)
(112,c1)
(113,j)
(114,c0p)
(115,jas_matrix_getref(c2, i, 0)
(116,y = jpc_fix_add3(jpc_fix_mul(jpc_dbltofix(0.299)
(117,-0.16875)
(118,jpc_fix_mul(jpc_dbltofix(-0.16875)
(119,b = *c2p)
(120,numrows = jas_matrix_numrows(c0)
(121,i)
(122,numcols)
(123,0)
(124,jpc_dbltofix(0.114)
(125,c2p = jas_matrix_getref(c2, i, 0)
(126,0.299)
(127,jas_matrix_getref(c1, i, 0)
(128,*c0p)
(129,jas_matrix_numrows(c0)
(130,b)
(131,for (i = 0; i < numrows; ++i)
(132,g)
(133,*c1p)
(134,jpc_fix_mul(jpc_dbltofix(-0.33126)
(135,c2)
(136,jas_matrix_numrows(c1)
(137,g)
(138,r)
(139,j)
(140,jas_matrix_numcols(c1)
(141,b)
(142,r = *c0p)
(143,++i)
(144,c2p)
(145,0.5)
(146,RET)
(147,j > 0)
(148,c1p)
(149,-0.08131)
(150,jpc_fix_mul(jpc_dbltofix(0.5)
(151,jpc_fix_add3(jpc_fix_mul(jpc_dbltofix(-0.16875)
(152,*c2p++)
(153,i < numrows)
(154,jas_matrix_numcols(c1)
(155,i)
(156,jpc_fix_mul(jpc_dbltofix(0.587)
(157,numcols = jas_matrix_numcols(c0)
(158,c2)
(159,c0)
-----cfg-----
(33,78)
(65,63)
(66,65)
(35,33)
(36,35)
(71,78)
(7,12)
(41,78)
(73,71)
(74,73)
(43,41)
(12,28)
(12,36)
(12,44)
(12,78)
(12,58)
(12,66)
(12,74)
(44,43)
(78,80)
(55,78)
(25,78)
(57,55)
(58,57)
(27,25)
(28,27)
(63,78)
-----path-----
7,12,28,27,25,78,80
7,12,36,35,33,78,80
7,12,44,43,41,78,80
7,12,78,80
7,12,58,57,55,78,80
7,12,66,65,63,78,80
7,12,74,73,71,78,80
-----cfgNode-----
5,<global>
6,<empty>
7,jpc_fix_t jpc_mct_getsynweight (int mctid,int cmptno)
8,int mctid
9,int cmptno
10,<empty>
11,jpc_fix_t synweight
12,synweight = JPC_FIX_ONE
13,synweight
14,JPC_FIX_ONE
15,switch(mctid)
16,mctid
17,<empty>
18,case JPC_MCT_RCT:
19,JPC_MCT_RCT
20,switch(cmptno)
21,cmptno
22,<empty>
23,case 0:
24,0
25,synweight = jpc_dbltofix(sqrt(3.0))
26,synweight
27,jpc_dbltofix(sqrt(3.0))
28,sqrt(3.0)
29,3.0
30,break;
31,case 1:
32,1
33,synweight = jpc_dbltofix(sqrt(0.6875))
34,synweight
35,jpc_dbltofix(sqrt(0.6875))
36,sqrt(0.6875)
37,0.6875
38,break;
39,case 2:
40,2
41,synweight = jpc_dbltofix(sqrt(0.6875))
42,synweight
43,jpc_dbltofix(sqrt(0.6875))
44,sqrt(0.6875)
45,0.6875
46,break;
47,break;
48,case JPC_MCT_ICT:
49,JPC_MCT_ICT
50,switch(cmptno)
51,cmptno
52,<empty>
53,case 0:
54,0
55,synweight = jpc_dbltofix(sqrt(3.0000))
56,synweight
57,jpc_dbltofix(sqrt(3.0000))
58,sqrt(3.0000)
59,3.0000
60,break;
61,case 1:
62,1
63,synweight = jpc_dbltofix(sqrt(3.2584))
64,synweight
65,jpc_dbltofix(sqrt(3.2584))
66,sqrt(3.2584)
67,3.2584
68,break;
69,case 2:
70,2
71,synweight = jpc_dbltofix(sqrt(2.4755))
72,synweight
73,jpc_dbltofix(sqrt(2.4755))
74,sqrt(2.4755)
75,2.4755
76,break;
77,break;
78,return synweight;
79,synweight
80,RET
81,int mctid
82,int cmptno
83,RET
84,jpc_fix_t jpc_mct_getsynweight (int mctid,int cmptno)
85,int mctid
86,int cmptno
87,<empty>
88,jpc_fix_t synweight
89,synweight = JPC_FIX_ONE
90,synweight
91,JPC_FIX_ONE
92,switch(mctid)
93,mctid
94,<empty>
95,case JPC_MCT_RCT:
96,JPC_MCT_RCT
97,switch(cmptno)
98,cmptno
99,<empty>
100,case 0:
101,0
102,synweight = jpc_dbltofix(sqrt(3.0))
103,synweight
104,jpc_dbltofix(sqrt(3.0))
105,sqrt(3.0)
106,3.0
107,break;
108,case 1:
109,1
110,synweight = jpc_dbltofix(sqrt(0.6875))
111,synweight
112,jpc_dbltofix(sqrt(0.6875))
113,sqrt(0.6875)
114,0.6875
115,break;
116,case 2:
117,2
118,synweight = jpc_dbltofix(sqrt(0.6875))
119,synweight
120,jpc_dbltofix(sqrt(0.6875))
121,sqrt(0.6875)
122,0.6875
123,break;
124,break;
125,case JPC_MCT_ICT:
126,JPC_MCT_ICT
127,switch(cmptno)
128,cmptno
129,<empty>
130,case 0:
131,0
132,synweight = jpc_dbltofix(sqrt(3.0000))
133,synweight
134,jpc_dbltofix(sqrt(3.0000))
135,sqrt(3.0000)
136,3.0000
137,break;
138,case 1:
139,1
140,synweight = jpc_dbltofix(sqrt(3.2584))
141,synweight
142,jpc_dbltofix(sqrt(3.2584))
143,sqrt(3.2584)
144,3.2584
145,break;
146,case 2:
147,2
148,synweight = jpc_dbltofix(sqrt(2.4755))
149,synweight
150,jpc_dbltofix(sqrt(2.4755))
151,sqrt(2.4755)
152,2.4755
153,break;
154,break;
155,return synweight;
156,synweight
157,RET
158,int mctid
159,int cmptno
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
jpc_fix_t jpc_mct_getsynweight(int mctid, int cmptno) {
jpc_fix_t synweight;
synweight = JPC_FIX_ONE;
switch(mctid)
synweight = jpc_dbltofix(sqrt(0.6875));
return synweight;
=======================
