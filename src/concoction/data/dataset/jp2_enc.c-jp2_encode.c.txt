-----label-----
0
-----code-----
int jp2_encode(jas_image_t *image, jas_stream_t *out, char *optstr)
{
	jp2_box_t *box;
	jp2_ftyp_t *ftyp;
	jp2_ihdr_t *ihdr;
	jas_stream_t *tmpstream;
	int allcmptssame;
	jp2_bpcc_t *bpcc;
	long len;
	uint_fast16_t cmptno;
	jp2_colr_t *colr;
	char buf[4096];
	uint_fast32_t overhead;
	jp2_cdefchan_t *cdefchanent;
	jp2_cdef_t *cdef;
	int i;
	uint_fast32_t typeasoc;
jas_iccprof_t *iccprof;
jas_stream_t *iccstream;
int pos;
int needcdef;
int prec;
int sgnd;

	box = 0;
	tmpstream = 0;

	allcmptssame = 1;
	sgnd = jas_image_cmptsgnd(image, 0);
	prec = jas_image_cmptprec(image, 0);
	for (i = 1; i < jas_image_numcmpts(image); ++i) {
		if (jas_image_cmptsgnd(image, i) != sgnd ||
		  jas_image_cmptprec(image, i) != prec) {
			allcmptssame = 0;
			break;
		}
	}

	/* Output the signature box. */

	if (!(box = jp2_box_create(JP2_BOX_JP))) {
		goto error;
	}
	box->data.jp.magic = JP2_JP_MAGIC;
	if (jp2_box_put(box, out)) {
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/* Output the file type box. */

	if (!(box = jp2_box_create(JP2_BOX_FTYP))) {
		goto error;
	}
	ftyp = &box->data.ftyp;
	ftyp->majver = JP2_FTYP_MAJVER;
	ftyp->minver = JP2_FTYP_MINVER;
	ftyp->numcompatcodes = 1;
	ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE;
	if (jp2_box_put(box, out)) {
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/*
	 * Generate the data portion of the JP2 header box.
	 * We cannot simply output the header for this box
	 * since we do not yet know the correct value for the length
	 * field.
	 */

	if (!(tmpstream = jas_stream_memopen(0, 0))) {
		goto error;
	}

	/* Generate image header box. */

	if (!(box = jp2_box_create(JP2_BOX_IHDR))) {
		goto error;
	}
	ihdr = &box->data.ihdr;
	ihdr->width = jas_image_width(image);
	ihdr->height = jas_image_height(image);
	ihdr->numcmpts = jas_image_numcmpts(image);
	ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),
	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL;
	ihdr->comptype = JP2_IHDR_COMPTYPE;
	ihdr->csunk = 0;
	ihdr->ipr = 0;
	if (jp2_box_put(box, tmpstream)) {
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/* Generate bits per component box. */

	if (!allcmptssame) {
		if (!(box = jp2_box_create(JP2_BOX_BPCC))) {
			goto error;
		}
		bpcc = &box->data.bpcc;
		bpcc->numcmpts = jas_image_numcmpts(image);
		if (!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *
		  sizeof(uint_fast8_t)))) {
			goto error;
		}
		for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {
			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,
			  cmptno), jas_image_cmptprec(image, cmptno));
		}
		if (jp2_box_put(box, tmpstream)) {
			goto error;
		}
		jp2_box_destroy(box);
		box = 0;
	}

	/* Generate color specification box. */

	if (!(box = jp2_box_create(JP2_BOX_COLR))) {
		goto error;
	}
	colr = &box->data.colr;
	switch (jas_image_clrspc(image)) {
	case JAS_CLRSPC_SRGB:
	case JAS_CLRSPC_SYCBCR:
	case JAS_CLRSPC_SGRAY:
		colr->method = JP2_COLR_ENUM;
		colr->csid = clrspctojp2(jas_image_clrspc(image));
		colr->pri = JP2_COLR_PRI;
		colr->approx = 0;
		break;
	default:
		colr->method = JP2_COLR_ICC;
		colr->pri = JP2_COLR_PRI;
		colr->approx = 0;
		iccprof = jas_iccprof_createfromcmprof(jas_image_cmprof(image));
		assert(iccprof);
		iccstream = jas_stream_memopen(0, 0);
		assert(iccstream);
		if (jas_iccprof_save(iccprof, iccstream))
			abort();
		if ((pos = jas_stream_tell(iccstream)) < 0)
			abort();
		colr->iccplen = pos;
		colr->iccp = jas_malloc(pos);
		assert(colr->iccp);
		jas_stream_rewind(iccstream);
		if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) != colr->iccplen)
			abort();
		jas_stream_close(iccstream);
		jas_iccprof_destroy(iccprof);
		break;
	}
	if (jp2_box_put(box, tmpstream)) {
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	needcdef = 1;
	switch (jas_clrspc_fam(jas_image_clrspc(image))) {
	case JAS_CLRSPC_FAM_RGB:
		if (jas_image_cmpttype(image, 0) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&
		  jas_image_cmpttype(image, 1) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&
		  jas_image_cmpttype(image, 2) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))
			needcdef = 0;
		break;
	case JAS_CLRSPC_FAM_YCBCR:
		if (jas_image_cmpttype(image, 0) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&
		  jas_image_cmpttype(image, 1) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&
		  jas_image_cmpttype(image, 2) ==
		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))
			needcdef = 0;
		break;
	case JAS_CLRSPC_FAM_GRAY:
		if (jas_image_cmpttype(image, 0) ==
		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))
			needcdef = 0;
		break;
	default:
		abort();
		break;
	}

	if (needcdef) {
		if (!(box = jp2_box_create(JP2_BOX_CDEF))) {
			goto error;
		}
		cdef = &box->data.cdef;
		cdef->numchans = jas_image_numcmpts(image);
		cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t));
		for (i = 0; i < jas_image_numcmpts(image); ++i) {
			cdefchanent = &cdef->ents[i];
			cdefchanent->channo = i;
			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));
			cdefchanent->type = typeasoc >> 16;
			cdefchanent->assoc = typeasoc & 0x7fff;
		}
		if (jp2_box_put(box, tmpstream)) {
			goto error;
		}
		jp2_box_destroy(box);
		box = 0;
	}

	/* Determine the total length of the JP2 header box. */

	len = jas_stream_tell(tmpstream);
	jas_stream_rewind(tmpstream);

	/*
	 * Output the JP2 header box and all of the boxes which it contains.
	 */

	if (!(box = jp2_box_create(JP2_BOX_JP2H))) {
		goto error;
	}
	box->len = len + JP2_BOX_HDRLEN(false);
	if (jp2_box_put(box, out)) {
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	if (jas_stream_copy(out, tmpstream, len)) {
		goto error;
	}

	jas_stream_close(tmpstream);
	tmpstream = 0;

	/*
	 * Output the contiguous code stream box.
	 */

	if (!(box = jp2_box_create(JP2_BOX_JP2C))) {
		goto error;
	}
	box->len = 0;
	if (jp2_box_put(box, out)) {
		goto error;
	}
	jp2_box_destroy(box);
	box = 0;

	/* Output the JPEG-2000 code stream. */

	overhead = jas_stream_getrwcount(out);
	sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),
	  (unsigned long) overhead);

	if (jpc_encode(image, out, buf)) {
		goto error;
	}

	return 0;
	abort();

error:

	if (box) {
		jp2_box_destroy(box);
	}
	if (tmpstream) {
		jas_stream_close(tmpstream);
	}
	return -1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
22,38
22,39
22,40
22,41
22,42
22,43
22,44
22,45
22,46
22,47
22,48
22,49
22,50
22,51
22,52
22,53
22,54
22,55
22,56
22,57
22,58
22,59
22,60
22,61
22,62
22,63
22,64
22,65
22,66
22,67
22,68
22,69
22,70
22,71
22,72
22,73
22,74
22,75
22,76
22,77
22,78
22,79
22,80
22,81
22,82
22,83
22,84
22,85
22,86
22,87
22,88
22,89
22,90
22,91
22,92
22,93
22,94
22,95
22,96
22,97
22,98
22,99
22,100
22,101
22,102
22,103
22,104
22,105
22,106
22,107
22,108
22,109
23,24
24,25
24,26
25,26
27,28
27,29
30,31
31,32
31,33
32,33
34,35
34,36
37,38
38,39
38,40
39,40
41,42
41,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
52,53
52,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
63,64
64,65
64,66
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
78,80
81,82
82,83
82,84
84,85
84,86
86,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
98,100
101,102
102,103
102,104
103,104
105,106
105,107
108,109
109,110
109,111
111,112
113,114
114,115
114,116
115,116
117,118
119,120
120,121
120,122
121,122
123,124
123,125
126,127
127,128
127,129
128,129
130,131
130,132
133,134
134,135
134,136
136,137
138,139
139,140
139,141
141,142
143,144
144,145
144,146
146,147
148,149
149,150
149,151
151,152
153,154
154,155
154,156
155,156
158,159
159,160
159,161
160,161
163,164
164,165
164,166
165,166
168,169
169,170
169,171
170,171
172,173
172,174
172,175
173,174
175,176
178,179
179,180
179,181
180,181
182,183
182,184
182,185
183,184
185,186
188,189
188,190
188,191
188,192
189,190
190,191
190,192
191,192
194,195
194,196
195,196
197,198
197,199
198,199
200,201
202,203
203,204
205,206
206,207
206,208
207,208
207,209
208,209
208,210
209,210
209,211
209,212
210,211
212,213
214,215
216,217
218,219
218,220
219,220
219,221
219,222
220,221
222,223
224,225
226,227
228,229
228,230
229,230
230,231
230,232
231,232
235,236
235,237
236,237
237,238
238,239
238,240
239,240
241,242
241,243
242,243
244,245
246,247
247,248
249,250
250,251
250,252
251,252
251,253
252,253
252,254
253,254
253,255
254,255
259,260
261,262
261,263
262,263
262,264
262,265
263,264
265,266
267,268
269,270
270,271
272,273
273,274
273,275
274,275
276,277
278,279
279,280
279,281
280,281
283,284
283,285
284,285
285,286
286,287
286,288
287,288
289,290
289,291
290,291
292,293
294,295
295,296
297,298
298,299
298,300
299,300
301,302
302,303
302,304
303,304
303,305
304,305
308,309
309,310
309,311
310,311
310,312
311,312
314,315
316,317
317,318
317,319
318,319
318,320
319,320
322,323
324,325
325,326
325,327
326,327
326,328
327,328
331,332
332,333
332,334
333,334
333,335
334,335
334,336
335,336
339,340
341,342
341,343
342,343
342,344
342,345
343,344
345,346
347,348
349,350
350,351
352,353
353,354
353,355
354,355
356,357
358,359
359,360
359,361
360,361
363,364
363,365
364,365
365,366
366,367
366,368
367,368
369,370
369,371
369,372
370,371
374,375
375,376
377,378
377,379
378,379
379,380
380,381
380,382
381,382
383,384
383,385
384,385
386,387
388,389
389,390
391,392
392,393
392,394
393,394
395,396
396,397
396,398
397,398
397,399
398,399
402,403
403,404
403,405
404,405
404,406
405,406
408,409
408,410
409,410
411,412
413,414
414,415
414,416
415,416
415,417
416,417
419,420
419,421
420,421
422,423
424,425
425,426
425,427
426,427
426,428
427,428
430,431
430,432
431,432
433,434
435,436
436,437
436,438
437,438
437,439
438,439
441,442
441,443
441,444
442,443
444,445
444,446
444,447
445,446
447,448
447,449
447,450
448,449
450,451
453,454
453,455
453,456
454,455
456,457
459,460
461,462
462,463
462,464
463,464
463,465
464,465
467,468
469,470
470,471
470,472
471,472
471,473
472,473
476,477
477,478
477,479
478,479
478,480
479,480
483,484
483,485
484,485
484,486
484,487
485,486
487,488
489,490
491,492
492,493
494,495
495,496
495,497
496,497
498,499
500,501
501,502
501,503
502,503
505,506
505,507
506,507
507,508
509,510
509,511
509,512
509,513
509,514
509,515
509,516
509,517
510,511
510,512
511,512
512,513
513,514
513,515
514,515
516,517
516,518
517,518
519,520
521,522
522,523
524,525
525,526
525,527
526,527
528,529
529,530
529,531
530,531
530,532
531,532
535,536
536,537
536,538
537,538
537,539
538,539
541,542
541,543
542,543
544,545
546,547
546,548
547,548
548,549
549,550
549,551
550,551
550,552
551,552
554,555
554,556
555,556
557,558
557,559
558,559
558,560
559,560
562,563
563,564
563,565
564,565
567,568
568,569
570,571
570,572
570,573
570,574
571,572
572,573
572,574
573,574
576,577
576,578
577,578
579,580
579,581
580,581
583,584
584,585
586,587
587,588
588,589
588,590
589,590
589,591
590,591
590,592
591,592
594,595
596,597
596,598
596,599
597,598
599,600
599,601
599,602
600,601
602,603
604,605
606,607
606,608
606,609
607,608
609,610
611,612
613,614
613,615
614,615
614,616
614,617
615,616
617,618
619,620
621,622
622,623
624,625
625,626
625,627
626,627
628,629
630,631
631,632
631,633
632,633
635,636
635,637
636,637
637,638
638,639
638,640
639,640
641,642
641,643
642,643
644,645
646,647
647,648
649,650
650,651
650,652
651,652
653,654
654,655
654,656
655,656
655,657
656,657
660,661
660,662
661,662
661,663
662,663
664,665
666,667
666,668
666,669
666,670
666,671
666,672
666,673
666,674
666,675
666,676
666,677
666,678
666,679
666,680
666,681
666,682
666,683
666,684
666,685
666,686
666,687
666,688
666,689
666,690
666,691
666,692
667,668
668,669
670,671
671,672
673,674
674,675
676,677
677,678
677,679
678,679
678,680
679,680
682,683
684,685
685,686
685,687
686,687
686,688
687,688
690,691
690,692
691,692
693,694
693,695
694,695
696,697
698,699
699,700
699,701
700,701
700,702
701,702
704,705
706,707
707,708
707,709
708,709
708,710
709,710
715,716
716,717
716,718
717,718
717,719
718,719
721,722
723,724
724,725
724,726
725,726
725,727
726,727
729,730
731,732
732,733
732,734
733,734
733,735
734,735
738,739
739,740
739,741
740,741
742,743
742,744
743,744
745,746
745,747
746,747
748,749
750,751
751,752
751,753
752,753
754,755
756,757
757,758
757,759
758,759
760,761
760,762
760,763
761,762
765,766
766,767
766,768
767,768
769,770
771,772
771,773
772,773
772,774
772,775
773,774
775,776
777,778
779,780
780,781
781,782
783,784
783,785
784,785
784,786
785,786
786,787
786,788
787,788
789,790
789,791
790,791
792,793
795,796
796,797
797,798
799,800
800,801
800,802
801,802
801,803
802,803
805,806
807,808
808,809
808,810
809,810
809,811
810,811
813,814
813,815
814,815
816,817
818,819
819,820
819,821
820,821
822,823
822,824
823,824
826,827
827,828
827,829
828,829
830,831
832,833
832,834
833,834
833,835
834,835
834,836
834,837
834,838
835,836
837,838
839,840
839,841
840,841
843,844
843,845
844,845
847,848
847,849
848,849
851,852
852,853
853,854
855,856
856,857
856,858
857,858
859,860
861,862
862,863
862,864
863,864
865,866
868,869
868,870
869,870
869,871
869,872
870,871
872,873
874,875
876,877
877,878
879,880
880,881
880,882
881,882
883,884
885,886
886,887
886,888
887,888
890,891
891,892
891,893
892,893
895,896
895,897
896,897
896,898
897,898
899,900
899,901
900,901
902,903
904,905
904,906
904,907
904,908
904,909
904,910
904,911
904,912
904,913
904,914
904,915
904,916
905,906
906,907
908,909
908,910
909,910
909,911
910,911
910,912
911,912
911,913
912,913
912,914
912,915
913,914
915,916
918,919
918,920
919,920
921,922
923,924
923,925
924,925
924,926
924,927
925,926
927,928
930,931
930,932
931,932
933,934
935,936
935,937
936,937
936,938
936,939
937,938
939,940
942,943
942,944
943,944
945,946
947,948
948,949
948,950
949,950
953,954
954,955
956,957
956,958
957,958
957,959
958,959
958,960
959,960
959,961
960,961
960,962
960,963
961,962
963,964
966,967
966,968
967,968
969,970
971,972
971,973
972,973
972,974
972,975
973,974
975,976
978,979
978,980
979,980
981,982
983,984
983,985
984,985
984,986
984,987
985,986
987,988
990,991
990,992
991,992
993,994
995,996
996,997
996,998
997,998
1001,1002
1002,1003
1004,1005
1004,1006
1005,1006
1005,1007
1006,1007
1006,1008
1006,1009
1007,1008
1009,1010
1012,1013
1012,1014
1013,1014
1015,1016
1017,1018
1018,1019
1018,1020
1019,1020
1024,1025
1025,1026
1026,1027
1029,1030
1029,1031
1030,1031
1032,1033
1032,1034
1032,1035
1032,1036
1032,1037
1032,1038
1032,1039
1032,1040
1033,1034
1033,1035
1034,1035
1035,1036
1036,1037
1036,1038
1037,1038
1039,1040
1039,1041
1040,1041
1042,1043
1044,1045
1045,1046
1047,1048
1048,1049
1048,1050
1049,1050
1051,1052
1052,1053
1052,1054
1053,1054
1053,1055
1054,1055
1058,1059
1059,1060
1059,1061
1060,1061
1060,1062
1061,1062
1064,1065
1064,1066
1065,1066
1067,1068
1069,1070
1070,1071
1070,1072
1071,1072
1071,1073
1072,1073
1075,1076
1075,1077
1076,1077
1078,1079
1078,1080
1079,1080
1079,1081
1080,1081
1083,1084
1084,1085
1084,1086
1085,1086
1088,1089
1088,1090
1088,1091
1088,1092
1089,1090
1090,1091
1090,1092
1091,1092
1094,1095
1094,1096
1095,1096
1097,1098
1097,1099
1098,1099
1100,1101
1102,1103
1103,1104
1105,1106
1105,1107
1105,1108
1105,1109
1105,1110
1106,1107
1107,1108
1107,1109
1108,1109
1110,1111
1111,1112
1111,1113
1112,1113
1112,1114
1113,1114
1116,1117
1118,1119
1119,1120
1119,1121
1120,1121
1120,1122
1121,1122
1124,1125
1126,1127
1127,1128
1127,1129
1128,1129
1130,1131
1130,1132
1130,1133
1131,1132
1133,1134
1133,1135
1134,1135
1136,1137
1138,1139
1138,1140
1138,1141
1139,1140
1141,1142
1143,1144
1145,1146
1146,1147
1146,1148
1147,1148
1147,1149
1148,1149
1151,1152
1151,1153
1152,1153
1155,1156
1156,1157
1156,1158
1157,1158
1157,1159
1158,1159
1161,1162
1161,1163
1162,1163
1165,1166
1165,1167
1166,1167
1166,1168
1166,1169
1167,1168
1169,1170
1171,1172
1173,1174
1174,1175
1176,1177
1177,1178
1177,1179
1178,1179
1180,1181
1182,1183
1183,1184
1183,1185
1184,1185
1187,1188
1188,1189
1188,1190
1189,1190
1191,1192
1191,1193
1192,1193
1194,1195
1196,1197
1197,1198
1197,1199
1198,1199
1200,1201
1202,1203
1202,1204
1203,1204
1204,1205
1205,1206
1205,1207
1206,1207
1208,1209
1208,1210
1209,1210
1211,1212
1213,1214
1214,1215
1216,1217
1217,1218
1217,1219
1218,1219
1218,1220
1219,1220
1222,1223
1222,1224
1223,1224
1225,1226
1225,1227
1226,1227
1229,1230
1229,1231
1230,1231
1230,1232
1230,1233
1231,1232
1233,1234
1235,1236
1237,1238
1238,1239
1240,1241
1241,1242
1241,1243
1242,1243
1244,1245
1246,1247
1247,1248
1247,1249
1248,1249
1251,1252
1251,1253
1252,1253
1252,1254
1252,1255
1252,1256
1253,1254
1255,1256
1257,1258
1259,1260
1261,1262
1262,1263
1264,1265
1265,1266
1265,1267
1266,1267
1268,1269
1270,1271
1271,1272
1271,1273
1272,1273
1275,1276
1275,1277
1276,1277
1277,1278
1278,1279
1278,1280
1279,1280
1281,1282
1281,1283
1282,1283
1284,1285
1286,1287
1287,1288
1289,1290
1290,1291
1290,1292
1291,1292
1291,1293
1292,1293
1296,1297
1296,1298
1297,1298
1297,1299
1297,1300
1298,1299
1300,1301
1302,1303
1304,1305
1305,1306
1307,1308
1308,1309
1308,1310
1309,1310
1311,1312
1313,1314
1314,1315
1314,1316
1315,1316
1318,1319
1319,1320
1319,1321
1320,1321
1322,1323
1322,1324
1323,1324
1325,1326
1327,1328
1328,1329
1328,1330
1328,1331
1328,1332
1328,1333
1329,1330
1331,1332
1334,1335
1335,1336
1335,1337
1335,1338
1336,1337
1338,1339
1341,1342
1341,1343
1342,1343
1342,1344
1345,1346
1347,1348
1347,1349
1348,1349
1348,1350
1348,1351
1348,1352
1349,1350
1351,1352
1353,1354
1355,1356
1357,1358
1358,1359
1360,1361
1362,1363
1363,1364
1364,1365
1366,1367
1366,1368
1368,1369
1368,1370
1369,1370
1371,1372
1372,1373
1373,1374
1373,1375
1374,1375
1376,1377
1378,1379
1378,1380
1379,1380
1381,1382
1382,1383
1383,1384
1383,1385
1384,1385
1386,1387
1388,1389
1389,1390
-----nextToken-----

-----computeFrom-----
154,155
154,156
159,160
159,161
164,165
164,166
169,170
169,171
179,180
179,181
190,191
190,192
194,195
194,196
207,208
207,209
208,209
208,210
218,219
218,220
230,231
230,232
238,239
238,240
250,251
250,252
279,280
279,281
286,287
286,288
298,299
298,300
309,310
309,311
317,318
317,319
325,326
325,327
332,333
332,334
359,360
359,361
366,367
366,368
380,381
380,382
392,393
392,394
403,404
403,405
414,415
414,416
425,426
425,427
436,437
436,438
462,463
462,464
470,471
470,472
477,478
477,479
501,502
501,503
513,514
513,515
525,526
525,527
536,537
536,538
549,550
549,551
557,558
557,559
572,573
572,574
576,577
576,578
588,589
588,590
631,632
631,633
638,639
638,640
650,651
650,652
677,678
677,679
685,686
685,687
699,700
699,701
707,708
707,709
716,717
716,718
724,725
724,726
732,733
732,734
739,740
739,741
757,758
757,759
784,785
784,786
786,787
786,788
800,801
800,802
808,809
808,810
833,834
833,835
886,887
886,888
891,892
891,893
909,910
909,911
910,911
910,912
911,912
911,913
923,924
923,925
935,936
935,937
948,949
948,950
957,958
957,959
958,959
958,960
959,960
959,961
971,972
971,973
983,984
983,985
996,997
996,998
1005,1006
1005,1007
1018,1019
1018,1020
1036,1037
1036,1038
1048,1049
1048,1050
1059,1060
1059,1061
1070,1071
1070,1072
1078,1079
1078,1080
1090,1091
1090,1092
1094,1095
1094,1096
1107,1108
1107,1109
1119,1120
1119,1121
1127,1128
1127,1129
1146,1147
1146,1148
1151,1152
1151,1153
1156,1157
1156,1158
1161,1162
1161,1163
1183,1184
1183,1185
1188,1189
1188,1190
1205,1206
1205,1207
1217,1218
1217,1219
1222,1223
1222,1224
1247,1248
1247,1249
1271,1272
1271,1273
1278,1279
1278,1280
1290,1291
1290,1292
1314,1315
1314,1316
1319,1320
1319,1321
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;GotoStatement;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;GotoStatement;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;SwitchStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;ConditionalExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
int jp2_encode(jas_image_t *image, jas_stream_t *out, char *optstr){	jp2_box_t *box;	jp2_ftyp_t *ftyp;	jp2_ihdr_t *ihdr;	jas_stream_t *tmpstream;	int allcmptssame;	jp2_bpcc_t *bpcc;	long len;	uint_fast16_t cmptno;	jp2_colr_t *colr;	char buf[4096];	uint_fast32_t overhead;	jp2_cdefchan_t *cdefchanent;	jp2_cdef_t *cdef;	int i;	uint_fast32_t typeasoc;jas_iccprof_t *iccprof;jas_stream_t *iccstream;int pos;int needcdef;int prec;int sgnd;	box = 0;	tmpstream = 0;	allcmptssame = 1;	sgnd = jas_image_cmptsgnd(image, 0);	prec = jas_image_cmptprec(image, 0);	for (i = 1; i < jas_image_numcmpts(image); ++i) {		if (jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec) {			allcmptssame = 0;			break;		}	}	/* Output the signature box. */	if (!(box = jp2_box_create(JP2_BOX_JP))) {		goto error;	}	box->data.jp.magic = JP2_JP_MAGIC;	if (jp2_box_put(box, out)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Output the file type box. */	if (!(box = jp2_box_create(JP2_BOX_FTYP))) {		goto error;	}	ftyp = &box->data.ftyp;	ftyp->majver = JP2_FTYP_MAJVER;	ftyp->minver = JP2_FTYP_MINVER;	ftyp->numcompatcodes = 1;	ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE;	if (jp2_box_put(box, out)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	/*	 * Generate the data portion of the JP2 header box.	 * We cannot simply output the header for this box	 * since we do not yet know the correct value for the length	 * field.	 */	if (!(tmpstream = jas_stream_memopen(0, 0))) {		goto error;	}	/* Generate image header box. */	if (!(box = jp2_box_create(JP2_BOX_IHDR))) {		goto error;	}	ihdr = &box->data.ihdr;	ihdr->width = jas_image_width(image);	ihdr->height = jas_image_height(image);	ihdr->numcmpts = jas_image_numcmpts(image);	ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL;	ihdr->comptype = JP2_IHDR_COMPTYPE;	ihdr->csunk = 0;	ihdr->ipr = 0;	if (jp2_box_put(box, tmpstream)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Generate bits per component box. */	if (!allcmptssame) {		if (!(box = jp2_box_create(JP2_BOX_BPCC))) {			goto error;		}		bpcc = &box->data.bpcc;		bpcc->numcmpts = jas_image_numcmpts(image);		if (!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *		  sizeof(uint_fast8_t)))) {			goto error;		}		for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}		if (jp2_box_put(box, tmpstream)) {			goto error;		}		jp2_box_destroy(box);		box = 0;	}	/* Generate color specification box. */	if (!(box = jp2_box_create(JP2_BOX_COLR))) {		goto error;	}	colr = &box->data.colr;	switch (jas_image_clrspc(image)) {	case JAS_CLRSPC_SRGB:	case JAS_CLRSPC_SYCBCR:	case JAS_CLRSPC_SGRAY:		colr->method = JP2_COLR_ENUM;		colr->csid = clrspctojp2(jas_image_clrspc(image));		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		break;	default:		colr->method = JP2_COLR_ICC;		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		iccprof = jas_iccprof_createfromcmprof(jas_image_cmprof(image));		assert(iccprof);		iccstream = jas_stream_memopen(0, 0);		assert(iccstream);		if (jas_iccprof_save(iccprof, iccstream))			abort();		if ((pos = jas_stream_tell(iccstream)) < 0)			abort();		colr->iccplen = pos;		colr->iccp = jas_malloc(pos);		assert(colr->iccp);		jas_stream_rewind(iccstream);		if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) != colr->iccplen)			abort();		jas_stream_close(iccstream);		jas_iccprof_destroy(iccprof);		break;	}	if (jp2_box_put(box, tmpstream)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	needcdef = 1;	switch (jas_clrspc_fam(jas_image_clrspc(image))) {	case JAS_CLRSPC_FAM_RGB:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_YCBCR:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_GRAY:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))			needcdef = 0;		break;	default:		abort();		break;	}	if (needcdef) {		if (!(box = jp2_box_create(JP2_BOX_CDEF))) {			goto error;		}		cdef = &box->data.cdef;		cdef->numchans = jas_image_numcmpts(image);		cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t));		for (i = 0; i < jas_image_numcmpts(image); ++i) {			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}		if (jp2_box_put(box, tmpstream)) {			goto error;		}		jp2_box_destroy(box);		box = 0;	}	/* Determine the total length of the JP2 header box. */	len = jas_stream_tell(tmpstream);	jas_stream_rewind(tmpstream);	/*	 * Output the JP2 header box and all of the boxes which it contains.	 */	if (!(box = jp2_box_create(JP2_BOX_JP2H))) {		goto error;	}	box->len = len + JP2_BOX_HDRLEN(false);	if (jp2_box_put(box, out)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	if (jas_stream_copy(out, tmpstream, len)) {		goto error;	}	jas_stream_close(tmpstream);	tmpstream = 0;	/*	 * Output the contiguous code stream box.	 */	if (!(box = jp2_box_create(JP2_BOX_JP2C))) {		goto error;	}	box->len = 0;	if (jp2_box_put(box, out)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Output the JPEG-2000 code stream. */	overhead = jas_stream_getrwcount(out);	sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),	  (unsigned long) overhead);	if (jpc_encode(image, out, buf)) {		goto error;	}	return 0;	abort();error:	if (box) {		jp2_box_destroy(box);	}	if (tmpstream) {		jas_stream_close(tmpstream);	}	return -1;}
int
jp2_encode(jas_image_t *image, jas_stream_t *out, char *optstr)
jp2_encode
jas_image_t *image
jas_image_t
jas_image_t
*image
*
image
jas_stream_t *out
jas_stream_t
jas_stream_t
*out
*
out
char *optstr
char
*optstr
*
optstr
{	jp2_box_t *box;	jp2_ftyp_t *ftyp;	jp2_ihdr_t *ihdr;	jas_stream_t *tmpstream;	int allcmptssame;	jp2_bpcc_t *bpcc;	long len;	uint_fast16_t cmptno;	jp2_colr_t *colr;	char buf[4096];	uint_fast32_t overhead;	jp2_cdefchan_t *cdefchanent;	jp2_cdef_t *cdef;	int i;	uint_fast32_t typeasoc;jas_iccprof_t *iccprof;jas_stream_t *iccstream;int pos;int needcdef;int prec;int sgnd;	box = 0;	tmpstream = 0;	allcmptssame = 1;	sgnd = jas_image_cmptsgnd(image, 0);	prec = jas_image_cmptprec(image, 0);	for (i = 1; i < jas_image_numcmpts(image); ++i) {		if (jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec) {			allcmptssame = 0;			break;		}	}	/* Output the signature box. */	if (!(box = jp2_box_create(JP2_BOX_JP))) {		goto error;	}	box->data.jp.magic = JP2_JP_MAGIC;	if (jp2_box_put(box, out)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Output the file type box. */	if (!(box = jp2_box_create(JP2_BOX_FTYP))) {		goto error;	}	ftyp = &box->data.ftyp;	ftyp->majver = JP2_FTYP_MAJVER;	ftyp->minver = JP2_FTYP_MINVER;	ftyp->numcompatcodes = 1;	ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE;	if (jp2_box_put(box, out)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	/*	 * Generate the data portion of the JP2 header box.	 * We cannot simply output the header for this box	 * since we do not yet know the correct value for the length	 * field.	 */	if (!(tmpstream = jas_stream_memopen(0, 0))) {		goto error;	}	/* Generate image header box. */	if (!(box = jp2_box_create(JP2_BOX_IHDR))) {		goto error;	}	ihdr = &box->data.ihdr;	ihdr->width = jas_image_width(image);	ihdr->height = jas_image_height(image);	ihdr->numcmpts = jas_image_numcmpts(image);	ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL;	ihdr->comptype = JP2_IHDR_COMPTYPE;	ihdr->csunk = 0;	ihdr->ipr = 0;	if (jp2_box_put(box, tmpstream)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Generate bits per component box. */	if (!allcmptssame) {		if (!(box = jp2_box_create(JP2_BOX_BPCC))) {			goto error;		}		bpcc = &box->data.bpcc;		bpcc->numcmpts = jas_image_numcmpts(image);		if (!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *		  sizeof(uint_fast8_t)))) {			goto error;		}		for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}		if (jp2_box_put(box, tmpstream)) {			goto error;		}		jp2_box_destroy(box);		box = 0;	}	/* Generate color specification box. */	if (!(box = jp2_box_create(JP2_BOX_COLR))) {		goto error;	}	colr = &box->data.colr;	switch (jas_image_clrspc(image)) {	case JAS_CLRSPC_SRGB:	case JAS_CLRSPC_SYCBCR:	case JAS_CLRSPC_SGRAY:		colr->method = JP2_COLR_ENUM;		colr->csid = clrspctojp2(jas_image_clrspc(image));		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		break;	default:		colr->method = JP2_COLR_ICC;		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		iccprof = jas_iccprof_createfromcmprof(jas_image_cmprof(image));		assert(iccprof);		iccstream = jas_stream_memopen(0, 0);		assert(iccstream);		if (jas_iccprof_save(iccprof, iccstream))			abort();		if ((pos = jas_stream_tell(iccstream)) < 0)			abort();		colr->iccplen = pos;		colr->iccp = jas_malloc(pos);		assert(colr->iccp);		jas_stream_rewind(iccstream);		if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) != colr->iccplen)			abort();		jas_stream_close(iccstream);		jas_iccprof_destroy(iccprof);		break;	}	if (jp2_box_put(box, tmpstream)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	needcdef = 1;	switch (jas_clrspc_fam(jas_image_clrspc(image))) {	case JAS_CLRSPC_FAM_RGB:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_YCBCR:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_GRAY:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))			needcdef = 0;		break;	default:		abort();		break;	}	if (needcdef) {		if (!(box = jp2_box_create(JP2_BOX_CDEF))) {			goto error;		}		cdef = &box->data.cdef;		cdef->numchans = jas_image_numcmpts(image);		cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t));		for (i = 0; i < jas_image_numcmpts(image); ++i) {			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}		if (jp2_box_put(box, tmpstream)) {			goto error;		}		jp2_box_destroy(box);		box = 0;	}	/* Determine the total length of the JP2 header box. */	len = jas_stream_tell(tmpstream);	jas_stream_rewind(tmpstream);	/*	 * Output the JP2 header box and all of the boxes which it contains.	 */	if (!(box = jp2_box_create(JP2_BOX_JP2H))) {		goto error;	}	box->len = len + JP2_BOX_HDRLEN(false);	if (jp2_box_put(box, out)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	if (jas_stream_copy(out, tmpstream, len)) {		goto error;	}	jas_stream_close(tmpstream);	tmpstream = 0;	/*	 * Output the contiguous code stream box.	 */	if (!(box = jp2_box_create(JP2_BOX_JP2C))) {		goto error;	}	box->len = 0;	if (jp2_box_put(box, out)) {		goto error;	}	jp2_box_destroy(box);	box = 0;	/* Output the JPEG-2000 code stream. */	overhead = jas_stream_getrwcount(out);	sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),	  (unsigned long) overhead);	if (jpc_encode(image, out, buf)) {		goto error;	}	return 0;	abort();error:	if (box) {		jp2_box_destroy(box);	}	if (tmpstream) {		jas_stream_close(tmpstream);	}	return -1;}
jp2_box_t *box;
jp2_box_t *box;
jp2_box_t
jp2_box_t
*box
*
box
jp2_ftyp_t *ftyp;
jp2_ftyp_t *ftyp;
jp2_ftyp_t
jp2_ftyp_t
*ftyp
*
ftyp
jp2_ihdr_t *ihdr;
jp2_ihdr_t *ihdr;
jp2_ihdr_t
jp2_ihdr_t
*ihdr
*
ihdr
jas_stream_t *tmpstream;
jas_stream_t *tmpstream;
jas_stream_t
jas_stream_t
*tmpstream
*
tmpstream
int allcmptssame;
int allcmptssame;
int
allcmptssame
allcmptssame
jp2_bpcc_t *bpcc;
jp2_bpcc_t *bpcc;
jp2_bpcc_t
jp2_bpcc_t
*bpcc
*
bpcc
long len;
long len;
long
len
len
uint_fast16_t cmptno;
uint_fast16_t cmptno;
uint_fast16_t
uint_fast16_t
cmptno
cmptno
jp2_colr_t *colr;
jp2_colr_t *colr;
jp2_colr_t
jp2_colr_t
*colr
*
colr
char buf[4096];
char buf[4096];
char
buf[4096]
buf
[4096]
4096
uint_fast32_t overhead;
uint_fast32_t overhead;
uint_fast32_t
uint_fast32_t
overhead
overhead
jp2_cdefchan_t *cdefchanent;
jp2_cdefchan_t *cdefchanent;
jp2_cdefchan_t
jp2_cdefchan_t
*cdefchanent
*
cdefchanent
jp2_cdef_t *cdef;
jp2_cdef_t *cdef;
jp2_cdef_t
jp2_cdef_t
*cdef
*
cdef
int i;
int i;
int
i
i
uint_fast32_t typeasoc;
uint_fast32_t typeasoc;
uint_fast32_t
uint_fast32_t
typeasoc
typeasoc
jas_iccprof_t *iccprof;
jas_iccprof_t *iccprof;
jas_iccprof_t
jas_iccprof_t
*iccprof
*
iccprof
jas_stream_t *iccstream;
jas_stream_t *iccstream;
jas_stream_t
jas_stream_t
*iccstream
*
iccstream
int pos;
int pos;
int
pos
pos
int needcdef;
int needcdef;
int
needcdef
needcdef
int prec;
int prec;
int
prec
prec
int sgnd;
int sgnd;
int
sgnd
sgnd
box = 0;
box = 0
box
box
0
tmpstream = 0;
tmpstream = 0
tmpstream
tmpstream
0
allcmptssame = 1;
allcmptssame = 1
allcmptssame
allcmptssame
1
sgnd = jas_image_cmptsgnd(image, 0);
sgnd = jas_image_cmptsgnd(image, 0)
sgnd
sgnd
jas_image_cmptsgnd(image, 0)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
0
prec = jas_image_cmptprec(image, 0);
prec = jas_image_cmptprec(image, 0)
prec
prec
jas_image_cmptprec(image, 0)
jas_image_cmptprec
jas_image_cmptprec
image
image
0
for (i = 1; i < jas_image_numcmpts(image); ++i) {		if (jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec) {			allcmptssame = 0;			break;		}	}
i = 1;
i = 1
i
i
1
i < jas_image_numcmpts(image)
i
i
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
++i
i
i
{		if (jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec) {			allcmptssame = 0;			break;		}	}
if (jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec) {			allcmptssame = 0;			break;		}
jas_image_cmptsgnd(image, i) != sgnd ||		  jas_image_cmptprec(image, i) != prec
jas_image_cmptsgnd(image, i) != sgnd
jas_image_cmptsgnd(image, i)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
i
i
sgnd
sgnd
jas_image_cmptprec(image, i) != prec
jas_image_cmptprec(image, i)
jas_image_cmptprec
jas_image_cmptprec
image
image
i
i
prec
prec
{			allcmptssame = 0;			break;		}
allcmptssame = 0;
allcmptssame = 0
allcmptssame
allcmptssame
0
break;
if (!(box = jp2_box_create(JP2_BOX_JP))) {		goto error;	}
!(box = jp2_box_create(JP2_BOX_JP))
(box = jp2_box_create(JP2_BOX_JP))
box = jp2_box_create(JP2_BOX_JP)
box
box
jp2_box_create(JP2_BOX_JP)
jp2_box_create
jp2_box_create
JP2_BOX_JP
JP2_BOX_JP
{		goto error;	}
goto error;
error
box->data.jp.magic = JP2_JP_MAGIC;
box->data.jp.magic = JP2_JP_MAGIC
box->data.jp.magic
box->data.jp
box->data
box
box
data
jp
magic
JP2_JP_MAGIC
JP2_JP_MAGIC
if (jp2_box_put(box, out)) {		goto error;	}
jp2_box_put(box, out)
jp2_box_put
jp2_box_put
box
box
out
out
{		goto error;	}
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (!(box = jp2_box_create(JP2_BOX_FTYP))) {		goto error;	}
!(box = jp2_box_create(JP2_BOX_FTYP))
(box = jp2_box_create(JP2_BOX_FTYP))
box = jp2_box_create(JP2_BOX_FTYP)
box
box
jp2_box_create(JP2_BOX_FTYP)
jp2_box_create
jp2_box_create
JP2_BOX_FTYP
JP2_BOX_FTYP
{		goto error;	}
goto error;
error
ftyp = &box->data.ftyp;
ftyp = &box->data.ftyp
ftyp
ftyp
&box->data.ftyp
box->data.ftyp
box->data
box
box
data
ftyp
ftyp->majver = JP2_FTYP_MAJVER;
ftyp->majver = JP2_FTYP_MAJVER
ftyp->majver
ftyp
ftyp
majver
JP2_FTYP_MAJVER
JP2_FTYP_MAJVER
ftyp->minver = JP2_FTYP_MINVER;
ftyp->minver = JP2_FTYP_MINVER
ftyp->minver
ftyp
ftyp
minver
JP2_FTYP_MINVER
JP2_FTYP_MINVER
ftyp->numcompatcodes = 1;
ftyp->numcompatcodes = 1
ftyp->numcompatcodes
ftyp
ftyp
numcompatcodes
1
ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE;
ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE
ftyp->compatcodes[0]
ftyp->compatcodes
ftyp
ftyp
compatcodes
0
JP2_FTYP_COMPATCODE
JP2_FTYP_COMPATCODE
if (jp2_box_put(box, out)) {		goto error;	}
jp2_box_put(box, out)
jp2_box_put
jp2_box_put
box
box
out
out
{		goto error;	}
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (!(tmpstream = jas_stream_memopen(0, 0))) {		goto error;	}
!(tmpstream = jas_stream_memopen(0, 0))
(tmpstream = jas_stream_memopen(0, 0))
tmpstream = jas_stream_memopen(0, 0)
tmpstream
tmpstream
jas_stream_memopen(0, 0)
jas_stream_memopen
jas_stream_memopen
0
0
{		goto error;	}
goto error;
error
if (!(box = jp2_box_create(JP2_BOX_IHDR))) {		goto error;	}
!(box = jp2_box_create(JP2_BOX_IHDR))
(box = jp2_box_create(JP2_BOX_IHDR))
box = jp2_box_create(JP2_BOX_IHDR)
box
box
jp2_box_create(JP2_BOX_IHDR)
jp2_box_create
jp2_box_create
JP2_BOX_IHDR
JP2_BOX_IHDR
{		goto error;	}
goto error;
error
ihdr = &box->data.ihdr;
ihdr = &box->data.ihdr
ihdr
ihdr
&box->data.ihdr
box->data.ihdr
box->data
box
box
data
ihdr
ihdr->width = jas_image_width(image);
ihdr->width = jas_image_width(image)
ihdr->width
ihdr
ihdr
width
jas_image_width(image)
jas_image_width
jas_image_width
image
image
ihdr->height = jas_image_height(image);
ihdr->height = jas_image_height(image)
ihdr->height
ihdr
ihdr
height
jas_image_height(image)
jas_image_height
jas_image_height
image
image
ihdr->numcmpts = jas_image_numcmpts(image);
ihdr->numcmpts = jas_image_numcmpts(image)
ihdr->numcmpts
ihdr
ihdr
numcmpts
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL;
ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL
ihdr->bpc
ihdr
ihdr
bpc
allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL
allcmptssame
allcmptssame
JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),	  jas_image_cmptprec(image, 0))
JP2_SPTOBPC
JP2_SPTOBPC
jas_image_cmptsgnd(image, 0)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
0
jas_image_cmptprec(image, 0)
jas_image_cmptprec
jas_image_cmptprec
image
image
0
JP2_IHDR_BPCNULL
JP2_IHDR_BPCNULL
ihdr->comptype = JP2_IHDR_COMPTYPE;
ihdr->comptype = JP2_IHDR_COMPTYPE
ihdr->comptype
ihdr
ihdr
comptype
JP2_IHDR_COMPTYPE
JP2_IHDR_COMPTYPE
ihdr->csunk = 0;
ihdr->csunk = 0
ihdr->csunk
ihdr
ihdr
csunk
0
ihdr->ipr = 0;
ihdr->ipr = 0
ihdr->ipr
ihdr
ihdr
ipr
0
if (jp2_box_put(box, tmpstream)) {		goto error;	}
jp2_box_put(box, tmpstream)
jp2_box_put
jp2_box_put
box
box
tmpstream
tmpstream
{		goto error;	}
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (!allcmptssame) {		if (!(box = jp2_box_create(JP2_BOX_BPCC))) {			goto error;		}		bpcc = &box->data.bpcc;		bpcc->numcmpts = jas_image_numcmpts(image);		if (!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *		  sizeof(uint_fast8_t)))) {			goto error;		}		for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}		if (jp2_box_put(box, tmpstream)) {			goto error;		}		jp2_box_destroy(box);		box = 0;	}
!allcmptssame
allcmptssame
allcmptssame
{		if (!(box = jp2_box_create(JP2_BOX_BPCC))) {			goto error;		}		bpcc = &box->data.bpcc;		bpcc->numcmpts = jas_image_numcmpts(image);		if (!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *		  sizeof(uint_fast8_t)))) {			goto error;		}		for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}		if (jp2_box_put(box, tmpstream)) {			goto error;		}		jp2_box_destroy(box);		box = 0;	}
if (!(box = jp2_box_create(JP2_BOX_BPCC))) {			goto error;		}
!(box = jp2_box_create(JP2_BOX_BPCC))
(box = jp2_box_create(JP2_BOX_BPCC))
box = jp2_box_create(JP2_BOX_BPCC)
box
box
jp2_box_create(JP2_BOX_BPCC)
jp2_box_create
jp2_box_create
JP2_BOX_BPCC
JP2_BOX_BPCC
{			goto error;		}
goto error;
error
bpcc = &box->data.bpcc;
bpcc = &box->data.bpcc
bpcc
bpcc
&box->data.bpcc
box->data.bpcc
box->data
box
box
data
bpcc
bpcc->numcmpts = jas_image_numcmpts(image);
bpcc->numcmpts = jas_image_numcmpts(image)
bpcc->numcmpts
bpcc
bpcc
numcmpts
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
if (!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *		  sizeof(uint_fast8_t)))) {			goto error;		}
!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *		  sizeof(uint_fast8_t)))
(bpcc->bpcs = jas_malloc(bpcc->numcmpts *		  sizeof(uint_fast8_t)))
bpcc->bpcs = jas_malloc(bpcc->numcmpts *		  sizeof(uint_fast8_t))
bpcc->bpcs
bpcc
bpcc
bpcs
jas_malloc(bpcc->numcmpts *		  sizeof(uint_fast8_t))
jas_malloc
jas_malloc
bpcc->numcmpts *		  sizeof(uint_fast8_t)
bpcc->numcmpts
bpcc
bpcc
numcmpts
sizeof(uint_fast8_t)
uint_fast8_t
uint_fast8_t
uint_fast8_t

{			goto error;		}
goto error;
error
for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno) {			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}
cmptno = 0;
cmptno = 0
cmptno
cmptno
0
cmptno < bpcc->numcmpts
cmptno
cmptno
bpcc->numcmpts
bpcc
bpcc
numcmpts
++cmptno
cmptno
cmptno
{			bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));		}
bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno));
bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno))
bpcc->bpcs[cmptno]
bpcc->bpcs
bpcc
bpcc
bpcs
cmptno
cmptno
JP2_SPTOBPC(jas_image_cmptsgnd(image,			  cmptno), jas_image_cmptprec(image, cmptno))
JP2_SPTOBPC
JP2_SPTOBPC
jas_image_cmptsgnd(image,			  cmptno)
jas_image_cmptsgnd
jas_image_cmptsgnd
image
image
cmptno
cmptno
jas_image_cmptprec(image, cmptno)
jas_image_cmptprec
jas_image_cmptprec
image
image
cmptno
cmptno
if (jp2_box_put(box, tmpstream)) {			goto error;		}
jp2_box_put(box, tmpstream)
jp2_box_put
jp2_box_put
box
box
tmpstream
tmpstream
{			goto error;		}
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (!(box = jp2_box_create(JP2_BOX_COLR))) {		goto error;	}
!(box = jp2_box_create(JP2_BOX_COLR))
(box = jp2_box_create(JP2_BOX_COLR))
box = jp2_box_create(JP2_BOX_COLR)
box
box
jp2_box_create(JP2_BOX_COLR)
jp2_box_create
jp2_box_create
JP2_BOX_COLR
JP2_BOX_COLR
{		goto error;	}
goto error;
error
colr = &box->data.colr;
colr = &box->data.colr
colr
colr
&box->data.colr
box->data.colr
box->data
box
box
data
colr
switch (jas_image_clrspc(image)) {	case JAS_CLRSPC_SRGB:	case JAS_CLRSPC_SYCBCR:	case JAS_CLRSPC_SGRAY:		colr->method = JP2_COLR_ENUM;		colr->csid = clrspctojp2(jas_image_clrspc(image));		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		break;	default:		colr->method = JP2_COLR_ICC;		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		iccprof = jas_iccprof_createfromcmprof(jas_image_cmprof(image));		assert(iccprof);		iccstream = jas_stream_memopen(0, 0);		assert(iccstream);		if (jas_iccprof_save(iccprof, iccstream))			abort();		if ((pos = jas_stream_tell(iccstream)) < 0)			abort();		colr->iccplen = pos;		colr->iccp = jas_malloc(pos);		assert(colr->iccp);		jas_stream_rewind(iccstream);		if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) != colr->iccplen)			abort();		jas_stream_close(iccstream);		jas_iccprof_destroy(iccprof);		break;	}
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
{	case JAS_CLRSPC_SRGB:	case JAS_CLRSPC_SYCBCR:	case JAS_CLRSPC_SGRAY:		colr->method = JP2_COLR_ENUM;		colr->csid = clrspctojp2(jas_image_clrspc(image));		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		break;	default:		colr->method = JP2_COLR_ICC;		colr->pri = JP2_COLR_PRI;		colr->approx = 0;		iccprof = jas_iccprof_createfromcmprof(jas_image_cmprof(image));		assert(iccprof);		iccstream = jas_stream_memopen(0, 0);		assert(iccstream);		if (jas_iccprof_save(iccprof, iccstream))			abort();		if ((pos = jas_stream_tell(iccstream)) < 0)			abort();		colr->iccplen = pos;		colr->iccp = jas_malloc(pos);		assert(colr->iccp);		jas_stream_rewind(iccstream);		if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) != colr->iccplen)			abort();		jas_stream_close(iccstream);		jas_iccprof_destroy(iccprof);		break;	}
case JAS_CLRSPC_SRGB:
JAS_CLRSPC_SRGB
JAS_CLRSPC_SRGB
case JAS_CLRSPC_SYCBCR:
JAS_CLRSPC_SYCBCR
JAS_CLRSPC_SYCBCR
case JAS_CLRSPC_SGRAY:
JAS_CLRSPC_SGRAY
JAS_CLRSPC_SGRAY
colr->method = JP2_COLR_ENUM;
colr->method = JP2_COLR_ENUM
colr->method
colr
colr
method
JP2_COLR_ENUM
JP2_COLR_ENUM
colr->csid = clrspctojp2(jas_image_clrspc(image));
colr->csid = clrspctojp2(jas_image_clrspc(image))
colr->csid
colr
colr
csid
clrspctojp2(jas_image_clrspc(image))
clrspctojp2
clrspctojp2
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
colr->pri = JP2_COLR_PRI;
colr->pri = JP2_COLR_PRI
colr->pri
colr
colr
pri
JP2_COLR_PRI
JP2_COLR_PRI
colr->approx = 0;
colr->approx = 0
colr->approx
colr
colr
approx
0
break;
default:
colr->method = JP2_COLR_ICC;
colr->method = JP2_COLR_ICC
colr->method
colr
colr
method
JP2_COLR_ICC
JP2_COLR_ICC
colr->pri = JP2_COLR_PRI;
colr->pri = JP2_COLR_PRI
colr->pri
colr
colr
pri
JP2_COLR_PRI
JP2_COLR_PRI
colr->approx = 0;
colr->approx = 0
colr->approx
colr
colr
approx
0
iccprof = jas_iccprof_createfromcmprof(jas_image_cmprof(image));
iccprof = jas_iccprof_createfromcmprof(jas_image_cmprof(image))
iccprof
iccprof
jas_iccprof_createfromcmprof(jas_image_cmprof(image))
jas_iccprof_createfromcmprof
jas_iccprof_createfromcmprof
jas_image_cmprof(image)
jas_image_cmprof
jas_image_cmprof
image
image
assert(iccprof);
assert(iccprof)
assert
assert
iccprof
iccprof
iccstream = jas_stream_memopen(0, 0);
iccstream = jas_stream_memopen(0, 0)
iccstream
iccstream
jas_stream_memopen(0, 0)
jas_stream_memopen
jas_stream_memopen
0
0
assert(iccstream);
assert(iccstream)
assert
assert
iccstream
iccstream
if (jas_iccprof_save(iccprof, iccstream))			abort();
jas_iccprof_save(iccprof, iccstream)
jas_iccprof_save
jas_iccprof_save
iccprof
iccprof
iccstream
iccstream
abort();
abort()
abort
abort
if ((pos = jas_stream_tell(iccstream)) < 0)			abort();
(pos = jas_stream_tell(iccstream)) < 0
(pos = jas_stream_tell(iccstream))
pos = jas_stream_tell(iccstream)
pos
pos
jas_stream_tell(iccstream)
jas_stream_tell
jas_stream_tell
iccstream
iccstream
0
abort();
abort()
abort
abort
colr->iccplen = pos;
colr->iccplen = pos
colr->iccplen
colr
colr
iccplen
pos
pos
colr->iccp = jas_malloc(pos);
colr->iccp = jas_malloc(pos)
colr->iccp
colr
colr
iccp
jas_malloc(pos)
jas_malloc
jas_malloc
pos
pos
assert(colr->iccp);
assert(colr->iccp)
assert
assert
colr->iccp
colr
colr
iccp
jas_stream_rewind(iccstream);
jas_stream_rewind(iccstream)
jas_stream_rewind
jas_stream_rewind
iccstream
iccstream
if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) != colr->iccplen)			abort();
jas_stream_read(iccstream, colr->iccp, colr->iccplen) != colr->iccplen
jas_stream_read(iccstream, colr->iccp, colr->iccplen)
jas_stream_read
jas_stream_read
iccstream
iccstream
colr->iccp
colr
colr
iccp
colr->iccplen
colr
colr
iccplen
colr->iccplen
colr
colr
iccplen
abort();
abort()
abort
abort
jas_stream_close(iccstream);
jas_stream_close(iccstream)
jas_stream_close
jas_stream_close
iccstream
iccstream
jas_iccprof_destroy(iccprof);
jas_iccprof_destroy(iccprof)
jas_iccprof_destroy
jas_iccprof_destroy
iccprof
iccprof
break;
if (jp2_box_put(box, tmpstream)) {		goto error;	}
jp2_box_put(box, tmpstream)
jp2_box_put
jp2_box_put
box
box
tmpstream
tmpstream
{		goto error;	}
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
needcdef = 1;
needcdef = 1
needcdef
needcdef
1
switch (jas_clrspc_fam(jas_image_clrspc(image))) {	case JAS_CLRSPC_FAM_RGB:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_YCBCR:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_GRAY:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))			needcdef = 0;		break;	default:		abort();		break;	}
jas_clrspc_fam(jas_image_clrspc(image))
jas_clrspc_fam
jas_clrspc_fam
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
{	case JAS_CLRSPC_FAM_RGB:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_YCBCR:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))			needcdef = 0;		break;	case JAS_CLRSPC_FAM_GRAY:		if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))			needcdef = 0;		break;	default:		abort();		break;	}
case JAS_CLRSPC_FAM_RGB:
JAS_CLRSPC_FAM_RGB
JAS_CLRSPC_FAM_RGB
if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))			needcdef = 0;
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)
jas_image_cmpttype(image, 0)
jas_image_cmpttype
jas_image_cmpttype
image
image
0
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_RGB_R
JAS_CLRSPC_CHANIND_RGB_R
jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
jas_image_cmpttype(image, 1)
jas_image_cmpttype
jas_image_cmpttype
image
image
1
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_RGB_G
JAS_CLRSPC_CHANIND_RGB_G
jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
jas_image_cmpttype(image, 2)
jas_image_cmpttype
jas_image_cmpttype
image
image
2
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_RGB_B
JAS_CLRSPC_CHANIND_RGB_B
needcdef = 0;
needcdef = 0
needcdef
needcdef
0
break;
case JAS_CLRSPC_FAM_YCBCR:
JAS_CLRSPC_FAM_YCBCR
JAS_CLRSPC_FAM_YCBCR
if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))			needcdef = 0;
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&		  jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&		  jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y)
jas_image_cmpttype(image, 0)
jas_image_cmpttype
jas_image_cmpttype
image
image
0
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_YCBCR_Y
JAS_CLRSPC_CHANIND_YCBCR_Y
jas_image_cmpttype(image, 1) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
jas_image_cmpttype(image, 1)
jas_image_cmpttype
jas_image_cmpttype
image
image
1
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_YCBCR_CB
JAS_CLRSPC_CHANIND_YCBCR_CB
jas_image_cmpttype(image, 2) ==		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
jas_image_cmpttype(image, 2)
jas_image_cmpttype
jas_image_cmpttype
image
image
2
JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_CLRSPC_CHANIND_YCBCR_CR
JAS_CLRSPC_CHANIND_YCBCR_CR
needcdef = 0;
needcdef = 0
needcdef
needcdef
0
break;
case JAS_CLRSPC_FAM_GRAY:
JAS_CLRSPC_FAM_GRAY
JAS_CLRSPC_FAM_GRAY
if (jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))			needcdef = 0;
jas_image_cmpttype(image, 0) ==		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y)
jas_image_cmpttype(image, 0)
jas_image_cmpttype
jas_image_cmpttype
image
image
0
JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y)
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_COLOR
JAS_IMAGE_CT_GRAY_Y
JAS_IMAGE_CT_GRAY_Y
needcdef = 0;
needcdef = 0
needcdef
needcdef
0
break;
default:
abort();
abort()
abort
abort
break;
if (needcdef) {		if (!(box = jp2_box_create(JP2_BOX_CDEF))) {			goto error;		}		cdef = &box->data.cdef;		cdef->numchans = jas_image_numcmpts(image);		cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t));		for (i = 0; i < jas_image_numcmpts(image); ++i) {			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}		if (jp2_box_put(box, tmpstream)) {			goto error;		}		jp2_box_destroy(box);		box = 0;	}
needcdef
needcdef
{		if (!(box = jp2_box_create(JP2_BOX_CDEF))) {			goto error;		}		cdef = &box->data.cdef;		cdef->numchans = jas_image_numcmpts(image);		cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t));		for (i = 0; i < jas_image_numcmpts(image); ++i) {			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}		if (jp2_box_put(box, tmpstream)) {			goto error;		}		jp2_box_destroy(box);		box = 0;	}
if (!(box = jp2_box_create(JP2_BOX_CDEF))) {			goto error;		}
!(box = jp2_box_create(JP2_BOX_CDEF))
(box = jp2_box_create(JP2_BOX_CDEF))
box = jp2_box_create(JP2_BOX_CDEF)
box
box
jp2_box_create(JP2_BOX_CDEF)
jp2_box_create
jp2_box_create
JP2_BOX_CDEF
JP2_BOX_CDEF
{			goto error;		}
goto error;
error
cdef = &box->data.cdef;
cdef = &box->data.cdef
cdef
cdef
&box->data.cdef
box->data.cdef
box->data
box
box
data
cdef
cdef->numchans = jas_image_numcmpts(image);
cdef->numchans = jas_image_numcmpts(image)
cdef->numchans
cdef
cdef
numchans
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t));
cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t))
cdef->ents
cdef
cdef
ents
jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t))
jas_malloc
jas_malloc
cdef->numchans * sizeof(jp2_cdefchan_t)
cdef->numchans
cdef
cdef
numchans
sizeof(jp2_cdefchan_t)
jp2_cdefchan_t
jp2_cdefchan_t
jp2_cdefchan_t

for (i = 0; i < jas_image_numcmpts(image); ++i) {			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}
i = 0;
i = 0
i
i
0
i < jas_image_numcmpts(image)
i
i
jas_image_numcmpts(image)
jas_image_numcmpts
jas_image_numcmpts
image
image
++i
i
i
{			cdefchanent = &cdef->ents[i];			cdefchanent->channo = i;			typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));			cdefchanent->type = typeasoc >> 16;			cdefchanent->assoc = typeasoc & 0x7fff;		}
cdefchanent = &cdef->ents[i];
cdefchanent = &cdef->ents[i]
cdefchanent
cdefchanent
&cdef->ents[i]
cdef->ents[i]
cdef->ents
cdef
cdef
ents
i
i
cdefchanent->channo = i;
cdefchanent->channo = i
cdefchanent->channo
cdefchanent
cdefchanent
channo
i
i
typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i));
typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i))
typeasoc
typeasoc
jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i))
jp2_gettypeasoc
jp2_gettypeasoc
jas_image_clrspc(image)
jas_image_clrspc
jas_image_clrspc
image
image
jas_image_cmpttype(image, i)
jas_image_cmpttype
jas_image_cmpttype
image
image
i
i
cdefchanent->type = typeasoc >> 16;
cdefchanent->type = typeasoc >> 16
cdefchanent->type
cdefchanent
cdefchanent
type
typeasoc >> 16
typeasoc
typeasoc
16
cdefchanent->assoc = typeasoc & 0x7fff;
cdefchanent->assoc = typeasoc & 0x7fff
cdefchanent->assoc
cdefchanent
cdefchanent
assoc
typeasoc & 0x7fff
typeasoc
typeasoc
0x7fff
if (jp2_box_put(box, tmpstream)) {			goto error;		}
jp2_box_put(box, tmpstream)
jp2_box_put
jp2_box_put
box
box
tmpstream
tmpstream
{			goto error;		}
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
len = jas_stream_tell(tmpstream);
len = jas_stream_tell(tmpstream)
len
len
jas_stream_tell(tmpstream)
jas_stream_tell
jas_stream_tell
tmpstream
tmpstream
jas_stream_rewind(tmpstream);
jas_stream_rewind(tmpstream)
jas_stream_rewind
jas_stream_rewind
tmpstream
tmpstream
if (!(box = jp2_box_create(JP2_BOX_JP2H))) {		goto error;	}
!(box = jp2_box_create(JP2_BOX_JP2H))
(box = jp2_box_create(JP2_BOX_JP2H))
box = jp2_box_create(JP2_BOX_JP2H)
box
box
jp2_box_create(JP2_BOX_JP2H)
jp2_box_create
jp2_box_create
JP2_BOX_JP2H
JP2_BOX_JP2H
{		goto error;	}
goto error;
error
box->len = len + JP2_BOX_HDRLEN(false);
box->len = len + JP2_BOX_HDRLEN(false)
box->len
box
box
len
len + JP2_BOX_HDRLEN(false)
len
len
JP2_BOX_HDRLEN(false)
JP2_BOX_HDRLEN
JP2_BOX_HDRLEN
false
if (jp2_box_put(box, out)) {		goto error;	}
jp2_box_put(box, out)
jp2_box_put
jp2_box_put
box
box
out
out
{		goto error;	}
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
if (jas_stream_copy(out, tmpstream, len)) {		goto error;	}
jas_stream_copy(out, tmpstream, len)
jas_stream_copy
jas_stream_copy
out
out
tmpstream
tmpstream
len
len
{		goto error;	}
goto error;
error
jas_stream_close(tmpstream);
jas_stream_close(tmpstream)
jas_stream_close
jas_stream_close
tmpstream
tmpstream
tmpstream = 0;
tmpstream = 0
tmpstream
tmpstream
0
if (!(box = jp2_box_create(JP2_BOX_JP2C))) {		goto error;	}
!(box = jp2_box_create(JP2_BOX_JP2C))
(box = jp2_box_create(JP2_BOX_JP2C))
box = jp2_box_create(JP2_BOX_JP2C)
box
box
jp2_box_create(JP2_BOX_JP2C)
jp2_box_create
jp2_box_create
JP2_BOX_JP2C
JP2_BOX_JP2C
{		goto error;	}
goto error;
error
box->len = 0;
box->len = 0
box->len
box
box
len
0
if (jp2_box_put(box, out)) {		goto error;	}
jp2_box_put(box, out)
jp2_box_put
jp2_box_put
box
box
out
out
{		goto error;	}
goto error;
error
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
box = 0;
box = 0
box
box
0
overhead = jas_stream_getrwcount(out);
overhead = jas_stream_getrwcount(out)
overhead
overhead
jas_stream_getrwcount(out)
jas_stream_getrwcount
jas_stream_getrwcount
out
out
sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),	  (unsigned long) overhead);
sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),	  (unsigned long) overhead)
sprintf
sprintf
buf
buf
"%s\n_jp2overhead=%lu\n"
(optstr ? optstr : "")
optstr ? optstr : ""
optstr
optstr
optstr
optstr
""
(unsigned long) overhead
unsigned long
unsigned long

overhead
overhead
if (jpc_encode(image, out, buf)) {		goto error;	}
jpc_encode(image, out, buf)
jpc_encode
jpc_encode
image
image
out
out
buf
buf
{		goto error;	}
goto error;
error
return 0;
0
abort();
abort()
abort
abort
error:	if (box) {		jp2_box_destroy(box);	}
error
if (box) {		jp2_box_destroy(box);	}
box
box
{		jp2_box_destroy(box);	}
jp2_box_destroy(box);
jp2_box_destroy(box)
jp2_box_destroy
jp2_box_destroy
box
box
if (tmpstream) {		jas_stream_close(tmpstream);	}
tmpstream
tmpstream
{		jas_stream_close(tmpstream);	}
jas_stream_close(tmpstream);
jas_stream_close(tmpstream)
jas_stream_close
jas_stream_close
tmpstream
tmpstream
return -1;
-1
1
-----joern-----
(567,241,0)
(654,175,0)
(694,85,0)
(145,529,0)
(143,117,0)
(719,210,0)
(425,6,0)
(440,673,0)
(110,668,0)
(549,212,0)
(346,255,0)
(566,81,0)
(435,624,0)
(531,566,0)
(346,497,0)
(429,660,0)
(205,609,0)
(331,593,0)
(196,114,0)
(263,497,0)
(263,443,0)
(535,130,0)
(180,61,0)
(20,605,0)
(56,204,0)
(701,406,0)
(163,106,0)
(358,673,0)
(75,543,0)
(207,419,0)
(151,503,0)
(547,266,0)
(438,6,0)
(379,30,0)
(237,65,0)
(266,427,0)
(652,299,0)
(563,63,0)
(485,427,0)
(153,466,0)
(458,518,0)
(120,363,0)
(254,302,0)
(430,358,0)
(424,699,0)
(527,439,0)
(346,439,0)
(434,56,0)
(566,356,0)
(420,249,0)
(522,346,0)
(321,164,0)
(646,481,0)
(552,579,0)
(263,444,0)
(625,62,0)
(308,253,0)
(264,401,0)
(129,292,0)
(358,510,0)
(518,521,0)
(274,427,0)
(591,699,0)
(282,389,0)
(346,487,0)
(377,42,0)
(181,580,0)
(684,460,0)
(685,686,0)
(64,708,0)
(3,444,0)
(158,568,0)
(380,204,0)
(604,95,0)
(233,578,0)
(338,357,0)
(263,410,0)
(575,468,0)
(270,140,0)
(580,349,0)
(242,699,0)
(372,80,0)
(575,357,0)
(389,357,0)
(682,719,0)
(717,357,0)
(529,427,0)
(332,427,0)
(22,29,0)
(459,494,0)
(635,658,0)
(179,503,0)
(444,152,0)
(608,579,0)
(359,560,0)
(496,16,0)
(548,100,0)
(578,465,0)
(153,136,0)
(192,404,0)
(346,68,0)
(263,29,0)
(150,469,0)
(599,478,0)
(125,459,0)
(55,357,0)
(44,427,0)
(570,609,0)
(346,181,0)
(305,526,0)
(263,255,0)
(698,237,0)
(450,204,0)
(349,580,0)
(110,329,0)
(263,445,0)
(244,503,0)
(371,294,0)
(644,496,0)
(659,368,0)
(208,427,0)
(431,707,0)
(475,427,0)
(541,65,0)
(469,269,0)
(295,529,0)
(449,593,0)
(258,427,0)
(564,28,0)
(123,427,0)
(248,26,0)
(538,609,0)
(346,686,0)
(167,550,0)
(633,639,0)
(476,521,0)
(351,1,0)
(623,487,0)
(637,481,0)
(2,425,0)
(648,503,0)
(432,496,0)
(314,676,0)
(508,357,0)
(487,6,0)
(471,29,0)
(346,29,0)
(18,671,0)
(345,427,0)
(93,328,0)
(467,594,0)
(401,264,0)
(468,199,0)
(253,400,0)
(406,701,0)
(616,141,0)
(526,305,0)
(689,212,0)
(275,496,0)
(275,594,0)
(263,402,0)
(392,205,0)
(447,54,0)
(67,348,0)
(263,607,0)
(275,75,0)
(383,427,0)
(601,210,0)
(278,239,0)
(13,153,0)
(132,550,0)
(497,101,0)
(497,356,0)
(557,427,0)
(119,305,0)
(262,598,0)
(717,113,0)
(524,108,0)
(433,496,0)
(376,309,0)
(58,331,0)
(97,497,0)
(212,549,0)
(415,357,0)
(298,609,0)
(198,136,0)
(263,26,0)
(194,549,0)
(47,713,0)
(149,508,0)
(74,230,0)
(716,401,0)
(235,609,0)
(544,357,0)
(540,643,0)
(332,609,0)
(588,249,0)
(346,70,0)
(352,609,0)
(110,533,0)
(83,106,0)
(701,239,0)
(236,41,0)
(106,357,0)
(515,40,0)
(517,118,0)
(216,56,0)
(677,478,0)
(27,586,0)
(643,540,0)
(263,67,0)
(578,41,0)
(400,253,0)
(323,166,0)
(707,204,0)
(397,427,0)
(396,710,0)
(437,535,0)
(62,213,0)
(489,118,0)
(511,303,0)
(329,357,0)
(499,713,0)
(50,441,0)
(702,469,0)
(130,126,0)
(322,427,0)
(526,60,0)
(597,503,0)
(399,322,0)
(155,91,0)
(665,55,0)
(306,575,0)
(173,476,0)
(325,680,0)
(177,574,0)
(687,181,0)
(54,521,0)
(543,75,0)
(573,503,0)
(375,577,0)
(238,427,0)
(115,624,0)
(475,62,0)
(581,609,0)
(544,296,0)
(164,427,0)
(704,139,0)
(587,427,0)
(59,427,0)
(296,334,0)
(162,713,0)
(408,17,0)
(263,439,0)
(263,586,0)
(579,6,0)
(496,432,0)
(560,427,0)
(181,428,0)
(465,578,0)
(339,454,0)
(645,653,0)
(483,100,0)
(483,269,0)
(481,637,0)
(346,443,0)
(586,518,0)
(491,427,0)
(127,705,0)
(199,668,0)
(109,363,0)
(393,131,0)
(499,6,0)
(565,266,0)
(354,710,0)
(673,245,0)
(100,427,0)
(416,357,0)
(142,242,0)
(312,521,0)
(346,309,0)
(150,55,0)
(37,210,0)
(39,357,0)
(19,80,0)
(490,294,0)
(404,652,0)
(670,210,0)
(263,68,0)
(355,141,0)
(655,357,0)
(532,59,0)
(388,624,0)
(139,594,0)
(227,47,0)
(298,66,0)
(511,521,0)
(150,508,0)
(699,424,0)
(347,540,0)
(187,311,0)
(193,494,0)
(626,349,0)
(133,81,0)
(39,601,0)
(673,427,0)
(405,255,0)
(666,303,0)
(668,110,0)
(343,629,0)
(421,469,0)
(309,673,0)
(16,496,0)
(313,582,0)
(364,594,0)
(263,708,0)
(551,49,0)
(593,449,0)
(102,152,0)
(61,305,0)
(598,427,0)
(109,219,0)
(275,671,0)
(219,109,0)
(154,545,0)
(166,323,0)
(8,6,0)
(676,680,0)
(600,166,0)
(574,591,0)
(619,427,0)
(283,123,0)
(153,617,0)
(275,403,0)
(440,484,0)
(611,44,0)
(0,587,0)
(581,59,0)
(445,511,0)
(664,75,0)
(184,348,0)
(69,327,0)
(346,331,0)
(26,530,0)
(333,604,0)
(315,65,0)
(76,427,0)
(688,637,0)
(106,65,0)
(107,37,0)
(470,72,0)
(650,349,0)
(178,154,0)
(713,499,0)
(68,396,0)
(410,673,0)
(213,62,0)
(294,490,0)
(328,66,0)
(346,607,0)
(311,400,0)
(275,681,0)
(708,673,0)
(464,85,0)
(373,427,0)
(375,311,0)
(337,136,0)
(562,526,0)
(290,550,0)
(689,95,0)
(409,263,0)
(346,586,0)
(715,521,0)
(504,35,0)
(473,309,0)
(166,357,0)
(91,582,0)
(658,468,0)
(346,26,0)
(326,239,0)
(212,65,0)
(589,427,0)
(346,410,0)
(331,663,0)
(439,10,0)
(275,123,0)
(220,208,0)
(176,497,0)
(95,126,0)
(474,427,0)
(410,394,0)
(261,482,0)
(568,396,0)
(253,357,0)
(130,535,0)
(275,401,0)
(44,611,0)
(425,129,0)
(88,503,0)
(229,674,0)
(210,521,0)
(579,400,0)
(523,427,0)
(596,68,0)
(305,599,0)
(70,401,0)
(638,178,0)
(588,484,0)
(468,658,0)
(586,673,0)
(444,673,0)
(686,95,0)
(513,670,0)
(360,236,0)
(255,593,0)
(294,594,0)
(454,158,0)
(585,340,0)
(48,582,0)
(338,546,0)
(299,427,0)
(121,60,0)
(136,427,0)
(108,609,0)
(591,574,0)
(478,673,0)
(632,367,0)
(631,427,0)
(200,427,0)
(341,440,0)
(356,427,0)
(236,618,0)
(660,357,0)
(25,717,0)
(454,403,0)
(493,427,0)
(67,356,0)
(32,652,0)
(502,428,0)
(222,427,0)
(80,62,0)
(630,485,0)
(451,701,0)
(315,126,0)
(292,129,0)
(657,655,0)
(263,70,0)
(540,347,0)
(671,427,0)
(594,467,0)
(720,59,0)
(452,607,0)
(538,403,0)
(611,357,0)
(46,550,0)
(78,317,0)
(443,654,0)
(183,544,0)
(257,496,0)
(624,388,0)
(436,438,0)
(495,469,0)
(641,41,0)
(239,396,0)
(449,490,0)
(441,118,0)
(259,565,0)
(222,401,0)
(469,702,0)
(310,672,0)
(141,65,0)
(141,355,0)
(500,403,0)
(481,204,0)
(98,374,0)
(147,571,0)
(327,357,0)
(624,357,0)
(702,427,0)
(56,434,0)
(293,174,0)
(197,427,0)
(353,427,0)
(455,427,0)
(362,427,0)
(60,249,0)
(208,594,0)
(5,434,0)
(57,543,0)
(581,516,0)
(91,245,0)
(426,445,0)
(108,75,0)
(158,454,0)
(346,402,0)
(456,544,0)
(6,499,0)
(609,482,0)
(255,705,0)
(391,70,0)
(370,427,0)
(246,363,0)
(607,396,0)
(211,538,0)
(263,565,0)
(263,652,0)
(36,521,0)
(62,625,0)
(323,204,0)
(185,427,0)
(666,357,0)
(691,275,0)
(247,580,0)
(554,403,0)
(70,617,0)
(350,178,0)
(655,101,0)
(230,126,0)
(501,454,0)
(116,236,0)
(363,109,0)
(175,85,0)
(189,639,0)
(705,427,0)
(346,314,0)
(598,75,0)
(267,30,0)
(277,717,0)
(53,427,0)
(252,330,0)
(545,356,0)
(85,118,0)
(478,60,0)
(508,150,0)
(52,427,0)
(662,550,0)
(346,445,0)
(28,594,0)
(542,526,0)
(231,67,0)
(519,279,0)
(21,503,0)
(319,625,0)
(148,506,0)
(23,369,0)
(577,129,0)
(355,357,0)
(407,550,0)
(670,521,0)
(239,165,0)
(24,434,0)
(12,123,0)
(601,39,0)
(279,177,0)
(535,230,0)
(699,591,0)
(367,494,0)
(592,510,0)
(690,427,0)
(346,67,0)
(656,395,0)
(218,347,0)
(263,604,0)
(348,427,0)
(686,315,0)
(240,498,0)
(38,185,0)
(425,443,0)
(297,28,0)
(305,61,0)
(396,568,0)
(669,210,0)
(582,496,0)
(440,312,0)
(537,540,0)
(136,337,0)
(10,126,0)
(416,560,0)
(381,329,0)
(591,296,0)
(9,269,0)
(286,478,0)
(61,484,0)
(602,443,0)
(438,400,0)
(346,444,0)
(96,427,0)
(152,521,0)
(708,54,0)
(41,427,0)
(90,521,0)
(361,396,0)
(346,672,0)
(711,362,0)
(206,100,0)
(565,62,0)
(87,486,0)
(555,293,0)
(556,302,0)
(533,110,0)
(275,164,0)
(84,314,0)
(312,440,0)
(404,593,0)
(346,358,0)
(215,530,0)
(346,604,0)
(476,494,0)
(159,403,0)
(617,427,0)
(388,427,0)
(275,540,0)
(165,415,0)
(346,506,0)
(275,293,0)
(329,110,0)
(492,118,0)
(411,482,0)
(609,352,0)
(10,40,0)
(354,406,0)
(510,521,0)
(134,710,0)
(415,165,0)
(293,555,0)
(178,75,0)
(263,331,0)
(484,521,0)
(257,427,0)
(526,673,0)
(448,164,0)
(572,442,0)
(571,177,0)
(317,403,0)
(258,293,0)
(170,444,0)
(412,374,0)
(712,159,0)
(273,36,0)
(307,555,0)
(356,545,0)
(334,296,0)
(506,673,0)
(478,599,0)
(346,566,0)
(706,565,0)
(443,425,0)
(81,427,0)
(263,579,0)
(103,533,0)
(114,356,0)
(317,710,0)
(169,356,0)
(263,487,0)
(481,357,0)
(223,334,0)
(463,508,0)
(212,689,0)
(242,357,0)
(417,258,0)
(549,396,0)
(675,451,0)
(60,521,0)
(75,664,0)
(243,26,0)
(647,686,0)
(61,673,0)
(82,327,0)
(249,367,0)
(477,95,0)
(574,177,0)
(582,91,0)
(406,354,0)
(534,427,0)
(528,536,0)
(692,672,0)
(385,566,0)
(651,719,0)
(346,427,0)
(363,357,0)
(342,506,0)
(490,449,0)
(652,404,0)
(11,416,0)
(234,402,0)
(387,425,0)
(327,66,0)
(581,709,0)
(512,298,0)
(482,609,0)
(174,293,0)
(719,494,0)
(186,588,0)
(577,375,0)
(413,710,0)
(627,695,0)
(546,230,0)
(287,424,0)
(40,230,0)
(263,672,0)
(461,331,0)
(301,65,0)
(232,402,0)
(375,17,0)
(17,375,0)
(177,571,0)
(443,118,0)
(221,427,0)
(29,593,0)
(316,427,0)
(138,235,0)
(56,357,0)
(460,346,0)
(281,718,0)
(400,550,0)
(439,95,0)
(302,118,0)
(157,485,0)
(269,368,0)
(42,249,0)
(606,132,0)
(428,427,0)
(314,356,0)
(507,315,0)
(217,503,0)
(679,714,0)
(129,577,0)
(453,644,0)
(268,445,0)
(462,503,0)
(569,108,0)
(245,673,0)
(245,91,0)
(46,540,0)
(92,67,0)
(693,521,0)
(346,565,0)
(615,62,0)
(263,506,0)
(390,516,0)
(79,131,0)
(549,354,0)
(14,427,0)
(144,488,0)
(336,427,0)
(160,521,0)
(337,609,0)
(445,673,0)
(599,305,0)
(284,410,0)
(614,395,0)
(703,427,0)
(398,46,0)
(697,660,0)
(225,293,0)
(114,44,0)
(328,362,0)
(276,535,0)
(15,708,0)
(135,490,0)
(263,686,0)
(296,544,0)
(506,60,0)
(296,591,0)
(43,394,0)
(201,329,0)
(349,293,0)
(263,358,0)
(479,236,0)
(378,581,0)
(263,181,0)
(33,322,0)
(516,427,0)
(680,676,0)
(5,637,0)
(680,357,0)
(146,427,0)
(560,416,0)
(699,242,0)
(239,701,0)
(672,702,0)
(714,113,0)
(111,487,0)
(472,314,0)
(161,427,0)
(95,689,0)
(275,62,0)
(210,601,0)
(522,263,0)
(403,554,0)
(668,199,0)
(40,10,0)
(604,130,0)
(106,546,0)
(302,175,0)
(612,56,0)
(250,644,0)
(366,427,0)
(365,427,0)
(590,586,0)
(279,357,0)
(394,521,0)
(539,222,0)
(346,652,0)
(422,503,0)
(80,66,0)
(672,356,0)
(31,55,0)
(300,235,0)
(595,427,0)
(469,150,0)
(667,51,0)
(603,154,0)
(607,354,0)
(165,710,0)
(172,538,0)
(209,219,0)
(441,438,0)
(104,279,0)
(41,578,0)
(382,242,0)
(367,249,0)
(713,47,0)
(701,451,0)
(188,311,0)
(509,475,0)
(434,560,0)
(644,609,0)
(469,100,0)
(34,440,0)
(324,481,0)
(530,427,0)
(520,415,0)
(177,279,0)
(203,132,0)
(124,332,0)
(678,72,0)
(26,356,0)
(45,521,0)
(576,483,0)
(224,427,0)
(374,401,0)
(303,511,0)
(311,375,0)
(199,113,0)
(346,708,0)
(318,503,0)
(423,68,0)
(578,362,0)
(7,257,0)
(414,337,0)
(628,338,0)
(546,106,0)
(621,427,0)
(86,404,0)
(580,181,0)
(384,75,0)
(320,427,0)
(191,696,0)
(168,521,0)
(263,314,0)
(68,165,0)
(122,358,0)
(263,114,0)
(661,298,0)
(260,673,0)
(154,178,0)
(291,16,0)
(525,575,0)
(468,575,0)
(305,494,0)
(214,549,0)
(674,401,0)
(584,39,0)
(303,666,0)
(583,185,0)
(226,671,0)
(446,294,0)
(251,70,0)
(660,429,0)
(634,255,0)
(309,140,0)
(594,139,0)
(271,666,0)
(459,521,0)
(71,516,0)
(289,521,0)
(637,388,0)
(28,66,0)
(546,338,0)
(639,427,0)
(484,588,0)
(311,6,0)
(140,521,0)
(265,521,0)
(683,47,0)
(676,427,0)
(94,40,0)
(113,714,0)
(640,388,0)
(494,521,0)
(480,663,0)
(438,441,0)
(700,521,0)
(4,439,0)
(466,153,0)
(263,427,0)
(285,427,0)
(362,328,0)
(402,673,0)
(654,272,0)
(235,540,0)
(263,566,0)
(199,468,0)
(505,114,0)
(344,182,0)
(558,212,0)
(434,5,0)
(101,427,0)
(37,521,0)
(89,438,0)
(613,158,0)
(346,114,0)
(335,416,0)
(249,42,0)
(386,41,0)
(105,299,0)
(73,427,0)
(41,236,0)
(30,710,0)
(636,536,0)
(36,494,0)
(228,323,0)
(302,357,0)
(256,327,0)
(137,593,0)
(403,159,0)
(617,153,0)
(205,427,0)
(401,674,0)
(101,655,0)
(649,61,0)
(402,484,0)
(171,410,0)
(561,427,0)
(195,269,0)
(593,427,0)
(112,607,0)
(568,158,0)
(487,129,0)
(663,427,0)
(304,517,0)
(77,611,0)
(117,66,0)
(117,293,0)
(553,298,0)
(113,199,0)
(6,550,0)
(156,427,0)
(457,466,0)
(190,427,0)
(47,540,0)
(346,579,0)
(374,66,0)
(642,117,0)
(288,355,0)
(514,427,0)
(85,357,0)
(230,546,0)
(99,710,0)
(622,604,0)
(545,154,0)
(494,536,0)
(637,5,0)
(175,654,0)
(29,587,0)
(280,427,0)
(298,136,0)
(55,150,0)
(113,717,0)
(263,309,0)
(175,302,0)
(85,175,0)
(536,494,0)
(80,372,1)
(469,269,1)
(201,429,1)
(454,501,1)
(43,410,1)
(346,566,1)
(117,66,1)
(198,620,1)
(440,673,1)
(139,704,1)
(346,68,1)
(475,509,1)
(157,322,1)
(41,578,1)
(102,444,1)
(275,75,1)
(267,317,1)
(580,349,1)
(268,394,1)
(154,603,1)
(552,6,1)
(123,12,1)
(666,271,1)
(294,371,1)
(527,130,1)
(663,480,1)
(57,384,1)
(635,575,1)
(581,609,1)
(384,352,1)
(39,357,1)
(713,162,1)
(570,164,1)
(239,165,1)
(497,356,1)
(278,607,1)
(627,432,1)
(284,389,1)
(259,213,1)
(434,56,1)
(302,357,1)
(655,657,1)
(376,510,1)
(298,136,1)
(477,141,1)
(551,28,1)
(263,652,1)
(402,232,1)
(279,104,1)
(202,240,1)
(708,673,1)
(333,622,1)
(67,356,1)
(286,677,1)
(148,42,1)
(109,219,1)
(390,529,1)
(624,357,1)
(391,251,1)
(318,422,1)
(304,654,1)
(21,131,1)
(545,154,1)
(205,392,1)
(626,650,1)
(469,150,1)
(346,460,1)
(611,77,1)
(717,357,1)
(713,47,1)
(346,579,1)
(388,624,1)
(579,608,1)
(305,494,1)
(611,357,1)
(601,39,1)
(263,443,1)
(495,421,1)
(202,567,1)
(581,378,1)
(42,377,1)
(31,665,1)
(13,70,1)
(483,269,1)
(175,302,1)
(374,66,1)
(698,10,1)
(75,543,1)
(688,481,1)
(159,712,1)
(165,415,1)
(251,264,1)
(294,594,1)
(535,230,1)
(506,673,1)
(670,210,1)
(12,283,1)
(530,215,1)
(381,201,1)
(240,292,1)
(113,717,1)
(239,326,1)
(364,639,1)
(347,218,1)
(665,508,1)
(95,689,1)
(389,357,1)
(612,637,1)
(255,593,1)
(549,194,1)
(680,357,1)
(319,615,1)
(113,714,1)
(81,133,1)
(666,357,1)
(160,152,1)
(630,157,1)
(107,476,1)
(588,186,1)
(359,388,1)
(111,623,1)
(91,155,1)
(237,65,1)
(592,358,1)
(195,5,1)
(18,475,1)
(429,660,1)
(533,103,1)
(571,147,1)
(628,74,1)
(406,701,1)
(158,454,1)
(338,628,1)
(327,256,1)
(36,494,1)
(87,554,1)
(625,319,1)
(50,118,1)
(65,541,1)
(296,544,1)
(311,6,1)
(409,327,1)
(510,592,1)
(479,386,1)
(444,673,1)
(483,576,1)
(451,675,1)
(68,396,1)
(106,163,1)
(610,202,1)
(16,291,1)
(482,411,1)
(613,454,1)
(233,236,1)
(194,214,1)
(78,538,1)
(141,65,1)
(62,625,1)
(401,674,1)
(263,708,1)
(121,506,1)
(622,230,1)
(178,638,1)
(637,388,1)
(30,379,1)
(282,673,1)
(535,276,1)
(173,559,1)
(150,508,1)
(607,112,1)
(668,199,1)
(28,564,1)
(581,59,1)
(623,400,1)
(218,537,1)
(426,268,1)
(275,496,1)
(236,360,1)
(578,362,1)
(328,66,1)
(60,249,1)
(606,46,1)
(346,586,1)
(152,102,1)
(176,44,1)
(346,445,1)
(326,278,1)
(246,429,1)
(205,609,1)
(346,402,1)
(674,229,1)
(192,86,1)
(300,138,1)
(110,329,1)
(497,97,1)
(85,357,1)
(393,79,1)
(453,160,1)
(137,467,1)
(517,118,1)
(239,396,1)
(199,468,1)
(624,115,1)
(346,181,1)
(536,636,1)
(522,346,1)
(659,269,1)
(58,705,1)
(83,338,1)
(346,708,1)
(435,640,1)
(191,538,1)
(559,599,1)
(346,652,1)
(202,344,1)
(202,87,1)
(436,89,1)
(321,208,1)
(418,42,1)
(425,6,1)
(193,670,1)
(515,94,1)
(346,487,1)
(573,668,1)
(249,367,1)
(463,421,1)
(21,574,1)
(576,185,1)
(82,69,1)
(28,66,1)
(322,399,1)
(210,601,1)
(638,350,1)
(271,445,1)
(71,390,1)
(199,113,1)
(671,226,1)
(226,18,1)
(417,117,1)
(315,65,1)
(47,540,1)
(150,55,1)
(198,30,1)
(40,515,1)
(245,91,1)
(243,248,1)
(232,234,1)
(9,195,1)
(147,279,1)
(142,177,1)
(670,513,1)
(672,310,1)
(202,252,1)
(467,594,1)
(632,420,1)
(689,212,1)
(339,361,1)
(263,26,1)
(263,604,1)
(186,402,1)
(483,100,1)
(575,525,1)
(441,118,1)
(263,506,1)
(573,395,1)
(447,708,1)
(257,7,1)
(263,314,1)
(654,175,1)
(346,497,1)
(263,444,1)
(263,358,1)
(555,307,1)
(253,357,1)
(686,685,1)
(346,444,1)
(694,464,1)
(47,227,1)
(439,95,1)
(541,301,1)
(39,584,1)
(269,9,1)
(578,465,1)
(202,281,1)
(41,236,1)
(396,568,1)
(263,565,1)
(120,246,1)
(346,506,1)
(412,98,1)
(682,459,1)
(173,599,1)
(310,692,1)
(261,570,1)
(702,469,1)
(543,57,1)
(125,494,1)
(187,487,1)
(574,591,1)
(106,65,1)
(526,562,1)
(649,119,1)
(646,324,1)
(297,299,1)
(263,686,1)
(377,249,1)
(358,673,1)
(177,571,1)
(558,549,1)
(307,225,1)
(433,483,1)
(599,478,1)
(693,37,1)
(392,136,1)
(7,644,1)
(620,21,1)
(582,48,1)
(707,431,1)
(443,118,1)
(346,26,1)
(346,439,1)
(517,304,1)
(460,684,1)
(130,535,1)
(537,483,1)
(124,298,1)
(468,575,1)
(414,198,1)
(599,305,1)
(50,517,1)
(235,609,1)
(475,62,1)
(708,64,1)
(346,672,1)
(263,410,1)
(453,693,1)
(346,565,1)
(652,32,1)
(644,609,1)
(526,673,1)
(117,293,1)
(98,617,1)
(208,594,1)
(309,673,1)
(314,84,1)
(334,223,1)
(303,666,1)
(263,402,1)
(633,258,1)
(511,303,1)
(236,618,1)
(135,294,1)
(684,581,1)
(153,136,1)
(636,528,1)
(650,174,1)
(25,110,1)
(371,446,1)
(593,449,1)
(424,287,1)
(92,231,1)
(263,67,1)
(562,542,1)
(471,593,1)
(15,511,1)
(263,68,1)
(264,401,1)
(140,270,1)
(80,66,1)
(711,671,1)
(538,609,1)
(466,457,1)
(311,188,1)
(720,332,1)
(61,673,1)
(172,141,1)
(281,264,1)
(553,661,1)
(508,149,1)
(590,27,1)
(640,100,1)
(189,633,1)
(346,358,1)
(719,210,1)
(441,438,1)
(594,139,1)
(36,273,1)
(415,357,1)
(27,389,1)
(202,285,1)
(174,293,1)
(277,25,1)
(223,544,1)
(374,401,1)
(667,117,1)
(420,719,1)
(154,178,1)
(85,118,1)
(133,566,1)
(116,479,1)
(184,67,1)
(19,266,1)
(532,720,1)
(585,108,1)
(352,609,1)
(439,4,1)
(478,286,1)
(227,683,1)
(346,314,1)
(132,203,1)
(108,524,1)
(481,357,1)
(23,664,1)
(617,153,1)
(317,78,1)
(257,496,1)
(206,548,1)
(522,263,1)
(34,484,1)
(469,100,1)
(291,433,1)
(566,356,1)
(560,416,1)
(596,423,1)
(202,207,1)
(108,609,1)
(203,606,1)
(67,92,1)
(452,165,1)
(143,642,1)
(637,688,1)
(683,8,1)
(528,193,1)
(80,62,1)
(410,171,1)
(204,380,1)
(337,414,1)
(443,425,1)
(565,706,1)
(24,56,1)
(163,83,1)
(574,177,1)
(608,552,1)
(591,699,1)
(346,604,1)
(110,533,1)
(202,551,1)
(69,41,1)
(362,328,1)
(655,357,1)
(276,437,1)
(209,363,1)
(275,401,1)
(444,170,1)
(275,691,1)
(563,327,1)
(508,357,1)
(604,95,1)
(677,305,1)
(219,209,1)
(610,275,1)
(305,61,1)
(642,428,1)
(346,114,1)
(61,484,1)
(175,85,1)
(202,563,1)
(578,233,1)
(469,495,1)
(229,716,1)
(207,643,1)
(568,158,1)
(525,306,1)
(331,593,1)
(317,403,1)
(273,312,1)
(428,502,1)
(692,101,1)
(97,176,1)
(298,609,1)
(305,526,1)
(202,351,1)
(437,604,1)
(346,309,1)
(647,95,1)
(403,159,1)
(225,323,1)
(509,80,1)
(476,494,1)
(332,609,1)
(346,443,1)
(438,6,1)
(572,235,1)
(398,235,1)
(324,323,1)
(114,356,1)
(598,262,1)
(263,672,1)
(84,472,1)
(609,482,1)
(40,230,1)
(169,664,1)
(566,385,1)
(311,400,1)
(656,668,1)
(423,396,1)
(301,354,1)
(129,577,1)
(385,531,1)
(704,364,1)
(128,719,1)
(212,549,1)
(258,417,1)
(275,594,1)
(577,375,1)
(328,93,1)
(363,120,1)
(473,376,1)
(237,698,1)
(263,331,1)
(546,338,1)
(697,485,1)
(374,412,1)
(438,400,1)
(338,357,1)
(231,530,1)
(461,58,1)
(614,656,1)
(181,580,1)
(298,66,1)
(234,60,1)
(180,649,1)
(155,582,1)
(582,496,1)
(668,110,1)
(183,456,1)
(672,356,1)
(676,680,1)
(263,309,1)
(651,682,1)
(85,694,1)
(507,686,1)
(538,403,1)
(287,242,1)
(11,335,1)
(526,60,1)
(5,637,1)
(331,461,1)
(459,125,1)
(141,355,1)
(329,357,1)
(343,213,1)
(295,145,1)
(275,123,1)
(275,403,1)
(620,648,1)
(74,315,1)
(440,341,1)
(430,122,1)
(148,418,1)
(91,582,1)
(363,357,1)
(202,645,1)
(686,95,1)
(212,558,1)
(158,613,1)
(433,132,1)
(255,405,1)
(312,440,1)
(299,105,1)
(657,497,1)
(266,547,1)
(420,128,1)
(490,294,1)
(55,357,1)
(717,277,1)
(5,434,1)
(372,19,1)
(56,204,1)
(448,321,1)
(382,142,1)
(228,204,1)
(263,255,1)
(706,259,1)
(181,687,1)
(584,669,1)
(367,494,1)
(699,242,1)
(379,267,1)
(262,108,1)
(540,347,1)
(616,237,1)
(235,300,1)
(502,181,1)
(410,673,1)
(701,451,1)
(208,220,1)
(263,445,1)
(4,527,1)
(380,450,1)
(258,293,1)
(544,357,1)
(531,702,1)
(620,318,1)
(37,107,1)
(714,679,1)
(314,356,1)
(661,123,1)
(524,569,1)
(101,655,1)
(166,600,1)
(438,436,1)
(346,331,1)
(263,409,1)
(411,261,1)
(46,398,1)
(117,143,1)
(202,504,1)
(54,447,1)
(485,630,1)
(660,697,1)
(513,210,1)
(458,586,1)
(349,293,1)
(415,520,1)
(355,357,1)
(348,184,1)
(675,239,1)
(122,518,1)
(660,357,1)
(399,33,1)
(478,60,1)
(37,210,1)
(644,250,1)
(361,554,1)
(652,404,1)
(634,587,1)
(138,441,1)
(252,298,1)
(263,439,1)
(10,40,1)
(323,166,1)
(434,24,1)
(487,6,1)
(496,16,1)
(554,403,1)
(309,473,1)
(472,356,1)
(56,357,1)
(639,189,1)
(177,279,1)
(501,339,1)
(275,164,1)
(440,484,1)
(104,519,1)
(449,490,1)
(405,634,1)
(445,673,1)
(315,507,1)
(505,196,1)
(699,424,1)
(275,62,1)
(529,295,1)
(470,678,1)
(20,467,1)
(153,466,1)
(680,325,1)
(556,254,1)
(162,47,1)
(228,707,1)
(86,663,1)
(8,643,1)
(434,560,1)
(308,579,1)
(263,566,1)
(29,593,1)
(292,129,1)
(432,496,1)
(358,430,1)
(279,357,1)
(29,22,1)
(349,626,1)
(678,109,1)
(115,435,1)
(468,658,1)
(79,574,1)
(484,588,1)
(416,11,1)
(105,652,1)
(89,50,1)
(648,109,1)
(494,536,1)
(575,357,1)
(425,129,1)
(603,178,1)
(512,553,1)
(645,644,1)
(119,36,1)
(457,13,1)
(346,607,1)
(712,500,1)
(691,202,1)
(293,555,1)
(323,204,1)
(565,62,1)
(342,148,1)
(354,406,1)
(202,585,1)
(327,66,1)
(579,6,1)
(492,292,1)
(506,342,1)
(325,314,1)
(22,471,1)
(216,612,1)
(546,106,1)
(549,354,1)
(548,516,1)
(587,0,1)
(248,81,1)
(202,191,1)
(178,75,1)
(518,458,1)
(263,181,1)
(93,711,1)
(416,357,1)
(254,443,1)
(446,137,1)
(404,192,1)
(302,556,1)
(263,607,1)
(38,598,1)
(275,540,1)
(456,699,1)
(450,560,1)
(263,497,1)
(256,82,1)
(196,676,1)
(77,114,1)
(127,255,1)
(188,187,1)
(44,611,1)
(360,479,1)
(588,249,1)
(103,329,1)
(26,356,1)
(33,257,1)
(658,635,1)
(263,70,1)
(346,29,1)
(112,452,1)
(389,282,1)
(70,401,1)
(445,426,1)
(386,641,1)
(64,15,1)
(602,425,1)
(335,359,1)
(499,713,1)
(6,499,1)
(544,183,1)
(542,61,1)
(109,363,1)
(404,593,1)
(202,343,1)
(443,602,1)
(422,429,1)
(222,539,1)
(46,540,1)
(504,174,1)
(298,512,1)
(487,111,1)
(247,349,1)
(519,429,1)
(332,124,1)
(149,463,1)
(100,206,1)
(719,494,1)
(253,308,1)
(355,288,1)
(28,594,1)
(313,260,1)
(263,586,1)
(68,596,1)
(32,404,1)
(586,590,1)
(202,23,1)
(283,222,1)
(464,302,1)
(26,243,1)
(421,672,1)
(500,620,1)
(705,127,1)
(591,296,1)
(48,313,1)
(263,29,1)
(242,357,1)
(641,362,1)
(387,441,1)
(719,651,1)
(375,311,1)
(684,610,1)
(346,410,1)
(620,573,1)
(350,169,1)
(673,245,1)
(118,489,1)
(567,80,1)
(213,62,1)
(212,65,1)
(648,72,1)
(394,43,1)
(547,565,1)
(270,309,1)
(564,297,1)
(202,572,1)
(454,403,1)
(55,31,1)
(581,516,1)
(329,381,1)
(607,396,1)
(114,505,1)
(637,481,1)
(375,17,1)
(459,494,1)
(306,113,1)
(288,616,1)
(70,391,1)
(220,28,1)
(106,357,1)
(586,673,1)
(664,75,1)
(17,408,1)
(400,253,1)
(431,5,1)
(250,453,1)
(327,357,1)
(136,337,1)
(346,70,1)
(211,172,1)
(356,545,1)
(669,140,1)
(202,627,1)
(395,614,1)
(476,173,1)
(490,135,1)
(549,396,1)
(367,632,1)
(346,255,1)
(108,75,1)
(615,59,1)
(225,659,1)
(185,583,1)
(538,211,1)
(520,68,1)
(569,348,1)
(716,205,1)
(131,393,1)
(481,204,1)
(242,382,1)
(539,374,1)
(408,311,1)
(164,448,1)
(236,116,1)
(707,204,1)
(425,2,1)
(604,333,1)
(275,293,1)
(687,580,1)
(478,673,1)
(61,180,1)
(583,38,1)
(170,3,1)
(42,249,1)
(230,546,1)
(616,65,1)
(263,579,1)
(202,20,1)
(598,75,1)
(346,686,1)
(263,114,1)
(214,477,1)
(171,284,1)
(344,352,1)
(60,121,1)
(644,496,1)
(679,717,1)
(402,673,1)
(378,610,1)
(351,374,1)
(3,54,1)
(685,647,1)
(489,492,1)
(94,439,1)
(516,71,1)
(260,432,1)
(480,331,1)
(296,334,1)
(235,540,1)
(701,239,1)
(580,247,1)
(166,357,1)
(56,216,1)
(2,387,1)
(302,118,1)
(600,228,1)
(222,401,1)
(481,646,1)
(643,540,1)
(341,34,1)
(275,671,1)
(346,67,1)
(337,609,1)
(215,26,1)
(72,470,1)
(202,667,1)
(59,532,1)
(263,487,1)
(0,29,1)
(546,141,2)
(476,389,2)
(610,467,2)
(565,213,2)
(321,28,2)
(581,610,2)
(72,109,2)
(688,323,2)
(713,643,2)
(422,429,2)
(678,109,2)
(423,554,2)
(642,174,2)
(205,620,2)
(483,269,2)
(149,421,2)
(263,67,2)
(716,620,2)
(693,389,2)
(687,174,2)
(636,389,2)
(164,28,2)
(645,644,2)
(499,643,2)
(263,672,2)
(36,494,2)
(212,549,2)
(229,620,2)
(147,429,2)
(508,421,2)
(425,6,2)
(80,213,2)
(187,643,2)
(448,28,2)
(303,389,2)
(59,298,2)
(660,357,2)
(707,204,2)
(684,28,2)
(219,429,2)
(263,358,2)
(278,554,2)
(374,264,2)
(177,429,2)
(691,202,2)
(157,644,2)
(26,664,2)
(615,298,2)
(344,352,2)
(346,467,2)
(42,389,2)
(263,410,2)
(513,389,2)
(129,577,2)
(525,113,2)
(544,699,2)
(296,544,2)
(396,554,2)
(472,664,2)
(91,582,2)
(250,432,2)
(193,389,2)
(291,483,2)
(304,441,2)
(166,357,2)
(591,296,2)
(376,389,2)
(86,467,2)
(28,467,2)
(202,554,2)
(213,298,2)
(67,664,2)
(218,483,2)
(74,141,2)
(314,356,2)
(684,174,2)
(178,664,2)
(41,578,2)
(82,80,2)
(415,357,2)
(453,432,2)
(319,298,2)
(263,70,2)
(68,554,2)
(469,664,2)
(706,213,2)
(260,432,2)
(378,610,2)
(122,389,2)
(504,174,2)
(130,535,2)
(348,664,2)
(70,401,2)
(181,174,2)
(375,17,2)
(83,141,2)
(452,554,2)
(717,357,2)
(594,117,2)
(252,298,2)
(7,644,2)
(337,538,2)
(460,538,2)
(414,538,2)
(610,644,2)
(317,538,2)
(329,357,2)
(125,389,2)
(77,664,2)
(689,212,2)
(362,328,2)
(27,389,2)
(580,174,2)
(235,540,2)
(263,652,2)
(2,441,2)
(392,620,2)
(699,177,2)
(293,555,2)
(349,174,2)
(61,484,2)
(610,28,2)
(502,174,2)
(346,28,2)
(263,604,2)
(264,620,2)
(490,294,2)
(358,673,2)
(192,467,2)
(701,554,2)
(202,298,2)
(438,400,2)
(279,429,2)
(263,708,2)
(50,441,2)
(670,389,2)
(639,117,2)
(104,429,2)
(460,80,2)
(467,594,2)
(202,235,2)
(460,374,2)
(242,357,2)
(522,263,2)
(611,664,2)
(16,235,2)
(657,664,2)
(28,66,2)
(401,674,2)
(598,108,2)
(175,85,2)
(531,664,2)
(505,664,2)
(202,117,2)
(109,219,2)
(230,141,2)
(313,432,2)
(719,494,2)
(263,327,2)
(460,298,2)
(622,141,2)
(388,624,2)
(309,673,2)
(460,28,2)
(346,604,2)
(441,441,2)
(460,117,2)
(517,118,2)
(148,389,2)
(506,389,2)
(405,467,2)
(48,432,2)
(716,538,2)
(263,506,2)
(136,620,2)
(47,643,2)
(524,664,2)
(483,108,2)
(300,292,2)
(394,389,2)
(257,496,2)
(324,323,2)
(141,65,2)
(16,483,2)
(661,374,2)
(143,174,2)
(580,349,2)
(198,538,2)
(257,644,2)
(460,643,2)
(546,338,2)
(207,643,2)
(553,374,2)
(578,362,2)
(469,100,2)
(109,363,2)
(20,467,2)
(269,5,2)
(570,28,2)
(588,249,2)
(263,586,2)
(165,554,2)
(262,108,2)
(563,327,2)
(554,620,2)
(569,664,2)
(354,406,2)
(375,311,2)
(5,637,2)
(416,357,2)
(199,468,2)
(517,441,2)
(38,108,2)
(648,429,2)
(80,62,2)
(441,292,2)
(573,429,2)
(56,357,2)
(117,293,2)
(467,117,2)
(339,554,2)
(275,164,2)
(346,566,2)
(663,467,2)
(558,141,2)
(236,80,2)
(139,117,2)
(610,235,2)
(89,292,2)
(623,643,2)
(331,593,2)
(46,235,2)
(601,389,2)
(26,356,2)
(499,713,2)
(85,357,2)
(150,55,2)
(263,331,2)
(8,643,2)
(346,586,2)
(610,174,2)
(684,108,2)
(34,389,2)
(287,177,2)
(684,292,2)
(234,389,2)
(94,141,2)
(389,357,2)
(519,429,2)
(698,141,2)
(673,245,2)
(5,434,2)
(374,401,2)
(346,68,2)
(346,565,2)
(0,467,2)
(136,337,2)
(403,159,2)
(617,264,2)
(440,673,2)
(612,637,2)
(689,141,2)
(263,439,2)
(199,113,2)
(475,62,2)
(108,75,2)
(554,403,2)
(305,494,2)
(624,357,2)
(346,80,2)
(263,487,2)
(240,292,2)
(137,467,2)
(699,242,2)
(441,438,2)
(346,672,2)
(97,664,2)
(133,664,2)
(284,389,2)
(136,538,2)
(666,389,2)
(466,264,2)
(216,637,2)
(253,643,2)
(684,374,2)
(117,174,2)
(679,110,2)
(497,356,2)
(247,174,2)
(610,352,2)
(176,664,2)
(478,60,2)
(360,479,2)
(578,465,2)
(95,689,2)
(684,80,2)
(518,389,2)
(460,327,2)
(249,367,2)
(80,66,2)
(454,554,2)
(526,673,2)
(93,80,2)
(92,664,2)
(346,708,2)
(540,347,2)
(590,389,2)
(116,479,2)
(630,644,2)
(267,538,2)
(475,80,2)
(298,66,2)
(117,66,2)
(346,445,2)
(40,230,2)
(135,467,2)
(243,664,2)
(478,673,2)
(121,389,2)
(233,80,2)
(684,298,2)
(484,588,2)
(460,664,2)
(114,356,2)
(70,264,2)
(141,141,2)
(392,538,2)
(456,699,2)
(202,538,2)
(614,668,2)
(327,357,2)
(312,440,2)
(242,177,2)
(355,357,2)
(212,141,2)
(443,425,2)
(701,451,2)
(672,664,2)
(451,554,2)
(327,80,2)
(508,357,2)
(610,117,2)
(171,389,2)
(68,396,2)
(302,441,2)
(215,664,2)
(429,644,2)
(36,389,2)
(468,575,2)
(686,141,2)
(567,80,2)
(527,141,2)
(98,264,2)
(237,65,2)
(346,298,2)
(497,664,2)
(109,429,2)
(75,543,2)
(420,389,2)
(381,429,2)
(202,80,2)
(258,293,2)
(288,141,2)
(586,389,2)
(425,441,2)
(177,571,2)
(602,441,2)
(674,620,2)
(337,620,2)
(292,129,2)
(446,467,2)
(263,686,2)
(323,5,2)
(208,28,2)
(611,357,2)
(202,28,2)
(432,235,2)
(460,467,2)
(153,136,2)
(425,129,2)
(112,554,2)
(305,526,2)
(263,566,2)
(355,141,2)
(346,29,2)
(120,429,2)
(625,298,2)
(347,483,2)
(672,356,2)
(232,389,2)
(202,108,2)
(572,235,2)
(346,174,2)
(338,141,2)
(604,95,2)
(568,158,2)
(159,620,2)
(166,5,2)
(552,643,2)
(434,560,2)
(346,117,2)
(236,618,2)
(188,643,2)
(367,494,2)
(578,80,2)
(181,580,2)
(308,643,2)
(271,389,2)
(150,508,2)
(459,389,2)
(494,389,2)
(587,467,2)
(338,357,2)
(719,389,2)
(210,389,2)
(346,70,2)
(714,110,2)
(496,483,2)
(610,664,2)
(229,538,2)
(175,302,2)
(64,389,2)
(564,467,2)
(520,554,2)
(684,664,2)
(110,329,2)
(263,29,2)
(202,467,2)
(208,594,2)
(437,141,2)
(626,174,2)
(251,264,2)
(258,117,2)
(282,432,2)
(173,389,2)
(535,141,2)
(588,389,2)
(579,6,2)
(346,652,2)
(476,494,2)
(129,643,2)
(263,68,2)
(346,327,2)
(482,28,2)
(620,644,2)
(680,664,2)
(490,467,2)
(439,141,2)
(67,356,2)
(189,117,2)
(310,664,2)
(483,100,2)
(235,609,2)
(361,554,2)
(19,213,2)
(281,264,2)
(511,303,2)
(652,467,2)
(346,487,2)
(598,75,2)
(610,108,2)
(454,403,2)
(593,467,2)
(393,574,2)
(202,264,2)
(468,113,2)
(515,141,2)
(108,664,2)
(346,686,2)
(478,389,2)
(538,554,2)
(140,389,2)
(485,644,2)
(202,374,2)
(264,538,2)
(56,637,2)
(528,389,2)
(203,235,2)
(155,432,2)
(55,357,2)
(62,298,2)
(180,389,2)
(459,494,2)
(69,80,2)
(107,389,2)
(371,467,2)
(23,664,2)
(610,643,2)
(713,47,2)
(275,403,2)
(106,357,2)
(153,466,2)
(510,389,2)
(275,671,2)
(616,141,2)
(346,538,2)
(210,601,2)
(432,483,2)
(367,389,2)
(263,607,2)
(165,415,2)
(3,389,2)
(655,664,2)
(421,664,2)
(675,554,2)
(404,467,2)
(479,80,2)
(298,374,2)
(275,293,2)
(694,441,2)
(89,441,2)
(610,298,2)
(245,91,2)
(62,625,2)
(346,664,2)
(273,389,2)
(346,114,2)
(312,389,2)
(538,609,2)
(205,609,2)
(17,643,2)
(30,538,2)
(356,664,2)
(294,594,2)
(6,643,2)
(436,441,2)
(398,235,2)
(346,444,2)
(275,496,2)
(684,538,2)
(81,664,2)
(610,374,2)
(202,432,2)
(449,467,2)
(576,108,2)
(55,421,2)
(37,389,2)
(428,174,2)
(440,389,2)
(248,664,2)
(484,389,2)
(334,699,2)
(263,579,2)
(326,554,2)
(12,374,2)
(533,429,2)
(60,249,2)
(460,292,2)
(372,213,2)
(346,255,2)
(37,210,2)
(202,643,2)
(263,445,2)
(349,293,2)
(358,389,2)
(154,664,2)
(162,643,2)
(84,664,2)
(402,673,2)
(496,16,2)
(263,114,2)
(577,643,2)
(610,80,2)
(178,75,2)
(705,467,2)
(424,177,2)
(637,388,2)
(684,643,2)
(443,118,2)
(575,357,2)
(158,554,2)
(649,389,2)
(327,66,2)
(637,323,2)
(549,396,2)
(396,568,2)
(43,389,2)
(665,421,2)
(668,429,2)
(299,467,2)
(608,643,2)
(211,554,2)
(607,554,2)
(610,538,2)
(296,334,2)
(532,298,2)
(637,481,2)
(46,540,2)
(259,213,2)
(302,118,2)
(384,352,2)
(202,213,2)
(460,235,2)
(593,449,2)
(103,429,2)
(346,432,2)
(223,699,2)
(110,429,2)
(463,421,2)
(194,141,2)
(549,354,2)
(385,664,2)
(249,389,2)
(323,166,2)
(708,389,2)
(406,701,2)
(410,673,2)
(402,389,2)
(549,141,2)
(205,538,2)
(586,673,2)
(332,609,2)
(263,443,2)
(13,264,2)
(406,554,2)
(114,664,2)
(556,441,2)
(78,538,2)
(301,554,2)
(379,538,2)
(220,28,2)
(495,421,2)
(676,680,2)
(263,402,2)
(263,181,2)
(355,554,2)
(460,108,2)
(487,6,2)
(311,643,2)
(202,292,2)
(346,358,2)
(212,65,2)
(346,402,2)
(184,664,2)
(346,213,2)
(568,554,2)
(263,444,2)
(186,389,2)
(297,467,2)
(591,177,2)
(375,643,2)
(275,594,2)
(433,235,2)
(583,108,2)
(458,389,2)
(537,483,2)
(431,5,2)
(346,331,2)
(692,664,2)
(209,429,2)
(351,374,2)
(202,664,2)
(317,403,2)
(346,374,2)
(426,389,2)
(468,658,2)
(674,538,2)
(138,292,2)
(296,699,2)
(389,432,2)
(641,80,2)
(507,141,2)
(222,401,2)
(332,298,2)
(346,497,2)
(677,389,2)
(286,389,2)
(610,327,2)
(237,141,2)
(311,6,2)
(408,643,2)
(29,593,2)
(95,141,2)
(263,314,2)
(363,357,2)
(22,467,2)
(711,80,2)
(410,389,2)
(418,42,2)
(245,432,2)
(627,432,2)
(538,403,2)
(473,389,2)
(684,644,2)
(613,554,2)
(172,554,2)
(684,235,2)
(254,441,2)
(449,490,2)
(660,644,2)
(469,269,2)
(444,673,2)
(562,389,2)
(429,660,2)
(668,110,2)
(175,441,2)
(652,404,2)
(403,620,2)
(401,538,2)
(18,80,2)
(526,60,2)
(202,644,2)
(494,536,2)
(400,253,2)
(47,540,2)
(571,429,2)
(634,467,2)
(202,327,2)
(685,141,2)
(152,389,2)
(275,540,2)
(346,67,2)
(585,108,2)
(130,141,2)
(522,346,2)
(600,5,2)
(720,298,2)
(540,483,2)
(44,664,2)
(481,323,2)
(481,357,2)
(438,6,2)
(253,357,2)
(671,80,2)
(684,327,2)
(686,95,2)
(111,643,2)
(346,579,2)
(40,141,2)
(227,643,2)
(682,389,2)
(79,574,2)
(198,620,2)
(21,429,2)
(596,554,2)
(684,213,2)
(646,323,2)
(684,117,2)
(275,123,2)
(57,352,2)
(222,374,2)
(275,202,2)
(329,429,2)
(477,141,2)
(683,643,2)
(352,609,2)
(565,62,2)
(471,467,2)
(263,565,2)
(298,136,2)
(509,80,2)
(106,141,2)
(170,389,2)
(707,5,2)
(230,546,2)
(132,235,2)
(174,293,2)
(315,141,2)
(275,62,2)
(575,113,2)
(270,389,2)
(202,174,2)
(544,357,2)
(603,664,2)
(306,113,2)
(291,235,2)
(433,483,2)
(255,467,2)
(436,292,2)
(328,80,2)
(226,80,2)
(377,389,2)
(101,664,2)
(543,352,2)
(113,714,2)
(61,673,2)
(438,292,2)
(574,591,2)
(131,574,2)
(150,421,2)
(654,441,2)
(239,554,2)
(24,637,2)
(33,644,2)
(39,389,2)
(41,80,2)
(288,554,2)
(31,421,2)
(39,357,2)
(501,554,2)
(214,141,2)
(202,352,2)
(577,375,2)
(277,110,2)
(266,213,2)
(91,432,2)
(551,28,2)
(526,389,2)
(599,389,2)
(581,516,2)
(579,643,2)
(701,239,2)
(328,66,2)
(412,264,2)
(512,374,2)
(292,643,2)
(607,396,2)
(470,109,2)
(346,235,2)
(684,467,2)
(594,139,2)
(354,554,2)
(75,352,2)
(434,56,2)
(559,599,2)
(664,75,2)
(500,620,2)
(101,655,2)
(382,177,2)
(644,432,2)
(346,644,2)
(346,181,2)
(545,664,2)
(609,482,2)
(323,204,2)
(610,264,2)
(325,664,2)
(680,357,2)
(41,236,2)
(447,389,2)
(610,432,2)
(460,352,2)
(158,454,2)
(169,664,2)
(239,396,2)
(492,292,2)
(647,141,2)
(616,554,2)
(346,26,2)
(322,644,2)
(535,230,2)
(461,467,2)
(85,118,2)
(113,717,2)
(195,5,2)
(275,401,2)
(430,389,2)
(664,352,2)
(566,664,2)
(110,533,2)
(268,389,2)
(141,554,2)
(719,210,2)
(199,110,2)
(574,177,2)
(314,664,2)
(160,389,2)
(667,117,2)
(346,554,2)
(263,255,2)
(6,499,2)
(702,469,2)
(346,410,2)
(401,620,2)
(264,401,2)
(163,141,2)
(438,441,2)
(655,357,2)
(635,113,2)
(654,175,2)
(153,264,2)
(464,441,2)
(127,467,2)
(445,673,2)
(10,141,2)
(364,117,2)
(346,309,2)
(496,235,2)
(506,673,2)
(255,593,2)
(610,292,2)
(191,538,2)
(346,439,2)
(235,292,2)
(346,443,2)
(591,699,2)
(628,141,2)
(106,65,2)
(684,554,2)
(142,177,2)
(10,40,2)
(54,389,2)
(592,389,2)
(305,61,2)
(318,429,2)
(343,213,2)
(697,644,2)
(154,178,2)
(87,554,2)
(610,554,2)
(363,429,2)
(566,356,2)
(545,154,2)
(560,416,2)
(409,327,2)
(263,26,2)
(460,644,2)
(177,279,2)
(56,204,2)
(581,609,2)
(536,389,2)
(311,400,2)
(118,292,2)
(395,668,2)
(487,643,2)
(604,141,2)
(541,554,2)
(231,664,2)
(58,467,2)
(511,389,2)
(489,292,2)
(460,554,2)
(196,664,2)
(315,65,2)
(108,609,2)
(303,666,2)
(414,620,2)
(5,323,2)
(617,153,2)
(263,309,2)
(601,39,2)
(582,432,2)
(684,264,2)
(704,117,2)
(85,441,2)
(606,235,2)
(599,478,2)
(676,664,2)
(283,374,2)
(213,62,2)
(633,117,2)
(668,199,2)
(717,110,2)
(684,432,2)
(712,620,2)
(346,292,2)
(702,664,2)
(656,668,2)
(305,389,2)
(632,389,2)
(581,59,2)
(29,467,2)
(411,28,2)
(650,174,2)
(279,357,2)
(346,607,2)
(659,5,2)
(460,264,2)
(356,545,2)
(61,389,2)
(391,264,2)
(547,213,2)
(480,467,2)
(443,441,2)
(387,441,2)
(445,389,2)
(346,314,2)
(404,593,2)
(105,467,2)
(15,389,2)
(337,609,2)
(346,506,2)
(201,429,2)
(670,210,2)
(481,204,2)
(386,80,2)
(28,594,2)
(298,609,2)
(346,643,2)
(128,719,2)
(460,432,2)
(440,484,2)
(185,108,2)
(256,80,2)
(673,432,2)
(352,28,2)
(263,497,2)
(331,467,2)
(50,292,2)
(444,389,2)
(141,355,2)
(434,637,2)
(638,664,2)
(346,352,2)
(102,389,2)
(42,249,2)
(542,389,2)
(684,352,2)
(183,699,2)
(374,66,2)
(350,664,2)
(346,108,2)
(124,298,2)
(294,467,2)
(469,150,2)
(643,483,2)
(669,389,2)
(460,174,2)
(228,5,2)
(239,165,2)
(599,305,2)
(4,141,2)
(644,496,2)
(302,357,2)
(539,374,2)
(644,609,2)
(333,141,2)
(309,389,2)
(341,389,2)
(460,213,2)
(609,28,2)
(400,643,2)
(119,389,2)
(699,424,2)
(584,389,2)
(457,264,2)
(415,554,2)
(60,389,2)
(261,28,2)
(666,357,2)
(346,264,2)
(32,467,2)
(574,429,2)
(530,664,2)
(582,496,2)
(275,75,2)
(610,213,2)
(399,644,2)
(362,80,2)
(246,429,2)
(708,673,2)
(25,110,2)
(113,110,2)
(276,141,2)
(9,5,2)
(651,389,2)
(643,540,2)
(123,374,2)
(658,113,2)
(44,611,2)
(417,117,2)
(342,389,2)
(546,106,2)
(432,496,2)
(441,118,2)
(439,95,2)
(65,554,2)
-----------------------------------
(0,JP2_FTYP_MAJVER)
(1,)
(2,bpcs)
(3,colr)
(4,assoc)
(5,jas_image_cmptsgnd(image, i)
(6,bpcc = &box->data.bpcc)
(7,box)
(8,bpcc)
(9,0)
(10,cdefchanent->assoc = typeasoc & 0x7fff)
(11,0)
(12,0)
(13,len)
(14,cdef)
(15,colr)
(16,jp2_box_create(JP2_BOX_COLR)
(17,sizeof(uint_fast8_t)
(18,box)
(19,box)
(20,goto error;)
(21,break;)
(22,majver)
(23,goto error;)
(24,prec)
(25,image)
(26,ihdr->csunk)
(27,colr)
(28,jp2_box_put(box, out)
(29,ftyp->majver)
(30,box = 0)
(31,0)
(32,0)
(33,box)
(34,colr)
(35,)
(36,jas_stream_rewind(iccstream)
(37,jas_iccprof_destroy(iccprof)
(38,box)
(39,jas_image_cmprof(image)
(40,typeasoc & 0x7fff)
(41,sprintf(buf, "%s\\n_jp2overhead=%lu\\n", (optstr ? optstr : "")
(42,(pos = jas_stream_tell(iccstream)
(43,JP2_COLR_ENUM)
(44,ihdr->height = jas_image_height(image)
(45,case JAS_CLRSPC_SGRAY:)
(46,jp2_box_destroy(box)
(47,box->data)
(48,data)
(49,)
(50,cmptno)
(51,)
(52,colr)
(53,if (!(box = jp2_box_create(JP2_BOX_IHDR)
(54,colr->pri = JP2_COLR_PRI)
(55,jas_image_cmptprec(image, 0)
(56,jas_image_cmptprec(image, i)
(57,JP2_BOX_IHDR)
(58,ftyp)
(59,tmpstream = 0)
(60,colr->iccplen = pos)
(61,colr->iccp)
(62,box = jp2_box_create(JP2_BOX_JP2C)
(63,)
(64,pri)
(65,i = 0)
(66,jas_stream_t *out)
(67,ihdr->ipr)
(68,cdef->numchans)
(69,image)
(70,box->len)
(71,0)
(72,needcdef = 0)
(73,box)
(74,typeasoc)
(75,box = jp2_box_create(JP2_BOX_IHDR)
(76,iccstream)
(77,image)
(78,box)
(79,needcdef)
(80,jp2_box_put(box, out)
(81,ihdr->comptype = JP2_IHDR_COMPTYPE)
(82,out)
(83,image)
(84,width)
(85,jas_image_cmptprec(image, cmptno)
(86,ftyp)
(87,goto error;)
(88,case JAS_CLRSPC_FAM_YCBCR:)
(89,bpcc)
(90,case JAS_CLRSPC_SRGB:)
(91,box->data.colr)
(92,ipr)
(93,out)
(94,typeasoc)
(95,cdefchanent = &cdef->ents[i])
(96,if (jp2_box_put(box, out)
(97,numcmpts)
(98,box)
(99,if (!(box = jp2_box_create(JP2_BOX_CDEF)
(100,allcmptssame = 1)
(101,ihdr->numcmpts = jas_image_numcmpts(image)
(102,0)
(103,JAS_CLRSPC_CHANIND_RGB_R)
(104,0)
(105,JP2_FTYP_COMPATCODE)
(106,jas_image_cmpttype(image, i)
(107,iccprof)
(108,jp2_box_put(box, tmpstream)
(109,jas_image_cmpttype(image, 0)
(110,jas_image_cmpttype(image, 0)
(111,bpcs)
(112,ents)
(113,jas_image_cmpttype(image, 1)
(114,ihdr->height)
(115,0)
(116,"")
(117,jp2_box_put(box, out)
(118,cmptno = 0)
(119,iccstream)
(120,0)
(121,pos)
(122,colr)
(123,box = 0)
(124,tmpstream)
(125,iccstream)
(126,)
(127,JP2_FTYP_MINVER)
(128,abort()
(129,bpcc->bpcs = jas_malloc(bpcc->numcmpts *\\n\\t\\t  sizeof(uint_fast8_t)
(130,cdefchanent->type = typeasoc >> 16)
(131,needcdef = 0)
(132,box = 0)
(133,JP2_IHDR_COMPTYPE)
(134,for (i = 0; i < jas_image_numcmpts(image)
(135,ftyp)
(136,len = jas_stream_tell(tmpstream)
(137,ftyp)
(138,box)
(139,jp2_box_create(JP2_BOX_FTYP)
(140,colr->approx = 0)
(141,i < jas_image_numcmpts(image)
(142,image)
(143,out)
(144,if (jas_image_cmptsgnd(image, i)
(145,box)
(146,if (!allcmptssame)
(147,JAS_CLRSPC_CHANIND_YCBCR_Y)
(148,colr)
(149,0)
(150,JP2_SPTOBPC(jas_image_cmptsgnd(image, 0)
(151,case JAS_CLRSPC_FAM_GRAY:)
(152,colr->approx = 0)
(153,len + JP2_BOX_HDRLEN(false)
(154,box->data.ihdr)
(155,colr)
(156,prec)
(157,needcdef)
(158,box->data.cdef)
(159,jp2_box_create(JP2_BOX_CDEF)
(160,break;)
(161,error:)
(162,bpcc)
(163,i)
(164,box = 0)
(165,cdef->numchans = jas_image_numcmpts(image)
(166,jas_image_numcmpts(image)
(167,if (!(box = jp2_box_create(JP2_BOX_BPCC)
(168,default:)
(169,ihdr)
(170,approx)
(171,method)
(172,box)
(173,iccstream)
(174,!(box = jp2_box_create(JP2_BOX_JP)
(175,JP2_SPTOBPC(jas_image_cmptsgnd(image,\\n\\t\\t\\t  cmptno)
(176,ihdr)
(177,jas_image_cmpttype(image, 0)
(178,box->data)
(179,if (jas_image_cmpttype(image, 0)
(180,iccp)
(181,box->data.jp.magic)
(182,)
(183,2)
(184,0)
(185,box = 0)
(186,pos)
(187,bpcc)
(188,numcmpts)
(189,0)
(190,if (!(box = jp2_box_create(JP2_BOX_COLR)
(191,goto error;)
(192,compatcodes)
(193,iccstream)
(194,ents)
(195,allcmptssame)
(196,ihdr)
(197,iccprof)
(198,len)
(199,jas_image_cmpttype(image, 1)
(200,switch (jas_image_clrspc(image)
(201,image)
(202,box)
(203,0)
(204,i = 1)
(205,jas_stream_rewind(tmpstream)
(206,1)
(207,goto error;)
(208,jp2_box_destroy(box)
(209,JAS_IMAGE_CT_GRAY_Y)
(210,iccprof = jas_iccprof_createfromcmprof(jas_image_cmprof(image)
(211,tmpstream)
(212,cdef->ents[i])
(213,!(box = jp2_box_create(JP2_BOX_JP2C)
(214,cdef)
(215,0)
(216,i)
(217,default:)
(218,JP2_BOX_BPCC)
(219,JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y)
(220,box)
(221,overhead)
(222,jp2_box_destroy(box)
(223,JAS_CLRSPC_CHANIND_YCBCR_CR)
(224,if (needcdef)
(225,box)
(226,0)
(227,data)
(228,i)
(229,JP2_BOX_JP2H)
(230,typeasoc = jp2_gettypeasoc(jas_image_clrspc(image)
(231,ihdr)
(232,iccp)
(233,overhead)
(234,colr)
(235,jp2_box_put(box, tmpstream)
(236,optstr ? optstr : "")
(237,++i)
(238,if (tmpstream)
(239,cdef->numchans)
(240,goto error;)
(241,)
(242,jas_image_cmpttype(image, 1)
(243,csunk)
(244,if (jas_image_cmpttype(image, 0)
(245,&box->data.colr)
(246,image)
(247,jp)
(248,ihdr)
(249,pos = jas_stream_tell(iccstream)
(250,tmpstream)
(251,box)
(252,goto error;)
(253,jas_image_numcmpts(image)
(254,image)
(255,ftyp->minver)
(256,buf)
(257,jp2_box_destroy(box)
(258,jp2_box_destroy(box)
(259,box)
(260,colr)
(261,0)
(262,box)
(263,return 0;)
(264,!(box = jp2_box_create(JP2_BOX_JP2H)
(265,if ((pos = jas_stream_tell(iccstream)
(266,box->len = 0)
(267,box)
(268,colr)
(269,allcmptssame = 0)
(270,0)
(271,image)
(272,)
(273,iccstream)
(274,buf)
(275,jp2_box_destroy(box)
(276,16)
(277,1)
(278,cdef)
(279,jas_image_cmpttype(image, 0)
(280,if (!(box = jp2_box_create(JP2_BOX_FTYP)
(281,goto error;)
(282,image)
(283,box)
(284,colr)
(285,abort()
(286,iccplen)
(287,JAS_CLRSPC_CHANIND_YCBCR_CB)
(288,image)
(289,if (jas_stream_read(iccstream, colr->iccp, colr->iccplen)
(290,for (cmptno = 0; cmptno < bpcc->numcmpts; ++cmptno)
(291,JP2_BOX_COLR)
(292,!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *\\n\\t\\t  sizeof(uint_fast8_t)
(293,box = jp2_box_create(JP2_BOX_JP)
(294,box->data)
(295,0)
(296,jas_image_cmpttype(image, 2)
(297,box)
(298,jas_stream_copy(out, tmpstream, len)
(299,ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE)
(300,tmpstream)
(301,i)
(302,jas_image_cmptsgnd(image,\\n\\t\\t\\t  cmptno)
(303,clrspctojp2(jas_image_clrspc(image)
(304,cmptno)
(305,jas_stream_read(iccstream, colr->iccp, colr->iccplen)
(306,image)
(307,JP2_BOX_JP)
(308,image)
(309,colr->approx)
(310,bpc)
(311,bpcc->numcmpts)
(312,assert(colr->iccp)
(313,box)
(314,ihdr->width)
(315,cdefchanent->channo = i)
(316,if (jpc_encode(image, out, buf)
(317,jp2_box_destroy(box)
(318,break;)
(319,JP2_BOX_JP2C)
(320,cdefchanent)
(321,box)
(322,box = 0)
(323,i < jas_image_numcmpts(image)
(324,image)
(325,image)
(326,numchans)
(327,jpc_encode(image, out, buf)
(328,jas_stream_getrwcount(out)
(329,jas_image_cmpttype(image, 0)
(330,)
(331,ftyp->numcompatcodes)
(332,jas_stream_close(tmpstream)
(333,type)
(334,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
(335,image)
(336,sgnd)
(337,jas_stream_tell(tmpstream)
(338,jas_image_clrspc(image)
(339,box)
(340,)
(341,iccp)
(342,iccplen)
(343,goto error;)
(344,goto error;)
(345,if (jp2_box_put(box, tmpstream)
(346,return -1;)
(347,jp2_box_create(JP2_BOX_BPCC)
(348,ihdr->ipr = 0)
(349,box->data)
(350,box)
(351,goto error;)
(352,!(tmpstream = jas_stream_memopen(0, 0)
(353,i)
(354,cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t)
(355,jas_image_numcmpts(image)
(356,ihdr = &box->data.ihdr)
(357,jas_image_t *image)
(358,colr->pri)
(359,prec)
(360,optstr)
(361,cdef)
(362,overhead = jas_stream_getrwcount(out)
(363,jas_image_cmpttype(image, 0)
(364,box)
(365,if (!(box = jp2_box_create(JP2_BOX_JP)
(366,if (!(tmpstream = jas_stream_memopen(0, 0)
(367,jas_stream_tell(iccstream)
(368,)
(369,)
(370,if (jas_stream_copy(out, tmpstream, len)
(371,data)
(372,out)
(373,tmpstream)
(374,jp2_box_put(box, out)
(375,bpcc->numcmpts *\\n\\t\\t  sizeof(uint_fast8_t)
(376,colr)
(377,0)
(378,tmpstream)
(379,0)
(380,1)
(381,0)
(382,1)
(383,if (!(box = jp2_box_create(JP2_BOX_JP2C)
(384,box)
(385,comptype)
(386,"%s\\n_jp2overhead=%lu\\n")
(387,bpcc)
(388,sgnd = jas_image_cmptsgnd(image, 0)
(389,jas_image_clrspc(image)
(390,tmpstream)
(391,len)
(392,tmpstream)
(393,0)
(394,colr->method = JP2_COLR_ENUM)
(395,needcdef = 0)
(396,cdef = &box->data.cdef)
(397,if (jp2_box_put(box, out)
(398,box)
(399,0)
(400,bpcc->numcmpts = jas_image_numcmpts(image)
(401,box = jp2_box_create(JP2_BOX_JP2H)
(402,colr->iccp)
(403,box = jp2_box_create(JP2_BOX_CDEF)
(404,ftyp->compatcodes)
(405,minver)
(406,jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t)
(407,if (!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *\\n\\t\\t  sizeof(uint_fast8_t)
(408,uint_fast8_t)
(409,0)
(410,colr->method)
(411,0)
(412,out)
(413,if (jp2_box_put(box, tmpstream)
(414,tmpstream)
(415,jas_image_numcmpts(image)
(416,jas_image_cmptprec(image, 0)
(417,box)
(418,abort()
(419,)
(420,pos)
(421,allcmptssame)
(422,abort()
(423,cdef)
(424,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
(425,bpcc->bpcs)
(426,csid)
(427,)
(428,box->data.jp.magic = JP2_JP_MAGIC)
(429,jas_clrspc_fam(jas_image_clrspc(image)
(430,pri)
(431,i)
(432,!(box = jp2_box_create(JP2_BOX_COLR)
(433,box)
(434,jas_image_cmptprec(image, i)
(435,image)
(436,numcmpts)
(437,typeasoc)
(438,bpcc->numcmpts)
(439,cdefchanent->assoc)
(440,colr->iccp)
(441,cmptno < bpcc->numcmpts)
(442,)
(443,bpcc->bpcs[cmptno])
(444,colr->approx)
(445,colr->csid)
(446,box)
(447,JP2_COLR_PRI)
(448,0)
(449,&box->data.ftyp)
(450,i)
(451,sizeof(jp2_cdefchan_t)
(452,cdef)
(453,box)
(454,box->data)
(455,allcmptssame)
(456,image)
(457,false)
(458,JP2_COLR_ICC)
(459,assert(iccstream)
(460,-1)
(461,numcompatcodes)
(462,if (jas_image_cmpttype(image, 0)
(463,image)
(464,image)
(465,unsigned long)
(466,JP2_BOX_HDRLEN(false)
(467,!(box = jp2_box_create(JP2_BOX_FTYP)
(468,jas_image_cmpttype(image, 2)
(469,allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0)
(470,0)
(471,ftyp)
(472,ihdr)
(473,approx)
(474,if (jp2_box_put(box, out)
(475,jp2_box_destroy(box)
(476,jas_stream_close(iccstream)
(477,cdefchanent)
(478,colr->iccplen)
(479,optstr)
(480,1)
(481,jas_image_cmptsgnd(image, i)
(482,jas_stream_memopen(0, 0)
(483,!allcmptssame)
(484,colr->iccp = jas_malloc(pos)
(485,needcdef = 1)
(486,)
(487,bpcc->bpcs)
(488,)
(489,0)
(490,box->data.ftyp)
(491,ihdr)
(492,cmptno)
(493,typeasoc)
(494,iccstream = jas_stream_memopen(0, 0)
(495,JP2_IHDR_BPCNULL)
(496,box = jp2_box_create(JP2_BOX_COLR)
(497,ihdr->numcmpts)
(498,)
(499,&box->data.bpcc)
(500,box)
(501,data)
(502,JP2_JP_MAGIC)
(503,)
(504,goto error;)
(505,height)
(506,colr->iccplen)
(507,i)
(508,jas_image_cmptsgnd(image, 0)
(509,box)
(510,colr->pri = JP2_COLR_PRI)
(511,colr->csid = clrspctojp2(jas_image_clrspc(image)
(512,len)
(513,iccprof)
(514,if (jp2_box_put(box, tmpstream)
(515,0x7fff)
(516,tmpstream = 0)
(517,++cmptno)
(518,colr->method = JP2_COLR_ICC)
(519,image)
(520,image)
(521,)
(522,RET)
(523,if (box)
(524,tmpstream)
(525,2)
(526,colr->iccplen)
(527,cdefchanent)
(528,0)
(529,box = 0)
(530,ihdr->csunk = 0)
(531,ihdr)
(532,0)
(533,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)
(534,bpcc)
(535,typeasoc >> 16)
(536,jas_stream_memopen(0, 0)
(537,box)
(538,jp2_box_put(box, tmpstream)
(539,box)
(540,box = jp2_box_create(JP2_BOX_BPCC)
(541,0)
(542,colr)
(543,jp2_box_create(JP2_BOX_IHDR)
(544,jas_image_cmpttype(image, 2)
(545,&box->data.ihdr)
(546,jp2_gettypeasoc(jas_image_clrspc(image)
(547,0)
(548,allcmptssame)
(549,cdef->ents)
(550,)
(551,goto error;)
(552,bpcc)
(553,tmpstream)
(554,!(box = jp2_box_create(JP2_BOX_CDEF)
(555,jp2_box_create(JP2_BOX_JP)
(556,cmptno)
(557,switch (jas_clrspc_fam(jas_image_clrspc(image)
(558,i)
(559,abort()
(560,prec = jas_image_cmptprec(image, 0)
(561,cmptno)
(562,iccplen)
(563,goto error;)
(564,out)
(565,box->len)
(566,ihdr->comptype)
(567,goto error;)
(568,&box->data.cdef)
(569,box)
(570,tmpstream)
(571,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y)
(572,goto error;)
(573,break;)
(574,jas_image_cmpttype(image, 0)
(575,jas_image_cmpttype(image, 2)
(576,allcmptssame)
(577,jas_malloc(bpcc->numcmpts *\\n\\t\\t  sizeof(uint_fast8_t)
(578,(unsigned long)
(579,bpcc->numcmpts)
(580,box->data.jp)
(581,jas_stream_close(tmpstream)
(582,box->data)
(583,0)
(584,image)
(585,goto error;)
(586,colr->method)
(587,ftyp->majver = JP2_FTYP_MAJVER)
(588,jas_malloc(pos)
(589,needcdef)
(590,method)
(591,jas_image_cmpttype(image, 1)
(592,JP2_COLR_PRI)
(593,ftyp = &box->data.ftyp)
(594,box = jp2_box_create(JP2_BOX_FTYP)
(595,pos)
(596,numchans)
(597,case JAS_CLRSPC_FAM_RGB:)
(598,jp2_box_destroy(box)
(599,jas_stream_read(iccstream, colr->iccp, colr->iccplen)
(600,image)
(601,jas_iccprof_createfromcmprof(jas_image_cmprof(image)
(602,cmptno)
(603,ihdr)
(604,cdefchanent->type)
(605,)
(606,box)
(607,cdef->ents)
(608,numcmpts)
(609,tmpstream = jas_stream_memopen(0, 0)
(610,tmpstream)
(611,jas_image_height(image)
(612,image)
(613,cdef)
(614,0)
(615,box)
(616,i)
(617,box->len = len + JP2_BOX_HDRLEN(false)
(618,char *optstr)
(619,ftyp)
(620,needcdef)
(621,if (jp2_box_put(box, out)
(622,cdefchanent)
(623,bpcc)
(624,jas_image_cmptsgnd(image, 0)
(625,jp2_box_create(JP2_BOX_JP2C)
(626,data)
(627,goto error;)
(628,image)
(629,)
(630,1)
(631,if (!(box = jp2_box_create(JP2_BOX_JP2H)
(632,iccstream)
(633,box)
(634,ftyp)
(635,JAS_CLRSPC_CHANIND_RGB_B)
(636,0)
(637,jas_image_cmptsgnd(image, i)
(638,data)
(639,box = 0)
(640,sgnd)
(641,buf)
(642,box)
(643,!(box = jp2_box_create(JP2_BOX_BPCC)
(644,jp2_box_put(box, tmpstream)
(645,goto error;)
(646,i)
(647,cdefchanent)
(648,break;)
(649,colr)
(650,box)
(651,iccstream)
(652,ftyp->compatcodes[0])
(653,)
(654,bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,\\n\\t\\t\\t  cmptno)
(655,jas_image_numcmpts(image)
(656,needcdef)
(657,image)
(658,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
(659,break;)
(660,jas_image_clrspc(image)
(661,out)
(662,if (jp2_box_put(box, tmpstream)
(663,ftyp->numcompatcodes = 1)
(664,!(box = jp2_box_create(JP2_BOX_IHDR)
(665,image)
(666,jas_image_clrspc(image)
(667,goto error;)
(668,jas_image_cmpttype(image, 0)
(669,iccprof)
(670,assert(iccprof)
(671,box = 0)
(672,ihdr->bpc)
(673,colr = &box->data.colr)
(674,jp2_box_create(JP2_BOX_JP2H)
(675,jp2_cdefchan_t)
(676,ihdr->width = jas_image_width(image)
(677,colr)
(678,needcdef)
(679,JAS_CLRSPC_CHANIND_RGB_G)
(680,jas_image_width(image)
(681,)
(682,iccprof)
(683,box)
(684,1)
(685,channo)
(686,cdefchanent->channo)
(687,magic)
(688,sgnd)
(689,&cdef->ents[i])
(690,for (i = 1; i < jas_image_numcmpts(image)
(691,box)
(692,ihdr)
(693,break;)
(694,cmptno)
(695,)
(696,)
(697,image)
(698,i)
(699,jas_image_cmpttype(image, 1)
(700,if (jas_iccprof_save(iccprof, iccstream)
(701,cdef->numchans * sizeof(jp2_cdefchan_t)
(702,ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0)
(703,len)
(704,JP2_BOX_FTYP)
(705,ftyp->minver = JP2_FTYP_MINVER)
(706,len)
(707,++i)
(708,colr->pri)
(709,)
(710,)
(711,overhead)
(712,JP2_BOX_CDEF)
(713,box->data.bpcc)
(714,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
(715,case JAS_CLRSPC_SYCBCR:)
(716,box)
(717,jas_image_cmpttype(image, 1)
(718,)
(719,jas_iccprof_save(iccprof, iccstream)
(720,tmpstream)
-----cfg-----
(512,508)
(514,500)
(515,518)
(518,514)
(7,33)
(521,549)
(521,638)
(528,535)
(528,549)
(528,638)
(529,532)
(532,528)
(535,549)
(535,638)
(540,549)
(540,638)
(33,36)
(546,733)
(546,738)
(546,741)
(546,559)
(547,546)
(36,39)
(549,547)
(39,44)
(553,564)
(42,49)
(555,553)
(44,42)
(556,555)
(557,560)
(47,54)
(559,557)
(560,556)
(49,47)
(561,570)
(562,565)
(564,562)
(565,561)
(54,59)
(567,580)
(568,575)
(57,67)
(57,85)
(570,568)
(59,57)
(571,567)
(572,571)
(61,59)
(573,576)
(575,573)
(576,572)
(65,77)
(65,61)
(66,65)
(66,72)
(67,66)
(580,585)
(583,596)
(583,626)
(71,65)
(72,71)
(585,583)
(587,585)
(77,85)
(590,601)
(592,590)
(593,592)
(82,733)
(82,738)
(82,741)
(82,94)
(594,593)
(83,82)
(596,594)
(85,83)
(598,606)
(599,598)
(89,99)
(601,599)
(90,89)
(91,96)
(603,614)
(92,95)
(605,603)
(94,92)
(606,608)
(95,91)
(96,90)
(608,605)
(99,733)
(99,738)
(99,741)
(99,104)
(611,621)
(612,615)
(614,612)
(615,611)
(104,106)
(106,113)
(618,587)
(619,622)
(621,619)
(110,733)
(110,738)
(110,741)
(110,123)
(622,618)
(111,110)
(113,111)
(626,733)
(626,738)
(626,741)
(626,631)
(117,128)
(119,117)
(631,633)
(120,119)
(633,638)
(121,124)
(123,121)
(636,640)
(124,120)
(125,133)
(126,125)
(638,636)
(640,646)
(128,126)
(130,138)
(131,130)
(643,733)
(643,738)
(643,741)
(643,653)
(644,643)
(133,131)
(646,644)
(135,144)
(136,135)
(650,659)
(138,136)
(651,656)
(140,148)
(141,140)
(653,651)
(654,650)
(142,141)
(656,654)
(144,142)
(659,733)
(659,738)
(659,741)
(659,664)
(148,733)
(148,738)
(148,741)
(148,153)
(664,666)
(153,155)
(666,670)
(155,162)
(670,733)
(670,738)
(670,741)
(670,676)
(159,733)
(159,738)
(159,741)
(159,171)
(160,159)
(162,160)
(676,678)
(678,685)
(168,733)
(168,738)
(168,741)
(168,181)
(169,168)
(682,733)
(682,738)
(682,741)
(682,692)
(683,682)
(171,169)
(685,683)
(175,186)
(689,695)
(177,175)
(690,689)
(178,177)
(179,182)
(692,690)
(181,179)
(182,178)
(183,192)
(695,733)
(695,738)
(695,741)
(695,700)
(184,187)
(186,184)
(187,183)
(700,702)
(189,198)
(702,707)
(190,193)
(192,190)
(705,712)
(193,189)
(195,204)
(707,705)
(196,199)
(709,720)
(198,196)
(199,195)
(712,717)
(201,218)
(202,208)
(202,205)
(716,709)
(204,202)
(205,201)
(717,716)
(207,205)
(720,733)
(720,738)
(720,741)
(720,726)
(208,211)
(211,207)
(726,743)
(215,223)
(728,733)
(728,738)
(728,741)
(216,215)
(218,216)
(220,228)
(221,220)
(733,738)
(733,741)
(223,221)
(225,231)
(226,225)
(738,741)
(740,743)
(228,226)
(741,740)
(231,733)
(231,738)
(231,741)
(231,236)
(236,238)
(238,242)
(242,249)
(242,323)
(246,733)
(246,738)
(246,741)
(246,259)
(247,246)
(249,247)
(253,264)
(255,253)
(256,255)
(257,260)
(259,257)
(260,256)
(261,272)
(262,265)
(264,262)
(265,261)
(268,733)
(268,738)
(268,741)
(268,284)
(269,268)
(270,277)
(272,270)
(273,269)
(274,273)
(275,278)
(277,275)
(278,274)
(284,291)
(287,299)
(287,309)
(289,287)
(291,289)
(292,291)
(295,292)
(296,302)
(297,296)
(299,297)
(301,295)
(302,305)
(305,301)
(309,733)
(309,738)
(309,741)
(309,314)
(314,316)
(316,323)
(320,733)
(320,738)
(320,741)
(320,333)
(321,320)
(323,321)
(327,336)
(329,327)
(330,329)
(331,334)
(333,331)
(334,330)
(336,348)
(336,372)
(345,353)
(346,345)
(348,346)
(350,360)
(351,355)
(353,351)
(354,350)
(355,354)
(357,365)
(358,357)
(360,358)
(362,451)
(363,362)
(365,363)
(369,377)
(370,369)
(372,370)
(374,382)
(375,374)
(377,375)
(379,387)
(380,379)
(382,380)
(384,389)
(386,384)
(387,386)
(389,393)
(391,396)
(393,391)
(396,399)
(399,403)
(399,408)
(403,408)
(405,412)
(405,416)
(406,405)
(408,406)
(412,416)
(413,421)
(414,413)
(416,414)
(418,427)
(419,422)
(421,419)
(422,418)
(424,428)
(425,424)
(427,425)
(428,436)
(431,444)
(431,445)
(432,442)
(434,439)
(436,434)
(437,432)
(439,437)
(440,431)
(442,440)
(444,445)
(445,447)
(447,451)
(451,733)
(451,738)
(451,741)
(451,456)
(456,458)
(458,461)
(461,466)
(465,475)
(465,503)
(465,529)
(465,540)
(466,465)
(472,493)
(472,549)
(472,638)
(473,472)
(473,487)
(474,473)
(474,481)
(475,478)
(478,474)
(480,473)
(481,484)
(484,480)
(486,472)
(487,490)
(490,486)
(493,549)
(493,638)
(500,521)
(500,549)
(500,638)
(501,500)
(501,515)
(502,501)
(502,509)
(503,506)
(506,502)
(508,501)
(509,512)
-----path-----
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,733,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,733,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,94,92,95,91,96,90,89,99,733,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,94,92,95,91,96,90,89,99,733,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,94,92,95,91,96,90,89,99,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,94,92,95,91,96,90,89,99,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,733,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,733,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,65,77,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,123,121,124,120,119,117,128,126,125,133,131,130,138,136,135,144,142,141,140,148
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,733,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,733,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,94,92,95,91,96,90,89,99,733,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,94,92,95,91,96,90,89,99,733,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,94,92,95,91,96,90,89,99,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,94,92,95,91,96,90,89,99,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,733,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,733,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,741,740,743
7,33,36,39,44,42,49,47,54,59,57,67,66,72,71,65,77,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,123,121,124,120,119,117,128,126,125,133,131,130,138,136,135,144,142,141
7,33,36,39,44,42,49,47,54,59,57,85,83,82,733,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,733,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,733,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,733,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,733,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,733,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,123,121,124,120,119,117,128,126,125,133,131,130,138,136,135,144,142,141,140,148,733,738,741,740
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,123,121,124,120,119,117,128,126,125,133,131,130,138,136,135,144,142,141,140,148,733,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,123,121,124,120,119,117,128,126,125,133,131,130,138,136,135,144,142,141,140,148,738,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,123,121,124,120,119,117,128,126,125,133,131,130,138,136,135,144,142,141,140,148,741,740,743
7,33,36,39,44,42,49,47,54,59,57,85,83,82,94,92,95,91,96,90,89,99,104,106,113,111,110,123,121,124,120,119,117,128,126,125,133,131,130,138,136,135,144,142,141,140,148,153,155,162,160
-----cfgNode-----
5,<global>
6,<empty>
7,int jp2_encode (jas_image_t *image,jas_stream_t *out,char *optstr)
8,jas_image_t *image
9,jas_stream_t *out
10,char *optstr
11,<empty>
12,jp2_box_t* box
13,jp2_ftyp_t* ftyp
14,jp2_ihdr_t* ihdr
15,jas_stream_t* tmpstream
16,int allcmptssame
17,jp2_bpcc_t* bpcc
18,long len
19,uint_fast16_t cmptno
20,jp2_colr_t* colr
21,char[4096] buf
22,uint_fast32_t overhead
23,jp2_cdefchan_t* cdefchanent
24,jp2_cdef_t* cdef
25,int i
26,uint_fast32_t typeasoc
27,jas_iccprof_t* iccprof
28,jas_stream_t* iccstream
29,int pos
30,int needcdef
31,int prec
32,int sgnd
33,box = 0
34,box
35,0
36,tmpstream = 0
37,tmpstream
38,0
39,allcmptssame = 1
40,allcmptssame
41,1
42,sgnd = jas_image_cmptsgnd(image, 0)
43,sgnd
44,jas_image_cmptsgnd(image, 0)
45,image
46,0
47,prec = jas_image_cmptprec(image, 0)
48,prec
49,jas_image_cmptprec(image, 0)
50,image
51,0
52,for (i = 1;i < jas_image_numcmpts(image);++i)
53,<empty>
54,i = 1
55,i
56,1
57,i < jas_image_numcmpts(image)
58,i
59,jas_image_numcmpts(image)
60,image
61,++i
62,i
63,<empty>
64,if (jas_image_cmptsgnd(image, i) != sgnd ||
65,		  jas_image_cmptprec(image, i) != prec)
66,jas_image_cmptsgnd(image, i) != sgnd ||
67,		  jas_image_cmptprec(image, i) != prec
68,jas_image_cmptsgnd(image, i) != sgnd
69,jas_image_cmptsgnd(image, i)
70,image
71,i
72,sgnd
73,jas_image_cmptprec(image, i) != prec
74,jas_image_cmptprec(image, i)
75,image
76,i
77,prec
78,<empty>
79,allcmptssame = 0
80,allcmptssame
81,0
82,break;
83,if (!(box = jp2_box_create(JP2_BOX_JP)))
84,!(box = jp2_box_create(JP2_BOX_JP))
85,box = jp2_box_create(JP2_BOX_JP)
86,box
87,jp2_box_create(JP2_BOX_JP)
88,JP2_BOX_JP
89,<empty>
90,goto error;
91,box->data.jp.magic = JP2_JP_MAGIC
92,box->data.jp.magic
93,box->data.jp
94,box->data
95,box
96,data
97,jp
98,magic
99,JP2_JP_MAGIC
100,if (jp2_box_put(box, out))
101,jp2_box_put(box, out)
102,box
103,out
104,<empty>
105,goto error;
106,jp2_box_destroy(box)
107,box
108,box = 0
109,box
110,0
111,if (!(box = jp2_box_create(JP2_BOX_FTYP)))
112,!(box = jp2_box_create(JP2_BOX_FTYP))
113,box = jp2_box_create(JP2_BOX_FTYP)
114,box
115,jp2_box_create(JP2_BOX_FTYP)
116,JP2_BOX_FTYP
117,<empty>
118,goto error;
119,ftyp = &box->data.ftyp
120,ftyp
121,&box->data.ftyp
122,box->data.ftyp
123,box->data
124,box
125,data
126,ftyp
127,ftyp->majver = JP2_FTYP_MAJVER
128,ftyp->majver
129,ftyp
130,majver
131,JP2_FTYP_MAJVER
132,ftyp->minver = JP2_FTYP_MINVER
133,ftyp->minver
134,ftyp
135,minver
136,JP2_FTYP_MINVER
137,ftyp->numcompatcodes = 1
138,ftyp->numcompatcodes
139,ftyp
140,numcompatcodes
141,1
142,ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE
143,ftyp->compatcodes[0]
144,ftyp->compatcodes
145,ftyp
146,compatcodes
147,0
148,JP2_FTYP_COMPATCODE
149,if (jp2_box_put(box, out))
150,jp2_box_put(box, out)
151,box
152,out
153,<empty>
154,goto error;
155,jp2_box_destroy(box)
156,box
157,box = 0
158,box
159,0
160,if (!(tmpstream = jas_stream_memopen(0, 0)))
161,!(tmpstream = jas_stream_memopen(0, 0))
162,tmpstream = jas_stream_memopen(0, 0)
163,tmpstream
164,jas_stream_memopen(0, 0)
165,0
166,0
167,<empty>
168,goto error;
169,if (!(box = jp2_box_create(JP2_BOX_IHDR)))
170,!(box = jp2_box_create(JP2_BOX_IHDR))
171,box = jp2_box_create(JP2_BOX_IHDR)
172,box
173,jp2_box_create(JP2_BOX_IHDR)
174,JP2_BOX_IHDR
175,<empty>
176,goto error;
177,ihdr = &box->data.ihdr
178,ihdr
179,&box->data.ihdr
180,box->data.ihdr
181,box->data
182,box
183,data
184,ihdr
185,ihdr->width = jas_image_width(image)
186,ihdr->width
187,ihdr
188,width
189,jas_image_width(image)
190,image
191,ihdr->height = jas_image_height(image)
192,ihdr->height
193,ihdr
194,height
195,jas_image_height(image)
196,image
197,ihdr->numcmpts = jas_image_numcmpts(image)
198,ihdr->numcmpts
199,ihdr
200,numcmpts
201,jas_image_numcmpts(image)
202,image
203,ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),
204,	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL
205,ihdr->bpc
206,ihdr
207,bpc
208,allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),
209,	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL
210,allcmptssame
211,JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),
212,	  jas_image_cmptprec(image, 0))
213,jas_image_cmptsgnd(image, 0)
214,image
215,0
216,jas_image_cmptprec(image, 0)
217,image
218,0
219,JP2_IHDR_BPCNULL
220,ihdr->comptype = JP2_IHDR_COMPTYPE
221,ihdr->comptype
222,ihdr
223,comptype
224,JP2_IHDR_COMPTYPE
225,ihdr->csunk = 0
226,ihdr->csunk
227,ihdr
228,csunk
229,0
230,ihdr->ipr = 0
231,ihdr->ipr
232,ihdr
233,ipr
234,0
235,if (jp2_box_put(box, tmpstream))
236,jp2_box_put(box, tmpstream)
237,box
238,tmpstream
239,<empty>
240,goto error;
241,jp2_box_destroy(box)
242,box
243,box = 0
244,box
245,0
246,if (!allcmptssame)
247,!allcmptssame
248,allcmptssame
249,<empty>
250,if (!(box = jp2_box_create(JP2_BOX_BPCC)))
251,!(box = jp2_box_create(JP2_BOX_BPCC))
252,box = jp2_box_create(JP2_BOX_BPCC)
253,box
254,jp2_box_create(JP2_BOX_BPCC)
255,JP2_BOX_BPCC
256,<empty>
257,goto error;
258,bpcc = &box->data.bpcc
259,bpcc
260,&box->data.bpcc
261,box->data.bpcc
262,box->data
263,box
264,data
265,bpcc
266,bpcc->numcmpts = jas_image_numcmpts(image)
267,bpcc->numcmpts
268,bpcc
269,numcmpts
270,jas_image_numcmpts(image)
271,image
272,if (!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *
273,		  sizeof(uint_fast8_t))))
274,!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *
275,		  sizeof(uint_fast8_t)))
276,bpcc->bpcs = jas_malloc(bpcc->numcmpts *
277,		  sizeof(uint_fast8_t))
278,bpcc->bpcs
279,bpcc
280,bpcs
281,jas_malloc(bpcc->numcmpts *
282,		  sizeof(uint_fast8_t))
283,bpcc->numcmpts *
284,		  sizeof(uint_fast8_t)
285,bpcc->numcmpts
286,bpcc
287,numcmpts
288,sizeof(uint_fast8_t)
289,uint_fast8_t
290,<empty>
291,goto error;
292,for (cmptno = 0;cmptno < bpcc->numcmpts;++cmptno)
293,<empty>
294,cmptno = 0
295,cmptno
296,0
297,cmptno < bpcc->numcmpts
298,cmptno
299,bpcc->numcmpts
300,bpcc
301,numcmpts
302,++cmptno
303,cmptno
304,<empty>
305,bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,
306,			  cmptno), jas_image_cmptprec(image, cmptno))
307,bpcc->bpcs[cmptno]
308,bpcc->bpcs
309,bpcc
310,bpcs
311,cmptno
312,JP2_SPTOBPC(jas_image_cmptsgnd(image,
313,			  cmptno), jas_image_cmptprec(image, cmptno))
314,jas_image_cmptsgnd(image,
315,			  cmptno)
316,image
317,cmptno
318,jas_image_cmptprec(image, cmptno)
319,image
320,cmptno
321,if (jp2_box_put(box, tmpstream))
322,jp2_box_put(box, tmpstream)
323,box
324,tmpstream
325,<empty>
326,goto error;
327,jp2_box_destroy(box)
328,box
329,box = 0
330,box
331,0
332,if (!(box = jp2_box_create(JP2_BOX_COLR)))
333,!(box = jp2_box_create(JP2_BOX_COLR))
334,box = jp2_box_create(JP2_BOX_COLR)
335,box
336,jp2_box_create(JP2_BOX_COLR)
337,JP2_BOX_COLR
338,<empty>
339,goto error;
340,colr = &box->data.colr
341,colr
342,&box->data.colr
343,box->data.colr
344,box->data
345,box
346,data
347,colr
348,switch(jas_image_clrspc(image))
349,jas_image_clrspc(image)
350,image
351,<empty>
352,case JAS_CLRSPC_SRGB:
353,JAS_CLRSPC_SRGB
354,case JAS_CLRSPC_SYCBCR:
355,JAS_CLRSPC_SYCBCR
356,case JAS_CLRSPC_SGRAY:
357,JAS_CLRSPC_SGRAY
358,colr->method = JP2_COLR_ENUM
359,colr->method
360,colr
361,method
362,JP2_COLR_ENUM
363,colr->csid = clrspctojp2(jas_image_clrspc(image))
364,colr->csid
365,colr
366,csid
367,clrspctojp2(jas_image_clrspc(image))
368,jas_image_clrspc(image)
369,image
370,colr->pri = JP2_COLR_PRI
371,colr->pri
372,colr
373,pri
374,JP2_COLR_PRI
375,colr->approx = 0
376,colr->approx
377,colr
378,approx
379,0
380,break;
381,default:
382,colr->method = JP2_COLR_ICC
383,colr->method
384,colr
385,method
386,JP2_COLR_ICC
387,colr->pri = JP2_COLR_PRI
388,colr->pri
389,colr
390,pri
391,JP2_COLR_PRI
392,colr->approx = 0
393,colr->approx
394,colr
395,approx
396,0
397,iccprof = jas_iccprof_createfromcmprof(jas_image_cmprof(image))
398,iccprof
399,jas_iccprof_createfromcmprof(jas_image_cmprof(image))
400,jas_image_cmprof(image)
401,image
402,assert(iccprof)
403,iccprof
404,iccstream = jas_stream_memopen(0, 0)
405,iccstream
406,jas_stream_memopen(0, 0)
407,0
408,0
409,assert(iccstream)
410,iccstream
411,if (jas_iccprof_save(iccprof, iccstream))
412,jas_iccprof_save(iccprof, iccstream)
413,iccprof
414,iccstream
415,<empty>
416,abort()
417,if ((pos = jas_stream_tell(iccstream)) < 0)
418,(pos = jas_stream_tell(iccstream)) < 0
419,pos = jas_stream_tell(iccstream)
420,pos
421,jas_stream_tell(iccstream)
422,iccstream
423,0
424,<empty>
425,abort()
426,colr->iccplen = pos
427,colr->iccplen
428,colr
429,iccplen
430,pos
431,colr->iccp = jas_malloc(pos)
432,colr->iccp
433,colr
434,iccp
435,jas_malloc(pos)
436,pos
437,assert(colr->iccp)
438,colr->iccp
439,colr
440,iccp
441,jas_stream_rewind(iccstream)
442,iccstream
443,if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) != colr->iccplen)
444,jas_stream_read(iccstream, colr->iccp, colr->iccplen) != colr->iccplen
445,jas_stream_read(iccstream, colr->iccp, colr->iccplen)
446,iccstream
447,colr->iccp
448,colr
449,iccp
450,colr->iccplen
451,colr
452,iccplen
453,colr->iccplen
454,colr
455,iccplen
456,<empty>
457,abort()
458,jas_stream_close(iccstream)
459,iccstream
460,jas_iccprof_destroy(iccprof)
461,iccprof
462,break;
463,if (jp2_box_put(box, tmpstream))
464,jp2_box_put(box, tmpstream)
465,box
466,tmpstream
467,<empty>
468,goto error;
469,jp2_box_destroy(box)
470,box
471,box = 0
472,box
473,0
474,needcdef = 1
475,needcdef
476,1
477,switch(jas_clrspc_fam(jas_image_clrspc(image)))
478,jas_clrspc_fam(jas_image_clrspc(image))
479,jas_image_clrspc(image)
480,image
481,<empty>
482,case JAS_CLRSPC_FAM_RGB:
483,JAS_CLRSPC_FAM_RGB
484,if (jas_image_cmpttype(image, 0) ==
485,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&
486,		  jas_image_cmpttype(image, 1) ==
487,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&
488,		  jas_image_cmpttype(image, 2) ==
489,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))
490,jas_image_cmpttype(image, 0) ==
491,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&
492,		  jas_image_cmpttype(image, 1) ==
493,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&
494,		  jas_image_cmpttype(image, 2) ==
495,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
496,jas_image_cmpttype(image, 0) ==
497,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&
498,		  jas_image_cmpttype(image, 1) ==
499,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
500,jas_image_cmpttype(image, 0) ==
501,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)
502,jas_image_cmpttype(image, 0)
503,image
504,0
505,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)
506,JAS_CLRSPC_CHANIND_RGB_R
507,jas_image_cmpttype(image, 1) ==
508,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
509,jas_image_cmpttype(image, 1)
510,image
511,1
512,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
513,JAS_CLRSPC_CHANIND_RGB_G
514,jas_image_cmpttype(image, 2) ==
515,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
516,jas_image_cmpttype(image, 2)
517,image
518,2
519,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
520,JAS_CLRSPC_CHANIND_RGB_B
521,<empty>
522,needcdef = 0
523,needcdef
524,0
525,break;
526,case JAS_CLRSPC_FAM_YCBCR:
527,JAS_CLRSPC_FAM_YCBCR
528,if (jas_image_cmpttype(image, 0) ==
529,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&
530,		  jas_image_cmpttype(image, 1) ==
531,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&
532,		  jas_image_cmpttype(image, 2) ==
533,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))
534,jas_image_cmpttype(image, 0) ==
535,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&
536,		  jas_image_cmpttype(image, 1) ==
537,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&
538,		  jas_image_cmpttype(image, 2) ==
539,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
540,jas_image_cmpttype(image, 0) ==
541,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&
542,		  jas_image_cmpttype(image, 1) ==
543,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
544,jas_image_cmpttype(image, 0) ==
545,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y)
546,jas_image_cmpttype(image, 0)
547,image
548,0
549,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y)
550,JAS_CLRSPC_CHANIND_YCBCR_Y
551,jas_image_cmpttype(image, 1) ==
552,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
553,jas_image_cmpttype(image, 1)
554,image
555,1
556,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
557,JAS_CLRSPC_CHANIND_YCBCR_CB
558,jas_image_cmpttype(image, 2) ==
559,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
560,jas_image_cmpttype(image, 2)
561,image
562,2
563,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
564,JAS_CLRSPC_CHANIND_YCBCR_CR
565,<empty>
566,needcdef = 0
567,needcdef
568,0
569,break;
570,case JAS_CLRSPC_FAM_GRAY:
571,JAS_CLRSPC_FAM_GRAY
572,if (jas_image_cmpttype(image, 0) ==
573,		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))
574,jas_image_cmpttype(image, 0) ==
575,		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y)
576,jas_image_cmpttype(image, 0)
577,image
578,0
579,JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y)
580,JAS_IMAGE_CT_GRAY_Y
581,<empty>
582,needcdef = 0
583,needcdef
584,0
585,break;
586,default:
587,abort()
588,break;
589,if (needcdef)
590,needcdef
591,<empty>
592,if (!(box = jp2_box_create(JP2_BOX_CDEF)))
593,!(box = jp2_box_create(JP2_BOX_CDEF))
594,box = jp2_box_create(JP2_BOX_CDEF)
595,box
596,jp2_box_create(JP2_BOX_CDEF)
597,JP2_BOX_CDEF
598,<empty>
599,goto error;
600,cdef = &box->data.cdef
601,cdef
602,&box->data.cdef
603,box->data.cdef
604,box->data
605,box
606,data
607,cdef
608,cdef->numchans = jas_image_numcmpts(image)
609,cdef->numchans
610,cdef
611,numchans
612,jas_image_numcmpts(image)
613,image
614,cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t))
615,cdef->ents
616,cdef
617,ents
618,jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t))
619,cdef->numchans * sizeof(jp2_cdefchan_t)
620,cdef->numchans
621,cdef
622,numchans
623,sizeof(jp2_cdefchan_t)
624,jp2_cdefchan_t
625,for (i = 0;i < jas_image_numcmpts(image);++i)
626,<empty>
627,i = 0
628,i
629,0
630,i < jas_image_numcmpts(image)
631,i
632,jas_image_numcmpts(image)
633,image
634,++i
635,i
636,<empty>
637,cdefchanent = &cdef->ents[i]
638,cdefchanent
639,&cdef->ents[i]
640,cdef->ents[i]
641,cdef->ents
642,cdef
643,ents
644,i
645,cdefchanent->channo = i
646,cdefchanent->channo
647,cdefchanent
648,channo
649,i
650,typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i))
651,typeasoc
652,jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i))
653,jas_image_clrspc(image)
654,image
655,jas_image_cmpttype(image, i)
656,image
657,i
658,cdefchanent->type = typeasoc >> 16
659,cdefchanent->type
660,cdefchanent
661,type
662,typeasoc >> 16
663,typeasoc
664,16
665,cdefchanent->assoc = typeasoc & 0x7fff
666,cdefchanent->assoc
667,cdefchanent
668,assoc
669,typeasoc & 0x7fff
670,typeasoc
671,0x7fff
672,if (jp2_box_put(box, tmpstream))
673,jp2_box_put(box, tmpstream)
674,box
675,tmpstream
676,<empty>
677,goto error;
678,jp2_box_destroy(box)
679,box
680,box = 0
681,box
682,0
683,len = jas_stream_tell(tmpstream)
684,len
685,jas_stream_tell(tmpstream)
686,tmpstream
687,jas_stream_rewind(tmpstream)
688,tmpstream
689,if (!(box = jp2_box_create(JP2_BOX_JP2H)))
690,!(box = jp2_box_create(JP2_BOX_JP2H))
691,box = jp2_box_create(JP2_BOX_JP2H)
692,box
693,jp2_box_create(JP2_BOX_JP2H)
694,JP2_BOX_JP2H
695,<empty>
696,goto error;
697,box->len = len + JP2_BOX_HDRLEN(false)
698,box->len
699,box
700,len
701,len + JP2_BOX_HDRLEN(false)
702,len
703,JP2_BOX_HDRLEN(false)
704,false
705,if (jp2_box_put(box, out))
706,jp2_box_put(box, out)
707,box
708,out
709,<empty>
710,goto error;
711,jp2_box_destroy(box)
712,box
713,box = 0
714,box
715,0
716,if (jas_stream_copy(out, tmpstream, len))
717,jas_stream_copy(out, tmpstream, len)
718,out
719,tmpstream
720,len
721,<empty>
722,goto error;
723,jas_stream_close(tmpstream)
724,tmpstream
725,tmpstream = 0
726,tmpstream
727,0
728,if (!(box = jp2_box_create(JP2_BOX_JP2C)))
729,!(box = jp2_box_create(JP2_BOX_JP2C))
730,box = jp2_box_create(JP2_BOX_JP2C)
731,box
732,jp2_box_create(JP2_BOX_JP2C)
733,JP2_BOX_JP2C
734,<empty>
735,goto error;
736,box->len = 0
737,box->len
738,box
739,len
740,0
741,if (jp2_box_put(box, out))
742,jp2_box_put(box, out)
743,box
744,out
745,<empty>
746,goto error;
747,jp2_box_destroy(box)
748,box
749,box = 0
750,box
751,0
752,overhead = jas_stream_getrwcount(out)
753,overhead
754,jas_stream_getrwcount(out)
755,out
756,sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),
757,	  (unsigned long) overhead)
758,buf
759,"%s\n_jp2overhead=%lu\n"
760,optstr ? optstr : ""
761,optstr
762,optstr
763,""
764,(unsigned long) overhead
765,unsigned long
766,overhead
767,if (jpc_encode(image, out, buf))
768,jpc_encode(image, out, buf)
769,image
770,out
771,buf
772,<empty>
773,goto error;
774,return 0;
775,0
776,abort()
777,error:
778,
779,	if (box) {
780,		jp2_box_destroy(box);
781,	}
782,if (box)
783,box
784,<empty>
785,jp2_box_destroy(box)
786,box
787,if (tmpstream)
788,tmpstream
789,<empty>
790,jas_stream_close(tmpstream)
791,tmpstream
792,return -1;
793,-1
794,1
795,RET
796,jas_image_t *image
797,jas_stream_t *out
798,char *optstr
799,RET
800,int jp2_encode (jas_image_t *image,jas_stream_t *out,char *optstr)
801,jas_image_t *image
802,jas_stream_t *out
803,char *optstr
804,<empty>
805,jp2_box_t* box
806,jp2_ftyp_t* ftyp
807,jp2_ihdr_t* ihdr
808,jas_stream_t* tmpstream
809,int allcmptssame
810,jp2_bpcc_t* bpcc
811,long len
812,uint_fast16_t cmptno
813,jp2_colr_t* colr
814,char[4096] buf
815,uint_fast32_t overhead
816,jp2_cdefchan_t* cdefchanent
817,jp2_cdef_t* cdef
818,int i
819,uint_fast32_t typeasoc
820,jas_iccprof_t* iccprof
821,jas_stream_t* iccstream
822,int pos
823,int needcdef
824,int prec
825,int sgnd
826,box = 0
827,box
828,0
829,tmpstream = 0
830,tmpstream
831,0
832,allcmptssame = 1
833,allcmptssame
834,1
835,sgnd = jas_image_cmptsgnd(image, 0)
836,sgnd
837,jas_image_cmptsgnd(image, 0)
838,image
839,0
840,prec = jas_image_cmptprec(image, 0)
841,prec
842,jas_image_cmptprec(image, 0)
843,image
844,0
845,for (i = 1;i < jas_image_numcmpts(image);++i)
846,<empty>
847,i = 1
848,i
849,1
850,i < jas_image_numcmpts(image)
851,i
852,jas_image_numcmpts(image)
853,image
854,++i
855,i
856,<empty>
857,if (jas_image_cmptsgnd(image, i) != sgnd ||
858,		  jas_image_cmptprec(image, i) != prec)
859,jas_image_cmptsgnd(image, i) != sgnd ||
860,		  jas_image_cmptprec(image, i) != prec
861,jas_image_cmptsgnd(image, i) != sgnd
862,jas_image_cmptsgnd(image, i)
863,image
864,i
865,sgnd
866,jas_image_cmptprec(image, i) != prec
867,jas_image_cmptprec(image, i)
868,image
869,i
870,prec
871,<empty>
872,allcmptssame = 0
873,allcmptssame
874,0
875,break;
876,if (!(box = jp2_box_create(JP2_BOX_JP)))
877,!(box = jp2_box_create(JP2_BOX_JP))
878,box = jp2_box_create(JP2_BOX_JP)
879,box
880,jp2_box_create(JP2_BOX_JP)
881,JP2_BOX_JP
882,<empty>
883,goto error;
884,box->data.jp.magic = JP2_JP_MAGIC
885,box->data.jp.magic
886,box->data.jp
887,box->data
888,box
889,data
890,jp
891,magic
892,JP2_JP_MAGIC
893,if (jp2_box_put(box, out))
894,jp2_box_put(box, out)
895,box
896,out
897,<empty>
898,goto error;
899,jp2_box_destroy(box)
900,box
901,box = 0
902,box
903,0
904,if (!(box = jp2_box_create(JP2_BOX_FTYP)))
905,!(box = jp2_box_create(JP2_BOX_FTYP))
906,box = jp2_box_create(JP2_BOX_FTYP)
907,box
908,jp2_box_create(JP2_BOX_FTYP)
909,JP2_BOX_FTYP
910,<empty>
911,goto error;
912,ftyp = &box->data.ftyp
913,ftyp
914,&box->data.ftyp
915,box->data.ftyp
916,box->data
917,box
918,data
919,ftyp
920,ftyp->majver = JP2_FTYP_MAJVER
921,ftyp->majver
922,ftyp
923,majver
924,JP2_FTYP_MAJVER
925,ftyp->minver = JP2_FTYP_MINVER
926,ftyp->minver
927,ftyp
928,minver
929,JP2_FTYP_MINVER
930,ftyp->numcompatcodes = 1
931,ftyp->numcompatcodes
932,ftyp
933,numcompatcodes
934,1
935,ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE
936,ftyp->compatcodes[0]
937,ftyp->compatcodes
938,ftyp
939,compatcodes
940,0
941,JP2_FTYP_COMPATCODE
942,if (jp2_box_put(box, out))
943,jp2_box_put(box, out)
944,box
945,out
946,<empty>
947,goto error;
948,jp2_box_destroy(box)
949,box
950,box = 0
951,box
952,0
953,if (!(tmpstream = jas_stream_memopen(0, 0)))
954,!(tmpstream = jas_stream_memopen(0, 0))
955,tmpstream = jas_stream_memopen(0, 0)
956,tmpstream
957,jas_stream_memopen(0, 0)
958,0
959,0
960,<empty>
961,goto error;
962,if (!(box = jp2_box_create(JP2_BOX_IHDR)))
963,!(box = jp2_box_create(JP2_BOX_IHDR))
964,box = jp2_box_create(JP2_BOX_IHDR)
965,box
966,jp2_box_create(JP2_BOX_IHDR)
967,JP2_BOX_IHDR
968,<empty>
969,goto error;
970,ihdr = &box->data.ihdr
971,ihdr
972,&box->data.ihdr
973,box->data.ihdr
974,box->data
975,box
976,data
977,ihdr
978,ihdr->width = jas_image_width(image)
979,ihdr->width
980,ihdr
981,width
982,jas_image_width(image)
983,image
984,ihdr->height = jas_image_height(image)
985,ihdr->height
986,ihdr
987,height
988,jas_image_height(image)
989,image
990,ihdr->numcmpts = jas_image_numcmpts(image)
991,ihdr->numcmpts
992,ihdr
993,numcmpts
994,jas_image_numcmpts(image)
995,image
996,ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),
997,	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL
998,ihdr->bpc
999,ihdr
1000,bpc
1001,allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),
1002,	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL
1003,allcmptssame
1004,JP2_SPTOBPC(jas_image_cmptsgnd(image, 0),
1005,	  jas_image_cmptprec(image, 0))
1006,jas_image_cmptsgnd(image, 0)
1007,image
1008,0
1009,jas_image_cmptprec(image, 0)
1010,image
1011,0
1012,JP2_IHDR_BPCNULL
1013,ihdr->comptype = JP2_IHDR_COMPTYPE
1014,ihdr->comptype
1015,ihdr
1016,comptype
1017,JP2_IHDR_COMPTYPE
1018,ihdr->csunk = 0
1019,ihdr->csunk
1020,ihdr
1021,csunk
1022,0
1023,ihdr->ipr = 0
1024,ihdr->ipr
1025,ihdr
1026,ipr
1027,0
1028,if (jp2_box_put(box, tmpstream))
1029,jp2_box_put(box, tmpstream)
1030,box
1031,tmpstream
1032,<empty>
1033,goto error;
1034,jp2_box_destroy(box)
1035,box
1036,box = 0
1037,box
1038,0
1039,if (!allcmptssame)
1040,!allcmptssame
1041,allcmptssame
1042,<empty>
1043,if (!(box = jp2_box_create(JP2_BOX_BPCC)))
1044,!(box = jp2_box_create(JP2_BOX_BPCC))
1045,box = jp2_box_create(JP2_BOX_BPCC)
1046,box
1047,jp2_box_create(JP2_BOX_BPCC)
1048,JP2_BOX_BPCC
1049,<empty>
1050,goto error;
1051,bpcc = &box->data.bpcc
1052,bpcc
1053,&box->data.bpcc
1054,box->data.bpcc
1055,box->data
1056,box
1057,data
1058,bpcc
1059,bpcc->numcmpts = jas_image_numcmpts(image)
1060,bpcc->numcmpts
1061,bpcc
1062,numcmpts
1063,jas_image_numcmpts(image)
1064,image
1065,if (!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *
1066,		  sizeof(uint_fast8_t))))
1067,!(bpcc->bpcs = jas_malloc(bpcc->numcmpts *
1068,		  sizeof(uint_fast8_t)))
1069,bpcc->bpcs = jas_malloc(bpcc->numcmpts *
1070,		  sizeof(uint_fast8_t))
1071,bpcc->bpcs
1072,bpcc
1073,bpcs
1074,jas_malloc(bpcc->numcmpts *
1075,		  sizeof(uint_fast8_t))
1076,bpcc->numcmpts *
1077,		  sizeof(uint_fast8_t)
1078,bpcc->numcmpts
1079,bpcc
1080,numcmpts
1081,sizeof(uint_fast8_t)
1082,uint_fast8_t
1083,<empty>
1084,goto error;
1085,for (cmptno = 0;cmptno < bpcc->numcmpts;++cmptno)
1086,<empty>
1087,cmptno = 0
1088,cmptno
1089,0
1090,cmptno < bpcc->numcmpts
1091,cmptno
1092,bpcc->numcmpts
1093,bpcc
1094,numcmpts
1095,++cmptno
1096,cmptno
1097,<empty>
1098,bpcc->bpcs[cmptno] = JP2_SPTOBPC(jas_image_cmptsgnd(image,
1099,			  cmptno), jas_image_cmptprec(image, cmptno))
1100,bpcc->bpcs[cmptno]
1101,bpcc->bpcs
1102,bpcc
1103,bpcs
1104,cmptno
1105,JP2_SPTOBPC(jas_image_cmptsgnd(image,
1106,			  cmptno), jas_image_cmptprec(image, cmptno))
1107,jas_image_cmptsgnd(image,
1108,			  cmptno)
1109,image
1110,cmptno
1111,jas_image_cmptprec(image, cmptno)
1112,image
1113,cmptno
1114,if (jp2_box_put(box, tmpstream))
1115,jp2_box_put(box, tmpstream)
1116,box
1117,tmpstream
1118,<empty>
1119,goto error;
1120,jp2_box_destroy(box)
1121,box
1122,box = 0
1123,box
1124,0
1125,if (!(box = jp2_box_create(JP2_BOX_COLR)))
1126,!(box = jp2_box_create(JP2_BOX_COLR))
1127,box = jp2_box_create(JP2_BOX_COLR)
1128,box
1129,jp2_box_create(JP2_BOX_COLR)
1130,JP2_BOX_COLR
1131,<empty>
1132,goto error;
1133,colr = &box->data.colr
1134,colr
1135,&box->data.colr
1136,box->data.colr
1137,box->data
1138,box
1139,data
1140,colr
1141,switch(jas_image_clrspc(image))
1142,jas_image_clrspc(image)
1143,image
1144,<empty>
1145,case JAS_CLRSPC_SRGB:
1146,JAS_CLRSPC_SRGB
1147,case JAS_CLRSPC_SYCBCR:
1148,JAS_CLRSPC_SYCBCR
1149,case JAS_CLRSPC_SGRAY:
1150,JAS_CLRSPC_SGRAY
1151,colr->method = JP2_COLR_ENUM
1152,colr->method
1153,colr
1154,method
1155,JP2_COLR_ENUM
1156,colr->csid = clrspctojp2(jas_image_clrspc(image))
1157,colr->csid
1158,colr
1159,csid
1160,clrspctojp2(jas_image_clrspc(image))
1161,jas_image_clrspc(image)
1162,image
1163,colr->pri = JP2_COLR_PRI
1164,colr->pri
1165,colr
1166,pri
1167,JP2_COLR_PRI
1168,colr->approx = 0
1169,colr->approx
1170,colr
1171,approx
1172,0
1173,break;
1174,default:
1175,colr->method = JP2_COLR_ICC
1176,colr->method
1177,colr
1178,method
1179,JP2_COLR_ICC
1180,colr->pri = JP2_COLR_PRI
1181,colr->pri
1182,colr
1183,pri
1184,JP2_COLR_PRI
1185,colr->approx = 0
1186,colr->approx
1187,colr
1188,approx
1189,0
1190,iccprof = jas_iccprof_createfromcmprof(jas_image_cmprof(image))
1191,iccprof
1192,jas_iccprof_createfromcmprof(jas_image_cmprof(image))
1193,jas_image_cmprof(image)
1194,image
1195,assert(iccprof)
1196,iccprof
1197,iccstream = jas_stream_memopen(0, 0)
1198,iccstream
1199,jas_stream_memopen(0, 0)
1200,0
1201,0
1202,assert(iccstream)
1203,iccstream
1204,if (jas_iccprof_save(iccprof, iccstream))
1205,jas_iccprof_save(iccprof, iccstream)
1206,iccprof
1207,iccstream
1208,<empty>
1209,abort()
1210,if ((pos = jas_stream_tell(iccstream)) < 0)
1211,(pos = jas_stream_tell(iccstream)) < 0
1212,pos = jas_stream_tell(iccstream)
1213,pos
1214,jas_stream_tell(iccstream)
1215,iccstream
1216,0
1217,<empty>
1218,abort()
1219,colr->iccplen = pos
1220,colr->iccplen
1221,colr
1222,iccplen
1223,pos
1224,colr->iccp = jas_malloc(pos)
1225,colr->iccp
1226,colr
1227,iccp
1228,jas_malloc(pos)
1229,pos
1230,assert(colr->iccp)
1231,colr->iccp
1232,colr
1233,iccp
1234,jas_stream_rewind(iccstream)
1235,iccstream
1236,if (jas_stream_read(iccstream, colr->iccp, colr->iccplen) != colr->iccplen)
1237,jas_stream_read(iccstream, colr->iccp, colr->iccplen) != colr->iccplen
1238,jas_stream_read(iccstream, colr->iccp, colr->iccplen)
1239,iccstream
1240,colr->iccp
1241,colr
1242,iccp
1243,colr->iccplen
1244,colr
1245,iccplen
1246,colr->iccplen
1247,colr
1248,iccplen
1249,<empty>
1250,abort()
1251,jas_stream_close(iccstream)
1252,iccstream
1253,jas_iccprof_destroy(iccprof)
1254,iccprof
1255,break;
1256,if (jp2_box_put(box, tmpstream))
1257,jp2_box_put(box, tmpstream)
1258,box
1259,tmpstream
1260,<empty>
1261,goto error;
1262,jp2_box_destroy(box)
1263,box
1264,box = 0
1265,box
1266,0
1267,needcdef = 1
1268,needcdef
1269,1
1270,switch(jas_clrspc_fam(jas_image_clrspc(image)))
1271,jas_clrspc_fam(jas_image_clrspc(image))
1272,jas_image_clrspc(image)
1273,image
1274,<empty>
1275,case JAS_CLRSPC_FAM_RGB:
1276,JAS_CLRSPC_FAM_RGB
1277,if (jas_image_cmpttype(image, 0) ==
1278,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&
1279,		  jas_image_cmpttype(image, 1) ==
1280,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&
1281,		  jas_image_cmpttype(image, 2) ==
1282,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))
1283,jas_image_cmpttype(image, 0) ==
1284,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&
1285,		  jas_image_cmpttype(image, 1) ==
1286,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) &&
1287,		  jas_image_cmpttype(image, 2) ==
1288,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
1289,jas_image_cmpttype(image, 0) ==
1290,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) &&
1291,		  jas_image_cmpttype(image, 1) ==
1292,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
1293,jas_image_cmpttype(image, 0) ==
1294,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)
1295,jas_image_cmpttype(image, 0)
1296,image
1297,0
1298,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)
1299,JAS_CLRSPC_CHANIND_RGB_R
1300,jas_image_cmpttype(image, 1) ==
1301,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
1302,jas_image_cmpttype(image, 1)
1303,image
1304,1
1305,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)
1306,JAS_CLRSPC_CHANIND_RGB_G
1307,jas_image_cmpttype(image, 2) ==
1308,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
1309,jas_image_cmpttype(image, 2)
1310,image
1311,2
1312,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)
1313,JAS_CLRSPC_CHANIND_RGB_B
1314,<empty>
1315,needcdef = 0
1316,needcdef
1317,0
1318,break;
1319,case JAS_CLRSPC_FAM_YCBCR:
1320,JAS_CLRSPC_FAM_YCBCR
1321,if (jas_image_cmpttype(image, 0) ==
1322,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&
1323,		  jas_image_cmpttype(image, 1) ==
1324,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&
1325,		  jas_image_cmpttype(image, 2) ==
1326,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR))
1327,jas_image_cmpttype(image, 0) ==
1328,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&
1329,		  jas_image_cmpttype(image, 1) ==
1330,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB) &&
1331,		  jas_image_cmpttype(image, 2) ==
1332,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
1333,jas_image_cmpttype(image, 0) ==
1334,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y) &&
1335,		  jas_image_cmpttype(image, 1) ==
1336,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
1337,jas_image_cmpttype(image, 0) ==
1338,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y)
1339,jas_image_cmpttype(image, 0)
1340,image
1341,0
1342,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_Y)
1343,JAS_CLRSPC_CHANIND_YCBCR_Y
1344,jas_image_cmpttype(image, 1) ==
1345,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
1346,jas_image_cmpttype(image, 1)
1347,image
1348,1
1349,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CB)
1350,JAS_CLRSPC_CHANIND_YCBCR_CB
1351,jas_image_cmpttype(image, 2) ==
1352,		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
1353,jas_image_cmpttype(image, 2)
1354,image
1355,2
1356,JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_YCBCR_CR)
1357,JAS_CLRSPC_CHANIND_YCBCR_CR
1358,<empty>
1359,needcdef = 0
1360,needcdef
1361,0
1362,break;
1363,case JAS_CLRSPC_FAM_GRAY:
1364,JAS_CLRSPC_FAM_GRAY
1365,if (jas_image_cmpttype(image, 0) ==
1366,		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y))
1367,jas_image_cmpttype(image, 0) ==
1368,		  JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y)
1369,jas_image_cmpttype(image, 0)
1370,image
1371,0
1372,JAS_IMAGE_CT_COLOR(JAS_IMAGE_CT_GRAY_Y)
1373,JAS_IMAGE_CT_GRAY_Y
1374,<empty>
1375,needcdef = 0
1376,needcdef
1377,0
1378,break;
1379,default:
1380,abort()
1381,break;
1382,if (needcdef)
1383,needcdef
1384,<empty>
1385,if (!(box = jp2_box_create(JP2_BOX_CDEF)))
1386,!(box = jp2_box_create(JP2_BOX_CDEF))
1387,box = jp2_box_create(JP2_BOX_CDEF)
1388,box
1389,jp2_box_create(JP2_BOX_CDEF)
1390,JP2_BOX_CDEF
1391,<empty>
1392,goto error;
1393,cdef = &box->data.cdef
1394,cdef
1395,&box->data.cdef
1396,box->data.cdef
1397,box->data
1398,box
1399,data
1400,cdef
1401,cdef->numchans = jas_image_numcmpts(image)
1402,cdef->numchans
1403,cdef
1404,numchans
1405,jas_image_numcmpts(image)
1406,image
1407,cdef->ents = jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t))
1408,cdef->ents
1409,cdef
1410,ents
1411,jas_malloc(cdef->numchans * sizeof(jp2_cdefchan_t))
1412,cdef->numchans * sizeof(jp2_cdefchan_t)
1413,cdef->numchans
1414,cdef
1415,numchans
1416,sizeof(jp2_cdefchan_t)
1417,jp2_cdefchan_t
1418,for (i = 0;i < jas_image_numcmpts(image);++i)
1419,<empty>
1420,i = 0
1421,i
1422,0
1423,i < jas_image_numcmpts(image)
1424,i
1425,jas_image_numcmpts(image)
1426,image
1427,++i
1428,i
1429,<empty>
1430,cdefchanent = &cdef->ents[i]
1431,cdefchanent
1432,&cdef->ents[i]
1433,cdef->ents[i]
1434,cdef->ents
1435,cdef
1436,ents
1437,i
1438,cdefchanent->channo = i
1439,cdefchanent->channo
1440,cdefchanent
1441,channo
1442,i
1443,typeasoc = jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i))
1444,typeasoc
1445,jp2_gettypeasoc(jas_image_clrspc(image), jas_image_cmpttype(image, i))
1446,jas_image_clrspc(image)
1447,image
1448,jas_image_cmpttype(image, i)
1449,image
1450,i
1451,cdefchanent->type = typeasoc >> 16
1452,cdefchanent->type
1453,cdefchanent
1454,type
1455,typeasoc >> 16
1456,typeasoc
1457,16
1458,cdefchanent->assoc = typeasoc & 0x7fff
1459,cdefchanent->assoc
1460,cdefchanent
1461,assoc
1462,typeasoc & 0x7fff
1463,typeasoc
1464,0x7fff
1465,if (jp2_box_put(box, tmpstream))
1466,jp2_box_put(box, tmpstream)
1467,box
1468,tmpstream
1469,<empty>
1470,goto error;
1471,jp2_box_destroy(box)
1472,box
1473,box = 0
1474,box
1475,0
1476,len = jas_stream_tell(tmpstream)
1477,len
1478,jas_stream_tell(tmpstream)
1479,tmpstream
1480,jas_stream_rewind(tmpstream)
1481,tmpstream
1482,if (!(box = jp2_box_create(JP2_BOX_JP2H)))
1483,!(box = jp2_box_create(JP2_BOX_JP2H))
1484,box = jp2_box_create(JP2_BOX_JP2H)
1485,box
1486,jp2_box_create(JP2_BOX_JP2H)
1487,JP2_BOX_JP2H
1488,<empty>
1489,goto error;
1490,box->len = len + JP2_BOX_HDRLEN(false)
1491,box->len
1492,box
1493,len
1494,len + JP2_BOX_HDRLEN(false)
1495,len
1496,JP2_BOX_HDRLEN(false)
1497,false
1498,if (jp2_box_put(box, out))
1499,jp2_box_put(box, out)
1500,box
1501,out
1502,<empty>
1503,goto error;
1504,jp2_box_destroy(box)
1505,box
1506,box = 0
1507,box
1508,0
1509,if (jas_stream_copy(out, tmpstream, len))
1510,jas_stream_copy(out, tmpstream, len)
1511,out
1512,tmpstream
1513,len
1514,<empty>
1515,goto error;
1516,jas_stream_close(tmpstream)
1517,tmpstream
1518,tmpstream = 0
1519,tmpstream
1520,0
1521,if (!(box = jp2_box_create(JP2_BOX_JP2C)))
1522,!(box = jp2_box_create(JP2_BOX_JP2C))
1523,box = jp2_box_create(JP2_BOX_JP2C)
1524,box
1525,jp2_box_create(JP2_BOX_JP2C)
1526,JP2_BOX_JP2C
1527,<empty>
1528,goto error;
1529,box->len = 0
1530,box->len
1531,box
1532,len
1533,0
1534,if (jp2_box_put(box, out))
1535,jp2_box_put(box, out)
1536,box
1537,out
1538,<empty>
1539,goto error;
1540,jp2_box_destroy(box)
1541,box
1542,box = 0
1543,box
1544,0
1545,overhead = jas_stream_getrwcount(out)
1546,overhead
1547,jas_stream_getrwcount(out)
1548,out
1549,sprintf(buf, "%s\n_jp2overhead=%lu\n", (optstr ? optstr : ""),
1550,	  (unsigned long) overhead)
1551,buf
1552,"%s\n_jp2overhead=%lu\n"
1553,optstr ? optstr : ""
1554,optstr
1555,optstr
1556,""
1557,(unsigned long) overhead
1558,unsigned long
1559,overhead
1560,if (jpc_encode(image, out, buf))
1561,jpc_encode(image, out, buf)
1562,image
1563,out
1564,buf
1565,<empty>
1566,goto error;
1567,return 0;
1568,0
1569,abort()
1570,error:
1571,
1572,	if (box) {
1573,		jp2_box_destroy(box);
1574,	}
1575,if (box)
1576,box
1577,<empty>
1578,jp2_box_destroy(box)
1579,box
1580,if (tmpstream)
1581,tmpstream
1582,<empty>
1583,jas_stream_close(tmpstream)
1584,tmpstream
1585,return -1;
1586,-1
1587,1
1588,RET
1589,jas_image_t *image
1590,jas_stream_t *out
1591,char *optstr
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
int jp2_encode(jas_image_t *image, jas_stream_t *out, char *optstr) {
jp2_box_t *box;
jp2_ftyp_t *ftyp;
jp2_ihdr_t *ihdr;
jas_stream_t *tmpstream;
int allcmptssame;
jp2_bpcc_t *bpcc;
long len;
uint_fast16_t cmptno;
jp2_colr_t *colr;
char buf[4096];
uint_fast32_t overhead;
jp2_cdefchan_t *cdefchanent;
jp2_cdef_t *cdef;
int i;
uint_fast32_t typeasoc;
jas_iccprof_t *iccprof;
jas_stream_t *iccstream;
int pos;
int needcdef;
int prec;
int sgnd;
box = 0;
tmpstream = 0;
allcmptssame = 1;
sgnd = jas_image_cmptsgnd(image, 0);
prec = jas_image_cmptprec(image, 0);
for(i = 1;i < jas_image_numcmpts(image);++i)
for(i = 1;i < jas_image_numcmpts(image);++i)
box->data.jp.magic = JP2_JP_MAGIC;
jp2_box_destroy(box);
box = 0;
ftyp = &box->data.ftyp;
ftyp->majver = JP2_FTYP_MAJVER;
ftyp->minver = JP2_FTYP_MINVER;
ftyp->numcompatcodes = 1;
ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE;
jp2_box_destroy(box);
box = 0;
ihdr = &box->data.ihdr;
ihdr->width = jas_image_width(image);
ihdr->height = jas_image_height(image);
ihdr->numcmpts = jas_image_numcmpts(image);
ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0), 	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL;
ihdr->comptype = JP2_IHDR_COMPTYPE;
ihdr->csunk = 0;
ihdr->ipr = 0;
jp2_box_destroy(box);
box = 0;
colr = &box->data.colr;
switch(jas_image_clrspc(image))
colr->method = JP2_COLR_ENUM;
colr->csid = clrspctojp2(jas_image_clrspc(image));
colr->pri = JP2_COLR_PRI;
colr->approx = 0;
jp2_box_destroy(box);
box = 0;
needcdef = 1;
switch(jas_clrspc_fam(jas_image_clrspc(image)))
if(jas_image_cmpttype(image, 0) == 		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) && 		  jas_image_cmpttype(image, 1) == 		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) && 		  jas_image_cmpttype(image, 2) == 		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B))
needcdef = 0;
len = jas_stream_tell(tmpstream);
jas_stream_rewind(tmpstream);
box->len = len + JP2_BOX_HDRLEN(false);
jp2_box_destroy(box);
box = 0;
jas_stream_close(tmpstream);
tmpstream = 0;
box->len = 0;
jp2_box_destroy(box);
box = 0;
overhead = jas_stream_getrwcount(out);
sprintf(buf, '_s _jp2overhead=_lu ', (optstr ? optstr : ''), 	  (unsigned long) overhead);
return 0;
=======================
