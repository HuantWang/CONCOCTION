-----label-----
0
-----code-----
jpc_mqenc_t *jpc_mqenc_create(int maxctxs, jas_stream_t *out)
{
	jpc_mqenc_t *mqenc;

	/* Allocate memory for the MQ encoder. */
	if (!(mqenc = jas_malloc(sizeof(jpc_mqenc_t)))) {
		goto error;
	}
	mqenc->out = out;
	mqenc->maxctxs = maxctxs;

	/* Allocate memory for the per-context state information. */
	if (!(mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *)))) {
		goto error;
	}

	/* Set the current context to the first one. */
	mqenc->curctx = mqenc->ctxs;

	jpc_mqenc_init(mqenc);

	/* Initialize the per-context state information to something sane. */
	jpc_mqenc_setctxs(mqenc, 0, 0);

	return mqenc;

error:
	if (mqenc) {
		jpc_mqenc_destroy(mqenc);
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
9,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
18,19
19,20
19,21
20,21
22,23
22,24
25,26
25,27
26,27
27,28
28,29
28,30
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
39,40
40,41
42,43
43,44
43,45
44,45
44,46
45,46
48,49
50,51
51,52
51,53
52,53
52,54
53,54
56,57
58,59
58,60
59,60
60,61
61,62
61,63
62,63
62,64
63,64
66,67
66,68
67,68
69,70
69,71
70,71
70,72
71,72
74,75
75,76
75,77
76,77
78,79
80,81
81,82
83,84
84,85
84,86
85,86
85,87
86,87
89,90
89,91
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
107,108
108,109
110,111
110,112
112,113
112,114
113,114
115,116
116,117
117,118
117,119
118,119
120,121
122,123
-----nextToken-----
3,5,6,8,10,13,15,16,21,23,24,30,33,37,38,41,46,47,49,54,55,57,64,65,68,72,73,77,79,82,87,88,91,92,96,98,102,104,105,106,109,111,114,119,121,123
-----computeFrom-----
28,29
28,30
43,44
43,45
51,52
51,53
61,62
61,63
69,70
69,71
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;LabelStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
jpc_mqenc_t *jpc_mqenc_create(int maxctxs, jas_stream_t *out){	jpc_mqenc_t *mqenc;	/* Allocate memory for the MQ encoder. */	if (!(mqenc = jas_malloc(sizeof(jpc_mqenc_t)))) {		goto error;	}	mqenc->out = out;	mqenc->maxctxs = maxctxs;	/* Allocate memory for the per-context state information. */	if (!(mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *)))) {		goto error;	}	/* Set the current context to the first one. */	mqenc->curctx = mqenc->ctxs;	jpc_mqenc_init(mqenc);	/* Initialize the per-context state information to something sane. */	jpc_mqenc_setctxs(mqenc, 0, 0);	return mqenc;error:	if (mqenc) {		jpc_mqenc_destroy(mqenc);	}	return 0;}
jpc_mqenc_t
jpc_mqenc_t
*jpc_mqenc_create(int maxctxs, jas_stream_t *out)
*
jpc_mqenc_create
int maxctxs
int
maxctxs
maxctxs
jas_stream_t *out
jas_stream_t
jas_stream_t
*out
*
out
{	jpc_mqenc_t *mqenc;	/* Allocate memory for the MQ encoder. */	if (!(mqenc = jas_malloc(sizeof(jpc_mqenc_t)))) {		goto error;	}	mqenc->out = out;	mqenc->maxctxs = maxctxs;	/* Allocate memory for the per-context state information. */	if (!(mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *)))) {		goto error;	}	/* Set the current context to the first one. */	mqenc->curctx = mqenc->ctxs;	jpc_mqenc_init(mqenc);	/* Initialize the per-context state information to something sane. */	jpc_mqenc_setctxs(mqenc, 0, 0);	return mqenc;error:	if (mqenc) {		jpc_mqenc_destroy(mqenc);	}	return 0;}
jpc_mqenc_t *mqenc;
jpc_mqenc_t *mqenc;
jpc_mqenc_t
jpc_mqenc_t
*mqenc
*
mqenc
if (!(mqenc = jas_malloc(sizeof(jpc_mqenc_t)))) {		goto error;	}
!(mqenc = jas_malloc(sizeof(jpc_mqenc_t)))
(mqenc = jas_malloc(sizeof(jpc_mqenc_t)))
mqenc = jas_malloc(sizeof(jpc_mqenc_t))
mqenc
mqenc
jas_malloc(sizeof(jpc_mqenc_t))
jas_malloc
jas_malloc
sizeof(jpc_mqenc_t)
jpc_mqenc_t
jpc_mqenc_t
jpc_mqenc_t

{		goto error;	}
goto error;
error
mqenc->out = out;
mqenc->out = out
mqenc->out
mqenc
mqenc
out
out
out
mqenc->maxctxs = maxctxs;
mqenc->maxctxs = maxctxs
mqenc->maxctxs
mqenc
mqenc
maxctxs
maxctxs
maxctxs
if (!(mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *)))) {		goto error;	}
!(mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *)))
(mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *)))
mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *))
mqenc->ctxs
mqenc
mqenc
ctxs
jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *))
jas_malloc
jas_malloc
mqenc->maxctxs * sizeof(jpc_mqstate_t *)
mqenc->maxctxs
mqenc
mqenc
maxctxs
sizeof(jpc_mqstate_t *)
jpc_mqstate_t *
jpc_mqstate_t
jpc_mqstate_t
*
*
{		goto error;	}
goto error;
error
mqenc->curctx = mqenc->ctxs;
mqenc->curctx = mqenc->ctxs
mqenc->curctx
mqenc
mqenc
curctx
mqenc->ctxs
mqenc
mqenc
ctxs
jpc_mqenc_init(mqenc);
jpc_mqenc_init(mqenc)
jpc_mqenc_init
jpc_mqenc_init
mqenc
mqenc
jpc_mqenc_setctxs(mqenc, 0, 0);
jpc_mqenc_setctxs(mqenc, 0, 0)
jpc_mqenc_setctxs
jpc_mqenc_setctxs
mqenc
mqenc
0
0
return mqenc;
mqenc
mqenc
error:	if (mqenc) {		jpc_mqenc_destroy(mqenc);	}
error
if (mqenc) {		jpc_mqenc_destroy(mqenc);	}
mqenc
mqenc
{		jpc_mqenc_destroy(mqenc);	}
jpc_mqenc_destroy(mqenc);
jpc_mqenc_destroy(mqenc)
jpc_mqenc_destroy
jpc_mqenc_destroy
mqenc
mqenc
return 0;
0
-----joern-----
(48,17,0)
(33,7,0)
(61,41,0)
(46,45,0)
(19,76,0)
(28,17,0)
(62,17,0)
(13,52,0)
(1,15,0)
(67,60,0)
(52,17,0)
(50,76,0)
(4,17,0)
(71,61,0)
(46,52,0)
(2,15,0)
(38,62,0)
(22,14,0)
(47,67,0)
(76,43,0)
(51,46,0)
(18,40,0)
(76,17,0)
(63,48,0)
(45,46,0)
(9,4,0)
(72,34,0)
(68,27,0)
(5,70,0)
(43,70,0)
(48,63,0)
(7,0,0)
(16,67,0)
(41,70,0)
(68,7,0)
(15,8,0)
(32,18,0)
(73,44,0)
(14,58,0)
(66,43,0)
(32,74,0)
(46,34,0)
(6,68,0)
(46,17,0)
(40,58,0)
(32,28,0)
(63,27,0)
(62,8,0)
(75,28,0)
(56,40,0)
(60,35,0)
(4,69,0)
(44,46,0)
(46,44,0)
(39,18,0)
(3,40,0)
(21,71,0)
(34,17,0)
(23,45,0)
(28,32,0)
(10,71,0)
(11,48,0)
(57,60,0)
(25,70,0)
(52,46,0)
(41,61,0)
(26,41,0)
(24,14,0)
(40,17,0)
(18,70,0)
(27,63,0)
(55,68,0)
(67,17,0)
(58,14,0)
(8,65,0)
(8,15,0)
(15,27,0)
(59,62,0)
(35,60,0)
(14,27,0)
(37,52,0)
(31,45,0)
(60,67,0)
(45,17,0)
(30,74,0)
(58,36,0)
(54,44,0)
(74,32,0)
(46,49,0)
(42,34,0)
(18,62,0)
(12,32,0)
(44,17,0)
(20,48,0)
(64,27,0)
(67,8,0)
(58,62,0)
(53,65,0)
(34,46,0)
(43,76,0)
(29,61,0)
(27,70,0)
(7,68,0)
(68,55,1)
(3,56,1)
(52,17,1)
(58,14,1)
(15,2,1)
(7,68,1)
(21,29,1)
(7,0,1)
(52,13,1)
(51,44,1)
(41,61,1)
(60,57,1)
(75,58,1)
(41,10,1)
(1,62,1)
(63,48,1)
(46,17,1)
(47,16,1)
(59,7,1)
(64,43,1)
(68,27,1)
(67,17,1)
(16,8,1)
(44,54,1)
(40,17,1)
(76,50,1)
(12,28,1)
(57,67,1)
(19,66,1)
(32,28,1)
(40,3,1)
(73,45,1)
(28,17,1)
(23,52,1)
(58,62,1)
(11,64,1)
(75,4,1)
(8,15,1)
(44,17,1)
(18,40,1)
(9,35,1)
(14,22,1)
(38,59,1)
(34,17,1)
(67,47,1)
(31,23,1)
(54,73,1)
(45,17,1)
(55,6,1)
(66,41,1)
(56,35,1)
(45,31,1)
(13,37,1)
(62,38,1)
(18,62,1)
(4,9,1)
(75,46,1)
(10,21,1)
(37,34,1)
(48,20,1)
(33,68,1)
(39,18,1)
(28,75,1)
(46,44,1)
(14,27,1)
(18,32,1)
(50,19,1)
(74,30,1)
(46,34,1)
(24,40,1)
(4,17,1)
(72,42,1)
(46,45,1)
(20,11,1)
(29,26,1)
(76,17,1)
(35,60,1)
(30,28,1)
(43,76,1)
(48,17,1)
(46,51,1)
(60,67,1)
(32,74,1)
(6,27,1)
(42,7,1)
(27,63,1)
(67,8,1)
(22,24,1)
(46,52,1)
(15,27,1)
(34,72,1)
(32,12,1)
(7,33,1)
(62,17,1)
(2,1,1)
(46,45,2)
(2,7,2)
(58,62,2)
(4,35,2)
(13,7,2)
(40,17,2)
(32,28,2)
(63,48,2)
(46,34,2)
(41,61,2)
(62,7,2)
(15,27,2)
(62,17,2)
(3,35,2)
(54,7,2)
(60,7,2)
(35,60,2)
(46,52,2)
(67,17,2)
(73,7,2)
(47,7,2)
(27,63,2)
(58,14,2)
(46,44,2)
(30,28,2)
(8,7,2)
(67,8,2)
(35,7,2)
(68,27,2)
(39,18,2)
(52,17,2)
(51,7,2)
(74,28,2)
(42,7,2)
(46,17,2)
(7,68,2)
(14,27,2)
(48,17,2)
(23,7,2)
(18,62,2)
(4,17,2)
(72,7,2)
(46,7,2)
(56,35,2)
(45,17,2)
(34,17,2)
(16,7,2)
(59,7,2)
(37,7,2)
(14,35,2)
(1,7,2)
(60,67,2)
(31,7,2)
(32,74,2)
(76,17,2)
(67,7,2)
(34,7,2)
(45,7,2)
(52,7,2)
(43,76,2)
(44,17,2)
(7,0,2)
(28,17,2)
(38,7,2)
(8,15,2)
(44,7,2)
(24,35,2)
(22,35,2)
(15,7,2)
(18,40,2)
(57,7,2)
(58,35,2)
(9,35,2)
(12,28,2)
(40,35,2)
-----------------------------------
(0,int bit)
(1,state)
(2,qeval)
(3,creg)
(4,jpc_mqenc_codemps2(mqenc)
(5,if (state->mps == bit)
(6,state)
(7,state->mps == bit)
(8,mqenc->areg -= state->qeval)
(9,mqenc)
(10,bit)
(11,mqenc)
(12,0)
(13,creg)
(14,state->qeval)
(15,state->qeval)
(16,mqenc)
(17,jpc_mqenc_t *mqenc)
(18,return jpc_mqenc_error(mqenc)
(19,mqenc)
(20,curctx)
(21,mqenc)
(22,qeval)
(23,mqenc)
(24,state)
(25,state)
(26,100)
(27,state = *(mqenc->curctx)
(28,jpc_mqenc_error(mqenc)
(29,"jpc_mqenc_putbit(%p, %d)
(30,1)
(31,ctreg)
(32,jpc_mqenc_error(mqenc)
(33,bit)
(34,mqenc->areg)
(35,!(mqenc->areg & 0x8000)
(36,)
(37,mqenc)
(38,areg)
(39,RET)
(40,mqenc->creg)
(41,JAS_DBGLOG(100, ("jpc_mqenc_putbit(%p, %d)
(42,mqenc)
(43,JPC_MQENC_CALL(100, jpc_mqenc_dump(mqenc, stderr)
(44,mqenc->curctx)
(45,mqenc->ctreg)
(46,jpc_mqenc_codelps2(mqenc->areg, mqenc->creg, mqenc->ctreg, mqenc->curctx, mqenc)
(47,areg)
(48,mqenc->curctx)
(49,)
(50,stderr)
(51,mqenc)
(52,mqenc->creg)
(53,if (!(mqenc->areg & 0x8000)
(54,curctx)
(55,mps)
(56,mqenc)
(57,0x8000)
(58,mqenc->creg += state->qeval)
(59,mqenc)
(60,mqenc->areg & 0x8000)
(61,)
(62,mqenc->areg)
(63,*(mqenc->curctx)
(64,state)
(65,)
(66,100)
(67,mqenc->areg)
(68,state->mps)
(69,)
(70,)
(71,)
(72,areg)
(73,mqenc)
(74,-1)
(75,mqenc)
(76,jpc_mqenc_dump(mqenc, stderr)
-----cfg-----
(65,67)
(67,69)
(7,17)
(13,65)
(13,67)
(13,24)
(14,13)
(16,14)
(17,16)
(21,29)
(22,21)
(24,22)
(26,36)
(27,26)
(29,27)
(32,65)
(32,67)
(32,49)
(33,32)
(34,41)
(36,34)
(37,33)
(38,37)
(39,42)
(41,39)
(42,38)
(46,53)
(47,52)
(49,47)
(50,46)
(52,50)
(53,55)
(55,59)
(59,69)
-----path-----
7,17,16,14,13,65,67,69
7,17,16,14,13,67,69
7,17,16,14,13,24,22,21,29,27,26,36,34,41,39,42,38,37,33,32,65,67,69
7,17,16,14,13,24,22,21,29,27,26,36,34,41,39,42,38,37,33,32,67,69
7,17,16,14,13,24,22,21,29,27,26,36,34,41,39,42,38,37,33,32,49,47,52,50,46,53,55,59,69
-----cfgNode-----
5,<global>
6,<empty>
7,jpc_mqenc_t jpc_mqenc_create (int maxctxs,jas_stream_t *out)
8,int maxctxs
9,jas_stream_t *out
10,<empty>
11,jpc_mqenc_t* mqenc
12,if (!(mqenc = jas_malloc(sizeof(jpc_mqenc_t))))
13,!(mqenc = jas_malloc(sizeof(jpc_mqenc_t)))
14,mqenc = jas_malloc(sizeof(jpc_mqenc_t))
15,mqenc
16,jas_malloc(sizeof(jpc_mqenc_t))
17,sizeof(jpc_mqenc_t)
18,jpc_mqenc_t
19,<empty>
20,goto error;
21,mqenc->out = out
22,mqenc->out
23,mqenc
24,out
25,out
26,mqenc->maxctxs = maxctxs
27,mqenc->maxctxs
28,mqenc
29,maxctxs
30,maxctxs
31,if (!(mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *))))
32,!(mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *)))
33,mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *))
34,mqenc->ctxs
35,mqenc
36,ctxs
37,jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *))
38,mqenc->maxctxs * sizeof(jpc_mqstate_t *)
39,mqenc->maxctxs
40,mqenc
41,maxctxs
42,sizeof(jpc_mqstate_t *)
43,jpc_mqstate_t
44,<empty>
45,goto error;
46,mqenc->curctx = mqenc->ctxs
47,mqenc->curctx
48,mqenc
49,curctx
50,mqenc->ctxs
51,mqenc
52,ctxs
53,jpc_mqenc_init(mqenc)
54,mqenc
55,jpc_mqenc_setctxs(mqenc, 0, 0)
56,mqenc
57,0
58,0
59,return mqenc;
60,mqenc
61,error:
62,	if (mqenc) {
63,		jpc_mqenc_destroy(mqenc);
64,	}
65,if (mqenc)
66,mqenc
67,<empty>
68,jpc_mqenc_destroy(mqenc)
69,mqenc
70,return 0;
71,0
72,RET
73,int maxctxs
74,jas_stream_t *out
75,RET
76,jpc_mqenc_t jpc_mqenc_create (int maxctxs,jas_stream_t *out)
77,int maxctxs
78,jas_stream_t *out
79,<empty>
80,jpc_mqenc_t* mqenc
81,if (!(mqenc = jas_malloc(sizeof(jpc_mqenc_t))))
82,!(mqenc = jas_malloc(sizeof(jpc_mqenc_t)))
83,mqenc = jas_malloc(sizeof(jpc_mqenc_t))
84,mqenc
85,jas_malloc(sizeof(jpc_mqenc_t))
86,sizeof(jpc_mqenc_t)
87,jpc_mqenc_t
88,<empty>
89,goto error;
90,mqenc->out = out
91,mqenc->out
92,mqenc
93,out
94,out
95,mqenc->maxctxs = maxctxs
96,mqenc->maxctxs
97,mqenc
98,maxctxs
99,maxctxs
100,if (!(mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *))))
101,!(mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *)))
102,mqenc->ctxs = jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *))
103,mqenc->ctxs
104,mqenc
105,ctxs
106,jas_malloc(mqenc->maxctxs * sizeof(jpc_mqstate_t *))
107,mqenc->maxctxs * sizeof(jpc_mqstate_t *)
108,mqenc->maxctxs
109,mqenc
110,maxctxs
111,sizeof(jpc_mqstate_t *)
112,jpc_mqstate_t
113,<empty>
114,goto error;
115,mqenc->curctx = mqenc->ctxs
116,mqenc->curctx
117,mqenc
118,curctx
119,mqenc->ctxs
120,mqenc
121,ctxs
122,jpc_mqenc_init(mqenc)
123,mqenc
124,jpc_mqenc_setctxs(mqenc, 0, 0)
125,mqenc
126,0
127,0
128,return mqenc;
129,mqenc
130,error:
131,	if (mqenc) {
132,		jpc_mqenc_destroy(mqenc);
133,	}
134,if (mqenc)
135,mqenc
136,<empty>
137,jpc_mqenc_destroy(mqenc)
138,mqenc
139,return 0;
140,0
141,RET
142,int maxctxs
143,jas_stream_t *out
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
jpc_mqenc_t *jpc_mqenc_create(int maxctxs, jas_stream_t *out) {
jpc_mqenc_t *mqenc;
mqenc->out = out;
mqenc->maxctxs = maxctxs;
mqenc->curctx = mqenc->ctxs;
jpc_mqenc_init(mqenc);
jpc_mqenc_setctxs(mqenc, 0, 0);
return mqenc;
=======================
