-----label-----
0
-----code-----
double jpc_pow2i(int n)
{
	double x;
	double a;

	x = 1.0;
	if (n < 0) {
		a = 0.5;
		n = -n;
	} else {
		a = 2.0;
	}
	while (--n >= 0) {
		x *= a;
	}
	return x;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
15,16
16,17
16,18
18,19
20,21
21,22
21,23
22,23
25,26
25,27
25,28
26,27
26,28
27,28
30,31
30,32
31,32
32,33
32,34
33,34
36,37
37,38
37,39
38,39
40,41
41,42
43,44
44,45
45,46
45,47
46,47
49,50
49,51
50,51
50,52
51,52
52,53
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
-----nextToken-----
2,4,6,8,12,14,17,19,23,24,28,29,34,35,39,42,47,48,53,54,59,61,64
-----computeFrom-----
21,22
21,23
26,27
26,28
32,33
32,34
37,38
37,39
45,46
45,47
50,51
50,52
57,58
57,59
-----guardedBy-----
28,42
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
double jpc_pow2i(int n){	double x;	double a;	x = 1.0;	if (n < 0) {		a = 0.5;		n = -n;	} else {		a = 2.0;	}	while (--n >= 0) {		x *= a;	}	return x;}
double
jpc_pow2i(int n)
jpc_pow2i
int n
int
n
n
{	double x;	double a;	x = 1.0;	if (n < 0) {		a = 0.5;		n = -n;	} else {		a = 2.0;	}	while (--n >= 0) {		x *= a;	}	return x;}
double x;
double x;
double
x
x
double a;
double a;
double
a
a
x = 1.0;
x = 1.0
x
x
1.0
if (n < 0) {		a = 0.5;		n = -n;	} else {		a = 2.0;	}
n < 0
n
n
0
{		a = 0.5;		n = -n;	}
a = 0.5;
a = 0.5
a
a
0.5
n = -n;
n = -n
n
n
-n
n
n
{		a = 2.0;	}
a = 2.0;
a = 2.0
a
a
2.0
while (--n >= 0) {		x *= a;	}
--n >= 0
--n
n
n
0
{		x *= a;	}
x *= a;
x *= a
x
x
a
a
return x;
x
x
-----joern-----
(10,9,0)
(3,5,0)
(14,9,0)
(10,21,0)
(2,33,0)
(5,31,0)
(8,9,0)
(39,5,0)
(38,24,0)
(26,31,0)
(32,31,0)
(15,40,0)
(16,37,0)
(35,31,0)
(27,23,0)
(43,31,0)
(29,10,0)
(13,9,0)
(19,16,0)
(41,16,0)
(22,31,0)
(0,10,0)
(1,2,0)
(11,44,0)
(12,40,0)
(39,44,0)
(16,33,0)
(39,15,0)
(24,12,0)
(25,2,0)
(39,28,0)
(30,15,0)
(37,9,0)
(24,4,0)
(28,31,0)
(7,23,0)
(12,24,0)
(44,36,0)
(6,17,0)
(42,24,0)
(18,28,0)
(37,16,0)
(23,20,0)
(16,19,1)
(39,8,1)
(2,1,1)
(23,7,1)
(25,10,1)
(24,4,1)
(39,5,1)
(8,32,1)
(15,30,1)
(16,33,1)
(27,37,1)
(24,42,1)
(28,18,1)
(39,28,1)
(34,23,1)
(10,0,1)
(41,2,1)
(38,23,1)
(42,38,1)
(23,20,1)
(2,33,1)
(11,2,1)
(18,34,1)
(12,24,1)
(8,34,1)
(30,12,1)
(37,16,1)
(8,35,1)
(39,15,1)
(7,27,1)
(39,44,1)
(19,41,1)
(5,3,1)
(0,29,1)
(10,21,1)
(44,11,1)
(3,34,1)
(1,25,1)
(2,33,2)
(34,23,2)
(28,34,2)
(23,20,2)
(39,28,2)
(39,15,2)
(39,5,2)
(42,23,2)
(10,21,2)
(30,23,2)
(7,2,2)
(41,2,2)
(16,2,2)
(8,34,2)
(15,23,2)
(18,34,2)
(39,44,2)
(3,34,2)
(19,2,2)
(11,2,2)
(27,2,2)
(23,2,2)
(38,23,2)
(37,16,2)
(24,4,2)
(12,24,2)
(12,23,2)
(44,2,2)
(37,2,2)
(16,33,2)
(5,34,2)
(24,23,2)
-----------------------------------
(0,0)
(1,JPC_COX_INS)
(2,qmfbid == JPC_COX_INS)
(3,2)
(4,int orient)
(5,return 2;)
(6,switch (orient)
(7,0)
(8,abort()
(9,)
(10,numlvls = 0)
(11,0)
(12,assert(orient == JPC_TSFB_LL)
(13,if (qmfbid == JPC_COX_INS)
(14,if (lvlno == 0)
(15,return 0;)
(16,qmfbid == JPC_COX_RFT)
(17,)
(18,1)
(19,JPC_COX_RFT)
(20,int lvlno)
(21,int numlvls)
(22,case JPC_TSFB_HH:)
(23,lvlno == 0)
(24,orient == JPC_TSFB_LL)
(25,qmfbid)
(26,case JPC_TSFB_LH:)
(27,lvlno)
(28,return 1;)
(29,numlvls)
(30,0)
(31,)
(32,break;)
(33,int qmfbid)
(34,orient)
(35,break;)
(36,)
(37,assert(qmfbid == JPC_COX_RFT)
(38,orient)
(39,RET)
(40,)
(41,qmfbid)
(42,JPC_TSFB_LL)
(43,case JPC_TSFB_HL:)
(44,return 0;)
-----cfg-----
(16,20)
(16,29)
(33,38)
(33,41)
(34,33)
(20,25)
(38,34)
(23,34)
(7,12)
(41,43)
(25,23)
(12,16)
(29,34)
-----path-----
7,12,16,20,25,23,34,33,41,43
7,12,16,29,34,33,41,43
-----cfgNode-----
5,<global>
6,<empty>
7,double jpc_pow2i (int n)
8,int n
9,<empty>
10,double x
11,double a
12,x = 1.0
13,x
14,1.0
15,if (n < 0)
16,n < 0
17,n
18,0
19,<empty>
20,a = 0.5
21,a
22,0.5
23,n = -n
24,n
25,-n
26,n
27,else
28,<empty>
29,a = 2.0
30,a
31,2.0
32,while (--n >= 0)
33,--n >= 0
34,--n
35,n
36,0
37,<empty>
38,x *= a
39,x
40,a
41,return x;
42,x
43,RET
44,int n
45,RET
46,double jpc_pow2i (int n)
47,int n
48,<empty>
49,double x
50,double a
51,x = 1.0
52,x
53,1.0
54,if (n < 0)
55,n < 0
56,n
57,0
58,<empty>
59,a = 0.5
60,a
61,0.5
62,n = -n
63,n
64,-n
65,n
66,else
67,<empty>
68,a = 2.0
69,a
70,2.0
71,while (--n >= 0)
72,--n >= 0
73,--n
74,n
75,0
76,<empty>
77,x *= a
78,x
79,a
80,return x;
81,x
82,RET
83,int n
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
double jpc_pow2i(int n) {
double x;
double a;
x = 1.0;
a = 2.0;
while(--n >= 0)
x *= a;
while(--n >= 0)
x *= a;
while(--n >= 0)
x *= a;
while(--n >= 0)
x *= a;
while(--n >= 0)
x *= a;
while(--n >= 0)
x *= a;
return x;
=======================
