-----label-----
0
-----code-----
static jpc_mstabent_t *jpc_mstab_lookup(int id)
{
	jpc_mstabent_t *mstabent;
	for (mstabent = jpc_mstab;; ++mstabent) {
		if (mstabent->id == id || mstabent->id < 0) {
			return mstabent;
		}
	}
	assert(0);
	return 0;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
19,20
19,21
19,22
20,21
21,22
21,23
22,23
24,25
26,27
27,28
29,30
30,31
30,32
31,32
31,33
32,33
32,34
33,34
33,35
34,35
37,38
39,40
39,41
40,41
40,42
41,42
45,46
46,47
47,48
49,50
50,51
50,52
51,52
54,55
-----nextToken-----
3,5,6,8,10,15,17,18,23,25,28,35,36,38,42,43,44,48,52,53,55
-----computeFrom-----
21,22
21,23
31,32
31,33
32,33
32,34
39,40
39,41
-----guardedBy-----
42,48
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static jpc_mstabent_t *jpc_mstab_lookup(int id){	jpc_mstabent_t *mstabent;	for (mstabent = jpc_mstab;; ++mstabent) {		if (mstabent->id == id || mstabent->id < 0) {			return mstabent;		}	}	assert(0);	return 0;}
static jpc_mstabent_t
jpc_mstabent_t
*jpc_mstab_lookup(int id)
*
jpc_mstab_lookup
int id
int
id
id
{	jpc_mstabent_t *mstabent;	for (mstabent = jpc_mstab;; ++mstabent) {		if (mstabent->id == id || mstabent->id < 0) {			return mstabent;		}	}	assert(0);	return 0;}
jpc_mstabent_t *mstabent;
jpc_mstabent_t *mstabent;
jpc_mstabent_t
jpc_mstabent_t
*mstabent
*
mstabent
for (mstabent = jpc_mstab;; ++mstabent) {		if (mstabent->id == id || mstabent->id < 0) {			return mstabent;		}	}
mstabent = jpc_mstab;
mstabent = jpc_mstab
mstabent
mstabent
jpc_mstab
jpc_mstab
++mstabent
mstabent
mstabent
{		if (mstabent->id == id || mstabent->id < 0) {			return mstabent;		}	}
if (mstabent->id == id || mstabent->id < 0) {			return mstabent;		}
mstabent->id == id || mstabent->id < 0
mstabent->id == id
mstabent->id
mstabent
mstabent
id
id
id
mstabent->id < 0
mstabent->id
mstabent
mstabent
id
0
{			return mstabent;		}
return mstabent;
mstabent
mstabent
assert(0);
assert(0)
assert
assert
0
return 0;
0
-----joern-----
(24,32,0)
(21,17,0)
(20,43,0)
(3,43,0)
(45,23,0)
(6,27,0)
(9,14,0)
(15,40,0)
(19,28,0)
(0,15,0)
(29,23,0)
(28,10,0)
(15,7,0)
(17,27,0)
(49,36,0)
(30,38,0)
(43,7,0)
(36,27,0)
(23,27,0)
(23,48,0)
(28,38,0)
(10,26,0)
(51,39,0)
(6,41,0)
(10,41,0)
(14,18,0)
(50,11,0)
(48,23,0)
(46,11,0)
(36,38,0)
(32,11,0)
(38,36,0)
(1,51,0)
(38,28,0)
(31,51,0)
(16,28,0)
(51,27,0)
(44,36,0)
(11,32,0)
(13,26,0)
(2,14,0)
(43,4,0)
(32,43,0)
(34,6,0)
(38,7,0)
(17,7,0)
(17,33,0)
(41,10,0)
(43,32,0)
(25,4,0)
(38,26,0)
(5,39,0)
(42,15,0)
(22,6,0)
(35,26,0)
(14,7,0)
(11,27,0)
(37,38,0)
(41,6,0)
(39,51,0)
(47,17,0)
(8,10,0)
(48,23,1)
(38,7,1)
(42,39,1)
(11,46,1)
(39,5,1)
(32,24,1)
(21,39,1)
(17,27,1)
(23,27,1)
(14,9,1)
(38,36,1)
(43,32,1)
(51,27,1)
(45,38,1)
(44,49,1)
(47,21,1)
(2,48,1)
(37,30,1)
(20,48,1)
(6,27,1)
(28,16,1)
(10,41,1)
(19,36,1)
(12,15,1)
(39,51,1)
(6,34,1)
(32,11,1)
(29,45,1)
(15,0,1)
(23,29,1)
(3,20,1)
(38,28,1)
(5,51,1)
(0,42,1)
(11,27,1)
(12,17,1)
(15,7,1)
(43,7,1)
(22,8,1)
(49,37,1)
(41,6,1)
(12,14,1)
(1,43,1)
(14,7,1)
(17,47,1)
(9,2,1)
(50,3,1)
(36,44,1)
(24,11,1)
(46,50,1)
(36,27,1)
(28,10,1)
(31,1,1)
(51,31,1)
(17,7,1)
(16,19,1)
(30,10,1)
(34,22,1)
(51,27,2)
(11,48,2)
(32,11,2)
(28,10,2)
(15,7,2)
(42,39,2)
(38,7,2)
(20,48,2)
(38,36,2)
(51,48,2)
(17,39,2)
(3,48,2)
(14,7,2)
(5,48,2)
(9,48,2)
(14,48,2)
(24,48,2)
(43,48,2)
(17,27,2)
(6,27,2)
(41,6,2)
(39,48,2)
(39,51,2)
(11,27,2)
(38,28,2)
(50,48,2)
(2,48,2)
(31,48,2)
(47,39,2)
(10,41,2)
(21,39,2)
(32,48,2)
(46,48,2)
(15,39,2)
(23,27,2)
(48,23,2)
(0,39,2)
(17,7,2)
(36,27,2)
(43,7,2)
(1,48,2)
(43,32,2)
-----------------------------------
(0,"\\n")
(1,ms)
(2,out)
(3," len = %d;")
(4,)
(5,dumpparms)
(6,ms->id)
(7,FILE *out)
(8,mstabent)
(9,"\\n")
(10,mstabent = jpc_mstab_lookup(ms->id)
(11,ms->len)
(12,RET)
(13,mstabent)
(14,fprintf(out, "\\n")
(15,fprintf(out, "\\n")
(16,name)
(17,(*ms->ops->dumpparms)
(18,)
(19,mstabent)
(20,out)
(21,ms)
(22,ms)
(23,ms->id)
(24,2)
(25,if (ms->ops->dumpparms)
(26,)
(27,jpc_ms_t *ms)
(28,mstabent->name)
(29,id)
(30,out)
(31,ops)
(32,ms->len + 2)
(33,)
(34,id)
(35,if (JPC_MS_HASPARMS(ms->id)
(36,ms->id)
(37,"type = 0x%04x (%s)
(38,fprintf(out, "type = 0x%04x (%s)
(39,ms->ops->dumpparms)
(40,)
(41,jpc_mstab_lookup(ms->id)
(42,out)
(43,fprintf(out, " len = %d;", ms->len + 2)
(44,id)
(45,ms)
(46,len)
(47,out)
(48,JPC_MS_HASPARMS(ms->id)
(49,ms)
(50,ms)
(51,ms->ops)
-----cfg-----
(32,38)
(34,36)
(36,38)
(7,13)
(13,16)
(16,24)
(16,34)
(20,16)
(20,32)
(21,20)
(21,29)
(22,21)
(24,22)
(26,20)
(27,26)
(29,27)
-----path-----
7,13,16,24,22,21,20,16,34,36,38
7,13,16,24,22,21,20,32,38
7,13,16,24,22,21,29,27,26,20,16,34,36,38
7,13,16,24,22,21,29,27,26,20,32,38
7,13,16,34,36,38
-----cfgNode-----
5,<global>
6,<empty>
7,jpc_mstabent_t jpc_mstab_lookup (int id)
8,int id
9,<empty>
10,jpc_mstabent_t* mstabent
11,for (mstabent = jpc_mstab;;++mstabent)
12,<empty>
13,mstabent = jpc_mstab
14,mstabent
15,jpc_mstab
16,++mstabent
17,mstabent
18,<empty>
19,if (mstabent->id == id || mstabent->id < 0)
20,mstabent->id == id || mstabent->id < 0
21,mstabent->id == id
22,mstabent->id
23,mstabent
24,id
25,id
26,mstabent->id < 0
27,mstabent->id
28,mstabent
29,id
30,0
31,<empty>
32,return mstabent;
33,mstabent
34,assert(0)
35,0
36,return 0;
37,0
38,RET
39,int id
40,RET
41,jpc_mstabent_t jpc_mstab_lookup (int id)
42,int id
43,<empty>
44,jpc_mstabent_t* mstabent
45,for (mstabent = jpc_mstab;;++mstabent)
46,<empty>
47,mstabent = jpc_mstab
48,mstabent
49,jpc_mstab
50,++mstabent
51,mstabent
52,<empty>
53,if (mstabent->id == id || mstabent->id < 0)
54,mstabent->id == id || mstabent->id < 0
55,mstabent->id == id
56,mstabent->id
57,mstabent
58,id
59,id
60,mstabent->id < 0
61,mstabent->id
62,mstabent
63,id
64,0
65,<empty>
66,return mstabent;
67,mstabent
68,assert(0)
69,0
70,return 0;
71,0
72,RET
73,int id
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
static jpc_mstabent_t *jpc_mstab_lookup(int id) {
jpc_mstabent_t *mstabent;
if(mstabent->id == id || mstabent->id < 0)
return mstabent;
=======================
