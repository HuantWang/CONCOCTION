-----label-----
0
-----code-----
int rateallocate(jpc_enc_t *enc, int numlyrs, uint_fast32_t *cumlens)
{
	jpc_flt_t lo;
	jpc_flt_t hi;
	jas_stream_t *out;
	long cumlen;
	int lyrno;
	jpc_flt_t thresh;
	jpc_flt_t goodthresh;
	int success;
	long pos;
	long oldpos;
	int numiters;

	jpc_enc_tcmpt_t *comp;
	jpc_enc_tcmpt_t *endcomps;
	jpc_enc_rlvl_t *lvl;
	jpc_enc_rlvl_t *endlvls;
	jpc_enc_band_t *band;
	jpc_enc_band_t *endbands;
	jpc_enc_cblk_t *cblk;
	jpc_enc_cblk_t *endcblks;
	jpc_enc_pass_t *pass;
	jpc_enc_pass_t *endpasses;
	jpc_enc_pass_t *pass1;
	jpc_flt_t mxrdslope;
	jpc_flt_t mnrdslope;
	jpc_enc_tile_t *tile;
	jpc_enc_prc_t *prc;
	int prcno;

	tile = enc->curtile;

	for (lyrno = 1; lyrno < numlyrs - 1; ++lyrno) {
		if (cumlens[lyrno - 1] > cumlens[lyrno]) {
			abort();
		}
	}

	if (!(out = jas_stream_memopen(0, 0))) {
		return -1;
	}


	/* Find minimum and maximum R-D slope values. */
	mnrdslope = DBL_MAX;
	mxrdslope = 0;
	endcomps = &tile->tcmpts[tile->numtcmpts];
	for (comp = tile->tcmpts; comp != endcomps; ++comp) {
		endlvls = &comp->rlvls[comp->numrlvls];
		for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {
			if (!lvl->bands) {
				continue;
			}
			endbands = &lvl->bands[lvl->numbands];
			for (band = lvl->bands; band != endbands; ++band) {
				if (!band->data) {
					continue;
				}
				for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {
					if (!prc->cblks) {
						continue;
					}
					endcblks = &prc->cblks[prc->numcblks];
					for (cblk = prc->cblks; cblk != endcblks; ++cblk) {
						calcrdslopes(cblk);
						endpasses = &cblk->passes[cblk->numpasses];
						for (pass = cblk->passes; pass != endpasses; ++pass) {
							if (pass->rdslope > 0) {
								if (pass->rdslope < mnrdslope) {
									mnrdslope = pass->rdslope;
								}
								if (pass->rdslope > mxrdslope) {
									mxrdslope = pass->rdslope;
								}
							}
						}
					}
				}
			}
		}
	}
if (jas_getdbglevel()) {
	jas_eprintf("min rdslope = %f max rdslope = %f\n", mnrdslope, mxrdslope);
}

	jpc_init_t2state(enc, 1);

	for (lyrno = 0; lyrno < numlyrs; ++lyrno) {

		lo = mnrdslope;
		hi = mxrdslope;

		success = 0;
		goodthresh = 0;
		numiters = 0;

		do {

			cumlen = cumlens[lyrno];
			if (cumlen == UINT_FAST32_MAX) {
				/* Only the last layer can be free of a rate
				  constraint (e.g., for lossless coding). */
				assert(lyrno == numlyrs - 1);
				goodthresh = -1;
				success = 1;
				break;
			}

			thresh = (lo + hi) / 2;

			/* Save the tier 2 coding state. */
			jpc_save_t2state(enc);
			oldpos = jas_stream_tell(out);
			assert(oldpos >= 0);

			/* Assign all passes with R-D slopes greater than or
			  equal to the current threshold to this layer. */
			endcomps = &tile->tcmpts[tile->numtcmpts];
			for (comp = tile->tcmpts; comp != endcomps; ++comp) {
				endlvls = &comp->rlvls[comp->numrlvls];
				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {
					if (!lvl->bands) {
						continue;
					}
					endbands = &lvl->bands[lvl->numbands];
					for (band = lvl->bands; band != endbands; ++band) {
						if (!band->data) {
							continue;
						}
						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {
							if (!prc->cblks) {
								continue;
							}
							endcblks = &prc->cblks[prc->numcblks];
							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {
								if (cblk->curpass) {
									endpasses = &cblk->passes[cblk->numpasses];
									pass1 = cblk->curpass;
									for (pass = cblk->curpass; pass != endpasses; ++pass) {
										if (pass->rdslope >= thresh) {
											pass1 = &pass[1];
										}
									}
									for (pass = cblk->curpass; pass != pass1; ++pass) {
										pass->lyrno = lyrno;
									}
									for (; pass != endpasses; ++pass) {
										pass->lyrno = -1;
									}
								}
							}
						}
					}
				}
			}

			/* Perform tier 2 coding. */
			endcomps = &tile->tcmpts[tile->numtcmpts];
			for (comp = tile->tcmpts; comp != endcomps; ++comp) {
				endlvls = &comp->rlvls[comp->numrlvls];
				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {
					if (!lvl->bands) {
						continue;
					}
					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {
						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {
							return -1;
						}
					}
				}
			}

			pos = jas_stream_tell(out);

			/* Check the rate constraint. */
			assert(pos >= 0);
			if (pos > cumlen) {
				/* The rate is too high. */
				lo = thresh;
			} else if (pos <= cumlen) {
				/* The rate is low enough, so try higher. */
				hi = thresh;
				if (!success || thresh < goodthresh) {
					goodthresh = thresh;
					success = 1;
				}
			}

			/* Save the tier 2 coding state. */
			jpc_restore_t2state(enc);
			if (jas_stream_seek(out, oldpos, SEEK_SET) < 0) {
				abort();
			}

if (jas_getdbglevel()) {
jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);
}

			++numiters;
		} while (lo < hi - 1e-3 && numiters < 32);

		if (!success) {
			jas_eprintf("warning: empty layer generated\n");
		}

if (jas_getdbglevel()) {
jas_eprintf("success %d goodthresh %f\n", success, goodthresh);
}

		/* Assign all passes with R-D slopes greater than or
		  equal to the selected threshold to this layer. */
		endcomps = &tile->tcmpts[tile->numtcmpts];
		for (comp = tile->tcmpts; comp != endcomps; ++comp) {
			endlvls = &comp->rlvls[comp->numrlvls];
			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {
if (!lvl->bands) {
	continue;
}
				endbands = &lvl->bands[lvl->numbands];
				for (band = lvl->bands; band != endbands; ++band) {
					if (!band->data) {
						continue;
					}
					for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {
						if (!prc->cblks) {
							continue;
						}
						endcblks = &prc->cblks[prc->numcblks];
						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {
							if (cblk->curpass) {
								endpasses = &cblk->passes[cblk->numpasses];
								pass1 = cblk->curpass;
								if (success) {
									for (pass = cblk->curpass; pass != endpasses; ++pass) {
										if (pass->rdslope >= goodthresh) {
											pass1 = &pass[1];
										}
									}
								}
								for (pass = cblk->curpass; pass != pass1; ++pass) {
									pass->lyrno = lyrno;
								}
								for (; pass != endpasses; ++pass) {
									pass->lyrno = -1;
								}
							}
						}
					}
				}
			}
		}

		/* Perform tier 2 coding. */
		endcomps = &tile->tcmpts[tile->numtcmpts];
		for (comp = tile->tcmpts; comp != endcomps; ++comp) {
			endlvls = &comp->rlvls[comp->numrlvls];
			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {
				if (!lvl->bands) {
					continue;
				}
				for (prcno = 0; prcno < lvl->numprcs; ++prcno) {
					if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {
						return -1;
					}
				}
			}
		}
	}

	if (jas_getdbglevel() >= 5) {
		dump_layeringinfo(enc);
	}

	jas_stream_close(out);

	JAS_DBGLOG(10, ("done doing rateallocation\n"));
#if 0
jas_eprintf("DONE RATE ALLOCATE\n");
#endif

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
21,38
21,39
21,40
21,41
21,42
21,43
21,44
21,45
21,46
21,47
21,48
21,49
21,50
21,51
21,52
21,53
21,54
21,55
21,56
21,57
21,58
21,59
21,60
21,61
21,62
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
41,42
42,43
42,44
44,45
46,47
47,48
47,49
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
66,67
68,69
69,70
69,71
71,72
73,74
74,75
74,76
76,77
78,79
79,80
79,81
81,82
83,84
84,85
84,86
85,86
87,88
87,89
90,91
91,92
91,93
92,93
94,95
94,96
97,98
98,99
98,100
99,100
101,102
101,103
104,105
105,106
105,107
106,107
108,109
108,110
111,112
112,113
112,114
113,114
115,116
115,117
118,119
119,120
119,121
120,121
122,123
122,124
125,126
126,127
126,128
127,128
129,130
129,131
132,133
133,134
133,135
134,135
136,137
136,138
139,140
140,141
140,142
141,142
143,144
143,145
146,147
147,148
147,149
148,149
150,151
150,152
153,154
154,155
154,156
155,156
157,158
157,159
160,161
161,162
161,163
162,163
164,165
166,167
167,168
167,169
168,169
170,171
172,173
173,174
173,175
174,175
176,177
176,178
179,180
180,181
180,182
181,182
183,184
183,185
186,187
187,188
187,189
189,190
191,192
192,193
192,194
193,194
195,196
195,197
196,197
199,200
199,201
199,202
199,203
200,201
201,202
201,203
202,203
205,206
205,207
206,207
208,209
208,210
209,210
212,213
213,214
215,216
216,217
216,218
217,218
217,219
218,219
218,220
219,220
221,222
221,223
222,223
225,226
225,227
226,227
228,229
230,231
231,232
232,233
233,234
235,236
235,237
236,237
237,238
238,239
238,240
239,240
241,242
241,243
241,244
242,243
246,247
247,248
248,249
250,251
251,252
251,253
252,253
254,255
256,257
257,258
257,259
258,259
261,262
262,263
262,264
263,264
265,266
266,267
266,268
267,268
267,269
268,269
271,272
271,273
272,273
275,276
275,277
275,278
275,279
276,277
277,278
277,279
278,279
280,281
280,282
281,282
284,285
284,286
285,286
287,288
289,290
290,291
292,293
292,294
293,294
294,295
294,296
295,296
297,298
298,299
298,300
299,300
299,301
300,301
303,304
303,305
304,305
307,308
307,309
307,310
307,311
308,309
309,310
309,311
310,311
312,313
312,314
313,314
316,317
316,318
317,318
319,320
321,322
322,323
324,325
324,326
324,327
325,326
325,327
326,327
327,328
327,329
328,329
331,332
333,334
334,335
334,336
335,336
337,338
338,339
338,340
339,340
339,341
340,341
343,344
343,345
344,345
347,348
347,349
347,350
347,351
348,349
349,350
349,351
350,351
352,353
352,354
353,354
356,357
356,358
357,358
359,360
361,362
362,363
364,365
364,366
365,366
365,367
366,367
367,368
367,369
368,369
371,372
373,374
373,375
373,376
373,377
374,375
375,376
375,377
376,377
376,378
377,378
380,381
380,382
381,382
383,384
383,385
384,385
387,388
387,389
388,389
390,391
390,392
391,392
394,395
394,396
395,396
396,397
398,399
399,400
401,402
401,403
401,404
402,403
402,404
403,404
404,405
404,406
405,406
408,409
410,411
411,412
411,413
412,413
414,415
415,416
415,417
416,417
416,418
417,418
420,421
420,422
421,422
424,425
424,426
424,427
424,428
425,426
426,427
426,428
427,428
429,430
429,431
430,431
433,434
433,435
434,435
436,437
438,439
439,440
441,442
441,443
441,444
442,443
443,444
443,445
444,445
446,447
448,449
449,450
449,451
450,451
452,453
453,454
453,455
454,455
454,456
455,456
458,459
458,460
459,460
462,463
462,464
462,465
462,466
463,464
464,465
464,466
465,466
467,468
467,469
468,469
471,472
471,473
472,473
474,475
476,477
477,478
479,480
480,481
480,482
481,482
481,483
482,483
482,484
483,484
487,488
487,489
488,489
488,490
489,490
489,491
490,491
490,492
491,492
494,495
496,497
497,498
498,499
498,500
499,500
501,502
501,503
502,503
505,506
505,507
506,507
506,508
507,508
507,509
508,509
511,512
513,514
514,515
515,516
515,517
516,517
518,519
518,520
519,520
522,523
522,524
523,524
524,525
526,527
527,528
528,529
528,530
528,531
528,532
529,530
532,533
534,535
536,537
537,538
537,539
537,540
538,539
540,541
543,544
543,545
543,546
543,547
544,545
545,546
545,547
546,547
549,550
549,551
550,551
552,553
554,555
555,556
557,558
557,559
557,560
557,561
557,562
557,563
557,564
557,565
557,566
557,567
557,568
557,569
558,559
559,560
559,561
560,561
562,563
564,565
565,566
565,567
566,567
568,569
570,571
571,572
571,573
572,573
575,576
576,577
576,578
577,578
580,581
581,582
581,583
582,583
585,586
585,587
586,587
586,588
586,589
586,590
586,591
586,592
586,593
586,594
586,595
586,596
586,597
586,598
586,599
586,600
586,601
586,602
586,603
587,588
588,589
588,590
589,590
591,592
591,593
592,593
594,595
596,597
596,598
597,598
597,599
598,599
600,601
602,603
602,604
602,605
602,606
603,604
604,605
604,606
605,606
607,608
607,609
608,609
610,611
610,612
611,612
614,615
615,616
615,617
616,617
618,619
620,621
621,622
621,623
622,623
626,627
627,628
627,629
628,629
630,631
630,632
631,632
632,633
632,634
633,634
635,636
638,639
639,640
639,641
640,641
642,643
644,645
645,646
645,647
646,647
648,649
648,650
649,650
651,652
653,654
654,655
654,656
655,656
657,658
657,659
658,659
661,662
662,663
662,664
663,664
665,666
666,667
666,668
667,668
667,669
668,669
671,672
671,673
672,673
675,676
675,677
675,678
675,679
676,677
677,678
677,679
678,679
680,681
680,682
681,682
684,685
684,686
685,686
687,688
689,690
690,691
692,693
692,694
693,694
694,695
694,696
695,696
697,698
698,699
698,700
699,700
699,701
700,701
703,704
703,705
704,705
707,708
707,709
707,710
707,711
708,709
709,710
709,711
710,711
712,713
712,714
713,714
716,717
716,718
717,718
719,720
721,722
722,723
724,725
724,726
724,727
725,726
725,727
726,727
727,728
727,729
728,729
731,732
733,734
734,735
734,736
735,736
737,738
738,739
738,740
739,740
739,741
740,741
743,744
743,745
744,745
747,748
747,749
747,750
747,751
748,749
749,750
749,751
750,751
752,753
752,754
753,754
756,757
756,758
757,758
759,760
761,762
762,763
764,765
764,766
765,766
765,767
766,767
767,768
767,769
768,769
771,772
773,774
773,775
773,776
773,777
774,775
775,776
775,777
776,777
776,778
777,778
780,781
780,782
781,782
783,784
783,785
784,785
787,788
787,789
788,789
790,791
790,792
791,792
794,795
794,796
795,796
796,797
798,799
799,800
801,802
801,803
801,804
802,803
802,804
803,804
804,805
804,806
805,806
808,809
810,811
811,812
811,813
812,813
814,815
815,816
815,817
816,817
816,818
817,818
820,821
820,822
821,822
824,825
824,826
824,827
824,828
825,826
826,827
826,828
827,828
829,830
829,831
830,831
833,834
833,835
834,835
836,837
838,839
839,840
841,842
842,843
842,844
843,844
843,845
844,845
847,848
847,849
847,850
847,851
847,852
848,849
849,850
849,851
850,851
852,853
853,854
853,855
854,855
854,856
855,856
858,859
858,860
859,860
862,863
863,864
863,865
864,865
866,867
866,868
867,868
870,871
870,872
870,873
870,874
871,872
872,873
872,874
873,874
875,876
875,877
876,877
879,880
879,881
880,881
882,883
884,885
885,886
887,888
888,889
888,890
889,890
889,891
890,891
890,892
891,892
894,895
896,897
897,898
898,899
898,900
899,900
901,902
902,903
902,904
903,904
906,907
906,908
906,909
906,910
907,908
908,909
908,910
909,910
911,912
911,913
912,913
915,916
915,917
916,917
918,919
920,921
921,922
923,924
924,925
925,926
925,927
926,927
926,928
927,928
930,931
932,933
932,934
932,935
932,936
934,935
934,936
935,936
937,938
939,940
940,941
942,943
943,944
944,945
944,946
945,946
945,947
946,947
949,950
951,952
952,953
952,954
953,954
955,956
956,957
956,958
957,958
957,959
958,959
961,962
961,963
962,963
965,966
965,967
965,968
965,969
966,967
967,968
967,969
968,969
970,971
970,972
971,972
974,975
974,976
975,976
977,978
979,980
980,981
982,983
982,984
983,984
984,985
984,986
985,986
987,988
988,989
988,990
989,990
989,991
990,991
993,994
993,995
994,995
997,998
997,999
997,1000
997,1001
998,999
999,1000
999,1001
1000,1001
1002,1003
1002,1004
1003,1004
1006,1007
1006,1008
1007,1008
1009,1010
1011,1012
1012,1013
1014,1015
1014,1016
1015,1016
1015,1017
1016,1017
1017,1018
1017,1019
1018,1019
1021,1022
1023,1024
1023,1025
1023,1026
1023,1027
1024,1025
1025,1026
1025,1027
1026,1027
1029,1030
1029,1031
1030,1031
1032,1033
1032,1034
1033,1034
1036,1037
1037,1038
1039,1040
1040,1041
1040,1042
1041,1042
1041,1043
1041,1044
1041,1045
1041,1046
1041,1047
1041,1048
1042,1043
1044,1045
1046,1047
1048,1049
1048,1050
1049,1050
1051,1052
1051,1053
1052,1053
1055,1056
1055,1057
1056,1057
1058,1059
1058,1060
1059,1060
1062,1063
1064,1065
1066,1067
1067,1068
1068,1069
1070,1071
1071,1072
1071,1073
1072,1073
1074,1075
1074,1076
1075,1076
1077,1078
1079,1080
1080,1081
1080,1082
1081,1082
1083,1084
1083,1085
1084,1085
1087,1088
1087,1089
1087,1090
1088,1089
1088,1090
1089,1090
1091,1092
1093,1094
1094,1095
1095,1096
1095,1097
1096,1097
1098,1099
1100,1101
1100,1102
1101,1102
1101,1103
1102,1103
1104,1105
1106,1107
1106,1108
1107,1108
1108,1109
1108,1110
1109,1110
1111,1112
1113,1114
1113,1115
1114,1115
1114,1116
1115,1116
1116,1117
1118,1119
1118,1120
1119,1120
1121,1122
1123,1124
1123,1125
1124,1125
1125,1126
1125,1127
1126,1127
1128,1129
1130,1131
1131,1132
1131,1133
1132,1133
1135,1136
1136,1137
1136,1138
1137,1138
1139,1140
1141,1142
1141,1143
1142,1143
1142,1144
1143,1144
1143,1145
1143,1146
1143,1147
1144,1145
1146,1147
1148,1149
1150,1151
1153,1154
1154,1155
1155,1156
1156,1157
1158,1159
1158,1160
1159,1160
1160,1161
1162,1163
1163,1164
1164,1165
1164,1166
1164,1167
1164,1168
1164,1169
1165,1166
1168,1169
1170,1171
1172,1173
1174,1175
1175,1176
1176,1177
1178,1179
1178,1180
1179,1180
1179,1181
1180,1181
1182,1183
1182,1184
1183,1184
1186,1187
1186,1188
1187,1188
1190,1191
1190,1192
1191,1192
1192,1193
1194,1195
1195,1196
1196,1197
1196,1198
1197,1198
1200,1201
1200,1202
1201,1202
1202,1203
1204,1205
1205,1206
1206,1207
1206,1208
1206,1209
1206,1210
1207,1208
1210,1211
1212,1213
1214,1215
1215,1216
1215,1217
1216,1217
1218,1219
1219,1220
1219,1221
1220,1221
1220,1222
1221,1222
1224,1225
1224,1226
1225,1226
1228,1229
1228,1230
1228,1231
1228,1232
1229,1230
1230,1231
1230,1232
1231,1232
1233,1234
1233,1235
1234,1235
1237,1238
1237,1239
1238,1239
1240,1241
1242,1243
1243,1244
1245,1246
1245,1247
1246,1247
1247,1248
1247,1249
1248,1249
1250,1251
1251,1252
1251,1253
1252,1253
1252,1254
1253,1254
1256,1257
1256,1258
1257,1258
1260,1261
1260,1262
1260,1263
1260,1264
1261,1262
1262,1263
1262,1264
1263,1264
1265,1266
1265,1267
1266,1267
1269,1270
1269,1271
1270,1271
1272,1273
1274,1275
1275,1276
1277,1278
1277,1279
1277,1280
1278,1279
1278,1280
1279,1280
1280,1281
1280,1282
1281,1282
1284,1285
1286,1287
1287,1288
1287,1289
1288,1289
1290,1291
1291,1292
1291,1293
1292,1293
1292,1294
1293,1294
1296,1297
1296,1298
1297,1298
1300,1301
1300,1302
1300,1303
1300,1304
1301,1302
1302,1303
1302,1304
1303,1304
1305,1306
1305,1307
1306,1307
1309,1310
1309,1311
1310,1311
1312,1313
1314,1315
1315,1316
1317,1318
1317,1319
1318,1319
1318,1320
1319,1320
1320,1321
1320,1322
1321,1322
1324,1325
1326,1327
1326,1328
1326,1329
1326,1330
1327,1328
1328,1329
1328,1330
1329,1330
1329,1331
1330,1331
1333,1334
1333,1335
1334,1335
1336,1337
1336,1338
1337,1338
1340,1341
1340,1342
1341,1342
1343,1344
1343,1345
1344,1345
1347,1348
1347,1349
1348,1349
1349,1350
1351,1352
1352,1353
1354,1355
1354,1356
1354,1357
1355,1356
1355,1357
1356,1357
1357,1358
1357,1359
1358,1359
1361,1362
1363,1364
1364,1365
1364,1366
1365,1366
1367,1368
1368,1369
1368,1370
1369,1370
1369,1371
1370,1371
1373,1374
1373,1375
1374,1375
1377,1378
1377,1379
1377,1380
1377,1381
1378,1379
1379,1380
1379,1381
1380,1381
1382,1383
1382,1384
1383,1384
1386,1387
1386,1388
1387,1388
1389,1390
1391,1392
1392,1393
1394,1395
1395,1396
1395,1397
1396,1397
1396,1398
1397,1398
1400,1401
1400,1402
1400,1403
1400,1404
1400,1405
1401,1402
1402,1403
1402,1404
1403,1404
1405,1406
1406,1407
1406,1408
1407,1408
1407,1409
1408,1409
1411,1412
1411,1413
1412,1413
1415,1416
1416,1417
1416,1418
1417,1418
1419,1420
1419,1421
1420,1421
1423,1424
1423,1425
1424,1425
1426,1427
1427,1428
1427,1429
1427,1430
1427,1431
1428,1429
1429,1430
1429,1431
1430,1431
1432,1433
1432,1434
1433,1434
1436,1437
1436,1438
1437,1438
1439,1440
1441,1442
1442,1443
1444,1445
1445,1446
1445,1447
1446,1447
1446,1448
1447,1448
1447,1449
1448,1449
1451,1452
1453,1454
1454,1455
1455,1456
1455,1457
1456,1457
1458,1459
1459,1460
1459,1461
1460,1461
1463,1464
1463,1465
1463,1466
1463,1467
1464,1465
1465,1466
1465,1467
1466,1467
1468,1469
1468,1470
1469,1470
1472,1473
1472,1474
1473,1474
1475,1476
1477,1478
1478,1479
1480,1481
1481,1482
1482,1483
1482,1484
1483,1484
1483,1485
1484,1485
1487,1488
1489,1490
1489,1491
1489,1492
1489,1493
1491,1492
1491,1493
1492,1493
1494,1495
1496,1497
1497,1498
1499,1500
1500,1501
1501,1502
1501,1503
1502,1503
1502,1504
1503,1504
1506,1507
1508,1509
1509,1510
1509,1511
1510,1511
1512,1513
1513,1514
1513,1515
1514,1515
1514,1516
1515,1516
1518,1519
1518,1520
1519,1520
1522,1523
1522,1524
1522,1525
1522,1526
1523,1524
1524,1525
1524,1526
1525,1526
1527,1528
1527,1529
1528,1529
1531,1532
1531,1533
1532,1533
1534,1535
1536,1537
1537,1538
1539,1540
1539,1541
1540,1541
1541,1542
1541,1543
1542,1543
1544,1545
1545,1546
1545,1547
1546,1547
1546,1548
1547,1548
1550,1551
1550,1552
1551,1552
1554,1555
1554,1556
1554,1557
1554,1558
1555,1556
1556,1557
1556,1558
1557,1558
1559,1560
1559,1561
1560,1561
1563,1564
1563,1565
1564,1565
1566,1567
1568,1569
1569,1570
1571,1572
1571,1573
1572,1573
1572,1574
1573,1574
1574,1575
1574,1576
1575,1576
1578,1579
1580,1581
1580,1582
1580,1583
1580,1584
1581,1582
1582,1583
1582,1584
1583,1584
1586,1587
1586,1588
1587,1588
1589,1590
1589,1591
1590,1591
1593,1594
1594,1595
1596,1597
1597,1598
1597,1599
1598,1599
1598,1600
1598,1601
1598,1602
1598,1603
1598,1604
1598,1605
1599,1600
1601,1602
1603,1604
1605,1606
1605,1607
1606,1607
1608,1609
1608,1610
1609,1610
1612,1613
1612,1614
1613,1614
1615,1616
1615,1617
1616,1617
1619,1620
1621,1622
1623,1624
1624,1625
1625,1626
1627,1628
1627,1629
1628,1629
1628,1630
1629,1630
1630,1631
1633,1634
1634,1635
1635,1636
1635,1637
1636,1637
1638,1639
1640,1641
1641,1642
1641,1643
1642,1643
1644,1645
1646,1647
1647,1648
1647,1649
1647,1650
1648,1649
1651,1652
1653,1654
-----nextToken-----
2,4,7,9,10,12,14,17,19,20,25,27,31,33,37,39,40,43,45,48,50,54,56,60,62,65,67,70,72,75,77,80,82,86,88,89,93,95,96,100,102,103,107,109,110,114,116,117,121,123,124,128,130,131,135,137,138,142,144,145,149,151,152,156,158,159,163,165,169,171,175,177,178,182,184,185,188,190,194,197,198,203,204,207,210,211,214,220,223,224,227,229,234,240,243,244,245,249,253,255,259,260,264,269,270,273,274,279,282,283,286,288,291,296,301,302,305,306,311,314,315,318,320,323,329,330,332,336,341,342,345,346,351,354,355,358,360,363,369,370,372,378,379,382,385,386,389,392,393,397,400,406,407,409,413,418,419,422,423,428,431,432,435,437,440,445,447,451,456,457,460,461,466,469,470,473,475,478,484,485,486,492,493,495,500,503,504,509,510,512,517,520,521,525,530,531,533,535,539,541,542,547,548,551,553,556,561,563,567,569,573,574,578,579,583,584,590,593,595,599,601,606,609,612,613,617,619,623,624,625,629,634,636,637,641,643,647,650,652,656,659,660,664,669,670,673,674,679,682,683,686,688,691,696,701,702,705,706,711,714,715,718,720,723,729,730,732,736,741,742,745,746,751,754,755,758,760,763,769,770,772,778,779,782,785,786,789,792,793,797,800,806,807,809,813,818,819,822,823,828,831,832,835,837,840,845,846,851,856,857,860,861,865,868,869,874,877,878,881,883,886,892,893,895,900,904,905,910,913,914,917,919,922,928,929,931,933,936,938,941,947,948,950,954,959,960,963,964,969,972,973,976,978,981,986,991,992,995,996,1001,1004,1005,1008,1010,1013,1019,1020,1022,1027,1028,1031,1034,1035,1038,1043,1045,1047,1050,1053,1054,1057,1060,1061,1063,1065,1069,1073,1076,1078,1082,1085,1086,1090,1092,1097,1099,1103,1105,1110,1112,1117,1120,1122,1127,1129,1133,1134,1138,1140,1145,1147,1149,1151,1152,1157,1161,1166,1167,1169,1171,1173,1177,1181,1184,1185,1188,1189,1193,1198,1199,1203,1208,1209,1211,1213,1217,1222,1223,1226,1227,1232,1235,1236,1239,1241,1244,1249,1254,1255,1258,1259,1264,1267,1268,1271,1273,1276,1282,1283,1285,1289,1294,1295,1298,1299,1304,1307,1308,1311,1313,1316,1322,1323,1325,1331,1332,1335,1338,1339,1342,1345,1346,1350,1353,1359,1360,1362,1366,1371,1372,1375,1376,1381,1384,1385,1388,1390,1393,1398,1399,1404,1409,1410,1413,1414,1418,1421,1422,1425,1431,1434,1435,1438,1440,1443,1449,1450,1452,1457,1461,1462,1467,1470,1471,1474,1476,1479,1485,1486,1488,1490,1493,1495,1498,1504,1505,1507,1511,1516,1517,1520,1521,1526,1529,1530,1533,1535,1538,1543,1548,1549,1552,1553,1558,1561,1562,1565,1567,1570,1576,1577,1579,1584,1585,1588,1591,1592,1595,1600,1602,1604,1607,1610,1611,1614,1617,1618,1620,1622,1626,1631,1632,1637,1639,1643,1645,1649,1650,1652,1654
-----computeFrom-----
192,193
192,194
201,202
201,203
205,206
205,207
208,209
208,210
217,218
217,219
221,222
221,223
238,239
238,240
251,252
251,253
257,258
257,259
262,263
262,264
277,278
277,279
284,285
284,286
294,295
294,296
309,310
309,311
316,317
316,318
334,335
334,336
349,350
349,351
356,357
356,358
376,377
376,378
380,381
380,382
387,388
387,389
411,412
411,413
426,427
426,428
433,434
433,435
449,450
449,451
464,465
464,466
471,472
471,473
481,482
481,483
489,490
489,491
498,499
498,500
506,507
506,508
515,516
515,517
545,546
545,547
549,550
549,551
559,560
559,561
565,566
565,567
571,572
571,573
576,577
576,578
581,582
581,583
588,589
588,590
597,598
597,599
607,608
607,609
610,611
610,612
615,616
615,617
621,622
621,623
627,628
627,629
630,631
630,632
632,633
632,634
645,646
645,647
657,658
657,659
662,663
662,664
677,678
677,679
684,685
684,686
694,695
694,696
709,710
709,711
716,717
716,718
734,735
734,736
749,750
749,751
756,757
756,758
776,777
776,778
780,781
780,782
787,788
787,789
811,812
811,813
826,827
826,828
833,834
833,835
849,850
849,851
863,864
863,865
872,873
872,874
879,880
879,881
889,890
889,891
898,899
898,900
908,909
908,910
915,916
915,917
925,926
925,927
934,935
934,936
944,945
944,946
952,953
952,954
967,968
967,969
974,975
974,976
984,985
984,986
999,1000
999,1001
1006,1007
1006,1008
1025,1026
1025,1027
1029,1030
1029,1031
1048,1049
1048,1050
1055,1056
1055,1057
1071,1072
1071,1073
1083,1084
1083,1085
1088,1089
1088,1090
1095,1096
1095,1097
1101,1102
1101,1103
1108,1109
1108,1110
1114,1115
1114,1116
1118,1119
1118,1120
1125,1126
1125,1127
1131,1132
1131,1133
1142,1143
1142,1144
1178,1179
1178,1180
1179,1180
1179,1181
1182,1183
1182,1184
1186,1187
1186,1188
1215,1216
1215,1217
1230,1231
1230,1232
1237,1238
1237,1239
1247,1248
1247,1249
1262,1263
1262,1264
1269,1270
1269,1271
1287,1288
1287,1289
1302,1303
1302,1304
1309,1310
1309,1311
1329,1330
1329,1331
1333,1334
1333,1335
1340,1341
1340,1342
1364,1365
1364,1366
1379,1380
1379,1381
1386,1387
1386,1388
1402,1403
1402,1404
1416,1417
1416,1418
1429,1430
1429,1431
1436,1437
1436,1438
1446,1447
1446,1448
1455,1456
1455,1457
1465,1466
1465,1467
1472,1473
1472,1474
1482,1483
1482,1484
1491,1492
1491,1493
1501,1502
1501,1503
1509,1510
1509,1511
1524,1525
1524,1526
1531,1532
1531,1533
1541,1542
1541,1543
1556,1557
1556,1558
1563,1564
1563,1565
1582,1583
1582,1584
1586,1587
1586,1588
1605,1606
1605,1607
1612,1613
1612,1614
1628,1629
1628,1630
-----guardedBy-----
484,520
485,521
492,503
493,504
495,500
509,520
510,521
512,517
892,904
1122,1127
1117,1133
1120,1129
1449,1461
-----guardedByNegation-----
1090,1103
1092,1105
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;NullStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;NullStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ContinueStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int rateallocate(jpc_enc_t *enc, int numlyrs, uint_fast32_t *cumlens){	jpc_flt_t lo;	jpc_flt_t hi;	jas_stream_t *out;	long cumlen;	int lyrno;	jpc_flt_t thresh;	jpc_flt_t goodthresh;	int success;	long pos;	long oldpos;	int numiters;	jpc_enc_tcmpt_t *comp;	jpc_enc_tcmpt_t *endcomps;	jpc_enc_rlvl_t *lvl;	jpc_enc_rlvl_t *endlvls;	jpc_enc_band_t *band;	jpc_enc_band_t *endbands;	jpc_enc_cblk_t *cblk;	jpc_enc_cblk_t *endcblks;	jpc_enc_pass_t *pass;	jpc_enc_pass_t *endpasses;	jpc_enc_pass_t *pass1;	jpc_flt_t mxrdslope;	jpc_flt_t mnrdslope;	jpc_enc_tile_t *tile;	jpc_enc_prc_t *prc;	int prcno;	tile = enc->curtile;	for (lyrno = 1; lyrno < numlyrs - 1; ++lyrno) {		if (cumlens[lyrno - 1] > cumlens[lyrno]) {			abort();		}	}	if (!(out = jas_stream_memopen(0, 0))) {		return -1;	}	/* Find minimum and maximum R-D slope values. */	mnrdslope = DBL_MAX;	mxrdslope = 0;	endcomps = &tile->tcmpts[tile->numtcmpts];	for (comp = tile->tcmpts; comp != endcomps; ++comp) {		endlvls = &comp->rlvls[comp->numrlvls];		for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {			if (!lvl->bands) {				continue;			}			endbands = &lvl->bands[lvl->numbands];			for (band = lvl->bands; band != endbands; ++band) {				if (!band->data) {					continue;				}				for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {					if (!prc->cblks) {						continue;					}					endcblks = &prc->cblks[prc->numcblks];					for (cblk = prc->cblks; cblk != endcblks; ++cblk) {						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}				}			}		}	}if (jas_getdbglevel()) {	jas_eprintf("min rdslope = %f max rdslope = %f\n", mnrdslope, mxrdslope);}	jpc_init_t2state(enc, 1);	for (lyrno = 0; lyrno < numlyrs; ++lyrno) {		lo = mnrdslope;		hi = mxrdslope;		success = 0;		goodthresh = 0;		numiters = 0;		do {			cumlen = cumlens[lyrno];			if (cumlen == UINT_FAST32_MAX) {				/* Only the last layer can be free of a rate				  constraint (e.g., for lossless coding). */				assert(lyrno == numlyrs - 1);				goodthresh = -1;				success = 1;				break;			}			thresh = (lo + hi) / 2;			/* Save the tier 2 coding state. */			jpc_save_t2state(enc);			oldpos = jas_stream_tell(out);			assert(oldpos >= 0);			/* Assign all passes with R-D slopes greater than or			  equal to the current threshold to this layer. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					endbands = &lvl->bands[lvl->numbands];					for (band = lvl->bands; band != endbands; ++band) {						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}				}			}			/* Perform tier 2 coding. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}				}			}			pos = jas_stream_tell(out);			/* Check the rate constraint. */			assert(pos >= 0);			if (pos > cumlen) {				/* The rate is too high. */				lo = thresh;			} else if (pos <= cumlen) {				/* The rate is low enough, so try higher. */				hi = thresh;				if (!success || thresh < goodthresh) {					goodthresh = thresh;					success = 1;				}			}			/* Save the tier 2 coding state. */			jpc_restore_t2state(enc);			if (jas_stream_seek(out, oldpos, SEEK_SET) < 0) {				abort();			}if (jas_getdbglevel()) {jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);}			++numiters;		} while (lo < hi - 1e-3 && numiters < 32);		if (!success) {			jas_eprintf("warning: empty layer generated\n");		}if (jas_getdbglevel()) {jas_eprintf("success %d goodthresh %f\n", success, goodthresh);}		/* Assign all passes with R-D slopes greater than or		  equal to the selected threshold to this layer. */		endcomps = &tile->tcmpts[tile->numtcmpts];		for (comp = tile->tcmpts; comp != endcomps; ++comp) {			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {if (!lvl->bands) {	continue;}				endbands = &lvl->bands[lvl->numbands];				for (band = lvl->bands; band != endbands; ++band) {					if (!band->data) {						continue;					}					for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}				}			}		}		/* Perform tier 2 coding. */		endcomps = &tile->tcmpts[tile->numtcmpts];		for (comp = tile->tcmpts; comp != endcomps; ++comp) {			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {				if (!lvl->bands) {					continue;				}				for (prcno = 0; prcno < lvl->numprcs; ++prcno) {					if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {						return -1;					}				}			}		}	}	if (jas_getdbglevel() >= 5) {		dump_layeringinfo(enc);	}	jas_stream_close(out);	JAS_DBGLOG(10, ("done doing rateallocation\n"));#if 0jas_eprintf("DONE RATE ALLOCATE\n");#endif	return 0;}
int
rateallocate(jpc_enc_t *enc, int numlyrs, uint_fast32_t *cumlens)
rateallocate
jpc_enc_t *enc
jpc_enc_t
jpc_enc_t
*enc
*
enc
int numlyrs
int
numlyrs
numlyrs
uint_fast32_t *cumlens
uint_fast32_t
uint_fast32_t
*cumlens
*
cumlens
{	jpc_flt_t lo;	jpc_flt_t hi;	jas_stream_t *out;	long cumlen;	int lyrno;	jpc_flt_t thresh;	jpc_flt_t goodthresh;	int success;	long pos;	long oldpos;	int numiters;	jpc_enc_tcmpt_t *comp;	jpc_enc_tcmpt_t *endcomps;	jpc_enc_rlvl_t *lvl;	jpc_enc_rlvl_t *endlvls;	jpc_enc_band_t *band;	jpc_enc_band_t *endbands;	jpc_enc_cblk_t *cblk;	jpc_enc_cblk_t *endcblks;	jpc_enc_pass_t *pass;	jpc_enc_pass_t *endpasses;	jpc_enc_pass_t *pass1;	jpc_flt_t mxrdslope;	jpc_flt_t mnrdslope;	jpc_enc_tile_t *tile;	jpc_enc_prc_t *prc;	int prcno;	tile = enc->curtile;	for (lyrno = 1; lyrno < numlyrs - 1; ++lyrno) {		if (cumlens[lyrno - 1] > cumlens[lyrno]) {			abort();		}	}	if (!(out = jas_stream_memopen(0, 0))) {		return -1;	}	/* Find minimum and maximum R-D slope values. */	mnrdslope = DBL_MAX;	mxrdslope = 0;	endcomps = &tile->tcmpts[tile->numtcmpts];	for (comp = tile->tcmpts; comp != endcomps; ++comp) {		endlvls = &comp->rlvls[comp->numrlvls];		for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {			if (!lvl->bands) {				continue;			}			endbands = &lvl->bands[lvl->numbands];			for (band = lvl->bands; band != endbands; ++band) {				if (!band->data) {					continue;				}				for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {					if (!prc->cblks) {						continue;					}					endcblks = &prc->cblks[prc->numcblks];					for (cblk = prc->cblks; cblk != endcblks; ++cblk) {						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}				}			}		}	}if (jas_getdbglevel()) {	jas_eprintf("min rdslope = %f max rdslope = %f\n", mnrdslope, mxrdslope);}	jpc_init_t2state(enc, 1);	for (lyrno = 0; lyrno < numlyrs; ++lyrno) {		lo = mnrdslope;		hi = mxrdslope;		success = 0;		goodthresh = 0;		numiters = 0;		do {			cumlen = cumlens[lyrno];			if (cumlen == UINT_FAST32_MAX) {				/* Only the last layer can be free of a rate				  constraint (e.g., for lossless coding). */				assert(lyrno == numlyrs - 1);				goodthresh = -1;				success = 1;				break;			}			thresh = (lo + hi) / 2;			/* Save the tier 2 coding state. */			jpc_save_t2state(enc);			oldpos = jas_stream_tell(out);			assert(oldpos >= 0);			/* Assign all passes with R-D slopes greater than or			  equal to the current threshold to this layer. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					endbands = &lvl->bands[lvl->numbands];					for (band = lvl->bands; band != endbands; ++band) {						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}				}			}			/* Perform tier 2 coding. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}				}			}			pos = jas_stream_tell(out);			/* Check the rate constraint. */			assert(pos >= 0);			if (pos > cumlen) {				/* The rate is too high. */				lo = thresh;			} else if (pos <= cumlen) {				/* The rate is low enough, so try higher. */				hi = thresh;				if (!success || thresh < goodthresh) {					goodthresh = thresh;					success = 1;				}			}			/* Save the tier 2 coding state. */			jpc_restore_t2state(enc);			if (jas_stream_seek(out, oldpos, SEEK_SET) < 0) {				abort();			}if (jas_getdbglevel()) {jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);}			++numiters;		} while (lo < hi - 1e-3 && numiters < 32);		if (!success) {			jas_eprintf("warning: empty layer generated\n");		}if (jas_getdbglevel()) {jas_eprintf("success %d goodthresh %f\n", success, goodthresh);}		/* Assign all passes with R-D slopes greater than or		  equal to the selected threshold to this layer. */		endcomps = &tile->tcmpts[tile->numtcmpts];		for (comp = tile->tcmpts; comp != endcomps; ++comp) {			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {if (!lvl->bands) {	continue;}				endbands = &lvl->bands[lvl->numbands];				for (band = lvl->bands; band != endbands; ++band) {					if (!band->data) {						continue;					}					for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}				}			}		}		/* Perform tier 2 coding. */		endcomps = &tile->tcmpts[tile->numtcmpts];		for (comp = tile->tcmpts; comp != endcomps; ++comp) {			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {				if (!lvl->bands) {					continue;				}				for (prcno = 0; prcno < lvl->numprcs; ++prcno) {					if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {						return -1;					}				}			}		}	}	if (jas_getdbglevel() >= 5) {		dump_layeringinfo(enc);	}	jas_stream_close(out);	JAS_DBGLOG(10, ("done doing rateallocation\n"));#if 0jas_eprintf("DONE RATE ALLOCATE\n");#endif	return 0;}
jpc_flt_t lo;
jpc_flt_t lo;
jpc_flt_t
jpc_flt_t
lo
lo
jpc_flt_t hi;
jpc_flt_t hi;
jpc_flt_t
jpc_flt_t
hi
hi
jas_stream_t *out;
jas_stream_t *out;
jas_stream_t
jas_stream_t
*out
*
out
long cumlen;
long cumlen;
long
cumlen
cumlen
int lyrno;
int lyrno;
int
lyrno
lyrno
jpc_flt_t thresh;
jpc_flt_t thresh;
jpc_flt_t
jpc_flt_t
thresh
thresh
jpc_flt_t goodthresh;
jpc_flt_t goodthresh;
jpc_flt_t
jpc_flt_t
goodthresh
goodthresh
int success;
int success;
int
success
success
long pos;
long pos;
long
pos
pos
long oldpos;
long oldpos;
long
oldpos
oldpos
int numiters;
int numiters;
int
numiters
numiters
jpc_enc_tcmpt_t *comp;
jpc_enc_tcmpt_t *comp;
jpc_enc_tcmpt_t
jpc_enc_tcmpt_t
*comp
*
comp
jpc_enc_tcmpt_t *endcomps;
jpc_enc_tcmpt_t *endcomps;
jpc_enc_tcmpt_t
jpc_enc_tcmpt_t
*endcomps
*
endcomps
jpc_enc_rlvl_t *lvl;
jpc_enc_rlvl_t *lvl;
jpc_enc_rlvl_t
jpc_enc_rlvl_t
*lvl
*
lvl
jpc_enc_rlvl_t *endlvls;
jpc_enc_rlvl_t *endlvls;
jpc_enc_rlvl_t
jpc_enc_rlvl_t
*endlvls
*
endlvls
jpc_enc_band_t *band;
jpc_enc_band_t *band;
jpc_enc_band_t
jpc_enc_band_t
*band
*
band
jpc_enc_band_t *endbands;
jpc_enc_band_t *endbands;
jpc_enc_band_t
jpc_enc_band_t
*endbands
*
endbands
jpc_enc_cblk_t *cblk;
jpc_enc_cblk_t *cblk;
jpc_enc_cblk_t
jpc_enc_cblk_t
*cblk
*
cblk
jpc_enc_cblk_t *endcblks;
jpc_enc_cblk_t *endcblks;
jpc_enc_cblk_t
jpc_enc_cblk_t
*endcblks
*
endcblks
jpc_enc_pass_t *pass;
jpc_enc_pass_t *pass;
jpc_enc_pass_t
jpc_enc_pass_t
*pass
*
pass
jpc_enc_pass_t *endpasses;
jpc_enc_pass_t *endpasses;
jpc_enc_pass_t
jpc_enc_pass_t
*endpasses
*
endpasses
jpc_enc_pass_t *pass1;
jpc_enc_pass_t *pass1;
jpc_enc_pass_t
jpc_enc_pass_t
*pass1
*
pass1
jpc_flt_t mxrdslope;
jpc_flt_t mxrdslope;
jpc_flt_t
jpc_flt_t
mxrdslope
mxrdslope
jpc_flt_t mnrdslope;
jpc_flt_t mnrdslope;
jpc_flt_t
jpc_flt_t
mnrdslope
mnrdslope
jpc_enc_tile_t *tile;
jpc_enc_tile_t *tile;
jpc_enc_tile_t
jpc_enc_tile_t
*tile
*
tile
jpc_enc_prc_t *prc;
jpc_enc_prc_t *prc;
jpc_enc_prc_t
jpc_enc_prc_t
*prc
*
prc
int prcno;
int prcno;
int
prcno
prcno
tile = enc->curtile;
tile = enc->curtile
tile
tile
enc->curtile
enc
enc
curtile
for (lyrno = 1; lyrno < numlyrs - 1; ++lyrno) {		if (cumlens[lyrno - 1] > cumlens[lyrno]) {			abort();		}	}
lyrno = 1;
lyrno = 1
lyrno
lyrno
1
lyrno < numlyrs - 1
lyrno
lyrno
numlyrs - 1
numlyrs
numlyrs
1
++lyrno
lyrno
lyrno
{		if (cumlens[lyrno - 1] > cumlens[lyrno]) {			abort();		}	}
if (cumlens[lyrno - 1] > cumlens[lyrno]) {			abort();		}
cumlens[lyrno - 1] > cumlens[lyrno]
cumlens[lyrno - 1]
cumlens
cumlens
lyrno - 1
lyrno
lyrno
1
cumlens[lyrno]
cumlens
cumlens
lyrno
lyrno
{			abort();		}
abort();
abort()
abort
abort
if (!(out = jas_stream_memopen(0, 0))) {		return -1;	}
!(out = jas_stream_memopen(0, 0))
(out = jas_stream_memopen(0, 0))
out = jas_stream_memopen(0, 0)
out
out
jas_stream_memopen(0, 0)
jas_stream_memopen
jas_stream_memopen
0
0
{		return -1;	}
return -1;
-1
1
mnrdslope = DBL_MAX;
mnrdslope = DBL_MAX
mnrdslope
mnrdslope
DBL_MAX
DBL_MAX
mxrdslope = 0;
mxrdslope = 0
mxrdslope
mxrdslope
0
endcomps = &tile->tcmpts[tile->numtcmpts];
endcomps = &tile->tcmpts[tile->numtcmpts]
endcomps
endcomps
&tile->tcmpts[tile->numtcmpts]
tile->tcmpts[tile->numtcmpts]
tile->tcmpts
tile
tile
tcmpts
tile->numtcmpts
tile
tile
numtcmpts
for (comp = tile->tcmpts; comp != endcomps; ++comp) {		endlvls = &comp->rlvls[comp->numrlvls];		for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {			if (!lvl->bands) {				continue;			}			endbands = &lvl->bands[lvl->numbands];			for (band = lvl->bands; band != endbands; ++band) {				if (!band->data) {					continue;				}				for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {					if (!prc->cblks) {						continue;					}					endcblks = &prc->cblks[prc->numcblks];					for (cblk = prc->cblks; cblk != endcblks; ++cblk) {						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}				}			}		}	}
comp = tile->tcmpts;
comp = tile->tcmpts
comp
comp
tile->tcmpts
tile
tile
tcmpts
comp != endcomps
comp
comp
endcomps
endcomps
++comp
comp
comp
{		endlvls = &comp->rlvls[comp->numrlvls];		for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {			if (!lvl->bands) {				continue;			}			endbands = &lvl->bands[lvl->numbands];			for (band = lvl->bands; band != endbands; ++band) {				if (!band->data) {					continue;				}				for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {					if (!prc->cblks) {						continue;					}					endcblks = &prc->cblks[prc->numcblks];					for (cblk = prc->cblks; cblk != endcblks; ++cblk) {						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}				}			}		}	}
endlvls = &comp->rlvls[comp->numrlvls];
endlvls = &comp->rlvls[comp->numrlvls]
endlvls
endlvls
&comp->rlvls[comp->numrlvls]
comp->rlvls[comp->numrlvls]
comp->rlvls
comp
comp
rlvls
comp->numrlvls
comp
comp
numrlvls
for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {			if (!lvl->bands) {				continue;			}			endbands = &lvl->bands[lvl->numbands];			for (band = lvl->bands; band != endbands; ++band) {				if (!band->data) {					continue;				}				for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {					if (!prc->cblks) {						continue;					}					endcblks = &prc->cblks[prc->numcblks];					for (cblk = prc->cblks; cblk != endcblks; ++cblk) {						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}				}			}		}
lvl = comp->rlvls;
lvl = comp->rlvls
lvl
lvl
comp->rlvls
comp
comp
rlvls
lvl != endlvls
lvl
lvl
endlvls
endlvls
++lvl
lvl
lvl
{			if (!lvl->bands) {				continue;			}			endbands = &lvl->bands[lvl->numbands];			for (band = lvl->bands; band != endbands; ++band) {				if (!band->data) {					continue;				}				for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {					if (!prc->cblks) {						continue;					}					endcblks = &prc->cblks[prc->numcblks];					for (cblk = prc->cblks; cblk != endcblks; ++cblk) {						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}				}			}		}
if (!lvl->bands) {				continue;			}
!lvl->bands
lvl->bands
lvl
lvl
bands
{				continue;			}
continue;
endbands = &lvl->bands[lvl->numbands];
endbands = &lvl->bands[lvl->numbands]
endbands
endbands
&lvl->bands[lvl->numbands]
lvl->bands[lvl->numbands]
lvl->bands
lvl
lvl
bands
lvl->numbands
lvl
lvl
numbands
for (band = lvl->bands; band != endbands; ++band) {				if (!band->data) {					continue;				}				for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {					if (!prc->cblks) {						continue;					}					endcblks = &prc->cblks[prc->numcblks];					for (cblk = prc->cblks; cblk != endcblks; ++cblk) {						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}				}			}
band = lvl->bands;
band = lvl->bands
band
band
lvl->bands
lvl
lvl
bands
band != endbands
band
band
endbands
endbands
++band
band
band
{				if (!band->data) {					continue;				}				for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {					if (!prc->cblks) {						continue;					}					endcblks = &prc->cblks[prc->numcblks];					for (cblk = prc->cblks; cblk != endcblks; ++cblk) {						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}				}			}
if (!band->data) {					continue;				}
!band->data
band->data
band
band
data
{					continue;				}
continue;
for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {					if (!prc->cblks) {						continue;					}					endcblks = &prc->cblks[prc->numcblks];					for (cblk = prc->cblks; cblk != endcblks; ++cblk) {						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}				}
prcno = 0, prc = band->prcs;
prcno = 0, prc = band->prcs
prcno = 0
prcno
prcno
0
prc = band->prcs
prc
prc
band->prcs
band
band
prcs
prcno < lvl->numprcs
prcno
prcno
lvl->numprcs
lvl
lvl
numprcs
++prcno, ++prc
++prcno
prcno
prcno
++prc
prc
prc
{					if (!prc->cblks) {						continue;					}					endcblks = &prc->cblks[prc->numcblks];					for (cblk = prc->cblks; cblk != endcblks; ++cblk) {						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}				}
if (!prc->cblks) {						continue;					}
!prc->cblks
prc->cblks
prc
prc
cblks
{						continue;					}
continue;
endcblks = &prc->cblks[prc->numcblks];
endcblks = &prc->cblks[prc->numcblks]
endcblks
endcblks
&prc->cblks[prc->numcblks]
prc->cblks[prc->numcblks]
prc->cblks
prc
prc
cblks
prc->numcblks
prc
prc
numcblks
for (cblk = prc->cblks; cblk != endcblks; ++cblk) {						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}
cblk = prc->cblks;
cblk = prc->cblks
cblk
cblk
prc->cblks
prc
prc
cblks
cblk != endcblks
cblk
cblk
endcblks
endcblks
++cblk
cblk
cblk
{						calcrdslopes(cblk);						endpasses = &cblk->passes[cblk->numpasses];						for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}					}
calcrdslopes(cblk);
calcrdslopes(cblk)
calcrdslopes
calcrdslopes
cblk
cblk
endpasses = &cblk->passes[cblk->numpasses];
endpasses = &cblk->passes[cblk->numpasses]
endpasses
endpasses
&cblk->passes[cblk->numpasses]
cblk->passes[cblk->numpasses]
cblk->passes
cblk
cblk
passes
cblk->numpasses
cblk
cblk
numpasses
for (pass = cblk->passes; pass != endpasses; ++pass) {							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}
pass = cblk->passes;
pass = cblk->passes
pass
pass
cblk->passes
cblk
cblk
passes
pass != endpasses
pass
pass
endpasses
endpasses
++pass
pass
pass
{							if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}						}
if (pass->rdslope > 0) {								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}
pass->rdslope > 0
pass->rdslope
pass
pass
rdslope
0
{								if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}								if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}							}
if (pass->rdslope < mnrdslope) {									mnrdslope = pass->rdslope;								}
pass->rdslope < mnrdslope
pass->rdslope
pass
pass
rdslope
mnrdslope
mnrdslope
{									mnrdslope = pass->rdslope;								}
mnrdslope = pass->rdslope;
mnrdslope = pass->rdslope
mnrdslope
mnrdslope
pass->rdslope
pass
pass
rdslope
if (pass->rdslope > mxrdslope) {									mxrdslope = pass->rdslope;								}
pass->rdslope > mxrdslope
pass->rdslope
pass
pass
rdslope
mxrdslope
mxrdslope
{									mxrdslope = pass->rdslope;								}
mxrdslope = pass->rdslope;
mxrdslope = pass->rdslope
mxrdslope
mxrdslope
pass->rdslope
pass
pass
rdslope
if (jas_getdbglevel()) {	jas_eprintf("min rdslope = %f max rdslope = %f\n", mnrdslope, mxrdslope);}
jas_getdbglevel()
jas_getdbglevel
jas_getdbglevel
{	jas_eprintf("min rdslope = %f max rdslope = %f\n", mnrdslope, mxrdslope);}
jas_eprintf("min rdslope = %f max rdslope = %f\n", mnrdslope, mxrdslope);
jas_eprintf("min rdslope = %f max rdslope = %f\n", mnrdslope, mxrdslope)
jas_eprintf
jas_eprintf
"min rdslope = %f max rdslope = %f\n"
mnrdslope
mnrdslope
mxrdslope
mxrdslope
jpc_init_t2state(enc, 1);
jpc_init_t2state(enc, 1)
jpc_init_t2state
jpc_init_t2state
enc
enc
1
for (lyrno = 0; lyrno < numlyrs; ++lyrno) {		lo = mnrdslope;		hi = mxrdslope;		success = 0;		goodthresh = 0;		numiters = 0;		do {			cumlen = cumlens[lyrno];			if (cumlen == UINT_FAST32_MAX) {				/* Only the last layer can be free of a rate				  constraint (e.g., for lossless coding). */				assert(lyrno == numlyrs - 1);				goodthresh = -1;				success = 1;				break;			}			thresh = (lo + hi) / 2;			/* Save the tier 2 coding state. */			jpc_save_t2state(enc);			oldpos = jas_stream_tell(out);			assert(oldpos >= 0);			/* Assign all passes with R-D slopes greater than or			  equal to the current threshold to this layer. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					endbands = &lvl->bands[lvl->numbands];					for (band = lvl->bands; band != endbands; ++band) {						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}				}			}			/* Perform tier 2 coding. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}				}			}			pos = jas_stream_tell(out);			/* Check the rate constraint. */			assert(pos >= 0);			if (pos > cumlen) {				/* The rate is too high. */				lo = thresh;			} else if (pos <= cumlen) {				/* The rate is low enough, so try higher. */				hi = thresh;				if (!success || thresh < goodthresh) {					goodthresh = thresh;					success = 1;				}			}			/* Save the tier 2 coding state. */			jpc_restore_t2state(enc);			if (jas_stream_seek(out, oldpos, SEEK_SET) < 0) {				abort();			}if (jas_getdbglevel()) {jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);}			++numiters;		} while (lo < hi - 1e-3 && numiters < 32);		if (!success) {			jas_eprintf("warning: empty layer generated\n");		}if (jas_getdbglevel()) {jas_eprintf("success %d goodthresh %f\n", success, goodthresh);}		/* Assign all passes with R-D slopes greater than or		  equal to the selected threshold to this layer. */		endcomps = &tile->tcmpts[tile->numtcmpts];		for (comp = tile->tcmpts; comp != endcomps; ++comp) {			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {if (!lvl->bands) {	continue;}				endbands = &lvl->bands[lvl->numbands];				for (band = lvl->bands; band != endbands; ++band) {					if (!band->data) {						continue;					}					for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}				}			}		}		/* Perform tier 2 coding. */		endcomps = &tile->tcmpts[tile->numtcmpts];		for (comp = tile->tcmpts; comp != endcomps; ++comp) {			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {				if (!lvl->bands) {					continue;				}				for (prcno = 0; prcno < lvl->numprcs; ++prcno) {					if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {						return -1;					}				}			}		}	}
lyrno = 0;
lyrno = 0
lyrno
lyrno
0
lyrno < numlyrs
lyrno
lyrno
numlyrs
numlyrs
++lyrno
lyrno
lyrno
{		lo = mnrdslope;		hi = mxrdslope;		success = 0;		goodthresh = 0;		numiters = 0;		do {			cumlen = cumlens[lyrno];			if (cumlen == UINT_FAST32_MAX) {				/* Only the last layer can be free of a rate				  constraint (e.g., for lossless coding). */				assert(lyrno == numlyrs - 1);				goodthresh = -1;				success = 1;				break;			}			thresh = (lo + hi) / 2;			/* Save the tier 2 coding state. */			jpc_save_t2state(enc);			oldpos = jas_stream_tell(out);			assert(oldpos >= 0);			/* Assign all passes with R-D slopes greater than or			  equal to the current threshold to this layer. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					endbands = &lvl->bands[lvl->numbands];					for (band = lvl->bands; band != endbands; ++band) {						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}				}			}			/* Perform tier 2 coding. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}				}			}			pos = jas_stream_tell(out);			/* Check the rate constraint. */			assert(pos >= 0);			if (pos > cumlen) {				/* The rate is too high. */				lo = thresh;			} else if (pos <= cumlen) {				/* The rate is low enough, so try higher. */				hi = thresh;				if (!success || thresh < goodthresh) {					goodthresh = thresh;					success = 1;				}			}			/* Save the tier 2 coding state. */			jpc_restore_t2state(enc);			if (jas_stream_seek(out, oldpos, SEEK_SET) < 0) {				abort();			}if (jas_getdbglevel()) {jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);}			++numiters;		} while (lo < hi - 1e-3 && numiters < 32);		if (!success) {			jas_eprintf("warning: empty layer generated\n");		}if (jas_getdbglevel()) {jas_eprintf("success %d goodthresh %f\n", success, goodthresh);}		/* Assign all passes with R-D slopes greater than or		  equal to the selected threshold to this layer. */		endcomps = &tile->tcmpts[tile->numtcmpts];		for (comp = tile->tcmpts; comp != endcomps; ++comp) {			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {if (!lvl->bands) {	continue;}				endbands = &lvl->bands[lvl->numbands];				for (band = lvl->bands; band != endbands; ++band) {					if (!band->data) {						continue;					}					for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}				}			}		}		/* Perform tier 2 coding. */		endcomps = &tile->tcmpts[tile->numtcmpts];		for (comp = tile->tcmpts; comp != endcomps; ++comp) {			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {				if (!lvl->bands) {					continue;				}				for (prcno = 0; prcno < lvl->numprcs; ++prcno) {					if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {						return -1;					}				}			}		}	}
lo = mnrdslope;
lo = mnrdslope
lo
lo
mnrdslope
mnrdslope
hi = mxrdslope;
hi = mxrdslope
hi
hi
mxrdslope
mxrdslope
success = 0;
success = 0
success
success
0
goodthresh = 0;
goodthresh = 0
goodthresh
goodthresh
0
numiters = 0;
numiters = 0
numiters
numiters
0
do {			cumlen = cumlens[lyrno];			if (cumlen == UINT_FAST32_MAX) {				/* Only the last layer can be free of a rate				  constraint (e.g., for lossless coding). */				assert(lyrno == numlyrs - 1);				goodthresh = -1;				success = 1;				break;			}			thresh = (lo + hi) / 2;			/* Save the tier 2 coding state. */			jpc_save_t2state(enc);			oldpos = jas_stream_tell(out);			assert(oldpos >= 0);			/* Assign all passes with R-D slopes greater than or			  equal to the current threshold to this layer. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					endbands = &lvl->bands[lvl->numbands];					for (band = lvl->bands; band != endbands; ++band) {						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}				}			}			/* Perform tier 2 coding. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}				}			}			pos = jas_stream_tell(out);			/* Check the rate constraint. */			assert(pos >= 0);			if (pos > cumlen) {				/* The rate is too high. */				lo = thresh;			} else if (pos <= cumlen) {				/* The rate is low enough, so try higher. */				hi = thresh;				if (!success || thresh < goodthresh) {					goodthresh = thresh;					success = 1;				}			}			/* Save the tier 2 coding state. */			jpc_restore_t2state(enc);			if (jas_stream_seek(out, oldpos, SEEK_SET) < 0) {				abort();			}if (jas_getdbglevel()) {jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);}			++numiters;		} while (lo < hi - 1e-3 && numiters < 32);
{			cumlen = cumlens[lyrno];			if (cumlen == UINT_FAST32_MAX) {				/* Only the last layer can be free of a rate				  constraint (e.g., for lossless coding). */				assert(lyrno == numlyrs - 1);				goodthresh = -1;				success = 1;				break;			}			thresh = (lo + hi) / 2;			/* Save the tier 2 coding state. */			jpc_save_t2state(enc);			oldpos = jas_stream_tell(out);			assert(oldpos >= 0);			/* Assign all passes with R-D slopes greater than or			  equal to the current threshold to this layer. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					endbands = &lvl->bands[lvl->numbands];					for (band = lvl->bands; band != endbands; ++band) {						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}				}			}			/* Perform tier 2 coding. */			endcomps = &tile->tcmpts[tile->numtcmpts];			for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}				}			}			pos = jas_stream_tell(out);			/* Check the rate constraint. */			assert(pos >= 0);			if (pos > cumlen) {				/* The rate is too high. */				lo = thresh;			} else if (pos <= cumlen) {				/* The rate is low enough, so try higher. */				hi = thresh;				if (!success || thresh < goodthresh) {					goodthresh = thresh;					success = 1;				}			}			/* Save the tier 2 coding state. */			jpc_restore_t2state(enc);			if (jas_stream_seek(out, oldpos, SEEK_SET) < 0) {				abort();			}if (jas_getdbglevel()) {jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);}			++numiters;		}
cumlen = cumlens[lyrno];
cumlen = cumlens[lyrno]
cumlen
cumlen
cumlens[lyrno]
cumlens
cumlens
lyrno
lyrno
if (cumlen == UINT_FAST32_MAX) {				/* Only the last layer can be free of a rate				  constraint (e.g., for lossless coding). */				assert(lyrno == numlyrs - 1);				goodthresh = -1;				success = 1;				break;			}
cumlen == UINT_FAST32_MAX
cumlen
cumlen
UINT_FAST32_MAX
UINT_FAST32_MAX
{				/* Only the last layer can be free of a rate				  constraint (e.g., for lossless coding). */				assert(lyrno == numlyrs - 1);				goodthresh = -1;				success = 1;				break;			}
assert(lyrno == numlyrs - 1);
assert(lyrno == numlyrs - 1)
assert
assert
lyrno == numlyrs - 1
lyrno
lyrno
numlyrs - 1
numlyrs
numlyrs
1
goodthresh = -1;
goodthresh = -1
goodthresh
goodthresh
-1
1
success = 1;
success = 1
success
success
1
break;
thresh = (lo + hi) / 2;
thresh = (lo + hi) / 2
thresh
thresh
(lo + hi) / 2
(lo + hi)
lo + hi
lo
lo
hi
hi
2
jpc_save_t2state(enc);
jpc_save_t2state(enc)
jpc_save_t2state
jpc_save_t2state
enc
enc
oldpos = jas_stream_tell(out);
oldpos = jas_stream_tell(out)
oldpos
oldpos
jas_stream_tell(out)
jas_stream_tell
jas_stream_tell
out
out
assert(oldpos >= 0);
assert(oldpos >= 0)
assert
assert
oldpos >= 0
oldpos
oldpos
0
endcomps = &tile->tcmpts[tile->numtcmpts];
endcomps = &tile->tcmpts[tile->numtcmpts]
endcomps
endcomps
&tile->tcmpts[tile->numtcmpts]
tile->tcmpts[tile->numtcmpts]
tile->tcmpts
tile
tile
tcmpts
tile->numtcmpts
tile
tile
numtcmpts
for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					endbands = &lvl->bands[lvl->numbands];					for (band = lvl->bands; band != endbands; ++band) {						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}				}			}
comp = tile->tcmpts;
comp = tile->tcmpts
comp
comp
tile->tcmpts
tile
tile
tcmpts
comp != endcomps
comp
comp
endcomps
endcomps
++comp
comp
comp
{				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					endbands = &lvl->bands[lvl->numbands];					for (band = lvl->bands; band != endbands; ++band) {						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}				}			}
endlvls = &comp->rlvls[comp->numrlvls];
endlvls = &comp->rlvls[comp->numrlvls]
endlvls
endlvls
&comp->rlvls[comp->numrlvls]
comp->rlvls[comp->numrlvls]
comp->rlvls
comp
comp
rlvls
comp->numrlvls
comp
comp
numrlvls
for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					endbands = &lvl->bands[lvl->numbands];					for (band = lvl->bands; band != endbands; ++band) {						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}				}
lvl = comp->rlvls;
lvl = comp->rlvls
lvl
lvl
comp->rlvls
comp
comp
rlvls
lvl != endlvls
lvl
lvl
endlvls
endlvls
++lvl
lvl
lvl
{					if (!lvl->bands) {						continue;					}					endbands = &lvl->bands[lvl->numbands];					for (band = lvl->bands; band != endbands; ++band) {						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}				}
if (!lvl->bands) {						continue;					}
!lvl->bands
lvl->bands
lvl
lvl
bands
{						continue;					}
continue;
endbands = &lvl->bands[lvl->numbands];
endbands = &lvl->bands[lvl->numbands]
endbands
endbands
&lvl->bands[lvl->numbands]
lvl->bands[lvl->numbands]
lvl->bands
lvl
lvl
bands
lvl->numbands
lvl
lvl
numbands
for (band = lvl->bands; band != endbands; ++band) {						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}
band = lvl->bands;
band = lvl->bands
band
band
lvl->bands
lvl
lvl
bands
band != endbands
band
band
endbands
endbands
++band
band
band
{						if (!band->data) {							continue;						}						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}					}
if (!band->data) {							continue;						}
!band->data
band->data
band
band
data
{							continue;						}
continue;
for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}
prcno = 0, prc = band->prcs;
prcno = 0, prc = band->prcs
prcno = 0
prcno
prcno
0
prc = band->prcs
prc
prc
band->prcs
band
band
prcs
prcno < lvl->numprcs
prcno
prcno
lvl->numprcs
lvl
lvl
numprcs
++prcno, ++prc
++prcno
prcno
prcno
++prc
prc
prc
{							if (!prc->cblks) {								continue;							}							endcblks = &prc->cblks[prc->numcblks];							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}						}
if (!prc->cblks) {								continue;							}
!prc->cblks
prc->cblks
prc
prc
cblks
{								continue;							}
continue;
endcblks = &prc->cblks[prc->numcblks];
endcblks = &prc->cblks[prc->numcblks]
endcblks
endcblks
&prc->cblks[prc->numcblks]
prc->cblks[prc->numcblks]
prc->cblks
prc
prc
cblks
prc->numcblks
prc
prc
numcblks
for (cblk = prc->cblks; cblk != endcblks; ++cblk) {								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}
cblk = prc->cblks;
cblk = prc->cblks
cblk
cblk
prc->cblks
prc
prc
cblks
cblk != endcblks
cblk
cblk
endcblks
endcblks
++cblk
cblk
cblk
{								if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}							}
if (cblk->curpass) {									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}
cblk->curpass
cblk
cblk
curpass
{									endpasses = &cblk->passes[cblk->numpasses];									pass1 = cblk->curpass;									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}									for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}									for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}								}
endpasses = &cblk->passes[cblk->numpasses];
endpasses = &cblk->passes[cblk->numpasses]
endpasses
endpasses
&cblk->passes[cblk->numpasses]
cblk->passes[cblk->numpasses]
cblk->passes
cblk
cblk
passes
cblk->numpasses
cblk
cblk
numpasses
pass1 = cblk->curpass;
pass1 = cblk->curpass
pass1
pass1
cblk->curpass
cblk
cblk
curpass
for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}
pass = cblk->curpass;
pass = cblk->curpass
pass
pass
cblk->curpass
cblk
cblk
curpass
pass != endpasses
pass
pass
endpasses
endpasses
++pass
pass
pass
{										if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}									}
if (pass->rdslope >= thresh) {											pass1 = &pass[1];										}
pass->rdslope >= thresh
pass->rdslope
pass
pass
rdslope
thresh
thresh
{											pass1 = &pass[1];										}
pass1 = &pass[1];
pass1 = &pass[1]
pass1
pass1
&pass[1]
pass[1]
pass
pass
1
for (pass = cblk->curpass; pass != pass1; ++pass) {										pass->lyrno = lyrno;									}
pass = cblk->curpass;
pass = cblk->curpass
pass
pass
cblk->curpass
cblk
cblk
curpass
pass != pass1
pass
pass
pass1
pass1
++pass
pass
pass
{										pass->lyrno = lyrno;									}
pass->lyrno = lyrno;
pass->lyrno = lyrno
pass->lyrno
pass
pass
lyrno
lyrno
lyrno
for (; pass != endpasses; ++pass) {										pass->lyrno = -1;									}
;
pass != endpasses
pass
pass
endpasses
endpasses
++pass
pass
pass
{										pass->lyrno = -1;									}
pass->lyrno = -1;
pass->lyrno = -1
pass->lyrno
pass
pass
lyrno
-1
1
endcomps = &tile->tcmpts[tile->numtcmpts];
endcomps = &tile->tcmpts[tile->numtcmpts]
endcomps
endcomps
&tile->tcmpts[tile->numtcmpts]
tile->tcmpts[tile->numtcmpts]
tile->tcmpts
tile
tile
tcmpts
tile->numtcmpts
tile
tile
numtcmpts
for (comp = tile->tcmpts; comp != endcomps; ++comp) {				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}				}			}
comp = tile->tcmpts;
comp = tile->tcmpts
comp
comp
tile->tcmpts
tile
tile
tcmpts
comp != endcomps
comp
comp
endcomps
endcomps
++comp
comp
comp
{				endlvls = &comp->rlvls[comp->numrlvls];				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}				}			}
endlvls = &comp->rlvls[comp->numrlvls];
endlvls = &comp->rlvls[comp->numrlvls]
endlvls
endlvls
&comp->rlvls[comp->numrlvls]
comp->rlvls[comp->numrlvls]
comp->rlvls
comp
comp
rlvls
comp->numrlvls
comp
comp
numrlvls
for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {					if (!lvl->bands) {						continue;					}					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}				}
lvl = comp->rlvls;
lvl = comp->rlvls
lvl
lvl
comp->rlvls
comp
comp
rlvls
lvl != endlvls
lvl
lvl
endlvls
endlvls
++lvl
lvl
lvl
{					if (!lvl->bands) {						continue;					}					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}				}
if (!lvl->bands) {						continue;					}
!lvl->bands
lvl->bands
lvl
lvl
bands
{						continue;					}
continue;
for (prcno = 0; prcno < lvl->numprcs; ++prcno) {						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}
prcno = 0;
prcno = 0
prcno
prcno
0
prcno < lvl->numprcs
prcno
prcno
lvl->numprcs
lvl
lvl
numprcs
++prcno
prcno
prcno
{						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}					}
if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {							return -1;						}
jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)
jpc_enc_encpkt
jpc_enc_encpkt
enc
enc
out
out
comp - tile->tcmpts
comp
comp
tile->tcmpts
tile
tile
tcmpts
lvl - comp->rlvls
lvl
lvl
comp->rlvls
comp
comp
rlvls
prcno
prcno
lyrno
lyrno
{							return -1;						}
return -1;
-1
1
pos = jas_stream_tell(out);
pos = jas_stream_tell(out)
pos
pos
jas_stream_tell(out)
jas_stream_tell
jas_stream_tell
out
out
assert(pos >= 0);
assert(pos >= 0)
assert
assert
pos >= 0
pos
pos
0
if (pos > cumlen) {				/* The rate is too high. */				lo = thresh;			} else if (pos <= cumlen) {				/* The rate is low enough, so try higher. */				hi = thresh;				if (!success || thresh < goodthresh) {					goodthresh = thresh;					success = 1;				}			}
pos > cumlen
pos
pos
cumlen
cumlen
{				/* The rate is too high. */				lo = thresh;			}
lo = thresh;
lo = thresh
lo
lo
thresh
thresh
if (pos <= cumlen) {				/* The rate is low enough, so try higher. */				hi = thresh;				if (!success || thresh < goodthresh) {					goodthresh = thresh;					success = 1;				}			}
pos <= cumlen
pos
pos
cumlen
cumlen
{				/* The rate is low enough, so try higher. */				hi = thresh;				if (!success || thresh < goodthresh) {					goodthresh = thresh;					success = 1;				}			}
hi = thresh;
hi = thresh
hi
hi
thresh
thresh
if (!success || thresh < goodthresh) {					goodthresh = thresh;					success = 1;				}
!success || thresh < goodthresh
!success
success
success
thresh < goodthresh
thresh
thresh
goodthresh
goodthresh
{					goodthresh = thresh;					success = 1;				}
goodthresh = thresh;
goodthresh = thresh
goodthresh
goodthresh
thresh
thresh
success = 1;
success = 1
success
success
1
jpc_restore_t2state(enc);
jpc_restore_t2state(enc)
jpc_restore_t2state
jpc_restore_t2state
enc
enc
if (jas_stream_seek(out, oldpos, SEEK_SET) < 0) {				abort();			}
jas_stream_seek(out, oldpos, SEEK_SET) < 0
jas_stream_seek(out, oldpos, SEEK_SET)
jas_stream_seek
jas_stream_seek
out
out
oldpos
oldpos
SEEK_SET
SEEK_SET
0
{				abort();			}
abort();
abort()
abort
abort
if (jas_getdbglevel()) {jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);}
jas_getdbglevel()
jas_getdbglevel
jas_getdbglevel
{jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);}
jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);
jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh)
jas_eprintf
jas_eprintf
"maxlen=%08ld actuallen=%08ld thresh=%f\n"
cumlen
cumlen
pos
pos
thresh
thresh
++numiters;
++numiters
numiters
numiters
lo < hi - 1e-3 && numiters < 32
lo < hi - 1e-3
lo
lo
hi - 1e-3
hi
hi
1e-3
numiters < 32
numiters
numiters
32
if (!success) {			jas_eprintf("warning: empty layer generated\n");		}
!success
success
success
{			jas_eprintf("warning: empty layer generated\n");		}
jas_eprintf("warning: empty layer generated\n");
jas_eprintf("warning: empty layer generated\n")
jas_eprintf
jas_eprintf
"warning: empty layer generated\n"
if (jas_getdbglevel()) {jas_eprintf("success %d goodthresh %f\n", success, goodthresh);}
jas_getdbglevel()
jas_getdbglevel
jas_getdbglevel
{jas_eprintf("success %d goodthresh %f\n", success, goodthresh);}
jas_eprintf("success %d goodthresh %f\n", success, goodthresh);
jas_eprintf("success %d goodthresh %f\n", success, goodthresh)
jas_eprintf
jas_eprintf
"success %d goodthresh %f\n"
success
success
goodthresh
goodthresh
endcomps = &tile->tcmpts[tile->numtcmpts];
endcomps = &tile->tcmpts[tile->numtcmpts]
endcomps
endcomps
&tile->tcmpts[tile->numtcmpts]
tile->tcmpts[tile->numtcmpts]
tile->tcmpts
tile
tile
tcmpts
tile->numtcmpts
tile
tile
numtcmpts
for (comp = tile->tcmpts; comp != endcomps; ++comp) {			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {if (!lvl->bands) {	continue;}				endbands = &lvl->bands[lvl->numbands];				for (band = lvl->bands; band != endbands; ++band) {					if (!band->data) {						continue;					}					for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}				}			}		}
comp = tile->tcmpts;
comp = tile->tcmpts
comp
comp
tile->tcmpts
tile
tile
tcmpts
comp != endcomps
comp
comp
endcomps
endcomps
++comp
comp
comp
{			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {if (!lvl->bands) {	continue;}				endbands = &lvl->bands[lvl->numbands];				for (band = lvl->bands; band != endbands; ++band) {					if (!band->data) {						continue;					}					for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}				}			}		}
endlvls = &comp->rlvls[comp->numrlvls];
endlvls = &comp->rlvls[comp->numrlvls]
endlvls
endlvls
&comp->rlvls[comp->numrlvls]
comp->rlvls[comp->numrlvls]
comp->rlvls
comp
comp
rlvls
comp->numrlvls
comp
comp
numrlvls
for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {if (!lvl->bands) {	continue;}				endbands = &lvl->bands[lvl->numbands];				for (band = lvl->bands; band != endbands; ++band) {					if (!band->data) {						continue;					}					for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}				}			}
lvl = comp->rlvls;
lvl = comp->rlvls
lvl
lvl
comp->rlvls
comp
comp
rlvls
lvl != endlvls
lvl
lvl
endlvls
endlvls
++lvl
lvl
lvl
{if (!lvl->bands) {	continue;}				endbands = &lvl->bands[lvl->numbands];				for (band = lvl->bands; band != endbands; ++band) {					if (!band->data) {						continue;					}					for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}				}			}
if (!lvl->bands) {	continue;}
!lvl->bands
lvl->bands
lvl
lvl
bands
{	continue;}
continue;
endbands = &lvl->bands[lvl->numbands];
endbands = &lvl->bands[lvl->numbands]
endbands
endbands
&lvl->bands[lvl->numbands]
lvl->bands[lvl->numbands]
lvl->bands
lvl
lvl
bands
lvl->numbands
lvl
lvl
numbands
for (band = lvl->bands; band != endbands; ++band) {					if (!band->data) {						continue;					}					for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}				}
band = lvl->bands;
band = lvl->bands
band
band
lvl->bands
lvl
lvl
bands
band != endbands
band
band
endbands
endbands
++band
band
band
{					if (!band->data) {						continue;					}					for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}				}
if (!band->data) {						continue;					}
!band->data
band->data
band
band
data
{						continue;					}
continue;
for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}
prcno = 0, prc = band->prcs;
prcno = 0, prc = band->prcs
prcno = 0
prcno
prcno
0
prc = band->prcs
prc
prc
band->prcs
band
band
prcs
prcno < lvl->numprcs
prcno
prcno
lvl->numprcs
lvl
lvl
numprcs
++prcno, ++prc
++prcno
prcno
prcno
++prc
prc
prc
{						if (!prc->cblks) {							continue;						}						endcblks = &prc->cblks[prc->numcblks];						for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}					}
if (!prc->cblks) {							continue;						}
!prc->cblks
prc->cblks
prc
prc
cblks
{							continue;						}
continue;
endcblks = &prc->cblks[prc->numcblks];
endcblks = &prc->cblks[prc->numcblks]
endcblks
endcblks
&prc->cblks[prc->numcblks]
prc->cblks[prc->numcblks]
prc->cblks
prc
prc
cblks
prc->numcblks
prc
prc
numcblks
for (cblk = prc->cblks; cblk != endcblks; ++cblk) {							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}
cblk = prc->cblks;
cblk = prc->cblks
cblk
cblk
prc->cblks
prc
prc
cblks
cblk != endcblks
cblk
cblk
endcblks
endcblks
++cblk
cblk
cblk
{							if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}						}
if (cblk->curpass) {								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}
cblk->curpass
cblk
cblk
curpass
{								endpasses = &cblk->passes[cblk->numpasses];								pass1 = cblk->curpass;								if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}								for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}								for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}							}
endpasses = &cblk->passes[cblk->numpasses];
endpasses = &cblk->passes[cblk->numpasses]
endpasses
endpasses
&cblk->passes[cblk->numpasses]
cblk->passes[cblk->numpasses]
cblk->passes
cblk
cblk
passes
cblk->numpasses
cblk
cblk
numpasses
pass1 = cblk->curpass;
pass1 = cblk->curpass
pass1
pass1
cblk->curpass
cblk
cblk
curpass
if (success) {									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}
success
success
{									for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}								}
for (pass = cblk->curpass; pass != endpasses; ++pass) {										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}
pass = cblk->curpass;
pass = cblk->curpass
pass
pass
cblk->curpass
cblk
cblk
curpass
pass != endpasses
pass
pass
endpasses
endpasses
++pass
pass
pass
{										if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}									}
if (pass->rdslope >= goodthresh) {											pass1 = &pass[1];										}
pass->rdslope >= goodthresh
pass->rdslope
pass
pass
rdslope
goodthresh
goodthresh
{											pass1 = &pass[1];										}
pass1 = &pass[1];
pass1 = &pass[1]
pass1
pass1
&pass[1]
pass[1]
pass
pass
1
for (pass = cblk->curpass; pass != pass1; ++pass) {									pass->lyrno = lyrno;								}
pass = cblk->curpass;
pass = cblk->curpass
pass
pass
cblk->curpass
cblk
cblk
curpass
pass != pass1
pass
pass
pass1
pass1
++pass
pass
pass
{									pass->lyrno = lyrno;								}
pass->lyrno = lyrno;
pass->lyrno = lyrno
pass->lyrno
pass
pass
lyrno
lyrno
lyrno
for (; pass != endpasses; ++pass) {									pass->lyrno = -1;								}
;
pass != endpasses
pass
pass
endpasses
endpasses
++pass
pass
pass
{									pass->lyrno = -1;								}
pass->lyrno = -1;
pass->lyrno = -1
pass->lyrno
pass
pass
lyrno
-1
1
endcomps = &tile->tcmpts[tile->numtcmpts];
endcomps = &tile->tcmpts[tile->numtcmpts]
endcomps
endcomps
&tile->tcmpts[tile->numtcmpts]
tile->tcmpts[tile->numtcmpts]
tile->tcmpts
tile
tile
tcmpts
tile->numtcmpts
tile
tile
numtcmpts
for (comp = tile->tcmpts; comp != endcomps; ++comp) {			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {				if (!lvl->bands) {					continue;				}				for (prcno = 0; prcno < lvl->numprcs; ++prcno) {					if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {						return -1;					}				}			}		}
comp = tile->tcmpts;
comp = tile->tcmpts
comp
comp
tile->tcmpts
tile
tile
tcmpts
comp != endcomps
comp
comp
endcomps
endcomps
++comp
comp
comp
{			endlvls = &comp->rlvls[comp->numrlvls];			for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {				if (!lvl->bands) {					continue;				}				for (prcno = 0; prcno < lvl->numprcs; ++prcno) {					if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {						return -1;					}				}			}		}
endlvls = &comp->rlvls[comp->numrlvls];
endlvls = &comp->rlvls[comp->numrlvls]
endlvls
endlvls
&comp->rlvls[comp->numrlvls]
comp->rlvls[comp->numrlvls]
comp->rlvls
comp
comp
rlvls
comp->numrlvls
comp
comp
numrlvls
for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {				if (!lvl->bands) {					continue;				}				for (prcno = 0; prcno < lvl->numprcs; ++prcno) {					if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {						return -1;					}				}			}
lvl = comp->rlvls;
lvl = comp->rlvls
lvl
lvl
comp->rlvls
comp
comp
rlvls
lvl != endlvls
lvl
lvl
endlvls
endlvls
++lvl
lvl
lvl
{				if (!lvl->bands) {					continue;				}				for (prcno = 0; prcno < lvl->numprcs; ++prcno) {					if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {						return -1;					}				}			}
if (!lvl->bands) {					continue;				}
!lvl->bands
lvl->bands
lvl
lvl
bands
{					continue;				}
continue;
for (prcno = 0; prcno < lvl->numprcs; ++prcno) {					if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {						return -1;					}				}
prcno = 0;
prcno = 0
prcno
prcno
0
prcno < lvl->numprcs
prcno
prcno
lvl->numprcs
lvl
lvl
numprcs
++prcno
prcno
prcno
{					if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {						return -1;					}				}
if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {						return -1;					}
jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)
jpc_enc_encpkt
jpc_enc_encpkt
enc
enc
out
out
comp - tile->tcmpts
comp
comp
tile->tcmpts
tile
tile
tcmpts
lvl - comp->rlvls
lvl
lvl
comp->rlvls
comp
comp
rlvls
prcno
prcno
lyrno
lyrno
{						return -1;					}
return -1;
-1
1
if (jas_getdbglevel() >= 5) {		dump_layeringinfo(enc);	}
jas_getdbglevel() >= 5
jas_getdbglevel()
jas_getdbglevel
jas_getdbglevel
5
{		dump_layeringinfo(enc);	}
dump_layeringinfo(enc);
dump_layeringinfo(enc)
dump_layeringinfo
dump_layeringinfo
enc
enc
jas_stream_close(out);
jas_stream_close(out)
jas_stream_close
jas_stream_close
out
out
JAS_DBGLOG(10, ("done doing rateallocation\n"));
JAS_DBGLOG(10, ("done doing rateallocation\n"))
JAS_DBGLOG
JAS_DBGLOG
10
("done doing rateallocation\n")
"done doing rateallocation\n"
return 0;
0
-----joern-----
(761,1130,0)
(1168,597,0)
(864,543,0)
(385,1290,0)
(551,977,0)
(861,387,0)
(1168,336,0)
(344,1178,0)
(987,635,0)
(118,1128,0)
(551,1002,0)
(848,1178,0)
(761,192,0)
(115,180,0)
(818,103,0)
(1350,69,0)
(135,1178,0)
(394,66,0)
(629,967,0)
(43,977,0)
(1363,1335,0)
(516,1373,0)
(305,657,0)
(566,252,0)
(1290,880,0)
(1070,1383,0)
(744,1349,0)
(329,894,0)
(375,387,0)
(774,420,0)
(1180,358,0)
(981,294,0)
(1168,69,0)
(417,7,0)
(642,1178,0)
(761,416,0)
(932,1144,0)
(306,488,0)
(243,1062,0)
(364,158,0)
(608,835,0)
(1321,1214,0)
(346,624,0)
(205,1062,0)
(1168,68,0)
(457,1124,0)
(481,416,0)
(1384,885,0)
(1079,1374,0)
(268,1178,0)
(1255,585,0)
(1015,1237,0)
(761,1032,0)
(1125,675,0)
(1273,1282,0)
(562,217,0)
(75,593,0)
(1010,517,0)
(519,387,0)
(127,306,0)
(323,155,0)
(1253,630,0)
(543,387,0)
(551,1178,0)
(362,847,0)
(983,1403,0)
(1201,955,0)
(303,494,0)
(1349,904,0)
(1168,416,0)
(205,1060,0)
(864,514,0)
(1024,817,0)
(655,408,0)
(252,835,0)
(1387,378,0)
(1125,817,0)
(1168,955,0)
(551,1162,0)
(368,326,0)
(626,731,0)
(68,771,0)
(824,136,0)
(700,998,0)
(586,579,0)
(952,799,0)
(976,659,0)
(1162,635,0)
(481,942,0)
(796,513,0)
(575,1148,0)
(1076,1249,0)
(484,248,0)
(1288,904,0)
(1242,160,0)
(1168,970,0)
(1350,861,0)
(1385,835,0)
(1045,270,0)
(127,1403,0)
(551,1170,0)
(25,970,0)
(256,663,0)
(551,1256,0)
(834,1102,0)
(336,783,0)
(122,69,0)
(524,19,0)
(1249,1336,0)
(551,1206,0)
(304,991,0)
(225,1394,0)
(1144,615,0)
(259,760,0)
(1201,589,0)
(907,416,0)
(576,674,0)
(818,205,0)
(192,464,0)
(715,1300,0)
(663,742,0)
(55,812,0)
(1263,514,0)
(756,1178,0)
(41,11,0)
(547,1305,0)
(1026,320,0)
(1263,589,0)
(326,1178,0)
(590,879,0)
(735,835,0)
(1100,18,0)
(1378,376,0)
(481,1169,0)
(400,160,0)
(522,1218,0)
(1353,1349,0)
(787,919,0)
(343,758,0)
(531,491,0)
(551,688,0)
(677,387,0)
(436,55,0)
(127,1117,0)
(271,302,0)
(101,1131,0)
(1348,485,0)
(551,1117,0)
(319,206,0)
(560,75,0)
(119,927,0)
(551,192,0)
(1230,217,0)
(1263,1244,0)
(713,767,0)
(703,473,0)
(977,320,0)
(1263,164,0)
(1089,817,0)
(809,669,0)
(389,69,0)
(441,387,0)
(908,69,0)
(256,1170,0)
(1373,516,0)
(296,104,0)
(524,112,0)
(185,381,0)
(1350,192,0)
(320,1178,0)
(1263,760,0)
(1263,336,0)
(1201,416,0)
(1397,1126,0)
(1326,40,0)
(256,1054,0)
(554,127,0)
(500,234,0)
(205,927,0)
(4,543,0)
(280,326,0)
(907,514,0)
(1112,320,0)
(760,1267,0)
(747,1198,0)
(394,309,0)
(447,1400,0)
(481,321,0)
(1094,1178,0)
(1168,314,0)
(503,537,0)
(538,826,0)
(1054,742,0)
(805,857,0)
(30,153,0)
(1171,687,0)
(1168,1032,0)
(551,1367,0)
(905,1113,0)
(1026,66,0)
(1350,1154,0)
(1264,693,0)
(39,1026,0)
(1368,1207,0)
(1263,1403,0)
(1344,1178,0)
(115,284,0)
(357,834,0)
(1190,847,0)
(1350,416,0)
(1168,964,0)
(390,1281,0)
(761,1116,0)
(213,1144,0)
(722,134,0)
(214,125,0)
(991,205,0)
(958,677,0)
(270,1218,0)
(670,492,0)
(928,103,0)
(239,223,0)
(1263,1335,0)
(1349,1344,0)
(1335,706,0)
(929,1050,0)
(1263,306,0)
(740,962,0)
(737,387,0)
(619,224,0)
(1189,1299,0)
(856,541,0)
(1053,962,0)
(1092,676,0)
(403,1394,0)
(1263,321,0)
(970,907,0)
(551,317,0)
(1270,181,0)
(1202,1101,0)
(205,760,0)
(1350,796,0)
(14,1327,0)
(859,1190,0)
(1150,1280,0)
(895,931,0)
(127,1062,0)
(752,155,0)
(1360,69,0)
(1107,1377,0)
(842,412,0)
(1073,600,0)
(551,378,0)
(1341,387,0)
(333,1178,0)
(1203,1083,0)
(1157,817,0)
(962,1299,0)
(1201,1282,0)
(864,1169,0)
(379,768,0)
(551,411,0)
(1403,742,0)
(938,1396,0)
(1168,949,0)
(864,796,0)
(782,205,0)
(864,1197,0)
(864,1244,0)
(965,886,0)
(1104,1226,0)
(567,481,0)
(514,756,0)
(864,589,0)
(1062,426,0)
(655,998,0)
(317,114,0)
(353,768,0)
(1219,648,0)
(551,758,0)
(751,368,0)
(434,1217,0)
(313,411,0)
(127,174,0)
(626,305,0)
(165,1305,0)
(284,750,0)
(1201,69,0)
(761,336,0)
(705,544,0)
(467,1089,0)
(280,952,0)
(481,758,0)
(761,861,0)
(374,1367,0)
(1113,1218,0)
(440,1305,0)
(1209,1138,0)
(1168,701,0)
(67,326,0)
(904,69,0)
(761,68,0)
(559,931,0)
(676,1092,0)
(1259,583,0)
(1263,688,0)
(184,1211,0)
(439,1047,0)
(400,387,0)
(917,600,0)
(1136,1086,0)
(256,1032,0)
(603,473,0)
(38,1176,0)
(901,906,0)
(761,18,0)
(205,514,0)
(521,1400,0)
(90,469,0)
(1350,317,0)
(1372,387,0)
(1325,362,0)
(551,567,0)
(158,387,0)
(969,1272,0)
(481,174,0)
(153,481,0)
(864,861,0)
(1350,1282,0)
(864,1080,0)
(1350,1080,0)
(1065,1014,0)
(619,1182,0)
(1334,64,0)
(492,1290,0)
(1193,1385,0)
(704,156,0)
(687,387,0)
(1263,473,0)
(284,1190,0)
(986,1249,0)
(962,1290,0)
(469,1218,0)
(1135,180,0)
(39,584,0)
(180,1299,0)
(1201,164,0)
(864,375,0)
(26,1313,0)
(1310,1327,0)
(821,187,0)
(739,1219,0)
(348,519,0)
(688,1011,0)
(584,39,0)
(1177,865,0)
(864,18,0)
(638,819,0)
(205,955,0)
(1246,1126,0)
(68,387,0)
(1288,419,0)
(894,329,0)
(1050,845,0)
(1201,409,0)
(297,817,0)
(1324,317,0)
(1201,796,0)
(964,1132,0)
(205,164,0)
(650,669,0)
(1159,835,0)
(1263,68,0)
(761,906,0)
(366,1265,0)
(486,1271,0)
(1360,1137,0)
(761,796,0)
(205,949,0)
(922,1095,0)
(501,187,0)
(256,955,0)
(761,1117,0)
(711,524,0)
(1308,1079,0)
(170,668,0)
(608,155,0)
(274,383,0)
(511,584,0)
(331,204,0)
(1401,735,0)
(755,640,0)
(57,865,0)
(1000,320,0)
(1150,387,0)
(363,1199,0)
(1168,861,0)
(481,1116,0)
(1337,387,0)
(412,1400,0)
(481,964,0)
(955,742,0)
(551,18,0)
(554,687,0)
(189,1233,0)
(879,387,0)
(1350,1169,0)
(845,868,0)
(498,69,0)
(1201,758,0)
(780,69,0)
(568,1153,0)
(470,172,0)
(1112,1039,0)
(551,356,0)
(442,69,0)
(481,409,0)
(1274,585,0)
(740,91,0)
(494,320,0)
(1309,850,0)
(836,804,0)
(1168,663,0)
(317,387,0)
(688,387,0)
(864,491,0)
(1148,387,0)
(376,862,0)
(481,411,0)
(742,877,0)
(598,1218,0)
(365,89,0)
(962,387,0)
(347,1256,0)
(335,585,0)
(205,1256,0)
(412,842,0)
(1075,452,0)
(149,380,0)
(540,836,0)
(127,1080,0)
(468,659,0)
(481,1162,0)
(1316,387,0)
(646,1170,0)
(409,742,0)
(1336,105,0)
(1219,739,0)
(1303,642,0)
(112,69,0)
(285,1200,0)
(887,742,0)
(864,1117,0)
(1231,181,0)
(228,1112,0)
(54,643,0)
(285,765,0)
(1405,931,0)
(1208,518,0)
(1393,362,0)
(256,69,0)
(1399,1263,0)
(137,218,0)
(1261,933,0)
(819,1218,0)
(967,345,0)
(420,774,0)
(1248,69,0)
(1082,1178,0)
(928,1281,0)
(256,164,0)
(1271,783,0)
(177,1138,0)
(1109,841,0)
(659,817,0)
(1247,783,0)
(475,553,0)
(791,1280,0)
(864,949,0)
(1168,1170,0)
(1034,1015,0)
(49,955,0)
(205,1032,0)
(1376,1179,0)
(706,1178,0)
(850,1270,0)
(1350,554,0)
(1335,387,0)
(551,273,0)
(920,974,0)
(384,1057,0)
(1168,1154,0)
(492,1299,0)
(1134,1239,0)
(481,1282,0)
(256,1154,0)
(481,1197,0)
(176,387,0)
(801,441,0)
(954,525,0)
(234,668,0)
(1114,1367,0)
(398,69,0)
(864,580,0)
(1395,1178,0)
(1101,682,0)
(1355,713,0)
(874,628,0)
(935,1089,0)
(877,742,0)
(740,193,0)
(931,895,0)
(256,589,0)
(1182,619,0)
(553,65,0)
(1350,314,0)
(85,701,0)
(551,276,0)
(631,47,0)
(551,760,0)
(127,906,0)
(714,1024,0)
(140,69,0)
(1168,18,0)
(1390,634,0)
(648,326,0)
(843,845,0)
(732,1252,0)
(205,409,0)
(572,1178,0)
(125,847,0)
(1024,1374,0)
(809,302,0)
(466,1011,0)
(92,179,0)
(1105,1378,0)
(631,991,0)
(1170,783,0)
(279,1398,0)
(256,68,0)
(1350,964,0)
(654,69,0)
(197,1030,0)
(551,693,0)
(246,1178,0)
(1350,1170,0)
(712,69,0)
(199,69,0)
(1088,192,0)
(761,970,0)
(818,476,0)
(1341,326,0)
(708,1349,0)
(177,387,0)
(551,436,0)
(1224,583,0)
(1096,782,0)
(1403,404,0)
(551,955,0)
(722,904,0)
(1350,955,0)
(1045,363,0)
(904,1288,0)
(1279,1218,0)
(205,1116,0)
(337,112,0)
(481,543,0)
(1371,495,0)
(256,1335,0)
(522,1137,0)
(202,1047,0)
(565,238,0)
(1059,1302,0)
(1263,1130,0)
(292,1335,0)
(1140,1374,0)
(1069,68,0)
(244,649,0)
(101,951,0)
(586,136,0)
(232,387,0)
(761,306,0)
(256,949,0)
(1269,164,0)
(1102,69,0)
(265,650,0)
(491,387,0)
(566,585,0)
(562,1099,0)
(205,306,0)
(127,1170,0)
(675,1125,0)
(256,174,0)
(1350,597,0)
(387,396,0)
(508,387,0)
(547,387,0)
(864,473,0)
(551,554,0)
(907,760,0)
(1394,66,0)
(97,826,0)
(127,1032,0)
(256,317,0)
(907,1154,0)
(180,387,0)
(536,918,0)
(1196,1178,0)
(1377,294,0)
(1169,387,0)
(432,1396,0)
(256,1080,0)
(455,1047,0)
(332,1084,0)
(907,1116,0)
(432,725,0)
(879,1180,0)
(978,156,0)
(864,597,0)
(156,978,0)
(551,970,0)
(355,1240,0)
(256,1117,0)
(205,1130,0)
(429,346,0)
(205,1403,0)
(18,742,0)
(907,543,0)
(392,1298,0)
(528,927,0)
(1035,681,0)
(142,543,0)
(205,1341,0)
(1350,1060,0)
(1176,38,0)
(862,376,0)
(951,101,0)
(212,320,0)
(600,917,0)
(1263,192,0)
(86,980,0)
(987,783,0)
(203,234,0)
(369,559,0)
(265,904,0)
(532,69,0)
(655,1238,0)
(445,1188,0)
(1281,928,0)
(1311,65,0)
(481,1054,0)
(597,1064,0)
(254,69,0)
(551,1080,0)
(400,305,0)
(960,494,0)
(974,824,0)
(864,760,0)
(1378,1218,0)
(1168,1256,0)
(48,919,0)
(1017,1295,0)
(716,18,0)
(481,164,0)
(127,688,0)
(127,861,0)
(818,339,0)
(267,1218,0)
(1350,321,0)
(1190,387,0)
(16,495,0)
(1042,554,0)
(632,329,0)
(1064,597,0)
(205,1162,0)
(481,1244,0)
(761,1197,0)
(985,964,0)
(761,1080,0)
(385,476,0)
(127,543,0)
(551,964,0)
(820,481,0)
(552,387,0)
(768,6,0)
(959,1178,0)
(732,1218,0)
(7,1178,0)
(339,636,0)
(888,1002,0)
(104,1218,0)
(559,55,0)
(761,597,0)
(426,69,0)
(265,387,0)
(10,387,0)
(1190,284,0)
(589,963,0)
(553,1344,0)
(880,1181,0)
(362,1325,0)
(383,1215,0)
(452,315,0)
(551,164,0)
(1146,1376,0)
(1201,1256,0)
(860,218,0)
(205,174,0)
(1226,387,0)
(127,796,0)
(907,1256,0)
(1322,1209,0)
(127,760,0)
(359,150,0)
(1086,585,0)
(1201,18,0)
(1338,174,0)
(1168,1341,0)
(91,740,0)
(162,69,0)
(312,69,0)
(574,302,0)
(684,816,0)
(1317,774,0)
(396,387,0)
(907,1080,0)
(1128,118,0)
(205,964,0)
(1263,1154,0)
(98,387,0)
(217,817,0)
(227,223,0)
(1033,1086,0)
(13,69,0)
(340,269,0)
(864,567,0)
(1239,387,0)
(320,682,0)
(1325,232,0)
(761,321,0)
(127,701,0)
(759,973,0)
(1377,36,0)
(946,1218,0)
(8,533,0)
(1201,514,0)
(58,927,0)
(1270,850,0)
(487,807,0)
(1357,1010,0)
(183,160,0)
(316,36,0)
(400,650,0)
(864,1335,0)
(783,987,0)
(1275,1099,0)
(1071,1162,0)
(491,205,0)
(378,66,0)
(551,416,0)
(10,1240,0)
(523,786,0)
(808,426,0)
(1168,192,0)
(1259,615,0)
(984,69,0)
(614,450,0)
(208,1131,0)
(833,69,0)
(471,1178,0)
(494,303,0)
(736,419,0)
(302,574,0)
(855,280,0)
(609,69,0)
(1398,1242,0)
(864,411,0)
(480,167,0)
(930,1178,0)
(584,511,0)
(1073,529,0)
(725,1178,0)
(17,196,0)
(147,720,0)
(32,439,0)
(1350,473,0)
(600,1073,0)
(645,488,0)
(907,942,0)
(161,1220,0)
(574,476,0)
(233,387,0)
(879,1011,0)
(907,970,0)
(806,528,0)
(864,906,0)
(782,103,0)
(761,949,0)
(275,428,0)
(907,1282,0)
(525,320,0)
(776,212,0)
(205,1170,0)
(551,225,0)
(362,387,0)
(761,174,0)
(602,978,0)
(407,491,0)
(361,125,0)
(669,809,0)
(723,524,0)
(788,538,0)
(1381,452,0)
(578,648,0)
(419,1288,0)
(1201,1117,0)
(551,1341,0)
(179,387,0)
(265,134,0)
(1174,69,0)
(175,899,0)
(174,1102,0)
(127,663,0)
(551,980,0)
(1019,1222,0)
(1170,608,0)
(551,1060,0)
(1350,949,0)
(1309,817,0)
(765,285,0)
(907,906,0)
(256,688,0)
(481,1403,0)
(276,1327,0)
(1055,1015,0)
(29,1314,0)
(256,1060,0)
(256,796,0)
(771,1178,0)
(643,817,0)
(457,28,0)
(1201,970,0)
(481,1170,0)
(233,537,0)
(127,192,0)
(1056,817,0)
(231,1277,0)
(1220,387,0)
(1327,276,0)
(125,619,0)
(256,597,0)
(481,1256,0)
(1138,1329,0)
(213,70,0)
(127,164,0)
(1201,336,0)
(1122,879,0)
(272,218,0)
(1275,1374,0)
(132,69,0)
(519,305,0)
(1000,1132,0)
(98,826,0)
(1168,1244,0)
(173,601,0)
(1057,387,0)
(71,1394,0)
(496,1128,0)
(549,314,0)
(178,643,0)
(527,1030,0)
(1350,1032,0)
(866,656,0)
(1350,663,0)
(260,1366,0)
(1160,36,0)
(381,1374,0)
(9,882,0)
(488,1178,0)
(1113,905,0)
(48,825,0)
(907,688,0)
(481,955,0)
(696,998,0)
(889,677,0)
(444,222,0)
(23,688,0)
(1263,1162,0)
(993,1297,0)
(761,314,0)
(1138,1238,0)
(1366,1279,0)
(1400,412,0)
(611,817,0)
(354,276,0)
(127,317,0)
(849,1178,0)
(761,1341,0)
(991,631,0)
(155,817,0)
(1190,1336,0)
(256,1162,0)
(565,737,0)
(232,1299,0)
(1143,1001,0)
(1201,663,0)
(782,1222,0)
(1228,69,0)
(551,514,0)
(109,1272,0)
(864,192,0)
(256,321,0)
(66,1172,0)
(213,320,0)
(794,537,0)
(37,1224,0)
(308,309,0)
(551,248,0)
(881,1032,0)
(777,539,0)
(225,583,0)
(568,675,0)
(551,1154,0)
(508,305,0)
(1263,409,0)
(216,873,0)
(1205,400,0)
(770,492,0)
(1263,758,0)
(1168,1282,0)
(726,1150,0)
(345,967,0)
(656,925,0)
(553,134,0)
(539,1265,0)
(551,321,0)
(864,68,0)
(435,1056,0)
(1084,70,0)
(181,1374,0)
(256,964,0)
(205,942,0)
(779,404,0)
(156,1019,0)
(1349,708,0)
(637,1356,0)
(235,1373,0)
(1139,1298,0)
(852,1110,0)
(668,69,0)
(1048,387,0)
(176,834,0)
(595,69,0)
(1034,830,0)
(494,886,0)
(537,233,0)
(90,731,0)
(1211,482,0)
(719,478,0)
(1080,387,0)
(713,387,0)
(996,635,0)
(526,1057,0)
(722,387,0)
(992,409,0)
(597,761,0)
(761,1062,0)
(276,640,0)
(1074,158,0)
(599,1178,0)
(127,68,0)
(283,267,0)
(1060,847,0)
(1209,387,0)
(401,213,0)
(288,379,0)
(641,69,0)
(93,387,0)
(1024,1099,0)
(1018,735,0)
(256,1341,0)
(1206,320,0)
(796,742,0)
(1184,378,0)
(78,381,0)
(494,70,0)
(604,1214,0)
(824,974,0)
(1200,285,0)
(1191,508,0)
(635,423,0)
(1350,970,0)
(864,519,0)
(1168,1060,0)
(256,758,0)
(1350,68,0)
(956,1178,0)
(110,69,0)
(551,68,0)
(569,1226,0)
(991,103,0)
(1160,294,0)
(205,554,0)
(485,585,0)
(256,1169,0)
(1027,987,0)
(564,104,0)
(551,949,0)
(481,18,0)
(256,701,0)
(1127,895,0)
(754,36,0)
(937,552,0)
(256,861,0)
(761,69,0)
(481,1341,0)
(864,1170,0)
(153,387,0)
(1402,1242,0)
(1346,1154,0)
(237,1082,0)
(382,51,0)
(1077,1170,0)
(136,586,0)
(999,1201,0)
(104,296,0)
(1339,977,0)
(515,301,0)
(841,1325,0)
(367,705,0)
(508,979,0)
(534,1177,0)
(841,1109,0)
(739,511,0)
(174,324,0)
(418,1178,0)
(125,387,0)
(885,387,0)
(907,1062,0)
(342,232,0)
(1201,861,0)
(485,817,0)
(205,701,0)
(1226,160,0)
(1183,1249,0)
(182,567,0)
(1350,589,0)
(1148,1267,0)
(1086,817,0)
(460,172,0)
(907,164,0)
(1168,1169,0)
(336,1136,0)
(477,1139,0)
(1263,1341,0)
(761,942,0)
(831,580,0)
(1280,1150,0)
(924,1148,0)
(1289,1060,0)
(861,767,0)
(1352,1252,0)
(303,697,0)
(74,1116,0)
(1350,174,0)
(529,1157,0)
(44,492,0)
(481,1080,0)
(912,416,0)
(1117,886,0)
(1145,307,0)
(256,942,0)
(378,320,0)
(405,782,0)
(834,176,0)
(20,593,0)
(1382,697,0)
(864,306,0)
(127,69,0)
(987,771,0)
(1276,1074,0)
(287,433,0)
(1168,1117,0)
(1272,109,0)
(1139,335,0)
(1000,55,0)
(411,320,0)
(592,410,0)
(56,1356,0)
(330,648,0)
(1396,1311,0)
(656,866,0)
(481,192,0)
(1007,1178,0)
(148,1219,0)
(2,321,0)
(864,1256,0)
(459,527,0)
(885,633,0)
(898,1178,0)
(316,149,0)
(768,379,0)
(1092,722,0)
(256,314,0)
(773,761,0)
(155,608,0)
(512,213,0)
(130,567,0)
(1133,774,0)
(53,188,0)
(674,441,0)
(138,1178,0)
(551,861,0)
(807,387,0)
(481,1032,0)
(1227,460,0)
(1146,946,0)
(551,420,0)
(1099,562,0)
(761,473,0)
(709,894,0)
(1085,385,0)
(927,1178,0)
(310,1102,0)
(868,11,0)
(551,597,0)
(1260,1316,0)
(589,783,0)
(979,879,0)
(241,436,0)
(720,355,0)
(127,321,0)
(358,179,0)
(1350,1062,0)
(587,75,0)
(864,1116,0)
(761,589,0)
(1263,964,0)
(1111,758,0)
(1136,835,0)
(1391,1145,0)
(1040,1060,0)
(907,321,0)
(492,387,0)
(1099,1275,0)
(723,452,0)
(1263,1256,0)
(478,40,0)
(644,1108,0)
(551,1204,0)
(5,176,0)
(1168,1062,0)
(356,387,0)
(1130,783,0)
(109,234,0)
(127,1154,0)
(349,847,0)
(594,1209,0)
(55,559,0)
(528,1095,0)
(897,460,0)
(890,1383,0)
(1168,409,0)
(404,1178,0)
(934,813,0)
(1301,181,0)
(761,1403,0)
(917,1207,0)
(1201,1116,0)
(1026,39,0)
(782,387,0)
(256,436,0)
(127,409,0)
(516,808,0)
(622,278,0)
(705,387,0)
(1312,1157,0)
(551,942,0)
(1201,192,0)
(127,314,0)
(973,177,0)
(864,314,0)
(1168,1054,0)
(1389,1178,0)
(660,1026,0)
(309,1216,0)
(505,52,0)
(227,1178,0)
(1157,529,0)
(1297,1178,0)
(153,1015,0)
(1201,701,0)
(248,387,0)
(972,1034,0)
(143,1333,0)
(278,396,0)
(211,1302,0)
(753,607,0)
(380,1218,0)
(871,233,0)
(127,1116,0)
(1350,906,0)
(472,594,0)
(302,271,0)
(125,1336,0)
(1279,1366,0)
(19,1178,0)
(193,933,0)
(864,1060,0)
(1253,544,0)
(127,1197,0)
(283,612,0)
(1164,69,0)
(481,589,0)
(864,1130,0)
(605,538,0)
(205,336,0)
(864,409,0)
(667,352,0)
(551,1244,0)
(1031,1080,0)
(481,906,0)
(1337,614,0)
(127,1054,0)
(422,158,0)
(1250,1026,0)
(923,127,0)
(991,706,0)
(205,411,0)
(823,177,0)
(731,69,0)
(598,1228,0)
(493,69,0)
(1262,1244,0)
(1284,69,0)
(328,525,0)
(1166,409,0)
(386,1216,0)
(177,973,0)
(256,1062,0)
(1198,747,0)
(615,1144,0)
(955,1297,0)
(1201,906,0)
(530,69,0)
(76,1341,0)
(1350,1117,0)
(1394,1039,0)
(1350,543,0)
(602,387,0)
(127,1130,0)
(628,874,0)
(551,1054,0)
(761,964,0)
(511,739,0)
(1188,285,0)
(679,283,0)
(64,70,0)
(525,70,0)
(1010,503,0)
(614,1337,0)
(658,1238,0)
(1223,1131,0)
(94,1314,0)
(1074,747,0)
(684,817,0)
(1168,1197,0)
(64,593,0)
(864,336,0)
(864,1206,0)
(761,411,0)
(345,6,0)
(1200,1073,0)
(942,742,0)
(481,796,0)
(1306,69,0)
(256,1244,0)
(952,1017,0)
(489,1000,0)
(1201,760,0)
(467,1278,0)
(155,585,0)
(1263,436,0)
(1108,55,0)
(399,1278,0)
(195,499,0)
(351,69,0)
(1350,1116,0)
(256,970,0)
(1263,69,0)
(481,436,0)
(1108,919,0)
(187,756,0)
(256,336,0)
(1263,701,0)
(721,1226,0)
(451,899,0)
(495,631,0)
(1009,1178,0)
(205,663,0)
(1201,1367,0)
(724,611,0)
(907,1117,0)
(1046,69,0)
(310,819,0)
(673,352,0)
(376,1378,0)
(360,874,0)
(441,674,0)
(1350,1244,0)
(170,832,0)
(1392,1178,0)
(948,1178,0)
(1356,56,0)
(815,69,0)
(761,1170,0)
(907,174,0)
(397,436,0)
(1305,547,0)
(1298,178,0)
(252,566,0)
(218,756,0)
(1365,1401,0)
(1263,1170,0)
(621,630,0)
(864,688,0)
(281,1294,0)
(761,1154,0)
(481,701,0)
(205,597,0)
(266,1169,0)
(975,980,0)
(137,1017,0)
(1257,455,0)
(1253,1280,0)
(1034,767,0)
(65,553,0)
(818,706,0)
(172,460,0)
(479,521,0)
(509,1050,0)
(980,387,0)
(785,783,0)
(225,346,0)
(415,356,0)
(551,519,0)
(1201,473,0)
(1168,1116,0)
(301,870,0)
(153,830,0)
(909,655,0)
(436,320,0)
(205,416,0)
(814,119,0)
(761,164,0)
(907,796,0)
(886,1178,0)
(1204,742,0)
(103,69,0)
(602,1299,0)
(864,554,0)
(1057,1180,0)
(1081,517,0)
(607,585,0)
(864,955,0)
(1067,602,0)
(431,69,0)
(75,1351,0)
(1201,68,0)
(1332,339,0)
(588,1190,0)
(682,1101,0)
(1367,1159,0)
(864,276,0)
(1388,649,0)
(885,326,0)
(128,1178,0)
(1266,64,0)
(180,1290,0)
(84,336,0)
(1263,1282,0)
(864,1062,0)
(205,1197,0)
(830,443,0)
(1168,589,0)
(907,1032,0)
(473,1360,0)
(628,450,0)
(207,1178,0)
(127,949,0)
(998,1178,0)
(38,889,0)
(979,508,0)
(1168,306,0)
(880,1290,0)
(309,308,0)
(828,1124,0)
(1316,307,0)
(1073,1200,0)
(286,46,0)
(212,824,0)
(89,686,0)
(1201,1197,0)
(234,1265,0)
(539,668,0)
(1147,686,0)
(551,906,0)
(551,1116,0)
(746,765,0)
(761,688,0)
(455,817,0)
(205,68,0)
(1128,496,0)
(844,840,0)
(1201,1154,0)
(455,529,0)
(1214,817,0)
(1226,731,0)
(250,1178,0)
(1034,387,0)
(1350,758,0)
(481,473,0)
(1258,306,0)
(381,1270,0)
(423,307,0)
(256,409,0)
(385,631,0)
(192,387,0)
(502,697,0)
(156,464,0)
(758,904,0)
(743,1086,0)
(495,387,0)
(760,387,0)
(1168,473,0)
(1268,1222,0)
(381,817,0)
(1263,970,0)
(899,767,0)
(481,306,0)
(131,1204,0)
(692,598,0)
(205,473,0)
(205,543,0)
(1200,1120,0)
(134,198,0)
(1188,817,0)
(903,69,0)
(393,552,0)
(256,306,0)
(1086,1136,0)
(423,635,0)
(277,816,0)
(661,464,0)
(205,1054,0)
(1161,885,0)
(1168,688,0)
(426,808,0)
(1343,949,0)
(1240,10,0)
(1109,103,0)
(1271,1163,0)
(573,942,0)
(98,326,0)
(911,899,0)
(769,314,0)
(508,731,0)
(862,857,0)
(280,387,0)
(1109,339,0)
(119,528,0)
(1366,108,0)
(220,157,0)
(238,565,0)
(761,1162,0)
(1314,387,0)
(70,1083,0)
(1216,309,0)
(1112,586,0)
(1176,1022,0)
(907,1197,0)
(6,345,0)
(907,554,0)
(107,611,0)
(537,503,0)
(1034,481,0)
(1350,1197,0)
(520,1083,0)
(1226,1104,0)
(648,387,0)
(179,481,0)
(1153,19,0)
(1263,861,0)
(1155,69,0)
(358,1180,0)
(991,339,0)
(1098,1109,0)
(149,316,0)
(219,1178,0)
(761,701,0)
(1372,1138,0)
(798,1344,0)
(1254,1275,0)
(1396,387,0)
(213,886,0)
(551,352,0)
(694,1178,0)
(446,677,0)
(464,1178,0)
(1168,543,0)
(232,1290,0)
(979,65,0)
(1314,464,0)
(900,889,0)
(245,264,0)
(1201,1244,0)
(864,1002,0)
(551,1282,0)
(1354,1048,0)
(1168,1335,0)
(341,1000,0)
(869,375,0)
(388,713,0)
(551,1169,0)
(1199,1215,0)
(159,1112,0)
(635,996,0)
(449,1207,0)
(88,732,0)
(864,1054,0)
(205,1117,0)
(21,283,0)
(261,1178,0)
(196,443,0)
(60,1064,0)
(872,1178,0)
(907,1169,0)
(481,949,0)
(1311,1178,0)
(1364,1403,0)
(561,153,0)
(51,742,0)
(1376,1146,0)
(1270,381,0)
(585,827,0)
(816,870,0)
(230,485,0)
(877,188,0)
(127,1335,0)
(212,66,0)
(383,1061,0)
(307,1316,0)
(727,1215,0)
(710,626,0)
(111,1362,0)
(1072,114,0)
(379,640,0)
(402,599,0)
(1263,955,0)
(127,964,0)
(864,420,0)
(551,491,0)
(300,282,0)
(1020,1178,0)
(1208,408,0)
(1336,978,0)
(1263,18,0)
(1201,1062,0)
(766,69,0)
(653,225,0)
(1294,358,0)
(205,321,0)
(626,160,0)
(1160,832,0)
(906,1263,0)
(179,358,0)
(1037,144,0)
(633,885,0)
(1201,321,0)
(1003,167,0)
(907,1341,0)
(944,1337,0)
(1291,192,0)
(551,1130,0)
(1350,306,0)
(734,265,0)
(689,69,0)
(907,1244,0)
(837,428,0)
(1043,69,0)
(1168,758,0)
(1054,872,0)
(1108,320,0)
(633,1238,0)
(556,7,0)
(1267,69,0)
(781,1188,0)
(205,1080,0)
(1116,383,0)
(256,1130,0)
(807,731,0)
(428,387,0)
(1204,227,0)
(124,188,0)
(1109,706,0)
(919,1108,0)
(307,1145,0)
(1215,727,0)
(70,64,0)
(1185,963,0)
(652,69,0)
(1029,1178,0)
(552,750,0)
(97,973,0)
(428,1344,0)
(1350,1403,0)
(1252,1178,0)
(864,1032,0)
(413,499,0)
(1151,767,0)
(1119,19,0)
(907,589,0)
(782,706,0)
(1168,1130,0)
(1350,760,0)
(1201,1170,0)
(761,317,0)
(551,1403,0)
(701,1039,0)
(1207,917,0)
(949,783,0)
(256,1116,0)
(671,1116,0)
(907,1335,0)
(839,98,0)
(1350,688,0)
(546,1117,0)
(476,385,0)
(783,827,0)
(1124,457,0)
(1132,1178,0)
(1263,543,0)
(127,336,0)
(899,830,0)
(761,554,0)
(205,1169,0)
(476,574,0)
(971,46,0)
(790,232,0)
(460,897,0)
(481,861,0)
(1263,597,0)
(1263,1060,0)
(363,1045,0)
(1305,165,0)
(492,670,0)
(232,631,0)
(854,565,0)
(371,951,0)
(1201,942,0)
(1201,1080,0)
(768,404,0)
(356,750,0)
(127,473,0)
(591,919,0)
(1154,1179,0)
(1,1178,0)
(1206,150,0)
(659,1047,0)
(387,236,0)
(1263,1116,0)
(551,336,0)
(3,508,0)
(1323,870,0)
(596,1178,0)
(1165,1374,0)
(864,416,0)
(458,1383,0)
(758,387,0)
(1131,101,0)
(651,320,0)
(167,1379,0)
(907,1130,0)
(248,1019,0)
(850,1361,0)
(1349,387,0)
(258,317,0)
(1282,742,0)
(642,1218,0)
(756,297,0)
(550,1265,0)
(24,68,0)
(256,554,0)
(103,1362,0)
(1093,1160,0)
(620,601,0)
(1149,179,0)
(1263,796,0)
(1319,283,0)
(665,1178,0)
(42,1206,0)
(838,1178,0)
(1002,1180,0)
(172,886,0)
(301,816,0)
(868,845,0)
(1141,280,0)
(864,1367,0)
(50,193,0)
(1120,1200,0)
(1400,521,0)
(819,310,0)
(1201,949,0)
(899,175,0)
(761,758,0)
(1362,103,0)
(1249,847,0)
(816,816,0)
(747,1074,0)
(1263,942,0)
(169,376,0)
(873,1300,0)
(1347,818,0)
(507,987,0)
(864,1282,0)
(742,1178,0)
(1350,411,0)
(1101,387,0)
(1154,742,0)
(473,387,0)
(816,144,0)
(438,111,0)
(627,905,0)
(1215,1199,0)
(610,789,0)
(1201,306,0)
(1210,1396,0)
(761,1244,0)
(864,495,0)
(273,70,0)
(1129,818,0)
(907,306,0)
(127,1256,0)
(991,387,0)
(524,723,0)
(1180,1178,0)
(1340,807,0)
(1209,326,0)
(1229,212,0)
(864,1048,0)
(1217,634,0)
(156,387,0)
(1234,1228,0)
(907,314,0)
(718,420,0)
(450,628,0)
(263,566,0)
(672,547,0)
(829,865,0)
(285,1188,0)
(302,809,0)
(1050,387,0)
(864,317,0)
(181,817,0)
(141,248,0)
(177,326,0)
(853,1178,0)
(864,248,0)
(1095,817,0)
(481,1130,0)
(813,204,0)
(577,1178,0)
(864,1154,0)
(1268,817,0)
(809,841,0)
(907,964,0)
(761,1054,0)
(205,436,0)
(234,109,0)
(170,1265,0)
(35,842,0)
(179,767,0)
(151,946,0)
(1350,1130,0)
(664,1178,0)
(763,633,0)
(1153,1381,0)
(34,970,0)
(51,864,0)
(1195,1132,0)
(256,18,0)
(1112,66,0)
(846,1218,0)
(1350,336,0)
(1350,164,0)
(730,735,0)
(571,771,0)
(990,1341,0)
(391,273,0)
(1201,1060,0)
(731,90,0)
(1057,1011,0)
(1356,326,0)
(553,387,0)
(127,589,0)
(961,1062,0)
(262,306,0)
(322,69,0)
(616,205,0)
(1017,952,0)
(127,1162,0)
(841,809,0)
(551,174,0)
(1256,178,0)
(453,69,0)
(1201,411,0)
(385,1299,0)
(551,663,0)
(196,1218,0)
(1179,69,0)
(513,1178,0)
(941,1082,0)
(1168,554,0)
(1068,362,0)
(462,544,0)
(152,1108,0)
(205,1335,0)
(454,1032,0)
(1137,1360,0)
(1089,467,0)
(1190,1267,0)
(1018,785,0)
(907,758,0)
(481,336,0)
(247,566,0)
(1241,1381,0)
(793,69,0)
(481,970,0)
(294,1178,0)
(864,701,0)
(967,1218,0)
(1263,411,0)
(307,423,0)
(1350,1335,0)
(1102,310,0)
(218,137,0)
(416,160,0)
(919,48,0)
(768,742,0)
(586,1112,0)
(907,192,0)
(223,227,0)
(355,187,0)
(290,455,0)
(707,69,0)
(1097,1287,0)
(1103,1244,0)
(1349,134,0)
(178,1178,0)
(481,314,0)
(1242,731,0)
(1187,137,0)
(1109,205,0)
(265,1344,0)
(1153,568,0)
(1130,1385,0)
(551,1062,0)
(296,100,0)
(1361,562,0)
(98,1138,0)
(121,1057,0)
(1278,467,0)
(1006,764,0)
(134,526,0)
(897,786,0)
(1167,1337,0)
(1263,1032,0)
(529,455,0)
(693,387,0)
(496,593,0)
(111,1218,0)
(1182,264,0)
(1263,174,0)
(907,409,0)
(698,170,0)
(864,758,0)
(1104,229,0)
(127,416,0)
(1168,317,0)
(1298,1139,0)
(1219,148,0)
(1092,971,0)
(179,830,0)
(1240,355,0)
(0,1178,0)
(127,955,0)
(907,336,0)
(327,1209,0)
(907,1162,0)
(1168,1367,0)
(1350,1054,0)
(1201,1032,0)
(750,284,0)
(1025,1148,0)
(725,432,0)
(864,964,0)
(630,1253,0)
(1109,387,0)
(1056,917,0)
(481,870,0)
(936,551,0)
(118,865,0)
(127,1244,0)
(1350,942,0)
(188,877,0)
(907,68,0)
(485,1348,0)
(205,1154,0)
(229,1104,0)
(845,1050,0)
(36,69,0)
(913,579,0)
(669,650,0)
(205,375,0)
(224,619,0)
(739,649,0)
(735,1018,0)
(305,713,0)
(907,1054,0)
(1091,1178,0)
(205,1282,0)
(318,496,0)
(864,970,0)
(1005,1014,0)
(551,1335,0)
(1314,1019,0)
(256,192,0)
(481,1154,0)
(127,1341,0)
(647,69,0)
(217,562,0)
(864,977,0)
(100,668,0)
(1019,1178,0)
(864,321,0)
(168,765,0)
(270,1045,0)
(525,886,0)
(761,1282,0)
(826,98,0)
(82,1218,0)
(31,408,0)
(1375,1153,0)
(1238,633,0)
(674,1022,0)
(994,69,0)
(548,1316,0)
(865,1178,0)
(907,1170,0)
(1087,1045,0)
(943,1178,0)
(942,1201,0)
(256,416,0)
(551,375,0)
(864,1403,0)
(1064,387,0)
(205,1244,0)
(722,1344,0)
(762,1162,0)
(1038,485,0)
(701,320,0)
(1169,103,0)
(558,1125,0)
(686,89,0)
(1238,655,0)
(1201,1403,0)
(818,387,0)
(1222,782,0)
(551,473,0)
(77,301,0)
(1226,305,0)
(1201,314,0)
(892,98,0)
(626,271,0)
(429,1224,0)
(432,552,0)
(443,830,0)
(1244,599,0)
(314,387,0)
(563,19,0)
(205,758,0)
(1224,429,0)
(1372,326,0)
(87,737,0)
(251,747,0)
(580,1336,0)
(526,134,0)
(1256,387,0)
(1108,1132,0)
(910,723,0)
(1242,387,0)
(158,1074,0)
(878,165,0)
(164,1348,0)
(896,1178,0)
(1201,554,0)
(1168,796,0)
(1188,1047,0)
(675,568,0)
(761,955,0)
(882,583,0)
(218,387,0)
(613,1372,0)
(907,597,0)
(1032,387,0)
(557,175,0)
(1404,1268,0)
(870,1178,0)
(1011,1178,0)
(65,979,0)
(242,640,0)
(792,380,0)
(193,740,0)
(1327,742,0)
(425,177,0)
(1245,242,0)
(137,1187,0)
(210,1048,0)
(1201,317,0)
(503,1010,0)
(205,970,0)
(240,101,0)
(187,387,0)
(11,1277,0)
(1201,1341,0)
(481,269,0)
(424,727,0)
(907,949,0)
(463,592,0)
(1201,1169,0)
(1251,180,0)
(1238,1138,0)
(73,1259,0)
(1350,1367,0)
(1201,174,0)
(971,1092,0)
(150,1044,0)
(1263,1169,0)
(127,1282,0)
(299,1224,0)
(778,164,0)
(745,514,0)
(1214,1321,0)
(127,411,0)
(1168,514,0)
(907,1367,0)
(907,317,0)
(1302,680,0)
(551,1197,0)
(256,473,0)
(957,593,0)
(713,1015,0)
(1331,942,0)
(1330,10,0)
(840,579,0)
(551,796,0)
(713,481,0)
(481,554,0)
(1175,1178,0)
(171,1178,0)
(510,1206,0)
(797,547,0)
(1372,874,0)
(867,1215,0)
(1106,580,0)
(153,767,0)
(1022,674,0)
(298,385,0)
(256,1197,0)
(79,1351,0)
(962,740,0)
(1153,112,0)
(687,554,0)
(1350,1162,0)
(717,1002,0)
(1283,69,0)
(611,1120,0)
(1090,223,0)
(1222,1019,0)
(633,408,0)
(66,394,0)
(297,756,0)
(980,725,0)
(528,144,0)
(334,457,0)
(1381,167,0)
(22,1080,0)
(620,1267,0)
(1131,387,0)
(847,1178,0)
(116,452,0)
(200,1034,0)
(1333,1178,0)
(1173,705,0)
(617,69,0)
(977,48,0)
(127,18,0)
(1117,320,0)
(518,1218,0)
(1394,225,0)
(1116,320,0)
(669,153,0)
(205,796,0)
(795,1178,0)
(180,631,0)
(1218,267,0)
(481,663,0)
(593,1178,0)
(1350,1341,0)
(45,1178,0)
(807,526,0)
(416,387,0)
(11,868,0)
(1263,314,0)
(619,125,0)
(256,514,0)
(772,949,0)
(1168,1403,0)
(335,1139,0)
(623,1130,0)
(427,906,0)
(1356,387,0)
(437,69,0)
(830,69,0)
(166,693,0)
(1292,1178,0)
(535,56,0)
(481,1367,0)
(421,1242,0)
(947,525,0)
(1282,1168,0)
(1299,1178,0)
(915,191,0)
(187,355,0)
(826,97,0)
(799,952,0)
(352,134,0)
(702,38,0)
(1192,39,0)
(1144,213,0)
(1351,75,0)
(810,1178,0)
(1236,583,0)
(127,1367,0)
(907,411,0)
(456,514,0)
(276,1160,0)
(1158,458,0)
(1263,416,0)
(1350,409,0)
(1201,597,0)
(1078,69,0)
(1172,66,0)
(338,119,0)
(350,118,0)
(481,1060,0)
(1036,894,0)
(545,1178,0)
(324,174,0)
(1080,830,0)
(626,387,0)
(1201,1335,0)
(1120,611,0)
(1286,1159,0)
(1249,1183,0)
(643,178,0)
(581,518,0)
(139,589,0)
(883,928,0)
(899,387,0)
(864,693,0)
(18,6,0)
(1014,1311,0)
(802,1197,0)
(1058,1197,0)
(120,1004,0)
(280,1138,0)
(567,387,0)
(625,256,0)
(377,1321,0)
(406,785,0)
(582,1199,0)
(1148,575,0)
(551,314,0)
(291,482,0)
(649,739,0)
(551,1048,0)
(309,394,0)
(894,178,0)
(295,722,0)
(1095,528,0)
(271,1034,0)
(469,90,0)
(481,1335,0)
(693,339,0)
(1386,553,0)
(774,742,0)
(448,701,0)
(205,18,0)
(1201,964,0)
(324,387,0)
(160,1178,0)
(205,906,0)
(997,737,0)
(205,688,0)
(481,68,0)
(1120,659,0)
(952,280,0)
(1285,375,0)
(1213,1256,0)
(1263,1117,0)
(987,387,0)
(39,786,0)
(1014,387,0)
(221,1095,0)
(1243,870,0)
(256,760,0)
(205,317,0)
(256,1282,0)
(655,368,0)
(1369,796,0)
(1321,1374,0)
(372,971,0)
(866,1218,0)
(989,1054,0)
(907,473,0)
(481,514,0)
(1244,742,0)
(1249,1267,0)
(314,731,0)
(1381,1302,0)
(518,1208,0)
(723,1302,0)
(659,1120,0)
(775,1047,0)
(414,270,0)
(917,1056,0)
(400,731,0)
(181,1270,0)
(271,626,0)
(785,1018,0)
(857,862,0)
(1168,164,0)
(1168,411,0)
(1318,861,0)
(106,1178,0)
(1002,387,0)
(1239,1178,0)
(1350,18,0)
(1056,1047,0)
(525,328,0)
(902,1169,0)
(551,543,0)
(127,436,0)
(851,1154,0)
(1263,663,0)
(1198,165,0)
(284,115,0)
(894,387,0)
(761,543,0)
(1325,841,0)
(684,1374,0)
(864,352,0)
(648,1219,0)
(133,656,0)
(127,554,0)
(373,1204,0)
(154,69,0)
(1162,387,0)
(321,1344,0)
(1272,36,0)
(113,238,0)
(678,273,0)
(256,1403,0)
(1275,817,0)
(1156,1279,0)
(1314,115,0)
(916,626,0)
(807,305,0)
(891,668,0)
(1168,436,0)
(1220,1121,0)
(1350,514,0)
(411,1333,0)
(117,51,0)
(33,1054,0)
(737,565,0)
(978,602,0)
(566,817,0)
(62,1178,0)
(834,282,0)
(580,387,0)
(761,1060,0)
(465,597,0)
(691,441,0)
(551,580,0)
(601,1218,0)
(99,1178,0)
(256,1367,0)
(551,495,0)
(850,1309,0)
(555,1178,0)
(683,1178,0)
(650,265,0)
(864,942,0)
(551,701,0)
(761,514,0)
(1168,942,0)
(824,212,0)
(1000,223,0)
(129,1178,0)
(618,768,0)
(876,640,0)
(931,842,0)
(682,320,0)
(995,785,0)
(127,1169,0)
(188,387,0)
(193,1104,0)
(633,998,0)
(27,670,0)
(194,69,0)
(761,409,0)
(1320,336,0)
(1063,1052,0)
(289,663,0)
(1201,543,0)
(884,539,0)
(408,1208,0)
(1361,850,0)
(732,7,0)
(1242,1398,0)
(864,164,0)
(1057,526,0)
(1293,1282,0)
(1401,783,0)
(945,1350,0)
(205,1367,0)
(205,861,0)
(521,1218,0)
(1028,687,0)
(1177,784,0)
(1201,436,0)
(551,409,0)
(761,1169,0)
(1199,363,0)
(757,955,0)
(1316,178,0)
(1298,387,0)
(127,942,0)
(1342,328,0)
(1328,796,0)
(127,514,0)
(1263,317,0)
(1152,315,0)
(375,1138,0)
(1350,436,0)
(1084,320,0)
(256,1256,0)
(946,1146,0)
(592,865,0)
(677,889,0)
(1099,1024,0)
(481,597,0)
(1294,817,0)
(1021,1182,0)
(864,1204,0)
(157,1128,0)
(1060,387,0)
(874,1372,0)
(1209,594,0)
(1084,308,0)
(419,1218,0)
(1039,1178,0)
(95,1275,0)
(722,1092,0)
(953,1178,0)
(615,1259,0)
(59,1109,0)
(893,602,0)
(543,1299,0)
(526,807,0)
(970,742,0)
(136,824,0)
(1225,964,0)
(115,1314,0)
(765,817,0)
(483,112,0)
(738,1064,0)
(153,669,0)
(858,722,0)
(551,1032,0)
(172,70,0)
(968,928,0)
(36,316,0)
(1394,320,0)
(723,167,0)
(1095,1374,0)
(1221,586,0)
(236,387,0)
(215,265,0)
(964,320,0)
(1380,589,0)
(1265,1178,0)
(125,1267,0)
(1032,1290,0)
(978,1336,0)
(905,83,0)
(1296,308,0)
(506,522,0)
(551,306,0)
(346,429,0)
(1026,1039,0)
(928,706,0)
(949,252,0)
(822,400,0)
(232,1325,0)
(420,170,0)
(907,1403,0)
(205,314,0)
(352,387,0)
(72,69,0)
(12,1377,0)
(1383,458,0)
(928,387,0)
(811,551,0)
(497,1113,0)
(606,1178,0)
(668,100,0)
(1201,1130,0)
(1272,294,0)
(1348,835,0)
(114,1178,0)
(1013,1022,0)
(1048,1015,0)
(864,1162,0)
(761,663,0)
(1263,1062,0)
(481,760,0)
(1016,69,0)
(205,528,0)
(1168,760,0)
(697,579,0)
(1263,949,0)
(1197,1350,0)
(1023,494,0)
(1396,432,0)
(733,1117,0)
(713,830,0)
(80,469,0)
(81,335,0)
(544,1253,0)
(362,1267,0)
(864,663,0)
(1373,1218,0)
(1201,1162,0)
(800,861,0)
(428,904,0)
(127,1060,0)
(1383,1070,0)
(10,326,0)
(940,102,0)
(551,51,0)
(864,174,0)
(1179,1376,0)
(63,1298,0)
(926,907,0)
(15,568,0)
(1142,356,0)
(1115,866,0)
(355,720,0)
(370,1181,0)
(907,663,0)
(695,172,0)
(1315,864,0)
(1084,886,0)
(607,1163,0)
(538,756,0)
(433,1178,0)
(602,631,0)
(864,1341,0)
(1381,1153,0)
(163,1101,0)
(1004,1313,0)
(190,579,0)
(1201,688,0)
(1181,880,0)
(212,1039,0)
(662,1397,0)
(1168,1162,0)
(761,1256,0)
(907,955,0)
(179,1015,0)
(1263,906,0)
(816,684,0)
(476,818,0)
(504,319,0)
(1207,817,0)
(1218,846,0)
(1345,156,0)
(1212,10,0)
(538,387,0)
(807,160,0)
(803,786,0)
(720,1218,0)
(311,1039,0)
(165,1198,0)
(962,631,0)
(1168,906,0)
(1367,783,0)
(223,1000,0)
(1235,69,0)
(420,640,0)
(889,38,0)
(1350,1256,0)
(1168,174,0)
(127,597,0)
(1201,1054,0)
(1118,1157,0)
(875,1272,0)
(648,1138,0)
(481,317,0)
(428,837,0)
(982,176,0)
(89,817,0)
(1168,321,0)
(914,1356,0)
(936,1239,0)
(1137,522,0)
(205,589,0)
(164,783,0)
(267,283,0)
(362,1336,0)
(358,1294,0)
(396,278,0)
(907,436,0)
(257,69,0)
(1224,865,0)
(127,758,0)
(686,1047,0)
(1359,1024,0)
(481,693,0)
(395,1168,0)
(1280,1253,0)
(663,433,0)
(950,1252,0)
(1267,620,0)
(728,760,0)
(1307,69,0)
(256,906,0)
(205,1110,0)
(249,1309,0)
(750,1178,0)
(321,387,0)
(761,760,0)
(201,663,0)
(385,387,0)
(1232,684,0)
(368,655,0)
(650,400,0)
(209,614,0)
(732,226,0)
(186,428,0)
(450,614,0)
(191,1041,0)
(528,528,0)
(481,816,0)
(907,861,0)
(1290,69,0)
(1104,193,0)
(145,519,0)
(430,940,0)
(273,320,0)
(1351,865,0)
(1181,1218,0)
(808,516,0)
(963,835,0)
(490,872,0)
(761,1335,0)
(1350,701,0)
(863,615,0)
(562,1361,0)
(1370,321,0)
(514,387,0)
(767,1178,0)
(96,69,0)
(1001,786,0)
(1124,1218,0)
(1278,524,0)
(1263,1197,0)
(699,1150,0)
(782,339,0)
(368,387,0)
(1051,297,0)
(735,1401,0)
(308,1084,0)
(826,538,0)
(1017,137,0)
(100,296,0)
(1052,789,0)
(443,196,0)
(907,69,0)
(570,1401,0)
(1263,1080,0)
(552,432,0)
(1148,847,0)
(1263,554,0)
(551,1014,0)
(126,897,0)
(544,705,0)
(685,583,0)
(409,256,0)
(1062,742,0)
(380,149,0)
(907,1060,0)
(1362,111,0)
(524,1278,0)
(601,620,0)
(1358,368,0)
(741,688,0)
(1066,1178,0)
(481,375,0)
(481,1062,0)
(966,927,0)
(146,962,0)
(602,1290,0)
(508,160,0)
(690,324,0)
(253,804,0)
(180,115,0)
(408,69,0)
(649,387,0)
(879,979,0)
(306,320,0)
(639,233,0)
(61,411,0)
(205,192,0)
(529,1073,0)
(6,69,0)
(864,436,0)
(1263,1367,0)
(474,1017,0)
(1008,706,0)
(256,543,0)
(481,688,0)
(973,97,0)
(906,742,0)
(974,579,0)
(748,294,0)
(842,931,0)
(1222,1268,0)
(649,756,0)
(255,324,0)
(481,1117,0)
(293,416,0)
(325,991,0)
(127,970,0)
(761,436,0)
(1249,387,0)
(553,904,0)
(542,1372,0)
(1049,684,0)
(907,701,0)
(713,305,0)
(172,320,0)
(1194,1084,0)
(907,18,0)
(1168,1080,0)
(157,1218,0)
(256,411,0)
(461,69,0)
(1263,1054,0)
(1022,1176,0)
(666,513,0)
(1034,271,0)
(1012,974,0)
(1128,157,0)
(1186,69,0)
(864,749,0)
(458,1218,0)
(1228,598,0)
(551,589,0)
(697,303,0)
(761,1367,0)
(65,1311,0)
(1197,742,0)
(729,1130,0)
(282,834,0)
(123,1056,0)
(481,491,0)
(988,559,0)
(551,580,1)
(582,363,1)
(539,777,1)
(1252,1352,1)
(674,441,1)
(1168,964,1)
(1346,857,1)
(1201,597,1)
(864,514,1)
(1371,670,1)
(1167,944,1)
(362,1393,1)
(883,56,1)
(277,528,1)
(104,564,1)
(893,1067,1)
(573,1331,1)
(125,847,1)
(655,998,1)
(283,1319,1)
(432,1396,1)
(1201,409,1)
(265,134,1)
(1349,1344,1)
(1173,367,1)
(1042,687,1)
(670,27,1)
(1120,659,1)
(1263,1060,1)
(1226,160,1)
(507,1027,1)
(1350,411,1)
(1298,178,1)
(551,1048,1)
(259,857,1)
(1207,1368,1)
(481,1054,1)
(1369,1328,1)
(400,160,1)
(603,703,1)
(564,891,1)
(191,915,1)
(446,1198,1)
(1201,543,1)
(481,870,1)
(1350,1062,1)
(1255,1274,1)
(354,1327,1)
(895,931,1)
(407,119,1)
(1289,1040,1)
(1276,158,1)
(876,755,1)
(650,265,1)
(1320,84,1)
(1263,317,1)
(256,164,1)
(843,1050,1)
(177,1138,1)
(113,565,1)
(1168,1130,1)
(85,448,1)
(1024,1374,1)
(11,868,1)
(127,1062,1)
(858,372,1)
(297,1051,1)
(586,1221,1)
(551,1341,1)
(481,416,1)
(233,639,1)
(834,1102,1)
(1188,817,1)
(551,663,1)
(481,1062,1)
(341,1204,1)
(453,830,1)
(494,320,1)
(1086,585,1)
(1381,452,1)
(907,1080,1)
(1200,1120,1)
(1344,798,1)
(897,460,1)
(365,1147,1)
(714,1359,1)
(256,1062,1)
(602,893,1)
(205,18,1)
(127,758,1)
(1146,946,1)
(613,1351,1)
(1349,134,1)
(179,387,1)
(1281,390,1)
(864,411,1)
(660,897,1)
(635,423,1)
(424,1215,1)
(331,813,1)
(728,259,1)
(481,1403,1)
(875,969,1)
(947,954,1)
(946,151,1)
(761,1367,1)
(695,126,1)
(691,801,1)
(349,1060,1)
(487,1340,1)
(906,901,1)
(1263,1162,1)
(255,690,1)
(172,320,1)
(1201,321,1)
(870,1323,1)
(1201,760,1)
(232,631,1)
(248,387,1)
(1190,1336,1)
(806,1361,1)
(864,1256,1)
(1245,170,1)
(1190,387,1)
(190,913,1)
(1350,1170,1)
(551,567,1)
(1092,676,1)
(326,67,1)
(741,464,1)
(243,857,1)
(941,237,1)
(1104,229,1)
(1168,1170,1)
(864,1403,1)
(1279,1218,1)
(807,731,1)
(1263,1130,1)
(1201,970,1)
(667,837,1)
(199,1360,1)
(366,550,1)
(864,701,1)
(769,857,1)
(748,981,1)
(521,479,1)
(980,387,1)
(864,314,1)
(1272,36,1)
(481,1116,1)
(761,1060,1)
(478,719,1)
(887,1039,1)
(465,1064,1)
(196,1218,1)
(1394,320,1)
(770,44,1)
(232,1299,1)
(590,1014,1)
(306,1258,1)
(442,1128,1)
(1168,1367,1)
(1141,855,1)
(908,1179,1)
(1201,1117,1)
(928,968,1)
(1263,164,1)
(1026,1039,1)
(495,387,1)
(551,192,1)
(358,179,1)
(907,321,1)
(266,857,1)
(265,734,1)
(554,1042,1)
(316,149,1)
(441,691,1)
(567,387,1)
(857,862,1)
(1350,1054,1)
(551,1032,1)
(1396,387,1)
(1325,232,1)
(1282,1273,1)
(1039,311,1)
(1241,319,1)
(551,164,1)
(655,909,1)
(879,1122,1)
(321,387,1)
(761,949,1)
(765,168,1)
(960,697,1)
(1381,1153,1)
(538,605,1)
(346,429,1)
(1025,924,1)
(1174,731,1)
(1008,1335,1)
(830,443,1)
(638,174,1)
(1005,750,1)
(602,1299,1)
(42,1381,1)
(457,1124,1)
(1259,583,1)
(907,306,1)
(761,1197,1)
(761,192,1)
(1263,964,1)
(551,317,1)
(553,387,1)
(648,326,1)
(699,544,1)
(1321,1214,1)
(228,303,1)
(1168,1060,1)
(604,377,1)
(692,1234,1)
(732,7,1)
(1400,521,1)
(1350,760,1)
(127,701,1)
(525,886,1)
(1378,1218,1)
(61,320,1)
(1353,1183,1)
(631,991,1)
(242,640,1)
(385,298,1)
(179,1015,1)
(127,192,1)
(1398,1242,1)
(455,817,1)
(386,308,1)
(170,668,1)
(1195,964,1)
(1179,1376,1)
(589,783,1)
(585,1255,1)
(172,470,1)
(435,686,1)
(283,679,1)
(502,1382,1)
(1229,586,1)
(551,1117,1)
(234,203,1)
(494,1023,1)
(620,601,1)
(702,889,1)
(1201,663,1)
(818,1129,1)
(834,357,1)
(864,248,1)
(127,1169,1)
(615,1144,1)
(551,589,1)
(559,931,1)
(1263,1282,1)
(1144,213,1)
(592,865,1)
(761,1335,1)
(496,318,1)
(301,515,1)
(1402,631,1)
(127,416,1)
(949,783,1)
(912,1299,1)
(1148,387,1)
(484,141,1)
(1123,286,1)
(436,241,1)
(1244,742,1)
(174,1338,1)
(1263,1116,1)
(136,586,1)
(551,906,1)
(38,889,1)
(481,1335,1)
(1350,758,1)
(890,199,1)
(1239,387,1)
(244,1219,1)
(1350,970,1)
(920,212,1)
(511,739,1)
(1303,1070,1)
(864,1315,1)
(1048,210,1)
(1405,857,1)
(1022,1013,1)
(205,1116,1)
(551,495,1)
(1169,387,1)
(1263,1170,1)
(761,317,1)
(1361,562,1)
(823,425,1)
(979,879,1)
(212,1039,1)
(1079,1308,1)
(345,967,1)
(1201,999,1)
(1104,1226,1)
(30,561,1)
(132,36,1)
(276,354,1)
(864,473,1)
(973,759,1)
(989,33,1)
(127,1060,1)
(946,1218,1)
(181,817,1)
(1350,1256,1)
(859,115,1)
(1053,146,1)
(1168,970,1)
(205,514,1)
(256,409,1)
(406,730,1)
(668,100,1)
(1168,1335,1)
(711,910,1)
(481,174,1)
(907,1256,1)
(982,5,1)
(127,473,1)
(1165,870,1)
(970,25,1)
(428,1344,1)
(885,326,1)
(1054,742,1)
(534,1123,1)
(864,1204,1)
(709,134,1)
(1350,688,1)
(890,493,1)
(1387,1184,1)
(928,103,1)
(291,1211,1)
(51,742,1)
(491,531,1)
(481,1060,1)
(551,276,1)
(256,955,1)
(819,1218,1)
(1153,1375,1)
(1272,294,1)
(987,771,1)
(1261,193,1)
(1168,597,1)
(816,816,1)
(213,70,1)
(807,387,1)
(994,907,1)
(864,567,1)
(782,405,1)
(1347,385,1)
(1109,103,1)
(153,1015,1)
(515,77,1)
(466,688,1)
(395,1282,1)
(296,104,1)
(1168,554,1)
(178,643,1)
(551,949,1)
(841,1109,1)
(98,326,1)
(400,305,1)
(864,317,1)
(856,996,1)
(1102,310,1)
(1016,1350,1)
(118,865,1)
(1147,439,1)
(890,1164,1)
(43,1339,1)
(130,191,1)
(1001,1143,1)
(1150,726,1)
(1168,473,1)
(724,659,1)
(1278,467,1)
(1224,865,1)
(1073,1200,1)
(1168,760,1)
(481,1117,1)
(294,748,1)
(829,1082,1)
(974,1012,1)
(747,1074,1)
(275,1336,1)
(890,994,1)
(899,387,1)
(907,942,1)
(1084,332,1)
(238,565,1)
(864,1116,1)
(1168,317,1)
(77,175,1)
(1394,403,1)
(907,1170,1)
(653,1394,1)
(1185,589,1)
(1080,387,1)
(1258,262,1)
(9,346,1)
(949,772,1)
(265,387,1)
(1081,1010,1)
(508,731,1)
(205,68,1)
(1148,1025,1)
(67,1341,1)
(717,888,1)
(909,368,1)
(500,1272,1)
(1182,619,1)
(1323,1243,1)
(942,742,1)
(1112,159,1)
(481,1256,1)
(1128,496,1)
(1137,522,1)
(626,731,1)
(1350,18,1)
(10,387,1)
(1350,1335,1)
(761,688,1)
(1324,771,1)
(1201,1169,1)
(1350,942,1)
(1018,785,1)
(481,68,1)
(382,109,1)
(1021,1183,1)
(256,964,1)
(978,156,1)
(475,979,1)
(1181,370,1)
(1168,416,1)
(761,970,1)
(34,857,1)
(600,1073,1)
(1134,592,1)
(761,1032,1)
(840,579,1)
(551,1403,1)
(142,1011,1)
(874,1372,1)
(907,1282,1)
(915,301,1)
(722,134,1)
(172,886,1)
(551,543,1)
(256,1282,1)
(205,758,1)
(648,387,1)
(127,1154,1)
(883,1138,1)
(1000,489,1)
(19,563,1)
(1168,906,1)
(205,1170,1)
(914,637,1)
(993,955,1)
(1123,231,1)
(317,387,1)
(877,188,1)
(1351,865,1)
(1249,847,1)
(280,326,1)
(907,1154,1)
(628,450,1)
(722,387,1)
(808,516,1)
(256,970,1)
(1084,886,1)
(647,355,1)
(1360,1137,1)
(907,760,1)
(773,597,1)
(383,1215,1)
(630,1253,1)
(1144,932,1)
(362,387,1)
(1375,1241,1)
(1201,1162,1)
(727,1215,1)
(846,1218,1)
(884,1377,1)
(73,882,1)
(626,305,1)
(1357,1198,1)
(601,173,1)
(851,1346,1)
(298,1085,1)
(1335,387,1)
(551,1335,1)
(214,361,1)
(205,1244,1)
(761,1244,1)
(1032,454,1)
(723,1302,1)
(116,1075,1)
(256,1335,1)
(1138,1238,1)
(1022,674,1)
(1161,655,1)
(929,509,1)
(1298,387,1)
(1092,722,1)
(362,1336,1)
(761,1403,1)
(175,557,1)
(866,1218,1)
(375,387,1)
(1201,1256,1)
(205,942,1)
(1024,714,1)
(563,1119,1)
(256,543,1)
(1158,890,1)
(562,1099,1)
(537,794,1)
(1097,1172,1)
(338,814,1)
(213,320,1)
(492,387,1)
(1268,817,1)
(270,414,1)
(1278,399,1)
(180,1299,1)
(381,78,1)
(1263,701,1)
(187,387,1)
(836,540,1)
(995,406,1)
(938,1210,1)
(551,970,1)
(864,164,1)
(1108,55,1)
(201,404,1)
(1068,232,1)
(385,1290,1)
(761,1054,1)
(217,817,1)
(87,630,1)
(141,481,1)
(1139,1298,1)
(48,919,1)
(847,349,1)
(1355,519,1)
(205,760,1)
(436,320,1)
(687,1028,1)
(1304,1123,1)
(781,445,1)
(1160,294,1)
(807,305,1)
(180,631,1)
(890,132,1)
(292,1363,1)
(86,1311,1)
(718,774,1)
(167,1003,1)
(986,109,1)
(991,103,1)
(235,1062,1)
(119,927,1)
(125,214,1)
(565,737,1)
(415,574,1)
(934,1361,1)
(850,1309,1)
(944,874,1)
(945,1197,1)
(1326,478,1)
(814,1281,1)
(356,1142,1)
(907,964,1)
(1260,1162,1)
(864,760,1)
(127,436,1)
(907,554,1)
(409,742,1)
(1263,409,1)
(1367,374,1)
(1168,1162,1)
(774,1133,1)
(626,710,1)
(180,387,1)
(1090,1000,1)
(494,886,1)
(1350,945,1)
(1026,1250,1)
(371,101,1)
(864,1169,1)
(149,380,1)
(193,740,1)
(183,416,1)
(234,1265,1)
(907,1197,1)
(170,698,1)
(526,1057,1)
(642,1303,1)
(1002,717,1)
(1118,455,1)
(1034,481,1)
(551,1130,1)
(508,160,1)
(706,1008,1)
(768,618,1)
(1302,211,1)
(1074,1276,1)
(440,547,1)
(809,669,1)
(907,688,1)
(400,1205,1)
(844,136,1)
(1350,317,1)
(1123,1390,1)
(205,1282,1)
(267,283,1)
(999,942,1)
(1201,317,1)
(285,1188,1)
(962,387,1)
(18,716,1)
(321,1370,1)
(481,861,1)
(1116,320,1)
(891,857,1)
(725,432,1)
(905,1113,1)
(50,574,1)
(1263,1032,1)
(508,305,1)
(720,1218,1)
(519,145,1)
(92,1002,1)
(782,339,1)
(276,1327,1)
(281,179,1)
(761,589,1)
(122,904,1)
(864,1244,1)
(1073,529,1)
(127,1117,1)
(287,663,1)
(181,1374,1)
(381,817,1)
(586,1112,1)
(127,923,1)
(1109,387,1)
(967,1218,1)
(1111,857,1)
(792,754,1)
(791,1150,1)
(33,1297,1)
(18,742,1)
(271,626,1)
(1350,416,1)
(1330,187,1)
(205,1154,1)
(551,225,1)
(158,387,1)
(1350,597,1)
(455,1047,1)
(481,411,1)
(1168,1282,1)
(523,594,1)
(632,894,1)
(963,1185,1)
(1381,1302,1)
(256,942,1)
(458,1218,1)
(864,416,1)
(303,697,1)
(1381,1241,1)
(212,776,1)
(234,668,1)
(1099,1275,1)
(649,756,1)
(10,1212,1)
(1332,693,1)
(239,1000,1)
(894,1036,1)
(218,756,1)
(205,1367,1)
(356,387,1)
(761,436,1)
(1376,1146,1)
(1168,1197,1)
(205,1054,1)
(722,295,1)
(236,387,1)
(763,885,1)
(211,1059,1)
(1382,579,1)
(272,860,1)
(678,391,1)
(619,224,1)
(690,857,1)
(629,18,1)
(824,212,1)
(525,947,1)
(481,1244,1)
(1000,55,1)
(256,1367,1)
(130,301,1)
(584,39,1)
(633,763,1)
(713,481,1)
(481,1367,1)
(127,1032,1)
(1350,1403,1)
(1388,244,1)
(419,736,1)
(1281,928,1)
(153,767,1)
(598,692,1)
(256,411,1)
(516,1373,1)
(125,1267,1)
(819,638,1)
(1120,611,1)
(1131,208,1)
(70,64,1)
(551,1062,1)
(1176,1022,1)
(412,1400,1)
(1135,1251,1)
(256,192,1)
(320,682,1)
(894,178,1)
(542,613,1)
(983,513,1)
(480,329,1)
(256,306,1)
(551,955,1)
(481,955,1)
(153,830,1)
(869,56,1)
(302,271,1)
(518,1218,1)
(1263,949,1)
(907,1054,1)
(524,711,1)
(503,537,1)
(1168,758,1)
(936,551,1)
(940,430,1)
(290,917,1)
(524,112,1)
(990,76,1)
(546,733,1)
(1263,1399,1)
(481,321,1)
(1056,817,1)
(1095,1374,1)
(1193,1130,1)
(495,16,1)
(1354,175,1)
(614,209,1)
(1168,395,1)
(951,371,1)
(1372,1138,1)
(1160,36,1)
(722,1344,1)
(551,796,1)
(1350,1341,1)
(1280,1150,1)
(1115,133,1)
(1397,662,1)
(205,375,1)
(324,387,1)
(1002,387,1)
(907,1335,1)
(1241,723,1)
(1201,1032,1)
(1270,381,1)
(442,457,1)
(481,375,1)
(155,817,1)
(1201,688,1)
(571,68,1)
(405,1096,1)
(399,467,1)
(1151,861,1)
(1263,942,1)
(256,1341,1)
(1254,95,1)
(481,701,1)
(818,103,1)
(481,1162,1)
(1201,554,1)
(7,556,1)
(508,3,1)
(416,293,1)
(1249,387,1)
(1222,1268,1)
(1220,161,1)
(1259,615,1)
(492,1290,1)
(594,472,1)
(227,223,1)
(689,1290,1)
(1145,1391,1)
(163,1202,1)
(179,1149,1)
(1226,305,1)
(801,38,1)
(826,538,1)
(861,1318,1)
(176,387,1)
(720,147,1)
(864,1162,1)
(1350,1032,1)
(54,1256,1)
(271,1034,1)
(1350,955,1)
(256,514,1)
(205,1335,1)
(443,196,1)
(597,1064,1)
(205,861,1)
(1034,1015,1)
(1275,1254,1)
(256,1162,1)
(49,757,1)
(796,742,1)
(1238,633,1)
(1123,1261,1)
(202,452,1)
(1172,66,1)
(493,408,1)
(761,411,1)
(780,761,1)
(1038,164,1)
(481,816,1)
(1234,857,1)
(649,1388,1)
(309,1216,1)
(36,316,1)
(58,178,1)
(481,1080,1)
(4,142,1)
(800,706,1)
(278,622,1)
(1142,415,1)
(1263,18,1)
(871,1357,1)
(1294,281,1)
(746,1188,1)
(907,970,1)
(1093,276,1)
(1177,865,1)
(218,387,1)
(987,635,1)
(162,1228,1)
(864,1367,1)
(505,846,1)
(707,6,1)
(1337,1167,1)
(1263,314,1)
(1201,1054,1)
(297,817,1)
(489,341,1)
(355,1240,1)
(551,248,1)
(761,955,1)
(1232,1049,1)
(518,581,1)
(59,1325,1)
(81,1271,1)
(797,747,1)
(687,387,1)
(89,817,1)
(1201,1154,1)
(256,1032,1)
(1074,158,1)
(721,569,1)
(225,583,1)
(205,192,1)
(481,314,1)
(398,426,1)
(890,254,1)
(318,157,1)
(551,861,1)
(127,970,1)
(1220,387,1)
(1350,306,1)
(551,1204,1)
(286,971,1)
(1109,1098,1)
(976,529,1)
(685,1236,1)
(76,756,1)
(1123,331,1)
(391,1351,1)
(111,1218,1)
(256,554,1)
(164,783,1)
(740,962,1)
(911,451,1)
(172,70,1)
(151,1154,1)
(1129,1347,1)
(1394,66,1)
(314,549,1)
(626,387,1)
(404,779,1)
(488,645,1)
(416,387,1)
(1356,914,1)
(907,543,1)
(794,233,1)
(745,335,1)
(1058,802,1)
(223,1000,1)
(890,908,1)
(1242,387,1)
(156,1345,1)
(256,597,1)
(602,631,1)
(551,314,1)
(731,90,1)
(1263,1341,1)
(127,1403,1)
(127,861,1)
(776,1229,1)
(53,887,1)
(456,745,1)
(553,904,1)
(256,174,1)
(611,107,1)
(907,317,1)
(127,1130,1)
(332,1194,1)
(88,1304,1)
(1124,828,1)
(273,320,1)
(1348,485,1)
(928,706,1)
(761,543,1)
(256,625,1)
(1380,1159,1)
(818,339,1)
(551,306,1)
(1298,392,1)
(890,689,1)
(760,387,1)
(127,336,1)
(1201,18,1)
(688,23,1)
(107,724,1)
(761,321,1)
(1263,758,1)
(367,1176,1)
(1188,1047,1)
(1309,817,1)
(1168,192,1)
(1218,267,1)
(551,375,1)
(1098,59,1)
(1316,387,1)
(180,1290,1)
(1035,236,1)
(1350,1244,1)
(1314,1019,1)
(139,1380,1)
(419,1218,1)
(553,1386,1)
(188,124,1)
(1147,1047,1)
(1377,36,1)
(1201,861,1)
(991,706,1)
(470,695,1)
(840,844,1)
(592,463,1)
(1123,1246,1)
(1263,1197,1)
(1168,861,1)
(254,55,1)
(1341,990,1)
(890,1016,1)
(1242,731,1)
(551,1080,1)
(1378,1105,1)
(212,66,1)
(481,1170,1)
(1351,79,1)
(1168,589,1)
(1112,1039,1)
(935,711,1)
(907,436,1)
(1309,249,1)
(212,320,1)
(1350,314,1)
(1052,1063,1)
(1207,817,1)
(713,830,1)
(1171,857,1)
(663,289,1)
(1177,534,1)
(521,1218,1)
(1350,1282,1)
(256,758,1)
(1201,955,1)
(761,760,1)
(739,1219,1)
(205,616,1)
(845,843,1)
(1014,1065,1)
(1286,1367,1)
(485,817,1)
(368,326,1)
(921,897,1)
(551,1206,1)
(1100,857,1)
(1154,742,1)
(1310,14,1)
(256,1154,1)
(1299,1189,1)
(1401,783,1)
(761,1256,1)
(864,796,1)
(14,379,1)
(526,807,1)
(1263,1117,1)
(115,1314,1)
(127,554,1)
(761,861,1)
(551,18,1)
(1168,1403,1)
(1296,1084,1)
(1263,1335,1)
(260,727,1)
(485,230,1)
(68,1069,1)
(256,317,1)
(732,1252,1)
(335,585,1)
(1201,701,1)
(723,910,1)
(280,1141,1)
(902,266,1)
(917,1056,1)
(158,422,1)
(56,1356,1)
(1201,758,1)
(384,352,1)
(127,1162,1)
(529,455,1)
(299,225,1)
(1350,436,1)
(580,387,1)
(64,593,1)
(1364,983,1)
(907,336,1)
(1054,989,1)
(431,668,1)
(137,218,1)
(1159,1286,1)
(387,396,1)
(428,904,1)
(233,387,1)
(539,668,1)
(761,1080,1)
(1263,306,1)
(1338,324,1)
(713,1015,1)
(923,554,1)
(551,356,1)
(127,1282,1)
(1290,880,1)
(179,830,1)
(864,964,1)
(1263,68,1)
(1079,1374,1)
(1263,861,1)
(146,50,1)
(864,409,1)
(186,275,1)
(761,1170,1)
(890,398,1)
(164,1269,1)
(1336,978,1)
(1095,221,1)
(567,182,1)
(1209,326,1)
(565,854,1)
(519,387,1)
(628,874,1)
(1168,409,1)
(1263,1154,1)
(1123,856,1)
(127,164,1)
(761,409,1)
(1247,585,1)
(1034,200,1)
(782,103,1)
(1372,326,1)
(1162,387,1)
(205,543,1)
(540,511,1)
(574,476,1)
(939,732,1)
(1264,1281,1)
(6,345,1)
(1192,1026,1)
(1190,1267,1)
(1095,817,1)
(217,1230,1)
(639,871,1)
(1050,387,1)
(1168,164,1)
(508,387,1)
(75,587,1)
(864,1032,1)
(1062,961,1)
(481,306,1)
(39,786,1)
(1215,1199,1)
(619,125,1)
(761,1341,1)
(768,742,1)
(182,130,1)
(530,1267,1)
(342,271,1)
(1231,562,1)
(919,787,1)
(188,387,1)
(1361,850,1)
(864,554,1)
(643,817,1)
(127,514,1)
(303,494,1)
(1350,514,1)
(152,644,1)
(1201,1060,1)
(1341,387,1)
(1089,817,1)
(1350,68,1)
(481,820,1)
(90,469,1)
(761,473,1)
(1240,10,1)
(1117,546,1)
(439,32,1)
(1168,1341,1)
(998,696,1)
(626,160,1)
(481,758,1)
(1085,708,1)
(336,1320,1)
(822,841,1)
(450,614,1)
(890,72,1)
(1099,1024,1)
(248,484,1)
(528,927,1)
(1157,817,1)
(1210,552,1)
(308,1296,1)
(864,1335,1)
(205,306,1)
(473,603,1)
(459,136,1)
(802,857,1)
(981,236,1)
(1267,620,1)
(343,1111,1)
(761,663,1)
(807,160,1)
(180,1135,1)
(479,447,1)
(907,1341,1)
(1266,1334,1)
(284,115,1)
(127,306,1)
(205,964,1)
(127,314,1)
(552,750,1)
(666,796,1)
(430,119,1)
(220,857,1)
(1188,781,1)
(270,1218,1)
(288,242,1)
(1045,270,1)
(1366,1279,1)
(512,401,1)
(957,20,1)
(1140,1165,1)
(109,234,1)
(621,1253,1)
(1131,387,1)
(759,177,1)
(864,276,1)
(1112,320,1)
(1201,314,1)
(205,554,1)
(872,490,1)
(157,220,1)
(1013,674,1)
(837,428,1)
(1217,434,1)
(1228,598,1)
(441,387,1)
(551,352,1)
(991,387,1)
(813,934,1)
(23,741,1)
(370,1032,1)
(551,491,1)
(1325,362,1)
(118,350,1)
(735,1401,1)
(551,436,1)
(917,1207,1)
(120,539,1)
(762,1071,1)
(1263,192,1)
(1168,1244,1)
(1402,670,1)
(485,585,1)
(177,387,1)
(1112,66,1)
(1130,783,1)
(32,600,1)
(1350,796,1)
(907,861,1)
(888,1019,1)
(1199,363,1)
(205,416,1)
(75,593,1)
(867,857,1)
(175,899,1)
(1056,1047,1)
(127,964,1)
(752,323,1)
(1101,387,1)
(1109,339,1)
(607,753,1)
(1168,955,1)
(127,1367,1)
(757,433,1)
(394,309,1)
(1393,1068,1)
(1103,872,1)
(265,1344,1)
(554,687,1)
(709,837,1)
(358,1294,1)
(205,317,1)
(1403,1364,1)
(397,895,1)
(79,725,1)
(879,387,1)
(899,830,1)
(551,597,1)
(325,304,1)
(551,942,1)
(101,1131,1)
(1048,387,1)
(362,1267,1)
(127,409,1)
(742,877,1)
(547,672,1)
(522,1218,1)
(1270,181,1)
(1128,118,1)
(874,360,1)
(256,1197,1)
(428,387,1)
(551,1054,1)
(1253,544,1)
(115,180,1)
(1123,715,1)
(568,675,1)
(385,631,1)
(256,1117,1)
(232,387,1)
(782,706,1)
(787,1108,1)
(408,1208,1)
(428,186,1)
(1191,879,1)
(637,7,1)
(359,1206,1)
(205,336,1)
(328,1342,1)
(1168,688,1)
(569,740,1)
(97,826,1)
(1206,510,1)
(1160,1093,1)
(156,464,1)
(1201,473,1)
(1181,1218,1)
(786,803,1)
(1239,1134,1)
(974,579,1)
(890,833,1)
(458,1158,1)
(205,1117,1)
(337,857,1)
(548,1260,1)
(760,728,1)
(738,60,1)
(1003,480,1)
(663,742,1)
(1257,290,1)
(256,336,1)
(761,554,1)
(616,491,1)
(380,792,1)
(205,688,1)
(655,408,1)
(892,973,1)
(854,737,1)
(181,1301,1)
(559,988,1)
(1349,387,1)
(94,29,1)
(392,63,1)
(1201,796,1)
(304,495,1)
(1340,1057,1)
(1205,822,1)
(879,1180,1)
(89,365,1)
(372,708,1)
(179,481,1)
(481,164,1)
(1123,610,1)
(881,857,1)
(256,1080,1)
(1244,1262,1)
(1222,782,1)
(1242,421,1)
(1350,964,1)
(1040,160,1)
(962,1299,1)
(740,91,1)
(761,314,1)
(650,400,1)
(1024,817,1)
(816,684,1)
(156,1019,1)
(329,894,1)
(1201,174,1)
(907,1062,1)
(988,369,1)
(890,1306,1)
(761,336,1)
(1382,840,1)
(1148,847,1)
(561,650,1)
(334,1128,1)
(816,870,1)
(127,543,1)
(98,839,1)
(65,553,1)
(355,187,1)
(686,89,1)
(1202,651,1)
(1396,938,1)
(82,599,1)
(1350,409,1)
(1212,1330,1)
(842,412,1)
(205,1256,1)
(173,760,1)
(1086,817,1)
(273,678,1)
(954,1017,1)
(242,1245,1)
(426,808,1)
(1000,320,1)
(203,500,1)
(970,742,1)
(751,1358,1)
(127,174,1)
(551,693,1)
(972,626,1)
(729,608,1)
(834,176,1)
(44,1180,1)
(553,1344,1)
(469,80,1)
(420,774,1)
(205,1169,1)
(885,1384,1)
(433,287,1)
(263,949,1)
(705,387,1)
(921,594,1)
(1263,597,1)
(153,481,1)
(449,1056,1)
(1211,184,1)
(1350,1367,1)
(782,387,1)
(1199,582,1)
(481,942,1)
(761,306,1)
(633,998,1)
(551,378,1)
(1294,817,1)
(379,640,1)
(1246,1397,1)
(1321,1374,1)
(1350,1154,1)
(1265,366,1)
(469,1218,1)
(1017,952,1)
(924,1398,1)
(174,324,1)
(1350,906,1)
(568,15,1)
(598,1218,1)
(1249,1336,1)
(570,1365,1)
(251,1074,1)
(864,68,1)
(208,1223,1)
(225,1394,1)
(97,973,1)
(1359,1275,1)
(991,205,1)
(1238,655,1)
(1168,174,1)
(1263,411,1)
(1274,996,1)
(962,1053,1)
(966,58,1)
(463,921,1)
(761,68,1)
(166,1264,1)
(143,411,1)
(975,86,1)
(205,589,1)
(313,61,1)
(864,1060,1)
(589,139,1)
(723,452,1)
(557,899,1)
(890,846,1)
(127,1335,1)
(379,768,1)
(1123,26,1)
(285,765,1)
(205,906,1)
(754,857,1)
(713,387,1)
(16,1371,1)
(205,1080,1)
(1226,387,1)
(761,1130,1)
(991,339,1)
(566,585,1)
(942,573,1)
(169,1070,1)
(551,519,1)
(656,866,1)
(767,1151,1)
(1130,623,1)
(362,847,1)
(761,1154,1)
(1243,927,1)
(907,589,1)
(1101,163,1)
(1197,742,1)
(906,742,1)
(127,1256,1)
(524,19,1)
(1350,543,1)
(451,205,1)
(352,387,1)
(1046,103,1)
(890,162,1)
(205,949,1)
(1350,192,1)
(460,172,1)
(481,1169,1)
(1183,1249,1)
(1385,1193,1)
(328,525,1)
(1201,1341,1)
(10,326,1)
(633,408,1)
(864,336,1)
(833,127,1)
(1031,857,1)
(381,1374,1)
(864,906,1)
(364,539,1)
(237,1252,1)
(1201,589,1)
(1263,589,1)
(697,579,1)
(510,42,1)
(1227,172,1)
(1208,518,1)
(551,51,1)
(761,1282,1)
(1055,1048,1)
(864,18,1)
(864,192,1)
(253,836,1)
(971,1092,1)
(539,1265,1)
(511,584,1)
(111,438,1)
(39,1192,1)
(1194,378,1)
(464,661,1)
(1108,1132,1)
(964,1225,1)
(123,435,1)
(368,751,1)
(64,1266,1)
(1401,570,1)
(481,317,1)
(1373,235,1)
(525,70,1)
(761,164,1)
(1011,466,1)
(886,965,1)
(531,407,1)
(1304,1177,1)
(307,1316,1)
(907,314,1)
(241,397,1)
(22,1031,1)
(256,436,1)
(608,155,1)
(137,1187,1)
(256,796,1)
(937,980,1)
(421,1402,1)
(1123,1081,1)
(231,11,1)
(864,688,1)
(551,964,1)
(380,1218,1)
(1331,857,1)
(1263,906,1)
(890,780,1)
(353,288,1)
(850,1270,1)
(649,387,1)
(72,256,1)
(481,554,1)
(547,387,1)
(3,1191,1)
(1297,993,1)
(1350,473,1)
(307,1145,1)
(481,473,1)
(955,49,1)
(868,845,1)
(205,473,1)
(1166,992,1)
(529,1157,1)
(1263,970,1)
(81,783,1)
(1060,1289,1)
(1107,12,1)
(492,770,1)
(550,294,1)
(864,1002,1)
(862,376,1)
(308,1084,1)
(205,970,1)
(494,70,1)
(907,926,1)
(879,1011,1)
(301,816,1)
(864,1080,1)
(700,19,1)
(890,712,1)
(256,1169,1)
(1268,1404,1)
(127,1244,1)
(1034,830,1)
(927,966,1)
(842,35,1)
(744,1353,1)
(654,383,1)
(864,1117,1)
(1133,1317,1)
(423,307,1)
(1059,600,1)
(1221,1112,1)
(775,202,1)
(481,1341,1)
(1134,921,1)
(60,857,1)
(551,1169,1)
(1116,671,1)
(1113,1218,1)
(755,227,1)
(256,701,1)
(860,952,1)
(247,263,1)
(147,857,1)
(535,1356,1)
(282,834,1)
(117,382,1)
(932,213,1)
(256,1116,1)
(1082,941,1)
(1060,387,1)
(200,972,1)
(701,320,1)
(154,1201,1)
(127,906,1)
(1201,436,1)
(153,387,1)
(1263,760,1)
(254,905,1)
(785,995,1)
(1269,778,1)
(425,282,1)
(127,663,1)
(452,116,1)
(205,164,1)
(864,580,1)
(659,1047,1)
(1168,1256,1)
(581,31,1)
(1027,1247,1)
(1263,336,1)
(481,409,1)
(205,927,1)
(127,760,1)
(907,174,1)
(368,387,1)
(601,1218,1)
(1143,511,1)
(329,632,1)
(1076,986,1)
(955,742,1)
(1109,205,1)
(509,41,1)
(103,1362,1)
(330,578,1)
(481,970,1)
(1398,279,1)
(1168,411,1)
(958,446,1)
(403,71,1)
(252,566,1)
(327,1322,1)
(165,1305,1)
(961,243,1)
(352,673,1)
(684,1374,1)
(698,420,1)
(311,701,1)
(477,81,1)
(821,720,1)
(552,387,1)
(385,1299,1)
(926,970,1)
(1249,1076,1)
(232,1290,1)
(864,420,1)
(1014,387,1)
(1201,1080,1)
(1170,783,1)
(1168,949,1)
(1206,320,1)
(1337,387,1)
(205,314,1)
(1251,1314,1)
(429,1224,1)
(35,412,1)
(481,543,1)
(127,68,1)
(1263,416,1)
(300,834,1)
(907,1117,1)
(1153,568,1)
(551,321,1)
(1350,321,1)
(907,906,1)
(476,385,1)
(973,177,1)
(551,688,1)
(1372,542,1)
(1201,336,1)
(1201,1403,1)
(1117,320,1)
(543,387,1)
(551,1002,1)
(1168,68,1)
(1010,503,1)
(256,688,1)
(1377,1107,1)
(1262,1103,1)
(1071,1321,1)
(857,805,1)
(682,1101,1)
(1363,114,1)
(1198,165,1)
(126,786,1)
(579,190,1)
(551,701,1)
(551,1170,1)
(713,767,1)
(907,1244,1)
(141,1015,1)
(659,817,1)
(1015,1055,1)
(288,640,1)
(661,192,1)
(31,857,1)
(314,387,1)
(1263,1256,1)
(907,1116,1)
(275,575,1)
(978,602,1)
(726,699,1)
(771,571,1)
(1168,942,1)
(293,912,1)
(481,1032,1)
(400,387,1)
(602,387,1)
(481,663,1)
(205,1130,1)
(777,884,1)
(779,1403,1)
(205,796,1)
(1123,197,1)
(256,760,1)
(93,593,1)
(420,718,1)
(145,348,1)
(991,325,1)
(256,906,1)
(864,589,1)
(1064,387,1)
(864,977,1)
(481,589,1)
(642,1218,1)
(1072,317,1)
(1236,1172,1)
(185,181,1)
(774,742,1)
(1263,796,1)
(184,238,1)
(168,746,1)
(1288,419,1)
(369,436,1)
(319,504,1)
(1012,920,1)
(643,54,1)
(864,375,1)
(1263,955,1)
(551,1282,1)
(790,342,1)
(223,239,1)
(323,1170,1)
(1088,1291,1)
(890,530,1)
(551,980,1)
(1106,575,1)
(205,1162,1)
(551,473,1)
(347,1213,1)
(1263,436,1)
(121,384,1)
(623,729,1)
(761,964,1)
(1225,985,1)
(669,153,1)
(841,1325,1)
(434,628,1)
(161,939,1)
(1316,178,1)
(414,1087,1)
(481,1197,1)
(551,1060,1)
(1168,336,1)
(1263,688,1)
(1189,543,1)
(1168,1032,1)
(310,819,1)
(727,424,1)
(1224,37,1)
(633,885,1)
(1049,277,1)
(1373,1218,1)
(1108,320,1)
(1282,742,1)
(1168,18,1)
(1204,373,1)
(393,937,1)
(447,1405,1)
(1226,721,1)
(839,892,1)
(1209,1138,1)
(127,1116,1)
(551,760,1)
(481,1282,1)
(205,1197,1)
(693,166,1)
(768,404,1)
(1026,320,1)
(551,420,1)
(205,955,1)
(890,707,1)
(907,955,1)
(587,560,1)
(1345,704,1)
(864,955,1)
(350,496,1)
(1319,21,1)
(551,68,1)
(992,857,1)
(205,174,1)
(882,9,1)
(1350,701,1)
(1391,1316,1)
(309,308,1)
(734,215,1)
(864,1054,1)
(1123,505,1)
(245,1182,1)
(895,1127,1)
(605,788,1)
(1308,816,1)
(1034,767,1)
(765,817,1)
(672,797,1)
(551,554,1)
(1201,192,1)
(1216,386,1)
(1356,387,1)
(1000,1132,1)
(551,811,1)
(574,302,1)
(209,1337,1)
(1028,1171,1)
(712,1168,1)
(1200,285,1)
(100,296,1)
(987,507,1)
(29,356,1)
(551,514,1)
(1238,658,1)
(1124,1218,1)
(1170,646,1)
(1349,744,1)
(538,387,1)
(170,1265,1)
(551,1256,1)
(1162,762,1)
(761,174,1)
(445,1120,1)
(890,110,1)
(551,416,1)
(1209,387,1)
(591,1108,1)
(383,274,1)
(1136,1086,1)
(889,677,1)
(385,387,1)
(324,255,1)
(1342,525,1)
(785,783,1)
(223,1090,1)
(864,1170,1)
(1350,949,1)
(1197,1058,1)
(1224,583,1)
(221,922,1)
(481,693,1)
(57,829,1)
(524,1278,1)
(614,1337,1)
(907,1367,1)
(907,192,1)
(1105,169,1)
(156,387,1)
(213,886,1)
(481,688,1)
(119,528,1)
(864,321,1)
(761,1162,1)
(417,642,1)
(473,387,1)
(1034,387,1)
(899,911,1)
(409,1166,1)
(289,201,1)
(952,280,1)
(889,900,1)
(1317,1160,1)
(1301,1231,1)
(878,1305,1)
(900,677,1)
(1190,847,1)
(1201,906,1)
(451,339,1)
(1157,1312,1)
(1219,148,1)
(127,597,1)
(1263,1403,1)
(824,974,1)
(715,873,1)
(736,758,1)
(496,593,1)
(1201,949,1)
(747,251,1)
(460,1227,1)
(716,1100,1)
(514,387,1)
(5,951,1)
(952,799,1)
(809,841,1)
(1119,1265,1)
(924,305,1)
(1316,548,1)
(486,607,1)
(670,492,1)
(818,706,1)
(907,416,1)
(1291,767,1)
(1204,742,1)
(127,942,1)
(84,335,1)
(648,1138,1)
(1123,1035,1)
(1374,1140,1)
(490,1054,1)
(56,535,1)
(562,217,1)
(1122,590,1)
(928,387,1)
(481,906,1)
(907,1403,1)
(1201,1130,1)
(256,1256,1)
(713,388,1)
(110,1102,1)
(894,387,1)
(1125,817,1)
(1263,174,1)
(630,621,1)
(1168,796,1)
(1396,1311,1)
(732,88,1)
(363,1045,1)
(256,1060,1)
(936,1239,1)
(127,1197,1)
(618,353,1)
(420,640,1)
(1032,387,1)
(114,1072,1)
(552,393,1)
(1109,706,1)
(476,818,1)
(864,949,1)
(205,321,1)
(1057,1011,1)
(640,876,1)
(996,635,1)
(305,713,1)
(1279,1156,1)
(977,320,1)
(673,667,1)
(985,1333,1)
(980,975,1)
(1250,660,1)
(37,299,1)
(249,1270,1)
(280,1138,1)
(705,1173,1)
(1372,387,1)
(481,336,1)
(907,1060,1)
(1327,1310,1)
(1356,326,1)
(134,526,1)
(723,524,1)
(1057,1180,1)
(1201,1170,1)
(165,878,1)
(1350,164,1)
(811,1220,1)
(1219,648,1)
(125,1336,1)
(497,627,1)
(127,1341,1)
(551,1014,1)
(864,1048,1)
(826,98,1)
(112,483,1)
(1201,942,1)
(514,456,1)
(646,1077,1)
(1050,929,1)
(205,1341,1)
(256,1244,1)
(551,273,1)
(890,154,1)
(1253,1280,1)
(864,1130,1)
(1087,867,1)
(1352,950,1)
(551,1116,1)
(192,1088,1)
(448,886,1)
(1367,783,1)
(80,314,1)
(845,1050,1)
(580,831,1)
(907,68,1)
(192,387,1)
(907,1032,1)
(282,300,1)
(645,306,1)
(622,93,1)
(873,216,1)
(863,73,1)
(1271,486,1)
(964,320,1)
(215,400,1)
(907,411,1)
(688,387,1)
(758,343,1)
(1201,1244,1)
(549,769,1)
(1362,111,1)
(1154,851,1)
(644,977,1)
(951,101,1)
(205,597,1)
(1017,137,1)
(126,1001,1)
(820,567,1)
(907,409,1)
(611,817,1)
(133,355,1)
(1201,164,1)
(375,1285,1)
(1168,663,1)
(1315,51,1)
(831,1106,1)
(538,756,1)
(684,817,1)
(411,320,1)
(336,783,1)
(1153,112,1)
(1351,75,1)
(26,1004,1)
(1343,963,1)
(1168,314,1)
(317,258,1)
(361,1021,1)
(491,387,1)
(1263,514,1)
(1339,1381,1)
(1263,1080,1)
(1306,112,1)
(256,1130,1)
(427,857,1)
(335,1139,1)
(63,477,1)
(256,416,1)
(1350,589,1)
(388,1355,1)
(1263,473,1)
(1198,747,1)
(376,1378,1)
(1263,1244,1)
(1168,321,1)
(864,495,1)
(551,409,1)
(1153,19,1)
(472,1209,1)
(283,612,1)
(432,552,1)
(1349,904,1)
(98,387,1)
(1263,554,1)
(39,1026,1)
(904,1288,1)
(1184,70,1)
(274,1116,1)
(1057,387,1)
(468,976,1)
(1089,935,1)
(655,368,1)
(528,1095,1)
(481,192,1)
(954,97,1)
(1063,630,1)
(761,18,1)
(1271,783,1)
(1350,663,1)
(583,685,1)
(1156,260,1)
(864,174,1)
(761,796,1)
(1168,1080,1)
(210,1354,1)
(127,411,1)
(818,205,1)
(1201,1197,1)
(1086,1033,1)
(407,940,1)
(723,167,1)
(594,1209,1)
(205,411,1)
(38,702,1)
(890,442,1)
(986,864,1)
(907,701,1)
(1180,358,1)
(256,68,1)
(890,431,1)
(855,474,1)
(256,589,1)
(104,1218,1)
(1168,1116,1)
(136,824,1)
(897,786,1)
(127,955,1)
(1384,1161,1)
(864,970,1)
(919,1108,1)
(671,74,1)
(1386,475,1)
(55,559,1)
(885,387,1)
(761,1062,1)
(864,1206,1)
(1358,375,1)
(818,387,1)
(256,1403,1)
(864,306,1)
(1168,1062,1)
(1263,1367,1)
(1168,436,1)
(15,675,1)
(216,951,1)
(1272,875,1)
(205,409,1)
(1113,497,1)
(783,987,1)
(225,653,1)
(262,1132,1)
(377,1374,1)
(150,359,1)
(1263,663,1)
(1314,464,1)
(1070,1383,1)
(51,117,1)
(861,387,1)
(1350,861,1)
(258,1324,1)
(1001,786,1)
(627,895,1)
(1285,869,1)
(551,1154,1)
(462,705,1)
(553,134,1)
(1256,347,1)
(907,796,1)
(866,1115,1)
(761,1169,1)
(610,1052,1)
(374,1114,1)
(907,597,1)
(922,806,1)
(1350,1197,1)
(907,514,1)
(696,700,1)
(1148,1267,1)
(1377,294,1)
(768,6,1)
(551,174,1)
(422,364,1)
(187,501,1)
(205,1060,1)
(205,663,1)
(378,1387,1)
(761,514,1)
(1108,152,1)
(439,1047,1)
(1275,1374,1)
(402,1244,1)
(1168,1154,1)
(481,964,1)
(109,1272,1)
(74,727,1)
(788,98,1)
(659,468,1)
(1350,1162,1)
(506,473,1)
(600,917,1)
(355,720,1)
(1127,931,1)
(240,1131,1)
(910,167,1)
(481,760,1)
(205,701,1)
(1293,857,1)
(196,17,1)
(127,18,1)
(438,1169,1)
(256,949,1)
(566,247,1)
(1214,817,1)
(560,79,1)
(481,796,1)
(1036,709,1)
(761,773,1)
(1026,66,1)
(625,409,1)
(864,1197,1)
(1114,1348,1)
(390,928,1)
(913,328,1)
(1201,1335,1)
(551,758,1)
(119,338,1)
(1256,387,1)
(658,655,1)
(979,508,1)
(1350,1116,1)
(899,767,1)
(1273,1293,1)
(377,1079,1)
(1201,68,1)
(127,949,1)
(761,701,1)
(1350,1130,1)
(864,543,1)
(807,487,1)
(1149,92,1)
(1123,253,1)
(1084,70,1)
(701,85,1)
(1168,1054,1)
(602,1290,1)
(1004,120,1)
(737,997,1)
(910,686,1)
(1128,157,1)
(677,958,1)
(1226,731,1)
(179,767,1)
(864,597,1)
(160,183,1)
(1230,1099,1)
(481,1154,1)
(27,492,1)
(566,817,1)
(864,436,1)
(710,916,1)
(1350,336,1)
(551,1197,1)
(455,1257,1)
(1263,1054,1)
(230,1038,1)
(708,1349,1)
(882,583,1)
(864,1282,1)
(400,731,1)
(647,656,1)
(481,491,1)
(588,859,1)
(864,693,1)
(907,473,1)
(1164,1263,1)
(1249,1267,1)
(648,330,1)
(1201,1116,1)
(1333,143,1)
(890,654,1)
(761,597,1)
(197,527,1)
(864,758,1)
(127,1080,1)
(1381,167,1)
(551,1367,1)
(32,1302,1)
(284,1190,1)
(556,417,1)
(1365,1385,1)
(674,576,1)
(750,284,1)
(21,82,1)
(677,387,1)
(280,387,1)
(373,131,1)
(177,326,1)
(558,1375,1)
(41,1176,1)
(684,1232,1)
(697,502,1)
(504,723,1)
(551,411,1)
(454,881,1)
(205,1062,1)
(1350,1080,1)
(1168,1169,1)
(1201,514,1)
(1280,791,1)
(396,278,1)
(864,519,1)
(1404,782,1)
(1209,327,1)
(1062,742,1)
(1383,458,1)
(733,488,1)
(761,942,1)
(205,528,1)
(761,1117,1)
(1350,1169,1)
(131,48,1)
(20,865,1)
(1123,245,1)
(761,1116,1)
(1080,22,1)
(155,585,1)
(907,1169,1)
(1368,449,1)
(1201,1367,1)
(348,1398,1)
(782,205,1)
(1201,306,1)
(921,328,1)
(218,272,1)
(256,1054,1)
(1314,387,1)
(1350,554,1)
(205,436,1)
(1125,558,1)
(205,1403,1)
(213,512,1)
(256,18,1)
(1201,411,1)
(756,297,1)
(1168,543,1)
(1069,24,1)
(890,122,1)
(1314,94,1)
(1328,742,1)
(1394,1039,1)
(737,387,1)
(864,491,1)
(593,957,1)
(575,1148,1)
(256,663,1)
(339,1332,1)
(357,176,1)
(492,1299,1)
(401,863,1)
(127,796,1)
(481,597,1)
(481,18,1)
(965,1117,1)
(739,649,1)
(483,337,1)
(1214,604,1)
(730,1401,1)
(528,528,1)
(1065,1005,1)
(1263,543,1)
(1305,440,1)
(679,21,1)
(73,583,1)
(1201,1282,1)
(669,650,1)
(1263,1169,1)
(265,904,1)
(1057,121,1)
(1403,742,1)
(997,87,1)
(778,1136,1)
(17,1080,1)
(525,320,1)
(916,476,1)
(798,321,1)
(805,862,1)
(1169,902,1)
(901,427,1)
(1350,1060,1)
(576,441,1)
(124,53,1)
(1390,1217,1)
(1047,775,1)
(551,977,1)
(651,326,1)
(544,705,1)
(962,1290,1)
(1312,1118,1)
(127,317,1)
(864,1154,1)
(301,870,1)
(919,591,1)
(513,666,1)
(551,336,1)
(1033,743,1)
(654,1366,1)
(1132,1195,1)
(1327,742,1)
(127,321,1)
(1064,738,1)
(864,1341,1)
(153,30,1)
(675,1125,1)
(968,883,1)
(803,523,1)
(378,320,1)
(131,150,1)
(864,1062,1)
(1213,1344,1)
(101,240,1)
(98,1138,1)
(1150,387,1)
(238,113,1)
(1123,291,1)
(1263,321,1)
(481,514,1)
(24,998,1)
(962,631,1)
(1123,1097,1)
(205,1032,1)
(1176,38,1)
(1305,547,1)
(907,949,1)
(735,1018,1)
(95,1321,1)
(613,1259,1)
(1201,416,1)
(977,43,1)
(1023,960,1)
(1096,248,1)
(864,352,1)
(501,821,1)
(939,1304,1)
(187,756,1)
(722,904,1)
(551,1244,1)
(864,861,1)
(967,629,1)
(256,861,1)
(1350,174,1)
(66,394,1)
(71,1259,1)
(256,314,1)
(1322,303,1)
(1242,160,1)
(987,387,1)
(544,462,1)
(907,164,1)
(890,453,1)
(1077,252,1)
(1275,817,1)
(193,1104,1)
(78,185,1)
(880,1181,1)
(527,459,1)
(662,1377,1)
(732,1218,1)
(761,416,1)
(411,313,1)
(176,982,1)
(907,663,1)
(864,663,1)
(1311,65,1)
(127,589,1)
(772,1343,1)
(1168,514,1)
(703,857,1)
(1318,800,1)
(125,387,1)
(597,465,1)
(474,97,1)
(907,1130,1)
(1168,306,1)
(1334,273,1)
(177,823,1)
(481,1130,1)
(1263,1062,1)
(931,842,1)
(543,4,1)
(1019,1222,1)
(761,906,1)
(2,847,1)
(796,1369,1)
(481,436,1)
(693,387,1)
(1223,238,1)
(155,752,1)
(890,1046,1)
(295,858,1)
(302,809,1)
(1123,1326,1)
(599,402,1)
(907,1162,1)
(25,34,1)
(256,1170,1)
(864,942,1)
(157,1218,1)
(1335,292,1)
(127,1170,1)
(256,321,1)
(704,580,1)
(159,228,1)
(256,473,1)
(890,1174,1)
(1190,588,1)
(467,1089,1)
(1370,2,1)
(719,282,1)
(127,1054,1)
(481,949,1)
(360,1372,1)
(1067,156,1)
(1201,964,1)
(1051,514,1)
(969,379,1)
(1168,1117,1)
(12,628,1)
(276,640,1)
(865,57,1)
(127,688,1)
(607,585,1)
(753,735,1)
(811,939,1)
(1399,906,1)
(65,979,1)
(828,334,1)
(68,387,1)
(907,758,1)
(586,579,1)
(761,758,1)
(279,1242,1)
(890,647,1)
(1075,329,1)
(758,387,1)
(306,320,1)
(1350,1117,1)
(537,233,1)
(1168,701,1)
(232,790,1)
(1084,320,1)
(1056,123,1)
(907,18,1)
(578,584,1)
(1201,1062,1)
(522,506,1)
(686,1047,1)
(551,1162,1)
(743,336,1)
(181,817,2)
(1350,861,2)
(824,212,2)
(551,1341,2)
(723,524,2)
(1171,857,2)
(481,473,2)
(971,1092,2)
(740,91,2)
(1290,880,2)
(553,387,2)
(212,1039,2)
(1168,942,2)
(1080,857,2)
(1144,1259,2)
(737,387,2)
(602,387,2)
(134,837,2)
(987,771,2)
(123,686,2)
(1188,1120,2)
(816,816,2)
(1168,663,2)
(811,136,2)
(481,164,2)
(156,387,2)
(1250,897,2)
(1405,857,2)
(684,1361,2)
(345,967,2)
(205,1170,2)
(551,282,2)
(757,996,2)
(713,387,2)
(1180,846,2)
(493,857,2)
(514,996,2)
(1259,1259,2)
(137,97,2)
(414,857,2)
(318,857,2)
(160,236,2)
(1382,136,2)
(383,1215,2)
(1027,996,2)
(152,1381,2)
(851,857,2)
(271,476,2)
(1010,503,2)
(579,328,2)
(164,335,2)
(368,56,2)
(761,554,2)
(714,1321,2)
(1011,236,2)
(1168,906,2)
(907,18,2)
(459,136,2)
(777,1377,2)
(104,857,2)
(590,574,2)
(811,238,2)
(197,136,2)
(724,529,2)
(1069,236,2)
(1023,328,2)
(386,1351,2)
(864,409,2)
(1144,1172,2)
(1263,436,2)
(1168,192,2)
(494,136,2)
(529,455,2)
(1139,996,2)
(946,857,2)
(256,597,2)
(301,816,2)
(193,574,2)
(980,574,2)
(1263,1367,2)
(1354,175,2)
(528,1361,2)
(182,175,2)
(334,1128,2)
(481,192,2)
(1022,38,2)
(732,1252,2)
(481,436,2)
(628,450,2)
(267,283,2)
(436,895,2)
(551,977,2)
(1050,387,2)
(940,119,2)
(130,175,2)
(1350,1054,2)
(1350,18,2)
(1150,387,2)
(1198,747,2)
(78,562,2)
(1366,727,2)
(172,594,2)
(1261,574,2)
(818,205,2)
(256,1117,2)
(1350,758,2)
(408,1208,2)
(613,1172,2)
(153,481,2)
(467,1089,2)
(215,841,2)
(1249,387,2)
(907,861,2)
(1398,1242,2)
(361,1183,2)
(761,1130,2)
(551,356,2)
(306,320,2)
(451,846,2)
(1120,659,2)
(1201,589,2)
(1098,271,2)
(371,238,2)
(531,1281,2)
(1351,574,2)
(205,1154,2)
(1117,320,2)
(34,857,2)
(1201,949,2)
(1168,1062,2)
(761,955,2)
(864,248,2)
(1168,1080,2)
(98,387,2)
(435,686,2)
(939,511,2)
(205,436,2)
(481,758,2)
(256,1130,2)
(158,387,2)
(673,837,2)
(1000,320,2)
(455,817,2)
(432,574,2)
(205,174,2)
(266,857,2)
(643,817,2)
(1201,554,2)
(1147,686,2)
(1298,387,2)
(1161,655,2)
(907,164,2)
(973,177,2)
(506,857,2)
(1055,175,2)
(127,964,2)
(1134,897,2)
(1070,1070,2)
(127,164,2)
(1095,1374,2)
(1404,846,2)
(127,1080,2)
(977,320,2)
(127,1154,2)
(716,857,2)
(125,387,2)
(1263,416,2)
(254,857,2)
(205,1341,2)
(394,309,2)
(761,1116,2)
(1297,996,2)
(314,857,2)
(1201,1054,2)
(469,857,2)
(600,917,2)
(864,317,2)
(864,1162,2)
(357,951,2)
(1333,996,2)
(1263,68,2)
(1370,236,2)
(87,630,2)
(450,614,2)
(864,1170,2)
(633,408,2)
(808,857,2)
(205,589,2)
(944,874,2)
(761,1080,2)
(1361,1321,2)
(529,1157,2)
(791,1176,2)
(1253,544,2)
(1314,464,2)
(508,305,2)
(732,1304,2)
(1294,846,2)
(607,585,2)
(330,897,2)
(183,236,2)
(205,528,2)
(1173,1176,2)
(256,436,2)
(1353,1183,2)
(55,559,2)
(1222,846,2)
(1169,857,2)
(597,1064,2)
(119,927,2)
(670,492,2)
(1120,529,2)
(481,306,2)
(907,1032,2)
(1350,1197,2)
(864,192,2)
(205,1117,2)
(525,886,2)
(1357,1198,2)
(192,236,2)
(457,1124,2)
(458,1218,2)
(574,302,2)
(1263,1080,2)
(678,1351,2)
(1057,387,2)
(1201,416,2)
(1048,387,2)
(718,379,2)
(962,387,2)
(543,387,2)
(1123,996,2)
(722,387,2)
(1338,857,2)
(646,335,2)
(713,830,2)
(407,1281,2)
(1201,1282,2)
(153,387,2)
(864,906,2)
(522,857,2)
(205,1197,2)
(973,282,2)
(762,1321,2)
(256,321,2)
(1036,846,2)
(567,175,2)
(270,857,2)
(385,1299,2)
(354,379,2)
(1201,1403,2)
(621,1176,2)
(687,857,2)
(256,1170,2)
(551,473,2)
(1304,1183,2)
(629,857,2)
(480,329,2)
(1304,1198,2)
(1350,796,2)
(256,314,2)
(684,817,2)
(196,1218,2)
(481,906,2)
(1298,996,2)
(1309,562,2)
(483,857,2)
(551,1048,2)
(205,1080,2)
(303,697,2)
(205,411,2)
(384,837,2)
(712,857,2)
(907,701,2)
(305,713,2)
(916,476,2)
(248,846,2)
(481,693,2)
(481,1256,2)
(156,464,2)
(335,996,2)
(35,857,2)
(864,416,2)
(285,1188,2)
(938,574,2)
(205,663,2)
(1318,236,2)
(895,857,2)
(205,1054,2)
(952,97,2)
(816,870,2)
(703,857,2)
(205,473,2)
(355,857,2)
(378,1351,2)
(687,387,2)
(864,597,2)
(553,134,2)
(1350,321,2)
(94,574,2)
(613,1351,2)
(675,1125,2)
(82,996,2)
(1014,574,2)
(192,387,2)
(155,335,2)
(512,1259,2)
(663,996,2)
(1231,562,2)
(602,631,2)
(864,519,2)
(1131,238,2)
(1263,1062,2)
(1272,846,2)
(1154,742,2)
(1290,857,2)
(485,817,2)
(303,494,2)
(908,857,2)
(864,760,2)
(866,1218,2)
(109,234,2)
(860,97,2)
(1176,38,2)
(952,799,2)
(1123,630,2)
(837,846,2)
(1356,846,2)
(551,1206,2)
(1118,917,2)
(481,1116,2)
(864,436,2)
(1254,1321,2)
(573,857,2)
(248,387,2)
(907,1130,2)
(1135,574,2)
(439,686,2)
(1201,164,2)
(551,238,2)
(49,996,2)
(175,846,2)
(1304,238,2)
(1169,387,2)
(740,574,2)
(1002,387,2)
(1225,996,2)
(1177,1123,2)
(1168,1116,2)
(481,1117,2)
(432,1396,2)
(1282,857,2)
(223,846,2)
(874,1172,2)
(576,38,2)
(1205,841,2)
(1170,335,2)
(1032,857,2)
(1153,112,2)
(122,857,2)
(907,964,2)
(1201,1060,2)
(481,964,2)
(288,379,2)
(6,345,2)
(773,857,2)
(888,846,2)
(110,857,2)
(562,1099,2)
(1242,387,2)
(64,1351,2)
(65,553,2)
(481,1060,2)
(1226,305,2)
(885,387,2)
(7,846,2)
(1350,164,2)
(731,857,2)
(864,688,2)
(1376,1146,2)
(127,1117,2)
(1386,574,2)
(494,886,2)
(735,1401,2)
(1190,387,2)
(409,857,2)
(1314,387,2)
(991,339,2)
(907,949,2)
(1208,518,2)
(1092,722,2)
(642,1218,2)
(63,996,2)
(906,742,2)
(822,841,2)
(911,846,2)
(141,846,2)
(551,758,2)
(1050,1176,2)
(332,1351,2)
(605,973,2)
(811,1172,2)
(907,192,2)
(170,668,2)
(81,335,2)
(516,1373,2)
(551,543,2)
(1131,387,2)
(454,857,2)
(481,175,2)
(1125,817,2)
(551,411,2)
(523,594,2)
(964,320,2)
(695,511,2)
(895,931,2)
(1325,271,2)
(924,846,2)
(1143,511,2)
(963,335,2)
(100,296,2)
(564,857,2)
(1190,574,2)
(826,538,2)
(55,895,2)
(1278,467,2)
(761,663,2)
(398,857,2)
(426,808,2)
(142,236,2)
(1019,846,2)
(417,846,2)
(1263,1117,2)
(967,1218,2)
(1192,897,2)
(127,554,2)
(717,846,2)
(737,630,2)
(767,236,2)
(625,857,2)
(259,857,2)
(1168,416,2)
(1263,18,2)
(1311,65,2)
(551,420,2)
(551,861,2)
(205,18,2)
(239,1000,2)
(979,574,2)
(620,601,2)
(214,1183,2)
(1349,1183,2)
(1350,514,2)
(1021,1183,2)
(1367,335,2)
(376,1378,2)
(1239,328,2)
(256,1403,2)
(648,1138,2)
(104,1218,2)
(845,1176,2)
(873,951,2)
(256,1162,2)
(481,68,2)
(907,760,2)
(907,589,2)
(1084,70,2)
(551,1377,2)
(1228,598,2)
(329,894,2)
(761,473,2)
(843,1176,2)
(1221,303,2)
(101,238,2)
(1017,97,2)
(360,1351,2)
(518,857,2)
(283,612,2)
(1247,996,2)
(353,379,2)
(373,846,2)
(864,580,2)
(682,996,2)
(551,701,2)
(177,326,2)
(1119,236,2)
(755,846,2)
(481,514,2)
(811,628,2)
(1360,1137,2)
(864,1154,2)
(551,589,2)
(231,1176,2)
(209,874,2)
(983,996,2)
(752,335,2)
(1181,1218,2)
(1071,1321,2)
(1304,574,2)
(127,409,2)
(615,1172,2)
(1100,857,2)
(302,271,2)
(256,949,2)
(1101,387,2)
(735,1018,2)
(1350,1130,2)
(401,1259,2)
(402,996,2)
(1214,236,2)
(876,846,2)
(1201,1341,2)
(48,919,2)
(362,1267,2)
(213,70,2)
(901,857,2)
(1168,964,2)
(551,225,2)
(841,1109,2)
(1304,630,2)
(176,387,2)
(39,1026,2)
(1168,514,2)
(991,706,2)
(185,562,2)
(1372,1351,2)
(1219,897,2)
(283,996,2)
(258,236,2)
(1256,387,2)
(604,236,2)
(797,747,2)
(419,857,2)
(400,305,2)
(1099,1321,2)
(1172,1351,2)
(1201,514,2)
(864,1002,2)
(1116,320,2)
(442,857,2)
(481,336,2)
(400,731,2)
(368,387,2)
(1201,1367,2)
(1125,1375,2)
(362,1336,2)
(648,326,2)
(316,857,2)
(864,473,2)
(1201,174,2)
(470,594,2)
(1201,1162,2)
(166,1281,2)
(516,857,2)
(205,597,2)
(761,174,2)
(1351,865,2)
(907,663,2)
(127,949,2)
(594,1209,2)
(542,1172,2)
(649,897,2)
(285,765,2)
(1104,229,2)
(802,857,2)
(477,996,2)
(864,949,2)
(137,218,2)
(551,174,2)
(462,1176,2)
(38,889,2)
(668,857,2)
(441,38,2)
(401,1172,2)
(134,526,2)
(1209,326,2)
(495,670,2)
(256,1032,2)
(481,1054,2)
(1314,574,2)
(1263,543,2)
(551,1204,2)
(551,1282,2)
(37,1259,2)
(971,708,2)
(256,1116,2)
(760,857,2)
(481,411,2)
(946,1218,2)
(970,857,2)
(907,1154,2)
(1201,1062,2)
(124,996,2)
(292,236,2)
(481,1130,2)
(218,387,2)
(894,846,2)
(1185,335,2)
(157,1218,2)
(726,1176,2)
(864,1080,2)
(481,1162,2)
(6,857,2)
(972,476,2)
(670,846,2)
(205,543,2)
(481,18,2)
(205,964,2)
(496,857,2)
(847,236,2)
(914,846,2)
(232,271,2)
(660,897,2)
(954,282,2)
(1035,236,2)
(400,160,2)
(650,841,2)
(864,314,2)
(127,1256,2)
(879,1180,2)
(1263,1170,2)
(798,236,2)
(551,693,2)
(59,271,2)
(551,1244,2)
(429,1259,2)
(1008,236,2)
(1373,857,2)
(118,857,2)
(1382,328,2)
(1160,36,2)
(548,1321,2)
(1209,387,2)
(551,68,2)
(428,1344,2)
(761,411,2)
(540,511,2)
(818,387,2)
(1065,574,2)
(551,491,2)
(382,109,2)
(15,1375,2)
(396,278,2)
(1219,648,2)
(1384,655,2)
(551,248,2)
(1086,585,2)
(1168,68,2)
(1381,167,2)
(700,236,2)
(601,857,2)
(5,951,2)
(265,1344,2)
(492,846,2)
(481,409,2)
(693,387,2)
(864,663,2)
(591,1108,2)
(423,1321,2)
(412,1400,2)
(1123,511,2)
(100,857,2)
(894,387,2)
(1209,1138,2)
(220,857,2)
(864,964,2)
(242,640,2)
(1127,857,2)
(907,1256,2)
(256,906,2)
(101,1131,2)
(302,476,2)
(355,1240,2)
(1146,946,2)
(1022,674,2)
(366,236,2)
(1210,574,2)
(899,387,2)
(615,1259,2)
(1198,165,2)
(705,1176,2)
(325,670,2)
(811,1183,2)
(618,379,2)
(1258,996,2)
(711,910,2)
(519,1398,2)
(2,236,2)
(696,236,2)
(447,857,2)
(1123,1198,2)
(761,321,2)
(864,1367,2)
(686,1047,2)
(1062,857,2)
(830,857,2)
(1402,846,2)
(905,895,2)
(247,335,2)
(502,328,2)
(991,103,2)
(907,1403,2)
(481,942,2)
(1375,1241,2)
(551,951,2)
(761,436,2)
(1263,1341,2)
(1034,481,2)
(1321,1361,2)
(515,175,2)
(1136,1086,2)
(739,1219,2)
(502,136,2)
(1172,66,2)
(631,991,2)
(814,1281,2)
(1312,917,2)
(1153,1241,2)
(73,1172,2)
(864,321,2)
(962,1299,2)
(659,529,2)
(1201,663,2)
(256,1256,2)
(551,906,2)
(1002,846,2)
(149,380,2)
(1201,760,2)
(1263,409,2)
(761,942,2)
(179,830,2)
(551,1130,2)
(503,1198,2)
(699,1176,2)
(864,554,2)
(654,857,2)
(626,160,2)
(1343,335,2)
(256,411,2)
(1150,1176,2)
(1381,846,2)
(761,336,2)
(644,1381,2)
(833,857,2)
(1003,329,2)
(1123,1361,2)
(949,335,2)
(723,167,2)
(1270,562,2)
(1168,1170,2)
(481,1154,2)
(72,857,2)
(907,758,2)
(864,1032,2)
(303,328,2)
(1263,955,2)
(551,306,2)
(748,236,2)
(632,846,2)
(301,870,2)
(378,320,2)
(855,97,2)
(284,1190,2)
(1084,320,2)
(1356,326,2)
(256,68,2)
(1168,861,2)
(1123,951,2)
(782,387,2)
(913,328,2)
(535,846,2)
(365,329,2)
(785,783,2)
(1201,942,2)
(234,1265,2)
(216,951,2)
(1112,303,2)
(996,1321,2)
(1288,857,2)
(551,970,2)
(931,857,2)
(297,996,2)
(10,326,2)
(1280,1150,2)
(504,723,2)
(936,551,2)
(184,238,2)
(416,236,2)
(476,708,2)
(1025,846,2)
(551,1197,2)
(842,412,2)
(1336,978,2)
(628,874,2)
(761,906,2)
(807,837,2)
(1074,158,2)
(335,1139,2)
(165,747,2)
(441,387,2)
(350,857,2)
(611,529,2)
(51,109,2)
(1060,236,2)
(864,514,2)
(256,1062,2)
(756,996,2)
(1344,236,2)
(1015,175,2)
(887,996,2)
(1108,1132,2)
(763,655,2)
(393,574,2)
(1371,670,2)
(205,927,2)
(780,857,2)
(553,1344,2)
(1070,846,2)
(280,1138,2)
(921,897,2)
(481,816,2)
(1038,335,2)
(923,857,2)
(127,314,2)
(980,387,2)
(864,1054,2)
(1350,970,2)
(243,857,2)
(111,857,2)
(1079,1361,2)
(1068,271,2)
(1026,897,2)
(428,904,2)
(1226,160,2)
(256,758,2)
(1201,688,2)
(1302,600,2)
(551,136,2)
(551,1117,2)
(1073,529,2)
(303,136,2)
(1266,1351,2)
(551,708,2)
(702,1198,2)
(562,217,2)
(511,739,2)
(136,586,2)
(1403,996,2)
(11,1176,2)
(1148,387,2)
(1201,336,2)
(205,906,2)
(1377,628,2)
(897,511,2)
(857,862,2)
(311,996,2)
(955,996,2)
(149,857,2)
(1270,181,2)
(1201,1117,2)
(125,1267,2)
(193,1104,2)
(1268,846,2)
(871,1198,2)
(1128,496,2)
(117,109,2)
(761,1367,2)
(1028,857,2)
(807,305,2)
(987,996,2)
(1367,783,2)
(492,1299,2)
(551,574,2)
(1253,1280,2)
(1346,857,2)
(686,89,2)
(761,1282,2)
(713,767,2)
(1263,1335,2)
(1301,562,2)
(774,379,2)
(326,996,2)
(120,539,2)
(581,857,2)
(90,857,2)
(1001,511,2)
(1244,996,2)
(864,68,2)
(202,329,2)
(127,857,2)
(669,841,2)
(551,336,2)
(1024,1374,2)
(1139,1298,2)
(1385,335,2)
(1201,861,2)
(356,574,2)
(1199,363,2)
(1101,996,2)
(841,1325,2)
(551,409,2)
(1350,1062,2)
(1279,1218,2)
(127,436,2)
(1151,236,2)
(1377,294,2)
(987,635,2)
(1387,1351,2)
(626,731,2)
(826,98,2)
(1234,857,2)
(421,846,2)
(932,1172,2)
(754,857,2)
(235,857,2)
(1199,857,2)
(1263,663,2)
(1390,628,2)
(1363,236,2)
(212,66,2)
(688,236,2)
(991,670,2)
(1263,1244,2)
(1298,178,2)
(1401,783,2)
(256,1341,2)
(341,846,2)
(1350,192,2)
(375,56,2)
(907,688,2)
(897,460,2)
(481,1244,2)
(43,1381,2)
(734,841,2)
(1168,701,2)
(1350,317,2)
(782,706,2)
(907,314,2)
(904,857,2)
(513,996,2)
(907,796,2)
(891,857,2)
(713,481,2)
(1168,1341,2)
(556,846,2)
(1230,1321,2)
(1274,996,2)
(1014,387,2)
(544,1176,2)
(907,174,2)
(1259,1172,2)
(761,1162,2)
(1304,951,2)
(1381,1302,2)
(1197,742,2)
(551,317,2)
(76,996,2)
(907,409,2)
(89,329,2)
(524,112,2)
(205,409,2)
(738,857,2)
(481,1335,2)
(358,846,2)
(1056,817,2)
(589,783,2)
(970,742,2)
(818,339,2)
(1102,857,2)
(225,1259,2)
(32,686,2)
(309,1351,2)
(821,857,2)
(790,271,2)
(537,1198,2)
(729,335,2)
(850,562,2)
(147,857,2)
(907,1282,2)
(1213,236,2)
(864,164,2)
(1181,857,2)
(1148,847,2)
(739,897,2)
(1263,758,2)
(385,387,2)
(939,236,2)
(811,511,2)
(1326,282,2)
(146,574,2)
(173,857,2)
(256,970,2)
(1263,701,2)
(316,149,2)
(1108,1381,2)
(862,1070,2)
(1291,236,2)
(127,1032,2)
(907,1244,2)
(1241,846,2)
(932,1259,2)
(1288,419,2)
(602,1299,2)
(551,964,2)
(783,996,2)
(551,554,2)
(530,857,2)
(768,379,2)
(323,335,2)
(551,1154,2)
(1281,846,2)
(481,491,2)
(939,282,2)
(143,996,2)
(213,886,2)
(1049,1361,2)
(263,335,2)
(907,1062,2)
(162,857,2)
(811,574,2)
(314,387,2)
(306,996,2)
(256,306,2)
(256,514,2)
(265,134,2)
(481,663,2)
(1201,955,2)
(939,1176,2)
(753,335,2)
(1350,473,2)
(1401,335,2)
(127,1367,2)
(551,1403,2)
(228,303,2)
(786,594,2)
(95,1321,2)
(213,1259,2)
(1201,1130,2)
(907,1060,2)
(615,1144,2)
(370,857,2)
(1350,857,2)
(256,942,2)
(127,1054,2)
(1317,379,2)
(481,597,2)
(600,1073,2)
(568,1375,2)
(501,857,2)
(650,400,2)
(1324,236,2)
(39,786,2)
(856,996,2)
(1263,1054,2)
(153,841,2)
(450,874,2)
(988,895,2)
(1102,310,2)
(481,1367,2)
(127,1060,2)
(1236,1172,2)
(1168,1169,2)
(156,575,2)
(1168,760,2)
(252,335,2)
(205,68,2)
(1211,238,2)
(1257,917,2)
(448,996,2)
(1201,317,2)
(1393,271,2)
(1045,270,2)
(369,895,2)
(589,335,2)
(394,1351,2)
(1360,857,2)
(557,846,2)
(274,727,2)
(1168,955,2)
(1124,1218,2)
(816,684,2)
(265,904,2)
(586,1112,2)
(882,1259,2)
(328,282,2)
(153,830,2)
(1057,1180,2)
(907,1335,2)
(172,511,2)
(21,996,2)
(1123,1176,2)
(761,192,2)
(633,655,2)
(551,1116,2)
(759,282,2)
(1369,996,2)
(288,846,2)
(260,727,2)
(602,1290,2)
(1123,238,2)
(281,846,2)
(508,160,2)
(460,511,2)
(271,626,2)
(425,282,2)
(1090,1000,2)
(66,1351,2)
(1154,857,2)
(626,476,2)
(1179,1376,2)
(1315,109,2)
(1123,539,2)
(1201,597,2)
(1222,782,2)
(276,379,2)
(355,720,2)
(172,70,2)
(761,317,2)
(1123,708,2)
(1109,387,2)
(551,580,2)
(551,760,2)
(119,528,2)
(893,575,2)
(566,335,2)
(256,1197,2)
(1167,874,2)
(818,708,2)
(68,236,2)
(1168,174,2)
(481,554,2)
(630,1176,2)
(415,574,2)
(1394,66,2)
(256,317,2)
(4,236,2)
(1072,236,2)
(1060,387,2)
(61,996,2)
(1383,458,2)
(1168,1054,2)
(225,583,2)
(1285,56,2)
(58,236,2)
(363,1045,2)
(151,857,2)
(667,837,2)
(1263,970,2)
(127,1197,2)
(349,236,2)
(1350,1341,2)
(1129,708,2)
(1116,727,2)
(1201,857,2)
(1243,236,2)
(1138,1238,2)
(1267,857,2)
(1218,996,2)
(347,236,2)
(551,192,2)
(675,1375,2)
(1350,1060,2)
(238,630,2)
(1182,619,2)
(97,973,2)
(922,1361,2)
(611,817,2)
(881,857,2)
(380,1218,2)
(542,1351,2)
(864,589,2)
(864,1204,2)
(974,303,2)
(900,1198,2)
(761,861,2)
(327,303,2)
(937,574,2)
(697,136,2)
(205,336,2)
(854,630,2)
(205,1169,2)
(1123,628,2)
(127,1170,2)
(205,416,2)
(1304,708,2)
(1263,554,2)
(1168,1117,2)
(187,756,2)
(127,306,2)
(465,857,2)
(1095,1361,2)
(1321,1374,2)
(1391,1321,2)
(1130,783,2)
(864,1244,2)
(1314,1019,2)
(256,336,2)
(551,1361,2)
(1350,1162,2)
(1218,267,2)
(460,172,2)
(761,1197,2)
(907,436,2)
(635,423,2)
(551,514,2)
(951,101,2)
(539,1377,2)
(628,1172,2)
(1122,574,2)
(710,476,2)
(761,18,2)
(761,1256,2)
(993,996,2)
(551,567,2)
(296,857,2)
(768,846,2)
(662,1377,2)
(864,567,2)
(1340,837,2)
(1249,1336,2)
(112,857,2)
(928,706,2)
(1168,1256,2)
(511,897,2)
(1058,857,2)
(88,1304,2)
(205,317,2)
(1304,1377,2)
(723,1302,2)
(127,861,2)
(761,1341,2)
(996,635,2)
(1316,387,2)
(1372,387,2)
(1238,655,2)
(295,708,2)
(640,846,2)
(519,387,2)
(89,817,2)
(603,857,2)
(705,387,2)
(1201,321,2)
(113,630,2)
(270,1218,2)
(1263,1256,2)
(1339,1381,2)
(10,857,2)
(1123,1172,2)
(939,238,2)
(728,857,2)
(136,824,2)
(551,314,2)
(594,303,2)
(1263,906,2)
(1184,1351,2)
(1160,294,2)
(623,335,2)
(1040,236,2)
(1089,817,2)
(1337,874,2)
(565,737,2)
(942,742,2)
(64,593,2)
(981,236,2)
(1264,1281,2)
(256,1335,2)
(813,1361,2)
(481,1197,2)
(1304,236,2)
(9,1259,2)
(806,1361,2)
(205,949,2)
(1356,387,2)
(126,594,2)
(84,335,2)
(526,1057,2)
(1168,543,2)
(1350,306,2)
(1073,917,2)
(547,747,2)
(761,409,2)
(377,1361,2)
(551,321,2)
(782,846,2)
(221,1361,2)
(383,727,2)
(127,416,2)
(481,1341,2)
(217,817,2)
(431,857,2)
(864,411,2)
(527,136,2)
(1396,574,2)
(934,1361,2)
(156,1019,2)
(97,826,2)
(1298,335,2)
(538,387,2)
(1201,192,2)
(1108,320,2)
(538,973,2)
(890,846,2)
(782,205,2)
(697,579,2)
(352,387,2)
(882,583,2)
(1123,846,2)
(481,796,2)
(109,1272,2)
(549,857,2)
(126,511,2)
(521,857,2)
(601,1218,2)
(256,796,2)
(336,335,2)
(1275,1321,2)
(1109,339,2)
(962,631,2)
(1112,320,2)
(1373,1218,2)
(528,528,2)
(1087,857,2)
(1320,335,2)
(38,1198,2)
(41,1176,2)
(1263,964,2)
(1140,236,2)
(199,857,2)
(701,996,2)
(127,758,2)
(1168,949,2)
(1168,1335,2)
(551,1032,2)
(939,996,2)
(929,1176,2)
(1073,1200,2)
(708,1183,2)
(1085,708,2)
(1308,1361,2)
(416,387,2)
(649,387,2)
(1201,701,2)
(256,688,2)
(1263,314,2)
(1104,1226,2)
(180,574,2)
(850,1270,2)
(1052,630,2)
(686,686,2)
(365,686,2)
(880,857,2)
(551,796,2)
(107,529,2)
(1263,192,2)
(709,846,2)
(1148,1267,2)
(379,846,2)
(592,865,2)
(1045,857,2)
(256,18,2)
(725,574,2)
(807,731,2)
(811,1377,2)
(850,1309,2)
(907,1169,2)
(1000,1132,2)
(584,39,2)
(381,817,2)
(547,387,2)
(998,236,2)
(1403,742,2)
(747,539,2)
(1132,996,2)
(731,90,2)
(722,708,2)
(890,1070,2)
(1349,904,2)
(1270,381,2)
(1137,857,2)
(739,649,2)
(256,964,2)
(1010,1198,2)
(1259,583,2)
(602,575,2)
(92,846,2)
(1123,1183,2)
(1350,409,2)
(800,236,2)
(551,949,2)
(677,387,2)
(768,6,2)
(967,857,2)
(125,847,2)
(127,970,2)
(554,687,2)
(1144,213,2)
(756,297,2)
(205,861,2)
(1304,846,2)
(926,857,2)
(794,1198,2)
(742,877,2)
(1160,379,2)
(494,328,2)
(75,79,2)
(1350,314,2)
(177,282,2)
(191,301,2)
(907,336,2)
(1316,1321,2)
(874,1351,2)
(253,511,2)
(154,857,2)
(685,1172,2)
(1306,857,2)
(205,1162,2)
(232,1299,2)
(976,529,2)
(608,155,2)
(205,321,2)
(1223,238,2)
(1350,964,2)
(488,996,2)
(280,326,2)
(1332,1281,2)
(211,600,2)
(907,1341,2)
(157,857,2)
(1190,1336,2)
(1263,306,2)
(846,996,2)
(1099,1275,2)
(744,1183,2)
(1263,317,2)
(1348,485,2)
(761,964,2)
(551,1176,2)
(121,837,2)
(51,742,2)
(818,706,2)
(429,1224,2)
(1304,628,2)
(481,416,2)
(1201,543,2)
(803,594,2)
(115,1314,2)
(868,1176,2)
(1168,1244,2)
(424,857,2)
(1222,1268,2)
(569,574,2)
(604,1361,2)
(760,387,2)
(951,238,2)
(50,574,2)
(193,740,2)
(1104,574,2)
(720,857,2)
(732,1218,2)
(335,585,2)
(98,1138,2)
(1195,996,2)
(376,1070,2)
(1130,335,2)
(296,104,2)
(722,134,2)
(1180,358,2)
(3,574,2)
(1056,1047,2)
(958,1198,2)
(551,597,2)
(1361,850,2)
(928,846,2)
(205,688,2)
(177,1138,2)
(907,1162,2)
(939,846,2)
(54,236,2)
(864,1206,2)
(1106,575,2)
(272,97,2)
(974,579,2)
(127,473,2)
(1232,1361,2)
(862,376,2)
(997,630,2)
(746,1120,2)
(310,819,2)
(127,1062,2)
(551,378,2)
(565,630,2)
(686,329,2)
(1246,1377,2)
(111,1218,2)
(331,1361,2)
(864,1117,2)
(761,1032,2)
(127,1116,2)
(241,895,2)
(864,1197,2)
(899,830,2)
(132,857,2)
(668,100,2)
(1123,236,2)
(1067,575,2)
(300,951,2)
(18,742,2)
(1321,236,2)
(232,387,2)
(1149,846,2)
(1004,539,2)
(659,817,2)
(1197,857,2)
(127,18,2)
(863,1259,2)
(1137,522,2)
(1016,857,2)
(742,996,2)
(1215,857,2)
(1336,575,2)
(436,320,2)
(942,857,2)
(1168,970,2)
(66,394,2)
(10,387,2)
(1327,742,2)
(788,973,2)
(1034,387,2)
(158,539,2)
(761,949,2)
(631,670,2)
(1226,387,2)
(907,543,2)
(1188,1047,2)
(525,282,2)
(1168,1130,2)
(127,1403,2)
(627,895,2)
(1305,747,2)
(1032,387,2)
(761,688,2)
(205,1130,2)
(704,575,2)
(708,1349,2)
(1351,75,2)
(1092,708,2)
(1142,574,2)
(443,857,2)
(205,1244,2)
(1117,996,2)
(387,396,2)
(481,589,2)
(834,1102,2)
(174,857,2)
(186,846,2)
(404,996,2)
(761,970,2)
(1239,897,2)
(271,1034,2)
(580,387,2)
(921,594,2)
(1260,1321,2)
(217,1321,2)
(284,115,2)
(256,1169,2)
(1239,594,2)
(968,846,2)
(481,688,2)
(212,303,2)
(453,857,2)
(127,68,2)
(1109,205,2)
(868,845,2)
(301,175,2)
(1263,760,2)
(619,125,2)
(485,585,2)
(1263,164,2)
(164,783,2)
(761,306,2)
(379,640,2)
(551,980,2)
(1034,476,2)
(1275,1374,2)
(127,942,2)
(67,996,2)
(1201,1169,2)
(291,238,2)
(1325,232,2)
(456,996,2)
(1335,387,2)
(761,1054,2)
(841,271,2)
(587,79,2)
(256,416,2)
(1228,857,2)
(177,387,2)
(653,1259,2)
(304,670,2)
(116,329,2)
(1200,1120,2)
(741,236,2)
(1168,306,2)
(992,857,2)
(1263,473,2)
(551,352,2)
(181,562,2)
(1350,411,2)
(693,1281,2)
(811,1361,2)
(127,1169,2)
(1141,97,2)
(1017,952,2)
(1168,1162,2)
(1396,1311,2)
(1350,1403,2)
(939,1183,2)
(1304,511,2)
(1056,686,2)
(761,514,2)
(907,473,2)
(551,1198,2)
(672,747,2)
(921,328,2)
(864,1062,2)
(210,175,2)
(962,1290,2)
(655,998,2)
(551,375,2)
(1208,857,2)
(80,857,2)
(427,857,2)
(553,574,2)
(518,1218,2)
(761,543,2)
(585,996,2)
(568,675,2)
(1170,783,2)
(1046,857,2)
(355,187,2)
(761,1335,2)
(761,1062,2)
(256,543,2)
(1350,1080,2)
(939,1377,2)
(864,174,2)
(1168,409,2)
(169,1070,2)
(127,411,2)
(782,103,2)
(837,428,2)
(1372,1172,2)
(995,335,2)
(713,1015,2)
(468,529,2)
(878,747,2)
(481,870,2)
(381,1374,2)
(907,942,2)
(1350,1117,2)
(127,1130,2)
(823,282,2)
(758,387,2)
(1321,1214,2)
(25,857,2)
(907,1170,2)
(346,1259,2)
(524,910,2)
(1031,857,2)
(335,335,2)
(1115,355,2)
(22,857,2)
(989,996,2)
(824,974,2)
(165,1305,2)
(508,731,2)
(1168,321,2)
(1383,846,2)
(484,846,2)
(761,1117,2)
(1350,554,2)
(1217,628,2)
(907,317,2)
(758,857,2)
(910,846,2)
(949,783,2)
(492,1290,2)
(227,846,2)
(1394,320,2)
(1054,996,2)
(345,857,2)
(870,236,2)
(362,387,2)
(834,176,2)
(497,895,2)
(912,236,2)
(127,597,2)
(1089,711,2)
(1253,1176,2)
(286,708,2)
(551,416,2)
(440,747,2)
(1112,66,2)
(1331,857,2)
(701,320,2)
(477,335,2)
(582,857,2)
(320,996,2)
(1267,620,2)
(481,1170,2)
(196,857,2)
(628,1351,2)
(939,951,2)
(244,897,2)
(308,1351,2)
(491,1281,2)
(807,160,2)
(787,1108,2)
(1330,857,2)
(420,379,2)
(844,136,2)
(1394,1039,2)
(1128,857,2)
(1201,436,2)
(1201,964,2)
(374,335,2)
(864,543,2)
(362,271,2)
(1272,36,2)
(205,375,2)
(864,693,2)
(991,387,2)
(276,1327,2)
(1168,1032,2)
(1018,335,2)
(805,1070,2)
(1399,857,2)
(907,68,2)
(12,628,2)
(308,1084,2)
(658,655,2)
(771,236,2)
(443,196,2)
(961,857,2)
(600,686,2)
(551,511,2)
(1095,817,2)
(1201,1170,2)
(864,861,2)
(1168,1282,2)
(428,387,2)
(1263,336,2)
(792,857,2)
(1107,628,2)
(125,1183,2)
(56,846,2)
(845,1050,2)
(179,767,2)
(1226,574,2)
(1239,387,2)
(39,897,2)
(1074,539,2)
(103,857,2)
(562,1321,2)
(358,179,2)
(1341,996,2)
(1224,583,2)
(256,473,2)
(1372,1138,2)
(205,955,2)
(828,1128,2)
(864,1048,2)
(761,1244,2)
(481,760,2)
(36,316,2)
(571,236,2)
(377,236,2)
(761,68,2)
(342,271,2)
(98,973,2)
(360,1172,2)
(884,1377,2)
(205,1256,2)
(29,574,2)
(218,97,2)
(655,408,2)
(1350,336,2)
(529,917,2)
(834,951,2)
(1057,1011,2)
(1224,865,2)
(127,1282,2)
(761,1403,2)
(180,1290,2)
(458,1070,2)
(1190,847,2)
(985,996,2)
(524,19,2)
(1358,56,2)
(505,846,2)
(1103,996,2)
(978,602,2)
(203,1272,2)
(920,303,2)
(256,409,2)
(1201,1080,2)
(430,119,2)
(1275,817,2)
(559,895,2)
(1381,452,2)
(551,688,2)
(1201,906,2)
(137,1187,2)
(1019,1222,2)
(1271,335,2)
(1005,574,2)
(939,539,2)
(127,701,2)
(449,686,2)
(864,420,2)
(1053,574,2)
(801,38,2)
(732,7,2)
(991,205,2)
(692,857,2)
(698,379,2)
(1062,742,2)
(131,846,2)
(1273,857,2)
(551,1054,2)
(276,640,2)
(537,233,2)
(566,817,2)
(118,865,2)
(599,996,2)
(1269,335,2)
(928,387,2)
(127,192,2)
(656,355,2)
(722,904,2)
(433,996,2)
(200,476,2)
(633,998,2)
(978,575,2)
(1226,731,2)
(598,1218,2)
(256,1282,2)
(1263,857,2)
(637,846,2)
(1162,387,2)
(899,846,2)
(1350,701,2)
(552,750,2)
(643,236,2)
(320,682,2)
(1348,335,2)
(1189,236,2)
(761,314,2)
(614,874,2)
(155,817,2)
(1136,335,2)
(811,846,2)
(1263,321,2)
(1201,306,2)
(419,1218,2)
(770,846,2)
(584,897,2)
(1350,416,2)
(1000,846,2)
(1325,362,2)
(460,594,2)
(816,1361,2)
(1242,731,2)
(1124,1128,2)
(282,951,2)
(987,387,2)
(174,324,2)
(1201,473,2)
(1400,857,2)
(1238,56,2)
(977,1381,2)
(1077,335,2)
(1263,1032,2)
(840,136,2)
(379,379,2)
(251,539,2)
(294,236,2)
(723,846,2)
(172,320,2)
(256,174,2)
(864,1341,2)
(1362,111,2)
(255,857,2)
(205,942,2)
(98,326,2)
(649,756,2)
(1168,1403,2)
(626,387,2)
(1350,1256,2)
(411,320,2)
(367,1176,2)
(1350,1335,2)
(986,846,2)
(103,1362,2)
(1024,817,2)
(205,1403,2)
(947,282,2)
(861,387,2)
(53,996,2)
(715,951,2)
(864,1335,2)
(905,1113,2)
(669,650,2)
(205,1335,2)
(179,846,2)
(907,955,2)
(528,1095,2)
(479,857,2)
(1349,1344,2)
(26,539,2)
(1138,56,2)
(818,103,2)
(56,1356,2)
(127,906,2)
(1168,589,2)
(487,837,2)
(280,97,2)
(420,640,2)
(508,387,2)
(1013,38,2)
(481,1032,2)
(478,282,2)
(809,841,2)
(819,857,2)
(1350,1032,2)
(127,955,2)
(1207,686,2)
(978,156,2)
(362,847,2)
(476,385,2)
(227,223,2)
(551,1014,2)
(939,630,2)
(808,516,2)
(495,387,2)
(1168,411,2)
(481,955,2)
(114,236,2)
(127,1162,2)
(213,1172,2)
(321,236,2)
(1088,236,2)
(648,897,2)
(796,996,2)
(1064,387,2)
(1293,857,2)
(23,236,2)
(719,282,2)
(880,1181,2)
(1282,742,2)
(551,1172,2)
(400,387,2)
(1023,136,2)
(819,1218,2)
(1086,335,2)
(551,436,2)
(1176,1022,2)
(346,429,2)
(176,951,2)
(906,857,2)
(1168,597,2)
(864,18,2)
(1179,857,2)
(1355,1398,2)
(1374,236,2)
(233,1198,2)
(1039,996,2)
(551,1060,2)
(945,857,2)
(864,942,2)
(1397,1377,2)
(846,1218,2)
(1303,846,2)
(824,303,2)
(551,630,2)
(1224,1259,2)
(339,1281,2)
(864,977,2)
(1263,1282,2)
(512,1172,2)
(218,756,2)
(481,1403,2)
(439,1047,2)
(1139,335,2)
(1219,148,2)
(1276,539,2)
(782,339,2)
(388,1398,2)
(761,1154,2)
(1350,597,2)
(1147,329,2)
(232,1290,2)
(379,768,2)
(1245,379,2)
(902,857,2)
(249,562,2)
(651,996,2)
(74,727,2)
(1335,236,2)
(464,236,2)
(1168,758,2)
(1108,55,2)
(864,1403,2)
(167,329,2)
(127,1341,2)
(473,857,2)
(830,443,2)
(597,857,2)
(736,857,2)
(1190,1267,2)
(252,566,2)
(127,1244,2)
(324,387,2)
(610,630,2)
(159,303,2)
(70,1351,2)
(864,375,2)
(864,336,2)
(1123,282,2)
(324,857,2)
(927,236,2)
(747,1074,2)
(1341,387,2)
(317,387,2)
(321,387,2)
(1168,1367,2)
(570,335,2)
(1220,939,2)
(400,841,2)
(1242,160,2)
(781,1120,2)
(551,1169,2)
(1350,949,2)
(1272,294,2)
(1350,760,2)
(633,885,2)
(190,328,2)
(1364,996,2)
(1350,955,2)
(864,955,2)
(481,701,2)
(955,742,2)
(1042,857,2)
(1188,817,2)
(1168,554,2)
(1242,846,2)
(127,317,2)
(1112,1039,2)
(161,939,2)
(1328,996,2)
(358,1294,2)
(811,1198,2)
(1299,236,2)
(1350,1116,2)
(894,178,2)
(127,543,2)
(509,1176,2)
(928,103,2)
(907,1054,2)
(201,996,2)
(452,329,2)
(256,861,2)
(205,314,2)
(645,996,2)
(319,723,2)
(1278,711,2)
(1123,136,2)
(586,579,2)
(1174,857,2)
(1294,817,2)
(969,846,2)
(481,1282,2)
(1200,529,2)
(528,927,2)
(172,886,2)
(1383,1070,2)
(626,305,2)
(721,574,2)
(907,1367,2)
(960,136,2)
(761,1060,2)
(939,574,2)
(180,1299,2)
(491,387,2)
(85,996,2)
(510,1381,2)
(1304,539,2)
(534,1123,2)
(1304,282,2)
(375,387,2)
(310,857,2)
(127,663,2)
(1251,574,2)
(1209,303,2)
(223,1000,2)
(188,387,2)
(635,1321,2)
(1168,436,2)
(411,996,2)
(1176,1198,2)
(553,904,2)
(363,857,2)
(659,1047,2)
(857,1070,2)
(1334,1351,2)
(265,841,2)
(256,760,2)
(1133,379,2)
(1350,1282,2)
(669,153,2)
(256,955,2)
(907,1116,2)
(81,996,2)
(1201,1244,2)
(153,1015,2)
(1162,1321,2)
(745,996,2)
(205,796,2)
(213,320,2)
(1240,857,2)
(864,970,2)
(391,1351,2)
(864,796,2)
(1168,857,2)
(551,942,2)
(1350,589,2)
(265,387,2)
(1376,857,2)
(1238,633,2)
(1168,1197,2)
(279,846,2)
(751,56,2)
(466,236,2)
(1244,742,2)
(578,897,2)
(765,1120,2)
(979,508,2)
(1319,21,2)
(1157,917,2)
(522,1218,2)
(697,328,2)
(1263,796,2)
(725,432,2)
(730,335,2)
(647,857,2)
(917,1207,2)
(1350,543,2)
(127,321,2)
(31,857,2)
(1026,1039,2)
(551,955,2)
(467,711,2)
(761,416,2)
(592,921,2)
(796,742,2)
(1202,996,2)
(455,1047,2)
(79,574,2)
(842,857,2)
(964,996,2)
(273,320,2)
(455,917,2)
(1114,335,2)
(1279,727,2)
(1201,411,2)
(245,1183,2)
(740,962,2)
(353,846,2)
(1075,329,2)
(688,387,2)
(1350,1169,2)
(136,303,2)
(907,411,2)
(1200,285,2)
(256,1080,2)
(907,321,2)
(917,686,2)
(18,857,2)
(1349,134,2)
(1304,1176,2)
(559,931,2)
(205,1116,2)
(1240,10,2)
(864,701,2)
(476,818,2)
(188,996,2)
(392,335,2)
(861,236,2)
(1263,949,2)
(1168,336,2)
(71,1259,2)
(63,335,2)
(907,1080,2)
(656,866,2)
(778,335,2)
(919,1381,2)
(691,38,2)
(598,857,2)
(481,543,2)
(648,387,2)
(807,387,2)
(521,1218,2)
(811,996,2)
(1361,562,2)
(426,857,2)
(115,574,2)
(329,846,2)
(409,742,2)
(205,554,2)
(170,379,2)
(242,379,2)
(1349,387,2)
(826,973,2)
(1201,796,2)
(1372,326,2)
(1400,521,2)
(1156,727,2)
(289,996,2)
(1304,996,2)
(1024,1321,2)
(1096,846,2)
(1168,473,2)
(256,589,2)
(328,525,2)
(761,758,2)
(885,655,2)
(1263,1116,2)
(772,335,2)
(1381,1153,2)
(205,701,2)
(690,857,2)
(422,539,2)
(1034,767,2)
(1034,1015,2)
(1054,742,2)
(630,1253,2)
(1113,1218,2)
(1305,547,2)
(619,224,2)
(552,574,2)
(1263,589,2)
(1214,817,2)
(1289,236,2)
(16,670,2)
(97,282,2)
(864,276,2)
(1194,1351,2)
(858,708,2)
(1249,847,2)
(163,996,2)
(1109,706,2)
(1168,164,2)
(1168,314,2)
(551,18,2)
(1256,236,2)
(586,303,2)
(733,996,2)
(127,336,2)
(500,1272,2)
(539,1265,2)
(1048,175,2)
(722,1344,2)
(205,1062,2)
(1123,1377,2)
(406,335,2)
(1158,846,2)
(1323,236,2)
(939,136,2)
(1193,335,2)
(550,236,2)
(879,574,2)
(127,760,2)
(305,1398,2)
(775,329,2)
(864,1169,2)
(874,1372,2)
(1350,68,2)
(1304,1361,2)
(879,387,2)
(551,1367,2)
(907,554,2)
(885,326,2)
(256,1154,2)
(1109,271,2)
(1206,320,2)
(412,857,2)
(1249,846,2)
(403,1259,2)
(907,416,2)
(90,469,2)
(831,575,2)
(761,589,2)
(779,996,2)
(1201,1335,2)
(907,597,2)
(909,56,2)
(917,1056,2)
(809,669,2)
(551,628,2)
(551,495,2)
(445,1120,2)
(470,511,2)
(864,1282,2)
(1337,387,2)
(526,837,2)
(89,686,2)
(309,1216,2)
(1350,663,2)
(181,1374,2)
(897,786,2)
(481,949,2)
(580,575,2)
(1359,1321,2)
(127,589,2)
(1177,865,2)
(1398,846,2)
(297,817,2)
(575,1148,2)
(290,917,2)
(287,996,2)
(1047,329,2)
(1034,830,2)
(867,857,2)
(1158,1070,2)
(1105,1070,2)
(481,174,2)
(1378,1218,2)
(68,387,2)
(1304,136,2)
(481,317,2)
(150,1381,2)
(566,585,2)
(811,708,2)
(256,857,2)
(907,306,2)
(768,742,2)
(1204,742,2)
(674,38,2)
(481,970,2)
(642,846,2)
(889,677,2)
(864,491,2)
(496,593,2)
(109,846,2)
(1322,303,2)
(1268,817,2)
(42,1381,2)
(1128,118,2)
(551,519,2)
(735,335,2)
(514,387,2)
(727,1215,2)
(907,514,2)
(811,630,2)
(1263,688,2)
(1097,1172,2)
(1350,1154,2)
(684,1374,2)
(309,308,2)
(1059,600,2)
(336,783,2)
(1263,1197,2)
(1350,1367,2)
(408,857,2)
(1001,786,2)
(1201,18,2)
(1263,1403,2)
(1281,928,2)
(494,70,2)
(385,631,2)
(494,320,2)
(1109,103,2)
(1201,1032,2)
(677,1198,2)
(1165,236,2)
(774,742,2)
(1263,514,2)
(526,807,2)
(65,574,2)
(979,879,2)
(420,774,2)
(619,1183,2)
(205,306,2)
(1128,157,2)
(1093,379,2)
(1012,303,2)
(607,335,2)
(1168,688,2)
(127,796,2)
(1134,594,2)
(256,663,2)
(205,1282,2)
(551,539,2)
(17,857,2)
(551,996,2)
(70,64,2)
(563,236,2)
(1366,1279,2)
(338,1281,2)
(761,701,2)
(939,628,2)
(839,973,2)
(639,1198,2)
(864,495,2)
(866,355,2)
(428,846,2)
(1157,817,2)
(380,857,2)
(1153,19,2)
(554,857,2)
(575,846,2)
(952,280,2)
(175,899,2)
(372,708,2)
(1123,574,2)
(864,1256,2)
(1026,66,2)
(574,476,2)
(1345,575,2)
(205,970,2)
(551,236,2)
(44,846,2)
(551,1335,2)
(982,951,2)
(30,841,2)
(212,320,2)
(458,846,2)
(267,996,2)
(233,387,2)
(811,539,2)
(1076,846,2)
(663,742,2)
(820,175,2)
(679,21,2)
(364,539,2)
(399,711,2)
(469,1218,2)
(883,846,2)
(205,514,2)
(539,668,2)
(432,552,2)
(385,708,2)
(551,1062,2)
(1394,1259,2)
(48,1381,2)
(475,574,2)
(674,441,2)
(907,1117,2)
(761,597,2)
(864,352,2)
(1263,1169,2)
(1120,611,2)
(1201,68,2)
(1263,1060,2)
(811,1176,2)
(897,594,2)
(262,996,2)
(899,767,2)
(785,335,2)
(1263,597,2)
(256,701,2)
(616,1281,2)
(180,631,2)
(907,970,2)
(395,857,2)
(256,1244,2)
(1362,857,2)
(65,979,2)
(205,760,2)
(1086,817,2)
(1017,137,2)
(864,758,2)
(405,846,2)
(889,1198,2)
(307,1321,2)
(60,857,2)
(1259,615,2)
(313,996,2)
(307,1145,2)
(392,996,2)
(583,1172,2)
(180,387,2)
(205,192,2)
(238,565,2)
(551,164,2)
(485,335,2)
(343,857,2)
(765,817,2)
(655,56,2)
(661,236,2)
(1198,539,2)
(1201,1197,2)
(1229,303,2)
(877,996,2)
(1255,996,2)
(864,1116,2)
(574,708,2)
(907,1197,2)
(187,857,2)
(682,1101,2)
(875,846,2)
(127,688,2)
(481,1169,2)
(769,857,2)
(1263,174,2)
(127,174,2)
(481,861,2)
(1064,857,2)
(551,1080,2)
(19,236,2)
(1057,837,2)
(915,301,2)
(168,1120,2)
(551,276,2)
(381,562,2)
(153,767,2)
(1201,1116,2)
(1350,942,2)
(960,328,2)
(907,857,2)
(1206,1381,2)
(352,837,2)
(236,387,2)
(1018,785,2)
(205,1367,2)
(761,1170,2)
(293,236,2)
(1263,861,2)
(127,514,2)
(302,809,2)
(75,593,2)
(761,760,2)
(1215,1199,2)
(446,1198,2)
(551,51,2)
(155,585,2)
(397,895,2)
(1304,1172,2)
(1220,387,2)
(337,857,2)
(1168,317,2)
(170,1265,2)
(284,574,2)
(507,996,2)
(14,379,2)
(282,834,2)
(965,996,2)
(863,1172,2)
(1377,36,2)
(1081,1198,2)
(1201,1154,2)
(811,282,2)
(1262,996,2)
(11,868,2)
(695,594,2)
(551,1183,2)
(474,97,2)
(525,320,2)
(768,404,2)
(939,1198,2)
(551,846,2)
(1084,886,2)
(1286,335,2)
(551,663,2)
(1365,335,2)
(1092,676,2)
(36,857,2)
(1201,409,2)
(720,1218,2)
(139,335,2)
(1168,1060,2)
(77,175,2)
(975,574,2)
(620,857,2)
(935,711,2)
(1263,942,2)
(836,511,2)
(205,1032,2)
(859,574,2)
(561,841,2)
(205,758,2)
(434,628,2)
(892,973,2)
(1207,817,2)
(1168,18,2)
(904,1288,2)
(879,1011,2)
(1113,895,2)
(256,192,2)
(552,387,2)
(1380,335,2)
(939,1361,2)
(1153,568,2)
(463,921,2)
(1263,1162,2)
(1265,236,2)
(1396,387,2)
(1201,314,2)
(481,1080,2)
(1084,1351,2)
(727,857,2)
(473,387,2)
(966,236,2)
(907,906,2)
(1263,411,2)
(1183,1249,2)
(761,796,2)
(1070,1383,2)
(936,1239,2)
(864,1060,2)
(1214,1361,2)
(1164,857,2)
(551,1162,2)
(125,1336,2)
(73,1259,2)
(551,1002,2)
(1227,594,2)
(962,574,2)
(33,996,2)
(761,164,2)
(317,236,2)
(1350,1170,2)
(1201,1256,2)
(508,574,2)
(1378,1070,2)
(1350,1244,2)
(1079,1374,2)
(256,1060,2)
(761,1169,2)
(655,368,2)
(298,708,2)
(481,321,2)
(872,996,2)
(707,857,2)
(348,1398,2)
(179,1015,2)
(390,846,2)
(864,306,2)
(205,1281,2)
(486,335,2)
(307,1316,2)
(588,574,2)
(489,846,2)
(999,857,2)
(1350,174,2)
(1159,335,2)
(178,236,2)
(567,387,2)
(511,584,2)
(490,996,2)
(1134,328,2)
(706,236,2)
(492,387,2)
(666,996,2)
(1080,387,2)
(1183,846,2)
(689,857,2)
(608,335,2)
(481,1062,2)
(650,265,2)
(811,236,2)
(864,109,2)
(1201,758,2)
(133,355,2)
(1350,436,2)
(809,271,2)
(280,387,2)
(1216,1351,2)
(256,1054,2)
(1309,817,2)
(1350,688,2)
(256,554,2)
(115,180,2)
(256,164,2)
(1310,379,2)
(994,857,2)
(472,303,2)
(551,1256,2)
(558,1375,2)
(1033,335,2)
(277,1361,2)
(145,1398,2)
(275,846,2)
(205,164,2)
(1342,282,2)
(939,1172,2)
(1166,857,2)
(1327,379,2)
(503,537,2)
(368,326,2)
(1316,178,2)
(1000,55,2)
(1026,320,2)
(1368,686,2)
(869,56,2)
(438,857,2)
(1201,970,2)
(1388,897,2)
(864,1130,2)
(273,1351,2)
(1212,857,2)
(1148,846,2)
(990,996,2)
(285,1120,2)
(1191,574,2)
(119,1281,2)
(750,284,2)
(886,996,2)
(1099,1024,2)
(1350,906,2)
(205,1060,2)
(671,727,2)
(1263,1154,2)
(356,387,2)
(1249,1267,2)
(538,756,2)
(614,1337,2)
(1111,857,2)
(179,387,2)
(423,307,2)
(27,846,2)
(1280,1176,2)
(525,70,2)
(481,314,2)
(1051,996,2)
(543,236,2)
(178,643,2)
(840,579,2)
(1347,708,2)
(1168,1154,2)
(811,951,2)
(919,1108,2)
(256,1367,2)
(359,1381,2)
(1145,1321,2)
(481,375,2)
(208,238,2)
(618,846,2)
(457,1128,2)
(1063,630,2)
(127,1335,2)
(240,238,2)
(761,857,2)
(234,668,2)
(1146,857,2)
(776,303,2)
(723,452,2)
(1296,1351,2)
(1263,1130,2)
(743,335,2)
(1168,796,2)
(546,996,2)
(560,79,2)
(1182,1183,2)
(1227,511,2)
(234,1272,2)
(1204,846,2)
(877,188,2)
(299,1259,2)
(230,335,2)
(86,574,2)
(638,857,2)
(187,387,2)
(931,842,2)
(232,631,2)
(783,987,2)
(551,273,2)
(939,708,2)
(179,481,2)
(524,1278,2)
(544,705,2)
(24,236,2)
(1311,574,2)
(225,1394,2)
(385,1290,2)
(750,574,2)
(713,1398,2)
(551,1170,2)
(1271,783,2)
-----------------------------------
(0,cp)
(1,i)
(2,cp)
(3,tilegrdoffy)
(4,tilegrdoffx)
(5,cp)
(6,tccp->maxrlvls = atoi(jas_tvparser_getval(tvp)
(7,tvp = 0)
(8,for (lyrno = 0; lyrno < tcp->numlyrs - 1; ++lyrno)
(9,i)
(10,cp->totalsize)
(11,jas_eprintf("invalid code block height %d\\n",\\n\\t\\t  JPC_POW2(cp->tccp.cblkheightexpn)
(12,prcwidthexpn)
(13,case OPT_SOP:)
(14,tccp)
(15,JAS_CLRSPC_FAM_RGB)
(16,tilegrdoffx)
(17,tvp)
(18,tccp->maxrlvls)
(19,enablemct = true)
(20,numilyrrates)
(21,optstr)
(22,imgareatly)
(23,refgrdheight)
(24,cp)
(25,cblksty)
(26,goto error;)
(27,UINT_FAST32_MAX)
(28,)
(29,cp)
(30,imgareatly)
(31,jp2overhead)
(32,cmptno)
(33,tccp)
(34,tccp)
(35,id)
(36,prcwidthexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(37,i)
(38,cp->tccp.cblkheightexpn < 2)
(39,tcp->ilyrrates[lyrno])
(40,)
(41,"invalid code block height %d\\n")
(42,tcp)
(43,mctid)
(44,cp)
(45,cmptno)
(46,)
(47,)
(48,tcp->mctid = (tcp->intmode)
(49,cblkheightexpn)
(50,"invalid tile grid offset (%lu, %lu)
(51,tccp->csty)
(52,)
(53,cp)
(54,image)
(55,tcp->intmode = (tagid == MODE_INT)
(56,cp->totalsize != UINT_FAST32_MAX)
(57,0)
(58,hsteplcm)
(59,cp)
(60,cp)
(61,tcp)
(62,mctvalid)
(63,cp)
(64,numilyrrates + 1)
(65,JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,\\n\\t  cp->tileheight)
(66,tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1)
(67,UINT_FAST32_MAX)
(68,cp->ccps)
(69,)
(70,tcp->numlyrs = numilyrrates + 1)
(71,tcp)
(72,break;)
(73,i)
(74,tcp)
(75,numilyrrates > 0)
(76,cp)
(77,vsteplcm)
(78,cmptno)
(79,ilyrrates)
(80,tvp)
(81,cmptno)
(82,tvp)
(83,)
(84,ccp)
(85,ilyrrates)
(86,cp)
(87,cp)
(88,tvp)
(89,jas_image_numcmpts(image)
(90,atoi(jas_tvparser_getval(tvp)
(91,unsigned long)
(92,cp)
(93,cp)
(94,refgrdwidth)
(95,image)
(96,case OPT_TERMALL:)
(97,cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize)
(98,cp->totalsize)
(99,if (cp->tilegrdoffy == UINT_FAST32_MAX)
(100,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(101,cp->tccp.maxrlvls)
(102,)
(103,cp->imgareatlx = atoi(jas_tvparser_getval(tvp)
(104,jas_tvparser_getval(tvp)
(105,)
(106,lyrno)
(107,0)
(108,)
(109,prcwidthexpn != 15 || prcheightexpn != 15)
(110,break;)
(111,jas_tvparser_getval(tvp)
(112,enablemct = false)
(113,16384)
(114,cp->debug = 0)
(115,cp->refgrdwidth - cp->tilegrdoffx)
(116,true)
(117,csty)
(118,&ilyrrates)
(119,hsteplcm != 1)
(120,"invalid precinct height\\n")
(121,refgrdheight)
(122,break;)
(123,cmptno)
(124,tccp)
(125,cp->tilewidth)
(126,lyrno)
(127,cp->tcp.csty |= JPC_COD_EPH)
(128,if (cp->imgareatlx == UINT_FAST32_MAX)
(129,hsteplcm)
(130,cp)
(131,tccp)
(132,break;)
(133,"ignoring bad rate specifier %s\\n")
(134,cp->tileheight = cp->refgrdheight - cp->tilegrdoffy)
(135,if (cp->totalsize != UINT_FAST32_MAX && cp->totalsize > cp->rawsize)
(136,tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1])
(137,(unsigned long)
(138,if (!(cp = jas_malloc(sizeof(jpc_enc_cp_t)
(139,sampgrdsubstepx)
(140,case OPT_PTERM:)
(141,cp)
(142,cp)
(143,0)
(144,)
(145,tilegrdoffy)
(146,cp)
(147,tvp)
(148,double)
(149,atoi(jas_tvparser_getval(tvp)
(150,tcp->mctid = JPC_MCT_NONE)
(151,tvp)
(152,intmode)
(153,cp->imgareatly)
(154,break;)
(155,jas_image_cmptsgnd(image, cmptno)
(156,cp->refgrdwidth)
(157,jas_tvparser_getval(tvp)
(158,cp->tccp)
(159,ilyrrates)
(160,cp->tilegrdoffy = UINT_FAST32_MAX)
(161,cp)
(162,break;)
(163,tcp)
(164,ccp->sampgrdstepy)
(165,cp->tccp.cblkwidthexpn > 12)
(166,imgareatlx)
(167,mctvalid = false)
(168,0)
(169,encopts)
(170,tccp->prcheightexpns[rlvlno] = prcheightexpn)
(171,jp2overhead)
(172,tcp->numlyrs)
(173,tvp)
(174,cp->tccp.numgbits)
(175,cp->imgareatly == UINT_FAST32_MAX)
(176,cp->tccp)
(177,cp->totalsize)
(178,cp->numcmpts = jas_image_numcmpts(image)
(179,cp->imgareatly)
(180,cp->tilegrdoffx)
(181,jas_image_cmptbry(image, cmptno)
(182,imgareatly)
(183,UINT_FAST32_MAX)
(184,"too many layers\\n")
(185,image)
(186,tileheight)
(187,cp->rawsize)
(188,cp->tccp)
(189,if (jas_image_cmptprec(image, cmptno)
(190,0)
(191,jas_eprintf("warning: overriding imgareatly value\\n")
(192,cp->refgrdwidth)
(193,jas_eprintf("invalid tile grid offset (%lu, %lu)
(194,case OPT_CBLKHEIGHT:)
(195,if (cp->totalsize != UINT_FAST32_MAX)
(196,jas_tvparser_getval(tvp)
(197,goto error;)
(198,)
(199,break;)
(200,imgareatly)
(201,tccp)
(202,cmptno)
(203,15)
(204,)
(205,cp->imgareatlx *= hsteplcm)
(206,)
(207,ret)
(208,tccp)
(209,intmode)
(210,imgareatly)
(211,false)
(212,tcp->ilyrrates)
(213,tcp->numlyrs)
(214,tilewidth)
(215,cp)
(216,"must be at least one resolution level\\n")
(217,jas_image_brx(image)
(218,cp->rawsize)
(219,if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(220,tvp)
(221,cmptno)
(222,)
(223,(tcp->intmode)
(224,unsigned long)
(225,tcp->ilyrrates[i])
(226,)
(227,tccp->qmfbid = (tcp->intmode)
(228,tcp)
(229,unsigned long)
(230,cmptno)
(231,goto error;)
(232,cp->tilegrdoffx)
(233,cp->tccp)
(234,prcheightexpn != 15)
(235,tvp)
(236,!(cp = jas_malloc(sizeof(jpc_enc_cp_t)
(237,cp)
(238,cp->tcp.numlyrs > 16384)
(239,JPC_COX_INS)
(240,maxrlvls)
(241,intmode)
(242,++rlvlno)
(243,tccp)
(244,cp)
(245,goto error;)
(246,if (ilyrrates)
(247,cmptno)
(248,cp->refgrdwidth)
(249,image)
(250,if (ilyrrates && numilyrrates > 0)
(251,2)
(252,ccp->prec = jas_image_cmptprec(image, cmptno)
(253,goto error;)
(254,break;)
(255,tccp)
(256,tccp->cblksty |= JPC_COX_TERMALL)
(257,case OPT_TILEHEIGHT:)
(258,debug)
(259,cp)
(260,"ignoring invalid progression order %s\\n")
(261,tccp)
(262,tcp)
(263,image)
(264,)
(265,cp->tileheight)
(266,cp)
(267,jas_tvparser_create(optstr ? optstr : "")
(268,ilyrrates)
(269,)
(270,jas_tvparser_getval(tvp)
(271,cp->tilegrdoffy > cp->imgareatly)
(272,rawsize)
(273,tcp->numlyrs)
(274,tagid)
(275,cp)
(276,tccp->prcwidthexpns[rlvlno])
(277,vsteplcm)
(278,sizeof(jpc_enc_cp_t)
(279,UINT_FAST32_MAX)
(280,cp->totalsize)
(281,image)
(282,cp->tccp.numgbits > 8)
(283,optstr ? optstr : "")
(284,JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,\\n\\t  cp->tilewidth)
(285,jas_image_cmptheight(image, cmptno)
(286,goto error;)
(287,6)
(288,rlvlno)
(289,cblkwidthexpn)
(290,image)
(291,goto error;)
(292,imgareatlx)
(293,tilegrdoffy)
(294,prcwidthexpn = 15)
(295,tileheight)
(296,atoi(jas_tvparser_getval(tvp)
(297,jas_image_rawsize(image)
(298,tilegrdoffx)
(299,ilyrrates)
(300,8)
(301,vsteplcm != 1)
(302,cp->tilegrdoffy > cp->imgareatly ||\\n\\t  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(303,lyrno + 2 < tcp->numlyrs)
(304,cp)
(305,cp->tilegrdoffy = cp->imgareatly)
(306,tcp->prg)
(307,cp->numcmpts * sizeof(jpc_enc_ccp_t)
(308,tcp->numlyrs - 1)
(309,(tcp->numlyrs - 1)
(310,atoi(jas_tvparser_getval(tvp)
(311,0)
(312,case OPT_PRG:)
(313,csty)
(314,cp->tilegrdoffy)
(315,)
(316,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(317,cp->debug)
(318,numilyrrates)
(319,jas_eprintf("warning: color space apparently not RGB\\n")
(320,tcp = &cp->tcp)
(321,cp->tileheight)
(322,default:)
(323,image)
(324,cp->tccp)
(325,imgareatlx)
(326,cp->totalsize = UINT_FAST32_MAX)
(327,totalsize)
(328,tcp->numlyrs > 1)
(329,cp->numcmpts == 3)
(330,totalsize)
(331,goto error;)
(332,numlyrs)
(333,if (prcwidthexpn != 15 || prcheightexpn != 15)
(334,"warning: invalid intermediate layer rates specifier ignored (%s)
(335,cmptno < JAS_CAST(int, cp->numcmpts)
(336,ccp->sampgrdstepx)
(337,enablemct)
(338,1)
(339,cp->imgareatlx = 0)
(340,if (vsteplcm != 1)
(341,tcp)
(342,cp)
(343,tileheight)
(344,if (cp->tccp.maxrlvls < 1)
(345,atoi(jas_tvparser_getval(tvp)
(346,tcp->ilyrrates[i] = jpc_dbltofix(ilyrrates[i])
(347,numcmpts)
(348,cp)
(349,0)
(350,ilyrrates)
(351,case OPT_JP2OVERHEAD:)
(352,cp->tileheight)
(353,tccp)
(354,rlvlno)
(355,ratestrtosize(jas_tvparser_getval(tvp)
(356,cp->numhtiles)
(357,numgbits)
(358,cp->imgareatly + jas_image_height(image)
(359,JPC_MCT_NONE)
(360,UINT_FAST32_MAX)
(361,cp)
(362,cp->tilewidth)
(363,jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(364,cp)
(365,image)
(366,15)
(367,cp)
(368,cp->totalsize)
(369,tagid)
(370,tvp)
(371,1)
(372,"invalid tile height %lu\\n")
(373,qmfbid)
(374,sampgrdsubstepx)
(375,cp->totalsize)
(376,jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(377,cmptno)
(378,tcp->ilyrrates)
(379,rlvlno < tccp->maxrlvls)
(380,jas_tvparser_getval(tvp)
(381,jas_image_cmptvstep(image, cmptno)
(382,tccp)
(383,tcp->prg = tagid)
(384,cp)
(385,cp->tilegrdoffx)
(386,jpc_fix_t)
(387,cp = jas_malloc(sizeof(jpc_enc_cp_t)
(388,imgareatly)
(389,case OPT_MODE:)
(390,UINT_FAST32_MAX)
(391,tcp)
(392,numcmpts)
(393,numhtiles)
(394,jas_malloc((tcp->numlyrs - 1)
(395,JPC_COX_PTERM)
(396,jas_malloc(sizeof(jpc_enc_cp_t)
(397,tcp)
(398,break;)
(399,JAS_CLRSPC_FAM_RGB)
(400,cp->tilegrdoffy)
(401,tcp)
(402,2)
(403,ilyrrates)
(404,tccp->maxrlvls = 6)
(405,imgareatlx)
(406,ccp)
(407,cp)
(408,jp2overhead = atoi(jas_tvparser_getval(tvp)
(409,tccp->cblksty)
(410,)
(411,tcp->csty)
(412,jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(413,for (lyrno = 0; lyrno + 2 < tcp->numlyrs; ++lyrno)
(414,tvp)
(415,cp)
(416,cp->tilegrdoffy)
(417,tvp)
(418,if (tcp->numlyrs > 1)
(419,jas_tvparser_getval(tvp)
(420,tccp->prcheightexpns[rlvlno])
(421,tilegrdoffy)
(422,tccp)
(423,jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)
(424,0)
(425,cp)
(426,tccp->cblkheightexpn =\\n\\t\\t\\t  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(427,tccp)
(428,cp->tileheight)
(429,jpc_dbltofix(ilyrrates[i])
(430,"warning: overriding imgareatlx value\\n")
(431,break;)
(432,cp->numhtiles * cp->numvtiles)
(433,tccp->cblkwidthexpn = 6)
(434,"cannot use real mode for lossless coding\\n")
(435,image)
(436,tcp->intmode)
(437,case OPT_CBLKWIDTH:)
(438,tvp)
(439,++cmptno)
(440,cblkwidthexpn)
(441,cp->tccp)
(442,break;)
(443,atoi(jas_tvparser_getval(tvp)
(444,if (tcp->ilyrrates[lyrno] >= tcp->ilyrrates[lyrno + 1])
(445,image)
(446,cp)
(447,modetab)
(448,tcp)
(449,image)
(450,!cp->tcp.intmode)
(451,cp)
(452,mctvalid = true)
(453,break;)
(454,tilegrdoffx)
(455,jas_image_cmptsgnd(image, cmptno)
(456,rawsize)
(457,jas_eprintf("warning: invalid intermediate layer rates specifier ignored (%s)
(458,jas_tvparser_next(tvp)
(459,"intermediate layer rates must increase monotonically\\n")
(460,tcp->numlyrs - 1)
(461,case OPT_PRCWIDTH:)
(462,cblkwidthexpn)
(463,ilyrrates)
(464,cp->refgrdwidth = 0)
(465,csty)
(466,0)
(467,jas_clrspc_fam(jas_image_clrspc(image)
(468,cmptno)
(469,jas_tvparser_getval(tvp)
(470,numlyrs)
(471,if (tvp)
(472,UINT_FAST32_MAX)
(473,cp->debug)
(474,"warning: specified rate is unreasonably large (%lu > %lu)
(475,cp)
(476,cp->tilegrdoffx > cp->imgareatlx)
(477,int)
(478,jas_eprintf("invalid number of guard bits\\n")
(479,tvp)
(480,mctvalid)
(481,cp->imgareatly *= vsteplcm)
(482,)
(483,false)
(484,refgrdwidth)
(485,jas_image_cmptvstep(image, cmptno)
(486,ccp)
(487,tilegrdoffy)
(488,tcp->prg = JPC_COD_LRCPPRG)
(489,intmode)
(490,0)
(491,cp->imgareatlx)
(492,cp->tilegrdoffx)
(493,break;)
(494,tcp->numlyrs)
(495,cp->tilegrdoffx)
(496,&numilyrrates)
(497,tvp)
(498,case OPT_TILEGRDOFFX:)
(499,)
(500,prcheightexpn)
(501,rawsize)
(502,2)
(503,JPC_POW2(cp->tccp.cblkwidthexpn)
(504,"warning: color space apparently not RGB\\n")
(505,goto error;)
(506,tvp)
(507,ccps)
(508,cp->tilegrdoffy)
(509,cp)
(510,mctid)
(511,jpc_fixtodbl(tcp->ilyrrates[lyrno])
(512,numlyrs)
(513,tccp->csty = 0)
(514,cp->rawsize)
(515,1)
(516,atoi(jas_tvparser_getval(tvp)
(517,)
(518,jas_tvparser_getval(tvp)
(519,cp->tilegrdoffy)
(520,for (i = 0; i < JAS_CAST(int, tcp->numlyrs - 1)
(521,jas_tvparser_getval(tvp)
(522,jas_tvparser_getval(tvp)
(523,lyrno)
(524,enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(525,tcp->numlyrs)
(526,cp->refgrdheight - cp->tilegrdoffy)
(527,jas_eprintf("intermediate layer rates must increase monotonically\\n")
(528,hsteplcm *= jas_image_cmpthstep(image, cmptno)
(529,jas_image_cmptsgnd(image, cmptno)
(530,break;)
(531,imgareatlx)
(532,case OPT_TILEWIDTH:)
(533,)
(534,ilyrrates)
(535,UINT_FAST32_MAX)
(536,switch (jas_taginfo_nonull(jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(537,cp->tccp.cblkwidthexpn)
(538,cp->rawsize)
(539,prcheightexpn > 15)
(540,"warning: intermediate layer rates must be less than overall rate\\n")
(541,)
(542,totalsize)
(543,cp->tilegrdoffx)
(544,cp->tccp.cblkwidthexpn)
(545,for (rlvlno = 0; rlvlno < tccp->maxrlvls; ++rlvlno)
(546,numlyrs)
(547,cp->tccp)
(548,numcmpts)
(549,tilegrdoffy)
(550,prcheightexpn)
(551,return 0;)
(552,cp->numhtiles)
(553,cp->tileheight)
(554,cp->tcp.csty)
(555,error:)
(556,0)
(557,UINT_FAST32_MAX)
(558,image)
(559,tagid == MODE_INT)
(560,numilyrrates)
(561,cp)
(562,jas_image_cmptbrx(image, cmptno)
(563,true)
(564,tvp)
(565,cp->tcp.numlyrs)
(566,jas_image_cmptprec(image, cmptno)
(567,cp->imgareatly)
(568,jas_clrspc_fam(jas_image_clrspc(image)
(569,cp)
(570,stepsizes)
(571,0)
(572,numilyrrates)
(573,cblksty)
(574,cp->tilegrdoffx > cp->imgareatlx ||\\n\\t  cp->tilegrdoffy > cp->imgareatly ||\\n\\t  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(575,!cp->tilewidth)
(576,cblkheightexpn)
(577,if (cp->tilegrdoffx == UINT_FAST32_MAX)
(578,cp)
(579,lyrno = 0)
(580,cp->tilewidth)
(581,tvp)
(582,id)
(583,i = 0)
(584,jpc_fixtodbl(tcp->ilyrrates[lyrno])
(585,cmptno = 0)
(586,tcp->ilyrrates[lyrno])
(587,0)
(588,tilewidth)
(589,ccp->sampgrdsubstepx)
(590,cp)
(591,JPC_MCT_RCT)
(592,jas_free(ilyrrates)
(593,numilyrrates = 0)
(594,cp->totalsize != UINT_FAST32_MAX)
(595,case OPT_NOMCT:)
(596,if (!cp->tilewidth)
(597,cp->tcp.csty)
(598,jas_tvparser_gettag(tvp)
(599,tccp->numgbits = 2)
(600,jas_image_cmptprec(image, cmptno)
(601,jas_tvparser_getval(tvp)
(602,cp->tilegrdoffx)
(603,debug)
(604,image)
(605,rawsize)
(606,if (cp->tilegrdoffx > cp->imgareatlx ||\\n\\t  cp->tilegrdoffy > cp->imgareatly ||\\n\\t  cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(607,++cmptno)
(608,ccp->sgnd = jas_image_cmptsgnd(image, cmptno)
(609,if (ratestrtosize(jas_tvparser_getval(tvp)
(610,goto error;)
(611,jas_image_cmptwidth(image, 0)
(612,char *optstr)
(613,cp)
(614,cp->tcp.intmode)
(615,JAS_CAST(int, tcp->numlyrs - 1)
(616,hsteplcm)
(617,case OPT_DEBUG:)
(618,maxrlvls)
(619,(unsigned long)
(620,atoi(jas_tvparser_getval(tvp)
(621,12)
(622,jpc_enc_cp_t)
(623,numstepsizes)
(624,)
(625,JPC_COX_TERMALL)
(626,cp->tilegrdoffy)
(627,"ignoring invalid mode %s\\n")
(628,cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)
(629,tvp)
(630,cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12)
(631,cp->tilegrdoffx = cp->imgareatlx)
(632,3)
(633,cp->totalsize - jp2overhead)
(634,)
(635,cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)
(636,)
(637,cp)
(638,tvp)
(639,tccp)
(640,rlvlno = 0)
(641,case OPT_RESET:)
(642,jas_tvparser_destroy(tvp)
(643,jas_image_numcmpts(image)
(644,tcp)
(645,JPC_COD_LRCPPRG)
(646,sgnd)
(647,break;)
(648,cp->totalsize)
(649,cp->rawsize)
(650,cp->tilegrdoffy + cp->tileheight)
(651,tcp)
(652,if (jpc_atoaf(jas_tvparser_getval(tvp)
(653,i)
(654,break;)
(655,cp->totalsize > jp2overhead)
(656,jas_eprintf("ignoring bad rate specifier %s\\n",\\n\\t\\t\\t\\t  jas_tvparser_getval(tvp)
(657,)
(658,0)
(659,jas_image_cmptwidth(image, cmptno)
(660,tcp)
(661,0)
(662,"invalid precinct width\\n")
(663,tccp->cblkwidthexpn)
(664,if (cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12)
(665,if (cp->tcp.numlyrs > 16384)
(666,0)
(667,cp)
(668,prcheightexpn = jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(669,cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(670,cp->tilegrdoffx == UINT_FAST32_MAX)
(671,prg)
(672,tccp)
(673,tileheight)
(674,cp->tccp.cblkheightexpn)
(675,jas_clrspc_fam(jas_image_clrspc(image)
(676,unsigned long)
(677,cp->tccp)
(678,numlyrs)
(679,optstr)
(680,)
(681,)
(682,&cp->tcp)
(683,if (cp->numcmpts == 3)
(684,jas_image_cmptvstep(image, cmptno)
(685,0)
(686,cmptno < jas_image_numcmpts(image)
(687,cp->tcp)
(688,cp->refgrdheight)
(689,break;)
(690,cp)
(691,tccp)
(692,tvp)
(693,cp->imgareatlx)
(694,if (!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)
(695,tcp)
(696,0)
(697,lyrno + 2)
(698,prcheightexpn)
(699,cp)
(700,jp2overhead)
(701,tcp->ilyrrates)
(702,2)
(703,cp)
(704,cp)
(705,cp->tccp)
(706,cp->imgareatlx = UINT_FAST32_MAX)
(707,break;)
(708,!cp->tileheight)
(709,cp)
(710,tilegrdoffy)
(711,enablemct)
(712,break;)
(713,cp->imgareatly)
(714,cmptno)
(715,goto error;)
(716,maxrlvls)
(717,refgrdheight)
(718,rlvlno)
(719,"invalid number of guard bits\\n")
(720,jas_tvparser_getval(tvp)
(721,tilegrdoffy)
(722,cp->tileheight)
(723,mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(724,image)
(725,cp->numtiles = cp->numhtiles * cp->numvtiles)
(726,tccp)
(727,(tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(728,tilewidth)
(729,ccp)
(730,0)
(731,cp->tilegrdoffy = atoi(jas_tvparser_getval(tvp)
(732,jas_tvparser_destroy(tvp)
(733,tcp)
(734,tileheight)
(735,memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes)
(736,tvp)
(737,cp->tcp)
(738,tcp)
(739,((double)
(740,(unsigned long)
(741,cp)
(742,tccp = &cp->tccp)
(743,image)
(744,tileheight)
(745,cp)
(746,image)
(747,cp->tccp.cblkwidthexpn < 2)
(748,15)
(749,)
(750,cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx,\\n\\t  cp->tilewidth)
(751,totalsize)
(752,cmptno)
(753,cmptno)
(754,prcwidthexpn)
(755,rlvlno)
(756,cp->rawsize = jas_image_rawsize(image)
(757,tccp)
(758,cp->tileheight)
(759,UINT_FAST32_MAX)
(760,cp->tilewidth)
(761,cp->tcp.csty |= JPC_COD_SOP)
(762,ccps)
(763,jp2overhead)
(764,)
(765,jas_image_cmptheight(image, 0)
(766,case OPT_MAXRLVLS:)
(767,cp->imgareatly = UINT_FAST32_MAX)
(768,tccp->maxrlvls)
(769,cp)
(770,tilegrdoffx)
(771,cp->ccps = 0)
(772,prec)
(773,JPC_COD_SOP)
(774,tccp->prcheightexpns)
(775,0)
(776,ilyrrates)
(777,15)
(778,ccp)
(779,6)
(780,break;)
(781,cmptno)
(782,cp->imgareatlx)
(783,ccp = cp->ccps)
(784,)
(785,ccp->stepsizes)
(786,lyrno = 0)
(787,JPC_MCT_ICT)
(788,cp)
(789,)
(790,tilegrdoffx)
(791,cblkheightexpn)
(792,tvp)
(793,case OPT_IMGAREAOFFX:)
(794,cblkwidthexpn)
(795,if (!cp->tileheight)
(796,tccp->csty)
(797,cp)
(798,0)
(799,unsigned long)
(800,cp)
(801,cp)
(802,tccp)
(803,0)
(804,)
(805,id)
(806,hsteplcm)
(807,cp->tilegrdoffy)
(808,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(809,cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx ||\\n\\t  cp->tilegrdoffy + cp->tileheight < cp->imgareatly)
(810,for (cmptno = 0; cmptno < jas_image_numcmpts(image)
(811,0)
(812,)
(813,jas_eprintf("unsupported image type\\n")
(814,hsteplcm)
(815,if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(816,vsteplcm *= jas_image_cmptvstep(image, cmptno)
(817,jas_image_t *image)
(818,cp->imgareatlx)
(819,jas_tvparser_getval(tvp)
(820,vsteplcm)
(821,cp)
(822,cp)
(823,totalsize)
(824,tcp->ilyrrates[lyrno + 1])
(825,)
(826,cp->totalsize > cp->rawsize)
(827,)
(828,tvp)
(829,ilyrrates)
(830,cp->imgareatly = atoi(jas_tvparser_getval(tvp)
(831,tilewidth)
(832,)
(833,break;)
(834,cp->tccp.numgbits)
(835,)
(836,jas_eprintf("warning: intermediate layer rates must be less than overall rate\\n")
(837,!cp->tileheight)
(838,tvp)
(839,totalsize)
(840,++lyrno)
(841,cp->tilegrdoffx + cp->tilewidth < cp->imgareatlx)
(842,jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(843,cblkheightexpn)
(844,lyrno)
(845,cp->tccp.cblkheightexpn)
(846,!(tvp = jas_tvparser_create(optstr ? optstr : "")
(847,cp->tilewidth = 0)
(848,ccp)
(849,if (!cp->tileheight)
(850,jas_image_cmptbry(image, cmptno)
(851,cblkwidthexpn)
(852,if (hsteplcm != 1)
(853,if (prcwidthexpn > 15)
(854,numlyrs)
(855,cp)
(856,goto error;)
(857,jas_taginfo_nonull(jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(858,cp)
(859,cp)
(860,cp)
(861,cp->imgareatly)
(862,jas_taginfo_nonull(jas_taginfos_lookup(encopts,\\n\\t\\t  jas_tvparser_gettag(tvp)
(863,int)
(864,tccp->csty |= JPC_COX_PRT)
(865,ilyrrates = 0)
(866,jas_tvparser_getval(tvp)
(867,tagid)
(868,JPC_POW2(cp->tccp.cblkheightexpn)
(869,cp)
(870,vsteplcm = 1)
(871,cp)
(872,tccp->cblksty = 0)
(873,jas_eprintf("must be at least one resolution level\\n")
(874,cp->totalsize == UINT_FAST32_MAX)
(875,15)
(876,0)
(877,&cp->tccp)
(878,12)
(879,cp->refgrdheight)
(880,atoi(jas_tvparser_getval(tvp)
(881,cp)
(882,++i)
(883,cp)
(884,prcheightexpn)
(885,cp->totalsize)
(886,tcp->numlyrs = 1)
(887,tccp)
(888,cp)
(889,cp->tccp.cblkheightexpn)
(890,ret)
(891,prcheightexpn)
(892,cp)
(893,tilegrdoffx)
(894,cp->numcmpts)
(895,(tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(896,enablemct)
(897,lyrno < tcp->numlyrs - 1)
(898,tagid)
(899,cp->imgareatly)
(900,cblkheightexpn)
(901,cblksty)
(902,imgareatlx)
(903,if ((tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(904,cp->tileheight = atoi(jas_tvparser_getval(tvp)
(905,jas_eprintf("ignoring invalid mode %s\\n",\\n\\t\\t\\t\\t  jas_tvparser_getval(tvp)
(906,tccp->cblksty)
(907,tccp->cblksty |= JPC_COX_SEGSYM)
(908,break;)
(909,jp2overhead)
(910,mctvalid)
(911,imgareatly)
(912,cp)
(913,lyrno)
(914,totalsize)
(915,"warning: overriding imgareatly value\\n")
(916,cp)
(917,jas_image_cmptprec(image, cmptno)
(918,)
(919,(tcp->intmode)
(920,lyrno)
(921,ilyrrates)
(922,image)
(923,JPC_COD_EPH)
(924,cp)
(925,)
(926,JPC_COX_SEGSYM)
(927,hsteplcm = 1)
(928,cp->imgareatlx)
(929,tccp)
(930,if (cp->totalsize != UINT_FAST32_MAX)
(931,tagid = jas_taginfo_nonull(jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(932,1)
(933,)
(934,"unsupported image type\\n")
(935,image)
(936,RET)
(937,cp)
(938,numvtiles)
(939,cp)
(940,jas_eprintf("warning: overriding imgareatlx value\\n")
(941,0)
(942,tccp->cblksty)
(943,if (prcheightexpn > 15)
(944,cp)
(945,JPC_COX_VSC)
(946,jas_tvparser_getval(tvp)
(947,numlyrs)
(948,if (ilyrrates)
(949,ccp->prec)
(950,tvp)
(951,cp->tccp.maxrlvls < 1)
(952,(unsigned long)
(953,vsteplcm)
(954,tcp)
(955,tccp->cblkheightexpn)
(956,prcwidthexpn)
(957,0)
(958,tccp)
(959,if (mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(960,tcp)
(961,cblkheightexpn)
(962,cp->tilegrdoffx)
(963,ccp->sampgrdsubstepx = 0)
(964,tcp->intmode)
(965,1)
(966,1)
(967,jas_tvparser_getval(tvp)
(968,imgareatlx)
(969,prcwidthexpn)
(970,tccp->cblksty)
(971,jas_eprintf("invalid tile height %lu\\n", (unsigned long)
(972,cp)
(973,cp->totalsize != UINT_FAST32_MAX)
(974,lyrno + 1)
(975,numtiles)
(976,image)
(977,tcp->mctid)
(978,cp->refgrdwidth - cp->tilegrdoffx)
(979,cp->refgrdheight - cp->tilegrdoffy)
(980,cp->numtiles)
(981,prcwidthexpn)
(982,tccp)
(983,tccp)
(984,case OPT_LAZY:)
(985,tcp)
(986,cp)
(987,cp->ccps)
(988,MODE_INT)
(989,cblksty)
(990,totalsize)
(991,cp->imgareatlx)
(992,tccp)
(993,6)
(994,break;)
(995,stepsizes)
(996,!(cp->ccps = jas_malloc(cp->numcmpts * sizeof(jpc_enc_ccp_t)
(997,tcp)
(998,jp2overhead = 0)
(999,JPC_COX_RESET)
(1000,tcp->intmode)
(1001,++lyrno)
(1002,cp->refgrdheight)
(1003,false)
(1004,jas_eprintf("invalid precinct height\\n")
(1005,cp)
(1006,if (jpc_fixtodbl(tcp->ilyrrates[lyrno])
(1007,if (cp->tccp.numgbits > 8)
(1008,UINT_FAST32_MAX)
(1009,if (cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn > 12)
(1010,jas_eprintf("invalid code block width %d\\n",\\n\\t\\t  JPC_POW2(cp->tccp.cblkwidthexpn)
(1011,cp->refgrdheight = 0)
(1012,1)
(1013,12)
(1014,cp->numvtiles)
(1015,cp->imgareatly = 0)
(1016,break;)
(1017,jas_eprintf("warning: specified rate is unreasonably large (%lu > %lu)
(1018,sizeof(ccp->stepsizes)
(1019,cp->refgrdwidth = cp->imgareatlx + jas_image_width(image)
(1020,if (!(tvp = jas_tvparser_create(optstr ? optstr : "")
(1021,"invalid tile width %lu\\n")
(1022,cp->tccp.cblkheightexpn > 12)
(1023,numlyrs)
(1024,jas_image_cmpthstep(image, cmptno)
(1025,tilewidth)
(1026,tcp->ilyrrates)
(1027,cp)
(1028,tcp)
(1029,if (cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12)
(1030,)
(1031,cp)
(1032,cp->tilegrdoffx)
(1033,cmptno)
(1034,cp->imgareatly)
(1035,goto error;)
(1036,numcmpts)
(1037,if (jas_image_cmptbrx(image, cmptno)
(1038,image)
(1039,tcp->ilyrrates = 0)
(1040,cp)
(1041,)
(1042,csty)
(1043,case OPT_IMGAREAOFFY:)
(1044,)
(1045,jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1046,break;)
(1047,cmptno = 0)
(1048,cp->imgareatly)
(1049,image)
(1050,cp->tccp)
(1051,image)
(1052,jas_eprintf("code block size too large\\n")
(1053,tilegrdoffx)
(1054,tccp->cblksty)
(1055,0)
(1056,jas_image_cmptprec(image, cmptno)
(1057,cp->refgrdheight)
(1058,cblksty)
(1059,mctvalid)
(1060,cp->tilewidth)
(1061,)
(1062,tccp->cblkheightexpn)
(1063,"code block size too large\\n")
(1064,cp->tcp)
(1065,numvtiles)
(1066,for (cmptno = 0, ccp = cp->ccps; cmptno < JAS_CAST(int, cp->numcmpts)
(1067,cp)
(1068,cp)
(1069,ccps)
(1070,!(ret = jas_tvparser_next(tvp)
(1071,cp)
(1072,0)
(1073,jas_image_cmptsgnd(image, cmptno)
(1074,cp->tccp.cblkwidthexpn)
(1075,mctvalid)
(1076,tilewidth)
(1077,ccp)
(1078,case OPT_EPH:)
(1079,++cmptno)
(1080,cp->imgareatly)
(1081,goto error;)
(1082,cp = 0)
(1083,)
(1084,tcp->numlyrs)
(1085,cp)
(1086,jas_image_cmpthstep(image, cmptno)
(1087,prgordtab)
(1088,refgrdwidth)
(1089,jas_image_clrspc(image)
(1090,JPC_COX_RFT)
(1091,while (!(ret = jas_tvparser_next(tvp)
(1092,(unsigned long)
(1093,prcwidthexpn)
(1094,if (!cp->tilewidth)
(1095,jas_image_cmpthstep(image, cmptno)
(1096,cp)
(1097,goto error;)
(1098,imgareatlx)
(1099,jas_image_cmptbrx(image, cmptno)
(1100,tccp)
(1101,cp->tcp)
(1102,cp->tccp.numgbits = atoi(jas_tvparser_getval(tvp)
(1103,tccp)
(1104,(unsigned long)
(1105,tvp)
(1106,cp)
(1107,15)
(1108,tcp->intmode)
(1109,cp->imgareatlx)
(1110,)
(1111,cp)
(1112,tcp->ilyrrates)
(1113,jas_tvparser_getval(tvp)
(1114,ccp)
(1115,tvp)
(1116,tcp->prg)
(1117,tcp->numlyrs)
(1118,image)
(1119,enablemct)
(1120,jas_image_cmptwidth(image, cmptno)
(1121,)
(1122,refgrdheight)
(1123,ilyrrates)
(1124,jas_tvparser_getval(tvp)
(1125,jas_image_clrspc(image)
(1126,)
(1127,0)
(1128,jpc_atoaf(jas_tvparser_getval(tvp)
(1129,imgareatlx)
(1130,ccp->numstepsizes)
(1131,cp->tccp)
(1132,tcp->intmode = true)
(1133,prcheightexpns)
(1134,cp)
(1135,tilegrdoffx)
(1136,ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno)
(1137,atoi(jas_tvparser_getval(tvp)
(1138,cp->totalsize = (cp->totalsize > jp2overhead)
(1139,JAS_CAST(int, cp->numcmpts)
(1140,0)
(1141,totalsize)
(1142,numhtiles)
(1143,lyrno)
(1144,tcp->numlyrs - 1)
(1145,sizeof(jpc_enc_ccp_t)
(1146,atoi(jas_tvparser_getval(tvp)
(1147,cmptno)
(1148,cp->tilewidth)
(1149,imgareatly)
(1150,cp->tccp)
(1151,UINT_FAST32_MAX)
(1152,for (cmptno = 0; cmptno < jas_image_numcmpts(image)
(1153,enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(1154,tccp->cblkwidthexpn)
(1155,case OPT_PRCHEIGHT:)
(1156,tvp)
(1157,jas_image_cmptsgnd(image, 0)
(1158,tvp)
(1159,ccp->sampgrdsubstepx = 0)
(1160,tccp->prcwidthexpns[rlvlno] = prcwidthexpn)
(1161,cp)
(1162,cp->ccps)
(1163,)
(1164,break;)
(1165,cmptno)
(1166,cblksty)
(1167,tcp)
(1168,tccp->cblksty |= JPC_COX_PTERM)
(1169,cp->imgareatlx)
(1170,ccp->sgnd)
(1171,cp)
(1172,!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1)
(1173,tccp)
(1174,break;)
(1175,prcheightexpn)
(1176,cp->tccp.cblkheightexpn < 2 || cp->tccp.cblkheightexpn > 12)
(1177,jas_free(ilyrrates)
(1178,)
(1179,tccp->cblkwidthexpn =\\n\\t\\t\\t  jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(1180,cp->refgrdheight = cp->imgareatly + jas_image_height(image)
(1181,jas_tvparser_getval(tvp)
(1182,jas_eprintf("invalid tile width %lu\\n", (unsigned long)
(1183,!cp->tilewidth)
(1184,tcp)
(1185,0)
(1186,case OPT_RATE:)
(1187,unsigned long)
(1188,jas_image_cmptheight(image, cmptno)
(1189,UINT_FAST32_MAX)
(1190,cp->tilewidth)
(1191,cp)
(1192,lyrno)
(1193,0)
(1194,tcp)
(1195,true)
(1196,if (cp->totalsize == UINT_FAST32_MAX && (!cp->tcp.intmode)
(1197,tccp->cblksty)
(1198,cp->tccp.cblkwidthexpn < 2 || cp->tccp.cblkwidthexpn > 12)
(1199,jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1200,jas_image_cmptwidth(image, cmptno)
(1201,tccp->cblksty |= JPC_COX_RESET)
(1202,cp)
(1203,if (!(tcp->ilyrrates = jas_malloc((tcp->numlyrs - 1)
(1204,tccp->qmfbid)
(1205,tilegrdoffy)
(1206,tcp->mctid)
(1207,jas_image_cmptprec(image, 0)
(1208,atoi(jas_tvparser_getval(tvp)
(1209,cp->totalsize)
(1210,cp)
(1211,jas_eprintf("too many layers\\n")
(1212,totalsize)
(1213,cp)
(1214,jas_image_numcmpts(image)
(1215,tagid = jas_taginfo_nonull(jas_taginfos_lookup(prgordtab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1216,sizeof(jpc_fix_t)
(1217,jas_eprintf("cannot use real mode for lossless coding\\n")
(1218,tvp = jas_tvparser_create(optstr ? optstr : "")
(1219,(double)
(1220,jpc_enc_cp_destroy(cp)
(1221,lyrno)
(1222,cp->imgareatlx + jas_image_width(image)
(1223,cp)
(1224,ilyrrates[i])
(1225,intmode)
(1226,cp->tilegrdoffy)
(1227,1)
(1228,jas_eprintf("warning: ignoring invalid option %s\\n",\\n\\t\\t\\t jas_tvparser_gettag(tvp)
(1229,tcp)
(1230,image)
(1231,image)
(1232,cmptno)
(1233,)
(1234,"warning: ignoring invalid option %s\\n")
(1235,case OPT_ILYRRATES:)
(1236,i)
(1237,)
(1238,(cp->totalsize > jp2overhead)
(1239,return cp;)
(1240,&cp->totalsize)
(1241,mctvalid)
(1242,cp->tilegrdoffy)
(1243,vsteplcm)
(1244,tccp->numgbits)
(1245,rlvlno)
(1246,goto error;)
(1247,ccp)
(1248,case OPT_NUMGBITS:)
(1249,cp->tilewidth)
(1250,ilyrrates)
(1251,cp)
(1252,tvp = 0)
(1253,cp->tccp.cblkwidthexpn + cp->tccp.cblkheightexpn)
(1254,cmptno)
(1255,0)
(1256,cp->numcmpts)
(1257,cmptno)
(1258,prg)
(1259,i < JAS_CAST(int, tcp->numlyrs - 1)
(1260,cp)
(1261,goto error;)
(1262,numgbits)
(1263,tccp->cblksty |= JPC_COX_LAZY)
(1264,cp)
(1265,prcheightexpn = 15)
(1266,1)
(1267,cp->tilewidth = atoi(jas_tvparser_getval(tvp)
(1268,jas_image_width(image)
(1269,sampgrdstepy)
(1270,jas_image_cmptbry(image, cmptno)
(1271,++ccp)
(1272,prcwidthexpn != 15)
(1273,cblksty)
(1274,cmptno)
(1275,jas_image_cmptbrx(image, cmptno)
(1276,cblkwidthexpn)
(1277,)
(1278,jas_clrspc_fam(jas_image_clrspc(image)
(1279,jas_tvparser_getval(tvp)
(1280,cp->tccp.cblkheightexpn)
(1281,cp->imgareatlx == UINT_FAST32_MAX)
(1282,tccp->cblksty)
(1283,case OPT_SEGSYM:)
(1284,case OPT_TILEGRDOFFY:)
(1285,totalsize)
(1286,0)
(1287,)
(1288,atoi(jas_tvparser_getval(tvp)
(1289,tilewidth)
(1290,cp->tilegrdoffx = atoi(jas_tvparser_getval(tvp)
(1291,cp)
(1292,rlvlno)
(1293,tccp)
(1294,jas_image_height(image)
(1295,)
(1296,1)
(1297,tccp->cblkheightexpn = 6)
(1298,cp->numcmpts)
(1299,cp->tilegrdoffx = UINT_FAST32_MAX)
(1300,)
(1301,cmptno)
(1302,mctvalid = false)
(1303,tvp)
(1304,tvp)
(1305,cp->tccp.cblkwidthexpn)
(1306,break;)
(1307,case OPT_VCAUSAL:)
(1308,cmptno)
(1309,jas_image_bry(image)
(1310,prcwidthexpns)
(1311,cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy,\\n\\t  cp->tileheight)
(1312,0)
(1313,)
(1314,cp->refgrdwidth)
(1315,JPC_COX_PRT)
(1316,cp->numcmpts)
(1317,tccp)
(1318,imgareatly)
(1319,"")
(1320,sampgrdstepx)
(1321,cmptno < jas_image_numcmpts(image)
(1322,cp)
(1323,1)
(1324,cp)
(1325,cp->tilegrdoffx + cp->tilewidth)
(1326,goto error;)
(1327,tccp->prcwidthexpns)
(1328,tccp)
(1329,)
(1330,cp)
(1331,tccp)
(1332,0)
(1333,tcp->csty = 0)
(1334,numilyrrates)
(1335,cp->imgareatlx)
(1336,cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx)
(1337,cp->tcp)
(1338,numgbits)
(1339,tcp)
(1340,cp)
(1341,cp->totalsize)
(1342,1)
(1343,ccp)
(1344,cp->tileheight = 0)
(1345,refgrdwidth)
(1346,tccp)
(1347,cp)
(1348,ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno)
(1349,cp->tileheight)
(1350,tccp->cblksty |= JPC_COX_VSC)
(1351,ilyrrates && numilyrrates > 0)
(1352,0)
(1353,cp)
(1354,cp)
(1355,cp)
(1356,cp->totalsize)
(1357,"invalid code block width %d\\n")
(1358,cp)
(1359,image)
(1360,cp->debug = atoi(jas_tvparser_getval(tvp)
(1361,jas_image_cmptbrx(image, cmptno)
(1362,atoi(jas_tvparser_getval(tvp)
(1363,cp)
(1364,maxrlvls)
(1365,ccp)
(1366,jas_eprintf("ignoring invalid progression order %s\\n",\\n\\t\\t\\t\\t  jas_tvparser_getval(tvp)
(1367,ccp->sampgrdsubstepx)
(1368,0)
(1369,csty)
(1370,tileheight)
(1371,cp)
(1372,cp->totalsize)
(1373,jas_tvparser_getval(tvp)
(1374,cmptno = 0)
(1375,enablemct)
(1376,jpc_floorlog2(atoi(jas_tvparser_getval(tvp)
(1377,prcwidthexpn > 15)
(1378,jas_tvparser_gettag(tvp)
(1379,)
(1380,ccp)
(1381,mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)
(1382,lyrno)
(1383,ret = jas_tvparser_next(tvp)
(1384,totalsize)
(1385,ccp->numstepsizes = 0)
(1386,tileheight)
(1387,ilyrrates)
(1388,rawsize)
(1389,tcp)
(1390,goto error;)
(1391,jpc_enc_ccp_t)
(1392,if (cp)
(1393,tilewidth)
(1394,tcp->ilyrrates)
(1395,if (cp->imgareatly == UINT_FAST32_MAX)
(1396,cp->numvtiles)
(1397,jas_eprintf("invalid precinct width\\n")
(1398,cp->tilegrdoffy == UINT_FAST32_MAX)
(1399,JPC_COX_LAZY)
(1400,jas_taginfos_lookup(modetab,\\n\\t\\t\\t  jas_tvparser_getval(tvp)
(1401,ccp->stepsizes)
(1402,cp)
(1403,tccp->maxrlvls)
(1404,image)
(1405,tagid)
-----cfg-----
(1024,1033)
(1026,1024)
(1028,1026)
(1029,1021)
(1031,1029)
(7,43)
(1033,1031)
(1037,1054)
(1038,1037)
(1041,1045)
(1041,1047)
(1042,1041)
(1045,1047)
(1047,1049)
(1049,1052)
(1052,1054)
(39,46)
(41,39)
(43,41)
(46,51)
(49,61)
(49,73)
(51,49)
(54,51)
(58,68)
(58,54)
(59,64)
(61,59)
(64,58)
(68,54)
(70,78)
(70,80)
(71,70)
(73,71)
(77,1054)
(78,77)
(80,83)
(83,92)
(86,102)
(88,86)
(89,88)
(90,95)
(92,90)
(93,89)
(95,93)
(98,103)
(100,98)
(102,100)
(103,278)
(103,115)
(106,103)
(109,125)
(111,109)
(112,111)
(113,118)
(115,113)
(116,112)
(118,116)
(121,126)
(123,121)
(125,123)
(126,136)
(126,106)
(129,126)
(133,129)
(133,145)
(134,133)
(136,134)
(139,155)
(141,139)
(142,141)
(143,148)
(145,143)
(146,142)
(148,146)
(151,156)
(153,151)
(155,153)
(156,166)
(156,129)
(159,156)
(163,159)
(163,172)
(164,163)
(166,164)
(171,184)
(172,179)
(175,171)
(177,175)
(179,177)
(180,195)
(180,159)
(182,180)
(184,182)
(185,184)
(186,188)
(188,185)
(192,186)
(192,204)
(193,192)
(195,193)
(198,214)
(200,198)
(201,200)
(202,207)
(204,202)
(205,201)
(207,205)
(210,215)
(212,210)
(214,212)
(215,221)
(215,186)
(218,215)
(221,229)
(223,239)
(225,223)
(226,225)
(227,232)
(229,227)
(230,226)
(232,230)
(235,240)
(237,235)
(239,237)
(240,250)
(240,218)
(243,240)
(247,257)
(247,243)
(248,247)
(250,248)
(254,264)
(254,269)
(255,254)
(257,255)
(260,269)
(262,260)
(264,262)
(266,276)
(266,243)
(267,266)
(269,267)
(272,243)
(274,272)
(276,274)
(278,280)
(278,284)
(280,284)
(284,289)
(289,292)
(292,1042)
(292,298)
(295,292)
(298,301)
(301,304)
(304,307)
(307,310)
(310,317)
(315,321)
(317,315)
(321,328)
(321,342)
(325,333)
(326,325)
(328,326)
(331,335)
(333,331)
(335,726)
(339,346)
(341,339)
(342,341)
(346,350)
(348,353)
(350,348)
(352,362)
(353,352)
(356,372)
(358,356)
(359,358)
(360,365)
(362,360)
(363,359)
(365,363)
(368,373)
(370,368)
(372,370)
(373,385)
(373,575)
(376,373)
(379,395)
(381,379)
(382,381)
(383,388)
(385,383)
(386,382)
(388,386)
(391,396)
(393,391)
(395,393)
(396,406)
(396,376)
(399,396)
(403,399)
(403,415)
(404,403)
(406,404)
(409,425)
(411,409)
(412,411)
(413,418)
(415,413)
(416,412)
(418,416)
(421,426)
(423,421)
(425,423)
(426,436)
(426,399)
(429,426)
(433,429)
(433,442)
(434,433)
(436,434)
(441,454)
(442,449)
(445,441)
(447,445)
(449,447)
(450,465)
(450,429)
(452,450)
(454,452)
(455,454)
(456,458)
(458,455)
(462,456)
(462,474)
(463,462)
(465,463)
(468,484)
(470,468)
(471,470)
(472,477)
(474,472)
(475,471)
(477,475)
(480,485)
(482,480)
(484,482)
(485,494)
(485,456)
(488,485)
(492,502)
(492,488)
(494,492)
(496,510)
(498,496)
(499,498)
(500,505)
(502,500)
(503,499)
(505,503)
(506,517)
(508,506)
(510,508)
(513,518)
(515,513)
(517,515)
(518,528)
(518,543)
(521,518)
(525,534)
(525,521)
(526,525)
(528,526)
(531,521)
(533,531)
(534,533)
(539,544)
(541,539)
(543,541)
(544,553)
(544,557)
(547,544)
(550,547)
(551,550)
(553,551)
(557,566)
(557,488)
(560,557)
(563,560)
(564,567)
(566,564)
(567,563)
(569,585)
(571,569)
(572,571)
(573,578)
(575,573)
(576,572)
(578,576)
(581,586)
(583,581)
(585,583)
(586,598)
(586,657)
(589,586)
(592,608)
(594,592)
(595,594)
(596,601)
(598,596)
(599,595)
(601,599)
(604,609)
(606,604)
(608,606)
(609,619)
(609,589)
(612,609)
(616,612)
(616,624)
(617,616)
(619,617)
(624,631)
(627,643)
(627,612)
(629,627)
(631,629)
(632,631)
(636,653)
(636,632)
(639,648)
(641,639)
(643,641)
(644,636)
(646,644)
(648,646)
(652,1054)
(653,652)
(655,660)
(657,655)
(659,664)
(660,659)
(664,668)
(664,674)
(668,695)
(674,678)
(674,695)
(678,683)
(682,689)
(682,695)
(683,682)
(683,685)
(685,682)
(689,692)
(692,695)
(695,699)
(698,705)
(698,707)
(699,698)
(705,707)
(707,709)
(707,714)
(709,714)
(714,719)
(716,317)
(716,726)
(717,716)
(717,722)
(719,717)
(722,716)
(726,732)
(726,729)
(729,732)
(732,734)
(732,744)
(734,744)
(738,754)
(740,738)
(741,740)
(742,747)
(744,742)
(745,741)
(747,745)
(750,755)
(752,750)
(754,752)
(755,767)
(755,960)
(758,755)
(761,777)
(763,761)
(764,763)
(765,770)
(767,765)
(768,764)
(770,768)
(773,778)
(775,773)
(777,775)
(778,788)
(778,758)
(781,778)
(785,781)
(785,797)
(786,785)
(788,786)
(791,807)
(793,791)
(794,793)
(795,800)
(797,795)
(798,794)
(800,798)
(803,808)
(805,803)
(807,805)
(808,818)
(808,781)
(811,808)
(815,811)
(815,824)
(816,815)
(818,816)
(823,836)
(824,831)
(827,823)
(829,827)
(831,829)
(832,847)
(832,811)
(834,832)
(836,834)
(837,836)
(838,840)
(840,837)
(844,838)
(844,856)
(845,844)
(847,845)
(850,866)
(852,850)
(853,852)
(854,859)
(856,854)
(857,853)
(859,857)
(862,867)
(864,862)
(866,864)
(867,876)
(867,838)
(870,867)
(874,884)
(874,870)
(876,874)
(878,892)
(880,878)
(881,880)
(882,887)
(884,882)
(885,881)
(887,885)
(888,902)
(888,928)
(890,888)
(892,890)
(898,903)
(900,898)
(902,900)
(903,913)
(903,928)
(906,903)
(910,919)
(910,906)
(911,910)
(913,911)
(916,906)
(918,916)
(919,918)
(924,929)
(926,924)
(928,926)
(929,938)
(929,942)
(932,929)
(935,932)
(936,935)
(938,936)
(942,951)
(942,870)
(945,942)
(948,945)
(949,952)
(951,949)
(952,948)
(954,970)
(956,954)
(957,956)
(958,963)
(960,958)
(961,957)
(963,961)
(966,971)
(968,966)
(970,968)
(971,983)
(971,295)
(974,971)
(977,993)
(979,977)
(980,979)
(981,986)
(983,981)
(984,980)
(986,984)
(989,994)
(991,989)
(993,991)
(994,1004)
(994,974)
(997,994)
(1001,997)
(1001,1009)
(1002,1001)
(1004,1002)
(1009,1016)
(1012,1028)
(1012,997)
(1014,1012)
(1016,1014)
(1017,1016)
(1021,1038)
(1021,1017)
-----path-----
7,43,41,39,46,51,49,73,71,70,78,77,1054
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,280,284,289,292,1042,1041,1045,1047,1049,1052,1054
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,280,284,289,292,1042,1041,1047,1049,1052,1054
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,280,284,289,292,298,301,304,307,310,317,315,321,328,326,325,333,331,335,726,732,734,744,742,747,745,741,740
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,280,284,289,292,298,301,304,307,310,317,315,321,328,326,325,333,331,335,726,732,744,742,747,745,741,740,738
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,280,284,289,292,298,301,304,307,310,317,315,321,328,326,325,333,331,335,726,729,732,734,744,742,747,745,741
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,280,284,289,292,298,301,304,307,310,317,315,321,328,326,325,333,331,335,726,729,732,744,742,747,745,741,740
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,280,284,289,292,298,301,304,307,310,317,315,321,342,341,339,346,350,348,353,352,362,360,365,363,359,358,356
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,284,289,292,1042,1041,1045,1047,1049,1052,1054
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,284,289,292,1042,1041,1047,1049,1052,1054
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,284,289,292,298,301,304,307,310,317,315,321,328,326,325,333,331,335,726,732,734,744,742,747,745,741,740,738
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,284,289,292,298,301,304,307,310,317,315,321,328,326,325,333,331,335,726,732,744,742,747,745,741,740,738,754
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,284,289,292,298,301,304,307,310,317,315,321,328,326,325,333,331,335,726,729,732,734,744,742,747,745,741,740
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,284,289,292,298,301,304,307,310,317,315,321,328,326,325,333,331,335,726,729,732,744,742,747,745,741,740,738
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,278,284,289,292,298,301,304,307,310,317,315,321,342,341,339,346,350,348,353,352,362,360,365,363,359,358,356,372
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,136,134,133,129,126,106,103,278,280,284,289,292,1042,1041,1045,1047,1049
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,136,134,133,129,126,106,103,278,280,284,289,292,1042,1041,1047,1049,1052
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,136,134,133,129,126,106,103,278,280,284,289,292,298,301,304,307,310
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,136,134,133,129,126,106,103,278,284,289,292,1042,1041,1045,1047,1049,1052
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,136,134,133,129,126,106,103,278,284,289,292,1042,1041,1047,1049,1052,1054
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,136,134,133,129,126,106,103,278,284,289,292,298,301,304,307,310,317
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,136,134,133,145,143,148,146,142,141,139,155,153,151,156,166,164,163
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,136,134,133,145,143,148,146,142,141,139,155,153,151,156,129,126,106
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,106,103,278,280,284,289,292,1042,1041,1045,1047,1049,1052,1054
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,106,103,278,280,284,289,292,1042,1041,1047,1049,1052,1054
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,106,103,278,280,284,289,292,298,301,304,307,310,317,315,321,328,326
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,106,103,278,280,284,289,292,298,301,304,307,310,317,315,321,342,341
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,106,103,278,284,289,292,1042,1041,1045,1047,1049,1052,1054
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,106,103,278,284,289,292,1042,1041,1047,1049,1052,1054
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,106,103,278,284,289,292,298,301,304,307,310,317,315,321,328,326,325
7,43,41,39,46,51,49,73,71,70,80,83,92,90,95,93,89,88,86,102,100,98,103,115,113,118,116,112,111,109,125,123,121,126,106,103,278,284,289,292,298,301,304,307,310,317,315,321,342,341,339
-----cfgNode-----
5,<global>
6,<empty>
7,int rateallocate (jpc_enc_t *enc,int numlyrs,uint_fast32_t *cumlens)
8,jpc_enc_t *enc
9,int numlyrs
10,uint_fast32_t *cumlens
11,<empty>
12,jpc_flt_t lo
13,jpc_flt_t hi
14,jas_stream_t* out
15,long cumlen
16,int lyrno
17,jpc_flt_t thresh
18,jpc_flt_t goodthresh
19,int success
20,long pos
21,long oldpos
22,int numiters
23,jpc_enc_tcmpt_t* comp
24,jpc_enc_tcmpt_t* endcomps
25,jpc_enc_rlvl_t* lvl
26,jpc_enc_rlvl_t* endlvls
27,jpc_enc_band_t* band
28,jpc_enc_band_t* endbands
29,jpc_enc_cblk_t* cblk
30,jpc_enc_cblk_t* endcblks
31,jpc_enc_pass_t* pass
32,jpc_enc_pass_t* endpasses
33,jpc_enc_pass_t* pass1
34,jpc_flt_t mxrdslope
35,jpc_flt_t mnrdslope
36,jpc_enc_tile_t* tile
37,jpc_enc_prc_t* prc
38,int prcno
39,tile = enc->curtile
40,tile
41,enc->curtile
42,enc
43,curtile
44,for (lyrno = 1;lyrno < numlyrs - 1;++lyrno)
45,<empty>
46,lyrno = 1
47,lyrno
48,1
49,lyrno < numlyrs - 1
50,lyrno
51,numlyrs - 1
52,numlyrs
53,1
54,++lyrno
55,lyrno
56,<empty>
57,if (cumlens[lyrno - 1] > cumlens[lyrno])
58,cumlens[lyrno - 1] > cumlens[lyrno]
59,cumlens[lyrno - 1]
60,cumlens
61,lyrno - 1
62,lyrno
63,1
64,cumlens[lyrno]
65,cumlens
66,lyrno
67,<empty>
68,abort()
69,if (!(out = jas_stream_memopen(0, 0)))
70,!(out = jas_stream_memopen(0, 0))
71,out = jas_stream_memopen(0, 0)
72,out
73,jas_stream_memopen(0, 0)
74,0
75,0
76,<empty>
77,return -1;
78,-1
79,1
80,mnrdslope = DBL_MAX
81,mnrdslope
82,DBL_MAX
83,mxrdslope = 0
84,mxrdslope
85,0
86,endcomps = &tile->tcmpts[tile->numtcmpts]
87,endcomps
88,&tile->tcmpts[tile->numtcmpts]
89,tile->tcmpts[tile->numtcmpts]
90,tile->tcmpts
91,tile
92,tcmpts
93,tile->numtcmpts
94,tile
95,numtcmpts
96,for (comp = tile->tcmpts;comp != endcomps;++comp)
97,<empty>
98,comp = tile->tcmpts
99,comp
100,tile->tcmpts
101,tile
102,tcmpts
103,comp != endcomps
104,comp
105,endcomps
106,++comp
107,comp
108,<empty>
109,endlvls = &comp->rlvls[comp->numrlvls]
110,endlvls
111,&comp->rlvls[comp->numrlvls]
112,comp->rlvls[comp->numrlvls]
113,comp->rlvls
114,comp
115,rlvls
116,comp->numrlvls
117,comp
118,numrlvls
119,for (lvl = comp->rlvls;lvl != endlvls;++lvl)
120,<empty>
121,lvl = comp->rlvls
122,lvl
123,comp->rlvls
124,comp
125,rlvls
126,lvl != endlvls
127,lvl
128,endlvls
129,++lvl
130,lvl
131,<empty>
132,if (!lvl->bands)
133,!lvl->bands
134,lvl->bands
135,lvl
136,bands
137,<empty>
138,continue;
139,endbands = &lvl->bands[lvl->numbands]
140,endbands
141,&lvl->bands[lvl->numbands]
142,lvl->bands[lvl->numbands]
143,lvl->bands
144,lvl
145,bands
146,lvl->numbands
147,lvl
148,numbands
149,for (band = lvl->bands;band != endbands;++band)
150,<empty>
151,band = lvl->bands
152,band
153,lvl->bands
154,lvl
155,bands
156,band != endbands
157,band
158,endbands
159,++band
160,band
161,<empty>
162,if (!band->data)
163,!band->data
164,band->data
165,band
166,data
167,<empty>
168,continue;
169,for (prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
170,<empty>
171,prcno = 0, prc = band->prcs
172,prcno = 0
173,prcno
174,0
175,prc = band->prcs
176,prc
177,band->prcs
178,band
179,prcs
180,prcno < lvl->numprcs
181,prcno
182,lvl->numprcs
183,lvl
184,numprcs
185,++prcno, ++prc
186,++prcno
187,prcno
188,++prc
189,prc
190,<empty>
191,if (!prc->cblks)
192,!prc->cblks
193,prc->cblks
194,prc
195,cblks
196,<empty>
197,continue;
198,endcblks = &prc->cblks[prc->numcblks]
199,endcblks
200,&prc->cblks[prc->numcblks]
201,prc->cblks[prc->numcblks]
202,prc->cblks
203,prc
204,cblks
205,prc->numcblks
206,prc
207,numcblks
208,for (cblk = prc->cblks;cblk != endcblks;++cblk)
209,<empty>
210,cblk = prc->cblks
211,cblk
212,prc->cblks
213,prc
214,cblks
215,cblk != endcblks
216,cblk
217,endcblks
218,++cblk
219,cblk
220,<empty>
221,calcrdslopes(cblk)
222,cblk
223,endpasses = &cblk->passes[cblk->numpasses]
224,endpasses
225,&cblk->passes[cblk->numpasses]
226,cblk->passes[cblk->numpasses]
227,cblk->passes
228,cblk
229,passes
230,cblk->numpasses
231,cblk
232,numpasses
233,for (pass = cblk->passes;pass != endpasses;++pass)
234,<empty>
235,pass = cblk->passes
236,pass
237,cblk->passes
238,cblk
239,passes
240,pass != endpasses
241,pass
242,endpasses
243,++pass
244,pass
245,<empty>
246,if (pass->rdslope > 0)
247,pass->rdslope > 0
248,pass->rdslope
249,pass
250,rdslope
251,0
252,<empty>
253,if (pass->rdslope < mnrdslope)
254,pass->rdslope < mnrdslope
255,pass->rdslope
256,pass
257,rdslope
258,mnrdslope
259,<empty>
260,mnrdslope = pass->rdslope
261,mnrdslope
262,pass->rdslope
263,pass
264,rdslope
265,if (pass->rdslope > mxrdslope)
266,pass->rdslope > mxrdslope
267,pass->rdslope
268,pass
269,rdslope
270,mxrdslope
271,<empty>
272,mxrdslope = pass->rdslope
273,mxrdslope
274,pass->rdslope
275,pass
276,rdslope
277,if (jas_getdbglevel())
278,jas_getdbglevel()
279,<empty>
280,jas_eprintf("min rdslope = %f max rdslope = %f\n", mnrdslope, mxrdslope)
281,"min rdslope = %f max rdslope = %f\n"
282,mnrdslope
283,mxrdslope
284,jpc_init_t2state(enc, 1)
285,enc
286,1
287,for (lyrno = 0;lyrno < numlyrs;++lyrno)
288,<empty>
289,lyrno = 0
290,lyrno
291,0
292,lyrno < numlyrs
293,lyrno
294,numlyrs
295,++lyrno
296,lyrno
297,<empty>
298,lo = mnrdslope
299,lo
300,mnrdslope
301,hi = mxrdslope
302,hi
303,mxrdslope
304,success = 0
305,success
306,0
307,goodthresh = 0
308,goodthresh
309,0
310,numiters = 0
311,numiters
312,0
313,do {
314,
315,			cumlen = cumlens[lyrno];
316,			if (cumlen == UINT_FAST32_MAX) {
317,				/* Only the last layer can be free of a rate
318,				  constraint (e.g., for lossless coding). */
319,				assert(lyrno == numlyrs - 1);
320,				goodthresh = -1;
321,				success = 1;
322,				break;
323,			}
324,
325,			thresh = (lo + hi) / 2;
326,
327,			/* Save the tier 2 coding state. */
328,			jpc_save_t2state(enc);
329,			oldpos = jas_stream_tell(out);
330,			assert(oldpos >= 0);
331,
332,			/* Assign all passes with R-D slopes greater than or
333,			  equal to the current threshold to this layer. */
334,			endcomps = &tile->tcmpts[tile->numtcmpts];
335,			for (comp = tile->tcmpts; comp != endcomps; ++comp) {
336,				endlvls = &comp->rlvls[comp->numrlvls];
337,				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {
338,					if (!lvl->bands) {
339,						continue;
340,					}
341,					endbands = &lvl->bands[lvl->numbands];
342,					for (band = lvl->bands; band != endbands; ++band) {
343,						if (!band->data) {
344,							continue;
345,						}
346,						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {
347,							if (!prc->cblks) {
348,								continue;
349,							}
350,							endcblks = &prc->cblks[prc->numcblks];
351,							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {
352,								if (cblk->curpass) {
353,									endpasses = &cblk->passes[cblk->numpasses];
354,									pass1 = cblk->curpass;
355,									for (pass = cblk->curpass; pass != endpasses; ++pass) {
356,										if (pass->rdslope >= thresh) {
357,											pass1 = &pass[1];
358,										}
359,									}
360,									for (pass = cblk->curpass; pass != pass1; ++pass) {
361,										pass->lyrno = lyrno;
362,									}
363,									for (; pass != endpasses; ++pass) {
364,										pass->lyrno = -1;
365,									}
366,								}
367,							}
368,						}
369,					}
370,				}
371,			}
372,
373,			/* Perform tier 2 coding. */
374,			endcomps = &tile->tcmpts[tile->numtcmpts];
375,			for (comp = tile->tcmpts; comp != endcomps; ++comp) {
376,				endlvls = &comp->rlvls[comp->numrlvls];
377,				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {
378,					if (!lvl->bands) {
379,						continue;
380,					}
381,					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {
382,						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {
383,							return -1;
384,						}
385,					}
386,				}
387,			}
388,
389,			pos = jas_stream_tell(out);
390,
391,			/* Check the rate constraint. */
392,			assert(pos >= 0);
393,			if (pos > cumlen) {
394,				/* The rate is too high. */
395,				lo = thresh;
396,			} else if (pos <= cumlen) {
397,				/* The rate is low enough, so try higher. */
398,				hi = thresh;
399,				if (!success || thresh < goodthresh) {
400,					goodthresh = thresh;
401,					success = 1;
402,				}
403,			}
404,
405,			/* Save the tier 2 coding state. */
406,			jpc_restore_t2state(enc);
407,			if (jas_stream_seek(out, oldpos, SEEK_SET) < 0) {
408,				abort();
409,			}
410,
411,if (jas_getdbglevel()) {
412,jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);
413,}
414,
415,			++numiters;
416,		} while (lo < hi - 1e-3 && numiters < 32);
417,<empty>
418,cumlen = cumlens[lyrno]
419,cumlen
420,cumlens[lyrno]
421,cumlens
422,lyrno
423,if (cumlen == UINT_FAST32_MAX)
424,cumlen == UINT_FAST32_MAX
425,cumlen
426,UINT_FAST32_MAX
427,<empty>
428,assert(lyrno == numlyrs - 1)
429,lyrno == numlyrs - 1
430,lyrno
431,numlyrs - 1
432,numlyrs
433,1
434,goodthresh = -1
435,goodthresh
436,-1
437,1
438,success = 1
439,success
440,1
441,break;
442,thresh = (lo + hi) / 2
443,thresh
444,(lo + hi) / 2
445,lo + hi
446,lo
447,hi
448,2
449,jpc_save_t2state(enc)
450,enc
451,oldpos = jas_stream_tell(out)
452,oldpos
453,jas_stream_tell(out)
454,out
455,assert(oldpos >= 0)
456,oldpos >= 0
457,oldpos
458,0
459,endcomps = &tile->tcmpts[tile->numtcmpts]
460,endcomps
461,&tile->tcmpts[tile->numtcmpts]
462,tile->tcmpts[tile->numtcmpts]
463,tile->tcmpts
464,tile
465,tcmpts
466,tile->numtcmpts
467,tile
468,numtcmpts
469,for (comp = tile->tcmpts;comp != endcomps;++comp)
470,<empty>
471,comp = tile->tcmpts
472,comp
473,tile->tcmpts
474,tile
475,tcmpts
476,comp != endcomps
477,comp
478,endcomps
479,++comp
480,comp
481,<empty>
482,endlvls = &comp->rlvls[comp->numrlvls]
483,endlvls
484,&comp->rlvls[comp->numrlvls]
485,comp->rlvls[comp->numrlvls]
486,comp->rlvls
487,comp
488,rlvls
489,comp->numrlvls
490,comp
491,numrlvls
492,for (lvl = comp->rlvls;lvl != endlvls;++lvl)
493,<empty>
494,lvl = comp->rlvls
495,lvl
496,comp->rlvls
497,comp
498,rlvls
499,lvl != endlvls
500,lvl
501,endlvls
502,++lvl
503,lvl
504,<empty>
505,if (!lvl->bands)
506,!lvl->bands
507,lvl->bands
508,lvl
509,bands
510,<empty>
511,continue;
512,endbands = &lvl->bands[lvl->numbands]
513,endbands
514,&lvl->bands[lvl->numbands]
515,lvl->bands[lvl->numbands]
516,lvl->bands
517,lvl
518,bands
519,lvl->numbands
520,lvl
521,numbands
522,for (band = lvl->bands;band != endbands;++band)
523,<empty>
524,band = lvl->bands
525,band
526,lvl->bands
527,lvl
528,bands
529,band != endbands
530,band
531,endbands
532,++band
533,band
534,<empty>
535,if (!band->data)
536,!band->data
537,band->data
538,band
539,data
540,<empty>
541,continue;
542,for (prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
543,<empty>
544,prcno = 0, prc = band->prcs
545,prcno = 0
546,prcno
547,0
548,prc = band->prcs
549,prc
550,band->prcs
551,band
552,prcs
553,prcno < lvl->numprcs
554,prcno
555,lvl->numprcs
556,lvl
557,numprcs
558,++prcno, ++prc
559,++prcno
560,prcno
561,++prc
562,prc
563,<empty>
564,if (!prc->cblks)
565,!prc->cblks
566,prc->cblks
567,prc
568,cblks
569,<empty>
570,continue;
571,endcblks = &prc->cblks[prc->numcblks]
572,endcblks
573,&prc->cblks[prc->numcblks]
574,prc->cblks[prc->numcblks]
575,prc->cblks
576,prc
577,cblks
578,prc->numcblks
579,prc
580,numcblks
581,for (cblk = prc->cblks;cblk != endcblks;++cblk)
582,<empty>
583,cblk = prc->cblks
584,cblk
585,prc->cblks
586,prc
587,cblks
588,cblk != endcblks
589,cblk
590,endcblks
591,++cblk
592,cblk
593,<empty>
594,if (cblk->curpass)
595,cblk->curpass
596,cblk
597,curpass
598,<empty>
599,endpasses = &cblk->passes[cblk->numpasses]
600,endpasses
601,&cblk->passes[cblk->numpasses]
602,cblk->passes[cblk->numpasses]
603,cblk->passes
604,cblk
605,passes
606,cblk->numpasses
607,cblk
608,numpasses
609,pass1 = cblk->curpass
610,pass1
611,cblk->curpass
612,cblk
613,curpass
614,for (pass = cblk->curpass;pass != endpasses;++pass)
615,<empty>
616,pass = cblk->curpass
617,pass
618,cblk->curpass
619,cblk
620,curpass
621,pass != endpasses
622,pass
623,endpasses
624,++pass
625,pass
626,<empty>
627,if (pass->rdslope >= thresh)
628,pass->rdslope >= thresh
629,pass->rdslope
630,pass
631,rdslope
632,thresh
633,<empty>
634,pass1 = &pass[1]
635,pass1
636,&pass[1]
637,pass[1]
638,pass
639,1
640,for (pass = cblk->curpass;pass != pass1;++pass)
641,<empty>
642,pass = cblk->curpass
643,pass
644,cblk->curpass
645,cblk
646,curpass
647,pass != pass1
648,pass
649,pass1
650,++pass
651,pass
652,<empty>
653,pass->lyrno = lyrno
654,pass->lyrno
655,pass
656,lyrno
657,lyrno
658,for (;pass != endpasses;++pass)
659,<empty>
660,pass != endpasses
661,pass
662,endpasses
663,++pass
664,pass
665,<empty>
666,pass->lyrno = -1
667,pass->lyrno
668,pass
669,lyrno
670,-1
671,1
672,endcomps = &tile->tcmpts[tile->numtcmpts]
673,endcomps
674,&tile->tcmpts[tile->numtcmpts]
675,tile->tcmpts[tile->numtcmpts]
676,tile->tcmpts
677,tile
678,tcmpts
679,tile->numtcmpts
680,tile
681,numtcmpts
682,for (comp = tile->tcmpts;comp != endcomps;++comp)
683,<empty>
684,comp = tile->tcmpts
685,comp
686,tile->tcmpts
687,tile
688,tcmpts
689,comp != endcomps
690,comp
691,endcomps
692,++comp
693,comp
694,<empty>
695,endlvls = &comp->rlvls[comp->numrlvls]
696,endlvls
697,&comp->rlvls[comp->numrlvls]
698,comp->rlvls[comp->numrlvls]
699,comp->rlvls
700,comp
701,rlvls
702,comp->numrlvls
703,comp
704,numrlvls
705,for (lvl = comp->rlvls;lvl != endlvls;++lvl)
706,<empty>
707,lvl = comp->rlvls
708,lvl
709,comp->rlvls
710,comp
711,rlvls
712,lvl != endlvls
713,lvl
714,endlvls
715,++lvl
716,lvl
717,<empty>
718,if (!lvl->bands)
719,!lvl->bands
720,lvl->bands
721,lvl
722,bands
723,<empty>
724,continue;
725,for (prcno = 0;prcno < lvl->numprcs;++prcno)
726,<empty>
727,prcno = 0
728,prcno
729,0
730,prcno < lvl->numprcs
731,prcno
732,lvl->numprcs
733,lvl
734,numprcs
735,++prcno
736,prcno
737,<empty>
738,if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno))
739,jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)
740,enc
741,out
742,comp - tile->tcmpts
743,comp
744,tile->tcmpts
745,tile
746,tcmpts
747,lvl - comp->rlvls
748,lvl
749,comp->rlvls
750,comp
751,rlvls
752,prcno
753,lyrno
754,<empty>
755,return -1;
756,-1
757,1
758,pos = jas_stream_tell(out)
759,pos
760,jas_stream_tell(out)
761,out
762,assert(pos >= 0)
763,pos >= 0
764,pos
765,0
766,if (pos > cumlen)
767,pos > cumlen
768,pos
769,cumlen
770,<empty>
771,lo = thresh
772,lo
773,thresh
774,else
775,<empty>
776,if (pos <= cumlen)
777,pos <= cumlen
778,pos
779,cumlen
780,<empty>
781,hi = thresh
782,hi
783,thresh
784,if (!success || thresh < goodthresh)
785,!success || thresh < goodthresh
786,!success
787,success
788,thresh < goodthresh
789,thresh
790,goodthresh
791,<empty>
792,goodthresh = thresh
793,goodthresh
794,thresh
795,success = 1
796,success
797,1
798,jpc_restore_t2state(enc)
799,enc
800,if (jas_stream_seek(out, oldpos, SEEK_SET) < 0)
801,jas_stream_seek(out, oldpos, SEEK_SET) < 0
802,jas_stream_seek(out, oldpos, SEEK_SET)
803,out
804,oldpos
805,SEEK_SET
806,0
807,<empty>
808,abort()
809,if (jas_getdbglevel())
810,jas_getdbglevel()
811,<empty>
812,jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh)
813,"maxlen=%08ld actuallen=%08ld thresh=%f\n"
814,cumlen
815,pos
816,thresh
817,++numiters
818,numiters
819,lo < hi - 1e-3 && numiters < 32
820,lo < hi - 1e-3
821,lo
822,hi - 1e-3
823,hi
824,1e-3
825,numiters < 32
826,numiters
827,32
828,if (!success)
829,!success
830,success
831,<empty>
832,jas_eprintf("warning: empty layer generated\n")
833,"warning: empty layer generated\n"
834,if (jas_getdbglevel())
835,jas_getdbglevel()
836,<empty>
837,jas_eprintf("success %d goodthresh %f\n", success, goodthresh)
838,"success %d goodthresh %f\n"
839,success
840,goodthresh
841,endcomps = &tile->tcmpts[tile->numtcmpts]
842,endcomps
843,&tile->tcmpts[tile->numtcmpts]
844,tile->tcmpts[tile->numtcmpts]
845,tile->tcmpts
846,tile
847,tcmpts
848,tile->numtcmpts
849,tile
850,numtcmpts
851,for (comp = tile->tcmpts;comp != endcomps;++comp)
852,<empty>
853,comp = tile->tcmpts
854,comp
855,tile->tcmpts
856,tile
857,tcmpts
858,comp != endcomps
859,comp
860,endcomps
861,++comp
862,comp
863,<empty>
864,endlvls = &comp->rlvls[comp->numrlvls]
865,endlvls
866,&comp->rlvls[comp->numrlvls]
867,comp->rlvls[comp->numrlvls]
868,comp->rlvls
869,comp
870,rlvls
871,comp->numrlvls
872,comp
873,numrlvls
874,for (lvl = comp->rlvls;lvl != endlvls;++lvl)
875,<empty>
876,lvl = comp->rlvls
877,lvl
878,comp->rlvls
879,comp
880,rlvls
881,lvl != endlvls
882,lvl
883,endlvls
884,++lvl
885,lvl
886,<empty>
887,if (!lvl->bands)
888,!lvl->bands
889,lvl->bands
890,lvl
891,bands
892,<empty>
893,continue;
894,endbands = &lvl->bands[lvl->numbands]
895,endbands
896,&lvl->bands[lvl->numbands]
897,lvl->bands[lvl->numbands]
898,lvl->bands
899,lvl
900,bands
901,lvl->numbands
902,lvl
903,numbands
904,for (band = lvl->bands;band != endbands;++band)
905,<empty>
906,band = lvl->bands
907,band
908,lvl->bands
909,lvl
910,bands
911,band != endbands
912,band
913,endbands
914,++band
915,band
916,<empty>
917,if (!band->data)
918,!band->data
919,band->data
920,band
921,data
922,<empty>
923,continue;
924,for (prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
925,<empty>
926,prcno = 0, prc = band->prcs
927,prcno = 0
928,prcno
929,0
930,prc = band->prcs
931,prc
932,band->prcs
933,band
934,prcs
935,prcno < lvl->numprcs
936,prcno
937,lvl->numprcs
938,lvl
939,numprcs
940,++prcno, ++prc
941,++prcno
942,prcno
943,++prc
944,prc
945,<empty>
946,if (!prc->cblks)
947,!prc->cblks
948,prc->cblks
949,prc
950,cblks
951,<empty>
952,continue;
953,endcblks = &prc->cblks[prc->numcblks]
954,endcblks
955,&prc->cblks[prc->numcblks]
956,prc->cblks[prc->numcblks]
957,prc->cblks
958,prc
959,cblks
960,prc->numcblks
961,prc
962,numcblks
963,for (cblk = prc->cblks;cblk != endcblks;++cblk)
964,<empty>
965,cblk = prc->cblks
966,cblk
967,prc->cblks
968,prc
969,cblks
970,cblk != endcblks
971,cblk
972,endcblks
973,++cblk
974,cblk
975,<empty>
976,if (cblk->curpass)
977,cblk->curpass
978,cblk
979,curpass
980,<empty>
981,endpasses = &cblk->passes[cblk->numpasses]
982,endpasses
983,&cblk->passes[cblk->numpasses]
984,cblk->passes[cblk->numpasses]
985,cblk->passes
986,cblk
987,passes
988,cblk->numpasses
989,cblk
990,numpasses
991,pass1 = cblk->curpass
992,pass1
993,cblk->curpass
994,cblk
995,curpass
996,if (success)
997,success
998,<empty>
999,for (pass = cblk->curpass;pass != endpasses;++pass)
1000,<empty>
1001,pass = cblk->curpass
1002,pass
1003,cblk->curpass
1004,cblk
1005,curpass
1006,pass != endpasses
1007,pass
1008,endpasses
1009,++pass
1010,pass
1011,<empty>
1012,if (pass->rdslope >= goodthresh)
1013,pass->rdslope >= goodthresh
1014,pass->rdslope
1015,pass
1016,rdslope
1017,goodthresh
1018,<empty>
1019,pass1 = &pass[1]
1020,pass1
1021,&pass[1]
1022,pass[1]
1023,pass
1024,1
1025,for (pass = cblk->curpass;pass != pass1;++pass)
1026,<empty>
1027,pass = cblk->curpass
1028,pass
1029,cblk->curpass
1030,cblk
1031,curpass
1032,pass != pass1
1033,pass
1034,pass1
1035,++pass
1036,pass
1037,<empty>
1038,pass->lyrno = lyrno
1039,pass->lyrno
1040,pass
1041,lyrno
1042,lyrno
1043,for (;pass != endpasses;++pass)
1044,<empty>
1045,pass != endpasses
1046,pass
1047,endpasses
1048,++pass
1049,pass
1050,<empty>
1051,pass->lyrno = -1
1052,pass->lyrno
1053,pass
1054,lyrno
1055,-1
1056,1
1057,endcomps = &tile->tcmpts[tile->numtcmpts]
1058,endcomps
1059,&tile->tcmpts[tile->numtcmpts]
1060,tile->tcmpts[tile->numtcmpts]
1061,tile->tcmpts
1062,tile
1063,tcmpts
1064,tile->numtcmpts
1065,tile
1066,numtcmpts
1067,for (comp = tile->tcmpts;comp != endcomps;++comp)
1068,<empty>
1069,comp = tile->tcmpts
1070,comp
1071,tile->tcmpts
1072,tile
1073,tcmpts
1074,comp != endcomps
1075,comp
1076,endcomps
1077,++comp
1078,comp
1079,<empty>
1080,endlvls = &comp->rlvls[comp->numrlvls]
1081,endlvls
1082,&comp->rlvls[comp->numrlvls]
1083,comp->rlvls[comp->numrlvls]
1084,comp->rlvls
1085,comp
1086,rlvls
1087,comp->numrlvls
1088,comp
1089,numrlvls
1090,for (lvl = comp->rlvls;lvl != endlvls;++lvl)
1091,<empty>
1092,lvl = comp->rlvls
1093,lvl
1094,comp->rlvls
1095,comp
1096,rlvls
1097,lvl != endlvls
1098,lvl
1099,endlvls
1100,++lvl
1101,lvl
1102,<empty>
1103,if (!lvl->bands)
1104,!lvl->bands
1105,lvl->bands
1106,lvl
1107,bands
1108,<empty>
1109,continue;
1110,for (prcno = 0;prcno < lvl->numprcs;++prcno)
1111,<empty>
1112,prcno = 0
1113,prcno
1114,0
1115,prcno < lvl->numprcs
1116,prcno
1117,lvl->numprcs
1118,lvl
1119,numprcs
1120,++prcno
1121,prcno
1122,<empty>
1123,if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno))
1124,jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)
1125,enc
1126,out
1127,comp - tile->tcmpts
1128,comp
1129,tile->tcmpts
1130,tile
1131,tcmpts
1132,lvl - comp->rlvls
1133,lvl
1134,comp->rlvls
1135,comp
1136,rlvls
1137,prcno
1138,lyrno
1139,<empty>
1140,return -1;
1141,-1
1142,1
1143,if (jas_getdbglevel() >= 5)
1144,jas_getdbglevel() >= 5
1145,jas_getdbglevel()
1146,5
1147,<empty>
1148,dump_layeringinfo(enc)
1149,enc
1150,jas_stream_close(out)
1151,out
1152,JAS_DBGLOG(10, ("done doing rateallocation\n"))
1153,10
1154,"done doing rateallocation\n"
1155,return 0;
1156,0
1157,RET
1158,jpc_enc_t *enc
1159,int numlyrs
1160,uint_fast32_t *cumlens
1161,RET
1162,int rateallocate (jpc_enc_t *enc,int numlyrs,uint_fast32_t *cumlens)
1163,jpc_enc_t *enc
1164,int numlyrs
1165,uint_fast32_t *cumlens
1166,<empty>
1167,jpc_flt_t lo
1168,jpc_flt_t hi
1169,jas_stream_t* out
1170,long cumlen
1171,int lyrno
1172,jpc_flt_t thresh
1173,jpc_flt_t goodthresh
1174,int success
1175,long pos
1176,long oldpos
1177,int numiters
1178,jpc_enc_tcmpt_t* comp
1179,jpc_enc_tcmpt_t* endcomps
1180,jpc_enc_rlvl_t* lvl
1181,jpc_enc_rlvl_t* endlvls
1182,jpc_enc_band_t* band
1183,jpc_enc_band_t* endbands
1184,jpc_enc_cblk_t* cblk
1185,jpc_enc_cblk_t* endcblks
1186,jpc_enc_pass_t* pass
1187,jpc_enc_pass_t* endpasses
1188,jpc_enc_pass_t* pass1
1189,jpc_flt_t mxrdslope
1190,jpc_flt_t mnrdslope
1191,jpc_enc_tile_t* tile
1192,jpc_enc_prc_t* prc
1193,int prcno
1194,tile = enc->curtile
1195,tile
1196,enc->curtile
1197,enc
1198,curtile
1199,for (lyrno = 1;lyrno < numlyrs - 1;++lyrno)
1200,<empty>
1201,lyrno = 1
1202,lyrno
1203,1
1204,lyrno < numlyrs - 1
1205,lyrno
1206,numlyrs - 1
1207,numlyrs
1208,1
1209,++lyrno
1210,lyrno
1211,<empty>
1212,if (cumlens[lyrno - 1] > cumlens[lyrno])
1213,cumlens[lyrno - 1] > cumlens[lyrno]
1214,cumlens[lyrno - 1]
1215,cumlens
1216,lyrno - 1
1217,lyrno
1218,1
1219,cumlens[lyrno]
1220,cumlens
1221,lyrno
1222,<empty>
1223,abort()
1224,if (!(out = jas_stream_memopen(0, 0)))
1225,!(out = jas_stream_memopen(0, 0))
1226,out = jas_stream_memopen(0, 0)
1227,out
1228,jas_stream_memopen(0, 0)
1229,0
1230,0
1231,<empty>
1232,return -1;
1233,-1
1234,1
1235,mnrdslope = DBL_MAX
1236,mnrdslope
1237,DBL_MAX
1238,mxrdslope = 0
1239,mxrdslope
1240,0
1241,endcomps = &tile->tcmpts[tile->numtcmpts]
1242,endcomps
1243,&tile->tcmpts[tile->numtcmpts]
1244,tile->tcmpts[tile->numtcmpts]
1245,tile->tcmpts
1246,tile
1247,tcmpts
1248,tile->numtcmpts
1249,tile
1250,numtcmpts
1251,for (comp = tile->tcmpts;comp != endcomps;++comp)
1252,<empty>
1253,comp = tile->tcmpts
1254,comp
1255,tile->tcmpts
1256,tile
1257,tcmpts
1258,comp != endcomps
1259,comp
1260,endcomps
1261,++comp
1262,comp
1263,<empty>
1264,endlvls = &comp->rlvls[comp->numrlvls]
1265,endlvls
1266,&comp->rlvls[comp->numrlvls]
1267,comp->rlvls[comp->numrlvls]
1268,comp->rlvls
1269,comp
1270,rlvls
1271,comp->numrlvls
1272,comp
1273,numrlvls
1274,for (lvl = comp->rlvls;lvl != endlvls;++lvl)
1275,<empty>
1276,lvl = comp->rlvls
1277,lvl
1278,comp->rlvls
1279,comp
1280,rlvls
1281,lvl != endlvls
1282,lvl
1283,endlvls
1284,++lvl
1285,lvl
1286,<empty>
1287,if (!lvl->bands)
1288,!lvl->bands
1289,lvl->bands
1290,lvl
1291,bands
1292,<empty>
1293,continue;
1294,endbands = &lvl->bands[lvl->numbands]
1295,endbands
1296,&lvl->bands[lvl->numbands]
1297,lvl->bands[lvl->numbands]
1298,lvl->bands
1299,lvl
1300,bands
1301,lvl->numbands
1302,lvl
1303,numbands
1304,for (band = lvl->bands;band != endbands;++band)
1305,<empty>
1306,band = lvl->bands
1307,band
1308,lvl->bands
1309,lvl
1310,bands
1311,band != endbands
1312,band
1313,endbands
1314,++band
1315,band
1316,<empty>
1317,if (!band->data)
1318,!band->data
1319,band->data
1320,band
1321,data
1322,<empty>
1323,continue;
1324,for (prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
1325,<empty>
1326,prcno = 0, prc = band->prcs
1327,prcno = 0
1328,prcno
1329,0
1330,prc = band->prcs
1331,prc
1332,band->prcs
1333,band
1334,prcs
1335,prcno < lvl->numprcs
1336,prcno
1337,lvl->numprcs
1338,lvl
1339,numprcs
1340,++prcno, ++prc
1341,++prcno
1342,prcno
1343,++prc
1344,prc
1345,<empty>
1346,if (!prc->cblks)
1347,!prc->cblks
1348,prc->cblks
1349,prc
1350,cblks
1351,<empty>
1352,continue;
1353,endcblks = &prc->cblks[prc->numcblks]
1354,endcblks
1355,&prc->cblks[prc->numcblks]
1356,prc->cblks[prc->numcblks]
1357,prc->cblks
1358,prc
1359,cblks
1360,prc->numcblks
1361,prc
1362,numcblks
1363,for (cblk = prc->cblks;cblk != endcblks;++cblk)
1364,<empty>
1365,cblk = prc->cblks
1366,cblk
1367,prc->cblks
1368,prc
1369,cblks
1370,cblk != endcblks
1371,cblk
1372,endcblks
1373,++cblk
1374,cblk
1375,<empty>
1376,calcrdslopes(cblk)
1377,cblk
1378,endpasses = &cblk->passes[cblk->numpasses]
1379,endpasses
1380,&cblk->passes[cblk->numpasses]
1381,cblk->passes[cblk->numpasses]
1382,cblk->passes
1383,cblk
1384,passes
1385,cblk->numpasses
1386,cblk
1387,numpasses
1388,for (pass = cblk->passes;pass != endpasses;++pass)
1389,<empty>
1390,pass = cblk->passes
1391,pass
1392,cblk->passes
1393,cblk
1394,passes
1395,pass != endpasses
1396,pass
1397,endpasses
1398,++pass
1399,pass
1400,<empty>
1401,if (pass->rdslope > 0)
1402,pass->rdslope > 0
1403,pass->rdslope
1404,pass
1405,rdslope
1406,0
1407,<empty>
1408,if (pass->rdslope < mnrdslope)
1409,pass->rdslope < mnrdslope
1410,pass->rdslope
1411,pass
1412,rdslope
1413,mnrdslope
1414,<empty>
1415,mnrdslope = pass->rdslope
1416,mnrdslope
1417,pass->rdslope
1418,pass
1419,rdslope
1420,if (pass->rdslope > mxrdslope)
1421,pass->rdslope > mxrdslope
1422,pass->rdslope
1423,pass
1424,rdslope
1425,mxrdslope
1426,<empty>
1427,mxrdslope = pass->rdslope
1428,mxrdslope
1429,pass->rdslope
1430,pass
1431,rdslope
1432,if (jas_getdbglevel())
1433,jas_getdbglevel()
1434,<empty>
1435,jas_eprintf("min rdslope = %f max rdslope = %f\n", mnrdslope, mxrdslope)
1436,"min rdslope = %f max rdslope = %f\n"
1437,mnrdslope
1438,mxrdslope
1439,jpc_init_t2state(enc, 1)
1440,enc
1441,1
1442,for (lyrno = 0;lyrno < numlyrs;++lyrno)
1443,<empty>
1444,lyrno = 0
1445,lyrno
1446,0
1447,lyrno < numlyrs
1448,lyrno
1449,numlyrs
1450,++lyrno
1451,lyrno
1452,<empty>
1453,lo = mnrdslope
1454,lo
1455,mnrdslope
1456,hi = mxrdslope
1457,hi
1458,mxrdslope
1459,success = 0
1460,success
1461,0
1462,goodthresh = 0
1463,goodthresh
1464,0
1465,numiters = 0
1466,numiters
1467,0
1468,do {
1469,
1470,			cumlen = cumlens[lyrno];
1471,			if (cumlen == UINT_FAST32_MAX) {
1472,				/* Only the last layer can be free of a rate
1473,				  constraint (e.g., for lossless coding). */
1474,				assert(lyrno == numlyrs - 1);
1475,				goodthresh = -1;
1476,				success = 1;
1477,				break;
1478,			}
1479,
1480,			thresh = (lo + hi) / 2;
1481,
1482,			/* Save the tier 2 coding state. */
1483,			jpc_save_t2state(enc);
1484,			oldpos = jas_stream_tell(out);
1485,			assert(oldpos >= 0);
1486,
1487,			/* Assign all passes with R-D slopes greater than or
1488,			  equal to the current threshold to this layer. */
1489,			endcomps = &tile->tcmpts[tile->numtcmpts];
1490,			for (comp = tile->tcmpts; comp != endcomps; ++comp) {
1491,				endlvls = &comp->rlvls[comp->numrlvls];
1492,				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {
1493,					if (!lvl->bands) {
1494,						continue;
1495,					}
1496,					endbands = &lvl->bands[lvl->numbands];
1497,					for (band = lvl->bands; band != endbands; ++band) {
1498,						if (!band->data) {
1499,							continue;
1500,						}
1501,						for (prcno = 0, prc = band->prcs; prcno < lvl->numprcs; ++prcno, ++prc) {
1502,							if (!prc->cblks) {
1503,								continue;
1504,							}
1505,							endcblks = &prc->cblks[prc->numcblks];
1506,							for (cblk = prc->cblks; cblk != endcblks; ++cblk) {
1507,								if (cblk->curpass) {
1508,									endpasses = &cblk->passes[cblk->numpasses];
1509,									pass1 = cblk->curpass;
1510,									for (pass = cblk->curpass; pass != endpasses; ++pass) {
1511,										if (pass->rdslope >= thresh) {
1512,											pass1 = &pass[1];
1513,										}
1514,									}
1515,									for (pass = cblk->curpass; pass != pass1; ++pass) {
1516,										pass->lyrno = lyrno;
1517,									}
1518,									for (; pass != endpasses; ++pass) {
1519,										pass->lyrno = -1;
1520,									}
1521,								}
1522,							}
1523,						}
1524,					}
1525,				}
1526,			}
1527,
1528,			/* Perform tier 2 coding. */
1529,			endcomps = &tile->tcmpts[tile->numtcmpts];
1530,			for (comp = tile->tcmpts; comp != endcomps; ++comp) {
1531,				endlvls = &comp->rlvls[comp->numrlvls];
1532,				for (lvl = comp->rlvls; lvl != endlvls; ++lvl) {
1533,					if (!lvl->bands) {
1534,						continue;
1535,					}
1536,					for (prcno = 0; prcno < lvl->numprcs; ++prcno) {
1537,						if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)) {
1538,							return -1;
1539,						}
1540,					}
1541,				}
1542,			}
1543,
1544,			pos = jas_stream_tell(out);
1545,
1546,			/* Check the rate constraint. */
1547,			assert(pos >= 0);
1548,			if (pos > cumlen) {
1549,				/* The rate is too high. */
1550,				lo = thresh;
1551,			} else if (pos <= cumlen) {
1552,				/* The rate is low enough, so try higher. */
1553,				hi = thresh;
1554,				if (!success || thresh < goodthresh) {
1555,					goodthresh = thresh;
1556,					success = 1;
1557,				}
1558,			}
1559,
1560,			/* Save the tier 2 coding state. */
1561,			jpc_restore_t2state(enc);
1562,			if (jas_stream_seek(out, oldpos, SEEK_SET) < 0) {
1563,				abort();
1564,			}
1565,
1566,if (jas_getdbglevel()) {
1567,jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh);
1568,}
1569,
1570,			++numiters;
1571,		} while (lo < hi - 1e-3 && numiters < 32);
1572,<empty>
1573,cumlen = cumlens[lyrno]
1574,cumlen
1575,cumlens[lyrno]
1576,cumlens
1577,lyrno
1578,if (cumlen == UINT_FAST32_MAX)
1579,cumlen == UINT_FAST32_MAX
1580,cumlen
1581,UINT_FAST32_MAX
1582,<empty>
1583,assert(lyrno == numlyrs - 1)
1584,lyrno == numlyrs - 1
1585,lyrno
1586,numlyrs - 1
1587,numlyrs
1588,1
1589,goodthresh = -1
1590,goodthresh
1591,-1
1592,1
1593,success = 1
1594,success
1595,1
1596,break;
1597,thresh = (lo + hi) / 2
1598,thresh
1599,(lo + hi) / 2
1600,lo + hi
1601,lo
1602,hi
1603,2
1604,jpc_save_t2state(enc)
1605,enc
1606,oldpos = jas_stream_tell(out)
1607,oldpos
1608,jas_stream_tell(out)
1609,out
1610,assert(oldpos >= 0)
1611,oldpos >= 0
1612,oldpos
1613,0
1614,endcomps = &tile->tcmpts[tile->numtcmpts]
1615,endcomps
1616,&tile->tcmpts[tile->numtcmpts]
1617,tile->tcmpts[tile->numtcmpts]
1618,tile->tcmpts
1619,tile
1620,tcmpts
1621,tile->numtcmpts
1622,tile
1623,numtcmpts
1624,for (comp = tile->tcmpts;comp != endcomps;++comp)
1625,<empty>
1626,comp = tile->tcmpts
1627,comp
1628,tile->tcmpts
1629,tile
1630,tcmpts
1631,comp != endcomps
1632,comp
1633,endcomps
1634,++comp
1635,comp
1636,<empty>
1637,endlvls = &comp->rlvls[comp->numrlvls]
1638,endlvls
1639,&comp->rlvls[comp->numrlvls]
1640,comp->rlvls[comp->numrlvls]
1641,comp->rlvls
1642,comp
1643,rlvls
1644,comp->numrlvls
1645,comp
1646,numrlvls
1647,for (lvl = comp->rlvls;lvl != endlvls;++lvl)
1648,<empty>
1649,lvl = comp->rlvls
1650,lvl
1651,comp->rlvls
1652,comp
1653,rlvls
1654,lvl != endlvls
1655,lvl
1656,endlvls
1657,++lvl
1658,lvl
1659,<empty>
1660,if (!lvl->bands)
1661,!lvl->bands
1662,lvl->bands
1663,lvl
1664,bands
1665,<empty>
1666,continue;
1667,endbands = &lvl->bands[lvl->numbands]
1668,endbands
1669,&lvl->bands[lvl->numbands]
1670,lvl->bands[lvl->numbands]
1671,lvl->bands
1672,lvl
1673,bands
1674,lvl->numbands
1675,lvl
1676,numbands
1677,for (band = lvl->bands;band != endbands;++band)
1678,<empty>
1679,band = lvl->bands
1680,band
1681,lvl->bands
1682,lvl
1683,bands
1684,band != endbands
1685,band
1686,endbands
1687,++band
1688,band
1689,<empty>
1690,if (!band->data)
1691,!band->data
1692,band->data
1693,band
1694,data
1695,<empty>
1696,continue;
1697,for (prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
1698,<empty>
1699,prcno = 0, prc = band->prcs
1700,prcno = 0
1701,prcno
1702,0
1703,prc = band->prcs
1704,prc
1705,band->prcs
1706,band
1707,prcs
1708,prcno < lvl->numprcs
1709,prcno
1710,lvl->numprcs
1711,lvl
1712,numprcs
1713,++prcno, ++prc
1714,++prcno
1715,prcno
1716,++prc
1717,prc
1718,<empty>
1719,if (!prc->cblks)
1720,!prc->cblks
1721,prc->cblks
1722,prc
1723,cblks
1724,<empty>
1725,continue;
1726,endcblks = &prc->cblks[prc->numcblks]
1727,endcblks
1728,&prc->cblks[prc->numcblks]
1729,prc->cblks[prc->numcblks]
1730,prc->cblks
1731,prc
1732,cblks
1733,prc->numcblks
1734,prc
1735,numcblks
1736,for (cblk = prc->cblks;cblk != endcblks;++cblk)
1737,<empty>
1738,cblk = prc->cblks
1739,cblk
1740,prc->cblks
1741,prc
1742,cblks
1743,cblk != endcblks
1744,cblk
1745,endcblks
1746,++cblk
1747,cblk
1748,<empty>
1749,if (cblk->curpass)
1750,cblk->curpass
1751,cblk
1752,curpass
1753,<empty>
1754,endpasses = &cblk->passes[cblk->numpasses]
1755,endpasses
1756,&cblk->passes[cblk->numpasses]
1757,cblk->passes[cblk->numpasses]
1758,cblk->passes
1759,cblk
1760,passes
1761,cblk->numpasses
1762,cblk
1763,numpasses
1764,pass1 = cblk->curpass
1765,pass1
1766,cblk->curpass
1767,cblk
1768,curpass
1769,for (pass = cblk->curpass;pass != endpasses;++pass)
1770,<empty>
1771,pass = cblk->curpass
1772,pass
1773,cblk->curpass
1774,cblk
1775,curpass
1776,pass != endpasses
1777,pass
1778,endpasses
1779,++pass
1780,pass
1781,<empty>
1782,if (pass->rdslope >= thresh)
1783,pass->rdslope >= thresh
1784,pass->rdslope
1785,pass
1786,rdslope
1787,thresh
1788,<empty>
1789,pass1 = &pass[1]
1790,pass1
1791,&pass[1]
1792,pass[1]
1793,pass
1794,1
1795,for (pass = cblk->curpass;pass != pass1;++pass)
1796,<empty>
1797,pass = cblk->curpass
1798,pass
1799,cblk->curpass
1800,cblk
1801,curpass
1802,pass != pass1
1803,pass
1804,pass1
1805,++pass
1806,pass
1807,<empty>
1808,pass->lyrno = lyrno
1809,pass->lyrno
1810,pass
1811,lyrno
1812,lyrno
1813,for (;pass != endpasses;++pass)
1814,<empty>
1815,pass != endpasses
1816,pass
1817,endpasses
1818,++pass
1819,pass
1820,<empty>
1821,pass->lyrno = -1
1822,pass->lyrno
1823,pass
1824,lyrno
1825,-1
1826,1
1827,endcomps = &tile->tcmpts[tile->numtcmpts]
1828,endcomps
1829,&tile->tcmpts[tile->numtcmpts]
1830,tile->tcmpts[tile->numtcmpts]
1831,tile->tcmpts
1832,tile
1833,tcmpts
1834,tile->numtcmpts
1835,tile
1836,numtcmpts
1837,for (comp = tile->tcmpts;comp != endcomps;++comp)
1838,<empty>
1839,comp = tile->tcmpts
1840,comp
1841,tile->tcmpts
1842,tile
1843,tcmpts
1844,comp != endcomps
1845,comp
1846,endcomps
1847,++comp
1848,comp
1849,<empty>
1850,endlvls = &comp->rlvls[comp->numrlvls]
1851,endlvls
1852,&comp->rlvls[comp->numrlvls]
1853,comp->rlvls[comp->numrlvls]
1854,comp->rlvls
1855,comp
1856,rlvls
1857,comp->numrlvls
1858,comp
1859,numrlvls
1860,for (lvl = comp->rlvls;lvl != endlvls;++lvl)
1861,<empty>
1862,lvl = comp->rlvls
1863,lvl
1864,comp->rlvls
1865,comp
1866,rlvls
1867,lvl != endlvls
1868,lvl
1869,endlvls
1870,++lvl
1871,lvl
1872,<empty>
1873,if (!lvl->bands)
1874,!lvl->bands
1875,lvl->bands
1876,lvl
1877,bands
1878,<empty>
1879,continue;
1880,for (prcno = 0;prcno < lvl->numprcs;++prcno)
1881,<empty>
1882,prcno = 0
1883,prcno
1884,0
1885,prcno < lvl->numprcs
1886,prcno
1887,lvl->numprcs
1888,lvl
1889,numprcs
1890,++prcno
1891,prcno
1892,<empty>
1893,if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno))
1894,jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)
1895,enc
1896,out
1897,comp - tile->tcmpts
1898,comp
1899,tile->tcmpts
1900,tile
1901,tcmpts
1902,lvl - comp->rlvls
1903,lvl
1904,comp->rlvls
1905,comp
1906,rlvls
1907,prcno
1908,lyrno
1909,<empty>
1910,return -1;
1911,-1
1912,1
1913,pos = jas_stream_tell(out)
1914,pos
1915,jas_stream_tell(out)
1916,out
1917,assert(pos >= 0)
1918,pos >= 0
1919,pos
1920,0
1921,if (pos > cumlen)
1922,pos > cumlen
1923,pos
1924,cumlen
1925,<empty>
1926,lo = thresh
1927,lo
1928,thresh
1929,else
1930,<empty>
1931,if (pos <= cumlen)
1932,pos <= cumlen
1933,pos
1934,cumlen
1935,<empty>
1936,hi = thresh
1937,hi
1938,thresh
1939,if (!success || thresh < goodthresh)
1940,!success || thresh < goodthresh
1941,!success
1942,success
1943,thresh < goodthresh
1944,thresh
1945,goodthresh
1946,<empty>
1947,goodthresh = thresh
1948,goodthresh
1949,thresh
1950,success = 1
1951,success
1952,1
1953,jpc_restore_t2state(enc)
1954,enc
1955,if (jas_stream_seek(out, oldpos, SEEK_SET) < 0)
1956,jas_stream_seek(out, oldpos, SEEK_SET) < 0
1957,jas_stream_seek(out, oldpos, SEEK_SET)
1958,out
1959,oldpos
1960,SEEK_SET
1961,0
1962,<empty>
1963,abort()
1964,if (jas_getdbglevel())
1965,jas_getdbglevel()
1966,<empty>
1967,jas_eprintf("maxlen=%08ld actuallen=%08ld thresh=%f\n", cumlen, pos, thresh)
1968,"maxlen=%08ld actuallen=%08ld thresh=%f\n"
1969,cumlen
1970,pos
1971,thresh
1972,++numiters
1973,numiters
1974,lo < hi - 1e-3 && numiters < 32
1975,lo < hi - 1e-3
1976,lo
1977,hi - 1e-3
1978,hi
1979,1e-3
1980,numiters < 32
1981,numiters
1982,32
1983,if (!success)
1984,!success
1985,success
1986,<empty>
1987,jas_eprintf("warning: empty layer generated\n")
1988,"warning: empty layer generated\n"
1989,if (jas_getdbglevel())
1990,jas_getdbglevel()
1991,<empty>
1992,jas_eprintf("success %d goodthresh %f\n", success, goodthresh)
1993,"success %d goodthresh %f\n"
1994,success
1995,goodthresh
1996,endcomps = &tile->tcmpts[tile->numtcmpts]
1997,endcomps
1998,&tile->tcmpts[tile->numtcmpts]
1999,tile->tcmpts[tile->numtcmpts]
2000,tile->tcmpts
2001,tile
2002,tcmpts
2003,tile->numtcmpts
2004,tile
2005,numtcmpts
2006,for (comp = tile->tcmpts;comp != endcomps;++comp)
2007,<empty>
2008,comp = tile->tcmpts
2009,comp
2010,tile->tcmpts
2011,tile
2012,tcmpts
2013,comp != endcomps
2014,comp
2015,endcomps
2016,++comp
2017,comp
2018,<empty>
2019,endlvls = &comp->rlvls[comp->numrlvls]
2020,endlvls
2021,&comp->rlvls[comp->numrlvls]
2022,comp->rlvls[comp->numrlvls]
2023,comp->rlvls
2024,comp
2025,rlvls
2026,comp->numrlvls
2027,comp
2028,numrlvls
2029,for (lvl = comp->rlvls;lvl != endlvls;++lvl)
2030,<empty>
2031,lvl = comp->rlvls
2032,lvl
2033,comp->rlvls
2034,comp
2035,rlvls
2036,lvl != endlvls
2037,lvl
2038,endlvls
2039,++lvl
2040,lvl
2041,<empty>
2042,if (!lvl->bands)
2043,!lvl->bands
2044,lvl->bands
2045,lvl
2046,bands
2047,<empty>
2048,continue;
2049,endbands = &lvl->bands[lvl->numbands]
2050,endbands
2051,&lvl->bands[lvl->numbands]
2052,lvl->bands[lvl->numbands]
2053,lvl->bands
2054,lvl
2055,bands
2056,lvl->numbands
2057,lvl
2058,numbands
2059,for (band = lvl->bands;band != endbands;++band)
2060,<empty>
2061,band = lvl->bands
2062,band
2063,lvl->bands
2064,lvl
2065,bands
2066,band != endbands
2067,band
2068,endbands
2069,++band
2070,band
2071,<empty>
2072,if (!band->data)
2073,!band->data
2074,band->data
2075,band
2076,data
2077,<empty>
2078,continue;
2079,for (prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
2080,<empty>
2081,prcno = 0, prc = band->prcs
2082,prcno = 0
2083,prcno
2084,0
2085,prc = band->prcs
2086,prc
2087,band->prcs
2088,band
2089,prcs
2090,prcno < lvl->numprcs
2091,prcno
2092,lvl->numprcs
2093,lvl
2094,numprcs
2095,++prcno, ++prc
2096,++prcno
2097,prcno
2098,++prc
2099,prc
2100,<empty>
2101,if (!prc->cblks)
2102,!prc->cblks
2103,prc->cblks
2104,prc
2105,cblks
2106,<empty>
2107,continue;
2108,endcblks = &prc->cblks[prc->numcblks]
2109,endcblks
2110,&prc->cblks[prc->numcblks]
2111,prc->cblks[prc->numcblks]
2112,prc->cblks
2113,prc
2114,cblks
2115,prc->numcblks
2116,prc
2117,numcblks
2118,for (cblk = prc->cblks;cblk != endcblks;++cblk)
2119,<empty>
2120,cblk = prc->cblks
2121,cblk
2122,prc->cblks
2123,prc
2124,cblks
2125,cblk != endcblks
2126,cblk
2127,endcblks
2128,++cblk
2129,cblk
2130,<empty>
2131,if (cblk->curpass)
2132,cblk->curpass
2133,cblk
2134,curpass
2135,<empty>
2136,endpasses = &cblk->passes[cblk->numpasses]
2137,endpasses
2138,&cblk->passes[cblk->numpasses]
2139,cblk->passes[cblk->numpasses]
2140,cblk->passes
2141,cblk
2142,passes
2143,cblk->numpasses
2144,cblk
2145,numpasses
2146,pass1 = cblk->curpass
2147,pass1
2148,cblk->curpass
2149,cblk
2150,curpass
2151,if (success)
2152,success
2153,<empty>
2154,for (pass = cblk->curpass;pass != endpasses;++pass)
2155,<empty>
2156,pass = cblk->curpass
2157,pass
2158,cblk->curpass
2159,cblk
2160,curpass
2161,pass != endpasses
2162,pass
2163,endpasses
2164,++pass
2165,pass
2166,<empty>
2167,if (pass->rdslope >= goodthresh)
2168,pass->rdslope >= goodthresh
2169,pass->rdslope
2170,pass
2171,rdslope
2172,goodthresh
2173,<empty>
2174,pass1 = &pass[1]
2175,pass1
2176,&pass[1]
2177,pass[1]
2178,pass
2179,1
2180,for (pass = cblk->curpass;pass != pass1;++pass)
2181,<empty>
2182,pass = cblk->curpass
2183,pass
2184,cblk->curpass
2185,cblk
2186,curpass
2187,pass != pass1
2188,pass
2189,pass1
2190,++pass
2191,pass
2192,<empty>
2193,pass->lyrno = lyrno
2194,pass->lyrno
2195,pass
2196,lyrno
2197,lyrno
2198,for (;pass != endpasses;++pass)
2199,<empty>
2200,pass != endpasses
2201,pass
2202,endpasses
2203,++pass
2204,pass
2205,<empty>
2206,pass->lyrno = -1
2207,pass->lyrno
2208,pass
2209,lyrno
2210,-1
2211,1
2212,endcomps = &tile->tcmpts[tile->numtcmpts]
2213,endcomps
2214,&tile->tcmpts[tile->numtcmpts]
2215,tile->tcmpts[tile->numtcmpts]
2216,tile->tcmpts
2217,tile
2218,tcmpts
2219,tile->numtcmpts
2220,tile
2221,numtcmpts
2222,for (comp = tile->tcmpts;comp != endcomps;++comp)
2223,<empty>
2224,comp = tile->tcmpts
2225,comp
2226,tile->tcmpts
2227,tile
2228,tcmpts
2229,comp != endcomps
2230,comp
2231,endcomps
2232,++comp
2233,comp
2234,<empty>
2235,endlvls = &comp->rlvls[comp->numrlvls]
2236,endlvls
2237,&comp->rlvls[comp->numrlvls]
2238,comp->rlvls[comp->numrlvls]
2239,comp->rlvls
2240,comp
2241,rlvls
2242,comp->numrlvls
2243,comp
2244,numrlvls
2245,for (lvl = comp->rlvls;lvl != endlvls;++lvl)
2246,<empty>
2247,lvl = comp->rlvls
2248,lvl
2249,comp->rlvls
2250,comp
2251,rlvls
2252,lvl != endlvls
2253,lvl
2254,endlvls
2255,++lvl
2256,lvl
2257,<empty>
2258,if (!lvl->bands)
2259,!lvl->bands
2260,lvl->bands
2261,lvl
2262,bands
2263,<empty>
2264,continue;
2265,for (prcno = 0;prcno < lvl->numprcs;++prcno)
2266,<empty>
2267,prcno = 0
2268,prcno
2269,0
2270,prcno < lvl->numprcs
2271,prcno
2272,lvl->numprcs
2273,lvl
2274,numprcs
2275,++prcno
2276,prcno
2277,<empty>
2278,if (jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno))
2279,jpc_enc_encpkt(enc, out, comp - tile->tcmpts, lvl - comp->rlvls, prcno, lyrno)
2280,enc
2281,out
2282,comp - tile->tcmpts
2283,comp
2284,tile->tcmpts
2285,tile
2286,tcmpts
2287,lvl - comp->rlvls
2288,lvl
2289,comp->rlvls
2290,comp
2291,rlvls
2292,prcno
2293,lyrno
2294,<empty>
2295,return -1;
2296,-1
2297,1
2298,if (jas_getdbglevel() >= 5)
2299,jas_getdbglevel() >= 5
2300,jas_getdbglevel()
2301,5
2302,<empty>
2303,dump_layeringinfo(enc)
2304,enc
2305,jas_stream_close(out)
2306,out
2307,JAS_DBGLOG(10, ("done doing rateallocation\n"))
2308,10
2309,"done doing rateallocation\n"
2310,return 0;
2311,0
2312,RET
2313,jpc_enc_t *enc
2314,int numlyrs
2315,uint_fast32_t *cumlens
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
int rateallocate(jpc_enc_t *enc, int numlyrs, uint_fast32_t *cumlens) {
jpc_flt_t lo;
jpc_flt_t hi;
jas_stream_t *out;
long cumlen;
int lyrno;
jpc_flt_t thresh;
jpc_flt_t goodthresh;
int success;
long pos;
long oldpos;
int numiters;
jpc_enc_tcmpt_t *comp;
jpc_enc_tcmpt_t *endcomps;
jpc_enc_rlvl_t *lvl;
jpc_enc_rlvl_t *endlvls;
jpc_enc_band_t *band;
jpc_enc_band_t *endbands;
jpc_enc_cblk_t *cblk;
jpc_enc_cblk_t *endcblks;
jpc_enc_pass_t *pass;
jpc_enc_pass_t *endpasses;
jpc_enc_pass_t *pass1;
jpc_flt_t mxrdslope;
jpc_flt_t mnrdslope;
jpc_enc_tile_t *tile;
jpc_enc_prc_t *prc;
int prcno;
tile = enc->curtile;
mnrdslope = DBL_MAX;
mxrdslope = 0;
endcomps = &tile->tcmpts[tile->numtcmpts];
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(pass = cblk->passes;pass != endpasses;++pass)
if(pass->rdslope > 0)
if(pass->rdslope < mnrdslope)
mnrdslope = pass->rdslope;
if(pass->rdslope > mxrdslope)
mxrdslope = pass->rdslope;
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
calcrdslopes(cblk);
endpasses = &cblk->passes[cblk->numpasses];
jpc_init_t2state(enc, 1);
for(lyrno = 0;lyrno < numlyrs;++lyrno)
lo = mnrdslope;
hi = mxrdslope;
success = 0;
goodthresh = 0;
numiters = 0;
cumlen = cumlens[lyrno];
thresh = (lo + hi) / 2;
jpc_save_t2state(enc);
oldpos = jas_stream_tell(out);
assert(oldpos >= 0);
endcomps = &tile->tcmpts[tile->numtcmpts];
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
if(cblk->curpass)
endpasses = &cblk->passes[cblk->numpasses];
pass1 = cblk->curpass;
for(pass = cblk->curpass;pass != endpasses;++pass)
if(pass->rdslope >= thresh)
pass1 = &pass[1];
for(pass = cblk->curpass;pass != pass1;++pass)
pass->lyrno = lyrno;
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
endcomps = &tile->tcmpts[tile->numtcmpts];
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
pos = jas_stream_tell(out);
assert(pos >= 0);
if(pos > cumlen)
lo = thresh;
jpc_restore_t2state(enc);
++numiters;
if(!success)
jas_eprintf('warning: empty layer generated ');
endcomps = &tile->tcmpts[tile->numtcmpts];
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
if(cblk->curpass)
endpasses = &cblk->passes[cblk->numpasses];
pass1 = cblk->curpass;
pass->lyrno = -1;
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
if(!band->data)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
endbands = &lvl->bands[lvl->numbands];
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
for(band = lvl->bands;band != endbands;++band)
for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc)
endcblks = &prc->cblks[prc->numcblks];
for(cblk = prc->cblks;cblk != endcblks;++cblk)
endcomps = &tile->tcmpts[tile->numtcmpts];
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(comp = tile->tcmpts;comp != endcomps;++comp)
endlvls = &comp->rlvls[comp->numrlvls];
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
for(lvl = comp->rlvls;lvl != endlvls;++lvl)
for(prcno = 0;prcno < lvl->numprcs;++prcno)
jas_stream_close(out);
return 0;
=======================
