-----label-----
0
-----code-----
int jpc_enc_enccblk(jpc_enc_t *enc, jas_stream_t *out, jpc_enc_tcmpt_t *tcmpt, jpc_enc_band_t *band, jpc_enc_cblk_t *cblk)
{
	jpc_enc_pass_t *pass;
	jpc_enc_pass_t *endpasses;
	int bitpos;
	int n;
	int adjust;
	int ret;
	int passtype;
	int t;
	jpc_bitstream_t *bout;
	jpc_enc_pass_t *termpass;
	jpc_enc_rlvl_t *rlvl;
	int vcausal;
	int segsym;
	int termmode;
	int c;

	bout = 0;
	rlvl = band->rlvl;

	cblk->stream = jas_stream_memopen(0, 0);
	assert(cblk->stream);
	cblk->mqenc = jpc_mqenc_create(JPC_NUMCTXS, cblk->stream);
	assert(cblk->mqenc);
	jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);

	cblk->numpasses = (cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0;
	if (cblk->numpasses > 0) {
		cblk->passes = jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t));
		assert(cblk->passes);
	} else {
		cblk->passes = 0;
	}
	endpasses = &cblk->passes[cblk->numpasses];
	for (pass = cblk->passes; pass != endpasses; ++pass) {
		pass->start = 0;
		pass->end = 0;
		pass->term = JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);
		pass->type = JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);
		pass->lyrno = -1;
if (pass == endpasses - 1) {
assert(pass->term == 1);
	pass->term = 1;
}
	}

	cblk->flags = jas_matrix_create(jas_matrix_numrows(cblk->data) + 2,
	  jas_matrix_numcols(cblk->data) + 2);
	assert(cblk->flags);


	bitpos = cblk->numbps - 1;
	pass = cblk->passes;
	n = cblk->numpasses;
	while (--n >= 0) {

		if (pass->type == JPC_SEG_MQ) {
			/* NOP */
		} else {
			assert(pass->type == JPC_SEG_RAW);
			if (!bout) {
				bout = jpc_bitstream_sopen(cblk->stream, "w");
				assert(bout);
			}
		}

#if 1
		passtype = (pass - cblk->passes + 2) % 3;
#else
		passtype = JPC_PASSTYPE(pass - cblk->passes + 2);
#endif
		pass->start = jas_stream_tell(cblk->stream);
#if 0
assert(jas_stream_tell(cblk->stream) == jas_stream_getrwcount(cblk->stream));
#endif
		assert(bitpos >= 0);
		vcausal = (tcmpt->cblksty & JPC_COX_VSC) != 0;
		segsym = (tcmpt->cblksty & JPC_COX_SEGSYM) != 0;
		if (pass->term) {
			termmode = ((tcmpt->cblksty & JPC_COX_PTERM) ?
			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1;
		} else {
			termmode = 0;
		}
		switch (passtype) {
		case JPC_SIGPASS:
			ret = (pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,
			  bitpos, band->orient, vcausal, cblk->flags,
			  cblk->data, termmode, &pass->nmsedec) :
			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,
			  cblk->data, termmode, &pass->nmsedec);
			break;
		case JPC_REFPASS:
			ret = (pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,
			  bitpos, vcausal, cblk->flags, cblk->data, termmode,
			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,
			  vcausal, cblk->flags, cblk->data, termmode,
			  &pass->nmsedec);
			break;
		case JPC_CLNPASS:
			assert(pass->type == JPC_SEG_MQ);
			ret = jpc_encclnpass(cblk->mqenc, bitpos, band->orient,
			  vcausal, segsym, cblk->flags, cblk->data, termmode,
			  &pass->nmsedec);
			break;
		default:
			assert(0);
			break;
		}

		if (pass->type == JPC_SEG_MQ) {
			if (pass->term) {
				jpc_mqenc_init(cblk->mqenc);
			}
			jpc_mqenc_getstate(cblk->mqenc, &pass->mqencstate);
			pass->end = jas_stream_tell(cblk->stream);
			if (tcmpt->cblksty & JPC_COX_RESET) {
				jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);
			}
		} else {
			if (pass->term) {
				if (jpc_bitstream_pending(bout)) {
					jpc_bitstream_outalign(bout, 0x2a);
				}
				jpc_bitstream_close(bout);
				bout = 0;
				pass->end = jas_stream_tell(cblk->stream);
			} else {
				pass->end = jas_stream_tell(cblk->stream) +
				  jpc_bitstream_pending(bout);
/* NOTE - This will not work.  need to adjust by # of pending output bytes */
			}
		}
#if 0
/* XXX - This assertion fails sometimes when various coding modes are used.
This seems to be harmless, but why does it happen at all? */
assert(jas_stream_tell(cblk->stream) == jas_stream_getrwcount(cblk->stream));
#endif

		pass->wmsedec = jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
		  jpc_fixtodbl(band->synweight) *
		  jpc_fixtodbl(band->synweight) *
		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *
		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *
		  jpc_fixtodbl(pass->nmsedec);
		pass->cumwmsedec = pass->wmsedec;
		if (pass != cblk->passes) {
			pass->cumwmsedec += pass[-1].cumwmsedec;
		}
		if (passtype == JPC_CLNPASS) {
			--bitpos;
		}
		++pass;
	}

#if 0
dump_passes(cblk->passes, cblk->numpasses, cblk);
#endif

	n = 0;
	endpasses = &cblk->passes[cblk->numpasses];
	for (pass = cblk->passes; pass != endpasses; ++pass) {
		if (pass->start < n) {
			pass->start = n;
		}
		if (pass->end < n) {
			pass->end = n;
		}
		if (!pass->term) {
			termpass = pass;
			while (termpass - pass < cblk->numpasses &&
			  !termpass->term) {
				++termpass;
			}
			if (pass->type == JPC_SEG_MQ) {
				t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0;
				if (pass->mqencstate.ctreg >= 5) {
					adjust = 4 + t;
				} else {
					adjust = 5 + t;
				}
				pass->end += adjust;
			}
			if (pass->end > termpass->end) {
				pass->end = termpass->end;
			}
			if ((c = getthebyte(cblk->stream, pass->end - 1)) == EOF) {
				abort();
			}
			if (c == 0xff) {
				++pass->end;
			}
			n = JAS_MAX(n, pass->end);
		} else {
			n = JAS_MAX(n, pass->end);
		}
	}

#if 0
dump_passes(cblk->passes, cblk->numpasses, cblk);
#endif

	if (bout) {
		jpc_bitstream_close(bout);
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
24,25
26,27
26,28
29,30
29,31
30,31
32,33
32,34
35,36
35,37
35,38
35,39
35,40
35,41
35,42
35,43
35,44
35,45
35,46
35,47
35,48
35,49
35,50
35,51
35,52
35,53
35,54
35,55
35,56
35,57
35,58
35,59
35,60
35,61
35,62
35,63
35,64
35,65
35,66
35,67
35,68
35,69
35,70
35,71
35,72
36,37
37,38
37,39
38,39
40,41
40,42
43,44
44,45
44,46
45,46
47,48
47,49
50,51
51,52
51,53
53,54
55,56
56,57
56,58
58,59
60,61
61,62
61,63
63,64
65,66
66,67
66,68
68,69
70,71
71,72
71,73
73,74
75,76
76,77
76,78
78,79
80,81
81,82
81,83
82,83
84,85
84,86
87,88
88,89
88,90
89,90
91,92
91,93
94,95
95,96
95,97
96,97
98,99
98,100
101,102
102,103
102,104
104,105
106,107
107,108
107,109
109,110
111,112
112,113
112,114
114,115
116,117
117,118
117,119
119,120
121,122
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
130,132
131,132
134,135
135,136
135,137
136,137
136,138
137,138
140,141
140,142
140,143
141,142
145,146
146,147
146,148
147,148
149,150
149,151
150,151
153,154
154,155
154,156
155,156
155,157
156,157
159,160
159,161
159,162
160,161
162,163
164,165
164,166
165,166
168,169
169,170
169,171
170,171
172,173
172,174
173,174
176,177
177,178
177,179
177,180
177,181
178,179
180,181
180,182
181,182
184,185
186,187
188,189
189,190
189,191
190,191
190,192
191,192
194,195
194,196
194,197
195,196
196,197
196,198
197,198
197,199
198,199
202,203
203,204
203,205
204,205
204,206
206,207
206,208
207,208
212,213
212,214
212,215
213,214
213,215
214,215
214,216
215,216
219,220
219,221
220,221
221,222
221,223
222,223
222,224
223,224
226,227
226,228
227,228
229,230
229,231
230,231
230,232
231,232
234,235
235,236
235,237
236,237
239,240
240,241
240,242
241,242
243,244
243,245
244,245
247,248
248,249
249,250
249,251
250,251
250,252
251,252
255,256
256,257
256,258
257,258
259,260
260,261
260,262
261,262
261,263
262,263
265,266
265,267
266,267
269,270
269,271
269,272
269,273
270,271
271,272
271,273
272,273
274,275
274,276
275,276
278,279
278,280
279,280
281,282
283,284
284,285
286,287
286,288
286,289
286,290
286,291
286,292
287,288
288,289
288,290
289,290
289,291
290,291
294,295
295,296
295,297
296,297
296,298
297,298
301,302
302,303
302,304
303,304
303,305
304,305
307,308
307,309
307,310
307,311
307,312
307,313
308,309
310,311
310,312
311,312
313,314
313,315
314,315
318,319
318,320
319,320
322,323
322,324
323,324
324,325
324,326
325,326
325,327
326,327
329,330
332,333
332,334
333,334
334,335
334,336
335,336
335,337
336,337
339,340
342,343
343,344
343,345
344,345
344,346
345,346
348,349
348,350
348,351
348,352
349,350
351,352
351,353
352,353
354,355
354,356
355,356
359,360
359,361
360,361
361,362
361,363
362,363
362,364
363,364
366,367
369,370
370,371
370,372
371,372
371,373
372,373
375,376
377,378
377,379
378,379
378,380
379,380
381,382
381,383
382,383
385,386
385,387
386,387
387,388
387,389
388,389
390,391
390,392
391,392
391,393
392,393
396,397
397,398
397,399
398,399
398,400
399,400
403,404
404,405
404,406
405,406
405,407
406,407
409,410
409,411
409,412
410,411
412,413
412,414
413,414
413,415
414,415
416,417
416,418
417,418
421,422
421,423
422,423
422,424
423,424
425,426
425,427
426,427
430,431
431,432
431,433
432,433
434,435
434,436
435,436
438,439
439,440
439,441
440,441
442,443
442,444
443,444
443,445
444,445
448,449
449,450
449,451
450,451
452,453
452,454
453,454
456,457
457,458
457,459
458,459
460,461
460,462
461,462
464,465
464,466
465,466
465,467
466,467
467,468
470,471
470,472
470,473
470,474
470,475
470,476
470,477
470,478
470,479
470,480
470,481
470,482
470,483
470,484
471,472
471,473
471,474
472,473
472,474
473,474
473,475
474,475
477,478
480,481
480,482
481,482
482,483
482,484
483,484
485,486
485,487
486,487
486,488
487,488
490,491
492,493
492,494
493,494
494,495
496,497
496,498
497,498
498,499
498,500
499,500
501,502
501,503
501,504
502,503
504,505
504,506
505,506
509,510
510,511
510,512
511,512
513,514
515,516
516,517
516,518
517,518
519,520
519,521
520,521
521,522
521,523
522,523
522,524
523,524
525,526
525,527
526,527
531,532
532,533
532,534
533,534
533,535
534,535
537,538
537,539
538,539
540,541
540,542
541,542
544,545
545,546
545,547
546,547
548,549
548,550
549,550
552,553
553,554
553,555
554,555
556,557
556,558
557,558
558,559
558,560
559,560
559,561
560,561
563,564
566,567
567,568
567,569
568,569
570,571
570,572
571,572
572,573
572,574
573,574
573,575
574,575
577,578
580,581
580,582
580,583
581,582
581,583
582,583
585,586
586,587
587,588
587,589
588,589
590,591
590,592
591,592
592,593
592,594
592,595
593,594
594,595
594,596
595,596
595,597
596,597
599,600
601,602
603,604
606,607
607,608
608,609
608,610
609,610
612,613
612,614
613,614
615,616
615,617
615,618
615,619
615,620
615,621
615,622
615,623
615,624
615,625
615,626
615,627
615,628
616,617
617,618
619,620
620,621
620,622
621,622
623,624
623,625
623,626
624,625
625,626
625,627
626,627
626,628
627,628
630,631
632,633
632,634
632,635
632,636
632,637
632,638
632,639
632,640
632,641
633,634
635,636
635,637
636,637
639,640
641,642
641,643
642,643
645,646
647,648
647,649
648,649
651,652
651,653
652,653
655,656
657,658
658,659
658,660
659,660
662,663
662,664
662,665
662,666
662,667
662,668
662,669
662,670
663,664
665,666
667,668
669,670
671,672
671,673
672,673
675,676
675,677
676,677
679,680
681,682
682,683
682,684
683,684
687,688
688,689
690,691
691,692
691,693
692,693
694,695
694,696
694,697
695,696
696,697
696,698
697,698
697,699
698,699
701,702
703,704
703,705
703,706
703,707
703,708
703,709
703,710
703,711
704,705
706,707
706,708
707,708
710,711
712,713
714,715
714,716
715,716
718,719
718,720
719,720
722,723
724,725
725,726
725,727
726,727
729,730
729,731
729,732
729,733
729,734
729,735
729,736
729,737
730,731
732,733
734,735
736,737
738,739
738,740
739,740
742,743
742,744
743,744
746,747
748,749
749,750
749,751
750,751
754,755
755,756
757,758
758,759
758,760
759,760
761,762
761,763
762,763
762,764
763,764
766,767
768,769
769,770
769,771
770,771
772,773
772,774
772,775
772,776
772,777
772,778
772,779
772,780
772,781
772,782
773,774
775,776
775,777
776,777
779,780
781,782
781,783
782,783
785,786
787,788
789,790
789,791
790,791
793,794
793,795
794,795
797,798
799,800
800,801
800,802
801,802
806,807
807,808
807,809
808,809
812,813
812,814
812,815
813,814
813,815
814,815
814,816
815,816
818,819
820,821
820,822
820,823
820,824
821,822
821,823
822,823
822,824
823,824
826,827
827,828
828,829
828,830
829,830
831,832
831,833
832,833
835,836
836,837
836,838
836,839
837,838
839,840
839,841
840,841
843,844
844,845
844,846
845,846
848,849
849,850
849,851
850,851
850,852
851,852
854,855
854,856
855,856
857,858
857,859
858,859
861,862
861,863
862,863
862,864
863,864
863,865
864,865
867,868
869,870
870,871
871,872
871,873
871,874
871,875
872,873
874,875
874,876
875,876
878,879
880,881
882,883
883,884
883,885
883,886
884,885
884,886
885,886
888,889
888,890
888,891
888,892
889,890
889,891
890,891
890,892
891,892
893,894
895,896
896,897
897,898
897,899
897,900
898,899
900,901
903,904
904,905
904,906
905,906
907,908
909,910
910,911
910,912
911,912
914,915
915,916
915,917
916,917
916,918
917,918
920,921
920,922
921,922
923,924
923,925
924,925
927,928
928,929
929,930
929,931
930,931
930,932
931,932
934,935
934,936
935,936
935,937
936,937
938,939
938,940
939,940
942,943
942,944
943,944
945,946
947,948
948,949
948,950
949,950
949,951
950,951
953,954
953,955
954,955
954,956
955,956
955,957
956,957
956,958
957,958
957,959
958,959
958,960
959,960
959,961
960,961
960,962
961,962
961,963
962,963
964,965
964,966
965,966
965,967
966,967
966,968
967,968
972,973
972,974
973,974
975,976
975,977
976,977
976,978
977,978
977,979
978,979
983,984
983,985
984,985
986,987
986,988
987,988
990,991
990,992
991,992
993,994
993,995
994,995
997,998
997,999
998,999
1000,1001
1000,1002
1001,1002
1004,1005
1004,1006
1005,1006
1007,1008
1007,1009
1008,1009
1011,1012
1012,1013
1012,1014
1013,1014
1013,1015
1016,1017
1017,1018
1017,1019
1019,1020
1021,1022
1022,1023
1022,1024
1023,1024
1023,1025
1026,1027
1027,1028
1027,1029
1029,1030
1031,1032
1031,1033
1032,1033
1034,1035
1034,1036
1035,1036
1038,1039
1039,1040
1039,1041
1040,1041
1040,1042
1041,1042
1044,1045
1044,1046
1045,1046
1048,1049
1048,1050
1049,1050
1049,1051
1050,1051
1052,1053
1052,1054
1053,1054
1056,1057
1057,1058
1058,1059
1058,1060
1059,1060
1059,1061
1060,1061
1063,1064
1063,1065
1064,1065
1064,1066
1065,1066
1067,1068
1070,1071
1070,1072
1071,1072
1071,1073
1072,1073
1074,1075
1076,1077
1077,1078
1078,1079
1079,1080
1081,1082
1082,1083
1083,1084
1085,1086
1086,1087
1086,1088
1087,1088
1090,1091
1091,1092
1091,1093
1092,1093
1094,1095
1095,1096
1095,1097
1096,1097
1096,1098
1097,1098
1100,1101
1100,1102
1101,1102
1104,1105
1104,1106
1104,1107
1104,1108
1105,1106
1106,1107
1106,1108
1107,1108
1109,1110
1109,1111
1110,1111
1113,1114
1113,1115
1114,1115
1116,1117
1118,1119
1119,1120
1121,1122
1121,1123
1121,1124
1122,1123
1122,1124
1123,1124
1123,1125
1124,1125
1124,1126
1125,1126
1128,1129
1130,1131
1131,1132
1132,1133
1132,1134
1133,1134
1133,1135
1134,1135
1137,1138
1139,1140
1139,1141
1140,1141
1140,1142
1141,1142
1141,1143
1142,1143
1145,1146
1147,1148
1148,1149
1149,1150
1149,1151
1150,1151
1150,1152
1151,1152
1154,1155
1156,1157
1156,1158
1156,1159
1157,1158
1158,1159
1158,1160
1159,1160
1162,1163
1162,1164
1162,1165
1162,1166
1162,1167
1162,1168
1162,1169
1163,1164
1164,1165
1164,1166
1165,1166
1167,1168
1169,1170
1169,1171
1170,1171
1170,1172
1171,1172
1171,1173
1172,1173
1172,1174
1173,1174
1175,1176
1177,1178
1177,1179
1178,1179
1181,1182
1182,1183
1182,1184
1183,1184
1186,1187
1187,1188
1188,1189
1189,1190
1191,1192
1191,1193
1192,1193
1192,1194
1193,1194
1193,1195
1194,1195
1197,1198
1199,1200
1199,1201
1199,1202
1200,1201
1201,1202
1201,1203
1202,1203
1204,1205
1204,1206
1204,1207
1205,1206
1206,1207
1206,1208
1207,1208
1207,1209
1208,1209
1208,1210
1209,1210
1216,1217
1216,1218
1216,1219
1217,1218
1217,1219
1218,1219
1218,1220
1219,1220
1219,1221
1220,1221
1225,1226
1226,1227
1227,1228
1227,1229
1228,1229
1230,1231
1230,1232
1232,1233
1234,1235
1235,1236
1236,1237
1236,1238
1237,1238
1239,1240
1239,1241
1241,1242
1243,1244
1244,1245
1244,1246
1245,1246
1245,1247
1246,1247
1249,1250
1251,1252
1251,1253
1252,1253
1252,1254
1253,1254
1253,1255
1254,1255
1257,1258
1257,1259
1258,1259
1261,1262
1262,1263
1263,1264
1263,1265
1264,1265
1264,1266
1265,1266
1268,1269
1268,1270
1269,1270
1272,1273
1272,1274
1273,1274
1273,1275
1274,1275
1275,1276
1275,1277
1276,1277
1278,1279
1278,1280
1278,1281
1279,1280
1281,1282
1281,1283
1282,1283
1285,1286
1285,1287
1286,1287
1286,1288
1287,1288
1291,1292
1293,1294
1294,1295
1295,1296
1296,1297
1298,1299
1298,1300
1299,1300
1299,1301
1300,1301
1303,1304
1304,1305
1305,1306
1306,1307
1306,1308
1307,1308
1310,1311
1311,1312
1311,1313
1312,1313
1314,1315
1314,1316
1314,1317
1315,1316
1317,1318
1319,1320
1319,1321
1320,1321
1323,1324
1324,1325
1325,1326
1325,1327
1326,1327
1328,1329
1328,1330
1328,1331
1329,1330
1331,1332
1333,1334
1333,1335
1334,1335
1337,1338
1337,1339
1338,1339
1340,1341
1341,1342
1342,1343
1342,1344
1343,1344
1345,1346
1347,1348
-----nextToken-----

-----computeFrom-----
122,123
122,124
127,128
127,129
135,136
135,137
154,155
154,156
189,190
189,191
196,197
196,198
203,204
203,205
204,205
204,206
213,214
213,215
221,222
221,223
229,230
229,231
249,250
249,251
256,257
256,258
271,272
271,273
278,279
278,280
288,289
288,290
295,296
295,297
302,303
302,304
310,311
310,312
322,323
322,324
324,325
324,326
332,333
332,334
334,335
334,336
343,344
343,345
351,352
351,353
359,360
359,361
361,362
361,363
370,371
370,372
378,379
378,380
381,382
381,383
390,391
390,392
397,398
397,399
404,405
404,406
412,413
412,414
421,422
421,423
439,440
439,441
442,443
442,444
449,450
449,451
457,458
457,459
465,466
465,467
472,473
472,474
485,486
485,487
498,499
498,500
516,517
516,518
519,520
519,521
521,522
521,523
522,523
522,524
532,533
532,534
548,549
548,550
553,554
553,555
556,557
556,558
558,559
558,560
567,568
567,569
570,571
570,572
572,573
572,574
587,588
587,589
590,591
590,592
594,595
594,596
608,609
608,610
620,621
620,622
625,626
625,627
691,692
691,693
696,697
696,698
761,762
761,763
769,770
769,771
813,814
813,815
849,850
849,851
862,863
862,864
910,911
910,912
915,916
915,917
929,930
929,931
934,935
934,936
948,949
948,950
953,954
953,955
954,955
954,956
955,956
955,957
956,957
956,958
957,958
957,959
958,959
958,960
959,960
959,961
960,961
960,962
1017,1018
1017,1019
1027,1028
1027,1029
1039,1040
1039,1041
1049,1050
1049,1051
1058,1059
1058,1060
1071,1072
1071,1073
1086,1087
1086,1088
1091,1092
1091,1093
1106,1107
1106,1108
1113,1114
1113,1115
1123,1124
1123,1125
1132,1133
1132,1134
1140,1141
1140,1142
1149,1150
1149,1151
1164,1165
1164,1166
1170,1171
1170,1172
1171,1172
1171,1173
1172,1173
1172,1174
1192,1193
1192,1194
1201,1202
1201,1203
1206,1207
1206,1208
1217,1218
1217,1219
1227,1228
1227,1229
1230,1231
1230,1232
1236,1237
1236,1238
1239,1240
1239,1241
1244,1245
1244,1246
1252,1253
1252,1254
1263,1264
1263,1265
1273,1274
1273,1275
1275,1276
1275,1277
1285,1286
1285,1287
1299,1300
1299,1301
1311,1312
1311,1313
1325,1326
1325,1327
-----guardedBy-----
216,245
217,233
380,400
816,852
1051,1066
1126,1135
1127,1136
1129,1138
1143,1152
1144,1153
1146,1155
1195,1247
1255,1266
1259,1270
1260,1271
-----guardedByNegation-----
216,252
475,488
476,489
816,932
-----lastLexicalUse-----
216,252
816,932
-----jump-----
216,252
816,932
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;UnaryExpression;LiteralExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int jpc_enc_enccblk(jpc_enc_t *enc, jas_stream_t *out, jpc_enc_tcmpt_t *tcmpt, jpc_enc_band_t *band, jpc_enc_cblk_t *cblk){	jpc_enc_pass_t *pass;	jpc_enc_pass_t *endpasses;	int bitpos;	int n;	int adjust;	int ret;	int passtype;	int t;	jpc_bitstream_t *bout;	jpc_enc_pass_t *termpass;	jpc_enc_rlvl_t *rlvl;	int vcausal;	int segsym;	int termmode;	int c;	bout = 0;	rlvl = band->rlvl;	cblk->stream = jas_stream_memopen(0, 0);	assert(cblk->stream);	cblk->mqenc = jpc_mqenc_create(JPC_NUMCTXS, cblk->stream);	assert(cblk->mqenc);	jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);	cblk->numpasses = (cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0;	if (cblk->numpasses > 0) {		cblk->passes = jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t));		assert(cblk->passes);	} else {		cblk->passes = 0;	}	endpasses = &cblk->passes[cblk->numpasses];	for (pass = cblk->passes; pass != endpasses; ++pass) {		pass->start = 0;		pass->end = 0;		pass->term = JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);		pass->type = JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);		pass->lyrno = -1;if (pass == endpasses - 1) {assert(pass->term == 1);	pass->term = 1;}	}	cblk->flags = jas_matrix_create(jas_matrix_numrows(cblk->data) + 2,	  jas_matrix_numcols(cblk->data) + 2);	assert(cblk->flags);	bitpos = cblk->numbps - 1;	pass = cblk->passes;	n = cblk->numpasses;	while (--n >= 0) {		if (pass->type == JPC_SEG_MQ) {			/* NOP */		} else {			assert(pass->type == JPC_SEG_RAW);			if (!bout) {				bout = jpc_bitstream_sopen(cblk->stream, "w");				assert(bout);			}		}#if 1		passtype = (pass - cblk->passes + 2) % 3;#else		passtype = JPC_PASSTYPE(pass - cblk->passes + 2);#endif		pass->start = jas_stream_tell(cblk->stream);#if 0assert(jas_stream_tell(cblk->stream) == jas_stream_getrwcount(cblk->stream));#endif		assert(bitpos >= 0);		vcausal = (tcmpt->cblksty & JPC_COX_VSC) != 0;		segsym = (tcmpt->cblksty & JPC_COX_SEGSYM) != 0;		if (pass->term) {			termmode = ((tcmpt->cblksty & JPC_COX_PTERM) ?			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1;		} else {			termmode = 0;		}		switch (passtype) {		case JPC_SIGPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,			  bitpos, band->orient, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec) :			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec);			break;		case JPC_REFPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,			  vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		case JPC_CLNPASS:			assert(pass->type == JPC_SEG_MQ);			ret = jpc_encclnpass(cblk->mqenc, bitpos, band->orient,			  vcausal, segsym, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		default:			assert(0);			break;		}		if (pass->type == JPC_SEG_MQ) {			if (pass->term) {				jpc_mqenc_init(cblk->mqenc);			}			jpc_mqenc_getstate(cblk->mqenc, &pass->mqencstate);			pass->end = jas_stream_tell(cblk->stream);			if (tcmpt->cblksty & JPC_COX_RESET) {				jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);			}		} else {			if (pass->term) {				if (jpc_bitstream_pending(bout)) {					jpc_bitstream_outalign(bout, 0x2a);				}				jpc_bitstream_close(bout);				bout = 0;				pass->end = jas_stream_tell(cblk->stream);			} else {				pass->end = jas_stream_tell(cblk->stream) +				  jpc_bitstream_pending(bout);/* NOTE - This will not work.  need to adjust by # of pending output bytes */			}		}#if 0/* XXX - This assertion fails sometimes when various coding modes are used.This seems to be harmless, but why does it happen at all? */assert(jas_stream_tell(cblk->stream) == jas_stream_getrwcount(cblk->stream));#endif		pass->wmsedec = jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *		  jpc_fixtodbl(pass->nmsedec);		pass->cumwmsedec = pass->wmsedec;		if (pass != cblk->passes) {			pass->cumwmsedec += pass[-1].cumwmsedec;		}		if (passtype == JPC_CLNPASS) {			--bitpos;		}		++pass;	}#if 0dump_passes(cblk->passes, cblk->numpasses, cblk);#endif	n = 0;	endpasses = &cblk->passes[cblk->numpasses];	for (pass = cblk->passes; pass != endpasses; ++pass) {		if (pass->start < n) {			pass->start = n;		}		if (pass->end < n) {			pass->end = n;		}		if (!pass->term) {			termpass = pass;			while (termpass - pass < cblk->numpasses &&			  !termpass->term) {				++termpass;			}			if (pass->type == JPC_SEG_MQ) {				t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0;				if (pass->mqencstate.ctreg >= 5) {					adjust = 4 + t;				} else {					adjust = 5 + t;				}				pass->end += adjust;			}			if (pass->end > termpass->end) {				pass->end = termpass->end;			}			if ((c = getthebyte(cblk->stream, pass->end - 1)) == EOF) {				abort();			}			if (c == 0xff) {				++pass->end;			}			n = JAS_MAX(n, pass->end);		} else {			n = JAS_MAX(n, pass->end);		}	}#if 0dump_passes(cblk->passes, cblk->numpasses, cblk);#endif	if (bout) {		jpc_bitstream_close(bout);	}	return 0;}
int
jpc_enc_enccblk(jpc_enc_t *enc, jas_stream_t *out, jpc_enc_tcmpt_t *tcmpt, jpc_enc_band_t *band, jpc_enc_cblk_t *cblk)
jpc_enc_enccblk
jpc_enc_t *enc
jpc_enc_t
jpc_enc_t
*enc
*
enc
jas_stream_t *out
jas_stream_t
jas_stream_t
*out
*
out
jpc_enc_tcmpt_t *tcmpt
jpc_enc_tcmpt_t
jpc_enc_tcmpt_t
*tcmpt
*
tcmpt
jpc_enc_band_t *band
jpc_enc_band_t
jpc_enc_band_t
*band
*
band
jpc_enc_cblk_t *cblk
jpc_enc_cblk_t
jpc_enc_cblk_t
*cblk
*
cblk
{	jpc_enc_pass_t *pass;	jpc_enc_pass_t *endpasses;	int bitpos;	int n;	int adjust;	int ret;	int passtype;	int t;	jpc_bitstream_t *bout;	jpc_enc_pass_t *termpass;	jpc_enc_rlvl_t *rlvl;	int vcausal;	int segsym;	int termmode;	int c;	bout = 0;	rlvl = band->rlvl;	cblk->stream = jas_stream_memopen(0, 0);	assert(cblk->stream);	cblk->mqenc = jpc_mqenc_create(JPC_NUMCTXS, cblk->stream);	assert(cblk->mqenc);	jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);	cblk->numpasses = (cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0;	if (cblk->numpasses > 0) {		cblk->passes = jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t));		assert(cblk->passes);	} else {		cblk->passes = 0;	}	endpasses = &cblk->passes[cblk->numpasses];	for (pass = cblk->passes; pass != endpasses; ++pass) {		pass->start = 0;		pass->end = 0;		pass->term = JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);		pass->type = JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);		pass->lyrno = -1;if (pass == endpasses - 1) {assert(pass->term == 1);	pass->term = 1;}	}	cblk->flags = jas_matrix_create(jas_matrix_numrows(cblk->data) + 2,	  jas_matrix_numcols(cblk->data) + 2);	assert(cblk->flags);	bitpos = cblk->numbps - 1;	pass = cblk->passes;	n = cblk->numpasses;	while (--n >= 0) {		if (pass->type == JPC_SEG_MQ) {			/* NOP */		} else {			assert(pass->type == JPC_SEG_RAW);			if (!bout) {				bout = jpc_bitstream_sopen(cblk->stream, "w");				assert(bout);			}		}#if 1		passtype = (pass - cblk->passes + 2) % 3;#else		passtype = JPC_PASSTYPE(pass - cblk->passes + 2);#endif		pass->start = jas_stream_tell(cblk->stream);#if 0assert(jas_stream_tell(cblk->stream) == jas_stream_getrwcount(cblk->stream));#endif		assert(bitpos >= 0);		vcausal = (tcmpt->cblksty & JPC_COX_VSC) != 0;		segsym = (tcmpt->cblksty & JPC_COX_SEGSYM) != 0;		if (pass->term) {			termmode = ((tcmpt->cblksty & JPC_COX_PTERM) ?			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1;		} else {			termmode = 0;		}		switch (passtype) {		case JPC_SIGPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,			  bitpos, band->orient, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec) :			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec);			break;		case JPC_REFPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,			  vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		case JPC_CLNPASS:			assert(pass->type == JPC_SEG_MQ);			ret = jpc_encclnpass(cblk->mqenc, bitpos, band->orient,			  vcausal, segsym, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		default:			assert(0);			break;		}		if (pass->type == JPC_SEG_MQ) {			if (pass->term) {				jpc_mqenc_init(cblk->mqenc);			}			jpc_mqenc_getstate(cblk->mqenc, &pass->mqencstate);			pass->end = jas_stream_tell(cblk->stream);			if (tcmpt->cblksty & JPC_COX_RESET) {				jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);			}		} else {			if (pass->term) {				if (jpc_bitstream_pending(bout)) {					jpc_bitstream_outalign(bout, 0x2a);				}				jpc_bitstream_close(bout);				bout = 0;				pass->end = jas_stream_tell(cblk->stream);			} else {				pass->end = jas_stream_tell(cblk->stream) +				  jpc_bitstream_pending(bout);/* NOTE - This will not work.  need to adjust by # of pending output bytes */			}		}#if 0/* XXX - This assertion fails sometimes when various coding modes are used.This seems to be harmless, but why does it happen at all? */assert(jas_stream_tell(cblk->stream) == jas_stream_getrwcount(cblk->stream));#endif		pass->wmsedec = jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *		  jpc_fixtodbl(pass->nmsedec);		pass->cumwmsedec = pass->wmsedec;		if (pass != cblk->passes) {			pass->cumwmsedec += pass[-1].cumwmsedec;		}		if (passtype == JPC_CLNPASS) {			--bitpos;		}		++pass;	}#if 0dump_passes(cblk->passes, cblk->numpasses, cblk);#endif	n = 0;	endpasses = &cblk->passes[cblk->numpasses];	for (pass = cblk->passes; pass != endpasses; ++pass) {		if (pass->start < n) {			pass->start = n;		}		if (pass->end < n) {			pass->end = n;		}		if (!pass->term) {			termpass = pass;			while (termpass - pass < cblk->numpasses &&			  !termpass->term) {				++termpass;			}			if (pass->type == JPC_SEG_MQ) {				t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0;				if (pass->mqencstate.ctreg >= 5) {					adjust = 4 + t;				} else {					adjust = 5 + t;				}				pass->end += adjust;			}			if (pass->end > termpass->end) {				pass->end = termpass->end;			}			if ((c = getthebyte(cblk->stream, pass->end - 1)) == EOF) {				abort();			}			if (c == 0xff) {				++pass->end;			}			n = JAS_MAX(n, pass->end);		} else {			n = JAS_MAX(n, pass->end);		}	}#if 0dump_passes(cblk->passes, cblk->numpasses, cblk);#endif	if (bout) {		jpc_bitstream_close(bout);	}	return 0;}
jpc_enc_pass_t *pass;
jpc_enc_pass_t *pass;
jpc_enc_pass_t
jpc_enc_pass_t
*pass
*
pass
jpc_enc_pass_t *endpasses;
jpc_enc_pass_t *endpasses;
jpc_enc_pass_t
jpc_enc_pass_t
*endpasses
*
endpasses
int bitpos;
int bitpos;
int
bitpos
bitpos
int n;
int n;
int
n
n
int adjust;
int adjust;
int
adjust
adjust
int ret;
int ret;
int
ret
ret
int passtype;
int passtype;
int
passtype
passtype
int t;
int t;
int
t
t
jpc_bitstream_t *bout;
jpc_bitstream_t *bout;
jpc_bitstream_t
jpc_bitstream_t
*bout
*
bout
jpc_enc_pass_t *termpass;
jpc_enc_pass_t *termpass;
jpc_enc_pass_t
jpc_enc_pass_t
*termpass
*
termpass
jpc_enc_rlvl_t *rlvl;
jpc_enc_rlvl_t *rlvl;
jpc_enc_rlvl_t
jpc_enc_rlvl_t
*rlvl
*
rlvl
int vcausal;
int vcausal;
int
vcausal
vcausal
int segsym;
int segsym;
int
segsym
segsym
int termmode;
int termmode;
int
termmode
termmode
int c;
int c;
int
c
c
bout = 0;
bout = 0
bout
bout
0
rlvl = band->rlvl;
rlvl = band->rlvl
rlvl
rlvl
band->rlvl
band
band
rlvl
cblk->stream = jas_stream_memopen(0, 0);
cblk->stream = jas_stream_memopen(0, 0)
cblk->stream
cblk
cblk
stream
jas_stream_memopen(0, 0)
jas_stream_memopen
jas_stream_memopen
0
0
assert(cblk->stream);
assert(cblk->stream)
assert
assert
cblk->stream
cblk
cblk
stream
cblk->mqenc = jpc_mqenc_create(JPC_NUMCTXS, cblk->stream);
cblk->mqenc = jpc_mqenc_create(JPC_NUMCTXS, cblk->stream)
cblk->mqenc
cblk
cblk
mqenc
jpc_mqenc_create(JPC_NUMCTXS, cblk->stream)
jpc_mqenc_create
jpc_mqenc_create
JPC_NUMCTXS
JPC_NUMCTXS
cblk->stream
cblk
cblk
stream
assert(cblk->mqenc);
assert(cblk->mqenc)
assert
assert
cblk->mqenc
cblk
cblk
mqenc
jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);
jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs)
jpc_mqenc_setctxs
jpc_mqenc_setctxs
cblk->mqenc
cblk
cblk
mqenc
JPC_NUMCTXS
JPC_NUMCTXS
jpc_mqctxs
jpc_mqctxs
cblk->numpasses = (cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0;
cblk->numpasses = (cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0
cblk->numpasses
cblk
cblk
numpasses
(cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0
(cblk->numbps > 0)
cblk->numbps > 0
cblk->numbps
cblk
cblk
numbps
0
(3 * cblk->numbps - 2)
3 * cblk->numbps - 2
3 * cblk->numbps
3
cblk->numbps
cblk
cblk
numbps
2
0
if (cblk->numpasses > 0) {		cblk->passes = jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t));		assert(cblk->passes);	} else {		cblk->passes = 0;	}
cblk->numpasses > 0
cblk->numpasses
cblk
cblk
numpasses
0
{		cblk->passes = jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t));		assert(cblk->passes);	}
cblk->passes = jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t));
cblk->passes = jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t))
cblk->passes
cblk
cblk
passes
jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t))
jas_malloc
jas_malloc
cblk->numpasses * sizeof(jpc_enc_pass_t)
cblk->numpasses
cblk
cblk
numpasses
sizeof(jpc_enc_pass_t)
jpc_enc_pass_t
jpc_enc_pass_t
jpc_enc_pass_t

assert(cblk->passes);
assert(cblk->passes)
assert
assert
cblk->passes
cblk
cblk
passes
{		cblk->passes = 0;	}
cblk->passes = 0;
cblk->passes = 0
cblk->passes
cblk
cblk
passes
0
endpasses = &cblk->passes[cblk->numpasses];
endpasses = &cblk->passes[cblk->numpasses]
endpasses
endpasses
&cblk->passes[cblk->numpasses]
cblk->passes[cblk->numpasses]
cblk->passes
cblk
cblk
passes
cblk->numpasses
cblk
cblk
numpasses
for (pass = cblk->passes; pass != endpasses; ++pass) {		pass->start = 0;		pass->end = 0;		pass->term = JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);		pass->type = JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);		pass->lyrno = -1;if (pass == endpasses - 1) {assert(pass->term == 1);	pass->term = 1;}	}
pass = cblk->passes;
pass = cblk->passes
pass
pass
cblk->passes
cblk
cblk
passes
pass != endpasses
pass
pass
endpasses
endpasses
++pass
pass
pass
{		pass->start = 0;		pass->end = 0;		pass->term = JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);		pass->type = JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);		pass->lyrno = -1;if (pass == endpasses - 1) {assert(pass->term == 1);	pass->term = 1;}	}
pass->start = 0;
pass->start = 0
pass->start
pass
pass
start
0
pass->end = 0;
pass->end = 0
pass->end
pass
pass
end
0
pass->term = JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);
pass->term = JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
pass->term
pass
pass
term
JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
JPC_ISTERMINATED
JPC_ISTERMINATED
pass - cblk->passes
pass
pass
cblk->passes
cblk
cblk
passes
0
cblk->numpasses
cblk
cblk
numpasses
(tcmpt->cblksty & JPC_COX_TERMALL) != 0
(tcmpt->cblksty & JPC_COX_TERMALL)
tcmpt->cblksty & JPC_COX_TERMALL
tcmpt->cblksty
tcmpt
tcmpt
cblksty
JPC_COX_TERMALL
JPC_COX_TERMALL
0
(tcmpt->cblksty & JPC_COX_LAZY) != 0
(tcmpt->cblksty & JPC_COX_LAZY)
tcmpt->cblksty & JPC_COX_LAZY
tcmpt->cblksty
tcmpt
tcmpt
cblksty
JPC_COX_LAZY
JPC_COX_LAZY
0
pass->type = JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0);
pass->type = JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
pass->type
pass
pass
type
JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
JPC_SEGTYPE
JPC_SEGTYPE
pass - cblk->passes
pass
pass
cblk->passes
cblk
cblk
passes
0
(tcmpt->cblksty & JPC_COX_LAZY) != 0
(tcmpt->cblksty & JPC_COX_LAZY)
tcmpt->cblksty & JPC_COX_LAZY
tcmpt->cblksty
tcmpt
tcmpt
cblksty
JPC_COX_LAZY
JPC_COX_LAZY
0
pass->lyrno = -1;
pass->lyrno = -1
pass->lyrno
pass
pass
lyrno
-1
1
if (pass == endpasses - 1) {assert(pass->term == 1);	pass->term = 1;}
pass == endpasses - 1
pass
pass
endpasses - 1
endpasses
endpasses
1
{assert(pass->term == 1);	pass->term = 1;}
assert(pass->term == 1);
assert(pass->term == 1)
assert
assert
pass->term == 1
pass->term
pass
pass
term
1
pass->term = 1;
pass->term = 1
pass->term
pass
pass
term
1
cblk->flags = jas_matrix_create(jas_matrix_numrows(cblk->data) + 2,	  jas_matrix_numcols(cblk->data) + 2);
cblk->flags = jas_matrix_create(jas_matrix_numrows(cblk->data) + 2,	  jas_matrix_numcols(cblk->data) + 2)
cblk->flags
cblk
cblk
flags
jas_matrix_create(jas_matrix_numrows(cblk->data) + 2,	  jas_matrix_numcols(cblk->data) + 2)
jas_matrix_create
jas_matrix_create
jas_matrix_numrows(cblk->data) + 2
jas_matrix_numrows(cblk->data)
jas_matrix_numrows
jas_matrix_numrows
cblk->data
cblk
cblk
data
2
jas_matrix_numcols(cblk->data) + 2
jas_matrix_numcols(cblk->data)
jas_matrix_numcols
jas_matrix_numcols
cblk->data
cblk
cblk
data
2
assert(cblk->flags);
assert(cblk->flags)
assert
assert
cblk->flags
cblk
cblk
flags
bitpos = cblk->numbps - 1;
bitpos = cblk->numbps - 1
bitpos
bitpos
cblk->numbps - 1
cblk->numbps
cblk
cblk
numbps
1
pass = cblk->passes;
pass = cblk->passes
pass
pass
cblk->passes
cblk
cblk
passes
n = cblk->numpasses;
n = cblk->numpasses
n
n
cblk->numpasses
cblk
cblk
numpasses
while (--n >= 0) {		if (pass->type == JPC_SEG_MQ) {			/* NOP */		} else {			assert(pass->type == JPC_SEG_RAW);			if (!bout) {				bout = jpc_bitstream_sopen(cblk->stream, "w");				assert(bout);			}		}#if 1		passtype = (pass - cblk->passes + 2) % 3;#else		passtype = JPC_PASSTYPE(pass - cblk->passes + 2);#endif		pass->start = jas_stream_tell(cblk->stream);#if 0assert(jas_stream_tell(cblk->stream) == jas_stream_getrwcount(cblk->stream));#endif		assert(bitpos >= 0);		vcausal = (tcmpt->cblksty & JPC_COX_VSC) != 0;		segsym = (tcmpt->cblksty & JPC_COX_SEGSYM) != 0;		if (pass->term) {			termmode = ((tcmpt->cblksty & JPC_COX_PTERM) ?			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1;		} else {			termmode = 0;		}		switch (passtype) {		case JPC_SIGPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,			  bitpos, band->orient, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec) :			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec);			break;		case JPC_REFPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,			  vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		case JPC_CLNPASS:			assert(pass->type == JPC_SEG_MQ);			ret = jpc_encclnpass(cblk->mqenc, bitpos, band->orient,			  vcausal, segsym, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		default:			assert(0);			break;		}		if (pass->type == JPC_SEG_MQ) {			if (pass->term) {				jpc_mqenc_init(cblk->mqenc);			}			jpc_mqenc_getstate(cblk->mqenc, &pass->mqencstate);			pass->end = jas_stream_tell(cblk->stream);			if (tcmpt->cblksty & JPC_COX_RESET) {				jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);			}		} else {			if (pass->term) {				if (jpc_bitstream_pending(bout)) {					jpc_bitstream_outalign(bout, 0x2a);				}				jpc_bitstream_close(bout);				bout = 0;				pass->end = jas_stream_tell(cblk->stream);			} else {				pass->end = jas_stream_tell(cblk->stream) +				  jpc_bitstream_pending(bout);/* NOTE - This will not work.  need to adjust by # of pending output bytes */			}		}#if 0/* XXX - This assertion fails sometimes when various coding modes are used.This seems to be harmless, but why does it happen at all? */assert(jas_stream_tell(cblk->stream) == jas_stream_getrwcount(cblk->stream));#endif		pass->wmsedec = jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *		  jpc_fixtodbl(pass->nmsedec);		pass->cumwmsedec = pass->wmsedec;		if (pass != cblk->passes) {			pass->cumwmsedec += pass[-1].cumwmsedec;		}		if (passtype == JPC_CLNPASS) {			--bitpos;		}		++pass;	}
--n >= 0
--n
n
n
0
{		if (pass->type == JPC_SEG_MQ) {			/* NOP */		} else {			assert(pass->type == JPC_SEG_RAW);			if (!bout) {				bout = jpc_bitstream_sopen(cblk->stream, "w");				assert(bout);			}		}#if 1		passtype = (pass - cblk->passes + 2) % 3;#else		passtype = JPC_PASSTYPE(pass - cblk->passes + 2);#endif		pass->start = jas_stream_tell(cblk->stream);#if 0assert(jas_stream_tell(cblk->stream) == jas_stream_getrwcount(cblk->stream));#endif		assert(bitpos >= 0);		vcausal = (tcmpt->cblksty & JPC_COX_VSC) != 0;		segsym = (tcmpt->cblksty & JPC_COX_SEGSYM) != 0;		if (pass->term) {			termmode = ((tcmpt->cblksty & JPC_COX_PTERM) ?			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1;		} else {			termmode = 0;		}		switch (passtype) {		case JPC_SIGPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,			  bitpos, band->orient, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec) :			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec);			break;		case JPC_REFPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,			  vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		case JPC_CLNPASS:			assert(pass->type == JPC_SEG_MQ);			ret = jpc_encclnpass(cblk->mqenc, bitpos, band->orient,			  vcausal, segsym, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		default:			assert(0);			break;		}		if (pass->type == JPC_SEG_MQ) {			if (pass->term) {				jpc_mqenc_init(cblk->mqenc);			}			jpc_mqenc_getstate(cblk->mqenc, &pass->mqencstate);			pass->end = jas_stream_tell(cblk->stream);			if (tcmpt->cblksty & JPC_COX_RESET) {				jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);			}		} else {			if (pass->term) {				if (jpc_bitstream_pending(bout)) {					jpc_bitstream_outalign(bout, 0x2a);				}				jpc_bitstream_close(bout);				bout = 0;				pass->end = jas_stream_tell(cblk->stream);			} else {				pass->end = jas_stream_tell(cblk->stream) +				  jpc_bitstream_pending(bout);/* NOTE - This will not work.  need to adjust by # of pending output bytes */			}		}#if 0/* XXX - This assertion fails sometimes when various coding modes are used.This seems to be harmless, but why does it happen at all? */assert(jas_stream_tell(cblk->stream) == jas_stream_getrwcount(cblk->stream));#endif		pass->wmsedec = jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *		  jpc_fixtodbl(pass->nmsedec);		pass->cumwmsedec = pass->wmsedec;		if (pass != cblk->passes) {			pass->cumwmsedec += pass[-1].cumwmsedec;		}		if (passtype == JPC_CLNPASS) {			--bitpos;		}		++pass;	}
if (pass->type == JPC_SEG_MQ) {			/* NOP */		} else {			assert(pass->type == JPC_SEG_RAW);			if (!bout) {				bout = jpc_bitstream_sopen(cblk->stream, "w");				assert(bout);			}		}
pass->type == JPC_SEG_MQ
pass->type
pass
pass
type
JPC_SEG_MQ
JPC_SEG_MQ
{			/* NOP */		}
{			assert(pass->type == JPC_SEG_RAW);			if (!bout) {				bout = jpc_bitstream_sopen(cblk->stream, "w");				assert(bout);			}		}
assert(pass->type == JPC_SEG_RAW);
assert(pass->type == JPC_SEG_RAW)
assert
assert
pass->type == JPC_SEG_RAW
pass->type
pass
pass
type
JPC_SEG_RAW
JPC_SEG_RAW
if (!bout) {				bout = jpc_bitstream_sopen(cblk->stream, "w");				assert(bout);			}
!bout
bout
bout
{				bout = jpc_bitstream_sopen(cblk->stream, "w");				assert(bout);			}
bout = jpc_bitstream_sopen(cblk->stream, "w");
bout = jpc_bitstream_sopen(cblk->stream, "w")
bout
bout
jpc_bitstream_sopen(cblk->stream, "w")
jpc_bitstream_sopen
jpc_bitstream_sopen
cblk->stream
cblk
cblk
stream
"w"
assert(bout);
assert(bout)
assert
assert
bout
bout
passtype = (pass - cblk->passes + 2) % 3;
passtype = (pass - cblk->passes + 2) % 3
passtype
passtype
(pass - cblk->passes + 2) % 3
(pass - cblk->passes + 2)
pass - cblk->passes + 2
pass - cblk->passes
pass
pass
cblk->passes
cblk
cblk
passes
2
3
pass->start = jas_stream_tell(cblk->stream);
pass->start = jas_stream_tell(cblk->stream)
pass->start
pass
pass
start
jas_stream_tell(cblk->stream)
jas_stream_tell
jas_stream_tell
cblk->stream
cblk
cblk
stream
assert(bitpos >= 0);
assert(bitpos >= 0)
assert
assert
bitpos >= 0
bitpos
bitpos
0
vcausal = (tcmpt->cblksty & JPC_COX_VSC) != 0;
vcausal = (tcmpt->cblksty & JPC_COX_VSC) != 0
vcausal
vcausal
(tcmpt->cblksty & JPC_COX_VSC) != 0
(tcmpt->cblksty & JPC_COX_VSC)
tcmpt->cblksty & JPC_COX_VSC
tcmpt->cblksty
tcmpt
tcmpt
cblksty
JPC_COX_VSC
JPC_COX_VSC
0
segsym = (tcmpt->cblksty & JPC_COX_SEGSYM) != 0;
segsym = (tcmpt->cblksty & JPC_COX_SEGSYM) != 0
segsym
segsym
(tcmpt->cblksty & JPC_COX_SEGSYM) != 0
(tcmpt->cblksty & JPC_COX_SEGSYM)
tcmpt->cblksty & JPC_COX_SEGSYM
tcmpt->cblksty
tcmpt
tcmpt
cblksty
JPC_COX_SEGSYM
JPC_COX_SEGSYM
0
if (pass->term) {			termmode = ((tcmpt->cblksty & JPC_COX_PTERM) ?			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1;		} else {			termmode = 0;		}
pass->term
pass
pass
term
{			termmode = ((tcmpt->cblksty & JPC_COX_PTERM) ?			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1;		}
termmode = ((tcmpt->cblksty & JPC_COX_PTERM) ?			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1;
termmode = ((tcmpt->cblksty & JPC_COX_PTERM) ?			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1
termmode
termmode
((tcmpt->cblksty & JPC_COX_PTERM) ?			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1
((tcmpt->cblksty & JPC_COX_PTERM) ?			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM)
(tcmpt->cblksty & JPC_COX_PTERM) ?			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM
(tcmpt->cblksty & JPC_COX_PTERM)
tcmpt->cblksty & JPC_COX_PTERM
tcmpt->cblksty
tcmpt
tcmpt
cblksty
JPC_COX_PTERM
JPC_COX_PTERM
JPC_MQENC_PTERM
JPC_MQENC_PTERM
JPC_MQENC_DEFTERM
JPC_MQENC_DEFTERM
1
{			termmode = 0;		}
termmode = 0;
termmode = 0
termmode
termmode
0
switch (passtype) {		case JPC_SIGPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,			  bitpos, band->orient, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec) :			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec);			break;		case JPC_REFPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,			  vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		case JPC_CLNPASS:			assert(pass->type == JPC_SEG_MQ);			ret = jpc_encclnpass(cblk->mqenc, bitpos, band->orient,			  vcausal, segsym, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		default:			assert(0);			break;		}
passtype
passtype
{		case JPC_SIGPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,			  bitpos, band->orient, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec) :			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec);			break;		case JPC_REFPASS:			ret = (pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,			  vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		case JPC_CLNPASS:			assert(pass->type == JPC_SEG_MQ);			ret = jpc_encclnpass(cblk->mqenc, bitpos, band->orient,			  vcausal, segsym, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);			break;		default:			assert(0);			break;		}
case JPC_SIGPASS:
JPC_SIGPASS
JPC_SIGPASS
ret = (pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,			  bitpos, band->orient, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec) :			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec);
ret = (pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,			  bitpos, band->orient, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec) :			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec)
ret
ret
(pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,			  bitpos, band->orient, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec) :			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec)
(pass->type == JPC_SEG_MQ)
pass->type == JPC_SEG_MQ
pass->type
pass
pass
type
JPC_SEG_MQ
JPC_SEG_MQ
jpc_encsigpass(cblk->mqenc,			  bitpos, band->orient, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec)
jpc_encsigpass
jpc_encsigpass
cblk->mqenc
cblk
cblk
mqenc
bitpos
bitpos
band->orient
band
band
orient
vcausal
vcausal
cblk->flags
cblk
cblk
flags
cblk->data
cblk
cblk
data
termmode
termmode
&pass->nmsedec
pass->nmsedec
pass
pass
nmsedec
jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,			  cblk->data, termmode, &pass->nmsedec)
jpc_encrawsigpass
jpc_encrawsigpass
bout
bout
bitpos
bitpos
vcausal
vcausal
cblk->flags
cblk
cblk
flags
cblk->data
cblk
cblk
data
termmode
termmode
&pass->nmsedec
pass->nmsedec
pass
pass
nmsedec
break;
case JPC_REFPASS:
JPC_REFPASS
JPC_REFPASS
ret = (pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,			  vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);
ret = (pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,			  vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec)
ret
ret
(pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,			  vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec)
(pass->type == JPC_SEG_MQ)
pass->type == JPC_SEG_MQ
pass->type
pass
pass
type
JPC_SEG_MQ
JPC_SEG_MQ
jpc_encrefpass(cblk->mqenc,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec)
jpc_encrefpass
jpc_encrefpass
cblk->mqenc
cblk
cblk
mqenc
bitpos
bitpos
vcausal
vcausal
cblk->flags
cblk
cblk
flags
cblk->data
cblk
cblk
data
termmode
termmode
&pass->nmsedec
pass->nmsedec
pass
pass
nmsedec
jpc_encrawrefpass(bout, bitpos,			  vcausal, cblk->flags, cblk->data, termmode,			  &pass->nmsedec)
jpc_encrawrefpass
jpc_encrawrefpass
bout
bout
bitpos
bitpos
vcausal
vcausal
cblk->flags
cblk
cblk
flags
cblk->data
cblk
cblk
data
termmode
termmode
&pass->nmsedec
pass->nmsedec
pass
pass
nmsedec
break;
case JPC_CLNPASS:
JPC_CLNPASS
JPC_CLNPASS
assert(pass->type == JPC_SEG_MQ);
assert(pass->type == JPC_SEG_MQ)
assert
assert
pass->type == JPC_SEG_MQ
pass->type
pass
pass
type
JPC_SEG_MQ
JPC_SEG_MQ
ret = jpc_encclnpass(cblk->mqenc, bitpos, band->orient,			  vcausal, segsym, cblk->flags, cblk->data, termmode,			  &pass->nmsedec);
ret = jpc_encclnpass(cblk->mqenc, bitpos, band->orient,			  vcausal, segsym, cblk->flags, cblk->data, termmode,			  &pass->nmsedec)
ret
ret
jpc_encclnpass(cblk->mqenc, bitpos, band->orient,			  vcausal, segsym, cblk->flags, cblk->data, termmode,			  &pass->nmsedec)
jpc_encclnpass
jpc_encclnpass
cblk->mqenc
cblk
cblk
mqenc
bitpos
bitpos
band->orient
band
band
orient
vcausal
vcausal
segsym
segsym
cblk->flags
cblk
cblk
flags
cblk->data
cblk
cblk
data
termmode
termmode
&pass->nmsedec
pass->nmsedec
pass
pass
nmsedec
break;
default:
assert(0);
assert(0)
assert
assert
0
break;
if (pass->type == JPC_SEG_MQ) {			if (pass->term) {				jpc_mqenc_init(cblk->mqenc);			}			jpc_mqenc_getstate(cblk->mqenc, &pass->mqencstate);			pass->end = jas_stream_tell(cblk->stream);			if (tcmpt->cblksty & JPC_COX_RESET) {				jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);			}		} else {			if (pass->term) {				if (jpc_bitstream_pending(bout)) {					jpc_bitstream_outalign(bout, 0x2a);				}				jpc_bitstream_close(bout);				bout = 0;				pass->end = jas_stream_tell(cblk->stream);			} else {				pass->end = jas_stream_tell(cblk->stream) +				  jpc_bitstream_pending(bout);/* NOTE - This will not work.  need to adjust by # of pending output bytes */			}		}
pass->type == JPC_SEG_MQ
pass->type
pass
pass
type
JPC_SEG_MQ
JPC_SEG_MQ
{			if (pass->term) {				jpc_mqenc_init(cblk->mqenc);			}			jpc_mqenc_getstate(cblk->mqenc, &pass->mqencstate);			pass->end = jas_stream_tell(cblk->stream);			if (tcmpt->cblksty & JPC_COX_RESET) {				jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);			}		}
if (pass->term) {				jpc_mqenc_init(cblk->mqenc);			}
pass->term
pass
pass
term
{				jpc_mqenc_init(cblk->mqenc);			}
jpc_mqenc_init(cblk->mqenc);
jpc_mqenc_init(cblk->mqenc)
jpc_mqenc_init
jpc_mqenc_init
cblk->mqenc
cblk
cblk
mqenc
jpc_mqenc_getstate(cblk->mqenc, &pass->mqencstate);
jpc_mqenc_getstate(cblk->mqenc, &pass->mqencstate)
jpc_mqenc_getstate
jpc_mqenc_getstate
cblk->mqenc
cblk
cblk
mqenc
&pass->mqencstate
pass->mqencstate
pass
pass
mqencstate
pass->end = jas_stream_tell(cblk->stream);
pass->end = jas_stream_tell(cblk->stream)
pass->end
pass
pass
end
jas_stream_tell(cblk->stream)
jas_stream_tell
jas_stream_tell
cblk->stream
cblk
cblk
stream
if (tcmpt->cblksty & JPC_COX_RESET) {				jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);			}
tcmpt->cblksty & JPC_COX_RESET
tcmpt->cblksty
tcmpt
tcmpt
cblksty
JPC_COX_RESET
JPC_COX_RESET
{				jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);			}
jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);
jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs)
jpc_mqenc_setctxs
jpc_mqenc_setctxs
cblk->mqenc
cblk
cblk
mqenc
JPC_NUMCTXS
JPC_NUMCTXS
jpc_mqctxs
jpc_mqctxs
{			if (pass->term) {				if (jpc_bitstream_pending(bout)) {					jpc_bitstream_outalign(bout, 0x2a);				}				jpc_bitstream_close(bout);				bout = 0;				pass->end = jas_stream_tell(cblk->stream);			} else {				pass->end = jas_stream_tell(cblk->stream) +				  jpc_bitstream_pending(bout);/* NOTE - This will not work.  need to adjust by # of pending output bytes */			}		}
if (pass->term) {				if (jpc_bitstream_pending(bout)) {					jpc_bitstream_outalign(bout, 0x2a);				}				jpc_bitstream_close(bout);				bout = 0;				pass->end = jas_stream_tell(cblk->stream);			} else {				pass->end = jas_stream_tell(cblk->stream) +				  jpc_bitstream_pending(bout);/* NOTE - This will not work.  need to adjust by # of pending output bytes */			}
pass->term
pass
pass
term
{				if (jpc_bitstream_pending(bout)) {					jpc_bitstream_outalign(bout, 0x2a);				}				jpc_bitstream_close(bout);				bout = 0;				pass->end = jas_stream_tell(cblk->stream);			}
if (jpc_bitstream_pending(bout)) {					jpc_bitstream_outalign(bout, 0x2a);				}
jpc_bitstream_pending(bout)
jpc_bitstream_pending
jpc_bitstream_pending
bout
bout
{					jpc_bitstream_outalign(bout, 0x2a);				}
jpc_bitstream_outalign(bout, 0x2a);
jpc_bitstream_outalign(bout, 0x2a)
jpc_bitstream_outalign
jpc_bitstream_outalign
bout
bout
0x2a
jpc_bitstream_close(bout);
jpc_bitstream_close(bout)
jpc_bitstream_close
jpc_bitstream_close
bout
bout
bout = 0;
bout = 0
bout
bout
0
pass->end = jas_stream_tell(cblk->stream);
pass->end = jas_stream_tell(cblk->stream)
pass->end
pass
pass
end
jas_stream_tell(cblk->stream)
jas_stream_tell
jas_stream_tell
cblk->stream
cblk
cblk
stream
{				pass->end = jas_stream_tell(cblk->stream) +				  jpc_bitstream_pending(bout);/* NOTE - This will not work.  need to adjust by # of pending output bytes */			}
pass->end = jas_stream_tell(cblk->stream) +				  jpc_bitstream_pending(bout);
pass->end = jas_stream_tell(cblk->stream) +				  jpc_bitstream_pending(bout)
pass->end
pass
pass
end
jas_stream_tell(cblk->stream) +				  jpc_bitstream_pending(bout)
jas_stream_tell(cblk->stream)
jas_stream_tell
jas_stream_tell
cblk->stream
cblk
cblk
stream
jpc_bitstream_pending(bout)
jpc_bitstream_pending
jpc_bitstream_pending
bout
bout
pass->wmsedec = jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *		  jpc_fixtodbl(pass->nmsedec);
pass->wmsedec = jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *		  jpc_fixtodbl(pass->nmsedec)
pass->wmsedec
pass
pass
wmsedec
jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *		  jpc_fixtodbl(pass->nmsedec)
jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *		  ((double) (1 << bitpos)) * ((double)(1 << bitpos))
jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *		  ((double) (1 << bitpos))
jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize)
jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->absstepsize)
jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight) *		  jpc_fixtodbl(band->synweight)
jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->synweight)
jpc_fixtodbl(band->rlvl->tcmpt->synweight) *		  jpc_fixtodbl(band->rlvl->tcmpt->synweight)
jpc_fixtodbl(band->rlvl->tcmpt->synweight)
jpc_fixtodbl
jpc_fixtodbl
band->rlvl->tcmpt->synweight
band->rlvl->tcmpt
band->rlvl
band
band
rlvl
tcmpt
synweight
jpc_fixtodbl(band->rlvl->tcmpt->synweight)
jpc_fixtodbl
jpc_fixtodbl
band->rlvl->tcmpt->synweight
band->rlvl->tcmpt
band->rlvl
band
band
rlvl
tcmpt
synweight
jpc_fixtodbl(band->synweight)
jpc_fixtodbl
jpc_fixtodbl
band->synweight
band
band
synweight
jpc_fixtodbl(band->synweight)
jpc_fixtodbl
jpc_fixtodbl
band->synweight
band
band
synweight
jpc_fixtodbl(band->absstepsize)
jpc_fixtodbl
jpc_fixtodbl
band->absstepsize
band
band
absstepsize
jpc_fixtodbl(band->absstepsize)
jpc_fixtodbl
jpc_fixtodbl
band->absstepsize
band
band
absstepsize
((double) (1 << bitpos))
(double) (1 << bitpos)
double
double

(1 << bitpos)
1 << bitpos
1
bitpos
bitpos
((double)(1 << bitpos))
(double)(1 << bitpos)
double
double

(1 << bitpos)
1 << bitpos
1
bitpos
bitpos
jpc_fixtodbl(pass->nmsedec)
jpc_fixtodbl
jpc_fixtodbl
pass->nmsedec
pass
pass
nmsedec
pass->cumwmsedec = pass->wmsedec;
pass->cumwmsedec = pass->wmsedec
pass->cumwmsedec
pass
pass
cumwmsedec
pass->wmsedec
pass
pass
wmsedec
if (pass != cblk->passes) {			pass->cumwmsedec += pass[-1].cumwmsedec;		}
pass != cblk->passes
pass
pass
cblk->passes
cblk
cblk
passes
{			pass->cumwmsedec += pass[-1].cumwmsedec;		}
pass->cumwmsedec += pass[-1].cumwmsedec;
pass->cumwmsedec += pass[-1].cumwmsedec
pass->cumwmsedec
pass
pass
cumwmsedec
pass[-1].cumwmsedec
pass[-1]
pass
pass
-1
1
cumwmsedec
if (passtype == JPC_CLNPASS) {			--bitpos;		}
passtype == JPC_CLNPASS
passtype
passtype
JPC_CLNPASS
JPC_CLNPASS
{			--bitpos;		}
--bitpos;
--bitpos
bitpos
bitpos
++pass;
++pass
pass
pass
n = 0;
n = 0
n
n
0
endpasses = &cblk->passes[cblk->numpasses];
endpasses = &cblk->passes[cblk->numpasses]
endpasses
endpasses
&cblk->passes[cblk->numpasses]
cblk->passes[cblk->numpasses]
cblk->passes
cblk
cblk
passes
cblk->numpasses
cblk
cblk
numpasses
for (pass = cblk->passes; pass != endpasses; ++pass) {		if (pass->start < n) {			pass->start = n;		}		if (pass->end < n) {			pass->end = n;		}		if (!pass->term) {			termpass = pass;			while (termpass - pass < cblk->numpasses &&			  !termpass->term) {				++termpass;			}			if (pass->type == JPC_SEG_MQ) {				t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0;				if (pass->mqencstate.ctreg >= 5) {					adjust = 4 + t;				} else {					adjust = 5 + t;				}				pass->end += adjust;			}			if (pass->end > termpass->end) {				pass->end = termpass->end;			}			if ((c = getthebyte(cblk->stream, pass->end - 1)) == EOF) {				abort();			}			if (c == 0xff) {				++pass->end;			}			n = JAS_MAX(n, pass->end);		} else {			n = JAS_MAX(n, pass->end);		}	}
pass = cblk->passes;
pass = cblk->passes
pass
pass
cblk->passes
cblk
cblk
passes
pass != endpasses
pass
pass
endpasses
endpasses
++pass
pass
pass
{		if (pass->start < n) {			pass->start = n;		}		if (pass->end < n) {			pass->end = n;		}		if (!pass->term) {			termpass = pass;			while (termpass - pass < cblk->numpasses &&			  !termpass->term) {				++termpass;			}			if (pass->type == JPC_SEG_MQ) {				t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0;				if (pass->mqencstate.ctreg >= 5) {					adjust = 4 + t;				} else {					adjust = 5 + t;				}				pass->end += adjust;			}			if (pass->end > termpass->end) {				pass->end = termpass->end;			}			if ((c = getthebyte(cblk->stream, pass->end - 1)) == EOF) {				abort();			}			if (c == 0xff) {				++pass->end;			}			n = JAS_MAX(n, pass->end);		} else {			n = JAS_MAX(n, pass->end);		}	}
if (pass->start < n) {			pass->start = n;		}
pass->start < n
pass->start
pass
pass
start
n
n
{			pass->start = n;		}
pass->start = n;
pass->start = n
pass->start
pass
pass
start
n
n
if (pass->end < n) {			pass->end = n;		}
pass->end < n
pass->end
pass
pass
end
n
n
{			pass->end = n;		}
pass->end = n;
pass->end = n
pass->end
pass
pass
end
n
n
if (!pass->term) {			termpass = pass;			while (termpass - pass < cblk->numpasses &&			  !termpass->term) {				++termpass;			}			if (pass->type == JPC_SEG_MQ) {				t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0;				if (pass->mqencstate.ctreg >= 5) {					adjust = 4 + t;				} else {					adjust = 5 + t;				}				pass->end += adjust;			}			if (pass->end > termpass->end) {				pass->end = termpass->end;			}			if ((c = getthebyte(cblk->stream, pass->end - 1)) == EOF) {				abort();			}			if (c == 0xff) {				++pass->end;			}			n = JAS_MAX(n, pass->end);		} else {			n = JAS_MAX(n, pass->end);		}
!pass->term
pass->term
pass
pass
term
{			termpass = pass;			while (termpass - pass < cblk->numpasses &&			  !termpass->term) {				++termpass;			}			if (pass->type == JPC_SEG_MQ) {				t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0;				if (pass->mqencstate.ctreg >= 5) {					adjust = 4 + t;				} else {					adjust = 5 + t;				}				pass->end += adjust;			}			if (pass->end > termpass->end) {				pass->end = termpass->end;			}			if ((c = getthebyte(cblk->stream, pass->end - 1)) == EOF) {				abort();			}			if (c == 0xff) {				++pass->end;			}			n = JAS_MAX(n, pass->end);		}
termpass = pass;
termpass = pass
termpass
termpass
pass
pass
while (termpass - pass < cblk->numpasses &&			  !termpass->term) {				++termpass;			}
termpass - pass < cblk->numpasses &&			  !termpass->term
termpass - pass < cblk->numpasses
termpass - pass
termpass
termpass
pass
pass
cblk->numpasses
cblk
cblk
numpasses
!termpass->term
termpass->term
termpass
termpass
term
{				++termpass;			}
++termpass;
++termpass
termpass
termpass
if (pass->type == JPC_SEG_MQ) {				t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0;				if (pass->mqencstate.ctreg >= 5) {					adjust = 4 + t;				} else {					adjust = 5 + t;				}				pass->end += adjust;			}
pass->type == JPC_SEG_MQ
pass->type
pass
pass
type
JPC_SEG_MQ
JPC_SEG_MQ
{				t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0;				if (pass->mqencstate.ctreg >= 5) {					adjust = 4 + t;				} else {					adjust = 5 + t;				}				pass->end += adjust;			}
t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0;
t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0
t
t
(pass->mqencstate.lastbyte == 0xff) ? 1 : 0
(pass->mqencstate.lastbyte == 0xff)
pass->mqencstate.lastbyte == 0xff
pass->mqencstate.lastbyte
pass->mqencstate
pass
pass
mqencstate
lastbyte
0xff
1
0
if (pass->mqencstate.ctreg >= 5) {					adjust = 4 + t;				} else {					adjust = 5 + t;				}
pass->mqencstate.ctreg >= 5
pass->mqencstate.ctreg
pass->mqencstate
pass
pass
mqencstate
ctreg
5
{					adjust = 4 + t;				}
adjust = 4 + t;
adjust = 4 + t
adjust
adjust
4 + t
4
t
t
{					adjust = 5 + t;				}
adjust = 5 + t;
adjust = 5 + t
adjust
adjust
5 + t
5
t
t
pass->end += adjust;
pass->end += adjust
pass->end
pass
pass
end
adjust
adjust
if (pass->end > termpass->end) {				pass->end = termpass->end;			}
pass->end > termpass->end
pass->end
pass
pass
end
termpass->end
termpass
termpass
end
{				pass->end = termpass->end;			}
pass->end = termpass->end;
pass->end = termpass->end
pass->end
pass
pass
end
termpass->end
termpass
termpass
end
if ((c = getthebyte(cblk->stream, pass->end - 1)) == EOF) {				abort();			}
(c = getthebyte(cblk->stream, pass->end - 1)) == EOF
(c = getthebyte(cblk->stream, pass->end - 1))
c = getthebyte(cblk->stream, pass->end - 1)
c
c
getthebyte(cblk->stream, pass->end - 1)
getthebyte
getthebyte
cblk->stream
cblk
cblk
stream
pass->end - 1
pass->end
pass
pass
end
1
EOF
EOF
{				abort();			}
abort();
abort()
abort
abort
if (c == 0xff) {				++pass->end;			}
c == 0xff
c
c
0xff
{				++pass->end;			}
++pass->end;
++pass->end
pass->end
pass
pass
end
n = JAS_MAX(n, pass->end);
n = JAS_MAX(n, pass->end)
n
n
JAS_MAX(n, pass->end)
JAS_MAX
JAS_MAX
n
n
pass->end
pass
pass
end
{			n = JAS_MAX(n, pass->end);		}
n = JAS_MAX(n, pass->end);
n = JAS_MAX(n, pass->end)
n
n
JAS_MAX(n, pass->end)
JAS_MAX
JAS_MAX
n
n
pass->end
pass
pass
end
if (bout) {		jpc_bitstream_close(bout);	}
bout
bout
{		jpc_bitstream_close(bout);	}
jpc_bitstream_close(bout);
jpc_bitstream_close(bout)
jpc_bitstream_close
jpc_bitstream_close
bout
bout
return 0;
0
-----joern-----
(46,136,0)
(191,9,0)
(176,171,0)
(182,224,0)
(97,184,0)
(18,87,0)
(41,92,0)
(8,65,0)
(32,99,0)
(76,90,0)
(55,131,0)
(149,97,0)
(163,90,0)
(0,65,0)
(19,143,0)
(221,121,0)
(120,160,0)
(132,21,0)
(107,168,0)
(121,10,0)
(131,118,0)
(93,65,0)
(118,109,0)
(180,199,0)
(148,134,0)
(6,145,0)
(154,79,0)
(133,176,0)
(21,76,0)
(173,92,0)
(112,171,0)
(9,193,0)
(48,121,0)
(30,106,0)
(147,65,0)
(102,65,0)
(59,118,0)
(47,40,0)
(61,76,0)
(103,96,0)
(200,145,0)
(184,118,0)
(75,79,0)
(196,191,0)
(36,69,0)
(145,10,0)
(80,224,0)
(222,85,0)
(51,90,0)
(166,145,0)
(73,102,0)
(49,79,0)
(92,90,0)
(98,102,0)
(28,103,0)
(187,24,0)
(36,16,0)
(25,217,0)
(126,131,0)
(117,154,0)
(223,144,0)
(1,24,0)
(159,215,0)
(85,118,0)
(124,10,0)
(91,172,0)
(205,124,0)
(72,99,0)
(42,65,0)
(61,181,0)
(124,63,0)
(144,90,0)
(204,87,0)
(24,224,0)
(84,199,0)
(145,90,0)
(190,3,0)
(171,212,0)
(121,184,0)
(106,31,0)
(161,90,0)
(131,90,0)
(17,46,0)
(119,98,0)
(194,154,0)
(99,63,0)
(124,85,0)
(189,21,0)
(216,121,0)
(69,36,0)
(171,87,0)
(213,14,0)
(59,90,0)
(43,74,0)
(96,65,0)
(103,134,0)
(131,16,0)
(207,80,0)
(85,90,0)
(76,18,0)
(12,59,0)
(140,65,0)
(191,191,0)
(97,90,0)
(52,65,0)
(214,18,0)
(95,206,0)
(141,84,0)
(152,208,0)
(68,141,0)
(80,143,0)
(146,124,0)
(131,160,0)
(208,224,0)
(110,76,0)
(115,208,0)
(85,97,0)
(218,46,0)
(69,169,0)
(74,102,0)
(113,3,0)
(143,80,0)
(88,61,0)
(134,90,0)
(152,65,0)
(131,10,0)
(101,144,0)
(70,208,0)
(99,105,0)
(206,65,0)
(100,76,0)
(143,65,0)
(22,145,0)
(185,87,0)
(20,189,0)
(171,74,0)
(83,185,0)
(141,185,0)
(118,65,0)
(127,65,0)
(165,145,0)
(33,197,0)
(125,152,0)
(169,65,0)
(14,154,0)
(89,46,0)
(131,169,0)
(53,121,0)
(108,124,0)
(86,185,0)
(128,121,0)
(210,145,0)
(164,209,0)
(59,85,0)
(129,33,0)
(182,96,0)
(29,124,0)
(26,36,0)
(124,118,0)
(184,90,0)
(158,5,0)
(201,90,0)
(37,169,0)
(50,124,0)
(167,145,0)
(114,59,0)
(71,74,0)
(31,76,0)
(35,160,0)
(130,85,0)
(21,189,0)
(92,171,0)
(39,98,0)
(124,16,0)
(82,31,0)
(121,63,0)
(145,16,0)
(124,169,0)
(137,134,0)
(79,143,0)
(181,61,0)
(212,65,0)
(138,65,0)
(121,103,0)
(175,145,0)
(5,154,0)
(197,33,0)
(77,97,0)
(45,121,0)
(23,127,0)
(1,65,0)
(192,181,0)
(98,118,0)
(156,171,0)
(56,96,0)
(121,90,0)
(111,124,0)
(74,9,0)
(135,96,0)
(31,106,0)
(145,92,0)
(178,65,0)
(116,69,0)
(78,109,0)
(154,154,0)
(188,121,0)
(198,65,0)
(155,131,0)
(174,65,0)
(160,96,0)
(177,65,0)
(172,144,0)
(160,103,0)
(3,1,0)
(64,191,0)
(131,97,0)
(121,16,0)
(220,131,0)
(172,90,0)
(145,134,0)
(209,206,0)
(169,69,0)
(74,212,0)
(145,118,0)
(134,185,0)
(184,92,0)
(24,1,0)
(124,90,0)
(176,84,0)
(127,209,0)
(74,74,0)
(109,118,0)
(208,152,0)
(217,65,0)
(102,98,0)
(67,13,0)
(135,217,0)
(209,10,0)
(142,208,0)
(18,5,0)
(183,118,0)
(2,103,0)
(103,90,0)
(62,65,0)
(44,121,0)
(27,36,0)
(104,131,0)
(144,160,0)
(58,14,0)
(180,3,0)
(145,186,0)
(219,124,0)
(145,169,0)
(34,197,0)
(97,118,0)
(94,1,0)
(4,131,0)
(5,79,0)
(162,172,0)
(33,76,0)
(122,139,0)
(170,65,0)
(131,63,0)
(191,217,0)
(153,135,0)
(215,3,0)
(203,124,0)
(57,65,0)
(212,46,0)
(160,90,0)
(81,65,0)
(96,182,0)
(145,63,0)
(66,5,0)
(123,127,0)
(217,135,0)
(15,215,0)
(5,18,0)
(151,184,0)
(109,136,0)
(54,135,0)
(121,118,0)
(185,191,0)
(124,144,0)
(150,65,0)
(191,152,0)
(11,212,0)
(60,180,0)
(202,131,0)
(46,212,0)
(195,131,0)
(38,65,0)
(157,65,0)
(7,182,0)
(14,79,0)
(154,193,0)
(185,152,0)
(172,96,0)
(121,169,0)
(211,184,0)
(144,96,0)
(4,104,1)
(151,189,1)
(80,224,1)
(60,47,1)
(217,135,1)
(208,224,1)
(127,23,1)
(131,10,1)
(53,48,1)
(182,7,1)
(107,189,1)
(158,66,1)
(145,175,1)
(144,223,1)
(41,173,1)
(160,96,1)
(155,160,1)
(115,125,1)
(210,166,1)
(172,144,1)
(1,24,1)
(126,55,1)
(60,107,1)
(22,200,1)
(121,221,1)
(79,143,1)
(176,171,1)
(23,179,1)
(124,85,1)
(3,190,1)
(141,185,1)
(48,45,1)
(55,220,1)
(203,108,1)
(20,21,1)
(184,211,1)
(85,97,1)
(31,76,1)
(124,10,1)
(135,96,1)
(122,197,1)
(183,143,1)
(43,154,1)
(121,10,1)
(108,29,1)
(97,118,1)
(131,63,1)
(15,141,1)
(189,20,1)
(83,171,1)
(50,203,1)
(132,145,1)
(152,208,1)
(66,214,1)
(121,103,1)
(194,215,1)
(72,32,1)
(121,184,1)
(131,4,1)
(103,134,1)
(124,205,1)
(114,106,1)
(5,154,1)
(171,212,1)
(180,60,1)
(100,110,1)
(212,46,1)
(14,79,1)
(24,187,1)
(19,1,1)
(14,58,1)
(207,19,1)
(111,219,1)
(179,14,1)
(165,22,1)
(197,34,1)
(15,3,1)
(135,153,1)
(176,133,1)
(74,102,1)
(69,36,1)
(124,169,1)
(30,31,1)
(61,88,1)
(28,2,1)
(124,118,1)
(59,85,1)
(103,96,1)
(222,130,1)
(25,102,1)
(123,127,1)
(6,167,1)
(129,121,1)
(192,61,1)
(98,118,1)
(47,106,1)
(159,15,1)
(202,155,1)
(166,76,1)
(59,118,1)
(154,154,1)
(218,89,1)
(91,162,1)
(77,197,1)
(213,191,1)
(11,169,1)
(49,75,1)
(131,16,1)
(145,16,1)
(153,54,1)
(131,169,1)
(184,92,1)
(73,96,1)
(134,185,1)
(214,185,1)
(121,63,1)
(96,182,1)
(103,28,1)
(121,169,1)
(142,115,1)
(220,195,1)
(80,207,1)
(181,192,1)
(21,76,1)
(180,3,1)
(92,41,1)
(125,212,1)
(131,160,1)
(188,128,1)
(101,85,1)
(94,206,1)
(97,184,1)
(109,78,1)
(75,152,1)
(32,179,1)
(59,12,1)
(31,82,1)
(171,74,1)
(191,191,1)
(102,98,1)
(33,76,1)
(127,209,1)
(145,63,1)
(5,158,1)
(189,21,1)
(131,97,1)
(124,144,1)
(121,118,1)
(182,224,1)
(197,33,1)
(148,137,1)
(223,101,1)
(106,31,1)
(130,181,1)
(21,132,1)
(45,216,1)
(171,156,1)
(5,79,1)
(208,70,1)
(29,144,1)
(17,11,1)
(79,49,1)
(175,6,1)
(23,99,1)
(124,16,1)
(221,188,1)
(124,63,1)
(86,83,1)
(181,61,1)
(160,35,1)
(119,73,1)
(74,71,1)
(213,79,1)
(27,26,1)
(60,67,1)
(58,213,1)
(121,16,1)
(211,151,1)
(46,136,1)
(7,56,1)
(162,59,1)
(70,142,1)
(216,44,1)
(209,164,1)
(60,172,1)
(143,80,1)
(60,122,1)
(116,37,1)
(36,16,1)
(205,111,1)
(76,100,1)
(195,202,1)
(144,96,1)
(104,126,1)
(215,159,1)
(85,222,1)
(215,3,1)
(74,212,1)
(2,184,1)
(144,160,1)
(190,113,1)
(97,149,1)
(110,134,1)
(74,74,1)
(26,116,1)
(172,91,1)
(196,74,1)
(76,18,1)
(185,86,1)
(146,50,1)
(156,112,1)
(191,64,1)
(99,72,1)
(68,176,1)
(169,69,1)
(185,152,1)
(149,77,1)
(167,165,1)
(112,14,1)
(61,76,1)
(145,169,1)
(85,118,1)
(145,10,1)
(33,129,1)
(99,63,1)
(78,183,1)
(88,131,1)
(145,186,1)
(44,103,1)
(141,68,1)
(117,194,1)
(92,171,1)
(134,148,1)
(14,154,1)
(54,25,1)
(95,209,1)
(64,196,1)
(191,217,1)
(82,124,1)
(200,210,1)
(128,53,1)
(37,217,1)
(39,119,1)
(109,136,1)
(154,79,1)
(145,118,1)
(12,114,1)
(187,94,1)
(98,39,1)
(145,134,1)
(106,30,1)
(137,92,1)
(133,180,1)
(120,97,1)
(219,146,1)
(36,27,1)
(191,152,1)
(184,118,1)
(71,43,1)
(185,191,1)
(24,224,1)
(131,118,1)
(67,181,1)
(46,218,1)
(34,33,1)
(3,1,1)
(113,18,1)
(35,120,1)
(18,5,1)
(118,109,1)
(145,92,1)
(154,117,1)
(89,17,1)
(172,96,1)
(160,103,1)
(173,215,1)
(209,10,1)
(206,95,1)
(56,118,1)
(97,184,2)
(118,109,2)
(165,215,2)
(149,197,2)
(121,169,2)
(220,197,2)
(110,215,2)
(216,189,2)
(182,224,2)
(102,98,2)
(99,63,2)
(96,182,2)
(185,14,2)
(68,215,2)
(190,14,2)
(208,224,2)
(99,179,2)
(104,197,2)
(123,127,2)
(33,189,2)
(97,118,2)
(12,106,2)
(59,85,2)
(83,14,2)
(223,181,2)
(103,134,2)
(162,106,2)
(86,14,2)
(74,14,2)
(184,189,2)
(132,215,2)
(109,136,2)
(197,33,2)
(181,61,2)
(121,118,2)
(100,215,2)
(222,181,2)
(58,14,2)
(131,63,2)
(158,14,2)
(143,80,2)
(107,189,2)
(171,212,2)
(124,169,2)
(173,215,2)
(80,224,2)
(172,96,2)
(146,181,2)
(21,76,2)
(154,154,2)
(21,215,2)
(127,209,2)
(141,215,2)
(47,106,2)
(106,181,2)
(85,97,2)
(221,189,2)
(77,197,2)
(213,14,2)
(44,189,2)
(3,14,2)
(131,16,2)
(166,215,2)
(205,181,2)
(172,106,2)
(15,14,2)
(154,79,2)
(76,215,2)
(33,76,2)
(92,171,2)
(160,197,2)
(154,14,2)
(124,144,2)
(121,184,2)
(14,79,2)
(215,215,2)
(53,189,2)
(124,118,2)
(121,103,2)
(145,186,2)
(133,215,2)
(124,63,2)
(46,136,2)
(111,181,2)
(67,181,2)
(145,215,2)
(195,197,2)
(121,189,2)
(214,14,2)
(172,144,2)
(59,106,2)
(3,1,2)
(200,215,2)
(175,215,2)
(219,181,2)
(181,197,2)
(184,92,2)
(28,189,2)
(71,14,2)
(196,14,2)
(192,197,2)
(6,215,2)
(34,189,2)
(5,14,2)
(184,118,2)
(156,14,2)
(180,215,2)
(145,118,2)
(185,191,2)
(55,197,2)
(32,179,2)
(130,181,2)
(41,215,2)
(14,14,2)
(176,215,2)
(97,197,2)
(76,18,2)
(72,179,2)
(131,169,2)
(124,85,2)
(215,14,2)
(5,154,2)
(36,16,2)
(191,217,2)
(103,96,2)
(92,215,2)
(194,14,2)
(131,97,2)
(124,181,2)
(160,103,2)
(98,118,2)
(22,215,2)
(74,212,2)
(145,169,2)
(43,14,2)
(128,189,2)
(210,215,2)
(126,197,2)
(155,197,2)
(74,102,2)
(45,189,2)
(18,5,2)
(191,152,2)
(85,118,2)
(176,171,2)
(59,118,2)
(141,185,2)
(145,134,2)
(151,189,2)
(188,189,2)
(112,14,2)
(108,181,2)
(202,197,2)
(101,181,2)
(103,189,2)
(31,76,2)
(79,143,2)
(60,215,2)
(129,189,2)
(191,14,2)
(106,31,2)
(191,191,2)
(135,96,2)
(121,63,2)
(121,16,2)
(159,215,2)
(61,197,2)
(85,181,2)
(148,215,2)
(117,14,2)
(48,189,2)
(211,189,2)
(180,3,2)
(30,181,2)
(145,63,2)
(29,181,2)
(160,96,2)
(189,21,2)
(144,96,2)
(14,154,2)
(35,197,2)
(171,74,2)
(15,215,2)
(5,79,2)
(209,10,2)
(144,160,2)
(131,118,2)
(20,215,2)
(144,181,2)
(145,16,2)
(113,14,2)
(152,208,2)
(185,152,2)
(74,74,2)
(212,46,2)
(131,197,2)
(137,215,2)
(169,69,2)
(82,181,2)
(122,197,2)
(189,215,2)
(88,197,2)
(61,76,2)
(134,215,2)
(24,224,2)
(131,10,2)
(134,185,2)
(114,106,2)
(203,181,2)
(197,189,2)
(145,10,2)
(31,181,2)
(159,14,2)
(131,160,2)
(50,181,2)
(217,135,2)
(124,16,2)
(4,197,2)
(121,10,2)
(124,10,2)
(69,36,2)
(66,14,2)
(120,197,2)
(91,106,2)
(171,14,2)
(64,14,2)
(145,92,2)
(2,189,2)
(18,14,2)
(167,215,2)
(215,3,2)
(1,24,2)
-----------------------------------
(0,fstripestep)
(1,width = jas_matrix_numcols(data)
(2,dp)
(3,j = width)
(4,0)
(5,JAS_MIN(i, 4)
(6,out)
(7,data)
(8,i)
(9,)
(10,long *nmsedec)
(11,fstripestart)
(12,frowstep)
(13,)
(14,i > 0)
(15,j)
(16,int bitpos)
(17,flags)
(18,vscanlen = JAS_MIN(i, 4)
(19,height)
(20,0)
(21,--k)
(22,bitpos)
(23,0)
(24,jas_matrix_numcols(data)
(25,dstripestep)
(26,bitpos)
(27,JPC_NUMEXTRABITS)
(28,drowstep)
(29,fp)
(30,0)
(31,--k)
(32,out)
(33,--k)
(34,0)
(35,drowstep)
(36,bitpos + JPC_NUMEXTRABITS)
(37,one)
(38,fp)
(39,2)
(40,)
(41,fvscanstart)
(42,one)
(43,fstripestart)
(44,fp)
(45,dp)
(46,jas_matrix_getref(flags, 1, 1)
(47,continue;)
(48,bitpos)
(49,height)
(50,bitpos)
(51,if (--k <= 0)
(52,if (term)
(53,one)
(54,drowstep)
(55,one)
(56,drowstep)
(57,dvscanstart)
(58,0)
(59,fp += frowstep)
(60,j)
(61,--k)
(62,fvscanstart)
(63,jpc_bitstream_t *out)
(64,dstripestep)
(65,)
(66,i)
(67,continue;)
(68,dvscanstart)
(69,1 << (bitpos + JPC_NUMEXTRABITS)
(70,0)
(71,fstripestep)
(72,0x2a)
(73,fstripestep)
(74,fstripestart += fstripestep)
(75,i)
(76,k = vscanlen)
(77,fp)
(78,flags)
(79,i = height)
(80,jas_matrix_numrows(data)
(81,frowstep)
(82,k)
(83,dvscanstart)
(84,)
(85,fp += frowstep)
(86,dstripestart)
(87,)
(88,k)
(89,1)
(90,)
(91,drowstep)
(92,fp = fvscanstart)
(93,width)
(94,width)
(95,0)
(96,drowstep = jas_matrix_rowstep(data)
(97,fp += frowstep)
(98,frowstep << 2)
(99,jpc_bitstream_outalign(out, 0x2a)
(100,vscanlen)
(101,dp)
(102,fstripestep = frowstep << 2)
(103,dp += drowstep)
(104,out)
(105,)
(106,--k <= 0)
(107,continue;)
(108,frowstep)
(109,jas_matrix_rowstep(flags)
(110,k)
(111,out)
(112,fvscanstart)
(113,j)
(114,fp)
(115,data)
(116,1)
(117,4)
(118,frowstep = jas_matrix_rowstep(flags)
(119,frowstep)
(120,dp)
(121,rawsigpass_step(fp, frowstep, dp, bitpos, one,\\n\\t\\t\\t  nmsedec, out, 0)
(122,continue;)
(123,RET)
(124,rawsigpass_step(fp, frowstep, dp, bitpos, one,\\n\\t\\t\\t  nmsedec, out, 0)
(125,dstripestart)
(126,nmsedec)
(127,return 0;)
(128,nmsedec)
(129,k)
(130,fp)
(131,rawsigpass_step(fp, frowstep, dp, bitpos, one,\\n\\t\\t\\t  nmsedec, out, 0)
(132,k)
(133,fvscanstart)
(134,dp = dvscanstart)
(135,drowstep << 2)
(136,jas_matrix_t *flags)
(137,dp)
(138,height)
(139,)
(140,j)
(141,++dvscanstart)
(142,0)
(143,height = jas_matrix_numrows(data)
(144,dp += drowstep)
(145,rawsigpass_step(fp, frowstep, dp, bitpos, one,\\n\\t\\t\\t  nmsedec, out, vcausalflag)
(146,one)
(147,drowstep)
(148,dvscanstart)
(149,frowstep)
(150,dstripestart)
(151,fp)
(152,dstripestart = jas_matrix_getref(data, 0, 0)
(153,2)
(154,i -= 4)
(155,fp)
(156,fstripestart)
(157,for (i = height; i > 0; i -= 4, fstripestart += fstripestep,\\n\\t  dstripestart += dstripestep)
(158,4)
(159,0)
(160,dp += drowstep)
(161,if (--k <= 0)
(162,dp)
(163,if (--k <= 0)
(164,nmsedec)
(165,one)
(166,fp)
(167,nmsedec)
(168,)
(169,one = 1 << (bitpos + JPC_NUMEXTRABITS)
(170,dp)
(171,fvscanstart = fstripestart)
(172,dp += drowstep)
(173,fp)
(174,vscanlen)
(175,vcausalflag)
(176,++fvscanstart)
(177,fstripestart)
(178,dstripestep)
(179,term)
(180,--j)
(181,--k <= 0)
(182,jas_matrix_rowstep(data)
(183,frowstep)
(184,fp += frowstep)
(185,dvscanstart = dstripestart)
(186,int vcausalflag)
(187,data)
(188,out)
(189,--k <= 0)
(190,width)
(191,dstripestart += dstripestep)
(192,0)
(193,)
(194,i)
(195,dp)
(196,dstripestart)
(197,--k <= 0)
(198,k)
(199,)
(200,dp)
(201,if (--k <= 0)
(202,frowstep)
(203,dp)
(204,for (j = width; j > 0; --j, ++fvscanstart, ++dvscanstart)
(205,0)
(206,*nmsedec = 0)
(207,data)
(208,jas_matrix_getref(data, 0, 0)
(209,*nmsedec)
(210,frowstep)
(211,frowstep)
(212,fstripestart = jas_matrix_getref(flags, 1, 1)
(213,i)
(214,vscanlen)
(215,j > 0)
(216,frowstep)
(217,dstripestep = drowstep << 2)
(218,1)
(219,nmsedec)
(220,bitpos)
(221,0)
(222,frowstep)
(223,drowstep)
(224,jas_matrix_t *data)
-----cfg-----
(7,29)
(29,36)
(32,40)
(34,32)
(36,34)
(37,47)
(38,41)
(40,38)
(41,37)
(44,51)
(45,44)
(47,45)
(48,60)
(49,56)
(51,49)
(52,48)
(54,52)
(56,54)
(57,64)
(58,57)
(60,58)
(61,70)
(62,61)
(64,62)
(67,89)
(68,75)
(70,68)
(71,67)
(72,82)
(72,71)
(73,72)
(75,73)
(77,71)
(78,77)
(80,78)
(82,80)
(86,95)
(86,112)
(87,86)
(89,87)
(92,106)
(93,100)
(95,93)
(96,92)
(97,96)
(98,101)
(100,98)
(101,97)
(103,120)
(104,103)
(106,104)
(109,120)
(110,109)
(112,110)
(114,130)
(116,114)
(117,116)
(118,123)
(120,118)
(121,117)
(123,121)
(126,131)
(128,126)
(130,128)
(131,140)
(131,220)
(134,131)
(137,145)
(138,137)
(140,138)
(142,150)
(143,142)
(145,143)
(147,178)
(148,156)
(150,148)
(151,147)
(152,160)
(154,152)
(156,154)
(158,165)
(160,158)
(161,172)
(162,161)
(163,162)
(165,163)
(168,151)
(169,168)
(170,169)
(172,170)
(175,196)
(176,184)
(178,176)
(179,175)
(180,190)
(182,180)
(184,182)
(186,179)
(187,186)
(188,187)
(190,188)
(193,202)
(194,197)
(196,194)
(197,193)
(200,210)
(200,134)
(202,200)
(206,215)
(207,206)
(208,207)
(210,208)
(212,134)
(213,212)
(215,213)
(217,237)
(218,226)
(220,218)
(221,217)
(222,232)
(223,222)
(224,223)
(226,224)
(228,221)
(229,228)
(230,229)
(232,230)
(234,243)
(235,234)
(237,235)
(238,249)
(240,238)
(241,240)
(243,241)
(245,254)
(247,245)
(249,247)
(250,257)
(252,250)
(254,252)
(256,265)
(256,656)
(257,256)
(262,274)
(263,262)
(265,263)
(270,277)
(271,270)
(272,271)
(274,272)
(277,285)
(277,297)
(280,287)
(282,280)
(283,282)
(285,283)
(287,297)
(289,303)
(291,289)
(292,291)
(293,292)
(295,293)
(297,295)
(300,309)
(301,307)
(303,301)
(304,300)
(305,304)
(307,305)
(308,318)
(309,308)
(312,327)
(314,312)
(315,314)
(316,315)
(318,316)
(321,333)
(323,321)
(324,323)
(325,324)
(327,325)
(331,342)
(331,349)
(333,331)
(335,363)
(335,409)
(335,450)
(335,477)
(337,335)
(338,337)
(339,338)
(340,339)
(342,340)
(349,363)
(349,409)
(349,450)
(349,477)
(357,484)
(359,357)
(360,368)
(360,391)
(361,360)
(363,361)
(365,359)
(366,372)
(368,366)
(370,376)
(372,370)
(374,379)
(376,374)
(377,384)
(379,377)
(381,365)
(382,381)
(384,382)
(385,359)
(389,394)
(391,389)
(392,399)
(394,392)
(396,385)
(397,396)
(399,397)
(403,484)
(405,403)
(406,414)
(406,434)
(407,406)
(409,407)
(411,405)
(412,419)
(414,412)
(417,422)
(419,417)
(420,427)
(422,420)
(424,411)
(425,424)
(427,425)
(428,405)
(432,437)
(434,432)
(435,442)
(437,435)
(439,428)
(440,439)
(442,440)
(446,457)
(447,446)
(448,447)
(450,448)
(452,484)
(454,452)
(455,461)
(457,455)
(459,466)
(461,459)
(464,469)
(466,464)
(467,474)
(469,467)
(471,454)
(472,471)
(474,472)
(477,484)
(481,490)
(481,530)
(482,481)
(484,482)
(488,495)
(488,499)
(490,488)
(492,499)
(493,492)
(495,493)
(496,507)
(497,503)
(499,497)
(500,496)
(501,500)
(503,501)
(504,516)
(505,511)
(507,505)
(508,504)
(509,508)
(511,509)
(513,522)
(513,568)
(514,513)
(516,514)
(519,568)
(520,519)
(522,520)
(528,533)
(528,557)
(530,528)
(533,536)
(533,539)
(536,539)
(539,541)
(541,547)
(544,568)
(545,551)
(547,545)
(548,544)
(549,548)
(551,549)
(554,568)
(555,562)
(557,555)
(558,554)
(559,563)
(560,559)
(562,560)
(563,558)
(565,626)
(566,582)
(568,566)
(569,565)
(570,622)
(571,615)
(572,610)
(573,608)
(574,604)
(575,600)
(576,596)
(577,590)
(578,577)
(579,584)
(580,583)
(582,580)
(583,579)
(584,578)
(585,576)
(586,585)
(587,592)
(588,591)
(590,588)
(591,587)
(592,586)
(593,575)
(594,593)
(596,594)
(597,574)
(598,597)
(600,598)
(601,573)
(602,601)
(604,602)
(605,572)
(606,605)
(608,606)
(609,571)
(610,611)
(611,609)
(614,570)
(615,616)
(616,614)
(619,569)
(620,619)
(622,620)
(623,635)
(624,629)
(626,624)
(627,623)
(629,627)
(631,640)
(631,648)
(633,631)
(635,633)
(637,648)
(638,644)
(640,638)
(641,637)
(642,646)
(644,642)
(646,641)
(648,652)
(648,654)
(652,654)
(654,257)
(656,665)
(659,675)
(661,659)
(662,661)
(663,668)
(665,663)
(666,662)
(668,666)
(671,676)
(673,671)
(675,673)
(676,686)
(676,836)
(676,838)
(679,676)
(683,692)
(683,698)
(684,683)
(686,684)
(689,698)
(690,689)
(692,690)
(695,704)
(695,710)
(696,695)
(698,696)
(701,710)
(702,701)
(704,702)
(707,712)
(707,832)
(708,707)
(710,708)
(712,718)
(716,729)
(716,735)
(717,716)
(717,727)
(718,723)
(721,717)
(723,721)
(724,716)
(725,724)
(727,725)
(729,718)
(732,745)
(732,780)
(733,732)
(735,733)
(738,755)
(740,738)
(741,740)
(742,741)
(743,746)
(745,743)
(746,742)
(751,761)
(751,768)
(752,751)
(753,756)
(755,753)
(756,752)
(759,774)
(761,759)
(766,774)
(768,766)
(771,780)
(772,771)
(774,772)
(777,788)
(777,799)
(778,783)
(780,778)
(781,777)
(783,781)
(785,799)
(786,791)
(788,786)
(789,785)
(791,789)
(793,807)
(793,809)
(794,793)
(796,794)
(797,803)
(799,797)
(800,796)
(801,800)
(803,801)
(807,809)
(809,816)
(809,823)
(813,823)
(814,813)
(816,814)
(817,679)
(819,817)
(821,819)
(823,821)
(826,679)
(828,826)
(830,828)
(832,830)
(836,838)
(838,840)
-----path-----
7,29,36,34,32,40,38,41,37,47,45,44,51,49,56,54,52,48,60,58,57,64,62,61,70,68,75,73,72,82,80,78,77,71,67,89,87,86,95,93,100,98,101,97,96,92,106,104,103,120,118
7,29,36,34,32,40,38,41,37,47,45,44,51,49,56,54,52,48,60,58,57,64,62,61,70,68,75,73,72,82,80,78,77,71,67,89,87,86,112,110,109,120,118,123,121,117,116,114,130,128,126
7,29,36,34,32,40,38,41,37,47,45,44,51,49,56,54,52,48,60,58,57,64,62,61,70,68,75,73,72,71,67,89,87,86,95,93,100,98,101,97,96,92,106,104,103,120,118,123,121,117,116
7,29,36,34,32,40,38,41,37,47,45,44,51,49,56,54,52,48,60,58,57,64,62,61,70,68,75,73,72,71,67,89,87,86,112,110,109,120,118,123,121,117,116,114,130,128,126,131,140,138,137
7,29,36,34,32,40,38,41,37,47,45,44,51,49,56,54,52,48,60,58,57,64,62,61,70,68,75,73,72,71,67,89,87,86,112,110,109,120,118,123,121,117,116,114,130,128,126,131,220,218,226
-----cfgNode-----
5,<global>
6,<empty>
7,int jpc_enc_enccblk (jpc_enc_t *enc,jas_stream_t *out,jpc_enc_tcmpt_t *tcmpt,jpc_enc_band_t *band,jpc_enc_cblk_t *cblk)
8,jpc_enc_t *enc
9,jas_stream_t *out
10,jpc_enc_tcmpt_t *tcmpt
11,jpc_enc_band_t *band
12,jpc_enc_cblk_t *cblk
13,<empty>
14,jpc_enc_pass_t* pass
15,jpc_enc_pass_t* endpasses
16,int bitpos
17,int n
18,int adjust
19,int ret
20,int passtype
21,int t
22,jpc_bitstream_t* bout
23,jpc_enc_pass_t* termpass
24,jpc_enc_rlvl_t* rlvl
25,int vcausal
26,int segsym
27,int termmode
28,int c
29,bout = 0
30,bout
31,0
32,rlvl = band->rlvl
33,rlvl
34,band->rlvl
35,band
36,rlvl
37,cblk->stream = jas_stream_memopen(0, 0)
38,cblk->stream
39,cblk
40,stream
41,jas_stream_memopen(0, 0)
42,0
43,0
44,assert(cblk->stream)
45,cblk->stream
46,cblk
47,stream
48,cblk->mqenc = jpc_mqenc_create(JPC_NUMCTXS, cblk->stream)
49,cblk->mqenc
50,cblk
51,mqenc
52,jpc_mqenc_create(JPC_NUMCTXS, cblk->stream)
53,JPC_NUMCTXS
54,cblk->stream
55,cblk
56,stream
57,assert(cblk->mqenc)
58,cblk->mqenc
59,cblk
60,mqenc
61,jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs)
62,cblk->mqenc
63,cblk
64,mqenc
65,JPC_NUMCTXS
66,jpc_mqctxs
67,cblk->numpasses = (cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0
68,cblk->numpasses
69,cblk
70,numpasses
71,(cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0
72,cblk->numbps > 0
73,cblk->numbps
74,cblk
75,numbps
76,0
77,3 * cblk->numbps - 2
78,3 * cblk->numbps
79,3
80,cblk->numbps
81,cblk
82,numbps
83,2
84,0
85,if (cblk->numpasses > 0)
86,cblk->numpasses > 0
87,cblk->numpasses
88,cblk
89,numpasses
90,0
91,<empty>
92,cblk->passes = jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t))
93,cblk->passes
94,cblk
95,passes
96,jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t))
97,cblk->numpasses * sizeof(jpc_enc_pass_t)
98,cblk->numpasses
99,cblk
100,numpasses
101,sizeof(jpc_enc_pass_t)
102,jpc_enc_pass_t
103,assert(cblk->passes)
104,cblk->passes
105,cblk
106,passes
107,else
108,<empty>
109,cblk->passes = 0
110,cblk->passes
111,cblk
112,passes
113,0
114,endpasses = &cblk->passes[cblk->numpasses]
115,endpasses
116,&cblk->passes[cblk->numpasses]
117,cblk->passes[cblk->numpasses]
118,cblk->passes
119,cblk
120,passes
121,cblk->numpasses
122,cblk
123,numpasses
124,for (pass = cblk->passes;pass != endpasses;++pass)
125,<empty>
126,pass = cblk->passes
127,pass
128,cblk->passes
129,cblk
130,passes
131,pass != endpasses
132,pass
133,endpasses
134,++pass
135,pass
136,<empty>
137,pass->start = 0
138,pass->start
139,pass
140,start
141,0
142,pass->end = 0
143,pass->end
144,pass
145,end
146,0
147,pass->term = JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
148,pass->term
149,pass
150,term
151,JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
152,pass - cblk->passes
153,pass
154,cblk->passes
155,cblk
156,passes
157,0
158,cblk->numpasses
159,cblk
160,numpasses
161,(tcmpt->cblksty & JPC_COX_TERMALL) != 0
162,tcmpt->cblksty & JPC_COX_TERMALL
163,tcmpt->cblksty
164,tcmpt
165,cblksty
166,JPC_COX_TERMALL
167,0
168,(tcmpt->cblksty & JPC_COX_LAZY) != 0
169,tcmpt->cblksty & JPC_COX_LAZY
170,tcmpt->cblksty
171,tcmpt
172,cblksty
173,JPC_COX_LAZY
174,0
175,pass->type = JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
176,pass->type
177,pass
178,type
179,JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
180,pass - cblk->passes
181,pass
182,cblk->passes
183,cblk
184,passes
185,0
186,(tcmpt->cblksty & JPC_COX_LAZY) != 0
187,tcmpt->cblksty & JPC_COX_LAZY
188,tcmpt->cblksty
189,tcmpt
190,cblksty
191,JPC_COX_LAZY
192,0
193,pass->lyrno = -1
194,pass->lyrno
195,pass
196,lyrno
197,-1
198,1
199,if (pass == endpasses - 1)
200,pass == endpasses - 1
201,pass
202,endpasses - 1
203,endpasses
204,1
205,<empty>
206,assert(pass->term == 1)
207,pass->term == 1
208,pass->term
209,pass
210,term
211,1
212,pass->term = 1
213,pass->term
214,pass
215,term
216,1
217,cblk->flags = jas_matrix_create(jas_matrix_numrows(cblk->data) + 2,
218,	  jas_matrix_numcols(cblk->data) + 2)
219,cblk->flags
220,cblk
221,flags
222,jas_matrix_create(jas_matrix_numrows(cblk->data) + 2,
223,	  jas_matrix_numcols(cblk->data) + 2)
224,jas_matrix_numrows(cblk->data) + 2
225,jas_matrix_numrows(cblk->data)
226,cblk->data
227,cblk
228,data
229,2
230,jas_matrix_numcols(cblk->data) + 2
231,jas_matrix_numcols(cblk->data)
232,cblk->data
233,cblk
234,data
235,2
236,assert(cblk->flags)
237,cblk->flags
238,cblk
239,flags
240,bitpos = cblk->numbps - 1
241,bitpos
242,cblk->numbps - 1
243,cblk->numbps
244,cblk
245,numbps
246,1
247,pass = cblk->passes
248,pass
249,cblk->passes
250,cblk
251,passes
252,n = cblk->numpasses
253,n
254,cblk->numpasses
255,cblk
256,numpasses
257,while (--n >= 0)
258,--n >= 0
259,--n
260,n
261,0
262,<empty>
263,if (pass->type == JPC_SEG_MQ)
264,pass->type == JPC_SEG_MQ
265,pass->type
266,pass
267,type
268,JPC_SEG_MQ
269,<empty>
270,else
271,<empty>
272,assert(pass->type == JPC_SEG_RAW)
273,pass->type == JPC_SEG_RAW
274,pass->type
275,pass
276,type
277,JPC_SEG_RAW
278,if (!bout)
279,!bout
280,bout
281,<empty>
282,bout = jpc_bitstream_sopen(cblk->stream, "w")
283,bout
284,jpc_bitstream_sopen(cblk->stream, "w")
285,cblk->stream
286,cblk
287,stream
288,"w"
289,assert(bout)
290,bout
291,passtype = (pass - cblk->passes + 2) % 3
292,passtype
293,(pass - cblk->passes + 2) % 3
294,pass - cblk->passes + 2
295,pass - cblk->passes
296,pass
297,cblk->passes
298,cblk
299,passes
300,2
301,3
302,pass->start = jas_stream_tell(cblk->stream)
303,pass->start
304,pass
305,start
306,jas_stream_tell(cblk->stream)
307,cblk->stream
308,cblk
309,stream
310,assert(bitpos >= 0)
311,bitpos >= 0
312,bitpos
313,0
314,vcausal = (tcmpt->cblksty & JPC_COX_VSC) != 0
315,vcausal
316,(tcmpt->cblksty & JPC_COX_VSC) != 0
317,tcmpt->cblksty & JPC_COX_VSC
318,tcmpt->cblksty
319,tcmpt
320,cblksty
321,JPC_COX_VSC
322,0
323,segsym = (tcmpt->cblksty & JPC_COX_SEGSYM) != 0
324,segsym
325,(tcmpt->cblksty & JPC_COX_SEGSYM) != 0
326,tcmpt->cblksty & JPC_COX_SEGSYM
327,tcmpt->cblksty
328,tcmpt
329,cblksty
330,JPC_COX_SEGSYM
331,0
332,if (pass->term)
333,pass->term
334,pass
335,term
336,<empty>
337,termmode = ((tcmpt->cblksty & JPC_COX_PTERM) ?
338,			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1
339,termmode
340,((tcmpt->cblksty & JPC_COX_PTERM) ?
341,			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1
342,(tcmpt->cblksty & JPC_COX_PTERM) ?
343,			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM
344,tcmpt->cblksty & JPC_COX_PTERM
345,tcmpt->cblksty
346,tcmpt
347,cblksty
348,JPC_COX_PTERM
349,JPC_MQENC_PTERM
350,JPC_MQENC_DEFTERM
351,1
352,else
353,<empty>
354,termmode = 0
355,termmode
356,0
357,switch(passtype)
358,passtype
359,<empty>
360,case JPC_SIGPASS:
361,JPC_SIGPASS
362,ret = (pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,
363,			  bitpos, band->orient, vcausal, cblk->flags,
364,			  cblk->data, termmode, &pass->nmsedec) :
365,			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,
366,			  cblk->data, termmode, &pass->nmsedec)
367,ret
368,(pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,
369,			  bitpos, band->orient, vcausal, cblk->flags,
370,			  cblk->data, termmode, &pass->nmsedec) :
371,			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,
372,			  cblk->data, termmode, &pass->nmsedec)
373,pass->type == JPC_SEG_MQ
374,pass->type
375,pass
376,type
377,JPC_SEG_MQ
378,jpc_encsigpass(cblk->mqenc,
379,			  bitpos, band->orient, vcausal, cblk->flags,
380,			  cblk->data, termmode, &pass->nmsedec)
381,cblk->mqenc
382,cblk
383,mqenc
384,bitpos
385,band->orient
386,band
387,orient
388,vcausal
389,cblk->flags
390,cblk
391,flags
392,cblk->data
393,cblk
394,data
395,termmode
396,&pass->nmsedec
397,pass->nmsedec
398,pass
399,nmsedec
400,jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,
401,			  cblk->data, termmode, &pass->nmsedec)
402,bout
403,bitpos
404,vcausal
405,cblk->flags
406,cblk
407,flags
408,cblk->data
409,cblk
410,data
411,termmode
412,&pass->nmsedec
413,pass->nmsedec
414,pass
415,nmsedec
416,break;
417,case JPC_REFPASS:
418,JPC_REFPASS
419,ret = (pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,
420,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,
421,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,
422,			  vcausal, cblk->flags, cblk->data, termmode,
423,			  &pass->nmsedec)
424,ret
425,(pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,
426,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,
427,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,
428,			  vcausal, cblk->flags, cblk->data, termmode,
429,			  &pass->nmsedec)
430,pass->type == JPC_SEG_MQ
431,pass->type
432,pass
433,type
434,JPC_SEG_MQ
435,jpc_encrefpass(cblk->mqenc,
436,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,
437,			  &pass->nmsedec)
438,cblk->mqenc
439,cblk
440,mqenc
441,bitpos
442,vcausal
443,cblk->flags
444,cblk
445,flags
446,cblk->data
447,cblk
448,data
449,termmode
450,&pass->nmsedec
451,pass->nmsedec
452,pass
453,nmsedec
454,jpc_encrawrefpass(bout, bitpos,
455,			  vcausal, cblk->flags, cblk->data, termmode,
456,			  &pass->nmsedec)
457,bout
458,bitpos
459,vcausal
460,cblk->flags
461,cblk
462,flags
463,cblk->data
464,cblk
465,data
466,termmode
467,&pass->nmsedec
468,pass->nmsedec
469,pass
470,nmsedec
471,break;
472,case JPC_CLNPASS:
473,JPC_CLNPASS
474,assert(pass->type == JPC_SEG_MQ)
475,pass->type == JPC_SEG_MQ
476,pass->type
477,pass
478,type
479,JPC_SEG_MQ
480,ret = jpc_encclnpass(cblk->mqenc, bitpos, band->orient,
481,			  vcausal, segsym, cblk->flags, cblk->data, termmode,
482,			  &pass->nmsedec)
483,ret
484,jpc_encclnpass(cblk->mqenc, bitpos, band->orient,
485,			  vcausal, segsym, cblk->flags, cblk->data, termmode,
486,			  &pass->nmsedec)
487,cblk->mqenc
488,cblk
489,mqenc
490,bitpos
491,band->orient
492,band
493,orient
494,vcausal
495,segsym
496,cblk->flags
497,cblk
498,flags
499,cblk->data
500,cblk
501,data
502,termmode
503,&pass->nmsedec
504,pass->nmsedec
505,pass
506,nmsedec
507,break;
508,default:
509,assert(0)
510,0
511,break;
512,if (pass->type == JPC_SEG_MQ)
513,pass->type == JPC_SEG_MQ
514,pass->type
515,pass
516,type
517,JPC_SEG_MQ
518,<empty>
519,if (pass->term)
520,pass->term
521,pass
522,term
523,<empty>
524,jpc_mqenc_init(cblk->mqenc)
525,cblk->mqenc
526,cblk
527,mqenc
528,jpc_mqenc_getstate(cblk->mqenc, &pass->mqencstate)
529,cblk->mqenc
530,cblk
531,mqenc
532,&pass->mqencstate
533,pass->mqencstate
534,pass
535,mqencstate
536,pass->end = jas_stream_tell(cblk->stream)
537,pass->end
538,pass
539,end
540,jas_stream_tell(cblk->stream)
541,cblk->stream
542,cblk
543,stream
544,if (tcmpt->cblksty & JPC_COX_RESET)
545,tcmpt->cblksty & JPC_COX_RESET
546,tcmpt->cblksty
547,tcmpt
548,cblksty
549,JPC_COX_RESET
550,<empty>
551,jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs)
552,cblk->mqenc
553,cblk
554,mqenc
555,JPC_NUMCTXS
556,jpc_mqctxs
557,else
558,<empty>
559,if (pass->term)
560,pass->term
561,pass
562,term
563,<empty>
564,if (jpc_bitstream_pending(bout))
565,jpc_bitstream_pending(bout)
566,bout
567,<empty>
568,jpc_bitstream_outalign(bout, 0x2a)
569,bout
570,0x2a
571,jpc_bitstream_close(bout)
572,bout
573,bout = 0
574,bout
575,0
576,pass->end = jas_stream_tell(cblk->stream)
577,pass->end
578,pass
579,end
580,jas_stream_tell(cblk->stream)
581,cblk->stream
582,cblk
583,stream
584,else
585,<empty>
586,pass->end = jas_stream_tell(cblk->stream) +
587,				  jpc_bitstream_pending(bout)
588,pass->end
589,pass
590,end
591,jas_stream_tell(cblk->stream) +
592,				  jpc_bitstream_pending(bout)
593,jas_stream_tell(cblk->stream)
594,cblk->stream
595,cblk
596,stream
597,jpc_bitstream_pending(bout)
598,bout
599,pass->wmsedec = jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
600,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
601,		  jpc_fixtodbl(band->synweight) *
602,		  jpc_fixtodbl(band->synweight) *
603,		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *
604,		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *
605,		  jpc_fixtodbl(pass->nmsedec)
606,pass->wmsedec
607,pass
608,wmsedec
609,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
610,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
611,		  jpc_fixtodbl(band->synweight) *
612,		  jpc_fixtodbl(band->synweight) *
613,		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *
614,		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *
615,		  jpc_fixtodbl(pass->nmsedec)
616,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
617,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
618,		  jpc_fixtodbl(band->synweight) *
619,		  jpc_fixtodbl(band->synweight) *
620,		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *
621,		  ((double) (1 << bitpos)) * ((double)(1 << bitpos))
622,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
623,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
624,		  jpc_fixtodbl(band->synweight) *
625,		  jpc_fixtodbl(band->synweight) *
626,		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *
627,		  ((double) (1 << bitpos))
628,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
629,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
630,		  jpc_fixtodbl(band->synweight) *
631,		  jpc_fixtodbl(band->synweight) *
632,		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize)
633,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
634,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
635,		  jpc_fixtodbl(band->synweight) *
636,		  jpc_fixtodbl(band->synweight) *
637,		  jpc_fixtodbl(band->absstepsize)
638,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
639,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
640,		  jpc_fixtodbl(band->synweight) *
641,		  jpc_fixtodbl(band->synweight)
642,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
643,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
644,		  jpc_fixtodbl(band->synweight)
645,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
646,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight)
647,jpc_fixtodbl(band->rlvl->tcmpt->synweight)
648,band->rlvl->tcmpt->synweight
649,band->rlvl->tcmpt
650,band->rlvl
651,band
652,rlvl
653,tcmpt
654,synweight
655,jpc_fixtodbl(band->rlvl->tcmpt->synweight)
656,band->rlvl->tcmpt->synweight
657,band->rlvl->tcmpt
658,band->rlvl
659,band
660,rlvl
661,tcmpt
662,synweight
663,jpc_fixtodbl(band->synweight)
664,band->synweight
665,band
666,synweight
667,jpc_fixtodbl(band->synweight)
668,band->synweight
669,band
670,synweight
671,jpc_fixtodbl(band->absstepsize)
672,band->absstepsize
673,band
674,absstepsize
675,jpc_fixtodbl(band->absstepsize)
676,band->absstepsize
677,band
678,absstepsize
679,(double) (1 << bitpos)
680,double
681,1 << bitpos
682,1
683,bitpos
684,(double)(1 << bitpos)
685,double
686,1 << bitpos
687,1
688,bitpos
689,jpc_fixtodbl(pass->nmsedec)
690,pass->nmsedec
691,pass
692,nmsedec
693,pass->cumwmsedec = pass->wmsedec
694,pass->cumwmsedec
695,pass
696,cumwmsedec
697,pass->wmsedec
698,pass
699,wmsedec
700,if (pass != cblk->passes)
701,pass != cblk->passes
702,pass
703,cblk->passes
704,cblk
705,passes
706,<empty>
707,pass->cumwmsedec += pass[-1].cumwmsedec
708,pass->cumwmsedec
709,pass
710,cumwmsedec
711,pass[-1].cumwmsedec
712,pass[-1]
713,pass
714,-1
715,1
716,cumwmsedec
717,if (passtype == JPC_CLNPASS)
718,passtype == JPC_CLNPASS
719,passtype
720,JPC_CLNPASS
721,<empty>
722,--bitpos
723,bitpos
724,++pass
725,pass
726,n = 0
727,n
728,0
729,endpasses = &cblk->passes[cblk->numpasses]
730,endpasses
731,&cblk->passes[cblk->numpasses]
732,cblk->passes[cblk->numpasses]
733,cblk->passes
734,cblk
735,passes
736,cblk->numpasses
737,cblk
738,numpasses
739,for (pass = cblk->passes;pass != endpasses;++pass)
740,<empty>
741,pass = cblk->passes
742,pass
743,cblk->passes
744,cblk
745,passes
746,pass != endpasses
747,pass
748,endpasses
749,++pass
750,pass
751,<empty>
752,if (pass->start < n)
753,pass->start < n
754,pass->start
755,pass
756,start
757,n
758,<empty>
759,pass->start = n
760,pass->start
761,pass
762,start
763,n
764,if (pass->end < n)
765,pass->end < n
766,pass->end
767,pass
768,end
769,n
770,<empty>
771,pass->end = n
772,pass->end
773,pass
774,end
775,n
776,if (!pass->term)
777,!pass->term
778,pass->term
779,pass
780,term
781,<empty>
782,termpass = pass
783,termpass
784,pass
785,while (termpass - pass < cblk->numpasses &&
786,			  !termpass->term)
787,termpass - pass < cblk->numpasses &&
788,			  !termpass->term
789,termpass - pass < cblk->numpasses
790,termpass - pass
791,termpass
792,pass
793,cblk->numpasses
794,cblk
795,numpasses
796,!termpass->term
797,termpass->term
798,termpass
799,term
800,<empty>
801,++termpass
802,termpass
803,if (pass->type == JPC_SEG_MQ)
804,pass->type == JPC_SEG_MQ
805,pass->type
806,pass
807,type
808,JPC_SEG_MQ
809,<empty>
810,t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0
811,t
812,(pass->mqencstate.lastbyte == 0xff) ? 1 : 0
813,pass->mqencstate.lastbyte == 0xff
814,pass->mqencstate.lastbyte
815,pass->mqencstate
816,pass
817,mqencstate
818,lastbyte
819,0xff
820,1
821,0
822,if (pass->mqencstate.ctreg >= 5)
823,pass->mqencstate.ctreg >= 5
824,pass->mqencstate.ctreg
825,pass->mqencstate
826,pass
827,mqencstate
828,ctreg
829,5
830,<empty>
831,adjust = 4 + t
832,adjust
833,4 + t
834,4
835,t
836,else
837,<empty>
838,adjust = 5 + t
839,adjust
840,5 + t
841,5
842,t
843,pass->end += adjust
844,pass->end
845,pass
846,end
847,adjust
848,if (pass->end > termpass->end)
849,pass->end > termpass->end
850,pass->end
851,pass
852,end
853,termpass->end
854,termpass
855,end
856,<empty>
857,pass->end = termpass->end
858,pass->end
859,pass
860,end
861,termpass->end
862,termpass
863,end
864,if ((c = getthebyte(cblk->stream, pass->end - 1)) == EOF)
865,(c = getthebyte(cblk->stream, pass->end - 1)) == EOF
866,c = getthebyte(cblk->stream, pass->end - 1)
867,c
868,getthebyte(cblk->stream, pass->end - 1)
869,cblk->stream
870,cblk
871,stream
872,pass->end - 1
873,pass->end
874,pass
875,end
876,1
877,EOF
878,<empty>
879,abort()
880,if (c == 0xff)
881,c == 0xff
882,c
883,0xff
884,<empty>
885,++pass->end
886,pass->end
887,pass
888,end
889,n = JAS_MAX(n, pass->end)
890,n
891,JAS_MAX(n, pass->end)
892,n
893,pass->end
894,pass
895,end
896,else
897,<empty>
898,n = JAS_MAX(n, pass->end)
899,n
900,JAS_MAX(n, pass->end)
901,n
902,pass->end
903,pass
904,end
905,if (bout)
906,bout
907,<empty>
908,jpc_bitstream_close(bout)
909,bout
910,return 0;
911,0
912,RET
913,jpc_enc_t *enc
914,jas_stream_t *out
915,jpc_enc_tcmpt_t *tcmpt
916,jpc_enc_band_t *band
917,jpc_enc_cblk_t *cblk
918,RET
919,int jpc_enc_enccblk (jpc_enc_t *enc,jas_stream_t *out,jpc_enc_tcmpt_t *tcmpt,jpc_enc_band_t *band,jpc_enc_cblk_t *cblk)
920,jpc_enc_t *enc
921,jas_stream_t *out
922,jpc_enc_tcmpt_t *tcmpt
923,jpc_enc_band_t *band
924,jpc_enc_cblk_t *cblk
925,<empty>
926,jpc_enc_pass_t* pass
927,jpc_enc_pass_t* endpasses
928,int bitpos
929,int n
930,int adjust
931,int ret
932,int passtype
933,int t
934,jpc_bitstream_t* bout
935,jpc_enc_pass_t* termpass
936,jpc_enc_rlvl_t* rlvl
937,int vcausal
938,int segsym
939,int termmode
940,int c
941,bout = 0
942,bout
943,0
944,rlvl = band->rlvl
945,rlvl
946,band->rlvl
947,band
948,rlvl
949,cblk->stream = jas_stream_memopen(0, 0)
950,cblk->stream
951,cblk
952,stream
953,jas_stream_memopen(0, 0)
954,0
955,0
956,assert(cblk->stream)
957,cblk->stream
958,cblk
959,stream
960,cblk->mqenc = jpc_mqenc_create(JPC_NUMCTXS, cblk->stream)
961,cblk->mqenc
962,cblk
963,mqenc
964,jpc_mqenc_create(JPC_NUMCTXS, cblk->stream)
965,JPC_NUMCTXS
966,cblk->stream
967,cblk
968,stream
969,assert(cblk->mqenc)
970,cblk->mqenc
971,cblk
972,mqenc
973,jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs)
974,cblk->mqenc
975,cblk
976,mqenc
977,JPC_NUMCTXS
978,jpc_mqctxs
979,cblk->numpasses = (cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0
980,cblk->numpasses
981,cblk
982,numpasses
983,(cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0
984,cblk->numbps > 0
985,cblk->numbps
986,cblk
987,numbps
988,0
989,3 * cblk->numbps - 2
990,3 * cblk->numbps
991,3
992,cblk->numbps
993,cblk
994,numbps
995,2
996,0
997,if (cblk->numpasses > 0)
998,cblk->numpasses > 0
999,cblk->numpasses
1000,cblk
1001,numpasses
1002,0
1003,<empty>
1004,cblk->passes = jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t))
1005,cblk->passes
1006,cblk
1007,passes
1008,jas_malloc(cblk->numpasses * sizeof(jpc_enc_pass_t))
1009,cblk->numpasses * sizeof(jpc_enc_pass_t)
1010,cblk->numpasses
1011,cblk
1012,numpasses
1013,sizeof(jpc_enc_pass_t)
1014,jpc_enc_pass_t
1015,assert(cblk->passes)
1016,cblk->passes
1017,cblk
1018,passes
1019,else
1020,<empty>
1021,cblk->passes = 0
1022,cblk->passes
1023,cblk
1024,passes
1025,0
1026,endpasses = &cblk->passes[cblk->numpasses]
1027,endpasses
1028,&cblk->passes[cblk->numpasses]
1029,cblk->passes[cblk->numpasses]
1030,cblk->passes
1031,cblk
1032,passes
1033,cblk->numpasses
1034,cblk
1035,numpasses
1036,for (pass = cblk->passes;pass != endpasses;++pass)
1037,<empty>
1038,pass = cblk->passes
1039,pass
1040,cblk->passes
1041,cblk
1042,passes
1043,pass != endpasses
1044,pass
1045,endpasses
1046,++pass
1047,pass
1048,<empty>
1049,pass->start = 0
1050,pass->start
1051,pass
1052,start
1053,0
1054,pass->end = 0
1055,pass->end
1056,pass
1057,end
1058,0
1059,pass->term = JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
1060,pass->term
1061,pass
1062,term
1063,JPC_ISTERMINATED(pass - cblk->passes, 0, cblk->numpasses, (tcmpt->cblksty & JPC_COX_TERMALL) != 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
1064,pass - cblk->passes
1065,pass
1066,cblk->passes
1067,cblk
1068,passes
1069,0
1070,cblk->numpasses
1071,cblk
1072,numpasses
1073,(tcmpt->cblksty & JPC_COX_TERMALL) != 0
1074,tcmpt->cblksty & JPC_COX_TERMALL
1075,tcmpt->cblksty
1076,tcmpt
1077,cblksty
1078,JPC_COX_TERMALL
1079,0
1080,(tcmpt->cblksty & JPC_COX_LAZY) != 0
1081,tcmpt->cblksty & JPC_COX_LAZY
1082,tcmpt->cblksty
1083,tcmpt
1084,cblksty
1085,JPC_COX_LAZY
1086,0
1087,pass->type = JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
1088,pass->type
1089,pass
1090,type
1091,JPC_SEGTYPE(pass - cblk->passes, 0, (tcmpt->cblksty & JPC_COX_LAZY) != 0)
1092,pass - cblk->passes
1093,pass
1094,cblk->passes
1095,cblk
1096,passes
1097,0
1098,(tcmpt->cblksty & JPC_COX_LAZY) != 0
1099,tcmpt->cblksty & JPC_COX_LAZY
1100,tcmpt->cblksty
1101,tcmpt
1102,cblksty
1103,JPC_COX_LAZY
1104,0
1105,pass->lyrno = -1
1106,pass->lyrno
1107,pass
1108,lyrno
1109,-1
1110,1
1111,if (pass == endpasses - 1)
1112,pass == endpasses - 1
1113,pass
1114,endpasses - 1
1115,endpasses
1116,1
1117,<empty>
1118,assert(pass->term == 1)
1119,pass->term == 1
1120,pass->term
1121,pass
1122,term
1123,1
1124,pass->term = 1
1125,pass->term
1126,pass
1127,term
1128,1
1129,cblk->flags = jas_matrix_create(jas_matrix_numrows(cblk->data) + 2,
1130,	  jas_matrix_numcols(cblk->data) + 2)
1131,cblk->flags
1132,cblk
1133,flags
1134,jas_matrix_create(jas_matrix_numrows(cblk->data) + 2,
1135,	  jas_matrix_numcols(cblk->data) + 2)
1136,jas_matrix_numrows(cblk->data) + 2
1137,jas_matrix_numrows(cblk->data)
1138,cblk->data
1139,cblk
1140,data
1141,2
1142,jas_matrix_numcols(cblk->data) + 2
1143,jas_matrix_numcols(cblk->data)
1144,cblk->data
1145,cblk
1146,data
1147,2
1148,assert(cblk->flags)
1149,cblk->flags
1150,cblk
1151,flags
1152,bitpos = cblk->numbps - 1
1153,bitpos
1154,cblk->numbps - 1
1155,cblk->numbps
1156,cblk
1157,numbps
1158,1
1159,pass = cblk->passes
1160,pass
1161,cblk->passes
1162,cblk
1163,passes
1164,n = cblk->numpasses
1165,n
1166,cblk->numpasses
1167,cblk
1168,numpasses
1169,while (--n >= 0)
1170,--n >= 0
1171,--n
1172,n
1173,0
1174,<empty>
1175,if (pass->type == JPC_SEG_MQ)
1176,pass->type == JPC_SEG_MQ
1177,pass->type
1178,pass
1179,type
1180,JPC_SEG_MQ
1181,<empty>
1182,else
1183,<empty>
1184,assert(pass->type == JPC_SEG_RAW)
1185,pass->type == JPC_SEG_RAW
1186,pass->type
1187,pass
1188,type
1189,JPC_SEG_RAW
1190,if (!bout)
1191,!bout
1192,bout
1193,<empty>
1194,bout = jpc_bitstream_sopen(cblk->stream, "w")
1195,bout
1196,jpc_bitstream_sopen(cblk->stream, "w")
1197,cblk->stream
1198,cblk
1199,stream
1200,"w"
1201,assert(bout)
1202,bout
1203,passtype = (pass - cblk->passes + 2) % 3
1204,passtype
1205,(pass - cblk->passes + 2) % 3
1206,pass - cblk->passes + 2
1207,pass - cblk->passes
1208,pass
1209,cblk->passes
1210,cblk
1211,passes
1212,2
1213,3
1214,pass->start = jas_stream_tell(cblk->stream)
1215,pass->start
1216,pass
1217,start
1218,jas_stream_tell(cblk->stream)
1219,cblk->stream
1220,cblk
1221,stream
1222,assert(bitpos >= 0)
1223,bitpos >= 0
1224,bitpos
1225,0
1226,vcausal = (tcmpt->cblksty & JPC_COX_VSC) != 0
1227,vcausal
1228,(tcmpt->cblksty & JPC_COX_VSC) != 0
1229,tcmpt->cblksty & JPC_COX_VSC
1230,tcmpt->cblksty
1231,tcmpt
1232,cblksty
1233,JPC_COX_VSC
1234,0
1235,segsym = (tcmpt->cblksty & JPC_COX_SEGSYM) != 0
1236,segsym
1237,(tcmpt->cblksty & JPC_COX_SEGSYM) != 0
1238,tcmpt->cblksty & JPC_COX_SEGSYM
1239,tcmpt->cblksty
1240,tcmpt
1241,cblksty
1242,JPC_COX_SEGSYM
1243,0
1244,if (pass->term)
1245,pass->term
1246,pass
1247,term
1248,<empty>
1249,termmode = ((tcmpt->cblksty & JPC_COX_PTERM) ?
1250,			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1
1251,termmode
1252,((tcmpt->cblksty & JPC_COX_PTERM) ?
1253,			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM) + 1
1254,(tcmpt->cblksty & JPC_COX_PTERM) ?
1255,			  JPC_MQENC_PTERM : JPC_MQENC_DEFTERM
1256,tcmpt->cblksty & JPC_COX_PTERM
1257,tcmpt->cblksty
1258,tcmpt
1259,cblksty
1260,JPC_COX_PTERM
1261,JPC_MQENC_PTERM
1262,JPC_MQENC_DEFTERM
1263,1
1264,else
1265,<empty>
1266,termmode = 0
1267,termmode
1268,0
1269,switch(passtype)
1270,passtype
1271,<empty>
1272,case JPC_SIGPASS:
1273,JPC_SIGPASS
1274,ret = (pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,
1275,			  bitpos, band->orient, vcausal, cblk->flags,
1276,			  cblk->data, termmode, &pass->nmsedec) :
1277,			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,
1278,			  cblk->data, termmode, &pass->nmsedec)
1279,ret
1280,(pass->type == JPC_SEG_MQ) ? jpc_encsigpass(cblk->mqenc,
1281,			  bitpos, band->orient, vcausal, cblk->flags,
1282,			  cblk->data, termmode, &pass->nmsedec) :
1283,			  jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,
1284,			  cblk->data, termmode, &pass->nmsedec)
1285,pass->type == JPC_SEG_MQ
1286,pass->type
1287,pass
1288,type
1289,JPC_SEG_MQ
1290,jpc_encsigpass(cblk->mqenc,
1291,			  bitpos, band->orient, vcausal, cblk->flags,
1292,			  cblk->data, termmode, &pass->nmsedec)
1293,cblk->mqenc
1294,cblk
1295,mqenc
1296,bitpos
1297,band->orient
1298,band
1299,orient
1300,vcausal
1301,cblk->flags
1302,cblk
1303,flags
1304,cblk->data
1305,cblk
1306,data
1307,termmode
1308,&pass->nmsedec
1309,pass->nmsedec
1310,pass
1311,nmsedec
1312,jpc_encrawsigpass(bout, bitpos, vcausal, cblk->flags,
1313,			  cblk->data, termmode, &pass->nmsedec)
1314,bout
1315,bitpos
1316,vcausal
1317,cblk->flags
1318,cblk
1319,flags
1320,cblk->data
1321,cblk
1322,data
1323,termmode
1324,&pass->nmsedec
1325,pass->nmsedec
1326,pass
1327,nmsedec
1328,break;
1329,case JPC_REFPASS:
1330,JPC_REFPASS
1331,ret = (pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,
1332,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,
1333,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,
1334,			  vcausal, cblk->flags, cblk->data, termmode,
1335,			  &pass->nmsedec)
1336,ret
1337,(pass->type == JPC_SEG_MQ) ? jpc_encrefpass(cblk->mqenc,
1338,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,
1339,			  &pass->nmsedec) : jpc_encrawrefpass(bout, bitpos,
1340,			  vcausal, cblk->flags, cblk->data, termmode,
1341,			  &pass->nmsedec)
1342,pass->type == JPC_SEG_MQ
1343,pass->type
1344,pass
1345,type
1346,JPC_SEG_MQ
1347,jpc_encrefpass(cblk->mqenc,
1348,			  bitpos, vcausal, cblk->flags, cblk->data, termmode,
1349,			  &pass->nmsedec)
1350,cblk->mqenc
1351,cblk
1352,mqenc
1353,bitpos
1354,vcausal
1355,cblk->flags
1356,cblk
1357,flags
1358,cblk->data
1359,cblk
1360,data
1361,termmode
1362,&pass->nmsedec
1363,pass->nmsedec
1364,pass
1365,nmsedec
1366,jpc_encrawrefpass(bout, bitpos,
1367,			  vcausal, cblk->flags, cblk->data, termmode,
1368,			  &pass->nmsedec)
1369,bout
1370,bitpos
1371,vcausal
1372,cblk->flags
1373,cblk
1374,flags
1375,cblk->data
1376,cblk
1377,data
1378,termmode
1379,&pass->nmsedec
1380,pass->nmsedec
1381,pass
1382,nmsedec
1383,break;
1384,case JPC_CLNPASS:
1385,JPC_CLNPASS
1386,assert(pass->type == JPC_SEG_MQ)
1387,pass->type == JPC_SEG_MQ
1388,pass->type
1389,pass
1390,type
1391,JPC_SEG_MQ
1392,ret = jpc_encclnpass(cblk->mqenc, bitpos, band->orient,
1393,			  vcausal, segsym, cblk->flags, cblk->data, termmode,
1394,			  &pass->nmsedec)
1395,ret
1396,jpc_encclnpass(cblk->mqenc, bitpos, band->orient,
1397,			  vcausal, segsym, cblk->flags, cblk->data, termmode,
1398,			  &pass->nmsedec)
1399,cblk->mqenc
1400,cblk
1401,mqenc
1402,bitpos
1403,band->orient
1404,band
1405,orient
1406,vcausal
1407,segsym
1408,cblk->flags
1409,cblk
1410,flags
1411,cblk->data
1412,cblk
1413,data
1414,termmode
1415,&pass->nmsedec
1416,pass->nmsedec
1417,pass
1418,nmsedec
1419,break;
1420,default:
1421,assert(0)
1422,0
1423,break;
1424,if (pass->type == JPC_SEG_MQ)
1425,pass->type == JPC_SEG_MQ
1426,pass->type
1427,pass
1428,type
1429,JPC_SEG_MQ
1430,<empty>
1431,if (pass->term)
1432,pass->term
1433,pass
1434,term
1435,<empty>
1436,jpc_mqenc_init(cblk->mqenc)
1437,cblk->mqenc
1438,cblk
1439,mqenc
1440,jpc_mqenc_getstate(cblk->mqenc, &pass->mqencstate)
1441,cblk->mqenc
1442,cblk
1443,mqenc
1444,&pass->mqencstate
1445,pass->mqencstate
1446,pass
1447,mqencstate
1448,pass->end = jas_stream_tell(cblk->stream)
1449,pass->end
1450,pass
1451,end
1452,jas_stream_tell(cblk->stream)
1453,cblk->stream
1454,cblk
1455,stream
1456,if (tcmpt->cblksty & JPC_COX_RESET)
1457,tcmpt->cblksty & JPC_COX_RESET
1458,tcmpt->cblksty
1459,tcmpt
1460,cblksty
1461,JPC_COX_RESET
1462,<empty>
1463,jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs)
1464,cblk->mqenc
1465,cblk
1466,mqenc
1467,JPC_NUMCTXS
1468,jpc_mqctxs
1469,else
1470,<empty>
1471,if (pass->term)
1472,pass->term
1473,pass
1474,term
1475,<empty>
1476,if (jpc_bitstream_pending(bout))
1477,jpc_bitstream_pending(bout)
1478,bout
1479,<empty>
1480,jpc_bitstream_outalign(bout, 0x2a)
1481,bout
1482,0x2a
1483,jpc_bitstream_close(bout)
1484,bout
1485,bout = 0
1486,bout
1487,0
1488,pass->end = jas_stream_tell(cblk->stream)
1489,pass->end
1490,pass
1491,end
1492,jas_stream_tell(cblk->stream)
1493,cblk->stream
1494,cblk
1495,stream
1496,else
1497,<empty>
1498,pass->end = jas_stream_tell(cblk->stream) +
1499,				  jpc_bitstream_pending(bout)
1500,pass->end
1501,pass
1502,end
1503,jas_stream_tell(cblk->stream) +
1504,				  jpc_bitstream_pending(bout)
1505,jas_stream_tell(cblk->stream)
1506,cblk->stream
1507,cblk
1508,stream
1509,jpc_bitstream_pending(bout)
1510,bout
1511,pass->wmsedec = jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1512,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1513,		  jpc_fixtodbl(band->synweight) *
1514,		  jpc_fixtodbl(band->synweight) *
1515,		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *
1516,		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *
1517,		  jpc_fixtodbl(pass->nmsedec)
1518,pass->wmsedec
1519,pass
1520,wmsedec
1521,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1522,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1523,		  jpc_fixtodbl(band->synweight) *
1524,		  jpc_fixtodbl(band->synweight) *
1525,		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *
1526,		  ((double) (1 << bitpos)) * ((double)(1 << bitpos)) *
1527,		  jpc_fixtodbl(pass->nmsedec)
1528,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1529,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1530,		  jpc_fixtodbl(band->synweight) *
1531,		  jpc_fixtodbl(band->synweight) *
1532,		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *
1533,		  ((double) (1 << bitpos)) * ((double)(1 << bitpos))
1534,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1535,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1536,		  jpc_fixtodbl(band->synweight) *
1537,		  jpc_fixtodbl(band->synweight) *
1538,		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize) *
1539,		  ((double) (1 << bitpos))
1540,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1541,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1542,		  jpc_fixtodbl(band->synweight) *
1543,		  jpc_fixtodbl(band->synweight) *
1544,		  jpc_fixtodbl(band->absstepsize) * jpc_fixtodbl(band->absstepsize)
1545,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1546,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1547,		  jpc_fixtodbl(band->synweight) *
1548,		  jpc_fixtodbl(band->synweight) *
1549,		  jpc_fixtodbl(band->absstepsize)
1550,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1551,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1552,		  jpc_fixtodbl(band->synweight) *
1553,		  jpc_fixtodbl(band->synweight)
1554,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1555,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1556,		  jpc_fixtodbl(band->synweight)
1557,jpc_fixtodbl(band->rlvl->tcmpt->synweight) *
1558,		  jpc_fixtodbl(band->rlvl->tcmpt->synweight)
1559,jpc_fixtodbl(band->rlvl->tcmpt->synweight)
1560,band->rlvl->tcmpt->synweight
1561,band->rlvl->tcmpt
1562,band->rlvl
1563,band
1564,rlvl
1565,tcmpt
1566,synweight
1567,jpc_fixtodbl(band->rlvl->tcmpt->synweight)
1568,band->rlvl->tcmpt->synweight
1569,band->rlvl->tcmpt
1570,band->rlvl
1571,band
1572,rlvl
1573,tcmpt
1574,synweight
1575,jpc_fixtodbl(band->synweight)
1576,band->synweight
1577,band
1578,synweight
1579,jpc_fixtodbl(band->synweight)
1580,band->synweight
1581,band
1582,synweight
1583,jpc_fixtodbl(band->absstepsize)
1584,band->absstepsize
1585,band
1586,absstepsize
1587,jpc_fixtodbl(band->absstepsize)
1588,band->absstepsize
1589,band
1590,absstepsize
1591,(double) (1 << bitpos)
1592,double
1593,1 << bitpos
1594,1
1595,bitpos
1596,(double)(1 << bitpos)
1597,double
1598,1 << bitpos
1599,1
1600,bitpos
1601,jpc_fixtodbl(pass->nmsedec)
1602,pass->nmsedec
1603,pass
1604,nmsedec
1605,pass->cumwmsedec = pass->wmsedec
1606,pass->cumwmsedec
1607,pass
1608,cumwmsedec
1609,pass->wmsedec
1610,pass
1611,wmsedec
1612,if (pass != cblk->passes)
1613,pass != cblk->passes
1614,pass
1615,cblk->passes
1616,cblk
1617,passes
1618,<empty>
1619,pass->cumwmsedec += pass[-1].cumwmsedec
1620,pass->cumwmsedec
1621,pass
1622,cumwmsedec
1623,pass[-1].cumwmsedec
1624,pass[-1]
1625,pass
1626,-1
1627,1
1628,cumwmsedec
1629,if (passtype == JPC_CLNPASS)
1630,passtype == JPC_CLNPASS
1631,passtype
1632,JPC_CLNPASS
1633,<empty>
1634,--bitpos
1635,bitpos
1636,++pass
1637,pass
1638,n = 0
1639,n
1640,0
1641,endpasses = &cblk->passes[cblk->numpasses]
1642,endpasses
1643,&cblk->passes[cblk->numpasses]
1644,cblk->passes[cblk->numpasses]
1645,cblk->passes
1646,cblk
1647,passes
1648,cblk->numpasses
1649,cblk
1650,numpasses
1651,for (pass = cblk->passes;pass != endpasses;++pass)
1652,<empty>
1653,pass = cblk->passes
1654,pass
1655,cblk->passes
1656,cblk
1657,passes
1658,pass != endpasses
1659,pass
1660,endpasses
1661,++pass
1662,pass
1663,<empty>
1664,if (pass->start < n)
1665,pass->start < n
1666,pass->start
1667,pass
1668,start
1669,n
1670,<empty>
1671,pass->start = n
1672,pass->start
1673,pass
1674,start
1675,n
1676,if (pass->end < n)
1677,pass->end < n
1678,pass->end
1679,pass
1680,end
1681,n
1682,<empty>
1683,pass->end = n
1684,pass->end
1685,pass
1686,end
1687,n
1688,if (!pass->term)
1689,!pass->term
1690,pass->term
1691,pass
1692,term
1693,<empty>
1694,termpass = pass
1695,termpass
1696,pass
1697,while (termpass - pass < cblk->numpasses &&
1698,			  !termpass->term)
1699,termpass - pass < cblk->numpasses &&
1700,			  !termpass->term
1701,termpass - pass < cblk->numpasses
1702,termpass - pass
1703,termpass
1704,pass
1705,cblk->numpasses
1706,cblk
1707,numpasses
1708,!termpass->term
1709,termpass->term
1710,termpass
1711,term
1712,<empty>
1713,++termpass
1714,termpass
1715,if (pass->type == JPC_SEG_MQ)
1716,pass->type == JPC_SEG_MQ
1717,pass->type
1718,pass
1719,type
1720,JPC_SEG_MQ
1721,<empty>
1722,t = (pass->mqencstate.lastbyte == 0xff) ? 1 : 0
1723,t
1724,(pass->mqencstate.lastbyte == 0xff) ? 1 : 0
1725,pass->mqencstate.lastbyte == 0xff
1726,pass->mqencstate.lastbyte
1727,pass->mqencstate
1728,pass
1729,mqencstate
1730,lastbyte
1731,0xff
1732,1
1733,0
1734,if (pass->mqencstate.ctreg >= 5)
1735,pass->mqencstate.ctreg >= 5
1736,pass->mqencstate.ctreg
1737,pass->mqencstate
1738,pass
1739,mqencstate
1740,ctreg
1741,5
1742,<empty>
1743,adjust = 4 + t
1744,adjust
1745,4 + t
1746,4
1747,t
1748,else
1749,<empty>
1750,adjust = 5 + t
1751,adjust
1752,5 + t
1753,5
1754,t
1755,pass->end += adjust
1756,pass->end
1757,pass
1758,end
1759,adjust
1760,if (pass->end > termpass->end)
1761,pass->end > termpass->end
1762,pass->end
1763,pass
1764,end
1765,termpass->end
1766,termpass
1767,end
1768,<empty>
1769,pass->end = termpass->end
1770,pass->end
1771,pass
1772,end
1773,termpass->end
1774,termpass
1775,end
1776,if ((c = getthebyte(cblk->stream, pass->end - 1)) == EOF)
1777,(c = getthebyte(cblk->stream, pass->end - 1)) == EOF
1778,c = getthebyte(cblk->stream, pass->end - 1)
1779,c
1780,getthebyte(cblk->stream, pass->end - 1)
1781,cblk->stream
1782,cblk
1783,stream
1784,pass->end - 1
1785,pass->end
1786,pass
1787,end
1788,1
1789,EOF
1790,<empty>
1791,abort()
1792,if (c == 0xff)
1793,c == 0xff
1794,c
1795,0xff
1796,<empty>
1797,++pass->end
1798,pass->end
1799,pass
1800,end
1801,n = JAS_MAX(n, pass->end)
1802,n
1803,JAS_MAX(n, pass->end)
1804,n
1805,pass->end
1806,pass
1807,end
1808,else
1809,<empty>
1810,n = JAS_MAX(n, pass->end)
1811,n
1812,JAS_MAX(n, pass->end)
1813,n
1814,pass->end
1815,pass
1816,end
1817,if (bout)
1818,bout
1819,<empty>
1820,jpc_bitstream_close(bout)
1821,bout
1822,return 0;
1823,0
1824,RET
1825,jpc_enc_t *enc
1826,jas_stream_t *out
1827,jpc_enc_tcmpt_t *tcmpt
1828,jpc_enc_band_t *band
1829,jpc_enc_cblk_t *cblk
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
int jpc_enc_enccblk(jpc_enc_t *enc, jas_stream_t *out, jpc_enc_tcmpt_t *tcmpt, jpc_enc_band_t *band, jpc_enc_cblk_t *cblk) {
jpc_enc_pass_t *pass;
jpc_enc_pass_t *endpasses;
int bitpos;
int n;
int adjust;
int ret;
int passtype;
int t;
jpc_bitstream_t *bout;
jpc_enc_pass_t *termpass;
jpc_enc_rlvl_t *rlvl;
int vcausal;
int segsym;
int termmode;
int c;
bout = 0;
rlvl = band->rlvl;
cblk->stream = jas_stream_memopen(0, 0);
assert(cblk->stream);
cblk->mqenc = jpc_mqenc_create(JPC_NUMCTXS, cblk->stream);
assert(cblk->mqenc);
jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs);
cblk->numpasses = (cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0;
cblk->passes = 0;
endpasses = &cblk->passes[cblk->numpasses];
cblk->flags = jas_matrix_create(jas_matrix_numrows(cblk->data) + 2, 	  jas_matrix_numcols(cblk->data) + 2);
assert(cblk->flags);
bitpos = cblk->numbps - 1;
pass = cblk->passes;
n = cblk->numpasses;
n = 0;
endpasses = &cblk->passes[cblk->numpasses];
return 0;
=======================
