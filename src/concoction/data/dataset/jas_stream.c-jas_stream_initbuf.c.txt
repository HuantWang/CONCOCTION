-----label-----
0
-----code-----
static void jas_stream_initbuf(jas_stream_t *stream, int bufmode, char *buf,
  int bufsize)
{
	/* If this function is being called, the buffer should not have been
	  initialized yet. */
	assert(!stream->bufbase_);

	if (bufmode != JAS_STREAM_UNBUF) {
		/* The full- or line-buffered mode is being employed. */
		if (!buf) {
			/* The caller has not specified a buffer to employ, so allocate
			  one. */
			if ((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +
			  JAS_STREAM_MAXPUTBACK))) {
				stream->bufmode_ |= JAS_STREAM_FREEBUF;
				stream->bufsize_ = JAS_STREAM_BUFSIZE;
			} else {
				/* The buffer allocation has failed.  Resort to unbuffered
				  operation. */
				stream->bufbase_ = stream->tinybuf_;
				stream->bufsize_ = 1;
			}
		} else {
			/* The caller has specified a buffer to employ. */
			/* The buffer must be large enough to accommodate maximum
			  putback. */
			assert(bufsize > JAS_STREAM_MAXPUTBACK);
			stream->bufbase_ = JAS_CAST(uchar *, buf);
			stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK;
		}
	} else {
		/* The unbuffered mode is being employed. */
		/* A buffer should not have been supplied by the caller. */
		assert(!buf);
		/* Use a trivial one-character buffer. */
		stream->bufbase_ = stream->tinybuf_;
		stream->bufsize_ = 1;
	}
	stream->bufstart_ = &stream->bufbase_[JAS_STREAM_MAXPUTBACK];
	stream->ptr_ = stream->bufstart_;
	stream->cnt_ = 0;
	stream->bufmode_ |= bufmode & JAS_STREAM_BUFMODEMASK;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
17,19
20,21
20,22
22,23
24,25
24,26
24,27
24,28
24,29
24,30
25,26
26,27
26,28
27,28
29,30
30,31
30,32
31,32
34,35
34,36
34,37
35,36
35,37
36,37
38,39
40,41
41,42
41,43
41,44
42,43
43,44
45,46
46,47
46,48
46,49
47,48
48,49
48,50
49,50
49,51
50,51
53,54
53,55
54,55
56,57
56,58
57,58
59,60
61,62
61,63
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
71,72
71,73
72,73
72,74
73,74
76,77
78,79
78,80
79,80
80,81
80,82
81,82
81,83
82,83
85,86
85,87
86,87
89,90
90,91
90,92
91,92
91,93
92,93
96,97
96,98
96,99
97,98
98,99
98,100
99,100
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
118,121
119,120
120,121
120,122
121,122
123,124
124,125
126,127
127,128
127,129
128,129
128,130
129,130
132,133
132,134
133,134
136,137
137,138
137,139
138,139
138,140
139,140
143,144
144,145
144,146
145,146
145,147
146,147
149,150
150,151
150,152
151,152
151,153
152,153
155,156
157,158
158,159
158,160
159,160
159,161
160,161
163,164
163,165
164,165
167,168
168,169
168,170
169,170
169,171
170,171
174,175
175,176
175,177
176,177
176,178
177,178
180,181
180,182
181,182
183,184
-----nextToken-----
2,4,7,9,10,12,14,16,18,19,21,23,28,32,33,37,39,44,51,52,55,58,60,66,67,69,74,75,77,83,84,87,88,93,94,95,100,103,105,111,112,115,117,122,125,130,131,134,135,140,141,142,147,148,153,154,156,161,162,165,166,171,172,173,178,179,182,184
-----computeFrom-----
35,36
35,37
48,49
48,50
56,57
56,58
63,64
63,65
71,72
71,73
80,81
80,82
90,91
90,92
101,102
101,103
108,109
108,110
113,114
113,115
127,128
127,129
137,138
137,139
144,145
144,146
158,159
158,160
168,169
168,170
175,176
175,177
180,181
180,182
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void jas_stream_initbuf(jas_stream_t *stream, int bufmode, char *buf,  int bufsize){	/* If this function is being called, the buffer should not have been	  initialized yet. */	assert(!stream->bufbase_);	if (bufmode != JAS_STREAM_UNBUF) {		/* The full- or line-buffered mode is being employed. */		if (!buf) {			/* The caller has not specified a buffer to employ, so allocate			  one. */			if ((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +			  JAS_STREAM_MAXPUTBACK))) {				stream->bufmode_ |= JAS_STREAM_FREEBUF;				stream->bufsize_ = JAS_STREAM_BUFSIZE;			} else {				/* The buffer allocation has failed.  Resort to unbuffered				  operation. */				stream->bufbase_ = stream->tinybuf_;				stream->bufsize_ = 1;			}		} else {			/* The caller has specified a buffer to employ. */			/* The buffer must be large enough to accommodate maximum			  putback. */			assert(bufsize > JAS_STREAM_MAXPUTBACK);			stream->bufbase_ = JAS_CAST(uchar *, buf);			stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK;		}	} else {		/* The unbuffered mode is being employed. */		/* A buffer should not have been supplied by the caller. */		assert(!buf);		/* Use a trivial one-character buffer. */		stream->bufbase_ = stream->tinybuf_;		stream->bufsize_ = 1;	}	stream->bufstart_ = &stream->bufbase_[JAS_STREAM_MAXPUTBACK];	stream->ptr_ = stream->bufstart_;	stream->cnt_ = 0;	stream->bufmode_ |= bufmode & JAS_STREAM_BUFMODEMASK;}
static void
jas_stream_initbuf(jas_stream_t *stream, int bufmode, char *buf,  int bufsize)
jas_stream_initbuf
jas_stream_t *stream
jas_stream_t
jas_stream_t
*stream
*
stream
int bufmode
int
bufmode
bufmode
char *buf
char
*buf
*
buf
int bufsize
int
bufsize
bufsize
{	/* If this function is being called, the buffer should not have been	  initialized yet. */	assert(!stream->bufbase_);	if (bufmode != JAS_STREAM_UNBUF) {		/* The full- or line-buffered mode is being employed. */		if (!buf) {			/* The caller has not specified a buffer to employ, so allocate			  one. */			if ((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +			  JAS_STREAM_MAXPUTBACK))) {				stream->bufmode_ |= JAS_STREAM_FREEBUF;				stream->bufsize_ = JAS_STREAM_BUFSIZE;			} else {				/* The buffer allocation has failed.  Resort to unbuffered				  operation. */				stream->bufbase_ = stream->tinybuf_;				stream->bufsize_ = 1;			}		} else {			/* The caller has specified a buffer to employ. */			/* The buffer must be large enough to accommodate maximum			  putback. */			assert(bufsize > JAS_STREAM_MAXPUTBACK);			stream->bufbase_ = JAS_CAST(uchar *, buf);			stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK;		}	} else {		/* The unbuffered mode is being employed. */		/* A buffer should not have been supplied by the caller. */		assert(!buf);		/* Use a trivial one-character buffer. */		stream->bufbase_ = stream->tinybuf_;		stream->bufsize_ = 1;	}	stream->bufstart_ = &stream->bufbase_[JAS_STREAM_MAXPUTBACK];	stream->ptr_ = stream->bufstart_;	stream->cnt_ = 0;	stream->bufmode_ |= bufmode & JAS_STREAM_BUFMODEMASK;}
assert(!stream->bufbase_);
assert(!stream->bufbase_)
assert
assert
!stream->bufbase_
stream->bufbase_
stream
stream
bufbase_
if (bufmode != JAS_STREAM_UNBUF) {		/* The full- or line-buffered mode is being employed. */		if (!buf) {			/* The caller has not specified a buffer to employ, so allocate			  one. */			if ((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +			  JAS_STREAM_MAXPUTBACK))) {				stream->bufmode_ |= JAS_STREAM_FREEBUF;				stream->bufsize_ = JAS_STREAM_BUFSIZE;			} else {				/* The buffer allocation has failed.  Resort to unbuffered				  operation. */				stream->bufbase_ = stream->tinybuf_;				stream->bufsize_ = 1;			}		} else {			/* The caller has specified a buffer to employ. */			/* The buffer must be large enough to accommodate maximum			  putback. */			assert(bufsize > JAS_STREAM_MAXPUTBACK);			stream->bufbase_ = JAS_CAST(uchar *, buf);			stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK;		}	} else {		/* The unbuffered mode is being employed. */		/* A buffer should not have been supplied by the caller. */		assert(!buf);		/* Use a trivial one-character buffer. */		stream->bufbase_ = stream->tinybuf_;		stream->bufsize_ = 1;	}
bufmode != JAS_STREAM_UNBUF
bufmode
bufmode
JAS_STREAM_UNBUF
JAS_STREAM_UNBUF
{		/* The full- or line-buffered mode is being employed. */		if (!buf) {			/* The caller has not specified a buffer to employ, so allocate			  one. */			if ((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +			  JAS_STREAM_MAXPUTBACK))) {				stream->bufmode_ |= JAS_STREAM_FREEBUF;				stream->bufsize_ = JAS_STREAM_BUFSIZE;			} else {				/* The buffer allocation has failed.  Resort to unbuffered				  operation. */				stream->bufbase_ = stream->tinybuf_;				stream->bufsize_ = 1;			}		} else {			/* The caller has specified a buffer to employ. */			/* The buffer must be large enough to accommodate maximum			  putback. */			assert(bufsize > JAS_STREAM_MAXPUTBACK);			stream->bufbase_ = JAS_CAST(uchar *, buf);			stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK;		}	}
if (!buf) {			/* The caller has not specified a buffer to employ, so allocate			  one. */			if ((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +			  JAS_STREAM_MAXPUTBACK))) {				stream->bufmode_ |= JAS_STREAM_FREEBUF;				stream->bufsize_ = JAS_STREAM_BUFSIZE;			} else {				/* The buffer allocation has failed.  Resort to unbuffered				  operation. */				stream->bufbase_ = stream->tinybuf_;				stream->bufsize_ = 1;			}		} else {			/* The caller has specified a buffer to employ. */			/* The buffer must be large enough to accommodate maximum			  putback. */			assert(bufsize > JAS_STREAM_MAXPUTBACK);			stream->bufbase_ = JAS_CAST(uchar *, buf);			stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK;		}
!buf
buf
buf
{			/* The caller has not specified a buffer to employ, so allocate			  one. */			if ((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +			  JAS_STREAM_MAXPUTBACK))) {				stream->bufmode_ |= JAS_STREAM_FREEBUF;				stream->bufsize_ = JAS_STREAM_BUFSIZE;			} else {				/* The buffer allocation has failed.  Resort to unbuffered				  operation. */				stream->bufbase_ = stream->tinybuf_;				stream->bufsize_ = 1;			}		}
if ((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +			  JAS_STREAM_MAXPUTBACK))) {				stream->bufmode_ |= JAS_STREAM_FREEBUF;				stream->bufsize_ = JAS_STREAM_BUFSIZE;			} else {				/* The buffer allocation has failed.  Resort to unbuffered				  operation. */				stream->bufbase_ = stream->tinybuf_;				stream->bufsize_ = 1;			}
(stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +			  JAS_STREAM_MAXPUTBACK))
stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +			  JAS_STREAM_MAXPUTBACK)
stream->bufbase_
stream
stream
bufbase_
jas_malloc(JAS_STREAM_BUFSIZE +			  JAS_STREAM_MAXPUTBACK)
jas_malloc
jas_malloc
JAS_STREAM_BUFSIZE +			  JAS_STREAM_MAXPUTBACK
JAS_STREAM_BUFSIZE
JAS_STREAM_BUFSIZE
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
{				stream->bufmode_ |= JAS_STREAM_FREEBUF;				stream->bufsize_ = JAS_STREAM_BUFSIZE;			}
stream->bufmode_ |= JAS_STREAM_FREEBUF;
stream->bufmode_ |= JAS_STREAM_FREEBUF
stream->bufmode_
stream
stream
bufmode_
JAS_STREAM_FREEBUF
JAS_STREAM_FREEBUF
stream->bufsize_ = JAS_STREAM_BUFSIZE;
stream->bufsize_ = JAS_STREAM_BUFSIZE
stream->bufsize_
stream
stream
bufsize_
JAS_STREAM_BUFSIZE
JAS_STREAM_BUFSIZE
{				/* The buffer allocation has failed.  Resort to unbuffered				  operation. */				stream->bufbase_ = stream->tinybuf_;				stream->bufsize_ = 1;			}
stream->bufbase_ = stream->tinybuf_;
stream->bufbase_ = stream->tinybuf_
stream->bufbase_
stream
stream
bufbase_
stream->tinybuf_
stream
stream
tinybuf_
stream->bufsize_ = 1;
stream->bufsize_ = 1
stream->bufsize_
stream
stream
bufsize_
1
{			/* The caller has specified a buffer to employ. */			/* The buffer must be large enough to accommodate maximum			  putback. */			assert(bufsize > JAS_STREAM_MAXPUTBACK);			stream->bufbase_ = JAS_CAST(uchar *, buf);			stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK;		}
assert(bufsize > JAS_STREAM_MAXPUTBACK);
assert(bufsize > JAS_STREAM_MAXPUTBACK)
assert
assert
bufsize > JAS_STREAM_MAXPUTBACK
bufsize
bufsize
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
stream->bufbase_ = JAS_CAST(uchar *, buf);
stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK;
stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK
stream->bufsize_
stream
stream
bufsize_
bufsize - JAS_STREAM_MAXPUTBACK
bufsize
bufsize
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
{		/* The unbuffered mode is being employed. */		/* A buffer should not have been supplied by the caller. */		assert(!buf);		/* Use a trivial one-character buffer. */		stream->bufbase_ = stream->tinybuf_;		stream->bufsize_ = 1;	}
assert(!buf);
assert(!buf)
assert
assert
!buf
buf
buf
stream->bufbase_ = stream->tinybuf_;
stream->bufbase_ = stream->tinybuf_
stream->bufbase_
stream
stream
bufbase_
stream->tinybuf_
stream
stream
tinybuf_
stream->bufsize_ = 1;
stream->bufsize_ = 1
stream->bufsize_
stream
stream
bufsize_
1
stream->bufstart_ = &stream->bufbase_[JAS_STREAM_MAXPUTBACK];
stream->bufstart_ = &stream->bufbase_[JAS_STREAM_MAXPUTBACK]
stream->bufstart_
stream
stream
bufstart_
&stream->bufbase_[JAS_STREAM_MAXPUTBACK]
stream->bufbase_[JAS_STREAM_MAXPUTBACK]
stream->bufbase_
stream
stream
bufbase_
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
stream->ptr_ = stream->bufstart_;
stream->ptr_ = stream->bufstart_
stream->ptr_
stream
stream
ptr_
stream->bufstart_
stream
stream
bufstart_
stream->cnt_ = 0;
stream->cnt_ = 0
stream->cnt_
stream
stream
cnt_
0
stream->bufmode_ |= bufmode & JAS_STREAM_BUFMODEMASK;
stream->bufmode_ |= bufmode & JAS_STREAM_BUFMODEMASK
stream->bufmode_
stream
stream
bufmode_
bufmode & JAS_STREAM_BUFMODEMASK
bufmode
bufmode
JAS_STREAM_BUFMODEMASK
JAS_STREAM_BUFMODEMASK
-----joern-----
(10,94,0)
(3,40,0)
(13,130,0)
(120,60,0)
(72,144,0)
(125,103,0)
(5,73,0)
(71,65,0)
(6,0,0)
(111,104,0)
(83,52,0)
(32,42,0)
(30,103,0)
(145,18,0)
(68,29,0)
(21,30,0)
(134,41,0)
(11,144,0)
(68,104,0)
(114,18,0)
(98,91,0)
(93,129,0)
(18,109,0)
(38,85,0)
(8,130,0)
(131,25,0)
(96,101,0)
(25,103,0)
(105,146,0)
(2,145,0)
(121,108,0)
(23,48,0)
(5,102,0)
(81,103,0)
(76,93,0)
(31,63,0)
(121,24,0)
(123,68,0)
(14,73,0)
(135,94,0)
(69,4,0)
(15,63,0)
(150,12,0)
(119,66,0)
(40,101,0)
(33,85,0)
(18,140,0)
(136,23,0)
(58,60,0)
(86,87,0)
(97,47,0)
(121,11,0)
(63,109,0)
(98,33,0)
(69,142,0)
(104,109,0)
(49,60,0)
(116,101,0)
(145,103,0)
(104,68,0)
(34,11,0)
(114,0,0)
(35,5,0)
(121,38,0)
(42,130,0)
(98,114,0)
(4,113,0)
(118,81,0)
(0,78,0)
(54,5,0)
(55,87,0)
(105,103,0)
(60,101,0)
(59,103,0)
(73,88,0)
(12,130,0)
(105,4,0)
(61,48,0)
(108,22,0)
(52,78,0)
(92,38,0)
(1,129,0)
(16,45,0)
(56,104,0)
(60,130,0)
(149,101,0)
(137,110,0)
(85,33,0)
(121,145,0)
(81,57,0)
(110,103,0)
(121,25,0)
(9,145,0)
(148,91,0)
(48,80,0)
(110,4,0)
(73,130,0)
(103,59,0)
(41,52,0)
(143,97,0)
(50,30,0)
(35,97,0)
(20,130,0)
(122,107,0)
(27,25,0)
(33,98,0)
(94,135,0)
(45,65,0)
(121,110,0)
(69,29,0)
(149,30,0)
(5,12,0)
(85,36,0)
(66,130,0)
(127,101,0)
(8,149,0)
(17,81,0)
(35,66,0)
(121,41,0)
(124,69,0)
(19,65,0)
(105,85,0)
(66,101,0)
(84,125,0)
(112,101,0)
(121,93,0)
(77,23,0)
(53,125,0)
(135,103,0)
(114,103,0)
(57,74,0)
(7,108,0)
(142,69,0)
(95,114,0)
(147,114,0)
(107,130,0)
(132,103,0)
(39,11,0)
(91,98,0)
(89,57,0)
(108,103,0)
(28,41,0)
(139,60,0)
(121,73,0)
(90,105,0)
(30,149,0)
(45,116,0)
(107,102,0)
(51,101,0)
(105,144,0)
(144,101,0)
(114,98,0)
(126,127,0)
(130,20,0)
(146,105,0)
(38,103,0)
(99,8,0)
(121,87,0)
(87,103,0)
(125,127,0)
(44,105,0)
(64,22,0)
(82,121,0)
(130,13,0)
(79,101,0)
(65,45,0)
(115,88,0)
(35,121,0)
(117,101,0)
(23,103,0)
(62,130,0)
(4,69,0)
(133,93,0)
(67,101,0)
(141,18,0)
(70,115,0)
(93,103,0)
(37,101,0)
(11,103,0)
(22,140,0)
(88,101,0)
(100,38,0)
(87,40,0)
(41,103,0)
(26,12,0)
(138,8,0)
(30,21,0)
(25,0,0)
(116,45,0)
(43,101,0)
(129,36,0)
(12,116,0)
(48,109,0)
(121,8,0)
(42,24,0)
(103,135,0)
(106,110,0)
(121,12,0)
(128,108,0)
(88,115,0)
(46,73,0)
(17,68,1)
(149,30,1)
(131,63,1)
(28,0,1)
(52,83,1)
(18,109,1)
(108,103,1)
(99,138,1)
(89,81,1)
(54,107,1)
(125,103,1)
(115,70,1)
(53,57,1)
(121,87,1)
(68,29,1)
(83,41,1)
(35,121,1)
(88,115,1)
(10,132,1)
(132,88,1)
(111,56,1)
(147,95,1)
(76,85,1)
(31,15,1)
(30,21,1)
(25,27,1)
(121,108,1)
(41,103,1)
(121,93,1)
(86,55,1)
(118,17,1)
(12,26,1)
(27,131,1)
(123,104,1)
(93,103,1)
(20,62,1)
(35,66,1)
(14,46,1)
(30,50,1)
(38,100,1)
(121,11,1)
(108,7,1)
(91,148,1)
(82,42,1)
(18,141,1)
(49,116,1)
(116,45,1)
(145,103,1)
(144,72,1)
(48,109,1)
(34,39,1)
(136,68,1)
(72,11,1)
(69,124,1)
(41,134,1)
(138,59,1)
(8,130,1)
(121,12,1)
(124,110,1)
(94,10,1)
(30,103,1)
(105,85,1)
(66,119,1)
(11,34,1)
(35,5,1)
(46,60,1)
(13,130,1)
(48,61,1)
(106,75,1)
(103,135,1)
(143,13,1)
(114,147,1)
(90,4,1)
(58,49,1)
(97,143,1)
(95,38,1)
(3,87,1)
(81,103,1)
(104,111,1)
(110,103,1)
(77,136,1)
(60,120,1)
(135,94,1)
(84,53,1)
(68,123,1)
(45,65,1)
(25,103,1)
(126,125,1)
(35,97,1)
(114,18,1)
(63,109,1)
(134,28,1)
(4,69,1)
(22,64,1)
(105,144,1)
(60,130,1)
(85,33,1)
(120,139,1)
(110,137,1)
(59,103,1)
(1,93,1)
(121,41,1)
(90,129,1)
(137,106,1)
(133,76,1)
(75,22,1)
(55,149,1)
(38,103,1)
(128,18,1)
(63,31,1)
(105,103,1)
(56,146,1)
(130,20,1)
(148,114,1)
(121,110,1)
(33,98,1)
(50,8,1)
(127,126,1)
(7,128,1)
(69,29,1)
(42,130,1)
(119,127,1)
(81,118,1)
(57,89,1)
(150,13,1)
(105,4,1)
(87,86,1)
(121,25,1)
(141,145,1)
(121,145,1)
(23,103,1)
(100,92,1)
(32,146,1)
(8,99,1)
(121,82,1)
(104,109,1)
(73,14,1)
(98,114,1)
(65,71,1)
(0,6,1)
(93,133,1)
(129,1,1)
(12,130,1)
(92,75,1)
(66,130,1)
(114,0,1)
(69,142,1)
(75,52,1)
(71,19,1)
(40,3,1)
(39,40,1)
(105,44,1)
(139,58,1)
(146,105,1)
(9,2,1)
(122,59,1)
(53,48,1)
(107,130,1)
(61,23,1)
(5,12,1)
(5,73,1)
(64,108,1)
(70,73,1)
(114,103,1)
(87,103,1)
(19,16,1)
(145,9,1)
(15,144,1)
(26,150,1)
(125,84,1)
(121,38,1)
(68,104,1)
(121,8,1)
(107,122,1)
(98,91,1)
(16,12,1)
(23,77,1)
(121,73,1)
(6,25,1)
(73,130,1)
(5,54,1)
(42,32,1)
(44,90,1)
(2,63,1)
(11,103,1)
(60,13,2)
(3,59,2)
(116,45,2)
(28,63,2)
(15,59,2)
(33,75,2)
(108,103,2)
(26,13,2)
(70,13,2)
(130,20,2)
(40,59,2)
(35,97,2)
(45,13,2)
(56,146,2)
(42,146,2)
(5,12,2)
(5,59,2)
(30,103,2)
(105,144,2)
(81,103,2)
(12,130,2)
(53,146,2)
(150,13,2)
(123,104,2)
(87,59,2)
(76,75,2)
(69,142,2)
(12,13,2)
(121,87,2)
(63,59,2)
(87,103,2)
(133,75,2)
(114,18,2)
(59,103,2)
(41,103,2)
(124,75,2)
(146,59,2)
(104,146,2)
(35,121,2)
(8,59,2)
(121,25,2)
(99,59,2)
(81,68,2)
(55,59,2)
(5,73,2)
(38,75,2)
(135,13,2)
(61,68,2)
(63,109,2)
(13,130,2)
(145,103,2)
(41,63,2)
(23,103,2)
(66,146,2)
(120,13,2)
(147,75,2)
(121,41,2)
(149,30,2)
(97,13,2)
(77,68,2)
(148,75,2)
(106,75,2)
(85,33,2)
(68,146,2)
(125,103,2)
(135,94,2)
(46,13,2)
(110,103,2)
(38,103,2)
(68,29,2)
(54,59,2)
(121,8,2)
(0,63,2)
(105,4,2)
(121,146,2)
(57,68,2)
(66,130,2)
(93,103,2)
(103,135,2)
(48,68,2)
(59,13,2)
(14,13,2)
(105,59,2)
(19,13,2)
(105,85,2)
(90,59,2)
(91,75,2)
(107,130,2)
(89,68,2)
(25,63,2)
(115,13,2)
(8,130,2)
(18,63,2)
(84,146,2)
(30,21,2)
(127,146,2)
(9,63,2)
(88,13,2)
(104,109,2)
(49,13,2)
(98,75,2)
(17,68,2)
(132,13,2)
(4,69,2)
(143,13,2)
(18,109,2)
(136,68,2)
(103,13,2)
(25,103,2)
(4,75,2)
(128,63,2)
(11,103,2)
(129,75,2)
(114,103,2)
(58,13,2)
(92,75,2)
(149,59,2)
(98,114,2)
(23,68,2)
(137,75,2)
(111,146,2)
(72,59,2)
(65,13,2)
(119,146,2)
(139,13,2)
(105,103,2)
(114,0,2)
(31,59,2)
(114,75,2)
(116,13,2)
(86,59,2)
(95,75,2)
(68,104,2)
(145,63,2)
(42,130,2)
(82,146,2)
(83,63,2)
(118,68,2)
(141,63,2)
(27,63,2)
(35,66,2)
(122,59,2)
(88,115,2)
(125,146,2)
(134,63,2)
(32,146,2)
(64,63,2)
(93,75,2)
(131,63,2)
(121,11,2)
(16,13,2)
(121,145,2)
(22,63,2)
(34,59,2)
(121,110,2)
(1,75,2)
(11,59,2)
(44,59,2)
(100,75,2)
(30,59,2)
(33,98,2)
(144,59,2)
(121,73,2)
(73,130,2)
(138,59,2)
(69,75,2)
(121,12,2)
(126,146,2)
(71,13,2)
(75,59,2)
(50,59,2)
(52,63,2)
(108,63,2)
(121,93,2)
(10,13,2)
(48,109,2)
(94,13,2)
(45,65,2)
(98,91,2)
(85,75,2)
(60,130,2)
(121,108,2)
(7,63,2)
(39,59,2)
(110,75,2)
(69,29,2)
(107,59,2)
(146,105,2)
(2,63,2)
(6,63,2)
(73,13,2)
(35,5,2)
(121,38,2)
-----------------------------------
(0,obj->bufsize_ = 1024)
(1,1)
(2,obj)
(3,0)
(4,obj->buf_ = (unsigned char *)
(5,return 0;)
(6,1024)
(7,growable_)
(8,stream->obj_)
(9,bufsize_)
(10,jas_stream_memobj_t)
(11,obj->buf_)
(12,stream->openmode_)
(13,!(stream = jas_stream_create()
(14,ops_)
(15,bufsize)
(16,JAS_STREAM_READ)
(17,obj)
(18,obj->bufsize_ = bufsize)
(19,JAS_STREAM_WRITE)
(20,jas_stream_create()
(21,void *)
(22,obj->growable_ = 0)
(23,obj->len_)
(24,)
(25,obj->bufsize_)
(26,openmode_)
(27,bufsize_)
(28,obj)
(29,char *buf)
(30,(void *)
(31,0)
(32,stream)
(33,jas_malloc(obj->bufsize_ * sizeof(char)
(34,buf_)
(35,RET)
(36,)
(37,if (bufsize <= 0)
(38,obj->buf_)
(39,obj)
(40,obj->myalloc_ = 0)
(41,obj->growable_)
(42,jas_stream_close(stream)
(43,if (!(stream = jas_stream_create()
(44,buf_)
(45,JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY)
(46,stream)
(47,)
(48,obj->len_ = bufsize)
(49,stream)
(50,obj)
(51,obj)
(52,obj->growable_ = 1)
(53,obj)
(54,0)
(55,obj)
(56,bufsize)
(57,obj->len_ = 0)
(58,JAS_STREAM_FULLBUF)
(59,!(obj = jas_malloc(sizeof(jas_stream_memobj_t)
(60,jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0)
(61,bufsize)
(62,stream)
(63,bufsize <= 0)
(64,0)
(65,JAS_STREAM_WRITE | JAS_STREAM_BINARY)
(66,return stream;)
(67,stream)
(68,bufsize > 0 && buf)
(69,(unsigned char *)
(70,jas_stream_memops)
(71,JAS_STREAM_BINARY)
(72,0)
(73,stream->ops_)
(74,)
(75,buf)
(76,obj)
(77,len_)
(78,)
(79,if (bufsize > 0 && buf)
(80,)
(81,obj->len_)
(82,0)
(83,1)
(84,pos_)
(85,obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char)
(86,myalloc_)
(87,obj->myalloc_)
(88,stream->ops_ = &jas_stream_memops)
(89,0)
(90,obj)
(91,sizeof(char)
(92,obj)
(93,obj->myalloc_)
(94,sizeof(jas_stream_memobj_t)
(95,obj)
(96,if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)
(97,return 0;)
(98,obj->bufsize_ * sizeof(char)
(99,obj_)
(100,buf_)
(101,)
(102,)
(103,obj = jas_malloc(sizeof(jas_stream_memobj_t)
(104,bufsize > 0)
(105,obj->buf_)
(106,obj)
(107,jas_stream_destroy(stream)
(108,obj->growable_)
(109,int bufsize)
(110,obj->buf_)
(111,0)
(112,if (buf)
(113,)
(114,obj->bufsize_)
(115,&jas_stream_memops)
(116,stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY)
(117,if (!obj->buf_)
(118,len_)
(119,stream)
(120,0)
(121,return 0;)
(122,stream)
(123,buf)
(124,buf)
(125,obj->pos_)
(126,0)
(127,obj->pos_ = 0)
(128,obj)
(129,obj->myalloc_ = 1)
(130,stream = jas_stream_create()
(131,obj)
(132,obj)
(133,myalloc_)
(134,growable_)
(135,jas_malloc(sizeof(jas_stream_memobj_t)
(136,obj)
(137,buf_)
(138,stream)
(139,0)
(140,)
(141,bufsize)
(142,unsigned char *)
(143,0)
(144,obj->buf_ = 0)
(145,obj->bufsize_)
(146,!obj->buf_)
(147,bufsize_)
(148,char)
(149,stream->obj_ = (void *)
(150,stream)
-----cfg-----
(7,17)
(13,19)
(14,13)
(15,14)
(17,15)
(19,24)
(19,78)
(24,31)
(24,64)
(28,40)
(28,52)
(29,33)
(31,29)
(32,28)
(33,32)
(37,45)
(38,37)
(40,38)
(42,95)
(43,42)
(45,43)
(49,59)
(50,55)
(52,50)
(53,49)
(55,53)
(56,95)
(57,56)
(59,57)
(63,67)
(64,63)
(67,71)
(68,95)
(69,72)
(71,69)
(72,68)
(77,83)
(78,77)
(80,90)
(81,86)
(83,81)
(84,80)
(86,84)
(87,95)
(88,87)
(90,88)
(92,105)
(93,100)
(95,93)
(96,92)
(97,96)
(98,97)
(100,98)
(102,112)
(103,108)
(105,103)
(106,102)
(108,106)
(109,117)
(110,109)
(112,110)
(114,121)
(115,118)
(117,115)
(118,114)
-----path-----
7,17,15,14,13,19,24,31,29,33,32,28,40,38,37,45,43,42,95,93,100,98,97,96,92,105,103,108,106,102,112,110,109,117,115,118,114,121
7,17,15,14,13,19,24,31,29,33,32,28,52,50,55,53,49,59,57,56,95,93,100,98,97,96,92,105,103,108,106,102,112,110,109,117,115,118,114,121
7,17,15,14,13,19,24,64,63,67,71,69,72,68,95,93,100,98,97,96,92,105,103,108,106,102,112,110,109,117,115,118,114,121
7,17,15,14,13,19,78,77,83,81,86,84,80,90,88,87,95,93,100,98,97,96,92,105,103,108,106,102,112,110,109,117,115,118,114,121
-----cfgNode-----
5,<global>
6,<empty>
7,void jas_stream_initbuf (jas_stream_t *stream,int bufmode,char *buf,int bufsize)
8,jas_stream_t *stream
9,int bufmode
10,char *buf
11,int bufsize
12,<empty>
13,assert(!stream->bufbase_)
14,!stream->bufbase_
15,stream->bufbase_
16,stream
17,bufbase_
18,if (bufmode != JAS_STREAM_UNBUF)
19,bufmode != JAS_STREAM_UNBUF
20,bufmode
21,JAS_STREAM_UNBUF
22,<empty>
23,if (!buf)
24,!buf
25,buf
26,<empty>
27,if ((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +
28,			  JAS_STREAM_MAXPUTBACK)))
29,stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +
30,			  JAS_STREAM_MAXPUTBACK)
31,stream->bufbase_
32,stream
33,bufbase_
34,jas_malloc(JAS_STREAM_BUFSIZE +
35,			  JAS_STREAM_MAXPUTBACK)
36,JAS_STREAM_BUFSIZE +
37,			  JAS_STREAM_MAXPUTBACK
38,JAS_STREAM_BUFSIZE
39,JAS_STREAM_MAXPUTBACK
40,<empty>
41,stream->bufmode_ |= JAS_STREAM_FREEBUF
42,stream->bufmode_
43,stream
44,bufmode_
45,JAS_STREAM_FREEBUF
46,stream->bufsize_ = JAS_STREAM_BUFSIZE
47,stream->bufsize_
48,stream
49,bufsize_
50,JAS_STREAM_BUFSIZE
51,else
52,<empty>
53,stream->bufbase_ = stream->tinybuf_
54,stream->bufbase_
55,stream
56,bufbase_
57,stream->tinybuf_
58,stream
59,tinybuf_
60,stream->bufsize_ = 1
61,stream->bufsize_
62,stream
63,bufsize_
64,1
65,else
66,<empty>
67,assert(bufsize > JAS_STREAM_MAXPUTBACK)
68,bufsize > JAS_STREAM_MAXPUTBACK
69,bufsize
70,JAS_STREAM_MAXPUTBACK
71,stream->bufbase_ = JAS_CAST(uchar *, buf);
72,stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK
73,stream->bufsize_
74,stream
75,bufsize_
76,bufsize - JAS_STREAM_MAXPUTBACK
77,bufsize
78,JAS_STREAM_MAXPUTBACK
79,else
80,<empty>
81,assert(!buf)
82,!buf
83,buf
84,stream->bufbase_ = stream->tinybuf_
85,stream->bufbase_
86,stream
87,bufbase_
88,stream->tinybuf_
89,stream
90,tinybuf_
91,stream->bufsize_ = 1
92,stream->bufsize_
93,stream
94,bufsize_
95,1
96,stream->bufstart_ = &stream->bufbase_[JAS_STREAM_MAXPUTBACK]
97,stream->bufstart_
98,stream
99,bufstart_
100,&stream->bufbase_[JAS_STREAM_MAXPUTBACK]
101,stream->bufbase_[JAS_STREAM_MAXPUTBACK]
102,stream->bufbase_
103,stream
104,bufbase_
105,JAS_STREAM_MAXPUTBACK
106,stream->ptr_ = stream->bufstart_
107,stream->ptr_
108,stream
109,ptr_
110,stream->bufstart_
111,stream
112,bufstart_
113,stream->cnt_ = 0
114,stream->cnt_
115,stream
116,cnt_
117,0
118,stream->bufmode_ |= bufmode & JAS_STREAM_BUFMODEMASK
119,stream->bufmode_
120,stream
121,bufmode_
122,bufmode & JAS_STREAM_BUFMODEMASK
123,bufmode
124,JAS_STREAM_BUFMODEMASK
125,RET
126,jas_stream_t *stream
127,int bufmode
128,char *buf
129,int bufsize
130,RET
131,void jas_stream_initbuf (jas_stream_t *stream,int bufmode,char *buf,int bufsize)
132,jas_stream_t *stream
133,int bufmode
134,char *buf
135,int bufsize
136,<empty>
137,assert(!stream->bufbase_)
138,!stream->bufbase_
139,stream->bufbase_
140,stream
141,bufbase_
142,if (bufmode != JAS_STREAM_UNBUF)
143,bufmode != JAS_STREAM_UNBUF
144,bufmode
145,JAS_STREAM_UNBUF
146,<empty>
147,if (!buf)
148,!buf
149,buf
150,<empty>
151,if ((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +
152,			  JAS_STREAM_MAXPUTBACK)))
153,stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE +
154,			  JAS_STREAM_MAXPUTBACK)
155,stream->bufbase_
156,stream
157,bufbase_
158,jas_malloc(JAS_STREAM_BUFSIZE +
159,			  JAS_STREAM_MAXPUTBACK)
160,JAS_STREAM_BUFSIZE +
161,			  JAS_STREAM_MAXPUTBACK
162,JAS_STREAM_BUFSIZE
163,JAS_STREAM_MAXPUTBACK
164,<empty>
165,stream->bufmode_ |= JAS_STREAM_FREEBUF
166,stream->bufmode_
167,stream
168,bufmode_
169,JAS_STREAM_FREEBUF
170,stream->bufsize_ = JAS_STREAM_BUFSIZE
171,stream->bufsize_
172,stream
173,bufsize_
174,JAS_STREAM_BUFSIZE
175,else
176,<empty>
177,stream->bufbase_ = stream->tinybuf_
178,stream->bufbase_
179,stream
180,bufbase_
181,stream->tinybuf_
182,stream
183,tinybuf_
184,stream->bufsize_ = 1
185,stream->bufsize_
186,stream
187,bufsize_
188,1
189,else
190,<empty>
191,assert(bufsize > JAS_STREAM_MAXPUTBACK)
192,bufsize > JAS_STREAM_MAXPUTBACK
193,bufsize
194,JAS_STREAM_MAXPUTBACK
195,stream->bufbase_ = JAS_CAST(uchar *, buf);
196,stream->bufsize_ = bufsize - JAS_STREAM_MAXPUTBACK
197,stream->bufsize_
198,stream
199,bufsize_
200,bufsize - JAS_STREAM_MAXPUTBACK
201,bufsize
202,JAS_STREAM_MAXPUTBACK
203,else
204,<empty>
205,assert(!buf)
206,!buf
207,buf
208,stream->bufbase_ = stream->tinybuf_
209,stream->bufbase_
210,stream
211,bufbase_
212,stream->tinybuf_
213,stream
214,tinybuf_
215,stream->bufsize_ = 1
216,stream->bufsize_
217,stream
218,bufsize_
219,1
220,stream->bufstart_ = &stream->bufbase_[JAS_STREAM_MAXPUTBACK]
221,stream->bufstart_
222,stream
223,bufstart_
224,&stream->bufbase_[JAS_STREAM_MAXPUTBACK]
225,stream->bufbase_[JAS_STREAM_MAXPUTBACK]
226,stream->bufbase_
227,stream
228,bufbase_
229,JAS_STREAM_MAXPUTBACK
230,stream->ptr_ = stream->bufstart_
231,stream->ptr_
232,stream
233,ptr_
234,stream->bufstart_
235,stream
236,bufstart_
237,stream->cnt_ = 0
238,stream->cnt_
239,stream
240,cnt_
241,0
242,stream->bufmode_ |= bufmode & JAS_STREAM_BUFMODEMASK
243,stream->bufmode_
244,stream
245,bufmode_
246,bufmode & JAS_STREAM_BUFMODEMASK
247,bufmode
248,JAS_STREAM_BUFMODEMASK
249,RET
250,jas_stream_t *stream
251,int bufmode
252,char *buf
253,int bufsize
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
static void jas_stream_initbuf(jas_stream_t *stream, int bufmode, char *buf,   int bufsize) {
assert(!stream->bufbase_);
if(bufmode != JAS_STREAM_UNBUF)
if(!buf)
if((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE + 			  JAS_STREAM_MAXPUTBACK)))
stream->bufmode_ |= JAS_STREAM_FREEBUF;
stream->bufsize_ = JAS_STREAM_BUFSIZE;
stream->bufstart_ = &stream->bufbase_[JAS_STREAM_MAXPUTBACK];
stream->ptr_ = stream->bufstart_;
stream->cnt_ = 0;
stream->bufmode_ |= bufmode & JAS_STREAM_BUFMODEMASK;
=======================
