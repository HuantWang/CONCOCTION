-----label-----
0
-----code-----
jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,
  int clrspc)
{
	jas_image_t *image;
	uint_fast32_t rawsize;
	uint_fast32_t inmem;
	int cmptno;
	jas_image_cmptparm_t *cmptparm;

	if (!(image = jas_image_create0())) {
		return 0;
	}

	image->clrspc_ = clrspc;
	image->maxcmpts_ = numcmpts;
	image->inmem_ = true;

	/* Allocate memory for the per-component information. */
	if (!(image->cmpts_ = jas_malloc(image->maxcmpts_ *
	  sizeof(jas_image_cmpt_t *)))) {
		jas_image_destroy(image);
		return 0;
	}
	/* Initialize in case of failure. */
	for (cmptno = 0; cmptno < image->maxcmpts_; ++cmptno) {
		image->cmpts_[cmptno] = 0;
	}

	/* Compute the approximate raw size of the image. */
	rawsize = 0;
	for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,
	  ++cmptparm) {
		rawsize += cmptparm->width * cmptparm->height *
		  (cmptparm->prec + 7) / 8;
	}
	/* Decide whether to buffer the image data in memory, based on the
	  raw size of the image. */
	inmem = (rawsize < JAS_IMAGE_INMEMTHRESH);

	/* Create the individual image components. */
	for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,
	  ++cmptparm) {
		if (!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,
		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,
		  cmptparm->width, cmptparm->height, cmptparm->prec,
		  cmptparm->sgnd, inmem))) {
			jas_image_destroy(image);
			return 0;
		}
		++image->numcmpts_;
	}

	/* Determine the bounding box for all of the components on the
	  reference grid (i.e., the image area) */
	jas_image_setbbox(image);

	return image;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
7,8
7,9
9,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
21,38
22,23
23,24
23,25
24,25
26,27
26,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
53,54
53,55
54,55
55,56
56,57
56,58
57,58
59,60
60,61
62,63
63,64
65,66
66,67
66,68
67,68
67,69
68,69
71,72
73,74
74,75
74,76
75,76
75,77
76,77
79,80
81,82
82,83
82,84
83,84
83,85
84,85
88,89
88,90
89,90
90,91
91,92
91,93
92,93
92,94
93,94
96,97
96,98
97,98
99,100
99,101
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
110,111
110,112
111,112
112,113
112,114
113,114
115,116
117,118
119,120
119,121
119,122
119,123
120,121
121,122
121,123
122,123
125,126
125,127
126,127
128,129
128,130
129,130
132,133
133,134
135,136
136,137
137,138
137,139
138,139
138,140
139,140
139,141
140,141
143,144
146,147
147,148
147,149
148,149
151,152
151,153
151,154
151,155
152,153
153,154
153,155
154,155
154,156
155,156
158,159
158,160
159,160
161,162
163,164
163,165
164,165
166,167
168,169
168,170
169,170
170,171
172,173
173,174
175,176
176,177
177,178
177,179
178,179
180,181
180,182
181,182
181,183
182,183
182,184
183,184
183,185
184,185
187,188
187,189
188,189
191,192
192,193
192,194
193,194
193,195
194,195
199,200
200,201
200,202
201,202
203,204
204,205
204,206
205,206
207,208
209,210
209,211
209,212
209,213
210,211
211,212
211,213
212,213
212,214
213,214
216,217
216,218
217,218
219,220
221,222
221,223
222,223
224,225
226,227
226,228
227,228
228,229
230,231
231,232
233,234
233,235
234,235
234,236
235,236
236,237
237,238
237,239
238,239
238,240
239,240
239,241
240,241
243,244
245,246
245,247
245,248
245,249
245,250
245,251
245,252
245,253
245,254
245,255
246,247
248,249
248,250
249,250
252,253
252,254
253,254
256,257
256,258
257,258
260,261
260,262
261,262
264,265
264,266
265,266
268,269
268,270
269,270
272,273
272,274
273,274
276,277
276,278
277,278
280,281
282,283
282,284
283,284
284,285
284,286
285,286
287,288
289,290
291,292
292,293
293,294
293,295
294,295
297,298
298,299
298,300
299,300
301,302
303,304
304,305
-----nextToken-----
3,5,6,8,10,13,15,16,18,20,25,27,28,32,34,38,40,43,45,49,51,52,58,61,64,69,70,72,77,78,80,85,86,87,94,95,98,102,103,107,109,114,116,118,123,124,127,130,131,134,141,142,144,145,149,150,156,157,160,162,165,167,171,174,179,185,186,189,190,195,196,197,198,202,206,208,214,215,218,220,223,225,229,232,241,242,244,247,250,251,254,255,258,259,262,263,266,267,270,271,274,275,278,279,281,286,288,290,295,296,300,302,305
-----computeFrom-----
56,57
56,58
66,67
66,68
74,75
74,76
82,83
82,84
91,92
91,93
99,100
99,101
121,122
121,123
125,126
125,127
137,138
137,139
147,148
147,149
154,155
154,156
158,159
158,160
163,164
163,165
177,178
177,179
180,181
180,182
181,182
181,183
182,183
182,184
192,193
192,194
200,201
200,202
204,205
204,206
212,213
212,214
216,217
216,218
221,222
221,223
237,238
237,239
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,  int clrspc){	jas_image_t *image;	uint_fast32_t rawsize;	uint_fast32_t inmem;	int cmptno;	jas_image_cmptparm_t *cmptparm;	if (!(image = jas_image_create0())) {		return 0;	}	image->clrspc_ = clrspc;	image->maxcmpts_ = numcmpts;	image->inmem_ = true;	/* Allocate memory for the per-component information. */	if (!(image->cmpts_ = jas_malloc(image->maxcmpts_ *	  sizeof(jas_image_cmpt_t *)))) {		jas_image_destroy(image);		return 0;	}	/* Initialize in case of failure. */	for (cmptno = 0; cmptno < image->maxcmpts_; ++cmptno) {		image->cmpts_[cmptno] = 0;	}	/* Compute the approximate raw size of the image. */	rawsize = 0;	for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,	  ++cmptparm) {		rawsize += cmptparm->width * cmptparm->height *		  (cmptparm->prec + 7) / 8;	}	/* Decide whether to buffer the image data in memory, based on the	  raw size of the image. */	inmem = (rawsize < JAS_IMAGE_INMEMTHRESH);	/* Create the individual image components. */	for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,	  ++cmptparm) {		if (!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,		  cmptparm->width, cmptparm->height, cmptparm->prec,		  cmptparm->sgnd, inmem))) {			jas_image_destroy(image);			return 0;		}		++image->numcmpts_;	}	/* Determine the bounding box for all of the components on the	  reference grid (i.e., the image area) */	jas_image_setbbox(image);	return image;}
jas_image_t
jas_image_t
*jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,  int clrspc)
*
jas_image_create
int numcmpts
int
numcmpts
numcmpts
jas_image_cmptparm_t *cmptparms
jas_image_cmptparm_t
jas_image_cmptparm_t
*cmptparms
*
cmptparms
int clrspc
int
clrspc
clrspc
{	jas_image_t *image;	uint_fast32_t rawsize;	uint_fast32_t inmem;	int cmptno;	jas_image_cmptparm_t *cmptparm;	if (!(image = jas_image_create0())) {		return 0;	}	image->clrspc_ = clrspc;	image->maxcmpts_ = numcmpts;	image->inmem_ = true;	/* Allocate memory for the per-component information. */	if (!(image->cmpts_ = jas_malloc(image->maxcmpts_ *	  sizeof(jas_image_cmpt_t *)))) {		jas_image_destroy(image);		return 0;	}	/* Initialize in case of failure. */	for (cmptno = 0; cmptno < image->maxcmpts_; ++cmptno) {		image->cmpts_[cmptno] = 0;	}	/* Compute the approximate raw size of the image. */	rawsize = 0;	for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,	  ++cmptparm) {		rawsize += cmptparm->width * cmptparm->height *		  (cmptparm->prec + 7) / 8;	}	/* Decide whether to buffer the image data in memory, based on the	  raw size of the image. */	inmem = (rawsize < JAS_IMAGE_INMEMTHRESH);	/* Create the individual image components. */	for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,	  ++cmptparm) {		if (!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,		  cmptparm->width, cmptparm->height, cmptparm->prec,		  cmptparm->sgnd, inmem))) {			jas_image_destroy(image);			return 0;		}		++image->numcmpts_;	}	/* Determine the bounding box for all of the components on the	  reference grid (i.e., the image area) */	jas_image_setbbox(image);	return image;}
jas_image_t *image;
jas_image_t *image;
jas_image_t
jas_image_t
*image
*
image
uint_fast32_t rawsize;
uint_fast32_t rawsize;
uint_fast32_t
uint_fast32_t
rawsize
rawsize
uint_fast32_t inmem;
uint_fast32_t inmem;
uint_fast32_t
uint_fast32_t
inmem
inmem
int cmptno;
int cmptno;
int
cmptno
cmptno
jas_image_cmptparm_t *cmptparm;
jas_image_cmptparm_t *cmptparm;
jas_image_cmptparm_t
jas_image_cmptparm_t
*cmptparm
*
cmptparm
if (!(image = jas_image_create0())) {		return 0;	}
!(image = jas_image_create0())
(image = jas_image_create0())
image = jas_image_create0()
image
image
jas_image_create0()
jas_image_create0
jas_image_create0
{		return 0;	}
return 0;
0
image->clrspc_ = clrspc;
image->clrspc_ = clrspc
image->clrspc_
image
image
clrspc_
clrspc
clrspc
image->maxcmpts_ = numcmpts;
image->maxcmpts_ = numcmpts
image->maxcmpts_
image
image
maxcmpts_
numcmpts
numcmpts
image->inmem_ = true;
image->inmem_ = true
image->inmem_
image
image
inmem_
true
if (!(image->cmpts_ = jas_malloc(image->maxcmpts_ *	  sizeof(jas_image_cmpt_t *)))) {		jas_image_destroy(image);		return 0;	}
!(image->cmpts_ = jas_malloc(image->maxcmpts_ *	  sizeof(jas_image_cmpt_t *)))
(image->cmpts_ = jas_malloc(image->maxcmpts_ *	  sizeof(jas_image_cmpt_t *)))
image->cmpts_ = jas_malloc(image->maxcmpts_ *	  sizeof(jas_image_cmpt_t *))
image->cmpts_
image
image
cmpts_
jas_malloc(image->maxcmpts_ *	  sizeof(jas_image_cmpt_t *))
jas_malloc
jas_malloc
image->maxcmpts_ *	  sizeof(jas_image_cmpt_t *)
image->maxcmpts_
image
image
maxcmpts_
sizeof(jas_image_cmpt_t *)
jas_image_cmpt_t *
jas_image_cmpt_t
jas_image_cmpt_t
*
*
{		jas_image_destroy(image);		return 0;	}
jas_image_destroy(image);
jas_image_destroy(image)
jas_image_destroy
jas_image_destroy
image
image
return 0;
0
for (cmptno = 0; cmptno < image->maxcmpts_; ++cmptno) {		image->cmpts_[cmptno] = 0;	}
cmptno = 0;
cmptno = 0
cmptno
cmptno
0
cmptno < image->maxcmpts_
cmptno
cmptno
image->maxcmpts_
image
image
maxcmpts_
++cmptno
cmptno
cmptno
{		image->cmpts_[cmptno] = 0;	}
image->cmpts_[cmptno] = 0;
image->cmpts_[cmptno] = 0
image->cmpts_[cmptno]
image->cmpts_
image
image
cmpts_
cmptno
cmptno
0
rawsize = 0;
rawsize = 0
rawsize
rawsize
0
for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,	  ++cmptparm) {		rawsize += cmptparm->width * cmptparm->height *		  (cmptparm->prec + 7) / 8;	}
cmptno = 0, cmptparm = cmptparms;
cmptno = 0, cmptparm = cmptparms
cmptno = 0
cmptno
cmptno
0
cmptparm = cmptparms
cmptparm
cmptparm
cmptparms
cmptparms
cmptno < numcmpts
cmptno
cmptno
numcmpts
numcmpts
++cmptno,	  ++cmptparm
++cmptno
cmptno
cmptno
++cmptparm
cmptparm
cmptparm
{		rawsize += cmptparm->width * cmptparm->height *		  (cmptparm->prec + 7) / 8;	}
rawsize += cmptparm->width * cmptparm->height *		  (cmptparm->prec + 7) / 8;
rawsize += cmptparm->width * cmptparm->height *		  (cmptparm->prec + 7) / 8
rawsize
rawsize
cmptparm->width * cmptparm->height *		  (cmptparm->prec + 7) / 8
cmptparm->width * cmptparm->height *		  (cmptparm->prec + 7)
cmptparm->width * cmptparm->height
cmptparm->width
cmptparm
cmptparm
width
cmptparm->height
cmptparm
cmptparm
height
(cmptparm->prec + 7)
cmptparm->prec + 7
cmptparm->prec
cmptparm
cmptparm
prec
7
8
inmem = (rawsize < JAS_IMAGE_INMEMTHRESH);
inmem = (rawsize < JAS_IMAGE_INMEMTHRESH)
inmem
inmem
(rawsize < JAS_IMAGE_INMEMTHRESH)
rawsize < JAS_IMAGE_INMEMTHRESH
rawsize
rawsize
JAS_IMAGE_INMEMTHRESH
JAS_IMAGE_INMEMTHRESH
for (cmptno = 0, cmptparm = cmptparms; cmptno < numcmpts; ++cmptno,	  ++cmptparm) {		if (!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,		  cmptparm->width, cmptparm->height, cmptparm->prec,		  cmptparm->sgnd, inmem))) {			jas_image_destroy(image);			return 0;		}		++image->numcmpts_;	}
cmptno = 0, cmptparm = cmptparms;
cmptno = 0, cmptparm = cmptparms
cmptno = 0
cmptno
cmptno
0
cmptparm = cmptparms
cmptparm
cmptparm
cmptparms
cmptparms
cmptno < numcmpts
cmptno
cmptno
numcmpts
numcmpts
++cmptno,	  ++cmptparm
++cmptno
cmptno
cmptno
++cmptparm
cmptparm
cmptparm
{		if (!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,		  cmptparm->width, cmptparm->height, cmptparm->prec,		  cmptparm->sgnd, inmem))) {			jas_image_destroy(image);			return 0;		}		++image->numcmpts_;	}
if (!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,		  cmptparm->width, cmptparm->height, cmptparm->prec,		  cmptparm->sgnd, inmem))) {			jas_image_destroy(image);			return 0;		}
!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,		  cmptparm->width, cmptparm->height, cmptparm->prec,		  cmptparm->sgnd, inmem))
(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,		  cmptparm->width, cmptparm->height, cmptparm->prec,		  cmptparm->sgnd, inmem))
image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,		  cmptparm->width, cmptparm->height, cmptparm->prec,		  cmptparm->sgnd, inmem)
image->cmpts_[cmptno]
image->cmpts_
image
image
cmpts_
cmptno
cmptno
jas_image_cmpt_create(cmptparm->tlx,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,		  cmptparm->width, cmptparm->height, cmptparm->prec,		  cmptparm->sgnd, inmem)
jas_image_cmpt_create
jas_image_cmpt_create
cmptparm->tlx
cmptparm
cmptparm
tlx
cmptparm->tly
cmptparm
cmptparm
tly
cmptparm->hstep
cmptparm
cmptparm
hstep
cmptparm->vstep
cmptparm
cmptparm
vstep
cmptparm->width
cmptparm
cmptparm
width
cmptparm->height
cmptparm
cmptparm
height
cmptparm->prec
cmptparm
cmptparm
prec
cmptparm->sgnd
cmptparm
cmptparm
sgnd
inmem
inmem
{			jas_image_destroy(image);			return 0;		}
jas_image_destroy(image);
jas_image_destroy(image)
jas_image_destroy
jas_image_destroy
image
image
return 0;
0
++image->numcmpts_;
++image->numcmpts_
image->numcmpts_
image
image
numcmpts_
jas_image_setbbox(image);
jas_image_setbbox(image)
jas_image_setbbox
jas_image_setbbox
image
image
return image;
image
image
-----joern-----
(95,130,0)
(100,82,0)
(25,67,0)
(32,129,0)
(115,80,0)
(107,7,0)
(1,39,0)
(72,65,0)
(129,67,0)
(52,62,0)
(68,39,0)
(62,108,0)
(6,86,0)
(74,127,0)
(34,106,0)
(50,45,0)
(9,7,0)
(62,106,0)
(51,111,0)
(4,124,0)
(73,130,0)
(10,85,0)
(97,113,0)
(107,33,0)
(58,82,0)
(45,14,0)
(4,85,0)
(13,16,0)
(100,85,0)
(4,118,0)
(4,127,0)
(127,82,0)
(117,14,0)
(60,81,0)
(90,25,0)
(31,36,0)
(11,95,0)
(3,80,0)
(0,46,0)
(85,87,0)
(65,67,0)
(26,111,0)
(121,62,0)
(128,25,0)
(66,16,0)
(28,108,0)
(92,100,0)
(125,106,0)
(7,130,0)
(78,25,0)
(7,27,0)
(77,122,0)
(5,67,0)
(46,108,0)
(104,13,0)
(8,127,0)
(13,27,0)
(36,124,0)
(37,4,0)
(57,86,0)
(111,51,0)
(45,61,0)
(111,130,0)
(13,130,0)
(75,77,0)
(13,129,0)
(81,122,0)
(43,45,0)
(21,124,0)
(62,124,0)
(14,45,0)
(65,87,0)
(42,21,0)
(95,87,0)
(29,61,0)
(93,4,0)
(16,13,0)
(98,7,0)
(129,13,0)
(56,107,0)
(67,65,0)
(116,82,0)
(83,62,0)
(113,82,0)
(76,21,0)
(20,25,0)
(102,95,0)
(35,122,0)
(51,27,0)
(16,107,0)
(30,130,0)
(87,33,0)
(70,108,0)
(19,25,0)
(86,108,0)
(59,24,0)
(110,33,0)
(106,62,0)
(103,13,0)
(88,51,0)
(122,33,0)
(49,13,0)
(112,4,0)
(40,54,0)
(109,37,0)
(61,122,0)
(63,39,0)
(17,39,0)
(54,130,0)
(53,129,0)
(18,39,0)
(84,65,0)
(62,120,0)
(5,82,0)
(23,51,0)
(91,39,0)
(85,100,0)
(85,4,0)
(12,25,0)
(55,39,0)
(64,13,0)
(15,100,0)
(119,33,0)
(47,67,0)
(44,39,0)
(129,87,0)
(96,16,0)
(37,107,0)
(21,33,0)
(45,81,0)
(61,45,0)
(25,27,0)
(80,77,0)
(80,27,0)
(100,67,0)
(122,77,0)
(95,27,0)
(2,36,0)
(45,124,0)
(81,45,0)
(41,13,0)
(77,80,0)
(77,130,0)
(106,108,0)
(36,33,0)
(45,33,0)
(127,4,0)
(22,48,0)
(7,107,0)
(123,5,0)
(14,122,0)
(126,25,0)
(101,14,0)
(67,33,0)
(79,87,0)
(105,5,0)
(4,37,0)
(25,130,0)
(71,81,0)
(114,62,0)
(87,95,0)
(13,67,0)
(86,67,0)
(99,61,0)
(94,33,0)
(38,33,0)
(69,37,0)
(62,124,1)
(82,58,1)
(43,50,1)
(13,16,1)
(11,102,1)
(127,82,1)
(111,130,1)
(62,106,1)
(28,25,1)
(106,108,1)
(62,108,1)
(84,72,1)
(21,42,1)
(52,121,1)
(56,87,1)
(97,4,1)
(74,8,1)
(121,83,1)
(13,27,1)
(25,130,1)
(45,61,1)
(40,21,1)
(15,10,1)
(86,57,1)
(111,51,1)
(0,62,1)
(104,41,1)
(83,114,1)
(26,54,1)
(81,60,1)
(108,70,1)
(112,93,1)
(22,13,1)
(60,71,1)
(93,5,1)
(34,125,1)
(13,104,1)
(71,14,1)
(79,45,1)
(67,65,1)
(5,67,1)
(123,82,1)
(46,0,1)
(54,130,1)
(13,130,1)
(102,79,1)
(6,46,1)
(45,124,1)
(53,32,1)
(130,73,1)
(95,27,1)
(100,82,1)
(5,105,1)
(4,37,1)
(77,80,1)
(95,11,1)
(13,129,1)
(14,117,1)
(58,116,1)
(92,15,1)
(78,20,1)
(76,5,1)
(126,67,1)
(64,103,1)
(77,130,1)
(129,53,1)
(69,109,1)
(16,107,1)
(32,64,1)
(28,59,1)
(8,37,1)
(45,14,1)
(12,19,1)
(103,36,1)
(129,87,1)
(100,92,1)
(7,27,1)
(36,124,1)
(6,108,1)
(101,43,1)
(51,88,1)
(2,31,1)
(59,25,1)
(96,66,1)
(86,108,1)
(37,69,1)
(80,27,1)
(77,75,1)
(7,98,1)
(21,124,1)
(36,2,1)
(46,108,1)
(113,82,1)
(54,40,1)
(25,67,1)
(73,30,1)
(129,67,1)
(20,12,1)
(65,87,1)
(114,86,1)
(122,77,1)
(23,26,1)
(66,129,1)
(49,16,1)
(125,52,1)
(7,130,1)
(47,107,1)
(89,111,1)
(85,100,1)
(26,130,1)
(61,122,1)
(87,95,1)
(95,130,1)
(65,84,1)
(14,122,1)
(128,90,1)
(123,113,1)
(57,6,1)
(50,122,1)
(3,35,1)
(19,126,1)
(127,74,1)
(25,27,1)
(99,81,1)
(4,127,1)
(4,85,1)
(61,29,1)
(75,80,1)
(88,23,1)
(37,107,1)
(5,82,1)
(86,67,1)
(51,27,1)
(10,112,1)
(85,87,1)
(72,47,1)
(113,97,1)
(13,67,1)
(45,81,1)
(98,9,1)
(25,128,1)
(116,22,1)
(80,115,1)
(90,78,1)
(31,86,1)
(4,124,1)
(105,123,1)
(117,101,1)
(29,99,1)
(35,111,1)
(81,122,1)
(16,96,1)
(9,56,1)
(106,34,1)
(115,3,1)
(100,67,1)
(41,49,1)
(109,85,1)
(42,76,1)
(107,7,1)
(70,28,1)
(116,13,1)
(127,5,2)
(32,111,2)
(65,111,2)
(7,27,2)
(25,130,2)
(67,65,2)
(88,111,2)
(106,108,2)
(35,111,2)
(4,85,2)
(4,124,2)
(57,86,2)
(77,80,2)
(106,86,2)
(117,111,2)
(13,130,2)
(46,108,2)
(2,111,2)
(16,111,2)
(87,95,2)
(41,111,2)
(25,27,2)
(80,27,2)
(46,86,2)
(4,127,2)
(128,111,2)
(107,7,2)
(11,111,2)
(26,111,2)
(102,111,2)
(61,111,2)
(122,77,2)
(40,111,2)
(122,111,2)
(23,111,2)
(19,111,2)
(109,5,2)
(92,5,2)
(103,111,2)
(74,5,2)
(114,86,2)
(21,111,2)
(83,86,2)
(104,111,2)
(121,86,2)
(14,111,2)
(99,111,2)
(93,5,2)
(25,111,2)
(62,86,2)
(54,130,2)
(113,82,2)
(75,111,2)
(105,5,2)
(6,86,2)
(77,130,2)
(45,124,2)
(79,111,2)
(129,67,2)
(111,130,2)
(53,111,2)
(51,27,2)
(100,82,2)
(95,130,2)
(43,111,2)
(16,107,2)
(13,16,2)
(58,111,2)
(21,124,2)
(25,67,2)
(3,111,2)
(85,5,2)
(37,107,2)
(20,111,2)
(100,67,2)
(77,111,2)
(71,111,2)
(36,124,2)
(50,111,2)
(57,111,2)
(52,86,2)
(36,111,2)
(66,111,2)
(13,111,2)
(98,111,2)
(123,111,2)
(9,111,2)
(56,111,2)
(4,37,2)
(123,5,2)
(61,122,2)
(15,5,2)
(7,130,2)
(13,67,2)
(105,111,2)
(125,86,2)
(4,5,2)
(45,61,2)
(82,111,2)
(64,111,2)
(60,111,2)
(6,111,2)
(107,111,2)
(5,82,2)
(78,111,2)
(65,87,2)
(81,122,2)
(22,13,2)
(86,86,2)
(51,111,2)
(101,111,2)
(126,111,2)
(70,111,2)
(62,124,2)
(115,111,2)
(129,111,2)
(31,111,2)
(90,111,2)
(108,111,2)
(45,14,2)
(112,5,2)
(45,111,2)
(81,111,2)
(95,111,2)
(42,111,2)
(54,111,2)
(29,111,2)
(86,67,2)
(59,25,2)
(69,5,2)
(28,111,2)
(10,5,2)
(111,111,2)
(111,51,2)
(34,86,2)
(62,108,2)
(76,111,2)
(85,100,2)
(116,111,2)
(62,106,2)
(13,129,2)
(80,111,2)
(100,5,2)
(87,111,2)
(97,5,2)
(5,5,2)
(67,111,2)
(5,67,2)
(72,111,2)
(85,87,2)
(7,111,2)
(84,111,2)
(37,5,2)
(47,111,2)
(8,5,2)
(13,27,2)
(129,87,2)
(96,111,2)
(113,5,2)
(14,122,2)
(45,81,2)
(127,82,2)
(86,108,2)
(49,111,2)
(86,111,2)
(5,111,2)
(0,86,2)
(95,27,2)
(12,111,2)
-----------------------------------
(0,i)
(1,cmpt)
(2,"\\n")
(3,image)
(4,fprintf(out, " f(%d,%d)
(5,i < n)
(6,i)
(7,jas_image_cmptheight(image, cmptno)
(8,buf)
(9,image)
(10,width)
(11,cmptno)
(12,0)
(13,jas_image_readcmpt2(image, cmptno, width - n, height - 1, n, 1, buf)
(14,cmpt->prec_)
(15,n)
(16,height - 1)
(17,i)
(18,for (cmptno = 0; cmptno < image->numcmpts_; ++cmptno)
(19,cmptno)
(20,0)
(21,fprintf(out, "\\n")
(22,abort()
(23,image)
(24,)
(25,jas_image_readcmpt2(image, cmptno, 0, 0, n, 1, buf)
(26,cmptno)
(27,jas_image_t *image)
(28,i)
(29,type_)
(30,cmptno)
(31,out)
(32,width)
(33,)
(34,i)
(35,cmpt)
(36,fprintf(out, "\\n")
(37,height - 1)
(38,if (jas_image_readcmpt2(image, cmptno, width - n, height - 1, n, 1, buf)
(39,)
(40,cmptno)
(41,1)
(42,"\\n")
(43,"prec=%d, sgnd=%d, cmpttype=%d\\n")
(44,n)
(45,fprintf(out, "prec=%d, sgnd=%d, cmpttype=%d\\n", cmpt->prec_,\\n\\t\\t  cmpt->sgnd_, cmpt->type_)
(46,++i)
(47,n)
(48,)
(49,n)
(50,out)
(51,image->numcmpts_)
(52,0)
(53,n)
(54,++cmptno)
(55,buf)
(56,height)
(57,n)
(58,0)
(59,abort()
(60,sgnd_)
(61,cmpt->type_)
(62,fprintf(out, " f(%d,%d)
(63,height)
(64,cmptno)
(65,JAS_MIN(16, width)
(66,height)
(67,n = JAS_MIN(16, width)
(68,width)
(69,1)
(70,0)
(71,cmpt)
(72,16)
(73,0)
(74,i)
(75,cmptno)
(76,out)
(77,image->cmpts_[cmptno])
(78,n)
(79,width)
(80,image->cmpts_)
(81,cmpt->sgnd_)
(82,i = 0)
(83," f(%d,%d)
(84,width)
(85,width - n + i)
(86,i < n)
(87,width = jas_image_cmptwidth(image, cmptno)
(88,numcmpts_)
(89,RET)
(90,1)
(91,cmptno)
(92,i)
(93,out)
(94,if (jas_image_readcmpt2(image, cmptno, 0, 0, n, 1, buf)
(95,jas_image_cmptwidth(image, cmptno)
(96,1)
(97,i)
(98,cmptno)
(99,cmpt)
(100,n + i)
(101,cmpt)
(102,image)
(103,image)
(104,buf)
(105,n)
(106,buf[i])
(107,height = jas_image_cmptheight(image, cmptno)
(108,i = 0)
(109,height)
(110,for (i = 0; i < n; ++i)
(111,cmptno < image->numcmpts_)
(112," f(%d,%d)
(113,++i)
(114,out)
(115,cmpts_)
(116,i)
(117,prec_)
(118,)
(119,for (i = 0; i < n; ++i)
(120,)
(121,i)
(122,cmpt = image->cmpts_[cmptno])
(123,i)
(124,FILE *out)
(125,buf)
(126,image)
(127,buf[i])
(128,buf)
(129,width - n)
(130,cmptno = 0)
-----cfg-----
(130,145)
(130,182)
(133,130)
(134,136)
(7,21)
(136,133)
(140,174)
(140,181)
(141,140)
(142,150)
(143,142)
(145,143)
(18,23)
(18,28)
(19,18)
(147,141)
(148,153)
(21,19)
(150,148)
(23,186)
(151,156)
(25,33)
(153,151)
(26,25)
(154,159)
(28,26)
(156,154)
(157,162)
(30,38)
(31,30)
(159,157)
(160,165)
(33,31)
(162,160)
(35,45)
(163,168)
(36,35)
(165,163)
(38,36)
(166,171)
(168,166)
(41,54)
(41,60)
(169,147)
(42,41)
(43,50)
(171,169)
(45,43)
(46,42)
(174,176)
(47,46)
(176,186)
(48,51)
(178,134)
(50,48)
(179,178)
(51,47)
(181,179)
(182,184)
(54,56)
(184,186)
(56,186)
(60,67)
(63,75)
(63,78)
(65,63)
(67,65)
(68,67)
(71,68)
(72,71)
(73,72)
(75,73)
(78,84)
(83,90)
(84,87)
(87,83)
(90,106)
(90,118)
(93,90)
(94,96)
(96,93)
(99,94)
(101,99)
(102,101)
(103,113)
(104,109)
(106,104)
(107,103)
(109,107)
(110,102)
(111,110)
(113,111)
(116,124)
(118,116)
(123,130)
(124,127)
(127,123)
-----path-----
7,21,19,18,23,186
7,21,19,18,28,26,25,33,31,30,38,36,35,45,43,50,48,51,47,46,42,41,54,56,186
7,21,19,18,28,26,25,33,31,30,38,36,35,45,43,50,48,51,47,46,42,41,60,67,65,63,78,84,87,83,90,106,104,109,107,103,113,111,110,102,101,99,94,96,93,90,118,116,124,127,123
7,21,19,18,28,26,25,33,31,30,38,36,35,45,43,50,48,51,47,46,42,41,60,67,65,63,78,84,87,83,90,118,116,124,127,123,130,145,143,142,150,148,153,151,156,154,159,157,162,160,165
7,21,19,18,28,26,25,33,31,30,38,36,35,45,43,50,48,51,47,46,42,41,60,67,65,63,78,84,87,83,90,118,116,124,127,123,130,182,184,186
-----cfgNode-----
5,<global>
6,<empty>
7,jas_image_t jas_image_create (int numcmpts,jas_image_cmptparm_t *cmptparms,int clrspc)
8,int numcmpts
9,jas_image_cmptparm_t *cmptparms
10,int clrspc
11,<empty>
12,jas_image_t* image
13,uint_fast32_t rawsize
14,uint_fast32_t inmem
15,int cmptno
16,jas_image_cmptparm_t* cmptparm
17,if (!(image = jas_image_create0()))
18,!(image = jas_image_create0())
19,image = jas_image_create0()
20,image
21,jas_image_create0()
22,<empty>
23,return 0;
24,0
25,image->clrspc_ = clrspc
26,image->clrspc_
27,image
28,clrspc_
29,clrspc
30,image->maxcmpts_ = numcmpts
31,image->maxcmpts_
32,image
33,maxcmpts_
34,numcmpts
35,image->inmem_ = true
36,image->inmem_
37,image
38,inmem_
39,true
40,if (!(image->cmpts_ = jas_malloc(image->maxcmpts_ *
41,	  sizeof(jas_image_cmpt_t *))))
42,!(image->cmpts_ = jas_malloc(image->maxcmpts_ *
43,	  sizeof(jas_image_cmpt_t *)))
44,image->cmpts_ = jas_malloc(image->maxcmpts_ *
45,	  sizeof(jas_image_cmpt_t *))
46,image->cmpts_
47,image
48,cmpts_
49,jas_malloc(image->maxcmpts_ *
50,	  sizeof(jas_image_cmpt_t *))
51,image->maxcmpts_ *
52,	  sizeof(jas_image_cmpt_t *)
53,image->maxcmpts_
54,image
55,maxcmpts_
56,sizeof(jas_image_cmpt_t *)
57,jas_image_cmpt_t
58,<empty>
59,jas_image_destroy(image)
60,image
61,return 0;
62,0
63,for (cmptno = 0;cmptno < image->maxcmpts_;++cmptno)
64,<empty>
65,cmptno = 0
66,cmptno
67,0
68,cmptno < image->maxcmpts_
69,cmptno
70,image->maxcmpts_
71,image
72,maxcmpts_
73,++cmptno
74,cmptno
75,<empty>
76,image->cmpts_[cmptno] = 0
77,image->cmpts_[cmptno]
78,image->cmpts_
79,image
80,cmpts_
81,cmptno
82,0
83,rawsize = 0
84,rawsize
85,0
86,for (cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno,
87,	  ++cmptparm)
88,<empty>
89,cmptno = 0, cmptparm = cmptparms
90,cmptno = 0
91,cmptno
92,0
93,cmptparm = cmptparms
94,cmptparm
95,cmptparms
96,cmptno < numcmpts
97,cmptno
98,numcmpts
99,++cmptno,
100,	  ++cmptparm
101,++cmptno
102,cmptno
103,++cmptparm
104,cmptparm
105,<empty>
106,rawsize += cmptparm->width * cmptparm->height *
107,		  (cmptparm->prec + 7) / 8
108,rawsize
109,cmptparm->width * cmptparm->height *
110,		  (cmptparm->prec + 7) / 8
111,cmptparm->width * cmptparm->height *
112,		  (cmptparm->prec + 7)
113,cmptparm->width * cmptparm->height
114,cmptparm->width
115,cmptparm
116,width
117,cmptparm->height
118,cmptparm
119,height
120,cmptparm->prec + 7
121,cmptparm->prec
122,cmptparm
123,prec
124,7
125,8
126,inmem = (rawsize < JAS_IMAGE_INMEMTHRESH)
127,inmem
128,rawsize < JAS_IMAGE_INMEMTHRESH
129,rawsize
130,JAS_IMAGE_INMEMTHRESH
131,for (cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno,
132,	  ++cmptparm)
133,<empty>
134,cmptno = 0, cmptparm = cmptparms
135,cmptno = 0
136,cmptno
137,0
138,cmptparm = cmptparms
139,cmptparm
140,cmptparms
141,cmptno < numcmpts
142,cmptno
143,numcmpts
144,++cmptno,
145,	  ++cmptparm
146,++cmptno
147,cmptno
148,++cmptparm
149,cmptparm
150,<empty>
151,if (!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,
152,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,
153,		  cmptparm->width, cmptparm->height, cmptparm->prec,
154,		  cmptparm->sgnd, inmem)))
155,!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,
156,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,
157,		  cmptparm->width, cmptparm->height, cmptparm->prec,
158,		  cmptparm->sgnd, inmem))
159,image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,
160,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,
161,		  cmptparm->width, cmptparm->height, cmptparm->prec,
162,		  cmptparm->sgnd, inmem)
163,image->cmpts_[cmptno]
164,image->cmpts_
165,image
166,cmpts_
167,cmptno
168,jas_image_cmpt_create(cmptparm->tlx,
169,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,
170,		  cmptparm->width, cmptparm->height, cmptparm->prec,
171,		  cmptparm->sgnd, inmem)
172,cmptparm->tlx
173,cmptparm
174,tlx
175,cmptparm->tly
176,cmptparm
177,tly
178,cmptparm->hstep
179,cmptparm
180,hstep
181,cmptparm->vstep
182,cmptparm
183,vstep
184,cmptparm->width
185,cmptparm
186,width
187,cmptparm->height
188,cmptparm
189,height
190,cmptparm->prec
191,cmptparm
192,prec
193,cmptparm->sgnd
194,cmptparm
195,sgnd
196,inmem
197,<empty>
198,jas_image_destroy(image)
199,image
200,return 0;
201,0
202,++image->numcmpts_
203,image->numcmpts_
204,image
205,numcmpts_
206,jas_image_setbbox(image)
207,image
208,return image;
209,image
210,RET
211,int numcmpts
212,jas_image_cmptparm_t *cmptparms
213,int clrspc
214,RET
215,jas_image_t jas_image_create (int numcmpts,jas_image_cmptparm_t *cmptparms,int clrspc)
216,int numcmpts
217,jas_image_cmptparm_t *cmptparms
218,int clrspc
219,<empty>
220,jas_image_t* image
221,uint_fast32_t rawsize
222,uint_fast32_t inmem
223,int cmptno
224,jas_image_cmptparm_t* cmptparm
225,if (!(image = jas_image_create0()))
226,!(image = jas_image_create0())
227,image = jas_image_create0()
228,image
229,jas_image_create0()
230,<empty>
231,return 0;
232,0
233,image->clrspc_ = clrspc
234,image->clrspc_
235,image
236,clrspc_
237,clrspc
238,image->maxcmpts_ = numcmpts
239,image->maxcmpts_
240,image
241,maxcmpts_
242,numcmpts
243,image->inmem_ = true
244,image->inmem_
245,image
246,inmem_
247,true
248,if (!(image->cmpts_ = jas_malloc(image->maxcmpts_ *
249,	  sizeof(jas_image_cmpt_t *))))
250,!(image->cmpts_ = jas_malloc(image->maxcmpts_ *
251,	  sizeof(jas_image_cmpt_t *)))
252,image->cmpts_ = jas_malloc(image->maxcmpts_ *
253,	  sizeof(jas_image_cmpt_t *))
254,image->cmpts_
255,image
256,cmpts_
257,jas_malloc(image->maxcmpts_ *
258,	  sizeof(jas_image_cmpt_t *))
259,image->maxcmpts_ *
260,	  sizeof(jas_image_cmpt_t *)
261,image->maxcmpts_
262,image
263,maxcmpts_
264,sizeof(jas_image_cmpt_t *)
265,jas_image_cmpt_t
266,<empty>
267,jas_image_destroy(image)
268,image
269,return 0;
270,0
271,for (cmptno = 0;cmptno < image->maxcmpts_;++cmptno)
272,<empty>
273,cmptno = 0
274,cmptno
275,0
276,cmptno < image->maxcmpts_
277,cmptno
278,image->maxcmpts_
279,image
280,maxcmpts_
281,++cmptno
282,cmptno
283,<empty>
284,image->cmpts_[cmptno] = 0
285,image->cmpts_[cmptno]
286,image->cmpts_
287,image
288,cmpts_
289,cmptno
290,0
291,rawsize = 0
292,rawsize
293,0
294,for (cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno,
295,	  ++cmptparm)
296,<empty>
297,cmptno = 0, cmptparm = cmptparms
298,cmptno = 0
299,cmptno
300,0
301,cmptparm = cmptparms
302,cmptparm
303,cmptparms
304,cmptno < numcmpts
305,cmptno
306,numcmpts
307,++cmptno,
308,	  ++cmptparm
309,++cmptno
310,cmptno
311,++cmptparm
312,cmptparm
313,<empty>
314,rawsize += cmptparm->width * cmptparm->height *
315,		  (cmptparm->prec + 7) / 8
316,rawsize
317,cmptparm->width * cmptparm->height *
318,		  (cmptparm->prec + 7) / 8
319,cmptparm->width * cmptparm->height *
320,		  (cmptparm->prec + 7)
321,cmptparm->width * cmptparm->height
322,cmptparm->width
323,cmptparm
324,width
325,cmptparm->height
326,cmptparm
327,height
328,cmptparm->prec + 7
329,cmptparm->prec
330,cmptparm
331,prec
332,7
333,8
334,inmem = (rawsize < JAS_IMAGE_INMEMTHRESH)
335,inmem
336,rawsize < JAS_IMAGE_INMEMTHRESH
337,rawsize
338,JAS_IMAGE_INMEMTHRESH
339,for (cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno,
340,	  ++cmptparm)
341,<empty>
342,cmptno = 0, cmptparm = cmptparms
343,cmptno = 0
344,cmptno
345,0
346,cmptparm = cmptparms
347,cmptparm
348,cmptparms
349,cmptno < numcmpts
350,cmptno
351,numcmpts
352,++cmptno,
353,	  ++cmptparm
354,++cmptno
355,cmptno
356,++cmptparm
357,cmptparm
358,<empty>
359,if (!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,
360,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,
361,		  cmptparm->width, cmptparm->height, cmptparm->prec,
362,		  cmptparm->sgnd, inmem)))
363,!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,
364,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,
365,		  cmptparm->width, cmptparm->height, cmptparm->prec,
366,		  cmptparm->sgnd, inmem))
367,image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,
368,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,
369,		  cmptparm->width, cmptparm->height, cmptparm->prec,
370,		  cmptparm->sgnd, inmem)
371,image->cmpts_[cmptno]
372,image->cmpts_
373,image
374,cmpts_
375,cmptno
376,jas_image_cmpt_create(cmptparm->tlx,
377,		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,
378,		  cmptparm->width, cmptparm->height, cmptparm->prec,
379,		  cmptparm->sgnd, inmem)
380,cmptparm->tlx
381,cmptparm
382,tlx
383,cmptparm->tly
384,cmptparm
385,tly
386,cmptparm->hstep
387,cmptparm
388,hstep
389,cmptparm->vstep
390,cmptparm
391,vstep
392,cmptparm->width
393,cmptparm
394,width
395,cmptparm->height
396,cmptparm
397,height
398,cmptparm->prec
399,cmptparm
400,prec
401,cmptparm->sgnd
402,cmptparm
403,sgnd
404,inmem
405,<empty>
406,jas_image_destroy(image)
407,image
408,return 0;
409,0
410,++image->numcmpts_
411,image->numcmpts_
412,image
413,numcmpts_
414,jas_image_setbbox(image)
415,image
416,return image;
417,image
418,RET
419,int numcmpts
420,jas_image_cmptparm_t *cmptparms
421,int clrspc
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,   int clrspc) {
jas_image_t *image;
uint_fast32_t rawsize;
uint_fast32_t inmem;
int cmptno;
jas_image_cmptparm_t *cmptparm;
image->clrspc_ = clrspc;
image->maxcmpts_ = numcmpts;
image->inmem_ = true;
for(cmptno = 0;cmptno < image->maxcmpts_;++cmptno)
image->cmpts_[cmptno] = 0;
for(cmptno = 0;cmptno < image->maxcmpts_;++cmptno)
image->cmpts_[cmptno] = 0;
for(cmptno = 0;cmptno < image->maxcmpts_;++cmptno)
image->cmpts_[cmptno] = 0;
rawsize = 0;
for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm)
rawsize += cmptparm->width * cmptparm->height * 		  (cmptparm->prec + 7) / 8;
for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm)
rawsize += cmptparm->width * cmptparm->height * 		  (cmptparm->prec + 7) / 8;
for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm)
rawsize += cmptparm->width * cmptparm->height * 		  (cmptparm->prec + 7) / 8;
inmem = (rawsize < JAS_IMAGE_INMEMTHRESH);
for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm)
++image->numcmpts_;
for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm)
++image->numcmpts_;
for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm)
++image->numcmpts_;
jas_image_setbbox(image);
return image;
=======================
