-----label-----
0
-----code-----
int jas_eprintf(const char *fmt, ...)
{
	int ret;
	va_list ap;

	va_start(ap, fmt);
	ret = vfprintf(stderr, fmt, ap);
	va_end(ap);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
23,26
24,25
26,27
28,29
30,31
31,32
31,33
32,33
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
44,45
44,46
45,46
47,48
49,50
50,51
-----nextToken-----
2,4,6,8,9,13,15,19,21,25,27,29,33,36,38,40,42,46,48,51
-----computeFrom-----
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int jas_eprintf(const char *fmt, ...){	int ret;	va_list ap;	va_start(ap, fmt);	ret = vfprintf(stderr, fmt, ap);	va_end(ap);	return ret;}
int
jas_eprintf(const char *fmt, ...)
jas_eprintf
const char *fmt
const char
*fmt
*
fmt
{	int ret;	va_list ap;	va_start(ap, fmt);	ret = vfprintf(stderr, fmt, ap);	va_end(ap);	return ret;}
int ret;
int ret;
int
ret
ret
va_list ap;
va_list ap;
va_list
va_list
ap
ap
va_start(ap, fmt);
va_start(ap, fmt)
va_start
va_start
ap
ap
fmt
fmt
ret = vfprintf(stderr, fmt, ap);
ret = vfprintf(stderr, fmt, ap)
ret
ret
vfprintf(stderr, fmt, ap)
vfprintf
vfprintf
stderr
stderr
fmt
fmt
ap
ap
va_end(ap);
va_end(ap)
va_end
va_end
ap
ap
return ret;
ret
ret
-----joern-----
(36,54,0)
(5,18,0)
(30,10,0)
(53,19,0)
(54,5,0)
(50,16,0)
(49,0,0)
(0,42,0)
(43,16,0)
(5,54,0)
(48,21,0)
(50,10,0)
(2,24,0)
(16,50,0)
(34,46,0)
(18,29,0)
(17,1,0)
(35,23,0)
(41,46,0)
(0,10,0)
(51,21,0)
(18,10,0)
(32,41,0)
(20,50,0)
(50,47,0)
(54,25,0)
(14,24,0)
(5,19,0)
(19,24,0)
(11,29,0)
(26,24,0)
(55,50,0)
(21,10,0)
(18,47,0)
(21,29,0)
(15,19,0)
(4,47,0)
(6,23,0)
(21,46,0)
(19,39,0)
(21,52,0)
(18,5,0)
(13,3,0)
(0,29,0)
(28,41,0)
(29,29,0)
(29,10,0)
(38,5,0)
(40,21,0)
(54,52,0)
(23,47,0)
(16,42,0)
(9,47,0)
(33,47,0)
(44,24,0)
(12,4,0)
(1,24,0)
(22,1,0)
(45,10,0)
(37,54,0)
(7,29,0)
(50,29,0)
(31,18,0)
(41,52,0)
(8,0,0)
(27,18,0)
(55,20,1)
(0,8,1)
(12,16,1)
(20,23,1)
(47,33,1)
(35,47,1)
(41,52,1)
(35,4,1)
(29,11,1)
(48,51,1)
(8,49,1)
(37,36,1)
(15,53,1)
(45,30,1)
(0,42,1)
(17,0,1)
(50,29,1)
(18,10,1)
(31,27,1)
(10,45,1)
(4,47,1)
(16,50,1)
(30,19,1)
(50,47,1)
(1,17,1)
(19,15,1)
(23,6,1)
(21,48,1)
(43,50,1)
(28,23,1)
(21,10,1)
(19,39,1)
(50,10,1)
(22,1,1)
(18,31,1)
(12,54,1)
(9,21,1)
(38,37,1)
(21,29,1)
(32,28,1)
(18,29,1)
(50,55,1)
(16,42,1)
(41,32,1)
(4,12,1)
(5,19,1)
(16,43,1)
(27,38,1)
(5,18,1)
(6,35,1)
(54,5,1)
(29,10,1)
(0,10,1)
(18,47,1)
(0,29,1)
(21,52,1)
(29,29,1)
(40,0,1)
(33,9,1)
(51,40,1)
(49,10,1)
(23,47,1)
(11,7,1)
(36,16,1)
(54,52,1)
(49,29,1)
(7,41,1)
(29,10,2)
(36,16,2)
(19,39,2)
(38,16,2)
(18,47,2)
(0,29,2)
(54,52,2)
(29,29,2)
(5,18,2)
(31,16,2)
(18,10,2)
(0,0,2)
(43,23,2)
(54,5,2)
(12,23,2)
(49,0,2)
(29,0,2)
(37,16,2)
(4,47,2)
(47,0,2)
(16,42,2)
(6,0,2)
(40,0,2)
(54,16,2)
(0,10,2)
(5,16,2)
(20,23,2)
(35,23,2)
(22,1,2)
(11,0,2)
(21,0,2)
(16,50,2)
(16,23,2)
(28,0,2)
(9,0,2)
(23,23,2)
(8,0,2)
(33,0,2)
(21,52,2)
(0,42,2)
(5,19,2)
(18,16,2)
(23,47,2)
(23,0,2)
(18,29,2)
(7,0,2)
(48,0,2)
(41,52,2)
(6,23,2)
(35,0,2)
(41,0,2)
(50,29,2)
(51,0,2)
(21,29,2)
(4,23,2)
(55,23,2)
(21,10,2)
(50,10,2)
(50,23,2)
(32,0,2)
(50,47,2)
(27,16,2)
-----------------------------------
(0,i < len)
(1,return 0;)
(2,i)
(3,)
(4,++j)
(5,dp[i + j])
(6,16)
(7,i)
(8,len)
(9,j)
(10,i = 0)
(11,16)
(12,j)
(13,if (i + j < len)
(14,dp)
(15,data)
(16,i + j < len)
(17,0)
(18,i + j)
(19,dp = data)
(20,i)
(21,fprintf(out, "%04x:", i)
(22,RET)
(23,j < 16)
(24,)
(25,)
(26,for (i = 0; i < len; i += 16)
(27,i)
(28,out)
(29,i += 16)
(30,i)
(31,j)
(32,"\\n")
(33,0)
(34,for (j = 0; j < 16; ++j)
(35,j)
(36,out)
(37," %02x")
(38,dp)
(39,void *data)
(40,out)
(41,fprintf(out, "\\n")
(42,size_t len)
(43,len)
(44,j)
(45,0)
(46,)
(47,j = 0)
(48,i)
(49,i)
(50,i + j)
(51,"%04x:")
(52,FILE *out)
(53,dp)
(54,fprintf(out, " %02x", dp[i + j])
(55,j)
-----cfg-----
(17,15)
(21,23)
(23,25)
(7,12)
(12,17)
(15,21)
-----path-----
7,12,17,15,21,23,25
-----cfgNode-----
5,<global>
6,<empty>
7,int jas_eprintf (const char *fmt...)
8,const char *fmt...
9,<empty>
10,int ret
11,va_list ap
12,va_start(ap, fmt)
13,ap
14,fmt
15,ret = vfprintf(stderr, fmt, ap)
16,ret
17,vfprintf(stderr, fmt, ap)
18,stderr
19,fmt
20,ap
21,va_end(ap)
22,ap
23,return ret;
24,ret
25,RET
26,const char *fmt...
27,RET
28,int jas_eprintf (const char *fmt...)
29,const char *fmt...
30,<empty>
31,int ret
32,va_list ap
33,va_start(ap, fmt)
34,ap
35,fmt
36,ret = vfprintf(stderr, fmt, ap)
37,ret
38,vfprintf(stderr, fmt, ap)
39,stderr
40,fmt
41,ap
42,va_end(ap)
43,ap
44,return ret;
45,ret
46,RET
47,const char *fmt...
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
int jas_eprintf(const char *fmt, ...) {
int ret;
va_list ap;
ret = vfprintf(stderr, fmt, ap);
return ret;
=======================
