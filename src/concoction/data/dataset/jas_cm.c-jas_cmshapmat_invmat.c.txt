-----label-----
0
-----code-----
static int jas_cmshapmat_invmat(jas_cmreal_t out[3][4], jas_cmreal_t in[3][4])
{
	jas_cmreal_t d;
	d = in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])
	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])
	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0]);
#if 0
jas_eprintf("delta=%f\n", d);
#endif
	if (JAS_ABS(d) < 1e-6)
		return -1;
	out[0][0] = (in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d;
	out[1][0] = -(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d;
	out[2][0] = (in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d;
	out[0][1] = -(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d;
	out[1][1] = (in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d;
	out[2][1] = -(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d;
	out[0][2] = (in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d;
	out[1][2] = -(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d;
	out[2][2] = (in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d;
	out[0][3] = -in[0][3];
	out[1][3] = -in[1][3];
	out[2][3] = -in[2][3];
#if 0
jas_eprintf("[ %f %f %f %f ]\n[ %f %f %f %f ]\n[ %f %f %f %f ]\n",
in[0][0], in[0][1], in[0][2], in[0][3],
in[1][0], in[1][1], in[1][2], in[1][3],
in[2][0], in[2][1], in[2][2], in[2][3]);
jas_eprintf("[ %f %f %f %f ]\n[ %f %f %f %f ]\n[ %f %f %f %f ]\n",
out[0][0], out[0][1], out[0][2], out[0][3],
out[1][0], out[1][1], out[1][2], out[1][3],
out[2][0], out[2][1], out[2][2], out[2][3]);
#endif
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
8,11
10,11
12,13
14,15
14,16
15,16
17,18
17,19
17,20
19,20
21,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
23,35
23,36
23,37
23,38
23,39
24,25
25,26
25,27
26,27
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
36,37
36,38
37,38
37,39
38,39
38,40
39,40
43,44
44,45
44,46
45,46
45,47
46,47
46,48
47,48
47,49
48,49
52,53
52,54
53,54
53,55
54,55
58,59
58,60
59,60
59,61
60,61
60,62
61,62
65,66
65,67
66,67
66,68
67,68
71,72
71,73
72,73
72,74
73,74
73,75
74,75
78,79
79,80
79,81
80,81
80,82
81,82
81,83
82,83
82,84
83,84
87,88
87,89
88,89
88,90
89,90
93,94
93,95
94,95
94,96
95,96
95,97
96,97
100,101
100,102
101,102
101,103
102,103
106,107
106,108
107,108
107,109
108,109
108,110
109,110
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
117,119
118,119
122,123
122,124
123,124
123,125
124,125
128,129
128,130
129,130
129,131
130,131
130,132
131,132
135,136
135,137
136,137
136,138
137,138
141,142
141,143
142,143
142,144
143,144
143,145
144,145
146,147
149,150
150,151
152,153
153,154
153,155
154,155
154,156
155,156
155,157
156,157
160,161
160,162
161,162
162,163
162,164
163,164
163,165
164,165
164,166
165,166
165,167
166,167
170,171
170,172
171,172
171,173
172,173
176,177
176,178
177,178
177,179
178,179
178,180
179,180
183,184
183,185
184,185
184,186
185,186
189,190
191,192
192,193
192,194
193,194
193,195
194,195
194,196
195,196
199,200
199,201
200,201
201,202
202,203
202,204
203,204
203,205
204,205
204,206
205,206
205,207
206,207
210,211
210,212
211,212
211,213
212,213
216,217
216,218
217,218
217,219
218,219
218,220
219,220
223,224
223,225
224,225
224,226
225,226
229,230
231,232
232,233
232,234
233,234
233,235
234,235
234,236
235,236
239,240
239,241
240,241
241,242
241,243
242,243
242,244
243,244
243,245
244,245
244,246
245,246
249,250
249,251
250,251
250,252
251,252
255,256
255,257
256,257
256,258
257,258
257,259
258,259
262,263
262,264
263,264
263,265
264,265
268,269
270,271
271,272
271,273
272,273
272,274
273,274
273,275
274,275
278,279
278,280
279,280
280,281
281,282
281,283
282,283
282,284
283,284
283,285
284,285
284,286
285,286
289,290
289,291
290,291
290,292
291,292
295,296
295,297
296,297
296,298
297,298
297,299
298,299
302,303
302,304
303,304
303,305
304,305
308,309
310,311
311,312
311,313
312,313
312,314
313,314
313,315
314,315
318,319
318,320
319,320
320,321
320,322
321,322
321,323
322,323
322,324
323,324
323,325
324,325
328,329
328,330
329,330
329,331
330,331
334,335
334,336
335,336
335,337
336,337
336,338
337,338
341,342
341,343
342,343
342,344
343,344
347,348
349,350
350,351
350,352
351,352
351,353
352,353
352,354
353,354
357,358
357,359
358,359
359,360
360,361
360,362
361,362
361,363
362,363
362,364
363,364
363,365
364,365
368,369
368,370
369,370
369,371
370,371
374,375
374,376
375,376
375,377
376,377
376,378
377,378
381,382
381,383
382,383
382,384
383,384
387,388
389,390
390,391
390,392
391,392
391,393
392,393
392,394
393,394
397,398
397,399
398,399
399,400
399,401
400,401
400,402
401,402
401,403
402,403
402,404
403,404
407,408
407,409
408,409
408,410
409,410
413,414
413,415
414,415
414,416
415,416
415,417
416,417
420,421
420,422
421,422
421,423
422,423
426,427
428,429
429,430
429,431
430,431
430,432
431,432
431,433
432,433
436,437
436,438
437,438
438,439
439,440
439,441
440,441
440,442
441,442
441,443
442,443
442,444
443,444
447,448
447,449
448,449
448,450
449,450
453,454
453,455
454,455
454,456
455,456
455,457
456,457
460,461
460,462
461,462
461,463
462,463
466,467
468,469
469,470
469,471
470,471
470,472
471,472
471,473
472,473
476,477
476,478
477,478
478,479
478,480
479,480
479,481
480,481
480,482
481,482
481,483
482,483
486,487
486,488
487,488
487,489
488,489
492,493
492,494
493,494
493,495
494,495
494,496
495,496
499,500
499,501
500,501
500,502
501,502
505,506
507,508
508,509
508,510
509,510
509,511
510,511
510,512
511,512
515,516
516,517
516,518
517,518
517,519
518,519
522,523
523,524
523,525
524,525
524,526
525,526
525,527
526,527
530,531
531,532
531,533
532,533
532,534
533,534
537,538
538,539
538,540
539,540
539,541
540,541
540,542
541,542
545,546
546,547
546,548
547,548
547,549
548,549
552,553
-----nextToken-----
2,4,7,9,11,13,16,18,20,22,27,29,33,40,41,42,49,50,51,55,56,57,62,63,64,68,69,70,75,76,77,84,85,86,90,91,92,97,98,99,103,104,105,110,111,112,119,120,121,125,126,127,132,133,134,138,139,140,145,147,148,151,157,158,159,167,168,169,173,174,175,180,181,182,186,187,188,190,196,197,198,207,208,209,213,214,215,220,221,222,226,227,228,230,236,237,238,246,247,248,252,253,254,259,260,261,265,266,267,269,275,276,277,286,287,288,292,293,294,299,300,301,305,306,307,309,315,316,317,325,326,327,331,332,333,338,339,340,344,345,346,348,354,355,356,365,366,367,371,372,373,378,379,380,384,385,386,388,394,395,396,404,405,406,410,411,412,417,418,419,423,424,425,427,433,434,435,444,445,446,450,451,452,457,458,459,463,464,465,467,473,474,475,483,484,485,489,490,491,496,497,498,502,503,504,506,512,513,514,519,520,521,527,528,529,534,535,536,542,543,544,549,550,551,553
-----computeFrom-----
31,32
31,33
34,35
34,36
35,36
35,37
36,37
36,38
44,45
44,46
45,46
45,47
58,59
58,60
71,72
71,73
79,80
79,81
80,81
80,82
93,94
93,95
106,107
106,108
114,115
114,116
115,116
115,117
128,129
128,130
142,143
142,144
153,154
153,155
160,161
160,162
162,163
162,164
163,164
163,165
176,177
176,178
192,193
192,194
199,200
199,201
202,203
202,204
203,204
203,205
216,217
216,218
232,233
232,234
239,240
239,241
241,242
241,243
242,243
242,244
255,256
255,257
271,272
271,273
278,279
278,280
281,282
281,283
282,283
282,284
295,296
295,297
311,312
311,313
318,319
318,320
320,321
320,322
321,322
321,323
334,335
334,336
350,351
350,352
357,358
357,359
360,361
360,362
361,362
361,363
374,375
374,376
390,391
390,392
397,398
397,399
399,400
399,401
400,401
400,402
413,414
413,415
429,430
429,431
436,437
436,438
439,440
439,441
440,441
440,442
453,454
453,455
469,470
469,471
476,477
476,478
478,479
478,480
479,480
479,481
492,493
492,494
508,509
508,510
523,524
523,525
538,539
538,540
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayModifier;LiteralExpression;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayModifier;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static int jas_cmshapmat_invmat(jas_cmreal_t out[3][4], jas_cmreal_t in[3][4]){	jas_cmreal_t d;	d = in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0]);#if 0jas_eprintf("delta=%f\n", d);#endif	if (JAS_ABS(d) < 1e-6)		return -1;	out[0][0] = (in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d;	out[1][0] = -(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d;	out[2][0] = (in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d;	out[0][1] = -(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d;	out[1][1] = (in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d;	out[2][1] = -(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d;	out[0][2] = (in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d;	out[1][2] = -(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d;	out[2][2] = (in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d;	out[0][3] = -in[0][3];	out[1][3] = -in[1][3];	out[2][3] = -in[2][3];#if 0jas_eprintf("[ %f %f %f %f ]\n[ %f %f %f %f ]\n[ %f %f %f %f ]\n",in[0][0], in[0][1], in[0][2], in[0][3],in[1][0], in[1][1], in[1][2], in[1][3],in[2][0], in[2][1], in[2][2], in[2][3]);jas_eprintf("[ %f %f %f %f ]\n[ %f %f %f %f ]\n[ %f %f %f %f ]\n",out[0][0], out[0][1], out[0][2], out[0][3],out[1][0], out[1][1], out[1][2], out[1][3],out[2][0], out[2][1], out[2][2], out[2][3]);#endif	return 0;}
static int
jas_cmshapmat_invmat(jas_cmreal_t out[3][4], jas_cmreal_t in[3][4])
jas_cmshapmat_invmat
jas_cmreal_t out[3][4]
jas_cmreal_t
jas_cmreal_t
out[3][4]
out
[3]
3
[4]
4
jas_cmreal_t in[3][4]
jas_cmreal_t
jas_cmreal_t
in[3][4]
in
[3]
3
[4]
4
{	jas_cmreal_t d;	d = in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0]);#if 0jas_eprintf("delta=%f\n", d);#endif	if (JAS_ABS(d) < 1e-6)		return -1;	out[0][0] = (in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d;	out[1][0] = -(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d;	out[2][0] = (in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d;	out[0][1] = -(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d;	out[1][1] = (in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d;	out[2][1] = -(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d;	out[0][2] = (in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d;	out[1][2] = -(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d;	out[2][2] = (in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d;	out[0][3] = -in[0][3];	out[1][3] = -in[1][3];	out[2][3] = -in[2][3];#if 0jas_eprintf("[ %f %f %f %f ]\n[ %f %f %f %f ]\n[ %f %f %f %f ]\n",in[0][0], in[0][1], in[0][2], in[0][3],in[1][0], in[1][1], in[1][2], in[1][3],in[2][0], in[2][1], in[2][2], in[2][3]);jas_eprintf("[ %f %f %f %f ]\n[ %f %f %f %f ]\n[ %f %f %f %f ]\n",out[0][0], out[0][1], out[0][2], out[0][3],out[1][0], out[1][1], out[1][2], out[1][3],out[2][0], out[2][1], out[2][2], out[2][3]);#endif	return 0;}
jas_cmreal_t d;
jas_cmreal_t d;
jas_cmreal_t
jas_cmreal_t
d
d
d = in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0]);
d = in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0])
d
d
in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0])
in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])
in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])
in[0][0]
in[0]
in
in
0
0
(in[1][1] * in[2][2] - in[1][2] * in[2][1])
in[1][1] * in[2][2] - in[1][2] * in[2][1]
in[1][1] * in[2][2]
in[1][1]
in[1]
in
in
1
1
in[2][2]
in[2]
in
in
2
2
in[1][2] * in[2][1]
in[1][2]
in[1]
in
in
1
2
in[2][1]
in[2]
in
in
2
1
in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])
in[0][1]
in[0]
in
in
0
1
(in[1][0] * in[2][2] - in[1][2] * in[2][0])
in[1][0] * in[2][2] - in[1][2] * in[2][0]
in[1][0] * in[2][2]
in[1][0]
in[1]
in
in
1
0
in[2][2]
in[2]
in
in
2
2
in[1][2] * in[2][0]
in[1][2]
in[1]
in
in
1
2
in[2][0]
in[2]
in
in
2
0
in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0])
in[0][2]
in[0]
in
in
0
2
(in[1][0] * in[2][1] - in[1][1] * in[2][0])
in[1][0] * in[2][1] - in[1][1] * in[2][0]
in[1][0] * in[2][1]
in[1][0]
in[1]
in
in
1
0
in[2][1]
in[2]
in
in
2
1
in[1][1] * in[2][0]
in[1][1]
in[1]
in
in
1
1
in[2][0]
in[2]
in
in
2
0
if (JAS_ABS(d) < 1e-6)		return -1;
JAS_ABS(d) < 1e-6
JAS_ABS(d)
JAS_ABS
JAS_ABS
d
d
1e-6
return -1;
-1
1
out[0][0] = (in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d;
out[0][0] = (in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d
out[0][0]
out[0]
out
out
0
0
(in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d
(in[1][1] * in[2][2] - in[1][2] * in[2][1])
in[1][1] * in[2][2] - in[1][2] * in[2][1]
in[1][1] * in[2][2]
in[1][1]
in[1]
in
in
1
1
in[2][2]
in[2]
in
in
2
2
in[1][2] * in[2][1]
in[1][2]
in[1]
in
in
1
2
in[2][1]
in[2]
in
in
2
1
d
d
out[1][0] = -(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d;
out[1][0] = -(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d
out[1][0]
out[1]
out
out
1
0
-(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d
-(in[1][0] * in[2][2] - in[1][2] * in[2][0])
(in[1][0] * in[2][2] - in[1][2] * in[2][0])
in[1][0] * in[2][2] - in[1][2] * in[2][0]
in[1][0] * in[2][2]
in[1][0]
in[1]
in
in
1
0
in[2][2]
in[2]
in
in
2
2
in[1][2] * in[2][0]
in[1][2]
in[1]
in
in
1
2
in[2][0]
in[2]
in
in
2
0
d
d
out[2][0] = (in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d;
out[2][0] = (in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d
out[2][0]
out[2]
out
out
2
0
(in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d
(in[1][0] * in[2][1] - in[1][1] * in[2][0])
in[1][0] * in[2][1] - in[1][1] * in[2][0]
in[1][0] * in[2][1]
in[1][0]
in[1]
in
in
1
0
in[2][1]
in[2]
in
in
2
1
in[1][1] * in[2][0]
in[1][1]
in[1]
in
in
1
1
in[2][0]
in[2]
in
in
2
0
d
d
out[0][1] = -(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d;
out[0][1] = -(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d
out[0][1]
out[0]
out
out
0
1
-(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d
-(in[0][1] * in[2][2] - in[0][2] * in[2][1])
(in[0][1] * in[2][2] - in[0][2] * in[2][1])
in[0][1] * in[2][2] - in[0][2] * in[2][1]
in[0][1] * in[2][2]
in[0][1]
in[0]
in
in
0
1
in[2][2]
in[2]
in
in
2
2
in[0][2] * in[2][1]
in[0][2]
in[0]
in
in
0
2
in[2][1]
in[2]
in
in
2
1
d
d
out[1][1] = (in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d;
out[1][1] = (in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d
out[1][1]
out[1]
out
out
1
1
(in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d
(in[0][0] * in[2][2] - in[0][2] * in[2][0])
in[0][0] * in[2][2] - in[0][2] * in[2][0]
in[0][0] * in[2][2]
in[0][0]
in[0]
in
in
0
0
in[2][2]
in[2]
in
in
2
2
in[0][2] * in[2][0]
in[0][2]
in[0]
in
in
0
2
in[2][0]
in[2]
in
in
2
0
d
d
out[2][1] = -(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d;
out[2][1] = -(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d
out[2][1]
out[2]
out
out
2
1
-(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d
-(in[0][0] * in[2][1] - in[0][1] * in[2][0])
(in[0][0] * in[2][1] - in[0][1] * in[2][0])
in[0][0] * in[2][1] - in[0][1] * in[2][0]
in[0][0] * in[2][1]
in[0][0]
in[0]
in
in
0
0
in[2][1]
in[2]
in
in
2
1
in[0][1] * in[2][0]
in[0][1]
in[0]
in
in
0
1
in[2][0]
in[2]
in
in
2
0
d
d
out[0][2] = (in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d;
out[0][2] = (in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d
out[0][2]
out[0]
out
out
0
2
(in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d
(in[0][1] * in[1][2] - in[0][2] * in[1][1])
in[0][1] * in[1][2] - in[0][2] * in[1][1]
in[0][1] * in[1][2]
in[0][1]
in[0]
in
in
0
1
in[1][2]
in[1]
in
in
1
2
in[0][2] * in[1][1]
in[0][2]
in[0]
in
in
0
2
in[1][1]
in[1]
in
in
1
1
d
d
out[1][2] = -(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d;
out[1][2] = -(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d
out[1][2]
out[1]
out
out
1
2
-(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d
-(in[0][0] * in[1][2] - in[1][0] * in[0][2])
(in[0][0] * in[1][2] - in[1][0] * in[0][2])
in[0][0] * in[1][2] - in[1][0] * in[0][2]
in[0][0] * in[1][2]
in[0][0]
in[0]
in
in
0
0
in[1][2]
in[1]
in
in
1
2
in[1][0] * in[0][2]
in[1][0]
in[1]
in
in
1
0
in[0][2]
in[0]
in
in
0
2
d
d
out[2][2] = (in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d;
out[2][2] = (in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d
out[2][2]
out[2]
out
out
2
2
(in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d
(in[0][0] * in[1][1] - in[0][1] * in[1][0])
in[0][0] * in[1][1] - in[0][1] * in[1][0]
in[0][0] * in[1][1]
in[0][0]
in[0]
in
in
0
0
in[1][1]
in[1]
in
in
1
1
in[0][1] * in[1][0]
in[0][1]
in[0]
in
in
0
1
in[1][0]
in[1]
in
in
1
0
d
d
out[0][3] = -in[0][3];
out[0][3] = -in[0][3]
out[0][3]
out[0]
out
out
0
3
-in[0][3]
in[0][3]
in[0]
in
in
0
3
out[1][3] = -in[1][3];
out[1][3] = -in[1][3]
out[1][3]
out[1]
out
out
1
3
-in[1][3]
in[1][3]
in[1]
in
in
1
3
out[2][3] = -in[2][3];
out[2][3] = -in[2][3]
out[2][3]
out[2]
out
out
2
3
-in[2][3]
in[2][3]
in[2]
in
in
2
3
return 0;
0
-----joern-----
(13,1,0)
(2,1,0)
(4,15,0)
(11,0,0)
(14,2,0)
(12,3,0)
(9,16,0)
(19,13,0)
(6,15,0)
(2,12,0)
(15,16,0)
(8,0,0)
(12,2,0)
(17,8,0)
(0,3,0)
(8,1,0)
(21,6,0)
(20,13,0)
(5,6,0)
(7,8,0)
(10,2,0)
(6,1,0)
(20,19,1)
(8,7,1)
(0,11,1)
(8,1,1)
(4,6,1)
(12,2,1)
(17,12,1)
(18,15,1)
(6,1,1)
(11,8,1)
(13,1,1)
(7,17,1)
(21,5,1)
(6,21,1)
(13,20,1)
(14,13,1)
(15,4,1)
(10,14,1)
(2,1,1)
(2,10,1)
(5,0,1)
(5,13,1)
(2,13,2)
(11,13,2)
(8,1,2)
(13,1,2)
(12,2,2)
(8,13,2)
(0,13,2)
(14,13,2)
(10,13,2)
(12,13,2)
(17,13,2)
(2,1,2)
(7,13,2)
(6,1,2)
-----------------------------------
(0,lut->data = 0)
(1,jas_cmshapmatlut_t *lut)
(2,lut->data)
(3,)
(4,0)
(5,lut)
(6,lut->size)
(7,data)
(8,lut->data)
(9,if (lut->data)
(10,data)
(11,0)
(12,jas_free(lut->data)
(13,lut->data)
(14,lut)
(15,lut->size = 0)
(16,)
(17,lut)
(18,RET)
(19,lut)
(20,data)
(21,size)
-----cfg-----
(7,18)
(12,105)
(14,12)
(15,76)
(16,47)
(17,25)
(18,17)
(22,16)
(23,36)
(24,30)
(25,24)
(29,23)
(30,29)
(34,22)
(35,41)
(36,35)
(40,34)
(41,40)
(45,15)
(46,54)
(47,46)
(51,45)
(52,65)
(53,59)
(54,53)
(58,52)
(59,58)
(63,51)
(64,70)
(65,64)
(69,63)
(70,69)
(74,14)
(75,83)
(76,75)
(80,74)
(81,94)
(82,88)
(83,82)
(87,81)
(88,87)
(92,80)
(93,99)
(94,93)
(98,92)
(99,98)
(104,110)
(104,114)
(105,104)
(109,433)
(110,109)
(112,145)
(113,122)
(114,113)
(118,112)
(119,118)
(120,133)
(121,127)
(122,121)
(126,120)
(127,126)
(131,119)
(132,138)
(133,132)
(137,131)
(138,137)
(143,177)
(144,154)
(145,144)
(149,143)
(150,149)
(151,150)
(152,165)
(153,159)
(154,153)
(158,152)
(159,158)
(163,151)
(164,170)
(165,164)
(169,163)
(170,169)
(175,208)
(176,185)
(177,176)
(181,175)
(182,181)
(183,196)
(184,190)
(185,184)
(189,183)
(190,189)
(194,182)
(195,201)
(196,195)
(200,194)
(201,200)
(206,240)
(207,217)
(208,207)
(212,206)
(213,212)
(214,213)
(215,228)
(216,222)
(217,216)
(221,215)
(222,221)
(226,214)
(227,233)
(228,227)
(232,226)
(233,232)
(238,271)
(239,248)
(240,239)
(244,238)
(245,244)
(246,259)
(247,253)
(248,247)
(252,246)
(253,252)
(257,245)
(258,264)
(259,258)
(263,257)
(264,263)
(269,303)
(270,280)
(271,270)
(275,269)
(276,275)
(277,276)
(278,291)
(279,285)
(280,279)
(284,278)
(285,284)
(289,277)
(290,296)
(291,290)
(295,289)
(296,295)
(301,334)
(302,311)
(303,302)
(307,301)
(308,307)
(309,322)
(310,316)
(311,310)
(315,309)
(316,315)
(320,308)
(321,327)
(322,321)
(326,320)
(327,326)
(332,366)
(333,343)
(334,333)
(338,332)
(339,338)
(340,339)
(341,354)
(342,348)
(343,342)
(347,341)
(348,347)
(352,340)
(353,359)
(354,353)
(358,352)
(359,358)
(364,397)
(365,374)
(366,365)
(370,364)
(371,370)
(372,385)
(373,379)
(374,373)
(378,372)
(379,378)
(383,371)
(384,390)
(385,384)
(389,383)
(390,389)
(395,409)
(396,403)
(397,396)
(401,395)
(402,401)
(403,402)
(407,421)
(408,415)
(409,408)
(413,407)
(414,413)
(415,414)
(419,431)
(420,427)
(421,420)
(425,419)
(426,425)
(427,426)
(431,433)
-----path-----
7,18,17,25,24,30,29,23,36,35,41,40,34,22,16,47,46,54,53,59,58,52,65,64,70,69,63,51,45,15,76,75,83,82,88,87,81,94,93,99,98,92,80,74,14,12,105,104,110,109,433
7,18,17,25,24,30,29,23,36,35,41,40,34,22,16,47,46,54,53,59,58,52,65,64,70,69,63,51,45,15,76,75,83,82,88,87,81,94,93,99,98,92,80,74,14,12,105,104,114,113,122
-----cfgNode-----
5,<global>
6,<empty>
7,int jas_cmshapmat_invmat (jas_cmreal_t out[3][4],jas_cmreal_t in[3][4])
8,jas_cmreal_t out[3][4]
9,jas_cmreal_t in[3][4]
10,<empty>
11,jas_cmreal_t d
12,d = in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])
13,	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])
14,	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0])
15,d
16,in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])
17,	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])
18,	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0])
19,in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])
20,	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])
21,in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])
22,in[0][0]
23,in[0]
24,in
25,0
26,0
27,in[1][1] * in[2][2] - in[1][2] * in[2][1]
28,in[1][1] * in[2][2]
29,in[1][1]
30,in[1]
31,in
32,1
33,1
34,in[2][2]
35,in[2]
36,in
37,2
38,2
39,in[1][2] * in[2][1]
40,in[1][2]
41,in[1]
42,in
43,1
44,2
45,in[2][1]
46,in[2]
47,in
48,2
49,1
50,in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])
51,in[0][1]
52,in[0]
53,in
54,0
55,1
56,in[1][0] * in[2][2] - in[1][2] * in[2][0]
57,in[1][0] * in[2][2]
58,in[1][0]
59,in[1]
60,in
61,1
62,0
63,in[2][2]
64,in[2]
65,in
66,2
67,2
68,in[1][2] * in[2][0]
69,in[1][2]
70,in[1]
71,in
72,1
73,2
74,in[2][0]
75,in[2]
76,in
77,2
78,0
79,in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0])
80,in[0][2]
81,in[0]
82,in
83,0
84,2
85,in[1][0] * in[2][1] - in[1][1] * in[2][0]
86,in[1][0] * in[2][1]
87,in[1][0]
88,in[1]
89,in
90,1
91,0
92,in[2][1]
93,in[2]
94,in
95,2
96,1
97,in[1][1] * in[2][0]
98,in[1][1]
99,in[1]
100,in
101,1
102,1
103,in[2][0]
104,in[2]
105,in
106,2
107,0
108,if (JAS_ABS(d) < 1e-6)
109,JAS_ABS(d) < 1e-6
110,JAS_ABS(d)
111,d
112,1e-6
113,<empty>
114,return -1;
115,-1
116,1
117,out[0][0] = (in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d
118,out[0][0]
119,out[0]
120,out
121,0
122,0
123,(in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d
124,in[1][1] * in[2][2] - in[1][2] * in[2][1]
125,in[1][1] * in[2][2]
126,in[1][1]
127,in[1]
128,in
129,1
130,1
131,in[2][2]
132,in[2]
133,in
134,2
135,2
136,in[1][2] * in[2][1]
137,in[1][2]
138,in[1]
139,in
140,1
141,2
142,in[2][1]
143,in[2]
144,in
145,2
146,1
147,d
148,out[1][0] = -(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d
149,out[1][0]
150,out[1]
151,out
152,1
153,0
154,-(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d
155,-(in[1][0] * in[2][2] - in[1][2] * in[2][0])
156,in[1][0] * in[2][2] - in[1][2] * in[2][0]
157,in[1][0] * in[2][2]
158,in[1][0]
159,in[1]
160,in
161,1
162,0
163,in[2][2]
164,in[2]
165,in
166,2
167,2
168,in[1][2] * in[2][0]
169,in[1][2]
170,in[1]
171,in
172,1
173,2
174,in[2][0]
175,in[2]
176,in
177,2
178,0
179,d
180,out[2][0] = (in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d
181,out[2][0]
182,out[2]
183,out
184,2
185,0
186,(in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d
187,in[1][0] * in[2][1] - in[1][1] * in[2][0]
188,in[1][0] * in[2][1]
189,in[1][0]
190,in[1]
191,in
192,1
193,0
194,in[2][1]
195,in[2]
196,in
197,2
198,1
199,in[1][1] * in[2][0]
200,in[1][1]
201,in[1]
202,in
203,1
204,1
205,in[2][0]
206,in[2]
207,in
208,2
209,0
210,d
211,out[0][1] = -(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d
212,out[0][1]
213,out[0]
214,out
215,0
216,1
217,-(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d
218,-(in[0][1] * in[2][2] - in[0][2] * in[2][1])
219,in[0][1] * in[2][2] - in[0][2] * in[2][1]
220,in[0][1] * in[2][2]
221,in[0][1]
222,in[0]
223,in
224,0
225,1
226,in[2][2]
227,in[2]
228,in
229,2
230,2
231,in[0][2] * in[2][1]
232,in[0][2]
233,in[0]
234,in
235,0
236,2
237,in[2][1]
238,in[2]
239,in
240,2
241,1
242,d
243,out[1][1] = (in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d
244,out[1][1]
245,out[1]
246,out
247,1
248,1
249,(in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d
250,in[0][0] * in[2][2] - in[0][2] * in[2][0]
251,in[0][0] * in[2][2]
252,in[0][0]
253,in[0]
254,in
255,0
256,0
257,in[2][2]
258,in[2]
259,in
260,2
261,2
262,in[0][2] * in[2][0]
263,in[0][2]
264,in[0]
265,in
266,0
267,2
268,in[2][0]
269,in[2]
270,in
271,2
272,0
273,d
274,out[2][1] = -(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d
275,out[2][1]
276,out[2]
277,out
278,2
279,1
280,-(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d
281,-(in[0][0] * in[2][1] - in[0][1] * in[2][0])
282,in[0][0] * in[2][1] - in[0][1] * in[2][0]
283,in[0][0] * in[2][1]
284,in[0][0]
285,in[0]
286,in
287,0
288,0
289,in[2][1]
290,in[2]
291,in
292,2
293,1
294,in[0][1] * in[2][0]
295,in[0][1]
296,in[0]
297,in
298,0
299,1
300,in[2][0]
301,in[2]
302,in
303,2
304,0
305,d
306,out[0][2] = (in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d
307,out[0][2]
308,out[0]
309,out
310,0
311,2
312,(in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d
313,in[0][1] * in[1][2] - in[0][2] * in[1][1]
314,in[0][1] * in[1][2]
315,in[0][1]
316,in[0]
317,in
318,0
319,1
320,in[1][2]
321,in[1]
322,in
323,1
324,2
325,in[0][2] * in[1][1]
326,in[0][2]
327,in[0]
328,in
329,0
330,2
331,in[1][1]
332,in[1]
333,in
334,1
335,1
336,d
337,out[1][2] = -(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d
338,out[1][2]
339,out[1]
340,out
341,1
342,2
343,-(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d
344,-(in[0][0] * in[1][2] - in[1][0] * in[0][2])
345,in[0][0] * in[1][2] - in[1][0] * in[0][2]
346,in[0][0] * in[1][2]
347,in[0][0]
348,in[0]
349,in
350,0
351,0
352,in[1][2]
353,in[1]
354,in
355,1
356,2
357,in[1][0] * in[0][2]
358,in[1][0]
359,in[1]
360,in
361,1
362,0
363,in[0][2]
364,in[0]
365,in
366,0
367,2
368,d
369,out[2][2] = (in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d
370,out[2][2]
371,out[2]
372,out
373,2
374,2
375,(in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d
376,in[0][0] * in[1][1] - in[0][1] * in[1][0]
377,in[0][0] * in[1][1]
378,in[0][0]
379,in[0]
380,in
381,0
382,0
383,in[1][1]
384,in[1]
385,in
386,1
387,1
388,in[0][1] * in[1][0]
389,in[0][1]
390,in[0]
391,in
392,0
393,1
394,in[1][0]
395,in[1]
396,in
397,1
398,0
399,d
400,out[0][3] = -in[0][3]
401,out[0][3]
402,out[0]
403,out
404,0
405,3
406,-in[0][3]
407,in[0][3]
408,in[0]
409,in
410,0
411,3
412,out[1][3] = -in[1][3]
413,out[1][3]
414,out[1]
415,out
416,1
417,3
418,-in[1][3]
419,in[1][3]
420,in[1]
421,in
422,1
423,3
424,out[2][3] = -in[2][3]
425,out[2][3]
426,out[2]
427,out
428,2
429,3
430,-in[2][3]
431,in[2][3]
432,in[2]
433,in
434,2
435,3
436,return 0;
437,0
438,RET
439,jas_cmreal_t out[3][4]
440,jas_cmreal_t in[3][4]
441,RET
442,int jas_cmshapmat_invmat (jas_cmreal_t out[3][4],jas_cmreal_t in[3][4])
443,jas_cmreal_t out[3][4]
444,jas_cmreal_t in[3][4]
445,<empty>
446,jas_cmreal_t d
447,d = in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])
448,	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])
449,	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0])
450,d
451,in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])
452,	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])
453,	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0])
454,in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])
455,	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])
456,in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1])
457,in[0][0]
458,in[0]
459,in
460,0
461,0
462,in[1][1] * in[2][2] - in[1][2] * in[2][1]
463,in[1][1] * in[2][2]
464,in[1][1]
465,in[1]
466,in
467,1
468,1
469,in[2][2]
470,in[2]
471,in
472,2
473,2
474,in[1][2] * in[2][1]
475,in[1][2]
476,in[1]
477,in
478,1
479,2
480,in[2][1]
481,in[2]
482,in
483,2
484,1
485,in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0])
486,in[0][1]
487,in[0]
488,in
489,0
490,1
491,in[1][0] * in[2][2] - in[1][2] * in[2][0]
492,in[1][0] * in[2][2]
493,in[1][0]
494,in[1]
495,in
496,1
497,0
498,in[2][2]
499,in[2]
500,in
501,2
502,2
503,in[1][2] * in[2][0]
504,in[1][2]
505,in[1]
506,in
507,1
508,2
509,in[2][0]
510,in[2]
511,in
512,2
513,0
514,in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0])
515,in[0][2]
516,in[0]
517,in
518,0
519,2
520,in[1][0] * in[2][1] - in[1][1] * in[2][0]
521,in[1][0] * in[2][1]
522,in[1][0]
523,in[1]
524,in
525,1
526,0
527,in[2][1]
528,in[2]
529,in
530,2
531,1
532,in[1][1] * in[2][0]
533,in[1][1]
534,in[1]
535,in
536,1
537,1
538,in[2][0]
539,in[2]
540,in
541,2
542,0
543,if (JAS_ABS(d) < 1e-6)
544,JAS_ABS(d) < 1e-6
545,JAS_ABS(d)
546,d
547,1e-6
548,<empty>
549,return -1;
550,-1
551,1
552,out[0][0] = (in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d
553,out[0][0]
554,out[0]
555,out
556,0
557,0
558,(in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d
559,in[1][1] * in[2][2] - in[1][2] * in[2][1]
560,in[1][1] * in[2][2]
561,in[1][1]
562,in[1]
563,in
564,1
565,1
566,in[2][2]
567,in[2]
568,in
569,2
570,2
571,in[1][2] * in[2][1]
572,in[1][2]
573,in[1]
574,in
575,1
576,2
577,in[2][1]
578,in[2]
579,in
580,2
581,1
582,d
583,out[1][0] = -(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d
584,out[1][0]
585,out[1]
586,out
587,1
588,0
589,-(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d
590,-(in[1][0] * in[2][2] - in[1][2] * in[2][0])
591,in[1][0] * in[2][2] - in[1][2] * in[2][0]
592,in[1][0] * in[2][2]
593,in[1][0]
594,in[1]
595,in
596,1
597,0
598,in[2][2]
599,in[2]
600,in
601,2
602,2
603,in[1][2] * in[2][0]
604,in[1][2]
605,in[1]
606,in
607,1
608,2
609,in[2][0]
610,in[2]
611,in
612,2
613,0
614,d
615,out[2][0] = (in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d
616,out[2][0]
617,out[2]
618,out
619,2
620,0
621,(in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d
622,in[1][0] * in[2][1] - in[1][1] * in[2][0]
623,in[1][0] * in[2][1]
624,in[1][0]
625,in[1]
626,in
627,1
628,0
629,in[2][1]
630,in[2]
631,in
632,2
633,1
634,in[1][1] * in[2][0]
635,in[1][1]
636,in[1]
637,in
638,1
639,1
640,in[2][0]
641,in[2]
642,in
643,2
644,0
645,d
646,out[0][1] = -(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d
647,out[0][1]
648,out[0]
649,out
650,0
651,1
652,-(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d
653,-(in[0][1] * in[2][2] - in[0][2] * in[2][1])
654,in[0][1] * in[2][2] - in[0][2] * in[2][1]
655,in[0][1] * in[2][2]
656,in[0][1]
657,in[0]
658,in
659,0
660,1
661,in[2][2]
662,in[2]
663,in
664,2
665,2
666,in[0][2] * in[2][1]
667,in[0][2]
668,in[0]
669,in
670,0
671,2
672,in[2][1]
673,in[2]
674,in
675,2
676,1
677,d
678,out[1][1] = (in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d
679,out[1][1]
680,out[1]
681,out
682,1
683,1
684,(in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d
685,in[0][0] * in[2][2] - in[0][2] * in[2][0]
686,in[0][0] * in[2][2]
687,in[0][0]
688,in[0]
689,in
690,0
691,0
692,in[2][2]
693,in[2]
694,in
695,2
696,2
697,in[0][2] * in[2][0]
698,in[0][2]
699,in[0]
700,in
701,0
702,2
703,in[2][0]
704,in[2]
705,in
706,2
707,0
708,d
709,out[2][1] = -(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d
710,out[2][1]
711,out[2]
712,out
713,2
714,1
715,-(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d
716,-(in[0][0] * in[2][1] - in[0][1] * in[2][0])
717,in[0][0] * in[2][1] - in[0][1] * in[2][0]
718,in[0][0] * in[2][1]
719,in[0][0]
720,in[0]
721,in
722,0
723,0
724,in[2][1]
725,in[2]
726,in
727,2
728,1
729,in[0][1] * in[2][0]
730,in[0][1]
731,in[0]
732,in
733,0
734,1
735,in[2][0]
736,in[2]
737,in
738,2
739,0
740,d
741,out[0][2] = (in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d
742,out[0][2]
743,out[0]
744,out
745,0
746,2
747,(in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d
748,in[0][1] * in[1][2] - in[0][2] * in[1][1]
749,in[0][1] * in[1][2]
750,in[0][1]
751,in[0]
752,in
753,0
754,1
755,in[1][2]
756,in[1]
757,in
758,1
759,2
760,in[0][2] * in[1][1]
761,in[0][2]
762,in[0]
763,in
764,0
765,2
766,in[1][1]
767,in[1]
768,in
769,1
770,1
771,d
772,out[1][2] = -(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d
773,out[1][2]
774,out[1]
775,out
776,1
777,2
778,-(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d
779,-(in[0][0] * in[1][2] - in[1][0] * in[0][2])
780,in[0][0] * in[1][2] - in[1][0] * in[0][2]
781,in[0][0] * in[1][2]
782,in[0][0]
783,in[0]
784,in
785,0
786,0
787,in[1][2]
788,in[1]
789,in
790,1
791,2
792,in[1][0] * in[0][2]
793,in[1][0]
794,in[1]
795,in
796,1
797,0
798,in[0][2]
799,in[0]
800,in
801,0
802,2
803,d
804,out[2][2] = (in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d
805,out[2][2]
806,out[2]
807,out
808,2
809,2
810,(in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d
811,in[0][0] * in[1][1] - in[0][1] * in[1][0]
812,in[0][0] * in[1][1]
813,in[0][0]
814,in[0]
815,in
816,0
817,0
818,in[1][1]
819,in[1]
820,in
821,1
822,1
823,in[0][1] * in[1][0]
824,in[0][1]
825,in[0]
826,in
827,0
828,1
829,in[1][0]
830,in[1]
831,in
832,1
833,0
834,d
835,out[0][3] = -in[0][3]
836,out[0][3]
837,out[0]
838,out
839,0
840,3
841,-in[0][3]
842,in[0][3]
843,in[0]
844,in
845,0
846,3
847,out[1][3] = -in[1][3]
848,out[1][3]
849,out[1]
850,out
851,1
852,3
853,-in[1][3]
854,in[1][3]
855,in[1]
856,in
857,1
858,3
859,out[2][3] = -in[2][3]
860,out[2][3]
861,out[2]
862,out
863,2
864,3
865,-in[2][3]
866,in[2][3]
867,in[2]
868,in
869,2
870,3
871,return 0;
872,0
873,RET
874,jas_cmreal_t out[3][4]
875,jas_cmreal_t in[3][4]
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
static int jas_cmshapmat_invmat(jas_cmreal_t out[3][4], jas_cmreal_t in[3][4]) {
jas_cmreal_t d;
d = in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1]) 	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0]) 	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0]);
out[0][0] = (in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d;
out[1][0] = -(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d;
out[2][0] = (in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d;
out[0][1] = -(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d;
out[1][1] = (in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d;
out[2][1] = -(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d;
out[0][2] = (in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d;
out[1][2] = -(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d;
out[2][2] = (in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d;
out[0][3] = -in[0][3];
out[1][3] = -in[1][3];
out[2][3] = -in[2][3];
return 0;
=======================
