-----label-----
0
-----code-----
int jpc_floorlog2(int x)
{
	int y;

	/* The argument must be positive. */
	assert(x > 0);

	y = 0;
	while (x > 1) {
		x >>= 1;
		++y;
	}
	return y;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
10,11
11,12
11,13
13,14
15,16
16,17
16,18
17,18
19,20
19,21
20,21
23,24
24,25
24,26
25,26
28,29
28,30
29,30
29,31
30,31
33,34
33,35
34,35
35,36
35,37
36,37
39,40
40,41
41,42
43,44
44,45
-----nextToken-----
2,4,6,8,12,14,18,21,22,26,27,31,32,37,38,42,45
-----computeFrom-----
19,20
19,21
24,25
24,26
29,30
29,31
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int jpc_floorlog2(int x){	int y;	/* The argument must be positive. */	assert(x > 0);	y = 0;	while (x > 1) {		x >>= 1;		++y;	}	return y;}
int
jpc_floorlog2(int x)
jpc_floorlog2
int x
int
x
x
{	int y;	/* The argument must be positive. */	assert(x > 0);	y = 0;	while (x > 1) {		x >>= 1;		++y;	}	return y;}
int y;
int y;
int
y
y
assert(x > 0);
assert(x > 0)
assert
assert
x > 0
x
x
0
y = 0;
y = 0
y
y
0
while (x > 1) {		x >>= 1;		++y;	}
x > 1
x
x
1
{		x >>= 1;		++y;	}
x >>= 1;
x >>= 1
x
x
1
++y;
++y
y
y
return y;
y
y
-----joern-----
(10,14,0)
(15,14,0)
(6,18,0)
(5,11,0)
(3,3,0)
(4,22,0)
(14,15,0)
(11,3,0)
(19,11,0)
(11,16,0)
(20,18,0)
(9,22,0)
(12,9,0)
(18,22,0)
(8,3,0)
(1,12,0)
(3,17,0)
(18,9,0)
(21,3,0)
(0,9,0)
(2,22,0)
(12,17,0)
(15,22,0)
(3,16,0)
(14,16,0)
(7,9,0)
(13,14,0)
(19,5,1)
(3,3,1)
(9,7,1)
(20,18,1)
(14,10,1)
(3,21,1)
(12,1,1)
(11,3,1)
(0,15,1)
(7,0,1)
(18,9,1)
(15,14,1)
(5,9,1)
(21,8,1)
(12,9,1)
(11,16,1)
(14,16,1)
(8,11,1)
(18,6,1)
(11,19,1)
(1,3,1)
(3,16,1)
(10,13,1)
(5,12,1)
(6,11,1)
(12,11,2)
(8,11,2)
(11,3,2)
(11,11,2)
(1,11,2)
(5,11,2)
(18,9,2)
(11,16,2)
(12,9,2)
(21,11,2)
(20,18,2)
(3,3,2)
(14,16,2)
(15,14,2)
(19,11,2)
(3,11,2)
(3,16,2)
-----------------------------------
(0,y)
(1,y)
(2,y)
(3,x >>= 1)
(4,while (x > 1)
(5,x)
(6,y)
(7,0)
(8,x)
(9,y = 0)
(10,0)
(11,x > 1)
(12,++y)
(13,x)
(14,x > 0)
(15,assert(x > 0)
(16,int x)
(17,)
(18,return y;)
(19,1)
(20,RET)
(21,1)
(22,)
-----cfg-----
(19,23)
(19,28)
(23,26)
(7,12)
(26,19)
(11,15)
(28,30)
(12,11)
(15,19)
-----path-----
7,12,11,15,19,23,26,19,28,30
7,12,11,15,19,28,30
-----cfgNode-----
5,<global>
6,<empty>
7,int jpc_floorlog2 (int x)
8,int x
9,<empty>
10,int y
11,assert(x > 0)
12,x > 0
13,x
14,0
15,y = 0
16,y
17,0
18,while (x > 1)
19,x > 1
20,x
21,1
22,<empty>
23,x >>= 1
24,x
25,1
26,++y
27,y
28,return y;
29,y
30,RET
31,int x
32,RET
33,int jpc_floorlog2 (int x)
34,int x
35,<empty>
36,int y
37,assert(x > 0)
38,x > 0
39,x
40,0
41,y = 0
42,y
43,0
44,while (x > 1)
45,x > 1
46,x
47,1
48,<empty>
49,x >>= 1
50,x
51,1
52,++y
53,y
54,return y;
55,y
56,RET
57,int x
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
int jpc_floorlog2(int x) {
int y;
assert(x > 0);
y = 0;
return y;
=======================
