-----label-----
0
-----code-----
static int jpc_putcommacode(jpc_bitstream_t *out, int n)
{
	assert(n >= 0);

	while (--n >= 0) {
		if (jpc_bitstream_putbit(out, 1) == EOF) {
			return -1;
		}
	}
	if (jpc_bitstream_putbit(out, 0) == EOF) {
		return -1;
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
16,17
17,18
17,19
18,19
20,21
20,22
21,22
24,25
24,26
25,26
25,27
26,27
27,28
30,31
31,32
31,33
32,33
32,34
33,34
33,35
33,36
34,35
36,37
39,40
41,42
42,43
43,44
45,46
45,47
46,47
46,48
47,48
47,49
47,50
48,49
50,51
53,54
55,56
56,57
57,58
59,60
-----nextToken-----
2,4,7,9,10,12,14,19,22,23,28,29,35,37,38,40,44,49,51,52,54,58,60
-----computeFrom-----
20,21
20,22
25,26
25,27
32,33
32,34
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static int jpc_putcommacode(jpc_bitstream_t *out, int n){	assert(n >= 0);	while (--n >= 0) {		if (jpc_bitstream_putbit(out, 1) == EOF) {			return -1;		}	}	if (jpc_bitstream_putbit(out, 0) == EOF) {		return -1;	}	return 0;}
static int
jpc_putcommacode(jpc_bitstream_t *out, int n)
jpc_putcommacode
jpc_bitstream_t *out
jpc_bitstream_t
jpc_bitstream_t
*out
*
out
int n
int
n
n
{	assert(n >= 0);	while (--n >= 0) {		if (jpc_bitstream_putbit(out, 1) == EOF) {			return -1;		}	}	if (jpc_bitstream_putbit(out, 0) == EOF) {		return -1;	}	return 0;}
assert(n >= 0);
assert(n >= 0)
assert
assert
n >= 0
n
n
0
while (--n >= 0) {		if (jpc_bitstream_putbit(out, 1) == EOF) {			return -1;		}	}
--n >= 0
--n
n
n
0
{		if (jpc_bitstream_putbit(out, 1) == EOF) {			return -1;		}	}
if (jpc_bitstream_putbit(out, 1) == EOF) {			return -1;		}
jpc_bitstream_putbit(out, 1) == EOF
jpc_bitstream_putbit(out, 1)
jpc_bitstream_putbit
jpc_bitstream_putbit
out
out
1
EOF
EOF
{			return -1;		}
return -1;
-1
1
if (jpc_bitstream_putbit(out, 0) == EOF) {		return -1;	}
jpc_bitstream_putbit(out, 0) == EOF
jpc_bitstream_putbit(out, 0)
jpc_bitstream_putbit
jpc_bitstream_putbit
out
out
0
EOF
EOF
{		return -1;	}
return -1;
-1
1
return 0;
0
-----joern-----
(18,25,0)
(29,26,0)
(6,16,0)
(28,15,0)
(5,16,0)
(1,12,0)
(13,15,0)
(22,19,0)
(19,30,0)
(20,19,0)
(33,17,0)
(26,27,0)
(2,12,0)
(3,27,0)
(24,10,0)
(15,28,0)
(17,33,0)
(19,4,0)
(0,28,0)
(32,21,0)
(3,32,0)
(16,31,0)
(23,9,0)
(11,16,0)
(35,17,0)
(9,32,0)
(14,28,0)
(33,30,0)
(10,12,0)
(16,6,0)
(3,10,0)
(4,12,0)
(27,8,0)
(34,33,0)
(28,31,0)
(4,19,0)
(7,6,0)
(24,6,1)
(17,35,1)
(3,10,1)
(9,23,1)
(14,0,1)
(34,4,1)
(35,33,1)
(22,20,1)
(0,17,1)
(33,34,1)
(26,29,1)
(6,7,1)
(27,26,1)
(33,30,1)
(16,11,1)
(16,31,1)
(3,32,1)
(28,14,1)
(7,16,1)
(10,24,1)
(19,30,1)
(3,27,1)
(15,13,1)
(11,5,1)
(6,16,1)
(28,31,1)
(13,28,1)
(23,6,1)
(5,17,1)
(29,15,1)
(19,22,1)
(15,28,1)
(17,33,1)
(34,15,1)
(32,9,1)
(4,19,1)
(28,17,2)
(16,17,2)
(0,17,2)
(16,31,2)
(15,28,2)
(17,33,2)
(6,16,2)
(24,6,2)
(3,10,2)
(19,30,2)
(32,6,2)
(23,6,2)
(3,27,2)
(5,17,2)
(13,17,2)
(10,6,2)
(29,15,2)
(7,17,2)
(17,15,2)
(27,15,2)
(14,17,2)
(35,15,2)
(4,19,2)
(3,32,2)
(28,31,2)
(9,6,2)
(11,17,2)
(33,15,2)
(15,17,2)
(33,30,2)
(6,17,2)
(26,15,2)
(34,15,2)
-----------------------------------
(0,out)
(1,while (--n >= 0)
(2,if (jpc_bitstream_putbit(out, 0)
(3,RET)
(4,assert(n >= 0)
(5,out)
(6,jpc_bitstream_putbit(out, 0)
(7,EOF)
(8,)
(9,-1)
(10,return 0;)
(11,0)
(12,)
(13,EOF)
(14,1)
(15,jpc_bitstream_putbit(out, 1)
(16,jpc_bitstream_putbit(out, 0)
(17,--n >= 0)
(18,if (jpc_bitstream_putbit(out, 1)
(19,n >= 0)
(20,n)
(21,)
(22,0)
(23,1)
(24,0)
(25,)
(26,-1)
(27,return -1;)
(28,jpc_bitstream_putbit(out, 1)
(29,1)
(30,int n)
(31,jpc_bitstream_t *out)
(32,return -1;)
(33,--n)
(34,n)
(35,0)
-----cfg-----
(32,39)
(32,41)
(33,32)
(38,43)
(39,38)
(7,12)
(41,43)
(11,17)
(12,11)
(16,23)
(16,33)
(17,16)
(22,17)
(22,29)
(23,22)
(28,43)
(29,28)
-----path-----
7,12,11,17,16,23,22,29,28,43
7,12,11,17,16,33,32,39,38,43
7,12,11,17,16,33,32,41,43
-----cfgNode-----
5,<global>
6,<empty>
7,int jpc_putcommacode (jpc_bitstream_t *out,int n)
8,jpc_bitstream_t *out
9,int n
10,<empty>
11,assert(n >= 0)
12,n >= 0
13,n
14,0
15,while (--n >= 0)
16,--n >= 0
17,--n
18,n
19,0
20,<empty>
21,if (jpc_bitstream_putbit(out, 1) == EOF)
22,jpc_bitstream_putbit(out, 1) == EOF
23,jpc_bitstream_putbit(out, 1)
24,out
25,1
26,EOF
27,<empty>
28,return -1;
29,-1
30,1
31,if (jpc_bitstream_putbit(out, 0) == EOF)
32,jpc_bitstream_putbit(out, 0) == EOF
33,jpc_bitstream_putbit(out, 0)
34,out
35,0
36,EOF
37,<empty>
38,return -1;
39,-1
40,1
41,return 0;
42,0
43,RET
44,jpc_bitstream_t *out
45,int n
46,RET
47,int jpc_putcommacode (jpc_bitstream_t *out,int n)
48,jpc_bitstream_t *out
49,int n
50,<empty>
51,assert(n >= 0)
52,n >= 0
53,n
54,0
55,while (--n >= 0)
56,--n >= 0
57,--n
58,n
59,0
60,<empty>
61,if (jpc_bitstream_putbit(out, 1) == EOF)
62,jpc_bitstream_putbit(out, 1) == EOF
63,jpc_bitstream_putbit(out, 1)
64,out
65,1
66,EOF
67,<empty>
68,return -1;
69,-1
70,1
71,if (jpc_bitstream_putbit(out, 0) == EOF)
72,jpc_bitstream_putbit(out, 0) == EOF
73,jpc_bitstream_putbit(out, 0)
74,out
75,0
76,EOF
77,<empty>
78,return -1;
79,-1
80,1
81,return 0;
82,0
83,RET
84,jpc_bitstream_t *out
85,int n
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
static int jpc_putcommacode(jpc_bitstream_t *out, int n) {
assert(n >= 0);
return 0;
=======================
