-----label-----
0
-----code-----
int jpc_getmagctxno(int f)
{
	int n;

	if (!(f & JPC_REFINE)) {
		n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;
	} else {
		n = 2;
	}

	assert(n < JPC_NUMMAGCTXS);
	return JPC_MAGCTXNO + n;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
10,11
11,12
11,13
13,14
15,16
15,17
15,18
16,17
17,18
18,19
18,20
19,20
21,22
23,24
24,25
25,26
25,27
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
34,35
38,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
-----nextToken-----
2,4,6,8,12,14,20,22,27,32,35,36,37,42,43,47,50,52,56,58
-----computeFrom-----
18,19
18,20
25,26
25,27
30,31
30,32
40,41
40,42
48,49
48,50
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
int jpc_getmagctxno(int f){	int n;	if (!(f & JPC_REFINE)) {		n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;	} else {		n = 2;	}	assert(n < JPC_NUMMAGCTXS);	return JPC_MAGCTXNO + n;}
int
jpc_getmagctxno(int f)
jpc_getmagctxno
int f
int
f
f
{	int n;	if (!(f & JPC_REFINE)) {		n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;	} else {		n = 2;	}	assert(n < JPC_NUMMAGCTXS);	return JPC_MAGCTXNO + n;}
int n;
int n;
int
n
n
if (!(f & JPC_REFINE)) {		n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;	} else {		n = 2;	}
!(f & JPC_REFINE)
(f & JPC_REFINE)
f & JPC_REFINE
f
f
JPC_REFINE
JPC_REFINE
{		n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;	}
n = (f & (JPC_OTHSIGMSK)) ? 1 : 0;
n = (f & (JPC_OTHSIGMSK)) ? 1 : 0
n
n
(f & (JPC_OTHSIGMSK)) ? 1 : 0
(f & (JPC_OTHSIGMSK))
f & (JPC_OTHSIGMSK)
f
f
(JPC_OTHSIGMSK)
JPC_OTHSIGMSK
JPC_OTHSIGMSK
1
0
{		n = 2;	}
n = 2;
n = 2
n
n
2
assert(n < JPC_NUMMAGCTXS);
assert(n < JPC_NUMMAGCTXS)
assert
assert
n < JPC_NUMMAGCTXS
n
n
JPC_NUMMAGCTXS
JPC_NUMMAGCTXS
return JPC_MAGCTXNO + n;
JPC_MAGCTXNO + n
JPC_MAGCTXNO
JPC_MAGCTXNO
n
n
-----joern-----
(10,9,0)
(3,5,0)
(14,9,0)
(10,21,0)
(2,33,0)
(5,31,0)
(8,9,0)
(39,5,0)
(38,24,0)
(26,31,0)
(32,31,0)
(15,40,0)
(16,37,0)
(35,31,0)
(27,23,0)
(43,31,0)
(29,10,0)
(13,9,0)
(19,16,0)
(41,16,0)
(22,31,0)
(0,10,0)
(1,2,0)
(11,44,0)
(12,40,0)
(39,44,0)
(16,33,0)
(39,15,0)
(24,12,0)
(25,2,0)
(39,28,0)
(30,15,0)
(37,9,0)
(24,4,0)
(28,31,0)
(7,23,0)
(12,24,0)
(44,36,0)
(6,17,0)
(42,24,0)
(18,28,0)
(37,16,0)
(23,20,0)
(16,19,1)
(39,8,1)
(2,1,1)
(23,7,1)
(25,10,1)
(24,4,1)
(39,5,1)
(8,32,1)
(15,30,1)
(16,33,1)
(27,37,1)
(24,42,1)
(28,18,1)
(39,28,1)
(34,23,1)
(10,0,1)
(41,2,1)
(38,23,1)
(42,38,1)
(23,20,1)
(2,33,1)
(11,2,1)
(18,34,1)
(12,24,1)
(8,34,1)
(30,12,1)
(37,16,1)
(8,35,1)
(39,15,1)
(7,27,1)
(39,44,1)
(19,41,1)
(5,3,1)
(0,29,1)
(10,21,1)
(44,11,1)
(3,34,1)
(1,25,1)
(2,33,2)
(34,23,2)
(28,34,2)
(23,20,2)
(39,28,2)
(39,15,2)
(39,5,2)
(42,23,2)
(10,21,2)
(30,23,2)
(7,2,2)
(41,2,2)
(16,2,2)
(8,34,2)
(15,23,2)
(18,34,2)
(39,44,2)
(3,34,2)
(19,2,2)
(11,2,2)
(27,2,2)
(23,2,2)
(38,23,2)
(37,16,2)
(24,4,2)
(12,24,2)
(12,23,2)
(44,2,2)
(37,2,2)
(16,33,2)
(5,34,2)
(24,23,2)
-----------------------------------
(0,0)
(1,JPC_COX_INS)
(2,qmfbid == JPC_COX_INS)
(3,2)
(4,int orient)
(5,return 2;)
(6,switch (orient)
(7,0)
(8,abort()
(9,)
(10,numlvls = 0)
(11,0)
(12,assert(orient == JPC_TSFB_LL)
(13,if (qmfbid == JPC_COX_INS)
(14,if (lvlno == 0)
(15,return 0;)
(16,qmfbid == JPC_COX_RFT)
(17,)
(18,1)
(19,JPC_COX_RFT)
(20,int lvlno)
(21,int numlvls)
(22,case JPC_TSFB_HH:)
(23,lvlno == 0)
(24,orient == JPC_TSFB_LL)
(25,qmfbid)
(26,case JPC_TSFB_LH:)
(27,lvlno)
(28,return 1;)
(29,numlvls)
(30,0)
(31,)
(32,break;)
(33,int qmfbid)
(34,orient)
(35,break;)
(36,)
(37,assert(qmfbid == JPC_COX_RFT)
(38,orient)
(39,RET)
(40,)
(41,qmfbid)
(42,JPC_TSFB_LL)
(43,case JPC_TSFB_HL:)
(44,return 0;)
-----cfg-----
(17,31)
(34,38)
(35,34)
(19,17)
(20,19)
(7,13)
(27,31)
(12,20)
(12,27)
(13,12)
(30,35)
(31,30)
-----path-----
7,13,12,20,19,17,31,30,35,34,38
7,13,12,27,31,30,35,34,38
-----cfgNode-----
5,<global>
6,<empty>
7,int jpc_getmagctxno (int f)
8,int f
9,<empty>
10,int n
11,if (!(f & JPC_REFINE))
12,!(f & JPC_REFINE)
13,f & JPC_REFINE
14,f
15,JPC_REFINE
16,<empty>
17,n = (f & (JPC_OTHSIGMSK)) ? 1 : 0
18,n
19,(f & (JPC_OTHSIGMSK)) ? 1 : 0
20,f & (JPC_OTHSIGMSK)
21,f
22,JPC_OTHSIGMSK
23,1
24,0
25,else
26,<empty>
27,n = 2
28,n
29,2
30,assert(n < JPC_NUMMAGCTXS)
31,n < JPC_NUMMAGCTXS
32,n
33,JPC_NUMMAGCTXS
34,return JPC_MAGCTXNO + n;
35,JPC_MAGCTXNO + n
36,JPC_MAGCTXNO
37,n
38,RET
39,int f
40,RET
41,int jpc_getmagctxno (int f)
42,int f
43,<empty>
44,int n
45,if (!(f & JPC_REFINE))
46,!(f & JPC_REFINE)
47,f & JPC_REFINE
48,f
49,JPC_REFINE
50,<empty>
51,n = (f & (JPC_OTHSIGMSK)) ? 1 : 0
52,n
53,(f & (JPC_OTHSIGMSK)) ? 1 : 0
54,f & (JPC_OTHSIGMSK)
55,f
56,JPC_OTHSIGMSK
57,1
58,0
59,else
60,<empty>
61,n = 2
62,n
63,2
64,assert(n < JPC_NUMMAGCTXS)
65,n < JPC_NUMMAGCTXS
66,n
67,JPC_NUMMAGCTXS
68,return JPC_MAGCTXNO + n;
69,JPC_MAGCTXNO + n
70,JPC_MAGCTXNO
71,n
72,RET
73,int f
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
int jpc_getmagctxno(int f) {
int n;
n = 2;
assert(n < JPC_NUMMAGCTXS);
return JPC_MAGCTXNO + n;
=======================
