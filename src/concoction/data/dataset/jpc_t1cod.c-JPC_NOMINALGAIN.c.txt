-----label-----
0
-----code-----
int JPC_NOMINALGAIN(int qmfbid, int numlvls, int lvlno, int orient)
{
	/* Avoid compiler warnings about unused parameters. */
	numlvls = 0;

if (qmfbid == JPC_COX_INS) {
	return 0;
}
	assert(qmfbid == JPC_COX_RFT);
	if (lvlno == 0) {
		assert(orient == JPC_TSFB_LL);
		return 0;
	} else {
		switch (orient) {
		case JPC_TSFB_LH:
		case JPC_TSFB_HL:
			return 1;
			break;
		case JPC_TSFB_HH:
			return 2;
			break;
		}
	}
	abort();
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
7,8
9,10
9,11
11,12
13,14
13,15
15,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
27,28
27,29
28,29
28,30
29,30
31,32
33,34
34,35
36,37
37,38
37,39
38,39
40,41
40,42
41,42
43,44
45,46
45,47
45,48
46,47
46,48
47,48
50,51
50,52
51,52
52,53
52,54
53,54
55,56
55,57
56,57
58,59
60,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
66,70
66,71
66,72
66,73
67,68
68,69
70,71
71,72
73,74
76,77
77,78
79,80
82,83
83,84
84,85
-----nextToken-----
2,4,6,8,10,12,14,16,18,20,25,26,30,32,35,39,42,44,48,49,54,57,59,61,65,69,72,74,75,78,80,81,85
-----computeFrom-----
23,24
23,25
28,29
28,30
40,41
40,42
46,47
46,48
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;CompoundStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ReturnStatement;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ReturnStatement;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
int JPC_NOMINALGAIN(int qmfbid, int numlvls, int lvlno, int orient){	/* Avoid compiler warnings about unused parameters. */	numlvls = 0;if (qmfbid == JPC_COX_INS) {	return 0;}	assert(qmfbid == JPC_COX_RFT);	if (lvlno == 0) {		assert(orient == JPC_TSFB_LL);		return 0;	} else {		switch (orient) {		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		}	}	abort();}
int
JPC_NOMINALGAIN(int qmfbid, int numlvls, int lvlno, int orient)
JPC_NOMINALGAIN
int qmfbid
int
qmfbid
qmfbid
int numlvls
int
numlvls
numlvls
int lvlno
int
lvlno
lvlno
int orient
int
orient
orient
{	/* Avoid compiler warnings about unused parameters. */	numlvls = 0;if (qmfbid == JPC_COX_INS) {	return 0;}	assert(qmfbid == JPC_COX_RFT);	if (lvlno == 0) {		assert(orient == JPC_TSFB_LL);		return 0;	} else {		switch (orient) {		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		}	}	abort();}
numlvls = 0;
numlvls = 0
numlvls
numlvls
0
if (qmfbid == JPC_COX_INS) {	return 0;}
qmfbid == JPC_COX_INS
qmfbid
qmfbid
JPC_COX_INS
JPC_COX_INS
{	return 0;}
return 0;
0
assert(qmfbid == JPC_COX_RFT);
assert(qmfbid == JPC_COX_RFT)
assert
assert
qmfbid == JPC_COX_RFT
qmfbid
qmfbid
JPC_COX_RFT
JPC_COX_RFT
if (lvlno == 0) {		assert(orient == JPC_TSFB_LL);		return 0;	} else {		switch (orient) {		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		}	}
lvlno == 0
lvlno
lvlno
0
{		assert(orient == JPC_TSFB_LL);		return 0;	}
assert(orient == JPC_TSFB_LL);
assert(orient == JPC_TSFB_LL)
assert
assert
orient == JPC_TSFB_LL
orient
orient
JPC_TSFB_LL
JPC_TSFB_LL
return 0;
0
{		switch (orient) {		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		}	}
switch (orient) {		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		}
orient
orient
{		case JPC_TSFB_LH:		case JPC_TSFB_HL:			return 1;			break;		case JPC_TSFB_HH:			return 2;			break;		}
case JPC_TSFB_LH:
JPC_TSFB_LH
JPC_TSFB_LH
case JPC_TSFB_HL:
JPC_TSFB_HL
JPC_TSFB_HL
return 1;
1
break;
case JPC_TSFB_HH:
JPC_TSFB_HH
JPC_TSFB_HH
return 2;
2
break;
abort();
abort()
abort
abort
-----joern-----
(10,9,0)
(3,5,0)
(14,9,0)
(10,21,0)
(2,33,0)
(5,31,0)
(8,9,0)
(39,5,0)
(38,24,0)
(26,31,0)
(32,31,0)
(15,40,0)
(16,37,0)
(35,31,0)
(27,23,0)
(43,31,0)
(29,10,0)
(13,9,0)
(19,16,0)
(41,16,0)
(22,31,0)
(0,10,0)
(1,2,0)
(11,44,0)
(12,40,0)
(39,44,0)
(16,33,0)
(39,15,0)
(24,12,0)
(25,2,0)
(39,28,0)
(30,15,0)
(37,9,0)
(24,4,0)
(28,31,0)
(7,23,0)
(12,24,0)
(44,36,0)
(6,17,0)
(42,24,0)
(18,28,0)
(37,16,0)
(23,20,0)
(16,19,1)
(39,8,1)
(2,1,1)
(23,7,1)
(25,10,1)
(24,4,1)
(39,5,1)
(8,32,1)
(15,30,1)
(16,33,1)
(27,37,1)
(24,42,1)
(28,18,1)
(39,28,1)
(34,23,1)
(10,0,1)
(41,2,1)
(38,23,1)
(42,38,1)
(23,20,1)
(2,33,1)
(11,2,1)
(18,34,1)
(12,24,1)
(8,34,1)
(30,12,1)
(37,16,1)
(8,35,1)
(39,15,1)
(7,27,1)
(39,44,1)
(19,41,1)
(5,3,1)
(0,29,1)
(10,21,1)
(44,11,1)
(3,34,1)
(1,25,1)
(2,33,2)
(34,23,2)
(28,34,2)
(23,20,2)
(39,28,2)
(39,15,2)
(39,5,2)
(42,23,2)
(10,21,2)
(30,23,2)
(7,2,2)
(41,2,2)
(16,2,2)
(8,34,2)
(15,23,2)
(18,34,2)
(39,44,2)
(3,34,2)
(19,2,2)
(11,2,2)
(27,2,2)
(23,2,2)
(38,23,2)
(37,16,2)
(24,4,2)
(12,24,2)
(12,23,2)
(44,2,2)
(37,2,2)
(16,33,2)
(5,34,2)
(24,23,2)
-----------------------------------
(0,0)
(1,JPC_COX_INS)
(2,qmfbid == JPC_COX_INS)
(3,2)
(4,int orient)
(5,return 2;)
(6,switch (orient)
(7,0)
(8,abort()
(9,)
(10,numlvls = 0)
(11,0)
(12,assert(orient == JPC_TSFB_LL)
(13,if (qmfbid == JPC_COX_INS)
(14,if (lvlno == 0)
(15,return 0;)
(16,qmfbid == JPC_COX_RFT)
(17,)
(18,1)
(19,JPC_COX_RFT)
(20,int lvlno)
(21,int numlvls)
(22,case JPC_TSFB_HH:)
(23,lvlno == 0)
(24,orient == JPC_TSFB_LL)
(25,qmfbid)
(26,case JPC_TSFB_LH:)
(27,lvlno)
(28,return 1;)
(29,numlvls)
(30,0)
(31,)
(32,break;)
(33,int qmfbid)
(34,orient)
(35,break;)
(36,)
(37,assert(qmfbid == JPC_COX_RFT)
(38,orient)
(39,RET)
(40,)
(41,qmfbid)
(42,JPC_TSFB_LL)
(43,case JPC_TSFB_HL:)
(44,return 0;)
-----cfg-----
(32,36)
(33,32)
(36,56)
(7,13)
(13,17)
(47,56)
(17,21)
(17,24)
(52,56)
(21,56)
(23,28)
(55,56)
(24,23)
(28,33)
(28,55)
(28,47)
(28,52)
-----path-----
7,13,17,21,56
7,13,17,24,23,28,33,32,36,56
7,13,17,24,23,28,55,56
7,13,17,24,23,28,47,56
7,13,17,24,23,28,52,56
-----cfgNode-----
5,<global>
6,<empty>
7,int JPC_NOMINALGAIN (int qmfbid,int numlvls,int lvlno,int orient)
8,int qmfbid
9,int numlvls
10,int lvlno
11,int orient
12,<empty>
13,numlvls = 0
14,numlvls
15,0
16,if (qmfbid == JPC_COX_INS)
17,qmfbid == JPC_COX_INS
18,qmfbid
19,JPC_COX_INS
20,<empty>
21,return 0;
22,0
23,assert(qmfbid == JPC_COX_RFT)
24,qmfbid == JPC_COX_RFT
25,qmfbid
26,JPC_COX_RFT
27,if (lvlno == 0)
28,lvlno == 0
29,lvlno
30,0
31,<empty>
32,assert(orient == JPC_TSFB_LL)
33,orient == JPC_TSFB_LL
34,orient
35,JPC_TSFB_LL
36,return 0;
37,0
38,else
39,<empty>
40,switch(orient)
41,orient
42,<empty>
43,case JPC_TSFB_LH:
44,JPC_TSFB_LH
45,case JPC_TSFB_HL:
46,JPC_TSFB_HL
47,return 1;
48,1
49,break;
50,case JPC_TSFB_HH:
51,JPC_TSFB_HH
52,return 2;
53,2
54,break;
55,abort()
56,RET
57,int qmfbid
58,int numlvls
59,int lvlno
60,int orient
61,RET
62,int JPC_NOMINALGAIN (int qmfbid,int numlvls,int lvlno,int orient)
63,int qmfbid
64,int numlvls
65,int lvlno
66,int orient
67,<empty>
68,numlvls = 0
69,numlvls
70,0
71,if (qmfbid == JPC_COX_INS)
72,qmfbid == JPC_COX_INS
73,qmfbid
74,JPC_COX_INS
75,<empty>
76,return 0;
77,0
78,assert(qmfbid == JPC_COX_RFT)
79,qmfbid == JPC_COX_RFT
80,qmfbid
81,JPC_COX_RFT
82,if (lvlno == 0)
83,lvlno == 0
84,lvlno
85,0
86,<empty>
87,assert(orient == JPC_TSFB_LL)
88,orient == JPC_TSFB_LL
89,orient
90,JPC_TSFB_LL
91,return 0;
92,0
93,else
94,<empty>
95,switch(orient)
96,orient
97,<empty>
98,case JPC_TSFB_LH:
99,JPC_TSFB_LH
100,case JPC_TSFB_HL:
101,JPC_TSFB_HL
102,return 1;
103,1
104,break;
105,case JPC_TSFB_HH:
106,JPC_TSFB_HH
107,return 2;
108,2
109,break;
110,abort()
111,RET
112,int qmfbid
113,int numlvls
114,int lvlno
115,int orient
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
int JPC_NOMINALGAIN(int qmfbid, int numlvls, int lvlno, int orient) {
numlvls = 0;
assert(qmfbid == JPC_COX_RFT);
switch(orient)
return 2;
=======================
