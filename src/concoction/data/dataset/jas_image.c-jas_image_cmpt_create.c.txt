-----label-----
0
-----code-----
static jas_image_cmpt_t *jas_image_cmpt_create(uint_fast32_t tlx, uint_fast32_t tly,
  uint_fast32_t hstep, uint_fast32_t vstep, uint_fast32_t width, uint_fast32_t
  height, uint_fast16_t depth, bool sgnd, uint_fast32_t inmem)
{
	jas_image_cmpt_t *cmpt;
	long size;

	if (!(cmpt = jas_malloc(sizeof(jas_image_cmpt_t)))) {
		return 0;
	}

	cmpt->type_ = JAS_IMAGE_CT_UNKNOWN;
	cmpt->tlx_ = tlx;
	cmpt->tly_ = tly;
	cmpt->hstep_ = hstep;
	cmpt->vstep_ = vstep;
	cmpt->width_ = width;
	cmpt->height_ = height;
	cmpt->prec_ = depth;
	cmpt->sgnd_ = sgnd;
	cmpt->stream_ = 0;
	cmpt->cps_ = (depth + 7) / 8;

	size = cmpt->width_ * cmpt->height_ * cmpt->cps_;
	cmpt->stream_ = (inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile();
	if (!cmpt->stream_) {
		jas_image_cmpt_destroy(cmpt);
		return 0;
	}

	/* Zero the component data.  This isn't necessary, but it is
	convenient for debugging purposes. */
	if (jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||
	  jas_stream_putc(cmpt->stream_, 0) == EOF ||
	  jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0) {
		jas_image_cmpt_destroy(cmpt);
		return 0;
	}

	return cmpt;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
4,11
4,12
4,13
4,14
4,15
7,8
7,9
8,9
10,11
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
37,38
37,39
38,39
40,41
42,43
42,44
44,45
46,47
46,48
47,48
49,50
51,52
51,53
51,54
51,55
51,56
51,57
51,58
51,59
51,60
51,61
51,62
51,63
51,64
51,65
51,66
51,67
51,68
51,69
51,70
52,53
53,54
53,55
54,55
56,57
56,58
59,60
60,61
60,62
62,63
64,65
64,66
65,66
66,67
67,68
67,69
68,69
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
79,80
81,82
82,83
82,84
83,84
83,85
84,85
87,88
89,90
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
98,100
99,100
99,101
100,101
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
121,122
122,123
122,124
123,124
123,125
124,125
127,128
129,130
130,131
130,132
131,132
131,133
132,133
135,136
137,138
138,139
138,140
139,140
139,141
140,141
143,144
145,146
146,147
146,148
147,148
147,149
148,149
151,152
153,154
154,155
154,156
155,156
155,157
156,157
160,161
161,162
161,163
162,163
162,164
163,164
166,167
166,168
167,168
168,169
168,170
169,170
173,174
174,175
174,176
175,176
177,178
177,179
178,179
178,180
179,180
179,181
180,181
183,184
183,185
184,185
187,188
187,189
188,189
191,192
192,193
192,194
193,194
193,195
194,195
197,198
197,199
197,200
198,199
199,200
201,202
201,203
201,204
202,203
205,206
207,208
208,209
210,211
210,212
211,212
212,213
212,214
213,214
216,217
216,218
217,218
218,219
218,220
219,220
221,222
223,224
225,226
225,227
226,227
226,228
227,228
227,229
228,229
228,230
229,230
229,231
229,232
229,233
230,231
232,233
232,234
233,234
236,237
236,238
237,238
240,241
243,244
243,245
244,245
244,246
244,247
245,246
247,248
247,249
248,249
252,253
254,255
254,256
255,256
255,257
255,258
255,259
256,257
258,259
258,260
259,260
263,264
266,267
266,268
267,268
268,269
268,270
269,270
271,272
273,274
275,276
276,277
-----nextToken-----
3,5,6,9,11,14,16,19,21,24,26,29,31,34,36,39,41,43,45,48,50,55,57,58,61,63,69,72,76,77,80,85,86,88,93,94,96,101,102,104,109,110,112,117,118,120,125,126,128,133,134,136,141,142,144,149,150,152,157,158,159,164,165,170,171,172,176,181,182,185,186,189,190,195,196,200,203,204,206,209,214,215,220,222,224,231,234,235,238,239,241,242,246,249,250,251,253,257,260,261,262,264,265,270,272,274,277
-----computeFrom-----
67,68
67,69
82,83
82,84
90,91
90,92
98,99
98,100
106,107
106,108
114,115
114,116
122,123
122,124
130,131
130,132
138,139
138,140
146,147
146,148
154,155
154,156
161,162
161,163
166,167
166,168
168,169
168,170
174,175
174,176
177,178
177,179
178,179
178,180
192,193
192,194
226,227
226,228
227,228
227,229
228,229
228,230
236,237
236,238
243,244
243,245
254,255
254,256
-----guardedBy-----
260,272
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static jas_image_cmpt_t *jas_image_cmpt_create(uint_fast32_t tlx, uint_fast32_t tly,  uint_fast32_t hstep, uint_fast32_t vstep, uint_fast32_t width, uint_fast32_t  height, uint_fast16_t depth, bool sgnd, uint_fast32_t inmem){	jas_image_cmpt_t *cmpt;	long size;	if (!(cmpt = jas_malloc(sizeof(jas_image_cmpt_t)))) {		return 0;	}	cmpt->type_ = JAS_IMAGE_CT_UNKNOWN;	cmpt->tlx_ = tlx;	cmpt->tly_ = tly;	cmpt->hstep_ = hstep;	cmpt->vstep_ = vstep;	cmpt->width_ = width;	cmpt->height_ = height;	cmpt->prec_ = depth;	cmpt->sgnd_ = sgnd;	cmpt->stream_ = 0;	cmpt->cps_ = (depth + 7) / 8;	size = cmpt->width_ * cmpt->height_ * cmpt->cps_;	cmpt->stream_ = (inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile();	if (!cmpt->stream_) {		jas_image_cmpt_destroy(cmpt);		return 0;	}	/* Zero the component data.  This isn't necessary, but it is	convenient for debugging purposes. */	if (jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||	  jas_stream_putc(cmpt->stream_, 0) == EOF ||	  jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0) {		jas_image_cmpt_destroy(cmpt);		return 0;	}	return cmpt;}
static jas_image_cmpt_t
jas_image_cmpt_t
*jas_image_cmpt_create(uint_fast32_t tlx, uint_fast32_t tly,  uint_fast32_t hstep, uint_fast32_t vstep, uint_fast32_t width, uint_fast32_t  height, uint_fast16_t depth, bool sgnd, uint_fast32_t inmem)
*
jas_image_cmpt_create
uint_fast32_t tlx
uint_fast32_t
uint_fast32_t
tlx
tlx
uint_fast32_t tly
uint_fast32_t
uint_fast32_t
tly
tly
uint_fast32_t hstep
uint_fast32_t
uint_fast32_t
hstep
hstep
uint_fast32_t vstep
uint_fast32_t
uint_fast32_t
vstep
vstep
uint_fast32_t width
uint_fast32_t
uint_fast32_t
width
width
uint_fast32_t  height
uint_fast32_t
uint_fast32_t
height
height
uint_fast16_t depth
uint_fast16_t
uint_fast16_t
depth
depth
bool sgnd
bool
sgnd
sgnd
uint_fast32_t inmem
uint_fast32_t
uint_fast32_t
inmem
inmem
{	jas_image_cmpt_t *cmpt;	long size;	if (!(cmpt = jas_malloc(sizeof(jas_image_cmpt_t)))) {		return 0;	}	cmpt->type_ = JAS_IMAGE_CT_UNKNOWN;	cmpt->tlx_ = tlx;	cmpt->tly_ = tly;	cmpt->hstep_ = hstep;	cmpt->vstep_ = vstep;	cmpt->width_ = width;	cmpt->height_ = height;	cmpt->prec_ = depth;	cmpt->sgnd_ = sgnd;	cmpt->stream_ = 0;	cmpt->cps_ = (depth + 7) / 8;	size = cmpt->width_ * cmpt->height_ * cmpt->cps_;	cmpt->stream_ = (inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile();	if (!cmpt->stream_) {		jas_image_cmpt_destroy(cmpt);		return 0;	}	/* Zero the component data.  This isn't necessary, but it is	convenient for debugging purposes. */	if (jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||	  jas_stream_putc(cmpt->stream_, 0) == EOF ||	  jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0) {		jas_image_cmpt_destroy(cmpt);		return 0;	}	return cmpt;}
jas_image_cmpt_t *cmpt;
jas_image_cmpt_t *cmpt;
jas_image_cmpt_t
jas_image_cmpt_t
*cmpt
*
cmpt
long size;
long size;
long
size
size
if (!(cmpt = jas_malloc(sizeof(jas_image_cmpt_t)))) {		return 0;	}
!(cmpt = jas_malloc(sizeof(jas_image_cmpt_t)))
(cmpt = jas_malloc(sizeof(jas_image_cmpt_t)))
cmpt = jas_malloc(sizeof(jas_image_cmpt_t))
cmpt
cmpt
jas_malloc(sizeof(jas_image_cmpt_t))
jas_malloc
jas_malloc
sizeof(jas_image_cmpt_t)
jas_image_cmpt_t
jas_image_cmpt_t
jas_image_cmpt_t

{		return 0;	}
return 0;
0
cmpt->type_ = JAS_IMAGE_CT_UNKNOWN;
cmpt->type_ = JAS_IMAGE_CT_UNKNOWN
cmpt->type_
cmpt
cmpt
type_
JAS_IMAGE_CT_UNKNOWN
JAS_IMAGE_CT_UNKNOWN
cmpt->tlx_ = tlx;
cmpt->tlx_ = tlx
cmpt->tlx_
cmpt
cmpt
tlx_
tlx
tlx
cmpt->tly_ = tly;
cmpt->tly_ = tly
cmpt->tly_
cmpt
cmpt
tly_
tly
tly
cmpt->hstep_ = hstep;
cmpt->hstep_ = hstep
cmpt->hstep_
cmpt
cmpt
hstep_
hstep
hstep
cmpt->vstep_ = vstep;
cmpt->vstep_ = vstep
cmpt->vstep_
cmpt
cmpt
vstep_
vstep
vstep
cmpt->width_ = width;
cmpt->width_ = width
cmpt->width_
cmpt
cmpt
width_
width
width
cmpt->height_ = height;
cmpt->height_ = height
cmpt->height_
cmpt
cmpt
height_
height
height
cmpt->prec_ = depth;
cmpt->prec_ = depth
cmpt->prec_
cmpt
cmpt
prec_
depth
depth
cmpt->sgnd_ = sgnd;
cmpt->sgnd_ = sgnd
cmpt->sgnd_
cmpt
cmpt
sgnd_
sgnd
sgnd
cmpt->stream_ = 0;
cmpt->stream_ = 0
cmpt->stream_
cmpt
cmpt
stream_
0
cmpt->cps_ = (depth + 7) / 8;
cmpt->cps_ = (depth + 7) / 8
cmpt->cps_
cmpt
cmpt
cps_
(depth + 7) / 8
(depth + 7)
depth + 7
depth
depth
7
8
size = cmpt->width_ * cmpt->height_ * cmpt->cps_;
size = cmpt->width_ * cmpt->height_ * cmpt->cps_
size
size
cmpt->width_ * cmpt->height_ * cmpt->cps_
cmpt->width_ * cmpt->height_
cmpt->width_
cmpt
cmpt
width_
cmpt->height_
cmpt
cmpt
height_
cmpt->cps_
cmpt
cmpt
cps_
cmpt->stream_ = (inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile();
cmpt->stream_ = (inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile()
cmpt->stream_
cmpt
cmpt
stream_
(inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile()
(inmem)
inmem
inmem
jas_stream_memopen(0, size)
jas_stream_memopen
jas_stream_memopen
0
size
size
jas_stream_tmpfile()
jas_stream_tmpfile
jas_stream_tmpfile
if (!cmpt->stream_) {		jas_image_cmpt_destroy(cmpt);		return 0;	}
!cmpt->stream_
cmpt->stream_
cmpt
cmpt
stream_
{		jas_image_cmpt_destroy(cmpt);		return 0;	}
jas_image_cmpt_destroy(cmpt);
jas_image_cmpt_destroy(cmpt)
jas_image_cmpt_destroy
jas_image_cmpt_destroy
cmpt
cmpt
return 0;
0
if (jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||	  jas_stream_putc(cmpt->stream_, 0) == EOF ||	  jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0) {		jas_image_cmpt_destroy(cmpt);		return 0;	}
jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||	  jas_stream_putc(cmpt->stream_, 0) == EOF ||	  jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0
jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||	  jas_stream_putc(cmpt->stream_, 0) == EOF
jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0
jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET)
jas_stream_seek
jas_stream_seek
cmpt->stream_
cmpt
cmpt
stream_
size - 1
size
size
1
SEEK_SET
SEEK_SET
0
jas_stream_putc(cmpt->stream_, 0) == EOF
jas_stream_putc(cmpt->stream_, 0)
jas_stream_putc
jas_stream_putc
cmpt->stream_
cmpt
cmpt
stream_
0
EOF
EOF
jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0
jas_stream_seek(cmpt->stream_, 0, SEEK_SET)
jas_stream_seek
jas_stream_seek
cmpt->stream_
cmpt
cmpt
stream_
0
SEEK_SET
SEEK_SET
0
{		jas_image_cmpt_destroy(cmpt);		return 0;	}
jas_image_cmpt_destroy(cmpt);
jas_image_cmpt_destroy(cmpt)
jas_image_cmpt_destroy
jas_image_cmpt_destroy
cmpt
cmpt
return 0;
0
return cmpt;
cmpt
cmpt
-----joern-----
(95,130,0)
(100,82,0)
(25,67,0)
(32,129,0)
(115,80,0)
(107,7,0)
(1,39,0)
(72,65,0)
(129,67,0)
(52,62,0)
(68,39,0)
(62,108,0)
(6,86,0)
(74,127,0)
(34,106,0)
(50,45,0)
(9,7,0)
(62,106,0)
(51,111,0)
(4,124,0)
(73,130,0)
(10,85,0)
(97,113,0)
(107,33,0)
(58,82,0)
(45,14,0)
(4,85,0)
(13,16,0)
(100,85,0)
(4,118,0)
(4,127,0)
(127,82,0)
(117,14,0)
(60,81,0)
(90,25,0)
(31,36,0)
(11,95,0)
(3,80,0)
(0,46,0)
(85,87,0)
(65,67,0)
(26,111,0)
(121,62,0)
(128,25,0)
(66,16,0)
(28,108,0)
(92,100,0)
(125,106,0)
(7,130,0)
(78,25,0)
(7,27,0)
(77,122,0)
(5,67,0)
(46,108,0)
(104,13,0)
(8,127,0)
(13,27,0)
(36,124,0)
(37,4,0)
(57,86,0)
(111,51,0)
(45,61,0)
(111,130,0)
(13,130,0)
(75,77,0)
(13,129,0)
(81,122,0)
(43,45,0)
(21,124,0)
(62,124,0)
(14,45,0)
(65,87,0)
(42,21,0)
(95,87,0)
(29,61,0)
(93,4,0)
(16,13,0)
(98,7,0)
(129,13,0)
(56,107,0)
(67,65,0)
(116,82,0)
(83,62,0)
(113,82,0)
(76,21,0)
(20,25,0)
(102,95,0)
(35,122,0)
(51,27,0)
(16,107,0)
(30,130,0)
(87,33,0)
(70,108,0)
(19,25,0)
(86,108,0)
(59,24,0)
(110,33,0)
(106,62,0)
(103,13,0)
(88,51,0)
(122,33,0)
(49,13,0)
(112,4,0)
(40,54,0)
(109,37,0)
(61,122,0)
(63,39,0)
(17,39,0)
(54,130,0)
(53,129,0)
(18,39,0)
(84,65,0)
(62,120,0)
(5,82,0)
(23,51,0)
(91,39,0)
(85,100,0)
(85,4,0)
(12,25,0)
(55,39,0)
(64,13,0)
(15,100,0)
(119,33,0)
(47,67,0)
(44,39,0)
(129,87,0)
(96,16,0)
(37,107,0)
(21,33,0)
(45,81,0)
(61,45,0)
(25,27,0)
(80,77,0)
(80,27,0)
(100,67,0)
(122,77,0)
(95,27,0)
(2,36,0)
(45,124,0)
(81,45,0)
(41,13,0)
(77,80,0)
(77,130,0)
(106,108,0)
(36,33,0)
(45,33,0)
(127,4,0)
(22,48,0)
(7,107,0)
(123,5,0)
(14,122,0)
(126,25,0)
(101,14,0)
(67,33,0)
(79,87,0)
(105,5,0)
(4,37,0)
(25,130,0)
(71,81,0)
(114,62,0)
(87,95,0)
(13,67,0)
(86,67,0)
(99,61,0)
(94,33,0)
(38,33,0)
(69,37,0)
(62,124,1)
(82,58,1)
(43,50,1)
(13,16,1)
(11,102,1)
(127,82,1)
(111,130,1)
(62,106,1)
(28,25,1)
(106,108,1)
(62,108,1)
(84,72,1)
(21,42,1)
(52,121,1)
(56,87,1)
(97,4,1)
(74,8,1)
(121,83,1)
(13,27,1)
(25,130,1)
(45,61,1)
(40,21,1)
(15,10,1)
(86,57,1)
(111,51,1)
(0,62,1)
(104,41,1)
(83,114,1)
(26,54,1)
(81,60,1)
(108,70,1)
(112,93,1)
(22,13,1)
(60,71,1)
(93,5,1)
(34,125,1)
(13,104,1)
(71,14,1)
(79,45,1)
(67,65,1)
(5,67,1)
(123,82,1)
(46,0,1)
(54,130,1)
(13,130,1)
(102,79,1)
(6,46,1)
(45,124,1)
(53,32,1)
(130,73,1)
(95,27,1)
(100,82,1)
(5,105,1)
(4,37,1)
(77,80,1)
(95,11,1)
(13,129,1)
(14,117,1)
(58,116,1)
(92,15,1)
(78,20,1)
(76,5,1)
(126,67,1)
(64,103,1)
(77,130,1)
(129,53,1)
(69,109,1)
(16,107,1)
(32,64,1)
(28,59,1)
(8,37,1)
(45,14,1)
(12,19,1)
(103,36,1)
(129,87,1)
(100,92,1)
(7,27,1)
(36,124,1)
(6,108,1)
(101,43,1)
(51,88,1)
(2,31,1)
(59,25,1)
(96,66,1)
(86,108,1)
(37,69,1)
(80,27,1)
(77,75,1)
(7,98,1)
(21,124,1)
(36,2,1)
(46,108,1)
(113,82,1)
(54,40,1)
(25,67,1)
(73,30,1)
(129,67,1)
(20,12,1)
(65,87,1)
(114,86,1)
(122,77,1)
(23,26,1)
(66,129,1)
(49,16,1)
(125,52,1)
(7,130,1)
(47,107,1)
(89,111,1)
(85,100,1)
(26,130,1)
(61,122,1)
(87,95,1)
(95,130,1)
(65,84,1)
(14,122,1)
(128,90,1)
(123,113,1)
(57,6,1)
(50,122,1)
(3,35,1)
(19,126,1)
(127,74,1)
(25,27,1)
(99,81,1)
(4,127,1)
(4,85,1)
(61,29,1)
(75,80,1)
(88,23,1)
(37,107,1)
(5,82,1)
(86,67,1)
(51,27,1)
(10,112,1)
(85,87,1)
(72,47,1)
(113,97,1)
(13,67,1)
(45,81,1)
(98,9,1)
(25,128,1)
(116,22,1)
(80,115,1)
(90,78,1)
(31,86,1)
(4,124,1)
(105,123,1)
(117,101,1)
(29,99,1)
(35,111,1)
(81,122,1)
(16,96,1)
(9,56,1)
(106,34,1)
(115,3,1)
(100,67,1)
(41,49,1)
(109,85,1)
(42,76,1)
(107,7,1)
(70,28,1)
(116,13,1)
(127,5,2)
(32,111,2)
(65,111,2)
(7,27,2)
(25,130,2)
(67,65,2)
(88,111,2)
(106,108,2)
(35,111,2)
(4,85,2)
(4,124,2)
(57,86,2)
(77,80,2)
(106,86,2)
(117,111,2)
(13,130,2)
(46,108,2)
(2,111,2)
(16,111,2)
(87,95,2)
(41,111,2)
(25,27,2)
(80,27,2)
(46,86,2)
(4,127,2)
(128,111,2)
(107,7,2)
(11,111,2)
(26,111,2)
(102,111,2)
(61,111,2)
(122,77,2)
(40,111,2)
(122,111,2)
(23,111,2)
(19,111,2)
(109,5,2)
(92,5,2)
(103,111,2)
(74,5,2)
(114,86,2)
(21,111,2)
(83,86,2)
(104,111,2)
(121,86,2)
(14,111,2)
(99,111,2)
(93,5,2)
(25,111,2)
(62,86,2)
(54,130,2)
(113,82,2)
(75,111,2)
(105,5,2)
(6,86,2)
(77,130,2)
(45,124,2)
(79,111,2)
(129,67,2)
(111,130,2)
(53,111,2)
(51,27,2)
(100,82,2)
(95,130,2)
(43,111,2)
(16,107,2)
(13,16,2)
(58,111,2)
(21,124,2)
(25,67,2)
(3,111,2)
(85,5,2)
(37,107,2)
(20,111,2)
(100,67,2)
(77,111,2)
(71,111,2)
(36,124,2)
(50,111,2)
(57,111,2)
(52,86,2)
(36,111,2)
(66,111,2)
(13,111,2)
(98,111,2)
(123,111,2)
(9,111,2)
(56,111,2)
(4,37,2)
(123,5,2)
(61,122,2)
(15,5,2)
(7,130,2)
(13,67,2)
(105,111,2)
(125,86,2)
(4,5,2)
(45,61,2)
(82,111,2)
(64,111,2)
(60,111,2)
(6,111,2)
(107,111,2)
(5,82,2)
(78,111,2)
(65,87,2)
(81,122,2)
(22,13,2)
(86,86,2)
(51,111,2)
(101,111,2)
(126,111,2)
(70,111,2)
(62,124,2)
(115,111,2)
(129,111,2)
(31,111,2)
(90,111,2)
(108,111,2)
(45,14,2)
(112,5,2)
(45,111,2)
(81,111,2)
(95,111,2)
(42,111,2)
(54,111,2)
(29,111,2)
(86,67,2)
(59,25,2)
(69,5,2)
(28,111,2)
(10,5,2)
(111,111,2)
(111,51,2)
(34,86,2)
(62,108,2)
(76,111,2)
(85,100,2)
(116,111,2)
(62,106,2)
(13,129,2)
(80,111,2)
(100,5,2)
(87,111,2)
(97,5,2)
(5,5,2)
(67,111,2)
(5,67,2)
(72,111,2)
(85,87,2)
(7,111,2)
(84,111,2)
(37,5,2)
(47,111,2)
(8,5,2)
(13,27,2)
(129,87,2)
(96,111,2)
(113,5,2)
(14,122,2)
(45,81,2)
(127,82,2)
(86,108,2)
(49,111,2)
(86,111,2)
(5,111,2)
(0,86,2)
(95,27,2)
(12,111,2)
-----------------------------------
(0,i)
(1,cmpt)
(2,"\\n")
(3,image)
(4,fprintf(out, " f(%d,%d)
(5,i < n)
(6,i)
(7,jas_image_cmptheight(image, cmptno)
(8,buf)
(9,image)
(10,width)
(11,cmptno)
(12,0)
(13,jas_image_readcmpt2(image, cmptno, width - n, height - 1, n, 1, buf)
(14,cmpt->prec_)
(15,n)
(16,height - 1)
(17,i)
(18,for (cmptno = 0; cmptno < image->numcmpts_; ++cmptno)
(19,cmptno)
(20,0)
(21,fprintf(out, "\\n")
(22,abort()
(23,image)
(24,)
(25,jas_image_readcmpt2(image, cmptno, 0, 0, n, 1, buf)
(26,cmptno)
(27,jas_image_t *image)
(28,i)
(29,type_)
(30,cmptno)
(31,out)
(32,width)
(33,)
(34,i)
(35,cmpt)
(36,fprintf(out, "\\n")
(37,height - 1)
(38,if (jas_image_readcmpt2(image, cmptno, width - n, height - 1, n, 1, buf)
(39,)
(40,cmptno)
(41,1)
(42,"\\n")
(43,"prec=%d, sgnd=%d, cmpttype=%d\\n")
(44,n)
(45,fprintf(out, "prec=%d, sgnd=%d, cmpttype=%d\\n", cmpt->prec_,\\n\\t\\t  cmpt->sgnd_, cmpt->type_)
(46,++i)
(47,n)
(48,)
(49,n)
(50,out)
(51,image->numcmpts_)
(52,0)
(53,n)
(54,++cmptno)
(55,buf)
(56,height)
(57,n)
(58,0)
(59,abort()
(60,sgnd_)
(61,cmpt->type_)
(62,fprintf(out, " f(%d,%d)
(63,height)
(64,cmptno)
(65,JAS_MIN(16, width)
(66,height)
(67,n = JAS_MIN(16, width)
(68,width)
(69,1)
(70,0)
(71,cmpt)
(72,16)
(73,0)
(74,i)
(75,cmptno)
(76,out)
(77,image->cmpts_[cmptno])
(78,n)
(79,width)
(80,image->cmpts_)
(81,cmpt->sgnd_)
(82,i = 0)
(83," f(%d,%d)
(84,width)
(85,width - n + i)
(86,i < n)
(87,width = jas_image_cmptwidth(image, cmptno)
(88,numcmpts_)
(89,RET)
(90,1)
(91,cmptno)
(92,i)
(93,out)
(94,if (jas_image_readcmpt2(image, cmptno, 0, 0, n, 1, buf)
(95,jas_image_cmptwidth(image, cmptno)
(96,1)
(97,i)
(98,cmptno)
(99,cmpt)
(100,n + i)
(101,cmpt)
(102,image)
(103,image)
(104,buf)
(105,n)
(106,buf[i])
(107,height = jas_image_cmptheight(image, cmptno)
(108,i = 0)
(109,height)
(110,for (i = 0; i < n; ++i)
(111,cmptno < image->numcmpts_)
(112," f(%d,%d)
(113,++i)
(114,out)
(115,cmpts_)
(116,i)
(117,prec_)
(118,)
(119,for (i = 0; i < n; ++i)
(120,)
(121,i)
(122,cmpt = image->cmpts_[cmptno])
(123,i)
(124,FILE *out)
(125,buf)
(126,image)
(127,buf[i])
(128,buf)
(129,width - n)
(130,cmptno = 0)
-----cfg-----
(129,127)
(130,126)
(135,124)
(7,25)
(136,135)
(137,136)
(139,137)
(142,123)
(143,142)
(144,143)
(146,144)
(21,28)
(21,33)
(22,21)
(151,153)
(24,22)
(153,157)
(25,24)
(155,157)
(28,157)
(30,38)
(31,30)
(33,31)
(35,43)
(36,35)
(38,36)
(40,48)
(41,40)
(43,41)
(45,53)
(46,45)
(48,46)
(50,58)
(51,50)
(53,51)
(55,63)
(56,55)
(58,56)
(60,68)
(61,60)
(63,61)
(65,73)
(66,65)
(68,66)
(70,78)
(71,70)
(73,71)
(75,83)
(76,75)
(78,76)
(80,95)
(81,85)
(83,81)
(84,80)
(85,84)
(89,105)
(91,89)
(92,101)
(93,98)
(95,93)
(96,92)
(98,96)
(99,91)
(101,99)
(102,116)
(103,111)
(103,108)
(105,103)
(106,102)
(108,106)
(111,106)
(113,118)
(113,129)
(114,113)
(116,114)
(118,120)
(120,157)
(123,151)
(123,155)
(124,123)
(124,146)
(125,124)
(125,139)
(126,125)
(127,130)
-----path-----
7,25,24,22,21,28,157
7,25,24,22,21,33,31,30,38,36,35,43,41,40,48,46,45,53,51,50,58,56,55,63,61,60,68,66,65,73,71,70,78,76,75,83,81,85,84,80,95,93,98,96,92,101,99,91,89,105,103
-----cfgNode-----
5,<global>
6,<empty>
7,jas_image_cmpt_t jas_image_cmpt_create (uint_fast32_t tlx,uint_fast32_t tly,uint_fast32_t hstep,uint_fast32_t vstep,uint_fast32_t width,uint_fast32_t
8,  height,uint_fast16_t depth,bool sgnd,uint_fast32_t inmem)
9,uint_fast32_t tlx
10,uint_fast32_t tly
11,uint_fast32_t hstep
12,uint_fast32_t vstep
13,uint_fast32_t width
14,uint_fast32_t
15,  height
16,uint_fast16_t depth
17,bool sgnd
18,uint_fast32_t inmem
19,<empty>
20,jas_image_cmpt_t* cmpt
21,long size
22,if (!(cmpt = jas_malloc(sizeof(jas_image_cmpt_t))))
23,!(cmpt = jas_malloc(sizeof(jas_image_cmpt_t)))
24,cmpt = jas_malloc(sizeof(jas_image_cmpt_t))
25,cmpt
26,jas_malloc(sizeof(jas_image_cmpt_t))
27,sizeof(jas_image_cmpt_t)
28,jas_image_cmpt_t
29,<empty>
30,return 0;
31,0
32,cmpt->type_ = JAS_IMAGE_CT_UNKNOWN
33,cmpt->type_
34,cmpt
35,type_
36,JAS_IMAGE_CT_UNKNOWN
37,cmpt->tlx_ = tlx
38,cmpt->tlx_
39,cmpt
40,tlx_
41,tlx
42,cmpt->tly_ = tly
43,cmpt->tly_
44,cmpt
45,tly_
46,tly
47,cmpt->hstep_ = hstep
48,cmpt->hstep_
49,cmpt
50,hstep_
51,hstep
52,cmpt->vstep_ = vstep
53,cmpt->vstep_
54,cmpt
55,vstep_
56,vstep
57,cmpt->width_ = width
58,cmpt->width_
59,cmpt
60,width_
61,width
62,cmpt->height_ = height
63,cmpt->height_
64,cmpt
65,height_
66,height
67,cmpt->prec_ = depth
68,cmpt->prec_
69,cmpt
70,prec_
71,depth
72,cmpt->sgnd_ = sgnd
73,cmpt->sgnd_
74,cmpt
75,sgnd_
76,sgnd
77,cmpt->stream_ = 0
78,cmpt->stream_
79,cmpt
80,stream_
81,0
82,cmpt->cps_ = (depth + 7) / 8
83,cmpt->cps_
84,cmpt
85,cps_
86,(depth + 7) / 8
87,depth + 7
88,depth
89,7
90,8
91,size = cmpt->width_ * cmpt->height_ * cmpt->cps_
92,size
93,cmpt->width_ * cmpt->height_ * cmpt->cps_
94,cmpt->width_ * cmpt->height_
95,cmpt->width_
96,cmpt
97,width_
98,cmpt->height_
99,cmpt
100,height_
101,cmpt->cps_
102,cmpt
103,cps_
104,cmpt->stream_ = (inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile()
105,cmpt->stream_
106,cmpt
107,stream_
108,(inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile()
109,inmem
110,jas_stream_memopen(0, size)
111,0
112,size
113,jas_stream_tmpfile()
114,if (!cmpt->stream_)
115,!cmpt->stream_
116,cmpt->stream_
117,cmpt
118,stream_
119,<empty>
120,jas_image_cmpt_destroy(cmpt)
121,cmpt
122,return 0;
123,0
124,if (jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||
125,	  jas_stream_putc(cmpt->stream_, 0) == EOF ||
126,	  jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0)
127,jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||
128,	  jas_stream_putc(cmpt->stream_, 0) == EOF ||
129,	  jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0
130,jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||
131,	  jas_stream_putc(cmpt->stream_, 0) == EOF
132,jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0
133,jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET)
134,cmpt->stream_
135,cmpt
136,stream_
137,size - 1
138,size
139,1
140,SEEK_SET
141,0
142,jas_stream_putc(cmpt->stream_, 0) == EOF
143,jas_stream_putc(cmpt->stream_, 0)
144,cmpt->stream_
145,cmpt
146,stream_
147,0
148,EOF
149,jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0
150,jas_stream_seek(cmpt->stream_, 0, SEEK_SET)
151,cmpt->stream_
152,cmpt
153,stream_
154,0
155,SEEK_SET
156,0
157,<empty>
158,jas_image_cmpt_destroy(cmpt)
159,cmpt
160,return 0;
161,0
162,return cmpt;
163,cmpt
164,RET
165,uint_fast32_t tlx
166,uint_fast32_t tly
167,uint_fast32_t hstep
168,uint_fast32_t vstep
169,uint_fast32_t width
170,uint_fast32_t
171,  height
172,uint_fast16_t depth
173,bool sgnd
174,uint_fast32_t inmem
175,RET
176,jas_image_cmpt_t jas_image_cmpt_create (uint_fast32_t tlx,uint_fast32_t tly,uint_fast32_t hstep,uint_fast32_t vstep,uint_fast32_t width,uint_fast32_t
177,  height,uint_fast16_t depth,bool sgnd,uint_fast32_t inmem)
178,uint_fast32_t tlx
179,uint_fast32_t tly
180,uint_fast32_t hstep
181,uint_fast32_t vstep
182,uint_fast32_t width
183,uint_fast32_t
184,  height
185,uint_fast16_t depth
186,bool sgnd
187,uint_fast32_t inmem
188,<empty>
189,jas_image_cmpt_t* cmpt
190,long size
191,if (!(cmpt = jas_malloc(sizeof(jas_image_cmpt_t))))
192,!(cmpt = jas_malloc(sizeof(jas_image_cmpt_t)))
193,cmpt = jas_malloc(sizeof(jas_image_cmpt_t))
194,cmpt
195,jas_malloc(sizeof(jas_image_cmpt_t))
196,sizeof(jas_image_cmpt_t)
197,jas_image_cmpt_t
198,<empty>
199,return 0;
200,0
201,cmpt->type_ = JAS_IMAGE_CT_UNKNOWN
202,cmpt->type_
203,cmpt
204,type_
205,JAS_IMAGE_CT_UNKNOWN
206,cmpt->tlx_ = tlx
207,cmpt->tlx_
208,cmpt
209,tlx_
210,tlx
211,cmpt->tly_ = tly
212,cmpt->tly_
213,cmpt
214,tly_
215,tly
216,cmpt->hstep_ = hstep
217,cmpt->hstep_
218,cmpt
219,hstep_
220,hstep
221,cmpt->vstep_ = vstep
222,cmpt->vstep_
223,cmpt
224,vstep_
225,vstep
226,cmpt->width_ = width
227,cmpt->width_
228,cmpt
229,width_
230,width
231,cmpt->height_ = height
232,cmpt->height_
233,cmpt
234,height_
235,height
236,cmpt->prec_ = depth
237,cmpt->prec_
238,cmpt
239,prec_
240,depth
241,cmpt->sgnd_ = sgnd
242,cmpt->sgnd_
243,cmpt
244,sgnd_
245,sgnd
246,cmpt->stream_ = 0
247,cmpt->stream_
248,cmpt
249,stream_
250,0
251,cmpt->cps_ = (depth + 7) / 8
252,cmpt->cps_
253,cmpt
254,cps_
255,(depth + 7) / 8
256,depth + 7
257,depth
258,7
259,8
260,size = cmpt->width_ * cmpt->height_ * cmpt->cps_
261,size
262,cmpt->width_ * cmpt->height_ * cmpt->cps_
263,cmpt->width_ * cmpt->height_
264,cmpt->width_
265,cmpt
266,width_
267,cmpt->height_
268,cmpt
269,height_
270,cmpt->cps_
271,cmpt
272,cps_
273,cmpt->stream_ = (inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile()
274,cmpt->stream_
275,cmpt
276,stream_
277,(inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile()
278,inmem
279,jas_stream_memopen(0, size)
280,0
281,size
282,jas_stream_tmpfile()
283,if (!cmpt->stream_)
284,!cmpt->stream_
285,cmpt->stream_
286,cmpt
287,stream_
288,<empty>
289,jas_image_cmpt_destroy(cmpt)
290,cmpt
291,return 0;
292,0
293,if (jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||
294,	  jas_stream_putc(cmpt->stream_, 0) == EOF ||
295,	  jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0)
296,jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||
297,	  jas_stream_putc(cmpt->stream_, 0) == EOF ||
298,	  jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0
299,jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0 ||
300,	  jas_stream_putc(cmpt->stream_, 0) == EOF
301,jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET) < 0
302,jas_stream_seek(cmpt->stream_, size - 1, SEEK_SET)
303,cmpt->stream_
304,cmpt
305,stream_
306,size - 1
307,size
308,1
309,SEEK_SET
310,0
311,jas_stream_putc(cmpt->stream_, 0) == EOF
312,jas_stream_putc(cmpt->stream_, 0)
313,cmpt->stream_
314,cmpt
315,stream_
316,0
317,EOF
318,jas_stream_seek(cmpt->stream_, 0, SEEK_SET) < 0
319,jas_stream_seek(cmpt->stream_, 0, SEEK_SET)
320,cmpt->stream_
321,cmpt
322,stream_
323,0
324,SEEK_SET
325,0
326,<empty>
327,jas_image_cmpt_destroy(cmpt)
328,cmpt
329,return 0;
330,0
331,return cmpt;
332,cmpt
333,RET
334,uint_fast32_t tlx
335,uint_fast32_t tly
336,uint_fast32_t hstep
337,uint_fast32_t vstep
338,uint_fast32_t width
339,uint_fast32_t
340,  height
341,uint_fast16_t depth
342,bool sgnd
343,uint_fast32_t inmem
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
static jas_image_cmpt_t *jas_image_cmpt_create(uint_fast32_t tlx, uint_fast32_t tly,   uint_fast32_t hstep, uint_fast32_t vstep, uint_fast32_t width, uint_fast32_t   height, uint_fast16_t depth, bool sgnd, uint_fast32_t inmem) {
jas_image_cmpt_t *cmpt;
long size;
cmpt->type_ = JAS_IMAGE_CT_UNKNOWN;
cmpt->tlx_ = tlx;
cmpt->tly_ = tly;
cmpt->hstep_ = hstep;
cmpt->vstep_ = vstep;
cmpt->width_ = width;
cmpt->height_ = height;
cmpt->prec_ = depth;
cmpt->sgnd_ = sgnd;
cmpt->stream_ = 0;
cmpt->cps_ = (depth + 7) / 8;
size = cmpt->width_ * cmpt->height_ * cmpt->cps_;
cmpt->stream_ = (inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile();
return cmpt;
=======================
