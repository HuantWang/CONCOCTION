-----label-----
0
-----code-----
static int jpc_putnumnewpasses(jpc_bitstream_t *out, int n)
{
	int ret;

	if (n <= 0) {
		return -1;
	} else if (n == 1) {
		ret = jpc_bitstream_putbit(out, 0);
	} else if (n == 2) {
		ret = jpc_bitstream_putbits(out, 2, 2);
	} else if (n <= 5) {
		ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3));
	} else if (n <= 36) {
		ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6));
	} else if (n <= 164) {
		ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37));
	} else {
		/* The standard has no provision for encoding a larger value.
		In practice, however, it is highly unlikely that this
		limitation will ever be encountered. */
		return -1;
	}

	return (ret != EOF) ? 0 : (-1);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
16,17
17,18
17,19
19,20
21,22
21,23
21,24
22,23
22,24
23,24
26,27
27,28
28,29
30,31
30,32
30,33
31,32
31,33
32,33
35,36
36,37
37,38
37,39
38,39
40,41
40,42
40,43
41,42
43,44
46,47
46,48
46,49
47,48
47,49
48,49
51,52
52,53
53,54
53,55
54,55
56,57
56,58
56,59
56,60
57,58
59,60
63,64
63,65
63,66
64,65
64,66
65,66
68,69
69,70
70,71
70,72
71,72
73,74
73,75
73,76
73,77
74,75
76,77
79,80
79,81
81,82
82,83
82,84
83,84
86,87
86,88
86,89
87,88
87,89
88,89
91,92
92,93
93,94
93,95
94,95
96,97
96,98
96,99
96,100
97,98
99,100
102,103
102,104
104,105
105,106
105,107
106,107
109,110
109,111
109,112
110,111
110,112
111,112
114,115
115,116
116,117
116,118
117,118
119,120
119,121
119,122
119,123
120,121
122,123
125,126
125,127
127,128
128,129
128,130
129,130
132,133
133,134
134,135
136,137
137,138
137,139
137,140
138,139
139,140
139,141
140,141
142,143
145,146
146,147
-----nextToken-----
2,4,7,9,10,12,14,18,20,24,25,29,33,34,39,42,44,45,49,50,55,58,60,61,62,66,67,72,75,77,78,80,84,85,89,90,95,98,100,101,103,107,108,112,113,118,121,123,124,126,130,131,135,141,143,144,147
-----computeFrom-----
22,23
22,24
31,32
31,33
37,38
37,39
47,48
47,49
53,54
53,55
64,65
64,66
70,71
70,72
79,80
79,81
82,83
82,84
87,88
87,89
93,94
93,95
102,103
102,104
105,106
105,107
110,111
110,112
116,117
116,118
125,126
125,127
128,129
128,130
139,140
139,141
-----guardedBy-----
66,84
89,107
112,130
-----guardedByNegation-----
24,130
33,130
49,130
66,130
89,130
-----lastLexicalUse-----
66,130
89,130
-----jump-----
66,130
89,130
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;LiteralExpression;
-----ast_node-----
static int jpc_putnumnewpasses(jpc_bitstream_t *out, int n){	int ret;	if (n <= 0) {		return -1;	} else if (n == 1) {		ret = jpc_bitstream_putbit(out, 0);	} else if (n == 2) {		ret = jpc_bitstream_putbits(out, 2, 2);	} else if (n <= 5) {		ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3));	} else if (n <= 36) {		ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6));	} else if (n <= 164) {		ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37));	} else {		/* The standard has no provision for encoding a larger value.		In practice, however, it is highly unlikely that this		limitation will ever be encountered. */		return -1;	}	return (ret != EOF) ? 0 : (-1);}
static int
jpc_putnumnewpasses(jpc_bitstream_t *out, int n)
jpc_putnumnewpasses
jpc_bitstream_t *out
jpc_bitstream_t
jpc_bitstream_t
*out
*
out
int n
int
n
n
{	int ret;	if (n <= 0) {		return -1;	} else if (n == 1) {		ret = jpc_bitstream_putbit(out, 0);	} else if (n == 2) {		ret = jpc_bitstream_putbits(out, 2, 2);	} else if (n <= 5) {		ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3));	} else if (n <= 36) {		ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6));	} else if (n <= 164) {		ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37));	} else {		/* The standard has no provision for encoding a larger value.		In practice, however, it is highly unlikely that this		limitation will ever be encountered. */		return -1;	}	return (ret != EOF) ? 0 : (-1);}
int ret;
int ret;
int
ret
ret
if (n <= 0) {		return -1;	} else if (n == 1) {		ret = jpc_bitstream_putbit(out, 0);	} else if (n == 2) {		ret = jpc_bitstream_putbits(out, 2, 2);	} else if (n <= 5) {		ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3));	} else if (n <= 36) {		ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6));	} else if (n <= 164) {		ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37));	} else {		/* The standard has no provision for encoding a larger value.		In practice, however, it is highly unlikely that this		limitation will ever be encountered. */		return -1;	}
n <= 0
n
n
0
{		return -1;	}
return -1;
-1
1
if (n == 1) {		ret = jpc_bitstream_putbit(out, 0);	} else if (n == 2) {		ret = jpc_bitstream_putbits(out, 2, 2);	} else if (n <= 5) {		ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3));	} else if (n <= 36) {		ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6));	} else if (n <= 164) {		ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37));	} else {		/* The standard has no provision for encoding a larger value.		In practice, however, it is highly unlikely that this		limitation will ever be encountered. */		return -1;	}
n == 1
n
n
1
{		ret = jpc_bitstream_putbit(out, 0);	}
ret = jpc_bitstream_putbit(out, 0);
ret = jpc_bitstream_putbit(out, 0)
ret
ret
jpc_bitstream_putbit(out, 0)
jpc_bitstream_putbit
jpc_bitstream_putbit
out
out
0
if (n == 2) {		ret = jpc_bitstream_putbits(out, 2, 2);	} else if (n <= 5) {		ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3));	} else if (n <= 36) {		ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6));	} else if (n <= 164) {		ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37));	} else {		/* The standard has no provision for encoding a larger value.		In practice, however, it is highly unlikely that this		limitation will ever be encountered. */		return -1;	}
n == 2
n
n
2
{		ret = jpc_bitstream_putbits(out, 2, 2);	}
ret = jpc_bitstream_putbits(out, 2, 2);
ret = jpc_bitstream_putbits(out, 2, 2)
ret
ret
jpc_bitstream_putbits(out, 2, 2)
jpc_bitstream_putbits
jpc_bitstream_putbits
out
out
2
2
if (n <= 5) {		ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3));	} else if (n <= 36) {		ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6));	} else if (n <= 164) {		ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37));	} else {		/* The standard has no provision for encoding a larger value.		In practice, however, it is highly unlikely that this		limitation will ever be encountered. */		return -1;	}
n <= 5
n
n
5
{		ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3));	}
ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3));
ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3))
ret
ret
jpc_bitstream_putbits(out, 4, 0xc | (n - 3))
jpc_bitstream_putbits
jpc_bitstream_putbits
out
out
4
0xc | (n - 3)
0xc
(n - 3)
n - 3
n
n
3
if (n <= 36) {		ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6));	} else if (n <= 164) {		ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37));	} else {		/* The standard has no provision for encoding a larger value.		In practice, however, it is highly unlikely that this		limitation will ever be encountered. */		return -1;	}
n <= 36
n
n
36
{		ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6));	}
ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6));
ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6))
ret
ret
jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6))
jpc_bitstream_putbits
jpc_bitstream_putbits
out
out
9
0x1e0 | (n - 6)
0x1e0
(n - 6)
n - 6
n
n
6
if (n <= 164) {		ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37));	} else {		/* The standard has no provision for encoding a larger value.		In practice, however, it is highly unlikely that this		limitation will ever be encountered. */		return -1;	}
n <= 164
n
n
164
{		ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37));	}
ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37));
ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37))
ret
ret
jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37))
jpc_bitstream_putbits
jpc_bitstream_putbits
out
out
16
0xff80 | (n - 37)
0xff80
(n - 37)
n - 37
n
n
37
{		/* The standard has no provision for encoding a larger value.		In practice, however, it is highly unlikely that this		limitation will ever be encountered. */		return -1;	}
return -1;
-1
1
return (ret != EOF) ? 0 : (-1);
(ret != EOF) ? 0 : (-1)
(ret != EOF)
ret != EOF
ret
ret
EOF
EOF
0
(-1)
-1
1
-----joern-----
(18,25,0)
(29,26,0)
(6,16,0)
(28,15,0)
(5,16,0)
(1,12,0)
(13,15,0)
(22,19,0)
(19,30,0)
(20,19,0)
(33,17,0)
(26,27,0)
(2,12,0)
(3,27,0)
(24,10,0)
(15,28,0)
(17,33,0)
(19,4,0)
(0,28,0)
(32,21,0)
(3,32,0)
(16,31,0)
(23,9,0)
(11,16,0)
(35,17,0)
(9,32,0)
(14,28,0)
(33,30,0)
(10,12,0)
(16,6,0)
(3,10,0)
(4,12,0)
(27,8,0)
(34,33,0)
(28,31,0)
(4,19,0)
(7,6,0)
(24,6,1)
(17,35,1)
(3,10,1)
(9,23,1)
(14,0,1)
(34,4,1)
(35,33,1)
(22,20,1)
(0,17,1)
(33,34,1)
(26,29,1)
(6,7,1)
(27,26,1)
(33,30,1)
(16,11,1)
(16,31,1)
(3,32,1)
(28,14,1)
(7,16,1)
(10,24,1)
(19,30,1)
(3,27,1)
(15,13,1)
(11,5,1)
(6,16,1)
(28,31,1)
(13,28,1)
(23,6,1)
(5,17,1)
(29,15,1)
(19,22,1)
(15,28,1)
(17,33,1)
(34,15,1)
(32,9,1)
(4,19,1)
(28,17,2)
(16,17,2)
(0,17,2)
(16,31,2)
(15,28,2)
(17,33,2)
(6,16,2)
(24,6,2)
(3,10,2)
(19,30,2)
(32,6,2)
(23,6,2)
(3,27,2)
(5,17,2)
(13,17,2)
(10,6,2)
(29,15,2)
(7,17,2)
(17,15,2)
(27,15,2)
(14,17,2)
(35,15,2)
(4,19,2)
(3,32,2)
(28,31,2)
(9,6,2)
(11,17,2)
(33,15,2)
(15,17,2)
(33,30,2)
(6,17,2)
(26,15,2)
(34,15,2)
-----------------------------------
(0,out)
(1,while (--n >= 0)
(2,if (jpc_bitstream_putbit(out, 0)
(3,RET)
(4,assert(n >= 0)
(5,out)
(6,jpc_bitstream_putbit(out, 0)
(7,EOF)
(8,)
(9,-1)
(10,return 0;)
(11,0)
(12,)
(13,EOF)
(14,1)
(15,jpc_bitstream_putbit(out, 1)
(16,jpc_bitstream_putbit(out, 0)
(17,--n >= 0)
(18,if (jpc_bitstream_putbit(out, 1)
(19,n >= 0)
(20,n)
(21,)
(22,0)
(23,1)
(24,0)
(25,)
(26,-1)
(27,return -1;)
(28,jpc_bitstream_putbit(out, 1)
(29,1)
(30,int n)
(31,jpc_bitstream_t *out)
(32,return -1;)
(33,--n)
(34,n)
(35,0)
-----cfg-----
(65,76)
(65,82)
(69,103)
(71,69)
(7,13)
(74,71)
(76,74)
(13,18)
(13,23)
(17,109)
(18,17)
(82,93)
(82,99)
(86,103)
(23,29)
(23,35)
(88,86)
(27,103)
(91,88)
(29,27)
(93,91)
(98,109)
(35,41)
(35,48)
(99,98)
(101,109)
(102,101)
(103,102)
(103,107)
(39,103)
(41,39)
(107,102)
(48,59)
(48,65)
(52,103)
(54,52)
(57,54)
(59,57)
-----path-----
7,13,18,17,109
7,13,23,29,27,103,102,101,109
7,13,23,29,27,103,107,102,101,109
7,13,23,35,41,39,103,102,101,109
7,13,23,35,41,39,103,107,102,101,109
7,13,23,35,48,59,57,54,52,103,102,101,109
7,13,23,35,48,59,57,54,52,103,107,102,101,109
7,13,23,35,48,65,76,74,71,69,103,102,101,109
7,13,23,35,48,65,76,74,71,69,103,107,102,101,109
7,13,23,35,48,65,82,93,91,88,86,103,102,101,109
7,13,23,35,48,65,82,93,91,88,86,103,107,102,101,109
7,13,23,35,48,65,82,99,98,109
-----cfgNode-----
5,<global>
6,<empty>
7,int jpc_putnumnewpasses (jpc_bitstream_t *out,int n)
8,jpc_bitstream_t *out
9,int n
10,<empty>
11,int ret
12,if (n <= 0)
13,n <= 0
14,n
15,0
16,<empty>
17,return -1;
18,-1
19,1
20,else
21,<empty>
22,if (n == 1)
23,n == 1
24,n
25,1
26,<empty>
27,ret = jpc_bitstream_putbit(out, 0)
28,ret
29,jpc_bitstream_putbit(out, 0)
30,out
31,0
32,else
33,<empty>
34,if (n == 2)
35,n == 2
36,n
37,2
38,<empty>
39,ret = jpc_bitstream_putbits(out, 2, 2)
40,ret
41,jpc_bitstream_putbits(out, 2, 2)
42,out
43,2
44,2
45,else
46,<empty>
47,if (n <= 5)
48,n <= 5
49,n
50,5
51,<empty>
52,ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3))
53,ret
54,jpc_bitstream_putbits(out, 4, 0xc | (n - 3))
55,out
56,4
57,0xc | (n - 3)
58,0xc
59,n - 3
60,n
61,3
62,else
63,<empty>
64,if (n <= 36)
65,n <= 36
66,n
67,36
68,<empty>
69,ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6))
70,ret
71,jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6))
72,out
73,9
74,0x1e0 | (n - 6)
75,0x1e0
76,n - 6
77,n
78,6
79,else
80,<empty>
81,if (n <= 164)
82,n <= 164
83,n
84,164
85,<empty>
86,ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37))
87,ret
88,jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37))
89,out
90,16
91,0xff80 | (n - 37)
92,0xff80
93,n - 37
94,n
95,37
96,else
97,<empty>
98,return -1;
99,-1
100,1
101,return (ret != EOF) ? 0 : (-1);
102,(ret != EOF) ? 0 : (-1)
103,ret != EOF
104,ret
105,EOF
106,0
107,-1
108,1
109,RET
110,jpc_bitstream_t *out
111,int n
112,RET
113,int jpc_putnumnewpasses (jpc_bitstream_t *out,int n)
114,jpc_bitstream_t *out
115,int n
116,<empty>
117,int ret
118,if (n <= 0)
119,n <= 0
120,n
121,0
122,<empty>
123,return -1;
124,-1
125,1
126,else
127,<empty>
128,if (n == 1)
129,n == 1
130,n
131,1
132,<empty>
133,ret = jpc_bitstream_putbit(out, 0)
134,ret
135,jpc_bitstream_putbit(out, 0)
136,out
137,0
138,else
139,<empty>
140,if (n == 2)
141,n == 2
142,n
143,2
144,<empty>
145,ret = jpc_bitstream_putbits(out, 2, 2)
146,ret
147,jpc_bitstream_putbits(out, 2, 2)
148,out
149,2
150,2
151,else
152,<empty>
153,if (n <= 5)
154,n <= 5
155,n
156,5
157,<empty>
158,ret = jpc_bitstream_putbits(out, 4, 0xc | (n - 3))
159,ret
160,jpc_bitstream_putbits(out, 4, 0xc | (n - 3))
161,out
162,4
163,0xc | (n - 3)
164,0xc
165,n - 3
166,n
167,3
168,else
169,<empty>
170,if (n <= 36)
171,n <= 36
172,n
173,36
174,<empty>
175,ret = jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6))
176,ret
177,jpc_bitstream_putbits(out, 9, 0x1e0 | (n - 6))
178,out
179,9
180,0x1e0 | (n - 6)
181,0x1e0
182,n - 6
183,n
184,6
185,else
186,<empty>
187,if (n <= 164)
188,n <= 164
189,n
190,164
191,<empty>
192,ret = jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37))
193,ret
194,jpc_bitstream_putbits(out, 16, 0xff80 | (n - 37))
195,out
196,16
197,0xff80 | (n - 37)
198,0xff80
199,n - 37
200,n
201,37
202,else
203,<empty>
204,return -1;
205,-1
206,1
207,return (ret != EOF) ? 0 : (-1);
208,(ret != EOF) ? 0 : (-1)
209,ret != EOF
210,ret
211,EOF
212,0
213,-1
214,1
215,RET
216,jpc_bitstream_t *out
217,int n
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
static int jpc_putnumnewpasses(jpc_bitstream_t *out, int n) {
int ret;
if(n == 1)
ret = jpc_bitstream_putbit(out, 0);
return (ret != EOF) ? 0 : (-1);
=======================
