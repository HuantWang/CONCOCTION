-----label-----
0
-----code-----
void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, int numcols,
  int stride, int parity)
{

	int bufsize = JPC_CEILDIVPOW2(numrows, 1);
#if !defined(HAVE_VLA)
	jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];
#else
	jpc_fix_t splitbuf[bufsize * numcols];
#endif
	jpc_fix_t *buf = splitbuf;
	jpc_fix_t *srcptr;
	jpc_fix_t *dstptr;
	register jpc_fix_t *srcptr2;
	register jpc_fix_t *dstptr2;
	register int n;
	register int i;
	int m;
	int hstartcol;

#if !defined(HAVE_VLA)
	/* Get a buffer. */
	if (bufsize > QMFB_SPLITBUFSIZE) {
		if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {
			/* We have no choice but to commit suicide in this case. */
			abort();
		}
	}
#endif

	if (numrows >= 2) {
		hstartcol = (numrows + 1 - parity) >> 1;
		m = (parity) ? hstartcol : (numrows - hstartcol);
		/* Save the samples destined for the highpass channel. */
		n = m;
		dstptr = buf;
		srcptr = &a[(1 - parity) * stride];
		while (n-- > 0) {
			dstptr2 = dstptr;
			srcptr2 = srcptr;
			for (i = 0; i < numcols; ++i) {
				*dstptr2 = *srcptr2;
				++dstptr2;
				++srcptr2;
			}
			dstptr += numcols;
			srcptr += stride << 1;
		}
		/* Copy the appropriate samples into the lowpass channel. */
		dstptr = &a[(1 - parity) * stride];
		srcptr = &a[(2 - parity) * stride];
		n = numrows - m - (!parity);
		while (n-- > 0) {
			dstptr2 = dstptr;
			srcptr2 = srcptr;
			for (i = 0; i < numcols; ++i) {
				*dstptr2 = *srcptr2;
				++dstptr2;
				++srcptr2;
			}
			dstptr += stride;
			srcptr += stride << 1;
		}
		/* Copy the saved samples into the highpass channel. */
		dstptr = &a[hstartcol * stride];
		srcptr = buf;
		n = m;
		while (n-- > 0) {
			dstptr2 = dstptr;
			srcptr2 = srcptr;
			for (i = 0; i < numcols; ++i) {
				*dstptr2 = *srcptr2;
				++dstptr2;
				++srcptr2;
			}
			dstptr += stride;
			srcptr += numcols;
		}
	}

#if !defined(HAVE_VLA)
	/* If the split buffer was allocated on the heap, free this memory. */
	if (buf != splitbuf) {
		jas_free(buf);
	}
#endif

}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
21,22
23,24
23,25
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
28,29
29,30
29,31
31,32
31,33
33,34
34,35
34,36
34,37
35,36
37,38
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
56,59
59,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
69,70
70,71
70,72
71,72
73,74
73,75
76,77
77,78
77,79
78,79
80,81
80,82
83,84
84,85
84,86
85,86
87,88
87,89
90,91
91,92
91,93
93,94
95,96
96,97
96,98
98,99
100,101
101,102
101,103
103,104
105,106
106,107
106,108
108,109
110,111
110,112
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
119,120
120,121
120,122
121,122
123,124
123,125
124,125
126,127
126,128
127,128
129,130
130,131
130,132
131,132
134,135
135,136
136,137
137,138
139,140
139,141
140,141
140,142
141,142
144,145
144,146
144,147
144,148
144,149
144,150
144,151
144,152
144,153
144,154
144,155
144,156
144,157
144,158
145,146
146,147
146,148
147,148
149,150
149,151
150,151
151,152
151,153
152,153
152,154
153,154
156,157
159,160
160,161
160,162
161,162
163,164
163,165
163,166
164,165
165,166
167,168
169,170
170,171
170,172
171,172
173,174
175,176
176,177
176,178
177,178
179,180
181,182
182,183
182,184
183,184
185,186
187,188
188,189
188,190
189,190
191,192
192,193
192,194
193,194
195,196
195,197
196,197
197,198
197,199
199,200
201,202
203,204
203,205
204,205
204,206
205,206
206,207
209,210
209,211
209,212
209,213
209,214
210,211
211,212
211,213
212,213
214,215
216,217
217,218
217,219
218,219
220,221
222,223
222,224
222,225
222,226
223,224
224,225
224,226
225,226
228,229
228,230
229,230
231,232
233,234
234,235
236,237
236,238
236,239
237,238
238,239
238,240
239,240
240,241
242,243
243,244
245,246
246,247
247,248
249,250
250,251
251,252
253,254
254,255
254,256
255,256
257,258
259,260
260,261
260,262
261,262
263,264
263,265
264,265
267,268
268,269
268,270
269,270
271,272
272,273
272,274
273,274
275,276
275,277
276,277
277,278
277,279
279,280
281,282
283,284
284,285
284,286
285,286
287,288
288,289
288,290
289,290
291,292
291,293
292,293
293,294
293,295
295,296
297,298
299,300
300,301
300,302
301,302
303,304
303,305
304,305
304,306
305,306
307,308
309,310
310,311
311,312
313,314
313,315
314,315
314,316
315,316
316,317
319,320
319,321
319,322
319,323
319,324
320,321
321,322
321,323
322,323
324,325
326,327
327,328
327,329
328,329
330,331
332,333
332,334
332,335
332,336
333,334
334,335
334,336
335,336
338,339
338,340
339,340
341,342
343,344
344,345
346,347
346,348
346,349
347,348
348,349
348,350
349,350
350,351
352,353
353,354
355,356
356,357
357,358
359,360
360,361
361,362
363,364
364,365
364,366
365,366
367,368
369,370
370,371
370,372
371,372
373,374
373,375
374,375
377,378
378,379
378,380
379,380
381,382
382,383
382,384
383,384
385,386
385,387
386,387
388,389
390,391
391,392
391,393
392,393
394,395
396,397
397,398
397,399
398,399
400,401
402,403
402,404
403,404
403,405
404,405
405,406
408,409
408,410
408,411
408,412
408,413
409,410
410,411
410,412
411,412
413,414
415,416
416,417
416,418
417,418
419,420
421,422
421,423
421,424
421,425
422,423
423,424
423,425
424,425
427,428
427,429
428,429
430,431
432,433
433,434
435,436
435,437
435,438
436,437
437,438
437,439
438,439
439,440
441,442
442,443
444,445
445,446
446,447
448,449
449,450
450,451
452,453
453,454
453,455
454,455
456,457
458,459
459,460
459,461
460,461
462,463
464,465
464,466
465,466
465,467
466,467
468,469
470,471
471,472
472,473
472,474
473,474
475,476
-----nextToken-----
2,4,7,9,10,12,14,16,18,20,22,24,26,30,32,36,38,39,43,45,49,51,55,57,58,61,65,67,68,72,74,75,79,81,82,86,88,89,92,94,97,99,102,104,107,109,113,115,122,125,128,132,133,138,142,143,148,154,155,157,158,162,166,168,172,174,178,180,184,186,190,194,198,200,202,207,208,213,215,219,221,226,227,230,232,235,241,244,248,252,256,258,262,265,266,270,274,278,280,282,286,290,294,296,298,302,306,308,312,317,318,323,325,329,331,336,337,340,342,345,351,354,358,362,366,368,372,375,376,380,384,387,389,393,395,399,401,406,407,412,414,418,420,425,426,429,431,434,440,443,447,451,455,457,461,463,467,469,474,476
-----computeFrom-----
47,48
47,49
111,112
111,113
120,121
120,122
126,127
126,128
140,141
140,142
146,147
146,148
149,150
149,151
151,152
151,153
152,153
152,154
160,161
160,162
170,171
170,172
176,177
176,178
182,183
182,184
188,189
188,190
195,196
195,197
197,198
197,199
204,205
204,206
211,212
211,213
217,218
217,219
224,225
224,226
228,229
228,230
238,239
238,240
254,255
254,256
260,261
260,262
263,264
263,265
268,269
268,270
275,276
275,277
277,278
277,279
284,285
284,286
291,292
291,293
293,294
293,295
300,301
300,302
303,304
303,305
304,305
304,306
314,315
314,316
321,322
321,323
327,328
327,329
334,335
334,336
338,339
338,340
348,349
348,350
364,365
364,366
370,371
370,372
373,374
373,375
378,379
378,380
385,386
385,387
391,392
391,393
397,398
397,399
403,404
403,405
410,411
410,412
416,417
416,418
423,424
423,425
427,428
427,429
437,438
437,439
453,454
453,455
459,460
459,461
465,466
465,467
-----guardedBy-----
113,128
142,306
467,476
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, int numcols,  int stride, int parity){	int bufsize = JPC_CEILDIVPOW2(numrows, 1);#if !defined(HAVE_VLA)	jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];#else	jpc_fix_t splitbuf[bufsize * numcols];#endif	jpc_fix_t *buf = splitbuf;	jpc_fix_t *srcptr;	jpc_fix_t *dstptr;	register jpc_fix_t *srcptr2;	register jpc_fix_t *dstptr2;	register int n;	register int i;	int m;	int hstartcol;#if !defined(HAVE_VLA)	/* Get a buffer. */	if (bufsize > QMFB_SPLITBUFSIZE) {		if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {			/* We have no choice but to commit suicide in this case. */			abort();		}	}#endif	if (numrows >= 2) {		hstartcol = (numrows + 1 - parity) >> 1;		m = (parity) ? hstartcol : (numrows - hstartcol);		/* Save the samples destined for the highpass channel. */		n = m;		dstptr = buf;		srcptr = &a[(1 - parity) * stride];		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += numcols;			srcptr += stride << 1;		}		/* Copy the appropriate samples into the lowpass channel. */		dstptr = &a[(1 - parity) * stride];		srcptr = &a[(2 - parity) * stride];		n = numrows - m - (!parity);		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += stride << 1;		}		/* Copy the saved samples into the highpass channel. */		dstptr = &a[hstartcol * stride];		srcptr = buf;		n = m;		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += numcols;		}	}#if !defined(HAVE_VLA)	/* If the split buffer was allocated on the heap, free this memory. */	if (buf != splitbuf) {		jas_free(buf);	}#endif}
void
jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, int numcols,  int stride, int parity)
jpc_qmfb_split_colres
jpc_fix_t *a
jpc_fix_t
jpc_fix_t
*a
*
a
int numrows
int
numrows
numrows
int numcols
int
numcols
numcols
int stride
int
stride
stride
int parity
int
parity
parity
{	int bufsize = JPC_CEILDIVPOW2(numrows, 1);#if !defined(HAVE_VLA)	jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];#else	jpc_fix_t splitbuf[bufsize * numcols];#endif	jpc_fix_t *buf = splitbuf;	jpc_fix_t *srcptr;	jpc_fix_t *dstptr;	register jpc_fix_t *srcptr2;	register jpc_fix_t *dstptr2;	register int n;	register int i;	int m;	int hstartcol;#if !defined(HAVE_VLA)	/* Get a buffer. */	if (bufsize > QMFB_SPLITBUFSIZE) {		if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {			/* We have no choice but to commit suicide in this case. */			abort();		}	}#endif	if (numrows >= 2) {		hstartcol = (numrows + 1 - parity) >> 1;		m = (parity) ? hstartcol : (numrows - hstartcol);		/* Save the samples destined for the highpass channel. */		n = m;		dstptr = buf;		srcptr = &a[(1 - parity) * stride];		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += numcols;			srcptr += stride << 1;		}		/* Copy the appropriate samples into the lowpass channel. */		dstptr = &a[(1 - parity) * stride];		srcptr = &a[(2 - parity) * stride];		n = numrows - m - (!parity);		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += stride << 1;		}		/* Copy the saved samples into the highpass channel. */		dstptr = &a[hstartcol * stride];		srcptr = buf;		n = m;		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += numcols;		}	}#if !defined(HAVE_VLA)	/* If the split buffer was allocated on the heap, free this memory. */	if (buf != splitbuf) {		jas_free(buf);	}#endif}
int bufsize = JPC_CEILDIVPOW2(numrows, 1);
int bufsize = JPC_CEILDIVPOW2(numrows, 1);
int
bufsize = JPC_CEILDIVPOW2(numrows, 1)
bufsize
= JPC_CEILDIVPOW2(numrows, 1)
JPC_CEILDIVPOW2(numrows, 1)
JPC_CEILDIVPOW2
JPC_CEILDIVPOW2
numrows
numrows
1
jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];
jpc_fix_t splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE];
jpc_fix_t
jpc_fix_t
splitbuf[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE]
splitbuf
[QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE]
QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE
QMFB_SPLITBUFSIZE
QMFB_SPLITBUFSIZE
JPC_QMFB_COLGRPSIZE
JPC_QMFB_COLGRPSIZE
jpc_fix_t *buf = splitbuf;
jpc_fix_t *buf = splitbuf;
jpc_fix_t
jpc_fix_t
*buf = splitbuf
*
buf
= splitbuf
splitbuf
splitbuf
jpc_fix_t *srcptr;
jpc_fix_t *srcptr;
jpc_fix_t
jpc_fix_t
*srcptr
*
srcptr
jpc_fix_t *dstptr;
jpc_fix_t *dstptr;
jpc_fix_t
jpc_fix_t
*dstptr
*
dstptr
register jpc_fix_t *srcptr2;
register jpc_fix_t *srcptr2;
register jpc_fix_t
jpc_fix_t
*srcptr2
*
srcptr2
register jpc_fix_t *dstptr2;
register jpc_fix_t *dstptr2;
register jpc_fix_t
jpc_fix_t
*dstptr2
*
dstptr2
register int n;
register int n;
register int
n
n
register int i;
register int i;
register int
i
i
int m;
int m;
int
m
m
int hstartcol;
int hstartcol;
int
hstartcol
hstartcol
if (bufsize > QMFB_SPLITBUFSIZE) {		if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {			/* We have no choice but to commit suicide in this case. */			abort();		}	}
bufsize > QMFB_SPLITBUFSIZE
bufsize
bufsize
QMFB_SPLITBUFSIZE
QMFB_SPLITBUFSIZE
{		if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {			/* We have no choice but to commit suicide in this case. */			abort();		}	}
if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))) {			/* We have no choice but to commit suicide in this case. */			abort();		}
!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))
(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))
buf = jas_malloc(bufsize * sizeof(jpc_fix_t))
buf
buf
jas_malloc(bufsize * sizeof(jpc_fix_t))
jas_malloc
jas_malloc
bufsize * sizeof(jpc_fix_t)
bufsize
bufsize
sizeof(jpc_fix_t)
jpc_fix_t
jpc_fix_t
jpc_fix_t

{			/* We have no choice but to commit suicide in this case. */			abort();		}
abort();
abort()
abort
abort
if (numrows >= 2) {		hstartcol = (numrows + 1 - parity) >> 1;		m = (parity) ? hstartcol : (numrows - hstartcol);		/* Save the samples destined for the highpass channel. */		n = m;		dstptr = buf;		srcptr = &a[(1 - parity) * stride];		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += numcols;			srcptr += stride << 1;		}		/* Copy the appropriate samples into the lowpass channel. */		dstptr = &a[(1 - parity) * stride];		srcptr = &a[(2 - parity) * stride];		n = numrows - m - (!parity);		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += stride << 1;		}		/* Copy the saved samples into the highpass channel. */		dstptr = &a[hstartcol * stride];		srcptr = buf;		n = m;		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += numcols;		}	}
numrows >= 2
numrows
numrows
2
{		hstartcol = (numrows + 1 - parity) >> 1;		m = (parity) ? hstartcol : (numrows - hstartcol);		/* Save the samples destined for the highpass channel. */		n = m;		dstptr = buf;		srcptr = &a[(1 - parity) * stride];		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += numcols;			srcptr += stride << 1;		}		/* Copy the appropriate samples into the lowpass channel. */		dstptr = &a[(1 - parity) * stride];		srcptr = &a[(2 - parity) * stride];		n = numrows - m - (!parity);		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += stride << 1;		}		/* Copy the saved samples into the highpass channel. */		dstptr = &a[hstartcol * stride];		srcptr = buf;		n = m;		while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += numcols;		}	}
hstartcol = (numrows + 1 - parity) >> 1;
hstartcol = (numrows + 1 - parity) >> 1
hstartcol
hstartcol
(numrows + 1 - parity) >> 1
(numrows + 1 - parity)
numrows + 1 - parity
numrows + 1
numrows
numrows
1
parity
parity
1
m = (parity) ? hstartcol : (numrows - hstartcol);
m = (parity) ? hstartcol : (numrows - hstartcol)
m
m
(parity) ? hstartcol : (numrows - hstartcol)
(parity)
parity
parity
hstartcol
hstartcol
(numrows - hstartcol)
numrows - hstartcol
numrows
numrows
hstartcol
hstartcol
n = m;
n = m
n
n
m
m
dstptr = buf;
dstptr = buf
dstptr
dstptr
buf
buf
srcptr = &a[(1 - parity) * stride];
srcptr = &a[(1 - parity) * stride]
srcptr
srcptr
&a[(1 - parity) * stride]
a[(1 - parity) * stride]
a
a
(1 - parity) * stride
(1 - parity)
1 - parity
1
parity
parity
stride
stride
while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += numcols;			srcptr += stride << 1;		}
n-- > 0
n--
n
n
0
{			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += numcols;			srcptr += stride << 1;		}
dstptr2 = dstptr;
dstptr2 = dstptr
dstptr2
dstptr2
dstptr
dstptr
srcptr2 = srcptr;
srcptr2 = srcptr
srcptr2
srcptr2
srcptr
srcptr
for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}
i = 0;
i = 0
i
i
0
i < numcols
i
i
numcols
numcols
++i
i
i
{				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}
*dstptr2 = *srcptr2;
*dstptr2 = *srcptr2
*dstptr2
dstptr2
dstptr2
*srcptr2
srcptr2
srcptr2
++dstptr2;
++dstptr2
dstptr2
dstptr2
++srcptr2;
++srcptr2
srcptr2
srcptr2
dstptr += numcols;
dstptr += numcols
dstptr
dstptr
numcols
numcols
srcptr += stride << 1;
srcptr += stride << 1
srcptr
srcptr
stride << 1
stride
stride
1
dstptr = &a[(1 - parity) * stride];
dstptr = &a[(1 - parity) * stride]
dstptr
dstptr
&a[(1 - parity) * stride]
a[(1 - parity) * stride]
a
a
(1 - parity) * stride
(1 - parity)
1 - parity
1
parity
parity
stride
stride
srcptr = &a[(2 - parity) * stride];
srcptr = &a[(2 - parity) * stride]
srcptr
srcptr
&a[(2 - parity) * stride]
a[(2 - parity) * stride]
a
a
(2 - parity) * stride
(2 - parity)
2 - parity
2
parity
parity
stride
stride
n = numrows - m - (!parity);
n = numrows - m - (!parity)
n
n
numrows - m - (!parity)
numrows - m
numrows
numrows
m
m
(!parity)
!parity
parity
parity
while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += stride << 1;		}
n-- > 0
n--
n
n
0
{			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += stride << 1;		}
dstptr2 = dstptr;
dstptr2 = dstptr
dstptr2
dstptr2
dstptr
dstptr
srcptr2 = srcptr;
srcptr2 = srcptr
srcptr2
srcptr2
srcptr
srcptr
for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}
i = 0;
i = 0
i
i
0
i < numcols
i
i
numcols
numcols
++i
i
i
{				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}
*dstptr2 = *srcptr2;
*dstptr2 = *srcptr2
*dstptr2
dstptr2
dstptr2
*srcptr2
srcptr2
srcptr2
++dstptr2;
++dstptr2
dstptr2
dstptr2
++srcptr2;
++srcptr2
srcptr2
srcptr2
dstptr += stride;
dstptr += stride
dstptr
dstptr
stride
stride
srcptr += stride << 1;
srcptr += stride << 1
srcptr
srcptr
stride << 1
stride
stride
1
dstptr = &a[hstartcol * stride];
dstptr = &a[hstartcol * stride]
dstptr
dstptr
&a[hstartcol * stride]
a[hstartcol * stride]
a
a
hstartcol * stride
hstartcol
hstartcol
stride
stride
srcptr = buf;
srcptr = buf
srcptr
srcptr
buf
buf
n = m;
n = m
n
n
m
m
while (n-- > 0) {			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += numcols;		}
n-- > 0
n--
n
n
0
{			dstptr2 = dstptr;			srcptr2 = srcptr;			for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}			dstptr += stride;			srcptr += numcols;		}
dstptr2 = dstptr;
dstptr2 = dstptr
dstptr2
dstptr2
dstptr
dstptr
srcptr2 = srcptr;
srcptr2 = srcptr
srcptr2
srcptr2
srcptr
srcptr
for (i = 0; i < numcols; ++i) {				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}
i = 0;
i = 0
i
i
0
i < numcols
i
i
numcols
numcols
++i
i
i
{				*dstptr2 = *srcptr2;				++dstptr2;				++srcptr2;			}
*dstptr2 = *srcptr2;
*dstptr2 = *srcptr2
*dstptr2
dstptr2
dstptr2
*srcptr2
srcptr2
srcptr2
++dstptr2;
++dstptr2
dstptr2
dstptr2
++srcptr2;
++srcptr2
srcptr2
srcptr2
dstptr += stride;
dstptr += stride
dstptr
dstptr
stride
stride
srcptr += numcols;
srcptr += numcols
srcptr
srcptr
numcols
numcols
if (buf != splitbuf) {		jas_free(buf);	}
buf != splitbuf
buf
buf
splitbuf
splitbuf
{		jas_free(buf);	}
jas_free(buf);
jas_free(buf)
jas_free
jas_free
buf
buf
-----joern-----
(240,388,0)
(173,35,0)
(129,405,0)
(350,122,0)
(158,388,0)
(229,231,0)
(433,231,0)
(15,328,0)
(77,152,0)
(325,216,0)
(106,87,0)
(56,69,0)
(202,164,0)
(57,128,0)
(144,76,0)
(190,165,0)
(280,51,0)
(106,344,0)
(43,1,0)
(210,160,0)
(163,260,0)
(195,292,0)
(270,54,0)
(311,415,0)
(252,312,0)
(333,255,0)
(356,417,0)
(253,223,0)
(260,148,0)
(416,69,0)
(429,415,0)
(351,430,0)
(301,235,0)
(5,357,0)
(433,99,0)
(37,301,0)
(117,218,0)
(278,82,0)
(14,250,0)
(23,213,0)
(298,372,0)
(211,164,0)
(144,299,0)
(9,89,0)
(102,226,0)
(20,247,0)
(180,430,0)
(204,250,0)
(99,433,0)
(183,197,0)
(258,16,0)
(389,194,0)
(85,432,0)
(285,405,0)
(348,148,0)
(381,271,0)
(76,382,0)
(243,89,0)
(174,426,0)
(198,279,0)
(193,341,0)
(167,261,0)
(63,262,0)
(328,171,0)
(105,166,0)
(226,365,0)
(77,399,0)
(295,14,0)
(382,376,0)
(91,179,0)
(321,293,0)
(312,252,0)
(308,85,0)
(338,278,0)
(396,356,0)
(111,67,0)
(64,107,0)
(290,407,0)
(297,32,0)
(329,97,0)
(262,94,0)
(200,347,0)
(382,76,0)
(394,268,0)
(218,125,0)
(247,20,0)
(391,314,0)
(36,174,0)
(412,69,0)
(155,347,0)
(88,348,0)
(43,314,0)
(146,20,0)
(281,302,0)
(175,100,0)
(377,169,0)
(221,142,0)
(31,391,0)
(370,42,0)
(80,67,0)
(132,29,0)
(76,413,0)
(203,170,0)
(365,89,0)
(61,356,0)
(252,88,0)
(331,20,0)
(414,93,0)
(164,250,0)
(98,273,0)
(352,408,0)
(212,347,0)
(206,138,0)
(127,128,0)
(10,107,0)
(237,139,0)
(139,69,0)
(341,432,0)
(71,75,0)
(160,263,0)
(98,22,0)
(232,429,0)
(166,105,0)
(229,280,0)
(9,218,0)
(98,258,0)
(125,374,0)
(397,226,0)
(341,23,0)
(160,213,0)
(100,179,0)
(413,82,0)
(2,69,0)
(313,9,0)
(237,9,0)
(128,65,0)
(216,118,0)
(173,427,0)
(401,432,0)
(194,389,0)
(221,199,0)
(133,179,0)
(236,326,0)
(178,192,0)
(72,87,0)
(399,296,0)
(431,287,0)
(149,69,0)
(17,185,0)
(247,48,0)
(336,170,0)
(228,148,0)
(244,223,0)
(324,413,0)
(58,34,0)
(27,377,0)
(7,407,0)
(266,10,0)
(151,432,0)
(309,152,0)
(259,397,0)
(377,82,0)
(254,82,0)
(130,128,0)
(157,374,0)
(387,234,0)
(317,376,0)
(106,194,0)
(261,167,0)
(250,261,0)
(351,82,0)
(93,143,0)
(83,85,0)
(315,403,0)
(10,266,0)
(126,331,0)
(164,202,0)
(37,148,0)
(17,169,0)
(170,393,0)
(414,69,0)
(302,262,0)
(369,408,0)
(60,219,0)
(233,423,0)
(125,218,0)
(217,161,0)
(142,360,0)
(213,69,0)
(25,264,0)
(339,69,0)
(150,228,0)
(231,433,0)
(425,60,0)
(215,424,0)
(152,77,0)
(208,375,0)
(172,113,0)
(320,48,0)
(357,235,0)
(243,343,0)
(143,89,0)
(255,234,0)
(429,148,0)
(153,22,0)
(34,134,0)
(405,35,0)
(191,138,0)
(407,290,0)
(223,244,0)
(221,209,0)
(103,363,0)
(9,237,0)
(406,401,0)
(143,432,0)
(176,287,0)
(358,52,0)
(244,202,0)
(417,356,0)
(228,343,0)
(213,23,0)
(378,167,0)
(165,296,0)
(26,220,0)
(105,263,0)
(169,97,0)
(145,127,0)
(76,144,0)
(406,372,0)
(379,430,0)
(18,365,0)
(426,290,0)
(312,363,0)
(122,84,0)
(175,410,0)
(168,360,0)
(360,82,0)
(54,270,0)
(415,429,0)
(330,99,0)
(144,354,0)
(347,212,0)
(187,385,0)
(428,326,0)
(209,265,0)
(264,231,0)
(381,231,0)
(43,302,0)
(199,221,0)
(403,89,0)
(363,312,0)
(208,421,0)
(165,84,0)
(57,359,0)
(124,104,0)
(131,103,0)
(236,279,0)
(430,351,0)
(8,236,0)
(65,151,0)
(87,106,0)
(352,380,0)
(386,164,0)
(194,106,0)
(42,69,0)
(132,262,0)
(337,166,0)
(226,69,0)
(48,432,0)
(22,98,0)
(101,238,0)
(59,361,0)
(246,301,0)
(167,89,0)
(32,290,0)
(278,265,0)
(300,265,0)
(93,414,0)
(79,69,0)
(239,125,0)
(208,380,0)
(139,237,0)
(421,356,0)
(290,426,0)
(21,399,0)
(154,132,0)
(279,236,0)
(218,148,0)
(390,110,0)
(100,266,0)
(397,259,0)
(263,160,0)
(209,349,0)
(344,67,0)
(327,357,0)
(55,60,0)
(171,328,0)
(32,20,0)
(202,244,0)
(419,377,0)
(296,165,0)
(173,316,0)
(316,173,0)
(323,139,0)
(103,305,0)
(380,352,0)
(196,302,0)
(89,138,0)
(237,235,0)
(312,235,0)
(273,98,0)
(48,89,0)
(141,89,0)
(171,410,0)
(45,256,0)
(169,17,0)
(41,403,0)
(391,410,0)
(243,42,0)
(218,9,0)
(328,432,0)
(35,405,0)
(161,250,0)
(48,247,0)
(331,335,0)
(242,51,0)
(81,268,0)
(188,71,0)
(85,94,0)
(219,148,0)
(99,432,0)
(249,262,0)
(250,69,0)
(372,406,0)
(28,300,0)
(282,314,0)
(110,380,0)
(75,71,0)
(51,242,0)
(269,389,0)
(65,128,0)
(136,16,0)
(417,268,0)
(365,226,0)
(169,377,0)
(314,391,0)
(70,14,0)
(389,213,0)
(263,105,0)
(401,406,0)
(413,76,0)
(342,243,0)
(241,113,0)
(385,73,0)
(360,142,0)
(355,231,0)
(68,138,0)
(90,130,0)
(184,32,0)
(345,255,0)
(372,119,0)
(251,166,0)
(388,282,0)
(343,243,0)
(332,305,0)
(3,212,0)
(125,148,0)
(356,69,0)
(60,235,0)
(270,139,0)
(86,143,0)
(220,356,0)
(120,69,0)
(268,432,0)
(109,69,0)
(84,165,0)
(74,301,0)
(352,14,0)
(223,356,0)
(344,106,0)
(49,199,0)
(42,243,0)
(305,103,0)
(62,223,0)
(257,122,0)
(300,414,0)
(88,148,0)
(423,293,0)
(202,393,0)
(424,343,0)
(282,388,0)
(267,130,0)
(258,98,0)
(430,432,0)
(104,266,0)
(400,397,0)
(165,190,0)
(277,354,0)
(347,235,0)
(50,276,0)
(427,173,0)
(354,414,0)
(85,89,0)
(420,22,0)
(316,156,0)
(34,410,0)
(314,282,0)
(35,173,0)
(292,194,0)
(177,197,0)
(346,408,0)
(384,63,0)
(179,100,0)
(167,432,0)
(97,95,0)
(33,167,0)
(178,42,0)
(238,101,0)
(122,235,0)
(137,421,0)
(16,258,0)
(290,32,0)
(40,37,0)
(222,69,0)
(234,119,0)
(89,279,0)
(367,421,0)
(207,143,0)
(427,250,0)
(316,287,0)
(424,148,0)
(127,73,0)
(266,100,0)
(252,89,0)
(348,88,0)
(107,10,0)
(365,235,0)
(340,296,0)
(275,82,0)
(248,354,0)
(97,329,0)
(97,169,0)
(326,148,0)
(302,43,0)
(255,372,0)
(135,237,0)
(113,348,0)
(418,30,0)
(53,84,0)
(216,128,0)
(61,375,0)
(399,69,0)
(151,65,0)
(373,254,0)
(220,395,0)
(118,216,0)
(410,69,0)
(376,382,0)
(319,190,0)
(368,185,0)
(334,69,0)
(11,427,0)
(114,138,0)
(231,69,0)
(353,341,0)
(143,93,0)
(291,174,0)
(245,69,0)
(292,213,0)
(194,292,0)
(354,144,0)
(262,69,0)
(424,52,0)
(30,262,0)
(426,335,0)
(287,356,0)
(14,352,0)
(364,219,0)
(82,69,0)
(402,413,0)
(94,85,0)
(318,216,0)
(348,113,0)
(288,107,0)
(6,77,0)
(272,415,0)
(174,20,0)
(263,118,0)
(422,365,0)
(118,263,0)
(256,299,0)
(20,69,0)
(264,280,0)
(392,270,0)
(293,403,0)
(329,414,0)
(289,242,0)
(284,427,0)
(82,351,0)
(273,29,0)
(197,101,0)
(88,252,0)
(209,221,0)
(280,271,0)
(343,228,0)
(4,151,0)
(362,128,0)
(219,60,0)
(192,178,0)
(101,197,0)
(32,426,0)
(304,61,0)
(201,328,0)
(51,280,0)
(212,148,0)
(128,69,0)
(142,254,0)
(294,160,0)
(306,348,0)
(52,235,0)
(66,374,0)
(121,138,0)
(349,209,0)
(190,148,0)
(408,352,0)
(283,391,0)
(343,424,0)
(274,54,0)
(205,213,0)
(67,128,0)
(47,254,0)
(404,401,0)
(112,229,0)
(78,48,0)
(52,424,0)
(38,71,0)
(398,69,0)
(224,410,0)
(100,175,0)
(10,134,0)
(256,414,0)
(181,57,0)
(326,236,0)
(140,175,0)
(12,381,0)
(147,363,0)
(115,175,0)
(24,312,0)
(411,264,0)
(301,37,0)
(189,349,0)
(415,235,0)
(385,213,0)
(287,316,0)
(383,401,0)
(293,423,0)
(185,17,0)
(92,360,0)
(286,389,0)
(159,292,0)
(403,69,0)
(22,410,0)
(273,63,0)
(421,208,0)
(46,185,0)
(229,51,0)
(130,238,0)
(261,250,0)
(19,99,0)
(266,104,0)
(238,130,0)
(363,69,0)
(44,326,0)
(118,359,0)
(307,151,0)
(230,349,0)
(101,75,0)
(349,414,0)
(314,43,0)
(123,376,0)
(23,341,0)
(371,414,0)
(374,125,0)
(374,235,0)
(393,202,0)
(182,178,0)
(322,88,0)
(51,229,0)
(108,329,0)
(179,410,0)
(30,134,0)
(296,399,0)
(227,192,0)
(408,250,0)
(236,235,0)
(303,329,0)
(225,63,0)
(113,235,0)
(344,73,0)
(341,89,0)
(67,344,0)
(296,89,0)
(380,208,0)
(361,148,0)
(75,101,0)
(84,122,0)
(279,89,0)
(84,148,0)
(116,52,0)
(197,213,0)
(94,262,0)
(310,252,0)
(63,273,0)
(161,375,0)
(409,259,0)
(238,0,0)
(380,110,0)
(186,229,0)
(410,171,0)
(244,395,0)
(107,262,0)
(142,221,0)
(214,69,0)
(254,142,0)
(366,16,0)
(268,417,0)
(393,170,0)
(305,332,1)
(345,372,1)
(254,82,1)
(111,192,1)
(173,427,1)
(369,346,1)
(384,225,1)
(262,94,1)
(355,316,1)
(284,11,1)
(410,171,1)
(430,379,1)
(314,282,1)
(97,169,1)
(17,185,1)
(312,235,1)
(39,234,1)
(82,351,1)
(195,389,1)
(4,307,1)
(406,401,1)
(340,21,1)
(118,263,1)
(264,231,1)
(229,280,1)
(53,190,1)
(237,235,1)
(389,213,1)
(74,40,1)
(39,13,1)
(380,352,1)
(220,26,1)
(35,405,1)
(290,32,1)
(396,43,1)
(352,14,1)
(15,201,1)
(290,407,1)
(344,106,1)
(256,414,1)
(358,116,1)
(267,429,1)
(38,130,1)
(316,287,1)
(179,91,1)
(361,59,1)
(54,270,1)
(338,300,1)
(255,333,1)
(370,260,1)
(391,283,1)
(308,249,1)
(223,62,1)
(278,82,1)
(60,235,1)
(171,328,1)
(3,152,1)
(76,382,1)
(349,230,1)
(402,382,1)
(135,323,1)
(198,236,1)
(170,336,1)
(43,302,1)
(306,322,1)
(246,74,1)
(365,422,1)
(347,235,1)
(98,258,1)
(178,42,1)
(404,298,1)
(133,104,1)
(48,320,1)
(274,270,1)
(147,162,1)
(129,285,1)
(199,49,1)
(49,349,1)
(31,282,1)
(37,301,1)
(363,312,1)
(72,67,1)
(270,392,1)
(352,408,1)
(65,151,1)
(236,326,1)
(19,330,1)
(131,363,1)
(422,18,1)
(298,13,1)
(183,177,1)
(403,41,1)
(328,432,1)
(132,154,1)
(385,187,1)
(16,136,1)
(201,224,1)
(178,182,1)
(219,60,1)
(263,160,1)
(174,291,1)
(55,364,1)
(251,337,1)
(76,413,1)
(328,15,1)
(324,402,1)
(91,133,1)
(379,180,1)
(291,36,1)
(45,144,1)
(431,176,1)
(423,233,1)
(386,393,1)
(165,190,1)
(98,22,1)
(405,129,1)
(427,284,1)
(418,10,1)
(51,229,1)
(86,371,1)
(92,199,1)
(185,368,1)
(260,148,1)
(257,53,1)
(105,166,1)
(310,24,1)
(247,48,1)
(261,167,1)
(202,164,1)
(209,221,1)
(14,70,1)
(424,52,1)
(401,383,1)
(142,254,1)
(348,148,1)
(368,46,1)
(112,264,1)
(292,213,1)
(160,294,1)
(360,168,1)
(116,215,1)
(96,414,1)
(175,140,1)
(125,374,1)
(387,255,1)
(302,262,1)
(163,213,1)
(390,421,1)
(278,338,1)
(169,17,1)
(207,86,1)
(221,142,1)
(110,390,1)
(429,148,1)
(139,237,1)
(128,65,1)
(224,429,1)
(403,89,1)
(216,325,1)
(161,217,1)
(10,266,1)
(408,250,1)
(51,242,1)
(168,92,1)
(6,399,1)
(67,128,1)
(42,243,1)
(331,126,1)
(407,7,1)
(172,241,1)
(296,165,1)
(294,210,1)
(351,430,1)
(230,189,1)
(323,256,1)
(296,89,1)
(295,408,1)
(100,179,1)
(337,216,1)
(145,344,1)
(188,38,1)
(383,404,1)
(392,139,1)
(184,174,1)
(190,148,1)
(117,313,1)
(123,354,1)
(391,410,1)
(167,432,1)
(61,356,1)
(99,432,1)
(319,340,1)
(151,432,1)
(30,418,1)
(361,148,1)
(122,350,1)
(232,192,1)
(13,357,1)
(272,232,1)
(90,267,1)
(194,292,1)
(242,289,1)
(392,278,1)
(14,250,1)
(343,424,1)
(226,365,1)
(85,432,1)
(287,356,1)
(389,286,1)
(218,125,1)
(217,61,1)
(421,367,1)
(300,414,1)
(318,260,1)
(89,279,1)
(87,72,1)
(167,89,1)
(83,308,1)
(127,145,1)
(99,19,1)
(27,419,1)
(253,361,1)
(321,403,1)
(341,432,1)
(329,414,1)
(180,275,1)
(70,295,1)
(293,321,1)
(413,82,1)
(264,25,1)
(346,110,1)
(203,223,1)
(269,87,1)
(377,82,1)
(142,360,1)
(157,239,1)
(301,235,1)
(236,235,1)
(282,388,1)
(153,420,1)
(336,203,1)
(32,297,1)
(330,355,1)
(320,78,1)
(378,33,1)
(373,47,1)
(273,98,1)
(423,293,1)
(259,409,1)
(397,226,1)
(37,148,1)
(323,96,1)
(131,34,1)
(234,387,1)
(329,303,1)
(107,262,1)
(28,209,1)
(7,32,1)
(84,122,1)
(34,58,1)
(349,414,1)
(218,148,1)
(224,238,1)
(125,148,1)
(409,397,1)
(193,353,1)
(238,130,1)
(155,200,1)
(39,259,1)
(362,37,1)
(151,4,1)
(21,361,1)
(370,57,1)
(22,153,1)
(54,274,1)
(426,290,1)
(225,162,1)
(355,212,1)
(228,150,1)
(300,28,1)
(80,111,1)
(137,152,1)
(147,132,1)
(144,354,1)
(43,314,1)
(216,128,1)
(103,363,1)
(208,421,1)
(88,348,1)
(302,281,1)
(356,417,1)
(424,148,1)
(202,393,1)
(374,235,1)
(344,67,1)
(381,231,1)
(122,235,1)
(194,389,1)
(231,433,1)
(252,88,1)
(103,131,1)
(12,280,1)
(312,252,1)
(152,77,1)
(325,318,1)
(292,159,1)
(347,155,1)
(252,89,1)
(241,306,1)
(254,373,1)
(212,347,1)
(244,223,1)
(126,426,1)
(228,148,1)
(250,261,1)
(106,87,1)
(104,124,1)
(229,231,1)
(415,235,1)
(341,89,1)
(360,82,1)
(400,331,1)
(46,329,1)
(428,8,1)
(146,423,1)
(362,97,1)
(197,183,1)
(52,235,1)
(88,148,1)
(382,376,1)
(164,211,1)
(219,148,1)
(5,89,1)
(85,89,1)
(354,414,1)
(277,96,1)
(197,213,1)
(415,311,1)
(388,158,1)
(174,20,1)
(210,105,1)
(30,262,1)
(94,85,1)
(186,112,1)
(287,431,1)
(374,66,1)
(64,305,1)
(34,410,1)
(249,410,1)
(140,115,1)
(41,315,1)
(71,188,1)
(317,123,1)
(314,391,1)
(365,89,1)
(57,181,1)
(331,20,1)
(305,103,1)
(9,218,1)
(26,244,1)
(393,170,1)
(67,80,1)
(66,157,1)
(425,55,1)
(44,428,1)
(77,399,1)
(427,250,1)
(130,128,1)
(270,139,1)
(288,64,1)
(18,102,1)
(204,356,1)
(9,89,1)
(58,30,1)
(429,415,1)
(176,212,1)
(150,342,1)
(377,27,1)
(115,179,1)
(283,31,1)
(182,42,1)
(343,228,1)
(132,262,1)
(411,423,1)
(154,273,1)
(77,6,1)
(23,341,1)
(297,184,1)
(158,240,1)
(164,250,1)
(136,366,1)
(417,268,1)
(25,411,1)
(248,277,1)
(258,16,1)
(59,250,1)
(366,63,1)
(107,288,1)
(376,317,1)
(313,135,1)
(365,235,1)
(420,258,1)
(47,360,1)
(279,236,1)
(127,128,1)
(433,99,1)
(266,104,1)
(75,71,1)
(85,83,1)
(108,37,1)
(268,432,1)
(240,302,1)
(21,220,1)
(301,246,1)
(396,219,1)
(192,227,1)
(205,128,1)
(143,432,1)
(162,262,1)
(399,296,1)
(273,63,1)
(10,107,1)
(209,349,1)
(106,194,1)
(385,213,1)
(62,253,1)
(289,229,1)
(348,113,1)
(421,356,1)
(307,362,1)
(414,93,1)
(430,432,1)
(315,231,1)
(380,110,1)
(161,250,1)
(101,75,1)
(309,77,1)
(190,319,1)
(326,44,1)
(97,329,1)
(280,51,1)
(143,89,1)
(237,9,1)
(32,426,1)
(211,386,1)
(124,107,1)
(367,137,1)
(212,148,1)
(8,141,1)
(84,148,1)
(243,89,1)
(281,196,1)
(223,356,1)
(263,105,1)
(221,199,1)
(354,248,1)
(304,208,1)
(48,432,1)
(333,345,1)
(394,81,1)
(177,75,1)
(166,251,1)
(187,127,1)
(286,269,1)
(60,425,1)
(102,20,1)
(52,358,1)
(48,89,1)
(364,305,1)
(401,432,1)
(255,372,1)
(229,186,1)
(93,143,1)
(275,357,1)
(353,205,1)
(357,327,1)
(285,287,1)
(322,310,1)
(268,394,1)
(175,410,1)
(144,76,1)
(33,204,1)
(118,216,1)
(36,259,1)
(113,235,1)
(227,178,1)
(100,175,1)
(332,103,1)
(350,257,1)
(32,20,1)
(181,118,1)
(101,197,1)
(419,17,1)
(57,128,1)
(321,381,1)
(400,226,1)
(233,293,1)
(279,198,1)
(239,117,1)
(200,3,1)
(408,369,1)
(63,384,1)
(327,5,1)
(266,100,1)
(165,84,1)
(152,309,1)
(182,385,1)
(397,400,1)
(61,304,1)
(259,397,1)
(238,101,1)
(260,163,1)
(130,90,1)
(220,356,1)
(316,173,1)
(196,219,1)
(189,54,1)
(208,380,1)
(24,147,1)
(173,35,1)
(143,207,1)
(326,148,1)
(243,343,1)
(341,193,1)
(167,378,1)
(342,370,1)
(372,406,1)
(20,247,1)
(215,228,1)
(78,146,1)
(192,178,1)
(413,324,1)
(169,377,1)
(371,82,1)
(81,396,1)
(256,45,1)
(381,12,1)
(40,54,1)
(179,410,1)
(11,35,1)
(160,213,1)
(244,202,1)
(6,161,1)
(213,23,1)
(357,235,1)
(293,403,1)
(311,272,1)
(303,108,1)
(22,410,1)
(63,262,1)
(159,195,1)
(113,172,1)
(77,357,2)
(84,357,2)
(409,357,2)
(143,432,2)
(150,357,2)
(48,89,2)
(260,357,2)
(21,357,2)
(354,414,2)
(227,357,2)
(293,357,2)
(42,357,2)
(250,357,2)
(204,357,2)
(266,100,2)
(76,96,2)
(285,212,2)
(60,357,2)
(405,212,2)
(209,221,2)
(215,357,2)
(32,259,2)
(262,357,2)
(415,235,2)
(269,192,2)
(207,357,2)
(200,357,2)
(152,357,2)
(195,192,2)
(212,347,2)
(357,235,2)
(165,357,2)
(403,357,2)
(400,357,2)
(393,361,2)
(208,380,2)
(92,54,2)
(293,403,2)
(295,152,2)
(314,219,2)
(84,148,2)
(167,89,2)
(391,410,2)
(162,357,2)
(125,374,2)
(167,432,2)
(352,408,2)
(360,82,2)
(188,429,2)
(93,143,2)
(83,357,2)
(380,110,2)
(139,237,2)
(305,103,2)
(52,357,2)
(244,223,2)
(112,423,2)
(37,148,2)
(248,96,2)
(347,357,2)
(14,152,2)
(386,361,2)
(361,148,2)
(401,432,2)
(174,259,2)
(54,270,2)
(351,430,2)
(101,197,2)
(46,37,2)
(406,401,2)
(122,357,2)
(105,166,2)
(77,152,2)
(433,357,2)
(250,261,2)
(323,357,2)
(174,20,2)
(290,32,2)
(208,421,2)
(62,361,2)
(136,162,2)
(229,423,2)
(279,236,2)
(218,125,2)
(205,357,2)
(410,357,2)
(306,357,2)
(45,96,2)
(38,429,2)
(104,305,2)
(169,377,2)
(289,423,2)
(107,262,2)
(22,162,2)
(173,35,2)
(422,357,2)
(85,357,2)
(389,213,2)
(317,96,2)
(220,356,2)
(396,357,2)
(170,361,2)
(348,357,2)
(236,235,2)
(291,259,2)
(409,259,2)
(384,162,2)
(61,152,2)
(328,357,2)
(401,13,2)
(321,423,2)
(408,152,2)
(377,37,2)
(281,219,2)
(298,13,2)
(220,361,2)
(252,89,2)
(243,343,2)
(197,213,2)
(103,305,2)
(261,357,2)
(253,361,2)
(240,219,2)
(98,162,2)
(221,142,2)
(177,429,2)
(7,259,2)
(57,128,2)
(194,292,2)
(49,54,2)
(429,415,2)
(421,152,2)
(33,357,2)
(76,382,2)
(369,152,2)
(20,247,2)
(190,148,2)
(272,357,2)
(275,357,2)
(344,67,2)
(399,357,2)
(110,152,2)
(374,357,2)
(37,357,2)
(408,250,2)
(128,65,2)
(167,357,2)
(182,357,2)
(131,357,2)
(87,192,2)
(9,357,2)
(331,259,2)
(332,357,2)
(202,361,2)
(173,212,2)
(103,357,2)
(51,229,2)
(225,162,2)
(97,37,2)
(372,406,2)
(106,194,2)
(64,305,2)
(208,152,2)
(173,427,2)
(165,84,2)
(414,93,2)
(42,243,2)
(129,212,2)
(348,113,2)
(370,357,2)
(296,89,2)
(354,96,2)
(287,356,2)
(86,357,2)
(340,357,2)
(201,357,2)
(113,235,2)
(78,357,2)
(168,54,2)
(123,96,2)
(140,305,2)
(320,357,2)
(343,357,2)
(178,42,2)
(346,152,2)
(341,357,2)
(126,259,2)
(36,259,2)
(127,192,2)
(130,429,2)
(99,432,2)
(58,305,2)
(270,139,2)
(314,391,2)
(363,357,2)
(311,357,2)
(144,96,2)
(263,260,2)
(345,13,2)
(330,357,2)
(393,170,2)
(268,357,2)
(380,152,2)
(116,357,2)
(341,89,2)
(97,169,2)
(91,305,2)
(331,20,2)
(365,235,2)
(203,361,2)
(35,405,2)
(316,212,2)
(51,423,2)
(319,357,2)
(282,388,2)
(72,192,2)
(378,357,2)
(157,357,2)
(130,128,2)
(383,13,2)
(268,432,2)
(88,357,2)
(51,242,2)
(216,260,2)
(67,192,2)
(118,216,2)
(97,329,2)
(55,357,2)
(360,54,2)
(233,423,2)
(3,357,2)
(221,199,2)
(249,357,2)
(74,357,2)
(373,54,2)
(54,357,2)
(122,235,2)
(175,410,2)
(338,54,2)
(9,89,2)
(413,82,2)
(242,423,2)
(300,54,2)
(192,192,2)
(417,357,2)
(363,312,2)
(32,20,2)
(263,105,2)
(178,192,2)
(397,259,2)
(217,152,2)
(259,259,2)
(88,148,2)
(301,357,2)
(53,357,2)
(171,357,2)
(47,54,2)
(75,429,2)
(101,429,2)
(100,179,2)
(181,260,2)
(16,162,2)
(262,94,2)
(292,213,2)
(423,357,2)
(9,218,2)
(221,54,2)
(37,301,2)
(284,212,2)
(11,212,2)
(229,280,2)
(353,357,2)
(274,54,2)
(176,212,2)
(213,23,2)
(30,262,2)
(341,432,2)
(399,296,2)
(63,162,2)
(280,423,2)
(98,258,2)
(90,429,2)
(165,190,2)
(10,107,2)
(415,357,2)
(25,423,2)
(247,357,2)
(179,305,2)
(264,423,2)
(309,357,2)
(210,260,2)
(430,357,2)
(264,231,2)
(19,357,2)
(209,54,2)
(371,357,2)
(143,89,2)
(283,219,2)
(113,357,2)
(111,192,2)
(196,219,2)
(379,357,2)
(380,352,2)
(158,219,2)
(98,22,2)
(270,357,2)
(102,357,2)
(85,89,2)
(202,164,2)
(67,128,2)
(297,259,2)
(160,260,2)
(179,410,2)
(385,213,2)
(28,54,2)
(71,429,2)
(15,357,2)
(257,357,2)
(419,37,2)
(105,260,2)
(219,357,2)
(288,305,2)
(48,357,2)
(266,104,2)
(337,260,2)
(17,37,2)
(154,162,2)
(329,37,2)
(296,357,2)
(193,357,2)
(316,287,2)
(259,357,2)
(124,305,2)
(244,361,2)
(14,250,2)
(41,357,2)
(427,212,2)
(251,260,2)
(243,89,2)
(392,54,2)
(400,259,2)
(259,397,2)
(321,357,2)
(12,423,2)
(108,37,2)
(255,372,2)
(382,96,2)
(93,357,2)
(151,432,2)
(361,357,2)
(302,219,2)
(343,424,2)
(356,417,2)
(325,260,2)
(115,305,2)
(211,361,2)
(328,432,2)
(152,152,2)
(274,357,2)
(187,192,2)
(305,357,2)
(178,357,2)
(228,357,2)
(77,399,2)
(132,162,2)
(82,351,2)
(194,192,2)
(223,356,2)
(377,82,2)
(34,305,2)
(216,128,2)
(293,423,2)
(88,348,2)
(287,212,2)
(227,192,2)
(161,152,2)
(43,314,2)
(54,54,2)
(59,357,2)
(24,357,2)
(226,365,2)
(244,202,2)
(184,259,2)
(238,130,2)
(209,349,2)
(6,357,2)
(292,192,2)
(125,357,2)
(270,54,2)
(394,357,2)
(161,250,2)
(10,305,2)
(60,235,2)
(144,354,2)
(89,279,2)
(381,231,2)
(135,357,2)
(273,98,2)
(273,162,2)
(429,357,2)
(85,432,2)
(305,305,2)
(318,260,2)
(349,414,2)
(144,76,2)
(238,101,2)
(343,228,2)
(96,357,2)
(313,357,2)
(352,152,2)
(17,185,2)
(362,357,2)
(273,63,2)
(218,148,2)
(186,423,2)
(139,357,2)
(372,13,2)
(256,414,2)
(278,54,2)
(389,192,2)
(424,357,2)
(417,268,2)
(164,361,2)
(232,357,2)
(142,360,2)
(4,357,2)
(27,37,2)
(420,162,2)
(65,151,2)
(231,357,2)
(309,152,2)
(414,357,2)
(365,89,2)
(192,357,2)
(278,82,2)
(164,250,2)
(342,357,2)
(137,152,2)
(413,96,2)
(147,357,2)
(256,96,2)
(418,305,2)
(312,235,2)
(344,192,2)
(410,171,2)
(171,328,2)
(258,16,2)
(356,357,2)
(303,37,2)
(358,357,2)
(258,162,2)
(308,357,2)
(226,357,2)
(255,13,2)
(194,389,2)
(312,357,2)
(368,37,2)
(290,407,2)
(374,235,2)
(100,175,2)
(142,54,2)
(223,361,2)
(31,219,2)
(236,326,2)
(183,429,2)
(243,357,2)
(391,219,2)
(241,357,2)
(151,357,2)
(118,263,2)
(286,192,2)
(117,357,2)
(301,235,2)
(366,162,2)
(310,357,2)
(315,357,2)
(392,357,2)
(329,414,2)
(23,341,2)
(40,357,2)
(160,213,2)
(125,148,2)
(82,357,2)
(99,357,2)
(296,165,2)
(192,178,2)
(61,356,2)
(424,52,2)
(312,252,2)
(307,357,2)
(304,152,2)
(381,423,2)
(336,361,2)
(63,262,2)
(348,148,2)
(355,357,2)
(332,305,2)
(32,426,2)
(213,357,2)
(143,357,2)
(390,152,2)
(302,262,2)
(48,432,2)
(266,305,2)
(425,357,2)
(254,54,2)
(106,192,2)
(254,82,2)
(103,363,2)
(388,219,2)
(94,85,2)
(233,357,2)
(433,99,2)
(66,357,2)
(106,87,2)
(261,167,2)
(421,356,2)
(84,122,2)
(347,235,2)
(429,148,2)
(406,13,2)
(118,260,2)
(10,266,2)
(219,148,2)
(324,96,2)
(43,219,2)
(294,260,2)
(364,357,2)
(133,305,2)
(382,376,2)
(237,9,2)
(237,357,2)
(166,260,2)
(212,148,2)
(127,128,2)
(57,260,2)
(267,429,2)
(142,254,2)
(427,250,2)
(199,54,2)
(80,192,2)
(403,89,2)
(34,410,2)
(202,393,2)
(344,106,2)
(237,235,2)
(426,259,2)
(290,259,2)
(219,60,2)
(81,357,2)
(282,219,2)
(30,305,2)
(316,173,2)
(247,48,2)
(367,152,2)
(238,429,2)
(212,357,2)
(159,192,2)
(6,152,2)
(350,357,2)
(20,357,2)
(172,357,2)
(76,413,2)
(155,357,2)
(75,71,2)
(13,357,2)
(246,357,2)
(132,262,2)
(224,357,2)
(52,235,2)
(26,361,2)
(145,192,2)
(402,96,2)
(385,192,2)
(376,96,2)
(185,37,2)
(131,305,2)
(107,305,2)
(189,54,2)
(182,192,2)
(153,162,2)
(94,357,2)
(263,160,2)
(231,433,2)
(333,13,2)
(169,17,2)
(352,14,2)
(218,357,2)
(228,148,2)
(197,429,2)
(146,357,2)
(230,54,2)
(326,148,2)
(365,357,2)
(229,231,2)
(322,357,2)
(252,88,2)
(252,357,2)
(423,293,2)
(277,96,2)
(22,410,2)
(169,37,2)
(260,148,2)
(411,423,2)
(426,290,2)
(101,75,2)
(300,414,2)
(180,357,2)
(152,77,2)
(404,13,2)
(43,302,2)
(424,148,2)
(314,282,2)
(163,357,2)
(100,305,2)
(190,357,2)
(423,423,2)
(430,432,2)
(387,13,2)
(175,305,2)
(239,357,2)
(65,357,2)
(35,212,2)
(351,357,2)
(280,51,2)
(431,212,2)
(407,259,2)
(23,357,2)
(397,357,2)
(234,13,2)
(18,357,2)
(128,357,2)
(349,54,2)
(397,226,2)
(70,152,2)
-----------------------------------
(0,)
(1,)
(2,if (parity == (numcols & 1)
(3,parity)
(4,0)
(5,numcols)
(6,n)
(7,HGAIN)
(8,numcols)
(9,llen - parity - (parity == (numcols & 1)
(10,jpc_fix_pluseq(hptr[0], jpc_fix_mul(jpc_dbltofix(GAMMA)
(11,hptr)
(12,lptr)
(13,parity)
(14,hptr[1])
(15,0)
(16,2.0 * GAMMA)
(17,jpc_dbltofix(2.0 * ALPHA)
(18,numcols)
(19,0)
(20,hptr = &a[llen])
(21,n)
(22,lptr[0])
(23,&a[llen])
(24,numcols)
(25,0)
(26,lptr)
(27,0)
(28,hptr)
(29,)
(30,++hptr)
(31,lptr)
(32,hptr[0])
(33,a)
(34,++lptr)
(35,jpc_dbltofix(2.0 * DELTA)
(36,hptr)
(37,parity == (numcols & 1)
(38,2.0)
(39,RET)
(40,parity)
(41,llen)
(42,n = llen - (!parity)
(43,jpc_fix_pluseq(hptr[0], jpc_fix_mul(jpc_dbltofix(2.0 * GAMMA)
(44,parity)
(45,hptr)
(46,2.0)
(47,lptr)
(48,a[llen])
(49,ALPHA)
(50,if (parity)
(51,jpc_fix_mul(lptr[0], jpc_dbltofix(LGAIN)
(52,numcols & 1)
(53,parity)
(54,n-- > 0)
(55,numcols)
(56,while (n-- > 0)
(57,++lptr)
(58,lptr)
(59,parity)
(60,numcols & 1)
(61,++lptr)
(62,0)
(63,hptr[0])
(64,hptr)
(65,&a[0])
(66,1)
(67,lptr[0])
(68,hptr)
(69,)
(70,1)
(71,2.0 * BETA)
(72,BETA)
(73,)
(74,numcols)
(75,jpc_dbltofix(2.0 * BETA)
(76,jpc_fix_mul(jpc_dbltofix(2.0 * ALPHA)
(77,n--)
(78,a)
(79,if (parity == (numcols & 1)
(80,0)
(81,a)
(82,lptr = &a[0])
(83,llen)
(84,parity != (numcols & 1)
(85,a[llen])
(86,a)
(87,jpc_dbltofix(BETA)
(88,parity - (parity == (numcols & 1)
(89,llen = (numcols + 1 - parity)
(90,0)
(91,0)
(92,lptr)
(93,&a[llen])
(94,&a[llen])
(95,)
(96,parity)
(97,jpc_fix_pluseq(hptr[0], jpc_fix_mul(jpc_dbltofix(2.0 * ALPHA)
(98,jpc_fix_mul(jpc_dbltofix(2.0 * GAMMA)
(99,a[0])
(100,jpc_fix_add(lptr[0], lptr[1])
(101,jpc_fix_mul(jpc_dbltofix(2.0 * BETA)
(102,n)
(103,n--)
(104,jpc_dbltofix(GAMMA)
(105,jpc_dbltofix(2.0 * BETA)
(106,jpc_fix_mul(jpc_dbltofix(BETA)
(107,hptr[0])
(108,hptr)
(109,while (n-- > 0)
(110,jpc_dbltofix(DELTA)
(111,lptr)
(112,lptr)
(113,numcols & 1)
(114,llen)
(115,lptr)
(116,numcols)
(117,parity)
(118,jpc_fix_pluseq(lptr[0], jpc_fix_mul(jpc_dbltofix(2.0 * BETA)
(119,)
(120,if (!parity)
(121,lptr)
(122,numcols & 1)
(123,2.0)
(124,GAMMA)
(125,parity == (numcols & 1)
(126,hptr)
(127,++lptr)
(128,lptr = &a[0])
(129,DELTA)
(130,lptr[0])
(131,n)
(132,++hptr)
(133,lptr)
(134,)
(135,numcols)
(136,GAMMA)
(137,lptr)
(138,)
(139,n = numcols - llen - parity - (parity == (numcols & 1)
(140,1)
(141,llen)
(142,jpc_fix_add(lptr[0], lptr[1])
(143,a[llen])
(144,jpc_fix_pluseq(hptr[0], jpc_fix_mul(jpc_dbltofix(2.0 * ALPHA)
(145,lptr)
(146,hptr)
(147,n)
(148,int parity)
(149,if (parity)
(150,parity)
(151,a[0])
(152,n-- > 0)
(153,0)
(154,hptr)
(155,1)
(156,)
(157,numcols)
(158,GAMMA)
(159,1)
(160,hptr[0])
(161,++hptr)
(162,parity)
(163,parity)
(164,hptr[0])
(165,(!parity)
(166,2.0 * BETA)
(167,a[llen])
(168,0)
(169,jpc_fix_mul(jpc_dbltofix(2.0 * ALPHA)
(170,2.0 * DELTA)
(171,&a[0])
(172,1)
(173,jpc_fix_mul(jpc_dbltofix(2.0 * DELTA)
(174,hptr[0])
(175,lptr[1])
(176,lptr)
(177,hptr)
(178,n--)
(179,lptr[0])
(180,a)
(181,lptr)
(182,n)
(183,0)
(184,hptr)
(185,2.0 * ALPHA)
(186,0)
(187,hptr)
(188,BETA)
(189,hptr)
(190,!parity)
(191,if (numcols > 1)
(192,n-- > 0)
(193,llen)
(194,jpc_fix_add(hptr[0], hptr[1])
(195,hptr)
(196,hptr)
(197,hptr[0])
(198,1)
(199,jpc_dbltofix(ALPHA)
(200,numcols)
(201,a)
(202,jpc_fix_mul(jpc_dbltofix(2.0 * DELTA)
(203,2.0)
(204,hptr)
(205,hptr)
(206,n)
(207,llen)
(208,jpc_fix_pluseq(lptr[0], jpc_fix_mul(jpc_dbltofix(DELTA)
(209,jpc_fix_pluseq(hptr[0], jpc_fix_mul(jpc_dbltofix(ALPHA)
(210,hptr)
(211,0)
(212,parity != (numcols & 1)
(213,hptr = &a[llen])
(214,if (parity != (numcols & 1)
(215,parity)
(216,lptr[0])
(217,hptr)
(218,parity - (parity == (numcols & 1)
(219,parity == (numcols & 1)
(220,++lptr)
(221,jpc_fix_mul(jpc_dbltofix(ALPHA)
(222,if (!parity)
(223,lptr[0])
(224,lptr)
(225,hptr)
(226,n = numcols - llen)
(227,0)
(228,!parity)
(229,lptr[0])
(230,0)
(231,lptr = &a[0])
(232,parity)
(233,0)
(234,lptr[0] <<= 1)
(235,int numcols)
(236,numcols + 1 - parity)
(237,numcols - llen - parity - (parity == (numcols & 1)
(238,jpc_fix_pluseq(lptr[0], jpc_fix_mul(jpc_dbltofix(2.0 * BETA)
(239,parity)
(240,2.0)
(241,numcols)
(242,jpc_dbltofix(LGAIN)
(243,llen - (!parity)
(244,jpc_fix_pluseq(lptr[0], jpc_fix_mul(jpc_dbltofix(2.0 * DELTA)
(245,if (parity != (numcols & 1)
(246,1)
(247,&a[llen])
(248,0)
(249,hptr)
(250,hptr = &a[llen])
(251,BETA)
(252,llen - parity - (parity == (numcols & 1)
(253,lptr)
(254,lptr[1])
(255,lptr[0])
(256,++hptr)
(257,numcols)
(258,jpc_dbltofix(2.0 * GAMMA)
(259,n-- > 0)
(260,!parity)
(261,&a[llen])
(262,hptr = &a[llen])
(263,jpc_fix_mul(jpc_dbltofix(2.0 * BETA)
(264,lptr[0])
(265,)
(266,jpc_fix_mul(jpc_dbltofix(GAMMA)
(267,lptr)
(268,a[0])
(269,hptr)
(270,n--)
(271,)
(272,numcols)
(273,jpc_fix_pluseq(hptr[0], jpc_fix_mul(jpc_dbltofix(2.0 * GAMMA)
(274,0)
(275,lptr)
(276,)
(277,hptr)
(278,++lptr)
(279,(numcols + 1 - parity)
(280,lptr[0] = jpc_fix_mul(lptr[0], jpc_dbltofix(LGAIN)
(281,0)
(282,jpc_dbltofix(2.0 * GAMMA)
(283,0)
(284,0)
(285,2.0)
(286,0)
(287,lptr[0])
(288,0)
(289,LGAIN)
(290,jpc_fix_mul(hptr[0], jpc_dbltofix(HGAIN)
(291,0)
(292,hptr[1])
(293,n--)
(294,0)
(295,hptr)
(296,llen - (!parity)
(297,0)
(298,lptr)
(299,)
(300,++hptr)
(301,numcols & 1)
(302,hptr[0])
(303,0)
(304,lptr)
(305,n-- > 0)
(306,parity)
(307,a)
(308,a)
(309,0)
(310,llen)
(311,1)
(312,numcols - llen - parity - (parity == (numcols & 1)
(313,llen)
(314,jpc_fix_mul(jpc_dbltofix(2.0 * GAMMA)
(315,n)
(316,jpc_fix_pluseq(lptr[0], jpc_fix_mul(jpc_dbltofix(2.0 * DELTA)
(317,ALPHA)
(318,lptr)
(319,parity)
(320,llen)
(321,n)
(322,parity)
(323,n)
(324,0)
(325,0)
(326,1 - parity)
(327,1)
(328,a[0])
(329,hptr[0])
(330,a)
(331,++hptr)
(332,0)
(333,0)
(334,if (parity)
(335,)
(336,DELTA)
(337,2.0)
(338,lptr)
(339,while (n-- > 0)
(340,llen)
(341,a[llen])
(342,llen)
(343,(!parity)
(344,jpc_fix_pluseq(lptr[0], jpc_fix_mul(jpc_dbltofix(BETA)
(345,lptr)
(346,hptr)
(347,numcols & 1)
(348,parity == (numcols & 1)
(349,hptr[0])
(350,1)
(351,&a[0])
(352,jpc_fix_add(hptr[0], hptr[1])
(353,a)
(354,hptr[0])
(355,lptr)
(356,lptr = &a[0])
(357,numcols > 1)
(358,1)
(359,)
(360,lptr[0])
(361,!parity)
(362,lptr)
(363,n = numcols - llen - parity - (parity == (numcols & 1)
(364,parity)
(365,numcols - llen)
(366,2.0)
(367,0)
(368,ALPHA)
(369,0)
(370,n)
(371,hptr)
(372,lptr = &a[0])
(373,1)
(374,numcols & 1)
(375,)
(376,2.0 * ALPHA)
(377,lptr[0])
(378,llen)
(379,0)
(380,jpc_fix_mul(jpc_dbltofix(DELTA)
(381,++lptr)
(382,jpc_dbltofix(2.0 * ALPHA)
(383,0)
(384,0)
(385,++hptr)
(386,hptr)
(387,1)
(388,2.0 * GAMMA)
(389,hptr[0])
(390,DELTA)
(391,lptr[0])
(392,n)
(393,jpc_dbltofix(2.0 * DELTA)
(394,0)
(395,)
(396,lptr)
(397,n--)
(398,while (n-- > 0)
(399,n = llen - (!parity)
(400,n)
(401,a[0])
(402,lptr)
(403,n = llen)
(404,a)
(405,2.0 * DELTA)
(406,&a[0])
(407,jpc_dbltofix(HGAIN)
(408,hptr[0])
(409,0)
(410,lptr = &a[0])
(411,lptr)
(412,while (n-- > 0)
(413,lptr[0])
(414,hptr = &a[llen])
(415,numcols & 1)
(416,while (n-- > 0)
(417,&a[0])
(418,hptr)
(419,lptr)
(420,lptr)
(421,lptr[0])
(422,llen)
(423,n-- > 0)
(424,parity != (numcols & 1)
(425,1)
(426,hptr[0] = jpc_fix_mul(hptr[0], jpc_dbltofix(HGAIN)
(427,hptr[0])
(428,1)
(429,parity != (numcols & 1)
(430,a[0])
(431,0)
(432,jpc_fix_t *a)
(433,&a[0])
-----cfg-----
(129,127)
(130,129)
(132,130)
(133,132)
(7,17)
(137,150)
(139,137)
(140,139)
(142,140)
(15,22)
(143,142)
(17,15)
(147,157)
(149,147)
(22,34)
(150,153)
(153,149)
(156,161)
(156,200)
(157,156)
(161,164)
(34,45)
(34,50)
(164,169)
(39,48)
(39,50)
(40,39)
(169,172)
(42,40)
(43,42)
(172,179)
(172,187)
(45,43)
(175,172)
(48,50)
(50,58)
(50,248)
(178,183)
(179,181)
(181,178)
(54,65)
(54,68)
(183,185)
(56,54)
(57,56)
(185,175)
(58,57)
(187,192)
(190,157)
(63,71)
(192,190)
(65,63)
(195,203)
(68,65)
(197,195)
(198,197)
(71,74)
(200,198)
(74,83)
(203,206)
(77,89)
(206,211)
(79,77)
(80,79)
(210,215)
(210,248)
(82,80)
(211,210)
(83,82)
(215,218)
(88,93)
(88,133)
(89,88)
(218,223)
(93,96)
(223,226)
(96,101)
(226,233)
(226,241)
(229,226)
(101,104)
(104,111)
(104,119)
(232,237)
(233,235)
(107,104)
(235,232)
(237,239)
(110,115)
(239,229)
(111,113)
(241,244)
(113,110)
(115,117)
(244,211)
(117,107)
(119,124)
(248,254)
(248,252)
(122,89)
(252,254)
(124,122)
(127,143)
-----path-----
7,17,15,22,34,45,43,42,40,39,48,50,58,57,56,54,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,161,164,169,172,179,181,178,183
7,17,15,22,34,45,43,42,40,39,48,50,58,57,56,54,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210
7,17,15,22,34,45,43,42,40,39,48,50,58,57,56,54,68,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,161,164,169,172,179,181,178
7,17,15,22,34,45,43,42,40,39,48,50,58,57,56,54,68,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,161,164,169,172,187,192,190
7,17,15,22,34,45,43,42,40,39,48,50,58,57,56,54,68,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211
7,17,15,22,34,45,43,42,40,39,48,50,248,254
7,17,15,22,34,45,43,42,40,39,48,50,248,252,254
7,17,15,22,34,45,43,42,40,39,50,58,57,56,54,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,161,164,169,172,179,181,178,183,185
7,17,15,22,34,45,43,42,40,39,50,58,57,56,54,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210,215
7,17,15,22,34,45,43,42,40,39,50,58,57,56,54,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210,248
7,17,15,22,34,45,43,42,40,39,50,58,57,56,54,68,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,161,164,169,172,179,181,178,183
7,17,15,22,34,45,43,42,40,39,50,58,57,56,54,68,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210
7,17,15,22,34,45,43,42,40,39,50,248,254
7,17,15,22,34,45,43,42,40,39,50,248,252,254
7,17,15,22,34,50,58,57,56,54,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,161,164,169,172,179,181,178,183,185,175,172,187,192,190
7,17,15,22,34,50,58,57,56,54,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210,215,218,223,226,233,235
7,17,15,22,34,50,58,57,56,54,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210,215,218,223,226,241,244
7,17,15,22,34,50,58,57,56,54,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210,248,254
7,17,15,22,34,50,58,57,56,54,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210,248,252,254
7,17,15,22,34,50,58,57,56,54,68,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,161,164,169,172,179,181,178,183,185,175,172,187,192
7,17,15,22,34,50,58,57,56,54,68,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210,215,218,223,226,233
7,17,15,22,34,50,58,57,56,54,68,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210,215,218,223,226,241
7,17,15,22,34,50,58,57,56,54,68,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210,248,254
7,17,15,22,34,50,58,57,56,54,68,65,63,71,74,83,82,80,79,77,89,88,133,132,130,129,127,143,142,140,139,137,150,153,149,147,157,156,200,198,197,195,203,206,211,210,248,252,254
7,17,15,22,34,50,248,254
7,17,15,22,34,50,248,252,254
-----cfgNode-----
5,<global>
6,<empty>
7,void jpc_qmfb_split_colres (jpc_fix_t *a,int numrows,int numcols,int stride,int parity)
8,jpc_fix_t *a
9,int numrows
10,int numcols
11,int stride
12,int parity
13,<empty>
14,int bufsize
15,bufsize = JPC_CEILDIVPOW2(numrows, 1)
16,bufsize
17,JPC_CEILDIVPOW2(numrows, 1)
18,numrows
19,1
20,jpc_fix_t[] splitbuf
21,jpc_fix_t* buf
22,*buf = splitbuf
23,buf
24,splitbuf
25,jpc_fix_t* srcptr
26,jpc_fix_t* dstptr
27,jpc_fix_t* srcptr2
28,jpc_fix_t* dstptr2
29,register int n
30,register int i
31,int m
32,int hstartcol
33,if (bufsize > QMFB_SPLITBUFSIZE)
34,bufsize > QMFB_SPLITBUFSIZE
35,bufsize
36,QMFB_SPLITBUFSIZE
37,<empty>
38,if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t))))
39,!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))
40,buf = jas_malloc(bufsize * sizeof(jpc_fix_t))
41,buf
42,jas_malloc(bufsize * sizeof(jpc_fix_t))
43,bufsize * sizeof(jpc_fix_t)
44,bufsize
45,sizeof(jpc_fix_t)
46,jpc_fix_t
47,<empty>
48,abort()
49,if (numrows >= 2)
50,numrows >= 2
51,numrows
52,2
53,<empty>
54,hstartcol = (numrows + 1 - parity) >> 1
55,hstartcol
56,(numrows + 1 - parity) >> 1
57,numrows + 1 - parity
58,numrows + 1
59,numrows
60,1
61,parity
62,1
63,m = (parity) ? hstartcol : (numrows - hstartcol)
64,m
65,(parity) ? hstartcol : (numrows - hstartcol)
66,parity
67,hstartcol
68,numrows - hstartcol
69,numrows
70,hstartcol
71,n = m
72,n
73,m
74,dstptr = buf
75,dstptr
76,buf
77,srcptr = &a[(1 - parity) * stride]
78,srcptr
79,&a[(1 - parity) * stride]
80,a[(1 - parity) * stride]
81,a
82,(1 - parity) * stride
83,1 - parity
84,1
85,parity
86,stride
87,while (n-- > 0)
88,n-- > 0
89,n--
90,n
91,0
92,<empty>
93,dstptr2 = dstptr
94,dstptr2
95,dstptr
96,srcptr2 = srcptr
97,srcptr2
98,srcptr
99,for (i = 0;i < numcols;++i)
100,<empty>
101,i = 0
102,i
103,0
104,i < numcols
105,i
106,numcols
107,++i
108,i
109,<empty>
110,*dstptr2 = *srcptr2
111,*dstptr2
112,dstptr2
113,*srcptr2
114,srcptr2
115,++dstptr2
116,dstptr2
117,++srcptr2
118,srcptr2
119,dstptr += numcols
120,dstptr
121,numcols
122,srcptr += stride << 1
123,srcptr
124,stride << 1
125,stride
126,1
127,dstptr = &a[(1 - parity) * stride]
128,dstptr
129,&a[(1 - parity) * stride]
130,a[(1 - parity) * stride]
131,a
132,(1 - parity) * stride
133,1 - parity
134,1
135,parity
136,stride
137,srcptr = &a[(2 - parity) * stride]
138,srcptr
139,&a[(2 - parity) * stride]
140,a[(2 - parity) * stride]
141,a
142,(2 - parity) * stride
143,2 - parity
144,2
145,parity
146,stride
147,n = numrows - m - (!parity)
148,n
149,numrows - m - (!parity)
150,numrows - m
151,numrows
152,m
153,!parity
154,parity
155,while (n-- > 0)
156,n-- > 0
157,n--
158,n
159,0
160,<empty>
161,dstptr2 = dstptr
162,dstptr2
163,dstptr
164,srcptr2 = srcptr
165,srcptr2
166,srcptr
167,for (i = 0;i < numcols;++i)
168,<empty>
169,i = 0
170,i
171,0
172,i < numcols
173,i
174,numcols
175,++i
176,i
177,<empty>
178,*dstptr2 = *srcptr2
179,*dstptr2
180,dstptr2
181,*srcptr2
182,srcptr2
183,++dstptr2
184,dstptr2
185,++srcptr2
186,srcptr2
187,dstptr += stride
188,dstptr
189,stride
190,srcptr += stride << 1
191,srcptr
192,stride << 1
193,stride
194,1
195,dstptr = &a[hstartcol * stride]
196,dstptr
197,&a[hstartcol * stride]
198,a[hstartcol * stride]
199,a
200,hstartcol * stride
201,hstartcol
202,stride
203,srcptr = buf
204,srcptr
205,buf
206,n = m
207,n
208,m
209,while (n-- > 0)
210,n-- > 0
211,n--
212,n
213,0
214,<empty>
215,dstptr2 = dstptr
216,dstptr2
217,dstptr
218,srcptr2 = srcptr
219,srcptr2
220,srcptr
221,for (i = 0;i < numcols;++i)
222,<empty>
223,i = 0
224,i
225,0
226,i < numcols
227,i
228,numcols
229,++i
230,i
231,<empty>
232,*dstptr2 = *srcptr2
233,*dstptr2
234,dstptr2
235,*srcptr2
236,srcptr2
237,++dstptr2
238,dstptr2
239,++srcptr2
240,srcptr2
241,dstptr += stride
242,dstptr
243,stride
244,srcptr += numcols
245,srcptr
246,numcols
247,if (buf != splitbuf)
248,buf != splitbuf
249,buf
250,splitbuf
251,<empty>
252,jas_free(buf)
253,buf
254,RET
255,jpc_fix_t *a
256,int numrows
257,int numcols
258,int stride
259,int parity
260,RET
261,void jpc_qmfb_split_colres (jpc_fix_t *a,int numrows,int numcols,int stride,int parity)
262,jpc_fix_t *a
263,int numrows
264,int numcols
265,int stride
266,int parity
267,<empty>
268,int bufsize
269,bufsize = JPC_CEILDIVPOW2(numrows, 1)
270,bufsize
271,JPC_CEILDIVPOW2(numrows, 1)
272,numrows
273,1
274,jpc_fix_t[] splitbuf
275,jpc_fix_t* buf
276,*buf = splitbuf
277,buf
278,splitbuf
279,jpc_fix_t* srcptr
280,jpc_fix_t* dstptr
281,jpc_fix_t* srcptr2
282,jpc_fix_t* dstptr2
283,register int n
284,register int i
285,int m
286,int hstartcol
287,if (bufsize > QMFB_SPLITBUFSIZE)
288,bufsize > QMFB_SPLITBUFSIZE
289,bufsize
290,QMFB_SPLITBUFSIZE
291,<empty>
292,if (!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t))))
293,!(buf = jas_malloc(bufsize * sizeof(jpc_fix_t)))
294,buf = jas_malloc(bufsize * sizeof(jpc_fix_t))
295,buf
296,jas_malloc(bufsize * sizeof(jpc_fix_t))
297,bufsize * sizeof(jpc_fix_t)
298,bufsize
299,sizeof(jpc_fix_t)
300,jpc_fix_t
301,<empty>
302,abort()
303,if (numrows >= 2)
304,numrows >= 2
305,numrows
306,2
307,<empty>
308,hstartcol = (numrows + 1 - parity) >> 1
309,hstartcol
310,(numrows + 1 - parity) >> 1
311,numrows + 1 - parity
312,numrows + 1
313,numrows
314,1
315,parity
316,1
317,m = (parity) ? hstartcol : (numrows - hstartcol)
318,m
319,(parity) ? hstartcol : (numrows - hstartcol)
320,parity
321,hstartcol
322,numrows - hstartcol
323,numrows
324,hstartcol
325,n = m
326,n
327,m
328,dstptr = buf
329,dstptr
330,buf
331,srcptr = &a[(1 - parity) * stride]
332,srcptr
333,&a[(1 - parity) * stride]
334,a[(1 - parity) * stride]
335,a
336,(1 - parity) * stride
337,1 - parity
338,1
339,parity
340,stride
341,while (n-- > 0)
342,n-- > 0
343,n--
344,n
345,0
346,<empty>
347,dstptr2 = dstptr
348,dstptr2
349,dstptr
350,srcptr2 = srcptr
351,srcptr2
352,srcptr
353,for (i = 0;i < numcols;++i)
354,<empty>
355,i = 0
356,i
357,0
358,i < numcols
359,i
360,numcols
361,++i
362,i
363,<empty>
364,*dstptr2 = *srcptr2
365,*dstptr2
366,dstptr2
367,*srcptr2
368,srcptr2
369,++dstptr2
370,dstptr2
371,++srcptr2
372,srcptr2
373,dstptr += numcols
374,dstptr
375,numcols
376,srcptr += stride << 1
377,srcptr
378,stride << 1
379,stride
380,1
381,dstptr = &a[(1 - parity) * stride]
382,dstptr
383,&a[(1 - parity) * stride]
384,a[(1 - parity) * stride]
385,a
386,(1 - parity) * stride
387,1 - parity
388,1
389,parity
390,stride
391,srcptr = &a[(2 - parity) * stride]
392,srcptr
393,&a[(2 - parity) * stride]
394,a[(2 - parity) * stride]
395,a
396,(2 - parity) * stride
397,2 - parity
398,2
399,parity
400,stride
401,n = numrows - m - (!parity)
402,n
403,numrows - m - (!parity)
404,numrows - m
405,numrows
406,m
407,!parity
408,parity
409,while (n-- > 0)
410,n-- > 0
411,n--
412,n
413,0
414,<empty>
415,dstptr2 = dstptr
416,dstptr2
417,dstptr
418,srcptr2 = srcptr
419,srcptr2
420,srcptr
421,for (i = 0;i < numcols;++i)
422,<empty>
423,i = 0
424,i
425,0
426,i < numcols
427,i
428,numcols
429,++i
430,i
431,<empty>
432,*dstptr2 = *srcptr2
433,*dstptr2
434,dstptr2
435,*srcptr2
436,srcptr2
437,++dstptr2
438,dstptr2
439,++srcptr2
440,srcptr2
441,dstptr += stride
442,dstptr
443,stride
444,srcptr += stride << 1
445,srcptr
446,stride << 1
447,stride
448,1
449,dstptr = &a[hstartcol * stride]
450,dstptr
451,&a[hstartcol * stride]
452,a[hstartcol * stride]
453,a
454,hstartcol * stride
455,hstartcol
456,stride
457,srcptr = buf
458,srcptr
459,buf
460,n = m
461,n
462,m
463,while (n-- > 0)
464,n-- > 0
465,n--
466,n
467,0
468,<empty>
469,dstptr2 = dstptr
470,dstptr2
471,dstptr
472,srcptr2 = srcptr
473,srcptr2
474,srcptr
475,for (i = 0;i < numcols;++i)
476,<empty>
477,i = 0
478,i
479,0
480,i < numcols
481,i
482,numcols
483,++i
484,i
485,<empty>
486,*dstptr2 = *srcptr2
487,*dstptr2
488,dstptr2
489,*srcptr2
490,srcptr2
491,++dstptr2
492,dstptr2
493,++srcptr2
494,srcptr2
495,dstptr += stride
496,dstptr
497,stride
498,srcptr += numcols
499,srcptr
500,numcols
501,if (buf != splitbuf)
502,buf != splitbuf
503,buf
504,splitbuf
505,<empty>
506,jas_free(buf)
507,buf
508,RET
509,jpc_fix_t *a
510,int numrows
511,int numcols
512,int stride
513,int parity
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, int numcols,   int stride, int parity) {
int bufsize = JPC_CEILDIVPOW2(numrows, 1);
jpc_fix_t splitbuf[bufsize * numcols];
jpc_fix_t *buf = splitbuf;
jpc_fix_t *srcptr;
jpc_fix_t *dstptr;
register jpc_fix_t *srcptr2;
register jpc_fix_t *dstptr2;
register int n;
register int i;
int m;
int hstartcol;
if(numrows >= 2)
hstartcol = (numrows + 1 - parity) >> 1;
m = (parity) ? hstartcol : (numrows - hstartcol);
n = m;
dstptr = buf;
srcptr = &a[(1 - parity) * stride];
while(n-- > 0)
dstptr2 = dstptr;
srcptr2 = srcptr;
for(i = 0;i < numcols;++i)
*dstptr2 = *srcptr2;
++dstptr2;
++srcptr2;
dstptr += numcols;
srcptr += stride << 1;
dstptr = &a[(1 - parity) * stride];
srcptr = &a[(2 - parity) * stride];
n = numrows - m - (!parity);
dstptr = &a[hstartcol * stride];
srcptr = buf;
n = m;
while(n-- > 0)
dstptr2 = dstptr;
srcptr2 = srcptr;
for(i = 0;i < numcols;++i)
*dstptr2 = *srcptr2;
++dstptr2;
++srcptr2;
dstptr += stride;
srcptr += numcols;
=======================
