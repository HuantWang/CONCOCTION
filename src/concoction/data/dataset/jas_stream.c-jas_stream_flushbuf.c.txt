-----label-----
0
-----code-----
int jas_stream_flushbuf(jas_stream_t *stream, int c)
{
	int len;
	int n;

	/* The stream should not be in an error or EOF state. */
	if ((stream->flags_ & (JAS_STREAM_ERRMASK)) != 0) {
		return EOF;
	}

	/* The stream must be open for writing. */
	if ((stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)) == 0) {
		return EOF;
	}

	/* The buffer should not currently be in use for reading. */
	assert(!(stream->bufmode_ & JAS_STREAM_RDBUF));

	/* Note: Do not use the quantity stream->cnt to determine the number
	of characters in the buffer!  Depending on how this function was
	called, the stream->cnt value may be "off-by-one". */
	len = stream->ptr_ - stream->bufstart_;
	if (len > 0) {
		n = (*stream->ops_->write_)(stream->obj_, (char *)
		  stream->bufstart_, len);
		if (n != len) {
			stream->flags_ |= JAS_STREAM_ERR;
			return EOF;
		}
	}
	stream->cnt_ = stream->bufsize_;
	stream->ptr_ = stream->bufstart_;

	stream->bufmode_ |= JAS_STREAM_WRBUF;

	if (c != EOF) {
		assert(stream->cnt_ > 0);
		return jas_stream_putc2(stream, c);
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
16,17
17,18
17,19
19,20
21,22
22,23
22,24
24,25
26,27
26,28
27,28
27,29
28,29
29,30
29,31
30,31
30,32
31,32
34,35
35,36
38,39
39,40
40,41
42,43
42,44
43,44
43,45
44,45
45,46
45,47
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
57,58
58,59
59,60
61,62
62,63
62,64
63,64
65,66
66,67
67,68
67,69
68,69
68,70
69,70
72,73
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
83,84
83,85
84,85
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
94,95
94,96
95,96
97,98
97,99
97,100
97,101
98,99
99,100
100,101
100,102
101,102
101,103
102,103
106,107
106,108
107,108
110,111
110,112
111,112
111,113
113,114
115,116
115,117
116,117
119,120
121,122
121,123
122,123
122,124
123,124
125,126
127,128
127,129
128,129
129,130
129,131
130,131
130,132
131,132
134,135
136,137
137,138
139,140
140,141
140,142
141,142
141,143
142,143
145,146
145,147
146,147
149,150
150,151
150,152
151,152
151,153
152,153
155,156
155,157
156,157
159,160
160,161
160,162
161,162
161,163
162,163
165,166
167,168
167,169
168,169
168,170
169,170
171,172
173,174
173,175
174,175
175,176
175,177
176,177
178,179
178,180
179,180
179,181
180,181
184,185
185,186
185,187
185,188
186,187
188,189
190,191
192,193
-----nextToken-----
2,4,7,9,10,12,14,18,20,23,25,32,33,36,37,41,48,49,53,55,56,60,64,70,71,73,77,81,82,85,86,90,91,96,103,104,105,108,109,112,114,117,118,120,124,126,132,133,135,138,143,144,147,148,153,154,157,158,163,164,166,170,172,177,181,182,183,187,189,191,193
-----computeFrom-----
27,28
27,29
29,30
29,31
43,44
43,45
45,46
45,47
51,52
51,53
67,68
67,69
75,76
75,77
78,79
78,80
88,89
88,90
94,95
94,96
122,123
122,124
129,130
129,131
140,141
140,142
150,151
150,152
160,161
160,162
168,169
168,170
178,179
178,180
-----guardedBy-----
90,126
170,191
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int jas_stream_flushbuf(jas_stream_t *stream, int c){	int len;	int n;	/* The stream should not be in an error or EOF state. */	if ((stream->flags_ & (JAS_STREAM_ERRMASK)) != 0) {		return EOF;	}	/* The stream must be open for writing. */	if ((stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)) == 0) {		return EOF;	}	/* The buffer should not currently be in use for reading. */	assert(!(stream->bufmode_ & JAS_STREAM_RDBUF));	/* Note: Do not use the quantity stream->cnt to determine the number	of characters in the buffer!  Depending on how this function was	called, the stream->cnt value may be "off-by-one". */	len = stream->ptr_ - stream->bufstart_;	if (len > 0) {		n = (*stream->ops_->write_)(stream->obj_, (char *)		  stream->bufstart_, len);		if (n != len) {			stream->flags_ |= JAS_STREAM_ERR;			return EOF;		}	}	stream->cnt_ = stream->bufsize_;	stream->ptr_ = stream->bufstart_;	stream->bufmode_ |= JAS_STREAM_WRBUF;	if (c != EOF) {		assert(stream->cnt_ > 0);		return jas_stream_putc2(stream, c);	}	return 0;}
int
jas_stream_flushbuf(jas_stream_t *stream, int c)
jas_stream_flushbuf
jas_stream_t *stream
jas_stream_t
jas_stream_t
*stream
*
stream
int c
int
c
c
{	int len;	int n;	/* The stream should not be in an error or EOF state. */	if ((stream->flags_ & (JAS_STREAM_ERRMASK)) != 0) {		return EOF;	}	/* The stream must be open for writing. */	if ((stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)) == 0) {		return EOF;	}	/* The buffer should not currently be in use for reading. */	assert(!(stream->bufmode_ & JAS_STREAM_RDBUF));	/* Note: Do not use the quantity stream->cnt to determine the number	of characters in the buffer!  Depending on how this function was	called, the stream->cnt value may be "off-by-one". */	len = stream->ptr_ - stream->bufstart_;	if (len > 0) {		n = (*stream->ops_->write_)(stream->obj_, (char *)		  stream->bufstart_, len);		if (n != len) {			stream->flags_ |= JAS_STREAM_ERR;			return EOF;		}	}	stream->cnt_ = stream->bufsize_;	stream->ptr_ = stream->bufstart_;	stream->bufmode_ |= JAS_STREAM_WRBUF;	if (c != EOF) {		assert(stream->cnt_ > 0);		return jas_stream_putc2(stream, c);	}	return 0;}
int len;
int len;
int
len
len
int n;
int n;
int
n
n
if ((stream->flags_ & (JAS_STREAM_ERRMASK)) != 0) {		return EOF;	}
(stream->flags_ & (JAS_STREAM_ERRMASK)) != 0
(stream->flags_ & (JAS_STREAM_ERRMASK))
stream->flags_ & (JAS_STREAM_ERRMASK)
stream->flags_
stream
stream
flags_
(JAS_STREAM_ERRMASK)
JAS_STREAM_ERRMASK
JAS_STREAM_ERRMASK
0
{		return EOF;	}
return EOF;
EOF
EOF
if ((stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)) == 0) {		return EOF;	}
(stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)) == 0
(stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND))
stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)
stream->openmode_
stream
stream
openmode_
(JAS_STREAM_WRITE | JAS_STREAM_APPEND)
JAS_STREAM_WRITE | JAS_STREAM_APPEND
JAS_STREAM_WRITE
JAS_STREAM_WRITE
JAS_STREAM_APPEND
JAS_STREAM_APPEND
0
{		return EOF;	}
return EOF;
EOF
EOF
assert(!(stream->bufmode_ & JAS_STREAM_RDBUF));
assert(!(stream->bufmode_ & JAS_STREAM_RDBUF))
assert
assert
!(stream->bufmode_ & JAS_STREAM_RDBUF)
(stream->bufmode_ & JAS_STREAM_RDBUF)
stream->bufmode_ & JAS_STREAM_RDBUF
stream->bufmode_
stream
stream
bufmode_
JAS_STREAM_RDBUF
JAS_STREAM_RDBUF
len = stream->ptr_ - stream->bufstart_;
len = stream->ptr_ - stream->bufstart_
len
len
stream->ptr_ - stream->bufstart_
stream->ptr_
stream
stream
ptr_
stream->bufstart_
stream
stream
bufstart_
if (len > 0) {		n = (*stream->ops_->write_)(stream->obj_, (char *)		  stream->bufstart_, len);		if (n != len) {			stream->flags_ |= JAS_STREAM_ERR;			return EOF;		}	}
len > 0
len
len
0
{		n = (*stream->ops_->write_)(stream->obj_, (char *)		  stream->bufstart_, len);		if (n != len) {			stream->flags_ |= JAS_STREAM_ERR;			return EOF;		}	}
n = (*stream->ops_->write_)(stream->obj_, (char *)		  stream->bufstart_, len);
n = (*stream->ops_->write_)(stream->obj_, (char *)		  stream->bufstart_, len)
n
n
(*stream->ops_->write_)(stream->obj_, (char *)		  stream->bufstart_, len)
(*stream->ops_->write_)
*stream->ops_->write_
stream->ops_->write_
stream->ops_
stream
stream
ops_
write_
stream->obj_
stream
stream
obj_
(char *)		  stream->bufstart_
char *
char
*
*
stream->bufstart_
stream
stream
bufstart_
len
len
if (n != len) {			stream->flags_ |= JAS_STREAM_ERR;			return EOF;		}
n != len
n
n
len
len
{			stream->flags_ |= JAS_STREAM_ERR;			return EOF;		}
stream->flags_ |= JAS_STREAM_ERR;
stream->flags_ |= JAS_STREAM_ERR
stream->flags_
stream
stream
flags_
JAS_STREAM_ERR
JAS_STREAM_ERR
return EOF;
EOF
EOF
stream->cnt_ = stream->bufsize_;
stream->cnt_ = stream->bufsize_
stream->cnt_
stream
stream
cnt_
stream->bufsize_
stream
stream
bufsize_
stream->ptr_ = stream->bufstart_;
stream->ptr_ = stream->bufstart_
stream->ptr_
stream
stream
ptr_
stream->bufstart_
stream
stream
bufstart_
stream->bufmode_ |= JAS_STREAM_WRBUF;
stream->bufmode_ |= JAS_STREAM_WRBUF
stream->bufmode_
stream
stream
bufmode_
JAS_STREAM_WRBUF
JAS_STREAM_WRBUF
if (c != EOF) {		assert(stream->cnt_ > 0);		return jas_stream_putc2(stream, c);	}
c != EOF
c
c
EOF
EOF
{		assert(stream->cnt_ > 0);		return jas_stream_putc2(stream, c);	}
assert(stream->cnt_ > 0);
assert(stream->cnt_ > 0)
assert
assert
stream->cnt_ > 0
stream->cnt_
stream
stream
cnt_
0
return jas_stream_putc2(stream, c);
jas_stream_putc2(stream, c)
jas_stream_putc2
jas_stream_putc2
stream
stream
c
c
return 0;
0
-----joern-----
(10,94,0)
(3,40,0)
(13,130,0)
(120,60,0)
(72,144,0)
(125,103,0)
(5,73,0)
(71,65,0)
(6,0,0)
(111,104,0)
(83,52,0)
(32,42,0)
(30,103,0)
(145,18,0)
(68,29,0)
(21,30,0)
(134,41,0)
(11,144,0)
(68,104,0)
(114,18,0)
(98,91,0)
(93,129,0)
(18,109,0)
(38,85,0)
(8,130,0)
(131,25,0)
(96,101,0)
(25,103,0)
(105,146,0)
(2,145,0)
(121,108,0)
(23,48,0)
(5,102,0)
(81,103,0)
(76,93,0)
(31,63,0)
(121,24,0)
(123,68,0)
(14,73,0)
(135,94,0)
(69,4,0)
(15,63,0)
(150,12,0)
(119,66,0)
(40,101,0)
(33,85,0)
(18,140,0)
(136,23,0)
(58,60,0)
(86,87,0)
(97,47,0)
(121,11,0)
(63,109,0)
(98,33,0)
(69,142,0)
(104,109,0)
(49,60,0)
(116,101,0)
(145,103,0)
(104,68,0)
(34,11,0)
(114,0,0)
(35,5,0)
(121,38,0)
(42,130,0)
(98,114,0)
(4,113,0)
(118,81,0)
(0,78,0)
(54,5,0)
(55,87,0)
(105,103,0)
(60,101,0)
(59,103,0)
(73,88,0)
(12,130,0)
(105,4,0)
(61,48,0)
(108,22,0)
(52,78,0)
(92,38,0)
(1,129,0)
(16,45,0)
(56,104,0)
(60,130,0)
(149,101,0)
(137,110,0)
(85,33,0)
(121,145,0)
(81,57,0)
(110,103,0)
(121,25,0)
(9,145,0)
(148,91,0)
(48,80,0)
(110,4,0)
(73,130,0)
(103,59,0)
(41,52,0)
(143,97,0)
(50,30,0)
(35,97,0)
(20,130,0)
(122,107,0)
(27,25,0)
(33,98,0)
(94,135,0)
(45,65,0)
(121,110,0)
(69,29,0)
(149,30,0)
(5,12,0)
(85,36,0)
(66,130,0)
(127,101,0)
(8,149,0)
(17,81,0)
(35,66,0)
(121,41,0)
(124,69,0)
(19,65,0)
(105,85,0)
(66,101,0)
(84,125,0)
(112,101,0)
(121,93,0)
(77,23,0)
(53,125,0)
(135,103,0)
(114,103,0)
(57,74,0)
(7,108,0)
(142,69,0)
(95,114,0)
(147,114,0)
(107,130,0)
(132,103,0)
(39,11,0)
(91,98,0)
(89,57,0)
(108,103,0)
(28,41,0)
(139,60,0)
(121,73,0)
(90,105,0)
(30,149,0)
(45,116,0)
(107,102,0)
(51,101,0)
(105,144,0)
(144,101,0)
(114,98,0)
(126,127,0)
(130,20,0)
(146,105,0)
(38,103,0)
(99,8,0)
(121,87,0)
(87,103,0)
(125,127,0)
(44,105,0)
(64,22,0)
(82,121,0)
(130,13,0)
(79,101,0)
(65,45,0)
(115,88,0)
(35,121,0)
(117,101,0)
(23,103,0)
(62,130,0)
(4,69,0)
(133,93,0)
(67,101,0)
(141,18,0)
(70,115,0)
(93,103,0)
(37,101,0)
(11,103,0)
(22,140,0)
(88,101,0)
(100,38,0)
(87,40,0)
(41,103,0)
(26,12,0)
(138,8,0)
(30,21,0)
(25,0,0)
(116,45,0)
(43,101,0)
(129,36,0)
(12,116,0)
(48,109,0)
(121,8,0)
(42,24,0)
(103,135,0)
(106,110,0)
(121,12,0)
(128,108,0)
(88,115,0)
(46,73,0)
(17,68,1)
(149,30,1)
(131,63,1)
(28,0,1)
(52,83,1)
(18,109,1)
(108,103,1)
(99,138,1)
(89,81,1)
(54,107,1)
(125,103,1)
(115,70,1)
(53,57,1)
(121,87,1)
(68,29,1)
(83,41,1)
(35,121,1)
(88,115,1)
(10,132,1)
(132,88,1)
(111,56,1)
(147,95,1)
(76,85,1)
(31,15,1)
(30,21,1)
(25,27,1)
(121,108,1)
(41,103,1)
(121,93,1)
(86,55,1)
(118,17,1)
(12,26,1)
(27,131,1)
(123,104,1)
(93,103,1)
(20,62,1)
(35,66,1)
(14,46,1)
(30,50,1)
(38,100,1)
(121,11,1)
(108,7,1)
(91,148,1)
(82,42,1)
(18,141,1)
(49,116,1)
(116,45,1)
(145,103,1)
(144,72,1)
(48,109,1)
(34,39,1)
(136,68,1)
(72,11,1)
(69,124,1)
(41,134,1)
(138,59,1)
(8,130,1)
(121,12,1)
(124,110,1)
(94,10,1)
(30,103,1)
(105,85,1)
(66,119,1)
(11,34,1)
(35,5,1)
(46,60,1)
(13,130,1)
(48,61,1)
(106,75,1)
(103,135,1)
(143,13,1)
(114,147,1)
(90,4,1)
(58,49,1)
(97,143,1)
(95,38,1)
(3,87,1)
(81,103,1)
(104,111,1)
(110,103,1)
(77,136,1)
(60,120,1)
(135,94,1)
(84,53,1)
(68,123,1)
(45,65,1)
(25,103,1)
(126,125,1)
(35,97,1)
(114,18,1)
(63,109,1)
(134,28,1)
(4,69,1)
(22,64,1)
(105,144,1)
(60,130,1)
(85,33,1)
(120,139,1)
(110,137,1)
(59,103,1)
(1,93,1)
(121,41,1)
(90,129,1)
(137,106,1)
(133,76,1)
(75,22,1)
(55,149,1)
(38,103,1)
(128,18,1)
(63,31,1)
(105,103,1)
(56,146,1)
(130,20,1)
(148,114,1)
(121,110,1)
(33,98,1)
(50,8,1)
(127,126,1)
(7,128,1)
(69,29,1)
(42,130,1)
(119,127,1)
(81,118,1)
(57,89,1)
(150,13,1)
(105,4,1)
(87,86,1)
(121,25,1)
(141,145,1)
(121,145,1)
(23,103,1)
(100,92,1)
(32,146,1)
(8,99,1)
(121,82,1)
(104,109,1)
(73,14,1)
(98,114,1)
(65,71,1)
(0,6,1)
(93,133,1)
(129,1,1)
(12,130,1)
(92,75,1)
(66,130,1)
(114,0,1)
(69,142,1)
(75,52,1)
(71,19,1)
(40,3,1)
(39,40,1)
(105,44,1)
(139,58,1)
(146,105,1)
(9,2,1)
(122,59,1)
(53,48,1)
(107,130,1)
(61,23,1)
(5,12,1)
(5,73,1)
(64,108,1)
(70,73,1)
(114,103,1)
(87,103,1)
(19,16,1)
(145,9,1)
(15,144,1)
(26,150,1)
(125,84,1)
(121,38,1)
(68,104,1)
(121,8,1)
(107,122,1)
(98,91,1)
(16,12,1)
(23,77,1)
(121,73,1)
(6,25,1)
(73,130,1)
(5,54,1)
(42,32,1)
(44,90,1)
(2,63,1)
(11,103,1)
(60,13,2)
(3,59,2)
(116,45,2)
(28,63,2)
(15,59,2)
(33,75,2)
(108,103,2)
(26,13,2)
(70,13,2)
(130,20,2)
(40,59,2)
(35,97,2)
(45,13,2)
(56,146,2)
(42,146,2)
(5,12,2)
(5,59,2)
(30,103,2)
(105,144,2)
(81,103,2)
(12,130,2)
(53,146,2)
(150,13,2)
(123,104,2)
(87,59,2)
(76,75,2)
(69,142,2)
(12,13,2)
(121,87,2)
(63,59,2)
(87,103,2)
(133,75,2)
(114,18,2)
(59,103,2)
(41,103,2)
(124,75,2)
(146,59,2)
(104,146,2)
(35,121,2)
(8,59,2)
(121,25,2)
(99,59,2)
(81,68,2)
(55,59,2)
(5,73,2)
(38,75,2)
(135,13,2)
(61,68,2)
(63,109,2)
(13,130,2)
(145,103,2)
(41,63,2)
(23,103,2)
(66,146,2)
(120,13,2)
(147,75,2)
(121,41,2)
(149,30,2)
(97,13,2)
(77,68,2)
(148,75,2)
(106,75,2)
(85,33,2)
(68,146,2)
(125,103,2)
(135,94,2)
(46,13,2)
(110,103,2)
(38,103,2)
(68,29,2)
(54,59,2)
(121,8,2)
(0,63,2)
(105,4,2)
(121,146,2)
(57,68,2)
(66,130,2)
(93,103,2)
(103,135,2)
(48,68,2)
(59,13,2)
(14,13,2)
(105,59,2)
(19,13,2)
(105,85,2)
(90,59,2)
(91,75,2)
(107,130,2)
(89,68,2)
(25,63,2)
(115,13,2)
(8,130,2)
(18,63,2)
(84,146,2)
(30,21,2)
(127,146,2)
(9,63,2)
(88,13,2)
(104,109,2)
(49,13,2)
(98,75,2)
(17,68,2)
(132,13,2)
(4,69,2)
(143,13,2)
(18,109,2)
(136,68,2)
(103,13,2)
(25,103,2)
(4,75,2)
(128,63,2)
(11,103,2)
(129,75,2)
(114,103,2)
(58,13,2)
(92,75,2)
(149,59,2)
(98,114,2)
(23,68,2)
(137,75,2)
(111,146,2)
(72,59,2)
(65,13,2)
(119,146,2)
(139,13,2)
(105,103,2)
(114,0,2)
(31,59,2)
(114,75,2)
(116,13,2)
(86,59,2)
(95,75,2)
(68,104,2)
(145,63,2)
(42,130,2)
(82,146,2)
(83,63,2)
(118,68,2)
(141,63,2)
(27,63,2)
(35,66,2)
(122,59,2)
(88,115,2)
(125,146,2)
(134,63,2)
(32,146,2)
(64,63,2)
(93,75,2)
(131,63,2)
(121,11,2)
(16,13,2)
(121,145,2)
(22,63,2)
(34,59,2)
(121,110,2)
(1,75,2)
(11,59,2)
(44,59,2)
(100,75,2)
(30,59,2)
(33,98,2)
(144,59,2)
(121,73,2)
(73,130,2)
(138,59,2)
(69,75,2)
(121,12,2)
(126,146,2)
(71,13,2)
(75,59,2)
(50,59,2)
(52,63,2)
(108,63,2)
(121,93,2)
(10,13,2)
(48,109,2)
(94,13,2)
(45,65,2)
(98,91,2)
(85,75,2)
(60,130,2)
(121,108,2)
(7,63,2)
(39,59,2)
(110,75,2)
(69,29,2)
(107,59,2)
(146,105,2)
(2,63,2)
(6,63,2)
(73,13,2)
(35,5,2)
(121,38,2)
-----------------------------------
(0,obj->bufsize_ = 1024)
(1,1)
(2,obj)
(3,0)
(4,obj->buf_ = (unsigned char *)
(5,return 0;)
(6,1024)
(7,growable_)
(8,stream->obj_)
(9,bufsize_)
(10,jas_stream_memobj_t)
(11,obj->buf_)
(12,stream->openmode_)
(13,!(stream = jas_stream_create()
(14,ops_)
(15,bufsize)
(16,JAS_STREAM_READ)
(17,obj)
(18,obj->bufsize_ = bufsize)
(19,JAS_STREAM_WRITE)
(20,jas_stream_create()
(21,void *)
(22,obj->growable_ = 0)
(23,obj->len_)
(24,)
(25,obj->bufsize_)
(26,openmode_)
(27,bufsize_)
(28,obj)
(29,char *buf)
(30,(void *)
(31,0)
(32,stream)
(33,jas_malloc(obj->bufsize_ * sizeof(char)
(34,buf_)
(35,RET)
(36,)
(37,if (bufsize <= 0)
(38,obj->buf_)
(39,obj)
(40,obj->myalloc_ = 0)
(41,obj->growable_)
(42,jas_stream_close(stream)
(43,if (!(stream = jas_stream_create()
(44,buf_)
(45,JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY)
(46,stream)
(47,)
(48,obj->len_ = bufsize)
(49,stream)
(50,obj)
(51,obj)
(52,obj->growable_ = 1)
(53,obj)
(54,0)
(55,obj)
(56,bufsize)
(57,obj->len_ = 0)
(58,JAS_STREAM_FULLBUF)
(59,!(obj = jas_malloc(sizeof(jas_stream_memobj_t)
(60,jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0)
(61,bufsize)
(62,stream)
(63,bufsize <= 0)
(64,0)
(65,JAS_STREAM_WRITE | JAS_STREAM_BINARY)
(66,return stream;)
(67,stream)
(68,bufsize > 0 && buf)
(69,(unsigned char *)
(70,jas_stream_memops)
(71,JAS_STREAM_BINARY)
(72,0)
(73,stream->ops_)
(74,)
(75,buf)
(76,obj)
(77,len_)
(78,)
(79,if (bufsize > 0 && buf)
(80,)
(81,obj->len_)
(82,0)
(83,1)
(84,pos_)
(85,obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char)
(86,myalloc_)
(87,obj->myalloc_)
(88,stream->ops_ = &jas_stream_memops)
(89,0)
(90,obj)
(91,sizeof(char)
(92,obj)
(93,obj->myalloc_)
(94,sizeof(jas_stream_memobj_t)
(95,obj)
(96,if (!(obj = jas_malloc(sizeof(jas_stream_memobj_t)
(97,return 0;)
(98,obj->bufsize_ * sizeof(char)
(99,obj_)
(100,buf_)
(101,)
(102,)
(103,obj = jas_malloc(sizeof(jas_stream_memobj_t)
(104,bufsize > 0)
(105,obj->buf_)
(106,obj)
(107,jas_stream_destroy(stream)
(108,obj->growable_)
(109,int bufsize)
(110,obj->buf_)
(111,0)
(112,if (buf)
(113,)
(114,obj->bufsize_)
(115,&jas_stream_memops)
(116,stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY)
(117,if (!obj->buf_)
(118,len_)
(119,stream)
(120,0)
(121,return 0;)
(122,stream)
(123,buf)
(124,buf)
(125,obj->pos_)
(126,0)
(127,obj->pos_ = 0)
(128,obj)
(129,obj->myalloc_ = 1)
(130,stream = jas_stream_create()
(131,obj)
(132,obj)
(133,myalloc_)
(134,growable_)
(135,jas_malloc(sizeof(jas_stream_memobj_t)
(136,obj)
(137,buf_)
(138,stream)
(139,0)
(140,)
(141,bufsize)
(142,unsigned char *)
(143,0)
(144,obj->buf_ = 0)
(145,obj->bufsize_)
(146,!obj->buf_)
(147,bufsize_)
(148,char)
(149,stream->obj_ = (void *)
(150,stream)
-----cfg-----
(7,18)
(14,22)
(14,29)
(15,14)
(16,15)
(18,16)
(22,124)
(25,35)
(25,42)
(26,25)
(27,30)
(29,27)
(30,26)
(35,124)
(37,49)
(38,37)
(39,38)
(40,39)
(42,40)
(44,54)
(46,44)
(47,52)
(49,47)
(50,46)
(52,50)
(54,65)
(54,91)
(58,77)
(60,58)
(61,69)
(62,61)
(63,66)
(65,63)
(66,62)
(67,71)
(69,67)
(70,60)
(71,74)
(72,70)
(74,72)
(77,84)
(77,91)
(81,86)
(82,81)
(84,82)
(86,124)
(88,98)
(89,94)
(91,89)
(92,88)
(94,92)
(95,105)
(96,101)
(98,96)
(99,95)
(101,99)
(102,108)
(103,102)
(105,103)
(108,116)
(108,122)
(112,119)
(113,112)
(114,113)
(116,114)
(118,124)
(119,118)
(122,124)
-----path-----
7,18,16,15,14,22,124
7,18,16,15,14,29,27,30,26,25,35,124
7,18,16,15,14,29,27,30,26,25,42,40,39,38,37,49,47,52,50,46,44,54,65,63,66,62,61,69,67,71,74,72,70,60,58,77,84,82,81,86,124
7,18,16,15,14,29,27,30,26,25,42,40,39,38,37,49,47,52,50,46,44,54,65,63,66,62,61,69,67,71,74,72,70,60,58,77,91,89,94,92,88,98,96,101,99,95,105,103,102,108,116
7,18,16,15,14,29,27,30,26,25,42,40,39,38,37,49,47,52,50,46,44,54,65,63,66,62,61,69,67,71,74,72,70,60,58,77,91,89,94,92,88,98,96,101,99,95,105,103,102,108,122
7,18,16,15,14,29,27,30,26,25,42,40,39,38,37,49,47,52,50,46,44,54,91,89,94,92,88,98,96,101,99,95,105,103,102,108,116,114,113,112,119,118,124
7,18,16,15,14,29,27,30,26,25,42,40,39,38,37,49,47,52,50,46,44,54,91,89,94,92,88,98,96,101,99,95,105,103,102,108,122,124
-----cfgNode-----
5,<global>
6,<empty>
7,int jas_stream_flushbuf (jas_stream_t *stream,int c)
8,jas_stream_t *stream
9,int c
10,<empty>
11,int len
12,int n
13,if ((stream->flags_ & (JAS_STREAM_ERRMASK)) != 0)
14,(stream->flags_ & (JAS_STREAM_ERRMASK)) != 0
15,stream->flags_ & (JAS_STREAM_ERRMASK)
16,stream->flags_
17,stream
18,flags_
19,JAS_STREAM_ERRMASK
20,0
21,<empty>
22,return EOF;
23,EOF
24,if ((stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)) == 0)
25,(stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)) == 0
26,stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)
27,stream->openmode_
28,stream
29,openmode_
30,JAS_STREAM_WRITE | JAS_STREAM_APPEND
31,JAS_STREAM_WRITE
32,JAS_STREAM_APPEND
33,0
34,<empty>
35,return EOF;
36,EOF
37,assert(!(stream->bufmode_ & JAS_STREAM_RDBUF))
38,!(stream->bufmode_ & JAS_STREAM_RDBUF)
39,stream->bufmode_ & JAS_STREAM_RDBUF
40,stream->bufmode_
41,stream
42,bufmode_
43,JAS_STREAM_RDBUF
44,len = stream->ptr_ - stream->bufstart_
45,len
46,stream->ptr_ - stream->bufstart_
47,stream->ptr_
48,stream
49,ptr_
50,stream->bufstart_
51,stream
52,bufstart_
53,if (len > 0)
54,len > 0
55,len
56,0
57,<empty>
58,n = (*stream->ops_->write_)(stream->obj_, (char *)
59,		  stream->bufstart_, len)
60,n
61,(*stream->ops_->write_)(stream->obj_, (char *)
62,		  stream->bufstart_, len)
63,*stream->ops_->write_
64,stream->ops_->write_
65,stream->ops_
66,stream
67,ops_
68,write_
69,stream->obj_
70,stream
71,obj_
72,(char *)
73,		  stream->bufstart_
74,char *
75,stream->bufstart_
76,stream
77,bufstart_
78,len
79,if (n != len)
80,n != len
81,n
82,len
83,<empty>
84,stream->flags_ |= JAS_STREAM_ERR
85,stream->flags_
86,stream
87,flags_
88,JAS_STREAM_ERR
89,return EOF;
90,EOF
91,stream->cnt_ = stream->bufsize_
92,stream->cnt_
93,stream
94,cnt_
95,stream->bufsize_
96,stream
97,bufsize_
98,stream->ptr_ = stream->bufstart_
99,stream->ptr_
100,stream
101,ptr_
102,stream->bufstart_
103,stream
104,bufstart_
105,stream->bufmode_ |= JAS_STREAM_WRBUF
106,stream->bufmode_
107,stream
108,bufmode_
109,JAS_STREAM_WRBUF
110,if (c != EOF)
111,c != EOF
112,c
113,EOF
114,<empty>
115,assert(stream->cnt_ > 0)
116,stream->cnt_ > 0
117,stream->cnt_
118,stream
119,cnt_
120,0
121,return jas_stream_putc2(stream, c);
122,jas_stream_putc2(stream, c)
123,stream
124,c
125,return 0;
126,0
127,RET
128,jas_stream_t *stream
129,int c
130,RET
131,int jas_stream_flushbuf (jas_stream_t *stream,int c)
132,jas_stream_t *stream
133,int c
134,<empty>
135,int len
136,int n
137,if ((stream->flags_ & (JAS_STREAM_ERRMASK)) != 0)
138,(stream->flags_ & (JAS_STREAM_ERRMASK)) != 0
139,stream->flags_ & (JAS_STREAM_ERRMASK)
140,stream->flags_
141,stream
142,flags_
143,JAS_STREAM_ERRMASK
144,0
145,<empty>
146,return EOF;
147,EOF
148,if ((stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)) == 0)
149,(stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)) == 0
150,stream->openmode_ & (JAS_STREAM_WRITE | JAS_STREAM_APPEND)
151,stream->openmode_
152,stream
153,openmode_
154,JAS_STREAM_WRITE | JAS_STREAM_APPEND
155,JAS_STREAM_WRITE
156,JAS_STREAM_APPEND
157,0
158,<empty>
159,return EOF;
160,EOF
161,assert(!(stream->bufmode_ & JAS_STREAM_RDBUF))
162,!(stream->bufmode_ & JAS_STREAM_RDBUF)
163,stream->bufmode_ & JAS_STREAM_RDBUF
164,stream->bufmode_
165,stream
166,bufmode_
167,JAS_STREAM_RDBUF
168,len = stream->ptr_ - stream->bufstart_
169,len
170,stream->ptr_ - stream->bufstart_
171,stream->ptr_
172,stream
173,ptr_
174,stream->bufstart_
175,stream
176,bufstart_
177,if (len > 0)
178,len > 0
179,len
180,0
181,<empty>
182,n = (*stream->ops_->write_)(stream->obj_, (char *)
183,		  stream->bufstart_, len)
184,n
185,(*stream->ops_->write_)(stream->obj_, (char *)
186,		  stream->bufstart_, len)
187,*stream->ops_->write_
188,stream->ops_->write_
189,stream->ops_
190,stream
191,ops_
192,write_
193,stream->obj_
194,stream
195,obj_
196,(char *)
197,		  stream->bufstart_
198,char *
199,stream->bufstart_
200,stream
201,bufstart_
202,len
203,if (n != len)
204,n != len
205,n
206,len
207,<empty>
208,stream->flags_ |= JAS_STREAM_ERR
209,stream->flags_
210,stream
211,flags_
212,JAS_STREAM_ERR
213,return EOF;
214,EOF
215,stream->cnt_ = stream->bufsize_
216,stream->cnt_
217,stream
218,cnt_
219,stream->bufsize_
220,stream
221,bufsize_
222,stream->ptr_ = stream->bufstart_
223,stream->ptr_
224,stream
225,ptr_
226,stream->bufstart_
227,stream
228,bufstart_
229,stream->bufmode_ |= JAS_STREAM_WRBUF
230,stream->bufmode_
231,stream
232,bufmode_
233,JAS_STREAM_WRBUF
234,if (c != EOF)
235,c != EOF
236,c
237,EOF
238,<empty>
239,assert(stream->cnt_ > 0)
240,stream->cnt_ > 0
241,stream->cnt_
242,stream
243,cnt_
244,0
245,return jas_stream_putc2(stream, c);
246,jas_stream_putc2(stream, c)
247,stream
248,c
249,return 0;
250,0
251,RET
252,jas_stream_t *stream
253,int c
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
int jas_stream_flushbuf(jas_stream_t *stream, int c) {
int len;
int n;
assert(!(stream->bufmode_ & JAS_STREAM_RDBUF));
len = stream->ptr_ - stream->bufstart_;
stream->cnt_ = stream->bufsize_;
stream->ptr_ = stream->bufstart_;
stream->bufmode_ |= JAS_STREAM_WRBUF;
return 0;
=======================
