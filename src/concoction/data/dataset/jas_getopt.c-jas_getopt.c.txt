-----label-----
0
-----code-----
int jas_getopt(int argc, char **argv, jas_opt_t *opts)
{
	char *cp;
	int id;
	int hasarg;
	jas_opt_t *opt;
	char *s;

	if (!jas_optind) {
		jas_optind = JAS_MIN(1, argc);
	}
	while (jas_optind < argc) {
		s = cp = argv[jas_optind];
		if (*cp == '-') {
			/* We are processing an option. */
			++jas_optind;
			if (*++cp == '-') {
				/* We are processing a long option. */
				++cp;
				if (*cp == '\0') {
					/* This is the end of the options. */
					return JAS_GETOPT_EOF;
				}
				if (!(opt = jas_optlookup(opts, cp))) {
					if (jas_opterr) {
						jas_eprintf("unknown long option %s\n", s);
					}
					return JAS_GETOPT_ERR;
				}
				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;
				id = opt->id;
			} else {
				/* We are processing a short option. */
				if (strlen(cp) != 1 ||
				  !(opt = jas_optlookup(opts, cp))) {
					if (jas_opterr) {
						jas_eprintf("unknown short option %s\n", s);
					}
					return JAS_GETOPT_ERR;
				}
				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;
				id = opt->id;
			}
			if (hasarg) {
				/* The option has an argument. */
				if (jas_optind >= argc) {
					if (jas_opterr) {
						jas_eprintf("missing argument for option %s\n", s);
					}
					return JAS_GETOPT_ERR;
				}
				jas_optarg = argv[jas_optind];
				++jas_optind;
			} else {
				/* The option does not have an argument. */
				jas_optarg = 0;
			}
			return id;
		} else {
			/* We are not processing an option. */
			return JAS_GETOPT_EOF;
		}
	}
	return JAS_GETOPT_EOF;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
9,10
9,11
11,12
11,13
11,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
23,24
23,25
25,26
25,27
28,29
29,30
29,31
31,32
33,34
34,35
34,36
36,37
38,39
39,40
39,41
40,41
42,43
42,44
45,46
46,47
46,48
48,49
48,50
51,52
51,53
52,53
53,54
55,56
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
86,88
87,88
88,89
91,92
91,93
91,94
91,95
92,93
93,94
94,95
96,97
96,98
96,99
97,98
97,99
98,99
99,100
100,101
103,104
103,105
103,106
103,107
103,108
104,105
105,106
106,107
108,109
108,110
109,110
109,111
110,111
111,112
114,115
115,116
116,117
118,119
118,120
119,120
120,121
121,122
121,123
122,123
124,125
124,126
124,127
125,126
127,128
129,130
131,132
131,133
132,133
132,134
133,134
135,136
136,137
137,138
137,139
137,140
138,139
141,142
143,144
144,145
146,147
147,148
147,149
148,149
150,151
150,152
151,152
152,153
152,154
153,154
153,155
154,155
157,158
160,161
161,162
161,163
162,163
164,165
164,166
165,166
168,169
168,170
168,171
169,170
169,171
170,171
170,172
171,172
171,173
172,173
172,174
173,174
175,176
178,179
179,180
180,181
180,182
181,182
183,184
183,185
183,186
184,185
186,187
188,189
190,191
190,192
191,192
191,193
192,193
194,195
195,196
196,197
196,198
196,199
197,198
200,201
202,203
203,204
205,206
206,207
206,208
207,208
209,210
209,211
210,211
211,212
211,213
212,213
212,214
213,214
216,217
219,220
220,221
220,222
221,222
223,224
223,225
224,225
227,228
227,229
227,230
228,229
230,231
230,232
230,233
231,232
231,233
232,233
232,234
233,234
235,236
237,238
237,239
238,239
238,240
239,240
241,242
242,243
243,244
243,245
243,246
244,245
247,248
249,250
250,251
252,253
253,254
253,255
254,255
256,257
256,258
257,258
259,260
261,262
262,263
263,264
265,266
266,267
267,268
267,269
268,269
271,272
272,273
274,275
275,276
276,277
278,279
279,280
-----nextToken-----
2,4,6,8,10,12,13,14,17,19,20,24,26,27,30,32,35,37,41,43,44,47,49,50,54,59,62,63,65,69,71,76,79,82,84,89,90,95,101,102,107,112,113,117,123,126,128,130,134,139,140,142,145,149,155,156,158,159,163,166,167,174,176,177,182,185,187,189,193,198,199,201,204,208,214,215,217,218,222,225,226,229,234,236,240,245,246,248,251,255,258,260,264,269,270,273,277,280
-----computeFrom-----
57,58
57,59
67,68
67,69
74,75
74,76
77,78
77,79
86,87
86,88
97,98
97,99
109,110
109,111
121,122
121,123
147,148
147,149
150,151
150,152
152,153
152,154
161,162
161,163
170,171
170,172
171,172
171,173
180,181
180,182
206,207
206,208
209,210
209,211
211,212
211,213
220,221
220,222
232,233
232,234
253,254
253,255
267,268
267,269
-----guardedBy-----
89,189
101,130
-----guardedByNegation-----
101,189
-----lastLexicalUse-----
101,189
-----jump-----
101,189
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int jas_getopt(int argc, char **argv, jas_opt_t *opts){	char *cp;	int id;	int hasarg;	jas_opt_t *opt;	char *s;	if (!jas_optind) {		jas_optind = JAS_MIN(1, argc);	}	while (jas_optind < argc) {		s = cp = argv[jas_optind];		if (*cp == '-') {			/* We are processing an option. */			++jas_optind;			if (*++cp == '-') {				/* We are processing a long option. */				++cp;				if (*cp == '\0') {					/* This is the end of the options. */					return JAS_GETOPT_EOF;				}				if (!(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown long option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			} else {				/* We are processing a short option. */				if (strlen(cp) != 1 ||				  !(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown short option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			}			if (hasarg) {				/* The option has an argument. */				if (jas_optind >= argc) {					if (jas_opterr) {						jas_eprintf("missing argument for option %s\n", s);					}					return JAS_GETOPT_ERR;				}				jas_optarg = argv[jas_optind];				++jas_optind;			} else {				/* The option does not have an argument. */				jas_optarg = 0;			}			return id;		} else {			/* We are not processing an option. */			return JAS_GETOPT_EOF;		}	}	return JAS_GETOPT_EOF;}
int
jas_getopt(int argc, char **argv, jas_opt_t *opts)
jas_getopt
int argc
int
argc
argc
char **argv
char
**argv
*
*
argv
jas_opt_t *opts
jas_opt_t
jas_opt_t
*opts
*
opts
{	char *cp;	int id;	int hasarg;	jas_opt_t *opt;	char *s;	if (!jas_optind) {		jas_optind = JAS_MIN(1, argc);	}	while (jas_optind < argc) {		s = cp = argv[jas_optind];		if (*cp == '-') {			/* We are processing an option. */			++jas_optind;			if (*++cp == '-') {				/* We are processing a long option. */				++cp;				if (*cp == '\0') {					/* This is the end of the options. */					return JAS_GETOPT_EOF;				}				if (!(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown long option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			} else {				/* We are processing a short option. */				if (strlen(cp) != 1 ||				  !(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown short option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			}			if (hasarg) {				/* The option has an argument. */				if (jas_optind >= argc) {					if (jas_opterr) {						jas_eprintf("missing argument for option %s\n", s);					}					return JAS_GETOPT_ERR;				}				jas_optarg = argv[jas_optind];				++jas_optind;			} else {				/* The option does not have an argument. */				jas_optarg = 0;			}			return id;		} else {			/* We are not processing an option. */			return JAS_GETOPT_EOF;		}	}	return JAS_GETOPT_EOF;}
char *cp;
char *cp;
char
*cp
*
cp
int id;
int id;
int
id
id
int hasarg;
int hasarg;
int
hasarg
hasarg
jas_opt_t *opt;
jas_opt_t *opt;
jas_opt_t
jas_opt_t
*opt
*
opt
char *s;
char *s;
char
*s
*
s
if (!jas_optind) {		jas_optind = JAS_MIN(1, argc);	}
!jas_optind
jas_optind
jas_optind
{		jas_optind = JAS_MIN(1, argc);	}
jas_optind = JAS_MIN(1, argc);
jas_optind = JAS_MIN(1, argc)
jas_optind
jas_optind
JAS_MIN(1, argc)
JAS_MIN
JAS_MIN
1
argc
argc
while (jas_optind < argc) {		s = cp = argv[jas_optind];		if (*cp == '-') {			/* We are processing an option. */			++jas_optind;			if (*++cp == '-') {				/* We are processing a long option. */				++cp;				if (*cp == '\0') {					/* This is the end of the options. */					return JAS_GETOPT_EOF;				}				if (!(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown long option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			} else {				/* We are processing a short option. */				if (strlen(cp) != 1 ||				  !(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown short option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			}			if (hasarg) {				/* The option has an argument. */				if (jas_optind >= argc) {					if (jas_opterr) {						jas_eprintf("missing argument for option %s\n", s);					}					return JAS_GETOPT_ERR;				}				jas_optarg = argv[jas_optind];				++jas_optind;			} else {				/* The option does not have an argument. */				jas_optarg = 0;			}			return id;		} else {			/* We are not processing an option. */			return JAS_GETOPT_EOF;		}	}
jas_optind < argc
jas_optind
jas_optind
argc
argc
{		s = cp = argv[jas_optind];		if (*cp == '-') {			/* We are processing an option. */			++jas_optind;			if (*++cp == '-') {				/* We are processing a long option. */				++cp;				if (*cp == '\0') {					/* This is the end of the options. */					return JAS_GETOPT_EOF;				}				if (!(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown long option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			} else {				/* We are processing a short option. */				if (strlen(cp) != 1 ||				  !(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown short option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			}			if (hasarg) {				/* The option has an argument. */				if (jas_optind >= argc) {					if (jas_opterr) {						jas_eprintf("missing argument for option %s\n", s);					}					return JAS_GETOPT_ERR;				}				jas_optarg = argv[jas_optind];				++jas_optind;			} else {				/* The option does not have an argument. */				jas_optarg = 0;			}			return id;		} else {			/* We are not processing an option. */			return JAS_GETOPT_EOF;		}	}
s = cp = argv[jas_optind];
s = cp = argv[jas_optind]
s
s
cp = argv[jas_optind]
cp
cp
argv[jas_optind]
argv
argv
jas_optind
jas_optind
if (*cp == '-') {			/* We are processing an option. */			++jas_optind;			if (*++cp == '-') {				/* We are processing a long option. */				++cp;				if (*cp == '\0') {					/* This is the end of the options. */					return JAS_GETOPT_EOF;				}				if (!(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown long option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			} else {				/* We are processing a short option. */				if (strlen(cp) != 1 ||				  !(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown short option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			}			if (hasarg) {				/* The option has an argument. */				if (jas_optind >= argc) {					if (jas_opterr) {						jas_eprintf("missing argument for option %s\n", s);					}					return JAS_GETOPT_ERR;				}				jas_optarg = argv[jas_optind];				++jas_optind;			} else {				/* The option does not have an argument. */				jas_optarg = 0;			}			return id;		} else {			/* We are not processing an option. */			return JAS_GETOPT_EOF;		}
*cp == '-'
*cp
cp
cp
'-'
{			/* We are processing an option. */			++jas_optind;			if (*++cp == '-') {				/* We are processing a long option. */				++cp;				if (*cp == '\0') {					/* This is the end of the options. */					return JAS_GETOPT_EOF;				}				if (!(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown long option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			} else {				/* We are processing a short option. */				if (strlen(cp) != 1 ||				  !(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown short option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			}			if (hasarg) {				/* The option has an argument. */				if (jas_optind >= argc) {					if (jas_opterr) {						jas_eprintf("missing argument for option %s\n", s);					}					return JAS_GETOPT_ERR;				}				jas_optarg = argv[jas_optind];				++jas_optind;			} else {				/* The option does not have an argument. */				jas_optarg = 0;			}			return id;		}
++jas_optind;
++jas_optind
jas_optind
jas_optind
if (*++cp == '-') {				/* We are processing a long option. */				++cp;				if (*cp == '\0') {					/* This is the end of the options. */					return JAS_GETOPT_EOF;				}				if (!(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown long option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			} else {				/* We are processing a short option. */				if (strlen(cp) != 1 ||				  !(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown short option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			}
*++cp == '-'
*++cp
++cp
cp
cp
'-'
{				/* We are processing a long option. */				++cp;				if (*cp == '\0') {					/* This is the end of the options. */					return JAS_GETOPT_EOF;				}				if (!(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown long option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			}
++cp;
++cp
cp
cp
if (*cp == '\0') {					/* This is the end of the options. */					return JAS_GETOPT_EOF;				}
*cp == '\0'
*cp
cp
cp
'\0'
{					/* This is the end of the options. */					return JAS_GETOPT_EOF;				}
return JAS_GETOPT_EOF;
JAS_GETOPT_EOF
JAS_GETOPT_EOF
if (!(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown long option %s\n", s);					}					return JAS_GETOPT_ERR;				}
!(opt = jas_optlookup(opts, cp))
(opt = jas_optlookup(opts, cp))
opt = jas_optlookup(opts, cp)
opt
opt
jas_optlookup(opts, cp)
jas_optlookup
jas_optlookup
opts
opts
cp
cp
{					if (jas_opterr) {						jas_eprintf("unknown long option %s\n", s);					}					return JAS_GETOPT_ERR;				}
if (jas_opterr) {						jas_eprintf("unknown long option %s\n", s);					}
jas_opterr
jas_opterr
{						jas_eprintf("unknown long option %s\n", s);					}
jas_eprintf("unknown long option %s\n", s);
jas_eprintf("unknown long option %s\n", s)
jas_eprintf
jas_eprintf
"unknown long option %s\n"
s
s
return JAS_GETOPT_ERR;
JAS_GETOPT_ERR
JAS_GETOPT_ERR
hasarg = (opt->flags & JAS_OPT_HASARG) != 0;
hasarg = (opt->flags & JAS_OPT_HASARG) != 0
hasarg
hasarg
(opt->flags & JAS_OPT_HASARG) != 0
(opt->flags & JAS_OPT_HASARG)
opt->flags & JAS_OPT_HASARG
opt->flags
opt
opt
flags
JAS_OPT_HASARG
JAS_OPT_HASARG
0
id = opt->id;
id = opt->id
id
id
opt->id
opt
opt
id
{				/* We are processing a short option. */				if (strlen(cp) != 1 ||				  !(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown short option %s\n", s);					}					return JAS_GETOPT_ERR;				}				hasarg = (opt->flags & JAS_OPT_HASARG) != 0;				id = opt->id;			}
if (strlen(cp) != 1 ||				  !(opt = jas_optlookup(opts, cp))) {					if (jas_opterr) {						jas_eprintf("unknown short option %s\n", s);					}					return JAS_GETOPT_ERR;				}
strlen(cp) != 1 ||				  !(opt = jas_optlookup(opts, cp))
strlen(cp) != 1
strlen(cp)
strlen
strlen
cp
cp
1
!(opt = jas_optlookup(opts, cp))
(opt = jas_optlookup(opts, cp))
opt = jas_optlookup(opts, cp)
opt
opt
jas_optlookup(opts, cp)
jas_optlookup
jas_optlookup
opts
opts
cp
cp
{					if (jas_opterr) {						jas_eprintf("unknown short option %s\n", s);					}					return JAS_GETOPT_ERR;				}
if (jas_opterr) {						jas_eprintf("unknown short option %s\n", s);					}
jas_opterr
jas_opterr
{						jas_eprintf("unknown short option %s\n", s);					}
jas_eprintf("unknown short option %s\n", s);
jas_eprintf("unknown short option %s\n", s)
jas_eprintf
jas_eprintf
"unknown short option %s\n"
s
s
return JAS_GETOPT_ERR;
JAS_GETOPT_ERR
JAS_GETOPT_ERR
hasarg = (opt->flags & JAS_OPT_HASARG) != 0;
hasarg = (opt->flags & JAS_OPT_HASARG) != 0
hasarg
hasarg
(opt->flags & JAS_OPT_HASARG) != 0
(opt->flags & JAS_OPT_HASARG)
opt->flags & JAS_OPT_HASARG
opt->flags
opt
opt
flags
JAS_OPT_HASARG
JAS_OPT_HASARG
0
id = opt->id;
id = opt->id
id
id
opt->id
opt
opt
id
if (hasarg) {				/* The option has an argument. */				if (jas_optind >= argc) {					if (jas_opterr) {						jas_eprintf("missing argument for option %s\n", s);					}					return JAS_GETOPT_ERR;				}				jas_optarg = argv[jas_optind];				++jas_optind;			} else {				/* The option does not have an argument. */				jas_optarg = 0;			}
hasarg
hasarg
{				/* The option has an argument. */				if (jas_optind >= argc) {					if (jas_opterr) {						jas_eprintf("missing argument for option %s\n", s);					}					return JAS_GETOPT_ERR;				}				jas_optarg = argv[jas_optind];				++jas_optind;			}
if (jas_optind >= argc) {					if (jas_opterr) {						jas_eprintf("missing argument for option %s\n", s);					}					return JAS_GETOPT_ERR;				}
jas_optind >= argc
jas_optind
jas_optind
argc
argc
{					if (jas_opterr) {						jas_eprintf("missing argument for option %s\n", s);					}					return JAS_GETOPT_ERR;				}
if (jas_opterr) {						jas_eprintf("missing argument for option %s\n", s);					}
jas_opterr
jas_opterr
{						jas_eprintf("missing argument for option %s\n", s);					}
jas_eprintf("missing argument for option %s\n", s);
jas_eprintf("missing argument for option %s\n", s)
jas_eprintf
jas_eprintf
"missing argument for option %s\n"
s
s
return JAS_GETOPT_ERR;
JAS_GETOPT_ERR
JAS_GETOPT_ERR
jas_optarg = argv[jas_optind];
jas_optarg = argv[jas_optind]
jas_optarg
jas_optarg
argv[jas_optind]
argv
argv
jas_optind
jas_optind
++jas_optind;
++jas_optind
jas_optind
jas_optind
{				/* The option does not have an argument. */				jas_optarg = 0;			}
jas_optarg = 0;
jas_optarg = 0
jas_optarg
jas_optarg
0
return id;
id
id
{			/* We are not processing an option. */			return JAS_GETOPT_EOF;		}
return JAS_GETOPT_EOF;
JAS_GETOPT_EOF
JAS_GETOPT_EOF
return JAS_GETOPT_EOF;
JAS_GETOPT_EOF
JAS_GETOPT_EOF
-----joern-----
(69,127,0)
(20,85,0)
(19,143,0)
(90,88,0)
(34,4,0)
(34,76,0)
(115,65,0)
(47,11,0)
(48,65,0)
(92,35,0)
(155,67,0)
(2,11,0)
(135,34,0)
(61,58,0)
(38,82,0)
(10,93,0)
(79,103,0)
(1,92,0)
(35,92,0)
(64,74,0)
(148,94,0)
(99,106,0)
(87,106,0)
(14,74,0)
(89,83,0)
(151,74,0)
(95,129,0)
(83,134,0)
(55,23,0)
(33,53,0)
(27,66,0)
(48,123,0)
(14,114,0)
(122,73,0)
(69,116,0)
(146,123,0)
(0,64,0)
(117,26,0)
(40,123,0)
(153,116,0)
(131,63,0)
(111,73,0)
(96,138,0)
(112,78,0)
(32,100,0)
(6,83,0)
(30,59,0)
(98,69,0)
(108,131,0)
(73,111,0)
(75,19,0)
(119,26,0)
(36,138,0)
(31,22,0)
(24,144,0)
(100,67,0)
(59,25,0)
(103,62,0)
(125,62,0)
(64,29,0)
(109,91,0)
(74,97,0)
(152,116,0)
(106,87,0)
(66,4,0)
(94,100,0)
(127,69,0)
(101,34,0)
(116,100,0)
(44,48,0)
(51,58,0)
(35,22,0)
(71,11,0)
(128,13,0)
(105,100,0)
(116,66,0)
(12,29,0)
(82,26,0)
(107,44,0)
(45,112,0)
(37,88,0)
(76,34,0)
(137,48,0)
(58,51,0)
(80,59,0)
(7,145,0)
(153,73,0)
(17,128,0)
(144,63,0)
(23,74,0)
(130,14,0)
(121,97,0)
(5,134,0)
(89,119,0)
(118,97,0)
(123,26,0)
(76,93,0)
(153,3,0)
(72,112,0)
(100,116,0)
(129,21,0)
(142,153,0)
(112,73,0)
(84,88,0)
(133,88,0)
(68,51,0)
(82,116,0)
(145,74,0)
(62,103,0)
(86,127,0)
(73,153,0)
(52,32,0)
(51,26,0)
(26,119,0)
(126,129,0)
(43,113,0)
(136,47,0)
(41,32,0)
(139,16,0)
(131,116,0)
(94,104,0)
(74,149,0)
(44,78,0)
(95,19,0)
(58,113,0)
(83,89,0)
(22,35,0)
(50,78,0)
(138,100,0)
(110,63,0)
(95,64,0)
(54,87,0)
(66,116,0)
(78,112,0)
(113,58,0)
(44,11,0)
(78,63,0)
(119,89,0)
(46,88,0)
(120,94,0)
(95,14,0)
(103,73,0)
(57,143,0)
(102,66,0)
(123,48,0)
(95,44,0)
(144,53,0)
(42,93,0)
(8,128,0)
(60,82,0)
(154,10,0)
(124,49,0)
(82,3,0)
(28,88,0)
(113,85,0)
(32,77,0)
(138,15,0)
(81,103,0)
(87,116,0)
(147,51,0)
(132,76,0)
(70,88,0)
(140,16,0)
(9,153,0)
(97,74,0)
(95,145,0)
(26,82,0)
(62,53,0)
(97,25,0)
(134,83,0)
(53,144,0)
(129,74,0)
(16,25,0)
(23,49,0)
(53,62,0)
(56,63,0)
(19,74,0)
(134,116,0)
(85,65,0)
(145,88,0)
(22,116,0)
(85,113,0)
(95,23,0)
(134,116,1)
(66,4,1)
(45,72,1)
(97,25,1)
(91,109,1)
(44,48,1)
(51,147,1)
(14,130,1)
(53,33,1)
(72,50,1)
(31,47,1)
(32,52,1)
(131,108,1)
(17,141,1)
(117,83,1)
(30,141,1)
(123,40,1)
(153,9,1)
(107,10,1)
(0,150,1)
(94,100,1)
(121,151,1)
(76,34,1)
(103,73,1)
(47,136,1)
(82,3,1)
(136,106,1)
(53,62,1)
(69,116,1)
(141,78,1)
(95,145,1)
(60,38,1)
(22,116,1)
(132,59,1)
(153,3,1)
(101,135,1)
(39,89,1)
(69,98,1)
(74,97,1)
(134,5,1)
(120,39,1)
(140,91,1)
(103,79,1)
(51,26,1)
(108,92,1)
(153,116,1)
(48,123,1)
(83,6,1)
(128,8,1)
(127,69,1)
(147,68,1)
(41,18,1)
(5,92,1)
(151,91,1)
(142,122,1)
(24,111,1)
(8,17,1)
(16,139,1)
(146,137,1)
(140,74,1)
(54,100,1)
(145,7,1)
(118,121,1)
(80,30,1)
(75,94,1)
(26,82,1)
(123,26,1)
(95,14,1)
(130,106,1)
(138,100,1)
(85,113,1)
(34,4,1)
(10,154,1)
(1,35,1)
(112,73,1)
(144,53,1)
(102,152,1)
(22,31,1)
(82,116,1)
(129,74,1)
(95,19,1)
(119,26,1)
(81,24,1)
(112,45,1)
(55,18,1)
(106,99,1)
(64,0,1)
(95,64,1)
(79,81,1)
(125,103,1)
(95,23,1)
(73,153,1)
(95,129,1)
(68,20,1)
(105,16,1)
(36,150,1)
(23,55,1)
(129,126,1)
(62,125,1)
(152,105,1)
(32,100,1)
(139,140,1)
(64,74,1)
(38,117,1)
(66,27,1)
(0,138,1)
(154,76,1)
(82,60,1)
(126,127,1)
(19,75,1)
(9,142,1)
(86,69,1)
(58,61,1)
(27,102,1)
(59,80,1)
(78,112,1)
(43,58,1)
(34,101,1)
(135,132,1)
(62,103,1)
(52,41,1)
(107,128,1)
(87,54,1)
(92,1,1)
(111,73,1)
(75,39,1)
(18,111,1)
(55,32,1)
(138,96,1)
(61,51,1)
(33,62,1)
(96,36,1)
(95,44,1)
(7,16,1)
(83,134,1)
(23,74,1)
(122,127,1)
(19,74,1)
(150,59,1)
(145,74,1)
(6,134,1)
(14,74,1)
(87,116,1)
(89,119,1)
(94,148,1)
(97,118,1)
(99,87,1)
(106,87,1)
(131,116,1)
(44,78,1)
(148,120,1)
(98,131,1)
(141,48,1)
(113,43,1)
(100,116,1)
(113,58,1)
(16,25,1)
(116,66,1)
(127,86,1)
(92,35,1)
(59,25,1)
(35,22,1)
(137,85,1)
(40,146,1)
(20,89,1)
(44,107,1)
(50,144,1)
(89,83,1)
(58,51,1)
(50,111,2)
(0,59,2)
(85,113,2)
(126,127,2)
(1,106,2)
(78,111,2)
(127,69,2)
(131,92,2)
(22,106,2)
(14,106,2)
(52,18,2)
(75,89,2)
(27,16,2)
(145,16,2)
(153,127,2)
(101,59,2)
(116,66,2)
(154,59,2)
(89,92,2)
(17,141,2)
(128,141,2)
(62,111,2)
(95,64,2)
(106,87,2)
(83,134,2)
(152,16,2)
(82,83,2)
(23,111,2)
(132,59,2)
(64,59,2)
(127,92,2)
(19,74,2)
(18,111,2)
(55,111,2)
(98,92,2)
(59,141,2)
(33,111,2)
(113,89,2)
(105,16,2)
(74,97,2)
(36,150,2)
(69,92,2)
(95,14,2)
(23,74,2)
(80,141,2)
(35,22,2)
(8,141,2)
(39,89,2)
(62,103,2)
(53,111,2)
(111,127,2)
(97,25,2)
(76,59,2)
(44,78,2)
(45,111,2)
(142,127,2)
(78,112,2)
(116,16,2)
(138,150,2)
(107,59,2)
(16,25,2)
(44,141,2)
(43,89,2)
(153,116,2)
(100,116,2)
(95,44,2)
(68,89,2)
(47,106,2)
(53,62,2)
(82,3,2)
(72,111,2)
(112,111,2)
(100,16,2)
(134,92,2)
(76,34,2)
(5,92,2)
(58,89,2)
(85,89,2)
(48,89,2)
(74,91,2)
(26,83,2)
(35,106,2)
(150,59,2)
(92,106,2)
(81,111,2)
(79,111,2)
(19,89,2)
(145,74,2)
(58,51,2)
(54,16,2)
(7,16,2)
(24,111,2)
(125,111,2)
(73,153,2)
(144,111,2)
(32,18,2)
(95,19,2)
(103,73,2)
(129,74,2)
(66,16,2)
(141,89,2)
(94,100,2)
(34,59,2)
(123,89,2)
(22,116,2)
(123,26,2)
(44,48,2)
(118,91,2)
(86,92,2)
(146,89,2)
(89,83,2)
(141,111,2)
(59,25,2)
(122,127,2)
(131,116,2)
(94,39,2)
(108,92,2)
(97,91,2)
(147,89,2)
(95,145,2)
(51,89,2)
(106,16,2)
(32,100,2)
(135,59,2)
(137,89,2)
(6,92,2)
(134,116,2)
(66,4,2)
(10,59,2)
(120,39,2)
(20,89,2)
(138,100,2)
(151,91,2)
(30,141,2)
(148,39,2)
(51,26,2)
(121,91,2)
(41,18,2)
(129,127,2)
(87,16,2)
(48,123,2)
(95,23,2)
(64,74,2)
(69,116,2)
(99,16,2)
(117,83,2)
(87,116,2)
(130,106,2)
(73,127,2)
(102,16,2)
(14,74,2)
(95,129,2)
(136,106,2)
(9,127,2)
(82,116,2)
(119,83,2)
(103,111,2)
(111,73,2)
(60,83,2)
(40,89,2)
(34,4,2)
(92,35,2)
(26,82,2)
(113,58,2)
(96,150,2)
(38,83,2)
(112,73,2)
(119,26,2)
(83,92,2)
(144,53,2)
(44,59,2)
(153,3,2)
(89,119,2)
(107,141,2)
(61,89,2)
(31,106,2)
-----------------------------------
(0,JAS_GETOPT_ERR)
(1,\'-\')
(2,if (*++cp == \'-\')
(3,jas_opt_t *opts)
(4,char **argv)
(5,cp)
(6,1)
(7,JAS_GETOPT_EOF)
(8,0)
(9,cp)
(10,++jas_optind)
(11,)
(12,if (jas_opterr)
(13,)
(14,return JAS_GETOPT_EOF;)
(15,)
(16,jas_optind < argc)
(17,jas_optarg)
(18,jas_opterr)
(19,return JAS_GETOPT_ERR;)
(20,hasarg)
(21,)
(22,++cp)
(23,return JAS_GETOPT_ERR;)
(24,hasarg)
(25,int argc)
(26,opt = jas_optlookup(opts, cp)
(27,jas_optind)
(28,hasarg)
(29,)
(30,jas_optind)
(31,cp)
(32,jas_eprintf("unknown long option %s\\n", s)
(33,0)
(34,argv[jas_optind])
(35,*++cp)
(36,"missing argument for option %s\\n")
(37,opt)
(38,opts)
(39,jas_opterr)
(40,id)
(41,"unknown long option %s\\n")
(42,if (jas_optind >= argc)
(43,0)
(44,return id;)
(45,id)
(46,while (jas_optind < argc)
(47,++jas_optind)
(48,id = opt->id)
(49,)
(50,id)
(51,opt->flags)
(52,s)
(53,(opt->flags & JAS_OPT_HASARG)
(54,cp)
(55,JAS_GETOPT_ERR)
(56,if (!(opt = jas_optlookup(opts, cp)
(57,if (jas_opterr)
(58,opt->flags & JAS_OPT_HASARG)
(59,jas_optind >= argc)
(60,cp)
(61,JAS_OPT_HASARG)
(62,opt->flags & JAS_OPT_HASARG)
(63,)
(64,return JAS_GETOPT_ERR;)
(65,)
(66,argv[jas_optind])
(67,)
(68,opt)
(69,*cp)
(70,if (!jas_optind)
(71,if (hasarg)
(72,opt)
(73,opt = jas_optlookup(opts, cp)
(74,jas_optind = JAS_MIN(1, argc)
(75,JAS_GETOPT_ERR)
(76,jas_optarg = argv[jas_optind])
(77,)
(78,id = opt->id)
(79,flags)
(80,argc)
(81,opt)
(82,jas_optlookup(opts, cp)
(83,strlen(cp)
(84,id)
(85,hasarg = (opt->flags & JAS_OPT_HASARG)
(86,\'\\0\')
(87,*cp)
(88,)
(89,strlen(cp)
(90,s)
(91,!jas_optind)
(92,*++cp == \'-\')
(93,)
(94,jas_eprintf("unknown short option %s\\n", s)
(95,RET)
(96,s)
(97,JAS_MIN(1, argc)
(98,cp)
(99,\'-\')
(100,s = cp = argv[jas_optind])
(101,jas_optind)
(102,argv)
(103,opt->flags)
(104,)
(105,s)
(106,*cp == \'-\')
(107,id)
(108,cp)
(109,jas_optind)
(110,if (*cp == \'\\0\')
(111,!(opt = jas_optlookup(opts, cp)
(112,opt->id)
(113,(opt->flags & JAS_OPT_HASARG)
(114,)
(115,if (strlen(cp)
(116,cp = argv[jas_optind])
(117,opt)
(118,argc)
(119,!(opt = jas_optlookup(opts, cp)
(120,"unknown short option %s\\n")
(121,1)
(122,opt)
(123,opt->id)
(124,if (jas_opterr)
(125,JAS_OPT_HASARG)
(126,JAS_GETOPT_EOF)
(127,*cp == \'\\0\')
(128,jas_optarg = 0)
(129,return JAS_GETOPT_EOF;)
(130,JAS_GETOPT_EOF)
(131,++cp)
(132,jas_optarg)
(133,cp)
(134,strlen(cp)
(135,argv)
(136,jas_optind)
(137,id)
(138,jas_eprintf("missing argument for option %s\\n", s)
(139,argc)
(140,jas_optind)
(141,hasarg)
(142,opts)
(143,)
(144,hasarg = (opt->flags & JAS_OPT_HASARG)
(145,return JAS_GETOPT_EOF;)
(146,opt)
(147,flags)
(148,s)
(149,)
(150,jas_opterr)
(151,jas_optind)
(152,cp)
(153,jas_optlookup(opts, cp)
(154,jas_optind)
(155,if (*cp == \'-\')
-----cfg-----
(129,127)
(134,141)
(134,144)
(134,148)
(7,18)
(141,144)
(144,166)
(18,23)
(18,27)
(146,151)
(148,146)
(21,27)
(23,21)
(151,158)
(27,35)
(27,164)
(155,158)
(158,166)
(31,40)
(33,31)
(162,166)
(35,33)
(164,166)
(39,44)
(39,162)
(40,39)
(44,49)
(47,53)
(47,98)
(48,47)
(49,48)
(53,57)
(56,61)
(56,67)
(57,56)
(61,166)
(64,74)
(64,77)
(64,85)
(65,64)
(67,65)
(74,77)
(77,166)
(79,92)
(81,79)
(82,81)
(83,82)
(85,83)
(88,134)
(88,155)
(90,88)
(92,90)
(96,111)
(96,114)
(96,122)
(97,96)
(97,104)
(98,97)
(101,96)
(102,101)
(104,102)
(111,114)
(114,166)
(116,129)
(118,116)
(119,118)
(120,119)
(122,120)
(125,134)
(125,155)
(127,125)
-----path-----
7,18,23,21,27,35,33,31,40,39,44,49,48,47,53,57,56,61,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,74,77,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,77,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,85,83,82,81,79,92,90,88,134,141,144,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,85,83,82,81,79,92,90,88,134,144,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,85,83,82,81,79,92,90,88,134,148,146,151,158,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,85,83,82,81,79,92,90,88,155,158,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,96,111,114,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,96,114,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,96,122,120,119,118,116,129,127,125,134,141,144,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,96,122,120,119,118,116,129,127,125,134,144,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,96,122,120,119,118,116,129,127,125,134,148,146,151,158,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,96,122,120,119,118,116,129,127,125,155,158,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,111,114,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,114,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,122,120,119,118,116,129,127,125,134,141,144,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,122,120,119,118,116,129,127,125,134,144,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,122,120,119,118,116,129,127,125,134,148,146,151,158,166
7,18,23,21,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,122,120,119,118,116,129,127,125,155,158,166
7,18,23,21,27,35,33,31,40,39,162,166
7,18,23,21,27,164,166
7,18,27,35,33,31,40,39,44,49,48,47,53,57,56,61,166
7,18,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,74,77,166
7,18,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,77,166
7,18,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,85,83,82,81,79,92,90,88,134,141,144,166
7,18,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,85,83,82,81,79,92,90,88,134,144,166
7,18,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,85,83,82,81,79,92,90,88,134,148,146,151,158,166
7,18,27,35,33,31,40,39,44,49,48,47,53,57,56,67,65,64,85,83,82,81,79,92,90,88,155,158,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,96,111,114,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,96,114,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,96,122,120,119,118,116,129,127,125,134,141,144,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,96,122,120,119,118,116,129,127,125,134,144,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,96,122,120,119,118,116,129,127,125,134,148,146,151,158,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,96,122,120,119,118,116,129,127,125,155,158,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,111,114,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,114,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,122,120,119,118,116,129,127,125,134,141,144,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,122,120,119,118,116,129,127,125,134,144,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,122,120,119,118,116,129,127,125,134,148,146,151,158,166
7,18,27,35,33,31,40,39,44,49,48,47,98,97,104,102,101,96,122,120,119,118,116,129,127,125,155,158,166
7,18,27,35,33,31,40,39,162,166
7,18,27,164,166
-----cfgNode-----
5,<global>
6,<empty>
7,int jas_getopt (int argc,char **argv,jas_opt_t *opts)
8,int argc
9,char **argv
10,jas_opt_t *opts
11,<empty>
12,char* cp
13,int id
14,int hasarg
15,jas_opt_t* opt
16,char* s
17,if (!jas_optind)
18,!jas_optind
19,jas_optind
20,<empty>
21,jas_optind = JAS_MIN(1, argc)
22,jas_optind
23,JAS_MIN(1, argc)
24,1
25,argc
26,while (jas_optind < argc)
27,jas_optind < argc
28,jas_optind
29,argc
30,<empty>
31,s = cp = argv[jas_optind]
32,s
33,cp = argv[jas_optind]
34,cp
35,argv[jas_optind]
36,argv
37,jas_optind
38,if (*cp == '-')
39,*cp == '-'
40,*cp
41,cp
42,'-'
43,<empty>
44,++jas_optind
45,jas_optind
46,if (*++cp == '-')
47,*++cp == '-'
48,*++cp
49,++cp
50,cp
51,'-'
52,<empty>
53,++cp
54,cp
55,if (*cp == '\0')
56,*cp == '\0'
57,*cp
58,cp
59,'\0'
60,<empty>
61,return JAS_GETOPT_EOF;
62,JAS_GETOPT_EOF
63,if (!(opt = jas_optlookup(opts, cp)))
64,!(opt = jas_optlookup(opts, cp))
65,opt = jas_optlookup(opts, cp)
66,opt
67,jas_optlookup(opts, cp)
68,opts
69,cp
70,<empty>
71,if (jas_opterr)
72,jas_opterr
73,<empty>
74,jas_eprintf("unknown long option %s\n", s)
75,"unknown long option %s\n"
76,s
77,return JAS_GETOPT_ERR;
78,JAS_GETOPT_ERR
79,hasarg = (opt->flags & JAS_OPT_HASARG) != 0
80,hasarg
81,(opt->flags & JAS_OPT_HASARG) != 0
82,opt->flags & JAS_OPT_HASARG
83,opt->flags
84,opt
85,flags
86,JAS_OPT_HASARG
87,0
88,id = opt->id
89,id
90,opt->id
91,opt
92,id
93,else
94,<empty>
95,if (strlen(cp) != 1 ||
96,				  !(opt = jas_optlookup(opts, cp)))
97,strlen(cp) != 1 ||
98,				  !(opt = jas_optlookup(opts, cp))
99,strlen(cp) != 1
100,strlen(cp)
101,cp
102,1
103,!(opt = jas_optlookup(opts, cp))
104,opt = jas_optlookup(opts, cp)
105,opt
106,jas_optlookup(opts, cp)
107,opts
108,cp
109,<empty>
110,if (jas_opterr)
111,jas_opterr
112,<empty>
113,jas_eprintf("unknown short option %s\n", s)
114,"unknown short option %s\n"
115,s
116,return JAS_GETOPT_ERR;
117,JAS_GETOPT_ERR
118,hasarg = (opt->flags & JAS_OPT_HASARG) != 0
119,hasarg
120,(opt->flags & JAS_OPT_HASARG) != 0
121,opt->flags & JAS_OPT_HASARG
122,opt->flags
123,opt
124,flags
125,JAS_OPT_HASARG
126,0
127,id = opt->id
128,id
129,opt->id
130,opt
131,id
132,if (hasarg)
133,hasarg
134,<empty>
135,if (jas_optind >= argc)
136,jas_optind >= argc
137,jas_optind
138,argc
139,<empty>
140,if (jas_opterr)
141,jas_opterr
142,<empty>
143,jas_eprintf("missing argument for option %s\n", s)
144,"missing argument for option %s\n"
145,s
146,return JAS_GETOPT_ERR;
147,JAS_GETOPT_ERR
148,jas_optarg = argv[jas_optind]
149,jas_optarg
150,argv[jas_optind]
151,argv
152,jas_optind
153,++jas_optind
154,jas_optind
155,else
156,<empty>
157,jas_optarg = 0
158,jas_optarg
159,0
160,return id;
161,id
162,else
163,<empty>
164,return JAS_GETOPT_EOF;
165,JAS_GETOPT_EOF
166,return JAS_GETOPT_EOF;
167,JAS_GETOPT_EOF
168,RET
169,int argc
170,char **argv
171,jas_opt_t *opts
172,RET
173,int jas_getopt (int argc,char **argv,jas_opt_t *opts)
174,int argc
175,char **argv
176,jas_opt_t *opts
177,<empty>
178,char* cp
179,int id
180,int hasarg
181,jas_opt_t* opt
182,char* s
183,if (!jas_optind)
184,!jas_optind
185,jas_optind
186,<empty>
187,jas_optind = JAS_MIN(1, argc)
188,jas_optind
189,JAS_MIN(1, argc)
190,1
191,argc
192,while (jas_optind < argc)
193,jas_optind < argc
194,jas_optind
195,argc
196,<empty>
197,s = cp = argv[jas_optind]
198,s
199,cp = argv[jas_optind]
200,cp
201,argv[jas_optind]
202,argv
203,jas_optind
204,if (*cp == '-')
205,*cp == '-'
206,*cp
207,cp
208,'-'
209,<empty>
210,++jas_optind
211,jas_optind
212,if (*++cp == '-')
213,*++cp == '-'
214,*++cp
215,++cp
216,cp
217,'-'
218,<empty>
219,++cp
220,cp
221,if (*cp == '\0')
222,*cp == '\0'
223,*cp
224,cp
225,'\0'
226,<empty>
227,return JAS_GETOPT_EOF;
228,JAS_GETOPT_EOF
229,if (!(opt = jas_optlookup(opts, cp)))
230,!(opt = jas_optlookup(opts, cp))
231,opt = jas_optlookup(opts, cp)
232,opt
233,jas_optlookup(opts, cp)
234,opts
235,cp
236,<empty>
237,if (jas_opterr)
238,jas_opterr
239,<empty>
240,jas_eprintf("unknown long option %s\n", s)
241,"unknown long option %s\n"
242,s
243,return JAS_GETOPT_ERR;
244,JAS_GETOPT_ERR
245,hasarg = (opt->flags & JAS_OPT_HASARG) != 0
246,hasarg
247,(opt->flags & JAS_OPT_HASARG) != 0
248,opt->flags & JAS_OPT_HASARG
249,opt->flags
250,opt
251,flags
252,JAS_OPT_HASARG
253,0
254,id = opt->id
255,id
256,opt->id
257,opt
258,id
259,else
260,<empty>
261,if (strlen(cp) != 1 ||
262,				  !(opt = jas_optlookup(opts, cp)))
263,strlen(cp) != 1 ||
264,				  !(opt = jas_optlookup(opts, cp))
265,strlen(cp) != 1
266,strlen(cp)
267,cp
268,1
269,!(opt = jas_optlookup(opts, cp))
270,opt = jas_optlookup(opts, cp)
271,opt
272,jas_optlookup(opts, cp)
273,opts
274,cp
275,<empty>
276,if (jas_opterr)
277,jas_opterr
278,<empty>
279,jas_eprintf("unknown short option %s\n", s)
280,"unknown short option %s\n"
281,s
282,return JAS_GETOPT_ERR;
283,JAS_GETOPT_ERR
284,hasarg = (opt->flags & JAS_OPT_HASARG) != 0
285,hasarg
286,(opt->flags & JAS_OPT_HASARG) != 0
287,opt->flags & JAS_OPT_HASARG
288,opt->flags
289,opt
290,flags
291,JAS_OPT_HASARG
292,0
293,id = opt->id
294,id
295,opt->id
296,opt
297,id
298,if (hasarg)
299,hasarg
300,<empty>
301,if (jas_optind >= argc)
302,jas_optind >= argc
303,jas_optind
304,argc
305,<empty>
306,if (jas_opterr)
307,jas_opterr
308,<empty>
309,jas_eprintf("missing argument for option %s\n", s)
310,"missing argument for option %s\n"
311,s
312,return JAS_GETOPT_ERR;
313,JAS_GETOPT_ERR
314,jas_optarg = argv[jas_optind]
315,jas_optarg
316,argv[jas_optind]
317,argv
318,jas_optind
319,++jas_optind
320,jas_optind
321,else
322,<empty>
323,jas_optarg = 0
324,jas_optarg
325,0
326,return id;
327,id
328,else
329,<empty>
330,return JAS_GETOPT_EOF;
331,JAS_GETOPT_EOF
332,return JAS_GETOPT_EOF;
333,JAS_GETOPT_EOF
334,RET
335,int argc
336,char **argv
337,jas_opt_t *opts
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
int jas_getopt(int argc, char **argv, jas_opt_t *opts) {
char *cp;
int id;
int hasarg;
jas_opt_t *opt;
char *s;
return JAS_GETOPT_EOF;
=======================
