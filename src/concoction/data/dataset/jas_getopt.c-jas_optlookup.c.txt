-----label-----
0
-----code-----
static jas_opt_t *jas_optlookup(jas_opt_t *opts, char *name)
{
	jas_opt_t *opt;

	for (opt = opts; opt->id >= 0 && opt->name; ++opt) {
		if (!strcmp(opt->name, name)) {
			return opt;
		}
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
15,17
18,19
18,20
18,21
19,20
20,21
20,22
21,22
23,24
23,25
26,27
26,28
26,29
26,30
27,28
28,29
28,30
29,30
31,32
33,34
33,35
34,35
34,36
35,36
35,37
36,37
40,41
40,42
41,42
44,45
45,46
47,48
48,49
48,50
49,50
50,51
50,52
50,53
51,52
53,54
53,55
54,55
57,58
59,60
60,61
61,62
63,64
-----nextToken-----
3,5,6,9,11,12,14,16,17,22,24,25,30,32,37,38,39,42,43,46,52,55,56,58,62,64
-----computeFrom-----
28,29
28,30
33,34
33,35
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static jas_opt_t *jas_optlookup(jas_opt_t *opts, char *name){	jas_opt_t *opt;	for (opt = opts; opt->id >= 0 && opt->name; ++opt) {		if (!strcmp(opt->name, name)) {			return opt;		}	}	return 0;}
static jas_opt_t
jas_opt_t
*jas_optlookup(jas_opt_t *opts, char *name)
*
jas_optlookup
jas_opt_t *opts
jas_opt_t
jas_opt_t
*opts
*
opts
char *name
char
*name
*
name
{	jas_opt_t *opt;	for (opt = opts; opt->id >= 0 && opt->name; ++opt) {		if (!strcmp(opt->name, name)) {			return opt;		}	}	return 0;}
jas_opt_t *opt;
jas_opt_t *opt;
jas_opt_t
jas_opt_t
*opt
*
opt
for (opt = opts; opt->id >= 0 && opt->name; ++opt) {		if (!strcmp(opt->name, name)) {			return opt;		}	}
opt = opts;
opt = opts
opt
opt
opts
opts
opt->id >= 0 && opt->name
opt->id >= 0
opt->id
opt
opt
id
0
opt->name
opt
opt
name
++opt
opt
opt
{		if (!strcmp(opt->name, name)) {			return opt;		}	}
if (!strcmp(opt->name, name)) {			return opt;		}
!strcmp(opt->name, name)
strcmp(opt->name, name)
strcmp
strcmp
opt->name
opt
opt
name
name
name
{			return opt;		}
return opt;
opt
opt
return 0;
0
-----joern-----
(69,127,0)
(20,85,0)
(19,143,0)
(90,88,0)
(34,4,0)
(34,76,0)
(115,65,0)
(47,11,0)
(48,65,0)
(92,35,0)
(155,67,0)
(2,11,0)
(135,34,0)
(61,58,0)
(38,82,0)
(10,93,0)
(79,103,0)
(1,92,0)
(35,92,0)
(64,74,0)
(148,94,0)
(99,106,0)
(87,106,0)
(14,74,0)
(89,83,0)
(151,74,0)
(95,129,0)
(83,134,0)
(55,23,0)
(33,53,0)
(27,66,0)
(48,123,0)
(14,114,0)
(122,73,0)
(69,116,0)
(146,123,0)
(0,64,0)
(117,26,0)
(40,123,0)
(153,116,0)
(131,63,0)
(111,73,0)
(96,138,0)
(112,78,0)
(32,100,0)
(6,83,0)
(30,59,0)
(98,69,0)
(108,131,0)
(73,111,0)
(75,19,0)
(119,26,0)
(36,138,0)
(31,22,0)
(24,144,0)
(100,67,0)
(59,25,0)
(103,62,0)
(125,62,0)
(64,29,0)
(109,91,0)
(74,97,0)
(152,116,0)
(106,87,0)
(66,4,0)
(94,100,0)
(127,69,0)
(101,34,0)
(116,100,0)
(44,48,0)
(51,58,0)
(35,22,0)
(71,11,0)
(128,13,0)
(105,100,0)
(116,66,0)
(12,29,0)
(82,26,0)
(107,44,0)
(45,112,0)
(37,88,0)
(76,34,0)
(137,48,0)
(58,51,0)
(80,59,0)
(7,145,0)
(153,73,0)
(17,128,0)
(144,63,0)
(23,74,0)
(130,14,0)
(121,97,0)
(5,134,0)
(89,119,0)
(118,97,0)
(123,26,0)
(76,93,0)
(153,3,0)
(72,112,0)
(100,116,0)
(129,21,0)
(142,153,0)
(112,73,0)
(84,88,0)
(133,88,0)
(68,51,0)
(82,116,0)
(145,74,0)
(62,103,0)
(86,127,0)
(73,153,0)
(52,32,0)
(51,26,0)
(26,119,0)
(126,129,0)
(43,113,0)
(136,47,0)
(41,32,0)
(139,16,0)
(131,116,0)
(94,104,0)
(74,149,0)
(44,78,0)
(95,19,0)
(58,113,0)
(83,89,0)
(22,35,0)
(50,78,0)
(138,100,0)
(110,63,0)
(95,64,0)
(54,87,0)
(66,116,0)
(78,112,0)
(113,58,0)
(44,11,0)
(78,63,0)
(119,89,0)
(46,88,0)
(120,94,0)
(95,14,0)
(103,73,0)
(57,143,0)
(102,66,0)
(123,48,0)
(95,44,0)
(144,53,0)
(42,93,0)
(8,128,0)
(60,82,0)
(154,10,0)
(124,49,0)
(82,3,0)
(28,88,0)
(113,85,0)
(32,77,0)
(138,15,0)
(81,103,0)
(87,116,0)
(147,51,0)
(132,76,0)
(70,88,0)
(140,16,0)
(9,153,0)
(97,74,0)
(95,145,0)
(26,82,0)
(62,53,0)
(97,25,0)
(134,83,0)
(53,144,0)
(129,74,0)
(16,25,0)
(23,49,0)
(53,62,0)
(56,63,0)
(19,74,0)
(134,116,0)
(85,65,0)
(145,88,0)
(22,116,0)
(85,113,0)
(95,23,0)
(134,116,1)
(66,4,1)
(45,72,1)
(97,25,1)
(91,109,1)
(44,48,1)
(51,147,1)
(14,130,1)
(53,33,1)
(72,50,1)
(31,47,1)
(32,52,1)
(131,108,1)
(17,141,1)
(117,83,1)
(30,141,1)
(123,40,1)
(153,9,1)
(107,10,1)
(0,150,1)
(94,100,1)
(121,151,1)
(76,34,1)
(103,73,1)
(47,136,1)
(82,3,1)
(136,106,1)
(53,62,1)
(69,116,1)
(141,78,1)
(95,145,1)
(60,38,1)
(22,116,1)
(132,59,1)
(153,3,1)
(101,135,1)
(39,89,1)
(69,98,1)
(74,97,1)
(134,5,1)
(120,39,1)
(140,91,1)
(103,79,1)
(51,26,1)
(108,92,1)
(153,116,1)
(48,123,1)
(83,6,1)
(128,8,1)
(127,69,1)
(147,68,1)
(41,18,1)
(5,92,1)
(151,91,1)
(142,122,1)
(24,111,1)
(8,17,1)
(16,139,1)
(146,137,1)
(140,74,1)
(54,100,1)
(145,7,1)
(118,121,1)
(80,30,1)
(75,94,1)
(26,82,1)
(123,26,1)
(95,14,1)
(130,106,1)
(138,100,1)
(85,113,1)
(34,4,1)
(10,154,1)
(1,35,1)
(112,73,1)
(144,53,1)
(102,152,1)
(22,31,1)
(82,116,1)
(129,74,1)
(95,19,1)
(119,26,1)
(81,24,1)
(112,45,1)
(55,18,1)
(106,99,1)
(64,0,1)
(95,64,1)
(79,81,1)
(125,103,1)
(95,23,1)
(73,153,1)
(95,129,1)
(68,20,1)
(105,16,1)
(36,150,1)
(23,55,1)
(129,126,1)
(62,125,1)
(152,105,1)
(32,100,1)
(139,140,1)
(64,74,1)
(38,117,1)
(66,27,1)
(0,138,1)
(154,76,1)
(82,60,1)
(126,127,1)
(19,75,1)
(9,142,1)
(86,69,1)
(58,61,1)
(27,102,1)
(59,80,1)
(78,112,1)
(43,58,1)
(34,101,1)
(135,132,1)
(62,103,1)
(52,41,1)
(107,128,1)
(87,54,1)
(92,1,1)
(111,73,1)
(75,39,1)
(18,111,1)
(55,32,1)
(138,96,1)
(61,51,1)
(33,62,1)
(96,36,1)
(95,44,1)
(7,16,1)
(83,134,1)
(23,74,1)
(122,127,1)
(19,74,1)
(150,59,1)
(145,74,1)
(6,134,1)
(14,74,1)
(87,116,1)
(89,119,1)
(94,148,1)
(97,118,1)
(99,87,1)
(106,87,1)
(131,116,1)
(44,78,1)
(148,120,1)
(98,131,1)
(141,48,1)
(113,43,1)
(100,116,1)
(113,58,1)
(16,25,1)
(116,66,1)
(127,86,1)
(92,35,1)
(59,25,1)
(35,22,1)
(137,85,1)
(40,146,1)
(20,89,1)
(44,107,1)
(50,144,1)
(89,83,1)
(58,51,1)
(50,111,2)
(0,59,2)
(85,113,2)
(126,127,2)
(1,106,2)
(78,111,2)
(127,69,2)
(131,92,2)
(22,106,2)
(14,106,2)
(52,18,2)
(75,89,2)
(27,16,2)
(145,16,2)
(153,127,2)
(101,59,2)
(116,66,2)
(154,59,2)
(89,92,2)
(17,141,2)
(128,141,2)
(62,111,2)
(95,64,2)
(106,87,2)
(83,134,2)
(152,16,2)
(82,83,2)
(23,111,2)
(132,59,2)
(64,59,2)
(127,92,2)
(19,74,2)
(18,111,2)
(55,111,2)
(98,92,2)
(59,141,2)
(33,111,2)
(113,89,2)
(105,16,2)
(74,97,2)
(36,150,2)
(69,92,2)
(95,14,2)
(23,74,2)
(80,141,2)
(35,22,2)
(8,141,2)
(39,89,2)
(62,103,2)
(53,111,2)
(111,127,2)
(97,25,2)
(76,59,2)
(44,78,2)
(45,111,2)
(142,127,2)
(78,112,2)
(116,16,2)
(138,150,2)
(107,59,2)
(16,25,2)
(44,141,2)
(43,89,2)
(153,116,2)
(100,116,2)
(95,44,2)
(68,89,2)
(47,106,2)
(53,62,2)
(82,3,2)
(72,111,2)
(112,111,2)
(100,16,2)
(134,92,2)
(76,34,2)
(5,92,2)
(58,89,2)
(85,89,2)
(48,89,2)
(74,91,2)
(26,83,2)
(35,106,2)
(150,59,2)
(92,106,2)
(81,111,2)
(79,111,2)
(19,89,2)
(145,74,2)
(58,51,2)
(54,16,2)
(7,16,2)
(24,111,2)
(125,111,2)
(73,153,2)
(144,111,2)
(32,18,2)
(95,19,2)
(103,73,2)
(129,74,2)
(66,16,2)
(141,89,2)
(94,100,2)
(34,59,2)
(123,89,2)
(22,116,2)
(123,26,2)
(44,48,2)
(118,91,2)
(86,92,2)
(146,89,2)
(89,83,2)
(141,111,2)
(59,25,2)
(122,127,2)
(131,116,2)
(94,39,2)
(108,92,2)
(97,91,2)
(147,89,2)
(95,145,2)
(51,89,2)
(106,16,2)
(32,100,2)
(135,59,2)
(137,89,2)
(6,92,2)
(134,116,2)
(66,4,2)
(10,59,2)
(120,39,2)
(20,89,2)
(138,100,2)
(151,91,2)
(30,141,2)
(148,39,2)
(51,26,2)
(121,91,2)
(41,18,2)
(129,127,2)
(87,16,2)
(48,123,2)
(95,23,2)
(64,74,2)
(69,116,2)
(99,16,2)
(117,83,2)
(87,116,2)
(130,106,2)
(73,127,2)
(102,16,2)
(14,74,2)
(95,129,2)
(136,106,2)
(9,127,2)
(82,116,2)
(119,83,2)
(103,111,2)
(111,73,2)
(60,83,2)
(40,89,2)
(34,4,2)
(92,35,2)
(26,82,2)
(113,58,2)
(96,150,2)
(38,83,2)
(112,73,2)
(119,26,2)
(83,92,2)
(144,53,2)
(44,59,2)
(153,3,2)
(89,119,2)
(107,141,2)
(61,89,2)
(31,106,2)
-----------------------------------
(0,JAS_GETOPT_ERR)
(1,\'-\')
(2,if (*++cp == \'-\')
(3,jas_opt_t *opts)
(4,char **argv)
(5,cp)
(6,1)
(7,JAS_GETOPT_EOF)
(8,0)
(9,cp)
(10,++jas_optind)
(11,)
(12,if (jas_opterr)
(13,)
(14,return JAS_GETOPT_EOF;)
(15,)
(16,jas_optind < argc)
(17,jas_optarg)
(18,jas_opterr)
(19,return JAS_GETOPT_ERR;)
(20,hasarg)
(21,)
(22,++cp)
(23,return JAS_GETOPT_ERR;)
(24,hasarg)
(25,int argc)
(26,opt = jas_optlookup(opts, cp)
(27,jas_optind)
(28,hasarg)
(29,)
(30,jas_optind)
(31,cp)
(32,jas_eprintf("unknown long option %s\\n", s)
(33,0)
(34,argv[jas_optind])
(35,*++cp)
(36,"missing argument for option %s\\n")
(37,opt)
(38,opts)
(39,jas_opterr)
(40,id)
(41,"unknown long option %s\\n")
(42,if (jas_optind >= argc)
(43,0)
(44,return id;)
(45,id)
(46,while (jas_optind < argc)
(47,++jas_optind)
(48,id = opt->id)
(49,)
(50,id)
(51,opt->flags)
(52,s)
(53,(opt->flags & JAS_OPT_HASARG)
(54,cp)
(55,JAS_GETOPT_ERR)
(56,if (!(opt = jas_optlookup(opts, cp)
(57,if (jas_opterr)
(58,opt->flags & JAS_OPT_HASARG)
(59,jas_optind >= argc)
(60,cp)
(61,JAS_OPT_HASARG)
(62,opt->flags & JAS_OPT_HASARG)
(63,)
(64,return JAS_GETOPT_ERR;)
(65,)
(66,argv[jas_optind])
(67,)
(68,opt)
(69,*cp)
(70,if (!jas_optind)
(71,if (hasarg)
(72,opt)
(73,opt = jas_optlookup(opts, cp)
(74,jas_optind = JAS_MIN(1, argc)
(75,JAS_GETOPT_ERR)
(76,jas_optarg = argv[jas_optind])
(77,)
(78,id = opt->id)
(79,flags)
(80,argc)
(81,opt)
(82,jas_optlookup(opts, cp)
(83,strlen(cp)
(84,id)
(85,hasarg = (opt->flags & JAS_OPT_HASARG)
(86,\'\\0\')
(87,*cp)
(88,)
(89,strlen(cp)
(90,s)
(91,!jas_optind)
(92,*++cp == \'-\')
(93,)
(94,jas_eprintf("unknown short option %s\\n", s)
(95,RET)
(96,s)
(97,JAS_MIN(1, argc)
(98,cp)
(99,\'-\')
(100,s = cp = argv[jas_optind])
(101,jas_optind)
(102,argv)
(103,opt->flags)
(104,)
(105,s)
(106,*cp == \'-\')
(107,id)
(108,cp)
(109,jas_optind)
(110,if (*cp == \'\\0\')
(111,!(opt = jas_optlookup(opts, cp)
(112,opt->id)
(113,(opt->flags & JAS_OPT_HASARG)
(114,)
(115,if (strlen(cp)
(116,cp = argv[jas_optind])
(117,opt)
(118,argc)
(119,!(opt = jas_optlookup(opts, cp)
(120,"unknown short option %s\\n")
(121,1)
(122,opt)
(123,opt->id)
(124,if (jas_opterr)
(125,JAS_OPT_HASARG)
(126,JAS_GETOPT_EOF)
(127,*cp == \'\\0\')
(128,jas_optarg = 0)
(129,return JAS_GETOPT_EOF;)
(130,JAS_GETOPT_EOF)
(131,++cp)
(132,jas_optarg)
(133,cp)
(134,strlen(cp)
(135,argv)
(136,jas_optind)
(137,id)
(138,jas_eprintf("missing argument for option %s\\n", s)
(139,argc)
(140,jas_optind)
(141,hasarg)
(142,opts)
(143,)
(144,hasarg = (opt->flags & JAS_OPT_HASARG)
(145,return JAS_GETOPT_EOF;)
(146,opt)
(147,flags)
(148,s)
(149,)
(150,jas_opterr)
(151,jas_optind)
(152,cp)
(153,jas_optlookup(opts, cp)
(154,jas_optind)
(155,if (*cp == \'-\')
-----cfg-----
(32,31)
(34,32)
(37,41)
(39,41)
(7,14)
(14,21)
(17,34)
(17,39)
(18,17)
(18,25)
(19,18)
(21,19)
(23,17)
(25,23)
(26,21)
(30,37)
(30,26)
(31,30)
-----path-----
7,14,21,19,18,17,34,32,31,30,37,41
7,14,21,19,18,17,39,41
7,14,21,19,18,25,23,17,34,32,31,30,37,41
7,14,21,19,18,25,23,17,39,41
-----cfgNode-----
5,<global>
6,<empty>
7,jas_opt_t jas_optlookup (jas_opt_t *opts,char *name)
8,jas_opt_t *opts
9,char *name
10,<empty>
11,jas_opt_t* opt
12,for (opt = opts;opt->id >= 0 && opt->name;++opt)
13,<empty>
14,opt = opts
15,opt
16,opts
17,opt->id >= 0 && opt->name
18,opt->id >= 0
19,opt->id
20,opt
21,id
22,0
23,opt->name
24,opt
25,name
26,++opt
27,opt
28,<empty>
29,if (!strcmp(opt->name, name))
30,!strcmp(opt->name, name)
31,strcmp(opt->name, name)
32,opt->name
33,opt
34,name
35,name
36,<empty>
37,return opt;
38,opt
39,return 0;
40,0
41,RET
42,jas_opt_t *opts
43,char *name
44,RET
45,jas_opt_t jas_optlookup (jas_opt_t *opts,char *name)
46,jas_opt_t *opts
47,char *name
48,<empty>
49,jas_opt_t* opt
50,for (opt = opts;opt->id >= 0 && opt->name;++opt)
51,<empty>
52,opt = opts
53,opt
54,opts
55,opt->id >= 0 && opt->name
56,opt->id >= 0
57,opt->id
58,opt
59,id
60,0
61,opt->name
62,opt
63,name
64,++opt
65,opt
66,<empty>
67,if (!strcmp(opt->name, name))
68,!strcmp(opt->name, name)
69,strcmp(opt->name, name)
70,opt->name
71,opt
72,name
73,name
74,<empty>
75,return opt;
76,opt
77,return 0;
78,0
79,RET
80,jas_opt_t *opts
81,char *name
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
static jas_opt_t *jas_optlookup(jas_opt_t *opts, char *name) {
jas_opt_t *opt;
for(opt = opts;opt->id >= 0 && opt->name;++opt)
for(opt = opts;opt->id >= 0 && opt->name;++opt)
for(opt = opts;opt->id >= 0 && opt->name;++opt)
for(opt = opts;opt->id >= 0 && opt->name;++opt)
for(opt = opts;opt->id >= 0 && opt->name;++opt)
for(opt = opts;opt->id >= 0 && opt->name;++opt)
for(opt = opts;opt->id >= 0 && opt->name;++opt)
for(opt = opts;opt->id >= 0 && opt->name;++opt)
for(opt = opts;opt->id >= 0 && opt->name;++opt)
for(opt = opts;opt->id >= 0 && opt->name;++opt)
for(opt = opts;opt->id >= 0 && opt->name;++opt)
for(opt = opts;opt->id >= 0 && opt->name;++opt)
if(!strcmp(opt->name, name))
return opt;
=======================
