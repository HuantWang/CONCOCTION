-----label-----
0
-----code-----
jpc_ms_t *jpc_ms_create(int type)
{
	jpc_ms_t *ms;
	jpc_mstabent_t *mstabent;

	if (!(ms = jas_malloc(sizeof(jpc_ms_t)))) {
		return 0;
	}
	ms->id = type;
	ms->len = 0;
	mstabent = jpc_mstab_lookup(ms->id);
	ms->ops = &mstabent->ops;
	memset(&ms->parms, 0, sizeof(jpc_msparms_t));
	return ms;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
26,27
26,28
27,28
28,29
29,30
29,31
30,31
32,33
32,34
33,34
35,36
36,37
36,38
37,38
40,41
41,42
43,44
44,45
44,46
45,46
45,47
46,47
49,50
51,52
52,53
52,54
53,54
53,55
54,55
58,59
59,60
59,61
60,61
62,63
62,64
63,64
65,66
65,67
66,67
69,70
70,71
70,72
71,72
71,73
72,73
75,76
76,77
76,78
77,78
80,81
81,82
81,83
81,84
81,85
82,83
84,85
85,86
85,87
86,87
90,91
91,92
91,93
92,93
95,96
96,97
-----nextToken-----
3,5,6,8,10,15,17,18,22,24,25,31,34,38,39,42,47,48,50,55,56,57,61,64,67,68,73,74,78,79,83,87,88,89,93,94,97
-----computeFrom-----
29,30
29,31
44,45
44,46
52,53
52,54
59,60
59,61
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ReturnStatement;IdExpression;Name;
-----ast_node-----
jpc_ms_t *jpc_ms_create(int type){	jpc_ms_t *ms;	jpc_mstabent_t *mstabent;	if (!(ms = jas_malloc(sizeof(jpc_ms_t)))) {		return 0;	}	ms->id = type;	ms->len = 0;	mstabent = jpc_mstab_lookup(ms->id);	ms->ops = &mstabent->ops;	memset(&ms->parms, 0, sizeof(jpc_msparms_t));	return ms;}
jpc_ms_t
jpc_ms_t
*jpc_ms_create(int type)
*
jpc_ms_create
int type
int
type
type
{	jpc_ms_t *ms;	jpc_mstabent_t *mstabent;	if (!(ms = jas_malloc(sizeof(jpc_ms_t)))) {		return 0;	}	ms->id = type;	ms->len = 0;	mstabent = jpc_mstab_lookup(ms->id);	ms->ops = &mstabent->ops;	memset(&ms->parms, 0, sizeof(jpc_msparms_t));	return ms;}
jpc_ms_t *ms;
jpc_ms_t *ms;
jpc_ms_t
jpc_ms_t
*ms
*
ms
jpc_mstabent_t *mstabent;
jpc_mstabent_t *mstabent;
jpc_mstabent_t
jpc_mstabent_t
*mstabent
*
mstabent
if (!(ms = jas_malloc(sizeof(jpc_ms_t)))) {		return 0;	}
!(ms = jas_malloc(sizeof(jpc_ms_t)))
(ms = jas_malloc(sizeof(jpc_ms_t)))
ms = jas_malloc(sizeof(jpc_ms_t))
ms
ms
jas_malloc(sizeof(jpc_ms_t))
jas_malloc
jas_malloc
sizeof(jpc_ms_t)
jpc_ms_t
jpc_ms_t
jpc_ms_t

{		return 0;	}
return 0;
0
ms->id = type;
ms->id = type
ms->id
ms
ms
id
type
type
ms->len = 0;
ms->len = 0
ms->len
ms
ms
len
0
mstabent = jpc_mstab_lookup(ms->id);
mstabent = jpc_mstab_lookup(ms->id)
mstabent
mstabent
jpc_mstab_lookup(ms->id)
jpc_mstab_lookup
jpc_mstab_lookup
ms->id
ms
ms
id
ms->ops = &mstabent->ops;
ms->ops = &mstabent->ops
ms->ops
ms
ms
ops
&mstabent->ops
mstabent->ops
mstabent
mstabent
ops
memset(&ms->parms, 0, sizeof(jpc_msparms_t));
memset(&ms->parms, 0, sizeof(jpc_msparms_t))
memset
memset
&ms->parms
ms->parms
ms
ms
parms
0
sizeof(jpc_msparms_t)
jpc_msparms_t
jpc_msparms_t
jpc_msparms_t

return ms;
ms
ms
-----joern-----
(24,32,0)
(21,17,0)
(20,43,0)
(3,43,0)
(45,23,0)
(6,27,0)
(9,14,0)
(15,40,0)
(19,28,0)
(0,15,0)
(29,23,0)
(28,10,0)
(15,7,0)
(17,27,0)
(49,36,0)
(30,38,0)
(43,7,0)
(36,27,0)
(23,27,0)
(23,48,0)
(28,38,0)
(10,26,0)
(51,39,0)
(6,41,0)
(10,41,0)
(14,18,0)
(50,11,0)
(48,23,0)
(46,11,0)
(36,38,0)
(32,11,0)
(38,36,0)
(1,51,0)
(38,28,0)
(31,51,0)
(16,28,0)
(51,27,0)
(44,36,0)
(11,32,0)
(13,26,0)
(2,14,0)
(43,4,0)
(32,43,0)
(34,6,0)
(38,7,0)
(17,7,0)
(17,33,0)
(41,10,0)
(43,32,0)
(25,4,0)
(38,26,0)
(5,39,0)
(42,15,0)
(22,6,0)
(35,26,0)
(14,7,0)
(11,27,0)
(37,38,0)
(41,6,0)
(39,51,0)
(47,17,0)
(8,10,0)
(48,23,1)
(38,7,1)
(42,39,1)
(11,46,1)
(39,5,1)
(32,24,1)
(21,39,1)
(17,27,1)
(23,27,1)
(14,9,1)
(38,36,1)
(43,32,1)
(51,27,1)
(45,38,1)
(44,49,1)
(47,21,1)
(2,48,1)
(37,30,1)
(20,48,1)
(6,27,1)
(28,16,1)
(10,41,1)
(19,36,1)
(12,15,1)
(39,51,1)
(6,34,1)
(32,11,1)
(29,45,1)
(15,0,1)
(23,29,1)
(3,20,1)
(38,28,1)
(5,51,1)
(0,42,1)
(11,27,1)
(12,17,1)
(15,7,1)
(43,7,1)
(22,8,1)
(49,37,1)
(41,6,1)
(12,14,1)
(1,43,1)
(14,7,1)
(17,47,1)
(9,2,1)
(50,3,1)
(36,44,1)
(24,11,1)
(46,50,1)
(36,27,1)
(28,10,1)
(31,1,1)
(51,31,1)
(17,7,1)
(16,19,1)
(30,10,1)
(34,22,1)
(51,27,2)
(11,48,2)
(32,11,2)
(28,10,2)
(15,7,2)
(42,39,2)
(38,7,2)
(20,48,2)
(38,36,2)
(51,48,2)
(17,39,2)
(3,48,2)
(14,7,2)
(5,48,2)
(9,48,2)
(14,48,2)
(24,48,2)
(43,48,2)
(17,27,2)
(6,27,2)
(41,6,2)
(39,48,2)
(39,51,2)
(11,27,2)
(38,28,2)
(50,48,2)
(2,48,2)
(31,48,2)
(47,39,2)
(10,41,2)
(21,39,2)
(32,48,2)
(46,48,2)
(15,39,2)
(23,27,2)
(48,23,2)
(0,39,2)
(17,7,2)
(36,27,2)
(43,7,2)
(1,48,2)
(43,32,2)
-----------------------------------
(0,"\\n")
(1,ms)
(2,out)
(3," len = %d;")
(4,)
(5,dumpparms)
(6,ms->id)
(7,FILE *out)
(8,mstabent)
(9,"\\n")
(10,mstabent = jpc_mstab_lookup(ms->id)
(11,ms->len)
(12,RET)
(13,mstabent)
(14,fprintf(out, "\\n")
(15,fprintf(out, "\\n")
(16,name)
(17,(*ms->ops->dumpparms)
(18,)
(19,mstabent)
(20,out)
(21,ms)
(22,ms)
(23,ms->id)
(24,2)
(25,if (ms->ops->dumpparms)
(26,)
(27,jpc_ms_t *ms)
(28,mstabent->name)
(29,id)
(30,out)
(31,ops)
(32,ms->len + 2)
(33,)
(34,id)
(35,if (JPC_MS_HASPARMS(ms->id)
(36,ms->id)
(37,"type = 0x%04x (%s)
(38,fprintf(out, "type = 0x%04x (%s)
(39,ms->ops->dumpparms)
(40,)
(41,jpc_mstab_lookup(ms->id)
(42,out)
(43,fprintf(out, " len = %d;", ms->len + 2)
(44,id)
(45,ms)
(46,len)
(47,out)
(48,JPC_MS_HASPARMS(ms->id)
(49,ms)
(50,ms)
(51,ms->ops)
-----cfg-----
(7,17)
(13,20)
(13,25)
(14,13)
(16,14)
(17,16)
(20,56)
(22,30)
(23,22)
(25,23)
(27,37)
(28,27)
(30,28)
(32,41)
(34,32)
(35,34)
(37,35)
(38,50)
(39,45)
(41,39)
(42,38)
(43,42)
(45,43)
(46,54)
(47,52)
(48,47)
(50,48)
(52,46)
(54,56)
-----path-----
7,17,16,14,13,20,56
7,17,16,14,13,25,23,22,30,28,27,37,35,34,32,41,39,45,43,42,38,50,48,47,52,46,54,56
-----cfgNode-----
5,<global>
6,<empty>
7,jpc_ms_t jpc_ms_create (int type)
8,int type
9,<empty>
10,jpc_ms_t* ms
11,jpc_mstabent_t* mstabent
12,if (!(ms = jas_malloc(sizeof(jpc_ms_t))))
13,!(ms = jas_malloc(sizeof(jpc_ms_t)))
14,ms = jas_malloc(sizeof(jpc_ms_t))
15,ms
16,jas_malloc(sizeof(jpc_ms_t))
17,sizeof(jpc_ms_t)
18,jpc_ms_t
19,<empty>
20,return 0;
21,0
22,ms->id = type
23,ms->id
24,ms
25,id
26,type
27,ms->len = 0
28,ms->len
29,ms
30,len
31,0
32,mstabent = jpc_mstab_lookup(ms->id)
33,mstabent
34,jpc_mstab_lookup(ms->id)
35,ms->id
36,ms
37,id
38,ms->ops = &mstabent->ops
39,ms->ops
40,ms
41,ops
42,&mstabent->ops
43,mstabent->ops
44,mstabent
45,ops
46,memset(&ms->parms, 0, sizeof(jpc_msparms_t))
47,&ms->parms
48,ms->parms
49,ms
50,parms
51,0
52,sizeof(jpc_msparms_t)
53,jpc_msparms_t
54,return ms;
55,ms
56,RET
57,int type
58,RET
59,jpc_ms_t jpc_ms_create (int type)
60,int type
61,<empty>
62,jpc_ms_t* ms
63,jpc_mstabent_t* mstabent
64,if (!(ms = jas_malloc(sizeof(jpc_ms_t))))
65,!(ms = jas_malloc(sizeof(jpc_ms_t)))
66,ms = jas_malloc(sizeof(jpc_ms_t))
67,ms
68,jas_malloc(sizeof(jpc_ms_t))
69,sizeof(jpc_ms_t)
70,jpc_ms_t
71,<empty>
72,return 0;
73,0
74,ms->id = type
75,ms->id
76,ms
77,id
78,type
79,ms->len = 0
80,ms->len
81,ms
82,len
83,0
84,mstabent = jpc_mstab_lookup(ms->id)
85,mstabent
86,jpc_mstab_lookup(ms->id)
87,ms->id
88,ms
89,id
90,ms->ops = &mstabent->ops
91,ms->ops
92,ms
93,ops
94,&mstabent->ops
95,mstabent->ops
96,mstabent
97,ops
98,memset(&ms->parms, 0, sizeof(jpc_msparms_t))
99,&ms->parms
100,ms->parms
101,ms
102,parms
103,0
104,sizeof(jpc_msparms_t)
105,jpc_msparms_t
106,return ms;
107,ms
108,RET
109,int type
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
jpc_ms_t *jpc_ms_create(int type) {
jpc_ms_t *ms;
jpc_mstabent_t *mstabent;
ms->id = type;
ms->len = 0;
mstabent = jpc_mstab_lookup(ms->id);
ms->ops = &mstabent->ops;
memset(&ms->parms, 0, sizeof(jpc_msparms_t));
return ms;
=======================
