-----label-----
0
-----code-----
static int pnm_getc(jas_stream_t *in)
{
	int c;
	for (;;) {
		if ((c = jas_stream_getc(in)) == EOF) {
			return -1;
		}
		if (c != '#') {
			return c;
		}
		do {
			if ((c = jas_stream_getc(in)) == EOF) {
				return -1;
			}
		} while (c != '\n' && c != '\r');
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
15,16
17,18
17,19
19,20
19,21
19,22
20,21
20,22
21,22
21,23
22,23
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
33,34
34,35
35,36
37,38
37,39
38,39
38,40
39,40
42,43
43,44
44,45
46,47
46,48
47,48
48,49
48,50
49,50
49,51
50,51
51,52
51,53
52,53
54,55
54,56
55,56
57,58
59,60
61,62
62,63
63,64
65,66
65,67
66,67
66,68
67,68
70,71
70,72
71,72
-----nextToken-----
2,4,7,9,10,14,16,18,25,28,30,32,36,40,41,45,53,56,58,60,64,68,69,72,73
-----computeFrom-----
21,22
21,23
23,24
23,25
38,39
38,40
49,50
49,51
51,52
51,53
65,66
65,67
66,67
66,68
70,71
70,72
-----guardedBy-----
40,45
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;NullStatement;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;IdExpression;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static int pnm_getc(jas_stream_t *in){	int c;	for (;;) {		if ((c = jas_stream_getc(in)) == EOF) {			return -1;		}		if (c != '#') {			return c;		}		do {			if ((c = jas_stream_getc(in)) == EOF) {				return -1;			}		} while (c != '\n' && c != '\r');	}}
static int
pnm_getc(jas_stream_t *in)
pnm_getc
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	int c;	for (;;) {		if ((c = jas_stream_getc(in)) == EOF) {			return -1;		}		if (c != '#') {			return c;		}		do {			if ((c = jas_stream_getc(in)) == EOF) {				return -1;			}		} while (c != '\n' && c != '\r');	}}
int c;
int c;
int
c
c
for (;;) {		if ((c = jas_stream_getc(in)) == EOF) {			return -1;		}		if (c != '#') {			return c;		}		do {			if ((c = jas_stream_getc(in)) == EOF) {				return -1;			}		} while (c != '\n' && c != '\r');	}
;
{		if ((c = jas_stream_getc(in)) == EOF) {			return -1;		}		if (c != '#') {			return c;		}		do {			if ((c = jas_stream_getc(in)) == EOF) {				return -1;			}		} while (c != '\n' && c != '\r');	}
if ((c = jas_stream_getc(in)) == EOF) {			return -1;		}
(c = jas_stream_getc(in)) == EOF
(c = jas_stream_getc(in))
c = jas_stream_getc(in)
c
c
jas_stream_getc(in)
jas_stream_getc
jas_stream_getc
in
in
EOF
EOF
{			return -1;		}
return -1;
-1
1
if (c != '#') {			return c;		}
c != '#'
c
c
'#'
{			return c;		}
return c;
c
c
do {			if ((c = jas_stream_getc(in)) == EOF) {				return -1;			}		} while (c != '\n' && c != '\r');
{			if ((c = jas_stream_getc(in)) == EOF) {				return -1;			}		}
if ((c = jas_stream_getc(in)) == EOF) {				return -1;			}
(c = jas_stream_getc(in)) == EOF
(c = jas_stream_getc(in))
c = jas_stream_getc(in)
c
c
jas_stream_getc(in)
jas_stream_getc
jas_stream_getc
in
in
EOF
EOF
{				return -1;			}
return -1;
-1
1
c != '\n' && c != '\r'
c != '\n'
c
c
'\n'
c != '\r'
c
c
'\r'
-----joern-----
(76,81,0)
(20,10,0)
(74,111,0)
(12,77,0)
(7,84,0)
(106,45,0)
(34,36,0)
(50,20,0)
(40,60,0)
(80,28,0)
(23,27,0)
(66,105,0)
(27,60,0)
(13,69,0)
(71,105,0)
(45,5,0)
(19,84,0)
(12,107,0)
(5,68,0)
(53,80,0)
(12,41,0)
(7,35,0)
(11,40,0)
(51,2,0)
(68,62,0)
(102,105,0)
(85,15,0)
(52,45,0)
(96,105,0)
(1,28,0)
(43,10,0)
(37,15,0)
(111,74,0)
(41,24,0)
(63,103,0)
(36,61,0)
(31,60,0)
(32,72,0)
(100,34,0)
(6,105,0)
(103,60,0)
(111,62,0)
(38,60,0)
(44,77,0)
(48,28,0)
(9,36,0)
(73,103,0)
(75,41,0)
(31,94,0)
(108,102,0)
(54,101,0)
(94,95,0)
(45,62,0)
(2,35,0)
(22,107,0)
(35,20,0)
(95,49,0)
(94,31,0)
(56,81,0)
(21,38,0)
(57,64,0)
(90,15,0)
(17,105,0)
(26,52,0)
(4,17,0)
(46,19,0)
(27,32,0)
(42,20,0)
(0,105,0)
(77,17,0)
(69,76,0)
(3,68,0)
(39,95,0)
(12,103,0)
(49,5,0)
(8,77,0)
(25,31,0)
(68,5,0)
(32,64,0)
(45,52,0)
(5,45,0)
(33,80,0)
(77,60,0)
(104,88,0)
(35,14,0)
(35,103,0)
(69,60,0)
(7,12,0)
(109,69,0)
(41,60,0)
(12,20,0)
(5,49,0)
(101,15,0)
(20,60,0)
(86,107,0)
(78,15,0)
(40,55,0)
(91,74,0)
(84,18,0)
(49,95,0)
(107,60,0)
(110,38,0)
(12,27,0)
(24,61,0)
(65,105,0)
(107,102,0)
(59,12,0)
(12,34,0)
(103,101,0)
(88,68,0)
(55,40,0)
(72,28,0)
(81,76,0)
(89,15,0)
(83,72,0)
(99,31,0)
(10,15,0)
(87,105,0)
(97,57,0)
(95,94,0)
(93,41,0)
(92,24,0)
(72,32,0)
(30,105,0)
(29,111,0)
(16,27,0)
(12,15,0)
(79,15,0)
(76,69,0)
(67,40,0)
(70,34,0)
(12,38,0)
(95,62,0)
(24,28,0)
(28,82,0)
(47,15,0)
(68,88,0)
(98,58,0)
(34,60,0)
(38,57,0)
(52,26,1)
(77,44,1)
(10,43,1)
(86,55,1)
(91,29,1)
(38,21,1)
(24,92,1)
(7,84,1)
(92,41,1)
(45,62,1)
(57,97,1)
(94,31,1)
(104,3,1)
(95,94,1)
(22,86,1)
(83,27,1)
(73,49,1)
(75,80,1)
(28,48,1)
(27,16,1)
(50,42,1)
(56,76,1)
(46,49,1)
(12,41,1)
(72,28,1)
(35,2,1)
(76,69,1)
(40,11,1)
(44,8,1)
(31,60,1)
(72,83,1)
(20,50,1)
(59,30,1)
(35,20,1)
(68,88,1)
(4,77,1)
(70,100,1)
(102,108,1)
(24,28,1)
(107,60,1)
(12,59,1)
(100,24,1)
(74,91,1)
(1,81,1)
(34,70,1)
(9,34,1)
(40,60,1)
(12,20,1)
(12,38,1)
(80,53,1)
(80,28,1)
(59,87,1)
(12,103,1)
(49,95,1)
(21,110,1)
(69,60,1)
(13,109,1)
(32,72,1)
(49,5,1)
(12,34,1)
(29,81,1)
(7,12,1)
(84,19,1)
(67,36,1)
(43,20,1)
(11,67,1)
(5,45,1)
(93,75,1)
(54,103,1)
(99,39,1)
(27,60,1)
(103,60,1)
(12,27,1)
(97,38,1)
(108,107,1)
(81,76,1)
(12,107,1)
(103,63,1)
(110,32,1)
(5,68,1)
(63,73,1)
(111,62,1)
(41,60,1)
(59,71,1)
(12,77,1)
(48,1,1)
(38,60,1)
(45,52,1)
(33,28,1)
(34,60,1)
(109,10,1)
(36,9,1)
(7,35,1)
(17,4,1)
(25,99,1)
(30,102,1)
(16,23,1)
(42,101,1)
(87,17,1)
(51,111,1)
(20,60,1)
(107,22,1)
(55,40,1)
(8,55,1)
(88,104,1)
(19,46,1)
(95,62,1)
(101,54,1)
(31,25,1)
(69,13,1)
(106,68,1)
(35,103,1)
(53,33,1)
(68,62,1)
(23,80,1)
(26,106,1)
(71,0,1)
(41,93,1)
(111,74,1)
(81,56,1)
(3,95,1)
(77,60,1)
(67,57,1)
(0,55,1)
(2,51,1)
(33,111,1)
(9,80,2)
(67,81,2)
(100,80,2)
(7,35,2)
(32,72,2)
(68,95,2)
(59,81,2)
(20,49,2)
(93,80,2)
(36,80,2)
(104,95,2)
(53,111,2)
(41,60,2)
(44,55,2)
(111,74,2)
(17,55,2)
(84,49,2)
(68,62,2)
(11,81,2)
(95,62,2)
(40,81,2)
(106,68,2)
(45,62,2)
(12,107,2)
(12,27,2)
(1,81,2)
(55,111,2)
(75,80,2)
(54,49,2)
(35,111,2)
(2,111,2)
(88,95,2)
(92,80,2)
(12,81,2)
(12,20,2)
(5,95,2)
(20,60,2)
(50,49,2)
(87,55,2)
(38,60,2)
(77,55,2)
(72,28,2)
(80,81,2)
(41,80,2)
(63,49,2)
(22,55,2)
(32,80,2)
(4,55,2)
(3,95,2)
(48,81,2)
(102,55,2)
(12,34,2)
(111,62,2)
(110,80,2)
(40,60,2)
(33,111,2)
(30,55,2)
(28,81,2)
(72,80,2)
(81,76,2)
(29,81,2)
(107,55,2)
(80,28,2)
(11,111,2)
(51,111,2)
(71,55,2)
(5,68,2)
(12,38,2)
(94,31,2)
(91,81,2)
(52,68,2)
(26,68,2)
(35,103,2)
(49,5,2)
(77,60,2)
(19,49,2)
(7,12,2)
(35,20,2)
(23,80,2)
(103,49,2)
(56,49,2)
(69,49,2)
(95,94,2)
(69,60,2)
(12,111,2)
(21,80,2)
(53,81,2)
(55,81,2)
(59,111,2)
(86,55,2)
(76,69,2)
(83,80,2)
(57,80,2)
(8,55,2)
(34,60,2)
(27,80,2)
(34,80,2)
(13,49,2)
(49,95,2)
(24,28,2)
(67,111,2)
(73,49,2)
(40,111,2)
(0,55,2)
(38,80,2)
(43,49,2)
(12,103,2)
(101,49,2)
(46,49,2)
(74,81,2)
(107,60,2)
(111,81,2)
(109,49,2)
(42,49,2)
(108,55,2)
(33,81,2)
(27,60,2)
(68,88,2)
(76,49,2)
(16,80,2)
(81,49,2)
(55,40,2)
(45,52,2)
(70,80,2)
(24,80,2)
(12,41,2)
(7,84,2)
(31,60,2)
(103,60,2)
(97,80,2)
(45,68,2)
(10,49,2)
(80,111,2)
(5,45,2)
(12,77,2)
-----------------------------------
(0,abort()
(1,maxval)
(2,-1)
(3,in)
(4,3)
(5,pnm_getsintstr(in, &width)
(6,case PNM_TYPE_PBM:)
(7,RET)
(8,hdr)
(9,false)
(10,hdr->height = height)
(11,magic)
(12,return 0;)
(13,magic)
(14,)
(15,)
(16,maxval)
(17,hdr->numcmpts = 3)
(18,)
(19,-1)
(20,hdr->height)
(21,sgnd)
(22,numcmpts)
(23,hdr)
(24,hdr->maxval = maxval)
(25,magic)
(26,height)
(27,hdr->maxval)
(28,maxval = 1)
(29,in)
(30,break;)
(31,hdr->magic)
(32,hdr->maxval = -maxval)
(33,maxval)
(34,hdr->sgnd)
(35,return -1;)
(36,hdr->sgnd = false)
(37,width)
(38,hdr->sgnd)
(39,in)
(40,hdr->magic)
(41,hdr->maxval)
(42,hdr)
(43,height)
(44,numcmpts)
(45,pnm_getsintstr(in, &height)
(46,1)
(47,height)
(48,1)
(49,pnm_getint16(in, &hdr->magic)
(50,height)
(51,1)
(52,&height)
(53,0)
(54,width)
(55,pnm_type(hdr->magic)
(56,PNM_TYPE_PBM)
(57,hdr->sgnd = true)
(58,)
(59,0)
(60,pnm_hdr_t *hdr)
(61,)
(62,jas_stream_t *in)
(63,width)
(64,)
(65,default:)
(66,case PNM_TYPE_PPM:)
(67,hdr)
(68,pnm_getsintstr(in, &width)
(69,hdr->magic)
(70,sgnd)
(71,break;)
(72,-maxval)
(73,hdr)
(74,&maxval)
(75,hdr)
(76,pnm_type(hdr->magic)
(77,hdr->numcmpts)
(78,if (pnm_getint16(in, &hdr->magic)
(79,switch (pnm_type(hdr->magic)
(80,maxval < 0)
(81,pnm_type(hdr->magic)
(82,)
(83,maxval)
(84,return -1;)
(85,if (maxval < 0)
(86,hdr)
(87,break;)
(88,&width)
(89,maxval)
(90,if (pnm_type(hdr->magic)
(91,maxval)
(92,maxval)
(93,maxval)
(94,&hdr->magic)
(95,pnm_getint16(in, &hdr->magic)
(96,case PNM_TYPE_PGM:)
(97,true)
(98,if (pnm_getsintstr(in, &maxval)
(99,hdr)
(100,hdr)
(101,hdr->width = width)
(102,hdr->numcmpts = 1)
(103,hdr->width)
(104,width)
(105,)
(106,in)
(107,hdr->numcmpts)
(108,1)
(109,hdr)
(110,hdr)
(111,pnm_getsintstr(in, &maxval)
-----cfg-----
(35,46)
(35,43)
(36,35)
(38,36)
(7,18)
(42,52)
(43,42)
(45,18)
(45,38)
(46,45)
(46,49)
(15,23)
(15,26)
(16,15)
(49,45)
(18,16)
(22,52)
(23,22)
(26,30)
(26,38)
(30,52)
-----path-----
7,18,16,15,23,22,52
7,18,16,15,26,30,52
7,18,16,15,26,38,36,35,43,42,52
-----cfgNode-----
5,<global>
6,<empty>
7,int pnm_getc (jas_stream_t *in)
8,jas_stream_t *in
9,<empty>
10,int c
11,for (;;)
12,<empty>
13,<empty>
14,if ((c = jas_stream_getc(in)) == EOF)
15,(c = jas_stream_getc(in)) == EOF
16,c = jas_stream_getc(in)
17,c
18,jas_stream_getc(in)
19,in
20,EOF
21,<empty>
22,return -1;
23,-1
24,1
25,if (c != '#')
26,c != '#'
27,c
28,'#'
29,<empty>
30,return c;
31,c
32,do {
33,			if ((c = jas_stream_getc(in)) == EOF) {
34,				return -1;
35,			}
36,		} while (c != '\n' && c != '\r');
37,<empty>
38,if ((c = jas_stream_getc(in)) == EOF)
39,(c = jas_stream_getc(in)) == EOF
40,c = jas_stream_getc(in)
41,c
42,jas_stream_getc(in)
43,in
44,EOF
45,<empty>
46,return -1;
47,-1
48,1
49,c != '\n' && c != '\r'
50,c != '\n'
51,c
52,'\n'
53,c != '\r'
54,c
55,'\r'
56,RET
57,jas_stream_t *in
58,RET
59,int pnm_getc (jas_stream_t *in)
60,jas_stream_t *in
61,<empty>
62,int c
63,for (;;)
64,<empty>
65,<empty>
66,if ((c = jas_stream_getc(in)) == EOF)
67,(c = jas_stream_getc(in)) == EOF
68,c = jas_stream_getc(in)
69,c
70,jas_stream_getc(in)
71,in
72,EOF
73,<empty>
74,return -1;
75,-1
76,1
77,if (c != '#')
78,c != '#'
79,c
80,'#'
81,<empty>
82,return c;
83,c
84,do {
85,			if ((c = jas_stream_getc(in)) == EOF) {
86,				return -1;
87,			}
88,		} while (c != '\n' && c != '\r');
89,<empty>
90,if ((c = jas_stream_getc(in)) == EOF)
91,(c = jas_stream_getc(in)) == EOF
92,c = jas_stream_getc(in)
93,c
94,jas_stream_getc(in)
95,in
96,EOF
97,<empty>
98,return -1;
99,-1
100,1
101,c != '\n' && c != '\r'
102,c != '\n'
103,c
104,'\n'
105,c != '\r'
106,c
107,'\r'
108,RET
109,jas_stream_t *in
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
static int pnm_getc(jas_stream_t *in) {
int c;
if((c = jas_stream_getc(in)) == EOF)
return -1;
=======================
