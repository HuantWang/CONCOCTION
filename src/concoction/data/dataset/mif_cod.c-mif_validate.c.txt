-----label-----
0
-----code-----
int mif_validate(jas_stream_t *in)
{
	uchar buf[MIF_MAGICLEN];
	uint_fast32_t magic;
	int i;
	int n;

	assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN);

	/* Read the validation data (i.e., the data used for detecting
	  the format). */
	if ((n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0) {
		return -1;
	}

	/* Put the validation data back onto the stream, so that the
	  stream position will not be changed. */
	for (i = n - 1; i >= 0; --i) {
		if (jas_stream_ungetc(in, buf[i]) == EOF) {
			return -1;
		}
	}

	/* Was enough data read? */
	if (n < MIF_MAGICLEN) {
		return -1;
	}

	/* Compute the signature value. */
	magic = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];

	/* Ensure that the signature is correct for this format. */
	if (magic != MIF_MAGIC) {
		return -1;
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
30,31
32,33
33,34
33,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
49,50
49,51
50,51
52,53
52,54
52,55
52,56
53,54
55,56
57,58
59,60
62,63
63,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
71,72
71,73
72,73
75,76
75,77
76,77
79,80
80,81
82,83
83,84
83,85
84,85
84,86
85,86
85,87
85,88
86,87
88,89
90,91
90,92
91,92
93,94
95,96
97,98
98,99
99,100
101,102
101,103
102,103
102,104
103,104
105,106
107,108
108,109
109,110
111,112
112,113
112,114
113,114
115,116
115,117
116,117
116,118
117,118
117,119
118,119
119,120
119,121
120,121
120,122
121,122
125,126
126,127
126,128
127,128
127,129
128,129
132,133
133,134
133,135
134,135
134,136
135,136
139,140
139,141
140,141
143,144
143,145
144,145
144,146
145,146
147,148
149,150
150,151
151,152
153,154
-----nextToken-----
2,4,7,9,10,15,17,20,24,26,29,31,34,36,40,43,45,51,54,56,58,60,61,65,70,73,74,77,78,81,87,89,92,94,96,100,104,106,110,114,122,123,124,129,130,131,136,137,138,141,142,146,148,152,154
-----computeFrom-----
41,42
41,43
47,48
47,49
49,50
49,51
68,69
68,70
71,72
71,73
75,76
75,77
84,85
84,86
102,103
102,104
112,113
112,114
115,116
115,117
116,117
116,118
117,118
117,119
119,120
119,121
126,127
126,128
133,134
133,135
144,145
144,146
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int mif_validate(jas_stream_t *in){	uchar buf[MIF_MAGICLEN];	uint_fast32_t magic;	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN);	/* Read the validation data (i.e., the data used for detecting	  the format). */	if ((n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0) {		return -1;	}	/* Put the validation data back onto the stream, so that the	  stream position will not be changed. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Was enough data read? */	if (n < MIF_MAGICLEN) {		return -1;	}	/* Compute the signature value. */	magic = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];	/* Ensure that the signature is correct for this format. */	if (magic != MIF_MAGIC) {		return -1;	}	return 0;}
int
mif_validate(jas_stream_t *in)
mif_validate
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	uchar buf[MIF_MAGICLEN];	uint_fast32_t magic;	int i;	int n;	assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN);	/* Read the validation data (i.e., the data used for detecting	  the format). */	if ((n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0) {		return -1;	}	/* Put the validation data back onto the stream, so that the	  stream position will not be changed. */	for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}	/* Was enough data read? */	if (n < MIF_MAGICLEN) {		return -1;	}	/* Compute the signature value. */	magic = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];	/* Ensure that the signature is correct for this format. */	if (magic != MIF_MAGIC) {		return -1;	}	return 0;}
uchar buf[MIF_MAGICLEN];
uchar buf[MIF_MAGICLEN];
uchar
uchar
buf[MIF_MAGICLEN]
buf
[MIF_MAGICLEN]
MIF_MAGICLEN
MIF_MAGICLEN
uint_fast32_t magic;
uint_fast32_t magic;
uint_fast32_t
uint_fast32_t
magic
magic
int i;
int i;
int
i
i
int n;
int n;
int
n
n
assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN);
assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN)
assert
assert
JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN
JAS_STREAM_MAXPUTBACK
JAS_STREAM_MAXPUTBACK
MIF_MAGICLEN
MIF_MAGICLEN
if ((n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0) {		return -1;	}
(n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0
(n = jas_stream_read(in, buf, MIF_MAGICLEN))
n = jas_stream_read(in, buf, MIF_MAGICLEN)
n
n
jas_stream_read(in, buf, MIF_MAGICLEN)
jas_stream_read
jas_stream_read
in
in
buf
buf
MIF_MAGICLEN
MIF_MAGICLEN
0
{		return -1;	}
return -1;
-1
1
for (i = n - 1; i >= 0; --i) {		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
i = n - 1;
i = n - 1
i
i
n - 1
n
n
1
i >= 0
i
i
0
--i
i
i
{		if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}	}
if (jas_stream_ungetc(in, buf[i]) == EOF) {			return -1;		}
jas_stream_ungetc(in, buf[i]) == EOF
jas_stream_ungetc(in, buf[i])
jas_stream_ungetc
jas_stream_ungetc
in
in
buf[i]
buf
buf
i
i
EOF
EOF
{			return -1;		}
return -1;
-1
1
if (n < MIF_MAGICLEN) {		return -1;	}
n < MIF_MAGICLEN
n
n
MIF_MAGICLEN
MIF_MAGICLEN
{		return -1;	}
return -1;
-1
1
magic = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
magic = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3]
magic
magic
(buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3]
(buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8)
(buf[0] << 24) | (buf[1] << 16)
(buf[0] << 24)
buf[0] << 24
buf[0]
buf
buf
0
24
(buf[1] << 16)
buf[1] << 16
buf[1]
buf
buf
1
16
(buf[2] << 8)
buf[2] << 8
buf[2]
buf
buf
2
8
buf[3]
buf
buf
3
if (magic != MIF_MAGIC) {		return -1;	}
magic != MIF_MAGIC
magic
magic
MIF_MAGIC
MIF_MAGIC
{		return -1;	}
return -1;
-1
1
return 0;
0
-----joern-----
(238,70,0)
(224,139,0)
(116,279,0)
(7,264,0)
(214,67,0)
(107,142,0)
(29,70,0)
(265,241,0)
(116,60,0)
(18,143,0)
(274,46,0)
(215,93,0)
(65,251,0)
(29,232,0)
(169,99,0)
(138,103,0)
(266,81,0)
(26,206,0)
(12,108,0)
(44,110,0)
(195,150,0)
(213,242,0)
(128,228,0)
(16,104,0)
(132,60,0)
(86,232,0)
(250,206,0)
(143,70,0)
(49,108,0)
(195,255,0)
(185,261,0)
(162,23,0)
(57,206,0)
(254,265,0)
(218,4,0)
(189,150,0)
(15,123,0)
(249,23,0)
(195,277,0)
(222,178,0)
(54,206,0)
(15,178,0)
(126,232,0)
(174,98,0)
(261,185,0)
(84,15,0)
(216,127,0)
(137,206,0)
(254,89,0)
(134,230,0)
(272,45,0)
(47,81,0)
(35,53,0)
(78,228,0)
(194,195,0)
(32,130,0)
(142,78,0)
(30,110,0)
(52,142,0)
(48,206,0)
(177,261,0)
(116,38,0)
(69,130,0)
(124,265,0)
(80,206,0)
(218,56,0)
(141,236,0)
(135,116,0)
(178,122,0)
(56,70,0)
(217,206,0)
(126,50,0)
(130,70,0)
(264,53,0)
(47,104,0)
(139,240,0)
(28,249,0)
(155,118,0)
(175,29,0)
(122,123,0)
(168,180,0)
(153,206,0)
(176,206,0)
(244,64,0)
(202,81,0)
(24,251,0)
(155,228,0)
(71,128,0)
(209,244,0)
(234,99,0)
(205,35,0)
(62,4,0)
(13,161,0)
(156,4,0)
(101,202,0)
(241,265,0)
(259,3,0)
(23,206,0)
(189,255,0)
(53,197,0)
(106,121,0)
(112,236,0)
(6,50,0)
(109,161,0)
(66,92,0)
(190,228,0)
(9,255,0)
(42,139,0)
(95,64,0)
(83,206,0)
(268,280,0)
(75,140,0)
(195,120,0)
(197,53,0)
(111,195,0)
(23,255,0)
(31,228,0)
(108,155,0)
(39,94,0)
(265,254,0)
(27,156,0)
(118,155,0)
(93,215,0)
(125,124,0)
(204,185,0)
(122,178,0)
(166,217,0)
(190,236,0)
(255,190,0)
(136,134,0)
(91,118,0)
(264,110,0)
(181,248,0)
(85,71,0)
(269,143,0)
(25,38,0)
(189,111,0)
(3,70,0)
(189,71,0)
(68,93,0)
(210,208,0)
(180,43,0)
(256,4,0)
(245,176,0)
(143,64,0)
(78,119,0)
(139,130,0)
(64,143,0)
(230,228,0)
(2,126,0)
(23,277,0)
(117,93,0)
(149,134,0)
(165,264,0)
(21,139,0)
(116,176,0)
(262,139,0)
(156,111,0)
(103,240,0)
(110,44,0)
(99,226,0)
(187,119,0)
(221,139,0)
(118,70,0)
(61,83,0)
(100,33,0)
(195,108,0)
(238,139,0)
(93,46,0)
(37,215,0)
(167,265,0)
(139,60,0)
(236,70,0)
(113,29,0)
(189,108,0)
(264,237,0)
(151,53,0)
(121,240,0)
(195,71,0)
(110,30,0)
(273,238,0)
(76,265,0)
(191,206,0)
(232,29,0)
(162,189,0)
(226,228,0)
(99,70,0)
(133,244,0)
(200,197,0)
(124,103,0)
(97,206,0)
(60,93,0)
(23,150,0)
(195,94,0)
(0,206,0)
(132,228,0)
(236,190,0)
(96,255,0)
(192,76,0)
(70,185,0)
(23,94,0)
(230,134,0)
(82,228,0)
(146,206,0)
(223,94,0)
(46,93,0)
(23,111,0)
(248,228,0)
(171,47,0)
(134,70,0)
(93,60,0)
(201,60,0)
(242,199,0)
(65,5,0)
(103,124,0)
(196,36,0)
(258,70,0)
(260,267,0)
(193,265,0)
(159,92,0)
(220,206,0)
(212,150,0)
(198,206,0)
(229,228,0)
(207,264,0)
(161,228,0)
(189,206,0)
(55,228,0)
(252,217,0)
(225,206,0)
(64,110,0)
(277,229,0)
(178,15,0)
(152,83,0)
(73,264,0)
(251,110,0)
(60,201,0)
(247,82,0)
(167,237,0)
(144,176,0)
(219,71,0)
(41,118,0)
(50,280,0)
(189,92,0)
(20,167,0)
(90,61,0)
(226,99,0)
(184,3,0)
(46,70,0)
(59,218,0)
(111,156,0)
(34,240,0)
(61,163,0)
(23,92,0)
(102,256,0)
(130,139,0)
(185,240,0)
(276,261,0)
(227,38,0)
(150,248,0)
(154,228,0)
(185,70,0)
(246,228,0)
(195,50,0)
(72,104,0)
(114,56,0)
(77,81,0)
(203,64,0)
(61,265,0)
(79,56,0)
(104,70,0)
(94,230,0)
(64,60,0)
(65,110,0)
(189,142,0)
(275,180,0)
(23,108,0)
(239,60,0)
(145,4,0)
(189,277,0)
(253,228,0)
(157,206,0)
(51,228,0)
(63,110,0)
(76,206,0)
(17,14,0)
(156,60,0)
(173,156,0)
(211,156,0)
(1,229,0)
(261,265,0)
(74,167,0)
(233,206,0)
(195,111,0)
(119,78,0)
(11,215,0)
(183,277,0)
(215,70,0)
(23,71,0)
(244,70,0)
(87,46,0)
(36,160,0)
(43,180,0)
(139,238,0)
(8,119,0)
(119,70,0)
(172,64,0)
(189,94,0)
(131,270,0)
(170,254,0)
(36,110,0)
(195,142,0)
(158,83,0)
(38,228,0)
(278,228,0)
(235,124,0)
(53,35,0)
(88,277,0)
(5,65,0)
(195,92,0)
(271,214,0)
(70,45,0)
(56,218,0)
(179,240,0)
(232,126,0)
(40,128,0)
(129,238,0)
(186,206,0)
(231,64,0)
(104,47,0)
(23,142,0)
(148,199,0)
(251,65,0)
(36,217,0)
(263,64,0)
(257,115,0)
(164,65,0)
(64,244,0)
(82,110,0)
(92,226,0)
(50,126,0)
(139,89,0)
(180,70,0)
(105,150,0)
(58,132,0)
(10,122,0)
(156,81,0)
(19,189,0)
(243,5,0)
(182,206,0)
(230,134,1)
(218,56,1)
(62,145,1)
(27,47,1)
(35,205,1)
(87,215,1)
(169,92,1)
(258,103,1)
(240,34,1)
(21,238,1)
(216,64,1)
(113,175,1)
(185,261,1)
(36,110,1)
(135,188,1)
(238,70,1)
(215,11,1)
(64,143,1)
(247,264,1)
(99,70,1)
(273,129,1)
(64,244,1)
(23,150,1)
(141,255,1)
(189,255,1)
(20,74,1)
(269,244,1)
(75,201,1)
(46,274,1)
(116,38,1)
(106,161,1)
(85,219,1)
(144,245,1)
(239,65,1)
(254,170,1)
(241,265,1)
(251,24,1)
(23,142,1)
(139,130,1)
(167,237,1)
(30,63,1)
(249,28,1)
(42,221,1)
(147,17,1)
(59,256,1)
(129,130,1)
(189,19,1)
(256,4,1)
(205,53,1)
(61,90,1)
(204,261,1)
(34,179,1)
(92,159,1)
(74,241,1)
(232,86,1)
(102,47,1)
(110,30,1)
(66,78,1)
(155,118,1)
(145,50,1)
(39,223,1)
(121,106,1)
(189,71,1)
(128,40,1)
(264,53,1)
(122,10,1)
(259,139,1)
(23,92,1)
(122,178,1)
(119,70,1)
(82,110,1)
(187,8,1)
(177,258,1)
(147,75,1)
(195,94,1)
(195,150,1)
(252,166,1)
(99,234,1)
(229,1,1)
(234,169,1)
(207,7,1)
(242,213,1)
(95,3,1)
(119,187,1)
(105,212,1)
(36,217,1)
(219,155,1)
(195,50,1)
(23,71,1)
(118,41,1)
(78,119,1)
(64,110,1)
(147,216,1)
(213,35,1)
(53,197,1)
(24,164,1)
(77,266,1)
(122,123,1)
(38,227,1)
(194,111,1)
(61,83,1)
(188,36,1)
(180,70,1)
(254,89,1)
(138,240,1)
(139,238,1)
(148,242,1)
(52,230,1)
(88,183,1)
(147,210,1)
(126,232,1)
(69,262,1)
(28,188,1)
(195,111,1)
(56,70,1)
(156,60,1)
(197,200,1)
(189,92,1)
(195,92,1)
(150,105,1)
(82,247,1)
(131,264,1)
(116,135,1)
(56,114,1)
(222,15,1)
(130,70,1)
(81,77,1)
(96,9,1)
(195,108,1)
(104,70,1)
(167,265,1)
(43,180,1)
(195,71,1)
(226,99,1)
(159,66,1)
(15,123,1)
(264,110,1)
(189,111,1)
(116,176,1)
(209,133,1)
(29,70,1)
(58,64,1)
(161,13,1)
(132,58,1)
(71,85,1)
(40,71,1)
(235,138,1)
(103,240,1)
(202,101,1)
(257,139,1)
(256,102,1)
(103,124,1)
(109,82,1)
(188,22,1)
(136,149,1)
(264,73,1)
(28,116,1)
(214,271,1)
(23,277,1)
(125,235,1)
(189,277,1)
(59,4,1)
(215,70,1)
(5,243,1)
(210,167,1)
(23,249,1)
(104,16,1)
(271,122,1)
(4,62,1)
(244,70,1)
(11,37,1)
(25,132,1)
(276,177,1)
(171,81,1)
(94,39,1)
(162,189,1)
(23,94,1)
(114,79,1)
(203,172,1)
(151,214,1)
(73,165,1)
(108,49,1)
(106,43,1)
(200,151,1)
(244,209,1)
(139,60,1)
(236,112,1)
(76,265,1)
(156,4,1)
(19,76,1)
(172,95,1)
(162,23,1)
(238,273,1)
(60,93,1)
(65,251,1)
(91,108,1)
(22,147,1)
(189,142,1)
(152,158,1)
(236,70,1)
(101,195,1)
(147,131,1)
(130,32,1)
(134,70,1)
(189,108,1)
(17,65,1)
(36,196,1)
(261,265,1)
(116,60,1)
(44,110,1)
(170,193,1)
(189,94,1)
(263,203,1)
(164,128,1)
(262,224,1)
(132,60,1)
(15,84,1)
(248,181,1)
(29,113,1)
(192,103,1)
(93,215,1)
(185,204,1)
(84,10,1)
(277,88,1)
(180,168,1)
(195,255,1)
(275,70,1)
(212,229,1)
(70,185,1)
(90,147,1)
(76,192,1)
(10,176,1)
(178,222,1)
(22,61,1)
(8,142,1)
(232,29,1)
(193,35,1)
(221,201,1)
(223,190,1)
(260,44,1)
(183,44,1)
(61,265,1)
(181,150,1)
(149,94,1)
(147,174,1)
(79,59,1)
(176,144,1)
(118,70,1)
(151,122,1)
(64,231,1)
(264,237,1)
(196,22,1)
(175,2,1)
(111,156,1)
(231,143,1)
(195,277,1)
(143,70,1)
(139,21,1)
(166,83,1)
(173,27,1)
(63,43,1)
(3,70,1)
(86,29,1)
(165,207,1)
(202,81,1)
(117,68,1)
(185,240,1)
(184,259,1)
(274,87,1)
(65,110,1)
(65,5,1)
(95,218,1)
(23,255,1)
(142,107,1)
(143,18,1)
(3,184,1)
(224,42,1)
(121,240,1)
(138,121,1)
(245,217,1)
(251,110,1)
(168,275,1)
(261,276,1)
(147,148,1)
(124,125,1)
(47,81,1)
(23,108,1)
(227,25,1)
(124,265,1)
(41,91,1)
(6,3,1)
(134,136,1)
(174,241,1)
(201,60,1)
(13,109,1)
(171,202,1)
(64,60,1)
(93,46,1)
(217,252,1)
(211,173,1)
(167,20,1)
(218,4,1)
(133,263,1)
(2,6,1)
(50,126,1)
(83,152,1)
(147,260,1)
(266,218,1)
(147,257,1)
(68,239,1)
(35,53,1)
(139,89,1)
(16,72,1)
(18,269,1)
(7,38,1)
(72,171,1)
(265,254,1)
(46,70,1)
(12,226,1)
(32,69,1)
(23,111,1)
(9,248,1)
(37,117,1)
(195,142,1)
(156,81,1)
(255,96,1)
(1,277,1)
(139,240,1)
(49,12,1)
(47,104,1)
(243,251,1)
(112,141,1)
(107,52,1)
(178,15,1)
(156,211,1)
(190,236,1)
(195,194,1)
(189,150,1)
(179,167,1)
(168,103,2)
(162,189,2)
(189,108,2)
(30,43,2)
(28,201,2)
(110,43,2)
(23,277,2)
(147,241,2)
(64,143,2)
(42,201,2)
(124,167,2)
(189,71,2)
(188,201,2)
(240,167,2)
(138,167,2)
(139,130,2)
(114,218,2)
(156,60,2)
(104,70,2)
(20,241,2)
(222,10,2)
(195,92,2)
(101,47,2)
(28,65,2)
(139,238,2)
(78,119,2)
(71,44,2)
(147,65,2)
(75,201,2)
(145,3,2)
(230,134,2)
(261,103,2)
(118,70,2)
(258,103,2)
(147,64,2)
(25,64,2)
(36,22,2)
(172,139,2)
(147,264,2)
(126,232,2)
(256,4,2)
(94,44,2)
(23,142,2)
(187,44,2)
(174,241,2)
(138,264,2)
(99,70,2)
(106,264,2)
(249,65,2)
(167,265,2)
(58,64,2)
(190,44,2)
(118,44,2)
(47,104,2)
(108,44,2)
(143,70,2)
(215,65,2)
(177,103,2)
(119,44,2)
(264,237,2)
(109,264,2)
(251,110,2)
(22,167,2)
(156,4,2)
(132,60,2)
(274,65,2)
(218,4,2)
(103,167,2)
(23,108,2)
(53,197,2)
(36,110,2)
(4,3,2)
(189,150,2)
(15,10,2)
(264,64,2)
(180,70,2)
(3,139,2)
(82,110,2)
(112,44,2)
(189,277,2)
(70,103,2)
(8,44,2)
(229,44,2)
(43,103,2)
(193,35,2)
(117,65,2)
(142,44,2)
(236,44,2)
(90,147,2)
(64,110,2)
(188,35,2)
(249,167,2)
(79,218,2)
(147,167,2)
(273,201,2)
(114,3,2)
(61,265,2)
(22,64,2)
(102,218,2)
(85,44,2)
(243,44,2)
(23,65,2)
(113,3,2)
(50,3,2)
(29,70,2)
(215,70,2)
(189,103,2)
(188,64,2)
(218,56,2)
(238,70,2)
(124,43,2)
(196,22,2)
(185,240,2)
(105,44,2)
(125,167,2)
(178,15,2)
(1,44,2)
(87,65,2)
(188,65,2)
(23,167,2)
(47,218,2)
(76,265,2)
(60,93,2)
(23,44,2)
(23,92,2)
(189,255,2)
(93,215,2)
(261,265,2)
(185,261,2)
(231,139,2)
(241,35,2)
(201,65,2)
(12,44,2)
(207,64,2)
(22,201,2)
(277,44,2)
(64,139,2)
(209,139,2)
(232,3,2)
(136,44,2)
(201,60,2)
(65,5,2)
(125,264,2)
(195,277,2)
(269,139,2)
(226,99,2)
(28,264,2)
(125,43,2)
(29,3,2)
(13,264,2)
(88,44,2)
(249,64,2)
(249,264,2)
(139,89,2)
(2,3,2)
(23,241,2)
(155,44,2)
(46,65,2)
(68,65,2)
(189,94,2)
(275,103,2)
(56,70,2)
(236,70,2)
(271,122,2)
(23,150,2)
(15,123,2)
(37,65,2)
(72,47,2)
(254,89,2)
(244,70,2)
(111,156,2)
(165,64,2)
(74,241,2)
(204,103,2)
(18,139,2)
(150,44,2)
(22,241,2)
(195,255,2)
(103,264,2)
(44,43,2)
(92,44,2)
(28,139,2)
(116,176,2)
(99,44,2)
(265,35,2)
(179,167,2)
(195,108,2)
(122,123,2)
(93,65,2)
(221,201,2)
(224,201,2)
(147,139,2)
(171,47,2)
(188,241,2)
(65,251,2)
(17,65,2)
(28,64,2)
(189,111,2)
(128,44,2)
(35,53,2)
(139,240,2)
(86,3,2)
(34,167,2)
(116,188,2)
(56,3,2)
(5,44,2)
(195,150,2)
(121,264,2)
(262,201,2)
(188,264,2)
(23,201,2)
(139,60,2)
(184,139,2)
(132,64,2)
(235,167,2)
(122,178,2)
(23,94,2)
(189,142,2)
(69,201,2)
(251,44,2)
(56,218,2)
(185,103,2)
(219,44,2)
(3,70,2)
(96,44,2)
(239,65,2)
(249,201,2)
(249,35,2)
(149,44,2)
(32,201,2)
(212,44,2)
(64,244,2)
(27,47,2)
(167,237,2)
(103,240,2)
(223,44,2)
(226,44,2)
(60,65,2)
(107,44,2)
(195,142,2)
(180,103,2)
(49,44,2)
(247,264,2)
(28,44,2)
(62,3,2)
(65,44,2)
(266,218,2)
(234,44,2)
(195,50,2)
(194,47,2)
(260,44,2)
(254,35,2)
(129,201,2)
(95,139,2)
(22,264,2)
(16,218,2)
(216,64,2)
(161,264,2)
(139,201,2)
(134,44,2)
(43,180,2)
(235,264,2)
(24,44,2)
(19,103,2)
(181,44,2)
(203,139,2)
(91,44,2)
(183,44,2)
(155,118,2)
(255,44,2)
(213,35,2)
(257,139,2)
(47,47,2)
(227,64,2)
(249,241,2)
(244,139,2)
(6,3,2)
(72,218,2)
(70,185,2)
(82,264,2)
(211,47,2)
(202,81,2)
(249,139,2)
(116,60,2)
(23,111,2)
(141,44,2)
(111,47,2)
(235,43,2)
(241,265,2)
(134,70,2)
(65,110,2)
(41,44,2)
(130,70,2)
(63,43,2)
(64,60,2)
(131,264,2)
(46,70,2)
(22,44,2)
(276,103,2)
(189,92,2)
(133,139,2)
(11,65,2)
(78,44,2)
(21,201,2)
(171,218,2)
(61,147,2)
(106,43,2)
(249,44,2)
(156,47,2)
(22,65,2)
(104,47,2)
(210,167,2)
(23,139,2)
(147,201,2)
(124,265,2)
(135,188,2)
(61,83,2)
(23,35,2)
(173,47,2)
(167,241,2)
(188,167,2)
(103,124,2)
(138,43,2)
(188,139,2)
(162,23,2)
(202,47,2)
(264,110,2)
(195,111,2)
(143,139,2)
(124,264,2)
(59,218,2)
(175,3,2)
(36,217,2)
(214,122,2)
(119,70,2)
(93,46,2)
(170,35,2)
(104,218,2)
(195,94,2)
(50,126,2)
(126,3,2)
(84,10,2)
(7,64,2)
(28,35,2)
(39,44,2)
(195,71,2)
(44,110,2)
(130,201,2)
(121,240,2)
(148,35,2)
(28,167,2)
(40,44,2)
(116,38,2)
(147,35,2)
(264,53,2)
(159,44,2)
(192,103,2)
(52,44,2)
(188,44,2)
(76,103,2)
(110,30,2)
(59,3,2)
(248,44,2)
(169,44,2)
(22,139,2)
(218,218,2)
(147,44,2)
(81,218,2)
(218,3,2)
(22,35,2)
(66,44,2)
(195,47,2)
(47,81,2)
(256,218,2)
(242,35,2)
(259,139,2)
(23,255,2)
(16,47,2)
(164,44,2)
(73,64,2)
(230,44,2)
(238,201,2)
(23,71,2)
(79,3,2)
(23,264,2)
(121,43,2)
(156,81,2)
(263,139,2)
(28,241,2)
(77,218,2)
(103,43,2)
(38,64,2)
(265,254,2)
(190,236,2)
(23,64,2)
(178,10,2)
(232,29,2)
(9,44,2)
-----------------------------------
(0,if (tmpimage)
(1,0)
(2,1)
(3,cmpt->sgnd)
(4,y = 0)
(5,&cmptparm)
(6,bias)
(7,tmpimage)
(8,cmpt)
(9,cmptparm)
(10,optstr)
(11,width)
(12,cmptparm)
(13,0)
(14,)
(15,*optstr)
(16,width)
(17,goto error;)
(18,height)
(19,0)
(20,out)
(21,data)
(22,tmpimage)
(23,return -1;)
(24,tmpimage)
(25,data)
(26,x)
(27,data)
(28,1)
(29,cmpt->prec)
(30,jas_image_create0()
(31,if (!(tmpimage = jas_image_create0()
(32,width)
(33,)
(34,0)
(35,(fmt = jas_image_strtofmt("pnm")
(36,jas_image_destroy(tmpimage)
(37,cmpt)
(38,data = 0)
(39,vstep)
(40,false)
(41,prec)
(42,cmptno)
(43,!cmpt->data)
(44,!(tmpimage = jas_image_create0()
(45,)
(46,cmpt->height)
(47,x < cmpt->width)
(48,if (optstr && *optstr != \'\\0\')
(49,prec)
(50,bias = 1 << (cmpt->prec - 1)
(51,if (jas_image_addcmpt(tmpimage, jas_image_numcmpts(tmpimage)
(52,cmptparm)
(53,fmt = jas_image_strtofmt("pnm")
(54,fmt)
(55,if (!(data = jas_seq2d_create(0, 0, cmpt->width, cmpt->height)
(56,cmpt->height)
(57,bias)
(58,data)
(59,y)
(60,data = jas_seq2d_create(0, 0, cmpt->width, cmpt->height)
(61,mif_hdr_destroy(hdr)
(62,0)
(63,tmpimage)
(64,jas_image_writecmpt(tmpimage, 0, 0, 0, cmpt->width, cmpt->height,\\n\\t\\t\\t  data)
(65,jas_image_addcmpt(tmpimage, jas_image_numcmpts(tmpimage)
(66,cmptparm)
(67,)
(68,0)
(69,cmpt)
(70,cmpt = hdr->cmpts[cmptno])
(71,cmptparm.sgnd)
(72,cmpt)
(73,0)
(74,hdr)
(75,goto error;)
(76,mif_hdr_destroy(hdr)
(77,0)
(78,cmptparm.width = cmpt->width)
(79,cmpt)
(80,if (data)
(81,x = 0)
(82,jas_image_destroy(tmpimage)
(83,hdr = 0)
(84,optstr)
(85,sgnd)
(86,1)
(87,cmpt)
(88,tlx)
(89,jas_image_t *image)
(90,hdr)
(91,cmpt)
(92,cmptparm.height)
(93,jas_seq2d_create(0, 0, cmpt->width, cmpt->height)
(94,cmptparm.vstep)
(95,tmpimage)
(96,hstep)
(97,if ((fmt = jas_image_strtofmt("pnm")
(98,)
(99,cmpt->height)
(100,for (x = 0; x < cmpt->width; ++x)
(101,x)
(102,y)
(103,cmptno < hdr->numcmpts)
(104,cmpt->width)
(105,tly)
(106,cmptno)
(107,width)
(108,cmptparm.prec)
(109,tmpimage)
(110,tmpimage = jas_image_create0()
(111,*jas_seq2d_getref(data, x, y)
(112,sampperx)
(113,prec)
(114,height)
(115,)
(116,jas_seq2d_destroy(data)
(117,0)
(118,cmpt->prec)
(119,cmpt->width)
(120,)
(121,++cmptno)
(122,optstr && *optstr != \'\\0\')
(123,char *optstr)
(124,hdr->numcmpts)
(125,numcmpts)
(126,1 << (cmpt->prec - 1)
(127,)
(128,cmptparm.sgnd = false)
(129,cmpt)
(130,cmpt->width)
(131,goto error;)
(132,jas_seq2d_destroy(data)
(133,cmpt)
(134,cmpt->samppery)
(135,data)
(136,samppery)
(137,data)
(138,cmptno)
(139,jas_image_readcmpt(image, cmptno, 0, 0, cmpt->width, cmpt->height,\\n\\t\\t\\t  data)
(140,)
(141,cmpt)
(142,cmptparm.width)
(143,cmpt->height)
(144,0)
(145,y)
(146,error:)
(147,hdr)
(148,goto error;)
(149,cmpt)
(150,cmptparm.tly)
(151,fmt)
(152,0)
(153,if (!(hdr = mif_makehdrfromimage(image)
(154,if (jas_image_encode(tmpimage, out, fmt, 0)
(155,cmptparm.prec = cmpt->prec)
(156,jas_seq2d_getref(data, x, y)
(157,if (mif_hdr_put(hdr, out)
(158,hdr)
(159,height)
(160,)
(161,tmpimage = 0)
(162,RET)
(163,)
(164,tmpimage)
(165,fmt)
(166,tmpimage)
(167,mif_hdr_put(hdr, out)
(168,data)
(169,cmpt)
(170,image)
(171,x)
(172,0)
(173,x)
(174,goto error;)
(175,cmpt)
(176,data = 0)
(177,hdr)
(178,*optstr != \'\\0\')
(179,cmptno)
(180,cmpt->data)
(181,0)
(182,for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno)
(183,cmptparm)
(184,sgnd)
(185,hdr->cmpts[cmptno])
(186,cmptparm)
(187,width)
(188,data)
(189,return 0;)
(190,cmptparm.hstep = cmpt->sampperx)
(191,tmpimage)
(192,hdr)
(193,hdr)
(194,bias)
(195,*jas_seq2d_getref(data, x, y)
(196,tmpimage)
(197,jas_image_strtofmt("pnm")
(198,hdr)
(199,)
(200,"pnm")
(201,!(data = jas_seq2d_create(0, 0, cmpt->width, cmpt->height)
(202,++x)
(203,0)
(204,cmptno)
(205,0)
(206,)
(207,out)
(208,)
(209,width)
(210,goto error;)
(211,y)
(212,cmptparm)
(213,"error: PNM support required\\n")
(214,jas_eprintf("warning: ignoring unsupported options\\n")
(215,cmpt->width)
(216,goto error;)
(217,tmpimage = 0)
(218,y < cmpt->height)
(219,cmptparm)
(220,if (hdr)
(221,image)
(222,\'\\0\')
(223,cmptparm)
(224,0)
(225,y)
(226,cmptparm.height = cmpt->height)
(227,0)
(228,)
(229,cmptparm.tlx = 0)
(230,cmptparm.vstep = cmpt->samppery)
(231,data)
(232,cmpt->prec - 1)
(233,cmpt)
(234,height)
(235,hdr)
(236,cmpt->sampperx)
(237,jas_stream_t *out)
(238,cmpt->height)
(239,data)
(240,cmptno = 0)
(241,!(hdr = mif_makehdrfromimage(image)
(242,jas_eprintf("error: PNM support required\\n")
(243,cmptparm)
(244,cmpt->width)
(245,data)
(246,if (jas_image_readcmpt(image, cmptno, 0, 0, cmpt->width, cmpt->height,\\n\\t\\t\\t  data)
(247,tmpimage)
(248,cmptparm.tly = 0)
(249,-1)
(250,cmptno)
(251,jas_image_numcmpts(tmpimage)
(252,0)
(253,if (jas_image_writecmpt(tmpimage, 0, 0, 0, cmpt->width, cmpt->height,\\n\\t\\t\\t  data)
(254,mif_makehdrfromimage(image)
(255,cmptparm.hstep)
(256,++y)
(257,goto error;)
(258,cmpt)
(259,cmpt)
(260,goto error;)
(261,hdr->cmpts)
(262,0)
(263,0)
(264,jas_image_encode(tmpimage, out, fmt, 0)
(265,hdr = mif_makehdrfromimage(image)
(266,x)
(267,)
(268,for (y = 0; y < cmpt->height; ++y)
(269,cmpt)
(270,)
(271,"warning: ignoring unsupported options\\n")
(272,if (!cmpt->data)
(273,height)
(274,height)
(275,cmpt)
(276,cmpts)
(277,cmptparm.tlx)
(278,if (cmpt->sgnd)
(279,)
(280,)
-----cfg-----
(64,88)
(66,64)
(67,84)
(68,80)
(69,75)
(70,69)
(7,15)
(74,68)
(75,74)
(14,22)
(15,14)
(79,67)
(80,79)
(19,29)
(19,35)
(20,19)
(84,66)
(22,20)
(88,93)
(88,95)
(28,97)
(92,97)
(29,28)
(93,92)
(95,97)
(33,38)
(35,33)
(38,48)
(38,57)
(41,38)
(45,54)
(45,41)
(46,45)
(48,46)
(53,97)
(54,53)
(57,62)
(57,70)
(61,97)
(62,61)
-----path-----
7,15,14,22,20,19,29,28,97
7,15,14,22,20,19,35,33,38,48,46,45,54,53,97
7,15,14,22,20,19,35,33,38,48,46,45,41,38,57,62,61,97
7,15,14,22,20,19,35,33,38,48,46,45,41,38,57,70,69,75,74,68,80,79,67,84,66,64,88,93,92,97
7,15,14,22,20,19,35,33,38,48,46,45,41,38,57,70,69,75,74,68,80,79,67,84,66,64,88,95,97
7,15,14,22,20,19,35,33,38,57,62,61,97
7,15,14,22,20,19,35,33,38,57,70,69,75,74,68,80,79,67,84,66,64,88,93,92,97
7,15,14,22,20,19,35,33,38,57,70,69,75,74,68,80,79,67,84,66,64,88,95,97
-----cfgNode-----
5,<global>
6,<empty>
7,int mif_validate (jas_stream_t *in)
8,jas_stream_t *in
9,<empty>
10,uchar[] buf
11,uint_fast32_t magic
12,int i
13,int n
14,assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN)
15,JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN
16,JAS_STREAM_MAXPUTBACK
17,MIF_MAGICLEN
18,if ((n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0)
19,(n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0
20,n = jas_stream_read(in, buf, MIF_MAGICLEN)
21,n
22,jas_stream_read(in, buf, MIF_MAGICLEN)
23,in
24,buf
25,MIF_MAGICLEN
26,0
27,<empty>
28,return -1;
29,-1
30,1
31,for (i = n - 1;i >= 0;--i)
32,<empty>
33,i = n - 1
34,i
35,n - 1
36,n
37,1
38,i >= 0
39,i
40,0
41,--i
42,i
43,<empty>
44,if (jas_stream_ungetc(in, buf[i]) == EOF)
45,jas_stream_ungetc(in, buf[i]) == EOF
46,jas_stream_ungetc(in, buf[i])
47,in
48,buf[i]
49,buf
50,i
51,EOF
52,<empty>
53,return -1;
54,-1
55,1
56,if (n < MIF_MAGICLEN)
57,n < MIF_MAGICLEN
58,n
59,MIF_MAGICLEN
60,<empty>
61,return -1;
62,-1
63,1
64,magic = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3]
65,magic
66,(buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3]
67,(buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8)
68,(buf[0] << 24) | (buf[1] << 16)
69,buf[0] << 24
70,buf[0]
71,buf
72,0
73,24
74,buf[1] << 16
75,buf[1]
76,buf
77,1
78,16
79,buf[2] << 8
80,buf[2]
81,buf
82,2
83,8
84,buf[3]
85,buf
86,3
87,if (magic != MIF_MAGIC)
88,magic != MIF_MAGIC
89,magic
90,MIF_MAGIC
91,<empty>
92,return -1;
93,-1
94,1
95,return 0;
96,0
97,RET
98,jas_stream_t *in
99,RET
100,int mif_validate (jas_stream_t *in)
101,jas_stream_t *in
102,<empty>
103,uchar[] buf
104,uint_fast32_t magic
105,int i
106,int n
107,assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN)
108,JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN
109,JAS_STREAM_MAXPUTBACK
110,MIF_MAGICLEN
111,if ((n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0)
112,(n = jas_stream_read(in, buf, MIF_MAGICLEN)) < 0
113,n = jas_stream_read(in, buf, MIF_MAGICLEN)
114,n
115,jas_stream_read(in, buf, MIF_MAGICLEN)
116,in
117,buf
118,MIF_MAGICLEN
119,0
120,<empty>
121,return -1;
122,-1
123,1
124,for (i = n - 1;i >= 0;--i)
125,<empty>
126,i = n - 1
127,i
128,n - 1
129,n
130,1
131,i >= 0
132,i
133,0
134,--i
135,i
136,<empty>
137,if (jas_stream_ungetc(in, buf[i]) == EOF)
138,jas_stream_ungetc(in, buf[i]) == EOF
139,jas_stream_ungetc(in, buf[i])
140,in
141,buf[i]
142,buf
143,i
144,EOF
145,<empty>
146,return -1;
147,-1
148,1
149,if (n < MIF_MAGICLEN)
150,n < MIF_MAGICLEN
151,n
152,MIF_MAGICLEN
153,<empty>
154,return -1;
155,-1
156,1
157,magic = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3]
158,magic
159,(buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3]
160,(buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8)
161,(buf[0] << 24) | (buf[1] << 16)
162,buf[0] << 24
163,buf[0]
164,buf
165,0
166,24
167,buf[1] << 16
168,buf[1]
169,buf
170,1
171,16
172,buf[2] << 8
173,buf[2]
174,buf
175,2
176,8
177,buf[3]
178,buf
179,3
180,if (magic != MIF_MAGIC)
181,magic != MIF_MAGIC
182,magic
183,MIF_MAGIC
184,<empty>
185,return -1;
186,-1
187,1
188,return 0;
189,0
190,RET
191,jas_stream_t *in
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
int mif_validate(jas_stream_t *in) {
uchar buf[MIF_MAGICLEN];
uint_fast32_t magic;
int i;
int n;
assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN);
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
for(i = n - 1;i >= 0;--i)
magic = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
if(magic != MIF_MAGIC)
return -1;
=======================
