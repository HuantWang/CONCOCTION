-----label-----
0
-----code-----
uint_fast32_t jas_image_rawsize(jas_image_t *image)
{
	uint_fast32_t rawsize;
	int cmptno;
	jas_image_cmpt_t *cmpt;

	rawsize = 0;
	for (cmptno = 0; cmptno < image->numcmpts_; ++cmptno) {
		cmpt = image->cmpts_[cmptno];
		rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ +
		  7) / 8;
	}
	return rawsize;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
7,8
9,10
9,11
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
22,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
33,34
36,37
36,38
36,39
36,40
37,38
38,39
38,40
39,40
42,43
42,44
43,44
45,46
45,47
46,47
49,50
50,51
52,53
52,54
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
59,60
62,63
64,65
65,66
65,67
66,67
68,69
68,70
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
73,75
74,75
77,78
77,79
78,79
81,82
81,83
82,83
87,88
88,89
-----nextToken-----
3,5,8,10,11,16,18,21,23,27,29,30,34,35,40,41,44,47,48,51,56,60,61,63,67,75,76,79,80,83,84,85,86,89
-----computeFrom-----
32,33
32,34
38,39
38,40
42,43
42,44
54,55
54,56
65,66
65,67
68,69
68,70
70,71
70,72
71,72
71,73
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
uint_fast32_t jas_image_rawsize(jas_image_t *image){	uint_fast32_t rawsize;	int cmptno;	jas_image_cmpt_t *cmpt;	rawsize = 0;	for (cmptno = 0; cmptno < image->numcmpts_; ++cmptno) {		cmpt = image->cmpts_[cmptno];		rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ +		  7) / 8;	}	return rawsize;}
uint_fast32_t
uint_fast32_t
jas_image_rawsize(jas_image_t *image)
jas_image_rawsize
jas_image_t *image
jas_image_t
jas_image_t
*image
*
image
{	uint_fast32_t rawsize;	int cmptno;	jas_image_cmpt_t *cmpt;	rawsize = 0;	for (cmptno = 0; cmptno < image->numcmpts_; ++cmptno) {		cmpt = image->cmpts_[cmptno];		rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ +		  7) / 8;	}	return rawsize;}
uint_fast32_t rawsize;
uint_fast32_t rawsize;
uint_fast32_t
uint_fast32_t
rawsize
rawsize
int cmptno;
int cmptno;
int
cmptno
cmptno
jas_image_cmpt_t *cmpt;
jas_image_cmpt_t *cmpt;
jas_image_cmpt_t
jas_image_cmpt_t
*cmpt
*
cmpt
rawsize = 0;
rawsize = 0
rawsize
rawsize
0
for (cmptno = 0; cmptno < image->numcmpts_; ++cmptno) {		cmpt = image->cmpts_[cmptno];		rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ +		  7) / 8;	}
cmptno = 0;
cmptno = 0
cmptno
cmptno
0
cmptno < image->numcmpts_
cmptno
cmptno
image->numcmpts_
image
image
numcmpts_
++cmptno
cmptno
cmptno
{		cmpt = image->cmpts_[cmptno];		rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ +		  7) / 8;	}
cmpt = image->cmpts_[cmptno];
cmpt = image->cmpts_[cmptno]
cmpt
cmpt
image->cmpts_[cmptno]
image->cmpts_
image
image
cmpts_
cmptno
cmptno
rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ +		  7) / 8;
rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ +		  7) / 8
rawsize
rawsize
(cmpt->width_ * cmpt->height_ * cmpt->prec_ +		  7) / 8
(cmpt->width_ * cmpt->height_ * cmpt->prec_ +		  7)
cmpt->width_ * cmpt->height_ * cmpt->prec_ +		  7
cmpt->width_ * cmpt->height_ * cmpt->prec_
cmpt->width_ * cmpt->height_
cmpt->width_
cmpt
cmpt
width_
cmpt->height_
cmpt
cmpt
height_
cmpt->prec_
cmpt
cmpt
prec_
7
8
return rawsize;
rawsize
rawsize
-----joern-----
(95,130,0)
(100,82,0)
(25,67,0)
(32,129,0)
(115,80,0)
(107,7,0)
(1,39,0)
(72,65,0)
(129,67,0)
(52,62,0)
(68,39,0)
(62,108,0)
(6,86,0)
(74,127,0)
(34,106,0)
(50,45,0)
(9,7,0)
(62,106,0)
(51,111,0)
(4,124,0)
(73,130,0)
(10,85,0)
(97,113,0)
(107,33,0)
(58,82,0)
(45,14,0)
(4,85,0)
(13,16,0)
(100,85,0)
(4,118,0)
(4,127,0)
(127,82,0)
(117,14,0)
(60,81,0)
(90,25,0)
(31,36,0)
(11,95,0)
(3,80,0)
(0,46,0)
(85,87,0)
(65,67,0)
(26,111,0)
(121,62,0)
(128,25,0)
(66,16,0)
(28,108,0)
(92,100,0)
(125,106,0)
(7,130,0)
(78,25,0)
(7,27,0)
(77,122,0)
(5,67,0)
(46,108,0)
(104,13,0)
(8,127,0)
(13,27,0)
(36,124,0)
(37,4,0)
(57,86,0)
(111,51,0)
(45,61,0)
(111,130,0)
(13,130,0)
(75,77,0)
(13,129,0)
(81,122,0)
(43,45,0)
(21,124,0)
(62,124,0)
(14,45,0)
(65,87,0)
(42,21,0)
(95,87,0)
(29,61,0)
(93,4,0)
(16,13,0)
(98,7,0)
(129,13,0)
(56,107,0)
(67,65,0)
(116,82,0)
(83,62,0)
(113,82,0)
(76,21,0)
(20,25,0)
(102,95,0)
(35,122,0)
(51,27,0)
(16,107,0)
(30,130,0)
(87,33,0)
(70,108,0)
(19,25,0)
(86,108,0)
(59,24,0)
(110,33,0)
(106,62,0)
(103,13,0)
(88,51,0)
(122,33,0)
(49,13,0)
(112,4,0)
(40,54,0)
(109,37,0)
(61,122,0)
(63,39,0)
(17,39,0)
(54,130,0)
(53,129,0)
(18,39,0)
(84,65,0)
(62,120,0)
(5,82,0)
(23,51,0)
(91,39,0)
(85,100,0)
(85,4,0)
(12,25,0)
(55,39,0)
(64,13,0)
(15,100,0)
(119,33,0)
(47,67,0)
(44,39,0)
(129,87,0)
(96,16,0)
(37,107,0)
(21,33,0)
(45,81,0)
(61,45,0)
(25,27,0)
(80,77,0)
(80,27,0)
(100,67,0)
(122,77,0)
(95,27,0)
(2,36,0)
(45,124,0)
(81,45,0)
(41,13,0)
(77,80,0)
(77,130,0)
(106,108,0)
(36,33,0)
(45,33,0)
(127,4,0)
(22,48,0)
(7,107,0)
(123,5,0)
(14,122,0)
(126,25,0)
(101,14,0)
(67,33,0)
(79,87,0)
(105,5,0)
(4,37,0)
(25,130,0)
(71,81,0)
(114,62,0)
(87,95,0)
(13,67,0)
(86,67,0)
(99,61,0)
(94,33,0)
(38,33,0)
(69,37,0)
(62,124,1)
(82,58,1)
(43,50,1)
(13,16,1)
(11,102,1)
(127,82,1)
(111,130,1)
(62,106,1)
(28,25,1)
(106,108,1)
(62,108,1)
(84,72,1)
(21,42,1)
(52,121,1)
(56,87,1)
(97,4,1)
(74,8,1)
(121,83,1)
(13,27,1)
(25,130,1)
(45,61,1)
(40,21,1)
(15,10,1)
(86,57,1)
(111,51,1)
(0,62,1)
(104,41,1)
(83,114,1)
(26,54,1)
(81,60,1)
(108,70,1)
(112,93,1)
(22,13,1)
(60,71,1)
(93,5,1)
(34,125,1)
(13,104,1)
(71,14,1)
(79,45,1)
(67,65,1)
(5,67,1)
(123,82,1)
(46,0,1)
(54,130,1)
(13,130,1)
(102,79,1)
(6,46,1)
(45,124,1)
(53,32,1)
(130,73,1)
(95,27,1)
(100,82,1)
(5,105,1)
(4,37,1)
(77,80,1)
(95,11,1)
(13,129,1)
(14,117,1)
(58,116,1)
(92,15,1)
(78,20,1)
(76,5,1)
(126,67,1)
(64,103,1)
(77,130,1)
(129,53,1)
(69,109,1)
(16,107,1)
(32,64,1)
(28,59,1)
(8,37,1)
(45,14,1)
(12,19,1)
(103,36,1)
(129,87,1)
(100,92,1)
(7,27,1)
(36,124,1)
(6,108,1)
(101,43,1)
(51,88,1)
(2,31,1)
(59,25,1)
(96,66,1)
(86,108,1)
(37,69,1)
(80,27,1)
(77,75,1)
(7,98,1)
(21,124,1)
(36,2,1)
(46,108,1)
(113,82,1)
(54,40,1)
(25,67,1)
(73,30,1)
(129,67,1)
(20,12,1)
(65,87,1)
(114,86,1)
(122,77,1)
(23,26,1)
(66,129,1)
(49,16,1)
(125,52,1)
(7,130,1)
(47,107,1)
(89,111,1)
(85,100,1)
(26,130,1)
(61,122,1)
(87,95,1)
(95,130,1)
(65,84,1)
(14,122,1)
(128,90,1)
(123,113,1)
(57,6,1)
(50,122,1)
(3,35,1)
(19,126,1)
(127,74,1)
(25,27,1)
(99,81,1)
(4,127,1)
(4,85,1)
(61,29,1)
(75,80,1)
(88,23,1)
(37,107,1)
(5,82,1)
(86,67,1)
(51,27,1)
(10,112,1)
(85,87,1)
(72,47,1)
(113,97,1)
(13,67,1)
(45,81,1)
(98,9,1)
(25,128,1)
(116,22,1)
(80,115,1)
(90,78,1)
(31,86,1)
(4,124,1)
(105,123,1)
(117,101,1)
(29,99,1)
(35,111,1)
(81,122,1)
(16,96,1)
(9,56,1)
(106,34,1)
(115,3,1)
(100,67,1)
(41,49,1)
(109,85,1)
(42,76,1)
(107,7,1)
(70,28,1)
(116,13,1)
(127,5,2)
(32,111,2)
(65,111,2)
(7,27,2)
(25,130,2)
(67,65,2)
(88,111,2)
(106,108,2)
(35,111,2)
(4,85,2)
(4,124,2)
(57,86,2)
(77,80,2)
(106,86,2)
(117,111,2)
(13,130,2)
(46,108,2)
(2,111,2)
(16,111,2)
(87,95,2)
(41,111,2)
(25,27,2)
(80,27,2)
(46,86,2)
(4,127,2)
(128,111,2)
(107,7,2)
(11,111,2)
(26,111,2)
(102,111,2)
(61,111,2)
(122,77,2)
(40,111,2)
(122,111,2)
(23,111,2)
(19,111,2)
(109,5,2)
(92,5,2)
(103,111,2)
(74,5,2)
(114,86,2)
(21,111,2)
(83,86,2)
(104,111,2)
(121,86,2)
(14,111,2)
(99,111,2)
(93,5,2)
(25,111,2)
(62,86,2)
(54,130,2)
(113,82,2)
(75,111,2)
(105,5,2)
(6,86,2)
(77,130,2)
(45,124,2)
(79,111,2)
(129,67,2)
(111,130,2)
(53,111,2)
(51,27,2)
(100,82,2)
(95,130,2)
(43,111,2)
(16,107,2)
(13,16,2)
(58,111,2)
(21,124,2)
(25,67,2)
(3,111,2)
(85,5,2)
(37,107,2)
(20,111,2)
(100,67,2)
(77,111,2)
(71,111,2)
(36,124,2)
(50,111,2)
(57,111,2)
(52,86,2)
(36,111,2)
(66,111,2)
(13,111,2)
(98,111,2)
(123,111,2)
(9,111,2)
(56,111,2)
(4,37,2)
(123,5,2)
(61,122,2)
(15,5,2)
(7,130,2)
(13,67,2)
(105,111,2)
(125,86,2)
(4,5,2)
(45,61,2)
(82,111,2)
(64,111,2)
(60,111,2)
(6,111,2)
(107,111,2)
(5,82,2)
(78,111,2)
(65,87,2)
(81,122,2)
(22,13,2)
(86,86,2)
(51,111,2)
(101,111,2)
(126,111,2)
(70,111,2)
(62,124,2)
(115,111,2)
(129,111,2)
(31,111,2)
(90,111,2)
(108,111,2)
(45,14,2)
(112,5,2)
(45,111,2)
(81,111,2)
(95,111,2)
(42,111,2)
(54,111,2)
(29,111,2)
(86,67,2)
(59,25,2)
(69,5,2)
(28,111,2)
(10,5,2)
(111,111,2)
(111,51,2)
(34,86,2)
(62,108,2)
(76,111,2)
(85,100,2)
(116,111,2)
(62,106,2)
(13,129,2)
(80,111,2)
(100,5,2)
(87,111,2)
(97,5,2)
(5,5,2)
(67,111,2)
(5,67,2)
(72,111,2)
(85,87,2)
(7,111,2)
(84,111,2)
(37,5,2)
(47,111,2)
(8,5,2)
(13,27,2)
(129,87,2)
(96,111,2)
(113,5,2)
(14,122,2)
(45,81,2)
(127,82,2)
(86,108,2)
(49,111,2)
(86,111,2)
(5,111,2)
(0,86,2)
(95,27,2)
(12,111,2)
-----------------------------------
(0,i)
(1,cmpt)
(2,"\\n")
(3,image)
(4,fprintf(out, " f(%d,%d)
(5,i < n)
(6,i)
(7,jas_image_cmptheight(image, cmptno)
(8,buf)
(9,image)
(10,width)
(11,cmptno)
(12,0)
(13,jas_image_readcmpt2(image, cmptno, width - n, height - 1, n, 1, buf)
(14,cmpt->prec_)
(15,n)
(16,height - 1)
(17,i)
(18,for (cmptno = 0; cmptno < image->numcmpts_; ++cmptno)
(19,cmptno)
(20,0)
(21,fprintf(out, "\\n")
(22,abort()
(23,image)
(24,)
(25,jas_image_readcmpt2(image, cmptno, 0, 0, n, 1, buf)
(26,cmptno)
(27,jas_image_t *image)
(28,i)
(29,type_)
(30,cmptno)
(31,out)
(32,width)
(33,)
(34,i)
(35,cmpt)
(36,fprintf(out, "\\n")
(37,height - 1)
(38,if (jas_image_readcmpt2(image, cmptno, width - n, height - 1, n, 1, buf)
(39,)
(40,cmptno)
(41,1)
(42,"\\n")
(43,"prec=%d, sgnd=%d, cmpttype=%d\\n")
(44,n)
(45,fprintf(out, "prec=%d, sgnd=%d, cmpttype=%d\\n", cmpt->prec_,\\n\\t\\t  cmpt->sgnd_, cmpt->type_)
(46,++i)
(47,n)
(48,)
(49,n)
(50,out)
(51,image->numcmpts_)
(52,0)
(53,n)
(54,++cmptno)
(55,buf)
(56,height)
(57,n)
(58,0)
(59,abort()
(60,sgnd_)
(61,cmpt->type_)
(62,fprintf(out, " f(%d,%d)
(63,height)
(64,cmptno)
(65,JAS_MIN(16, width)
(66,height)
(67,n = JAS_MIN(16, width)
(68,width)
(69,1)
(70,0)
(71,cmpt)
(72,16)
(73,0)
(74,i)
(75,cmptno)
(76,out)
(77,image->cmpts_[cmptno])
(78,n)
(79,width)
(80,image->cmpts_)
(81,cmpt->sgnd_)
(82,i = 0)
(83," f(%d,%d)
(84,width)
(85,width - n + i)
(86,i < n)
(87,width = jas_image_cmptwidth(image, cmptno)
(88,numcmpts_)
(89,RET)
(90,1)
(91,cmptno)
(92,i)
(93,out)
(94,if (jas_image_readcmpt2(image, cmptno, 0, 0, n, 1, buf)
(95,jas_image_cmptwidth(image, cmptno)
(96,1)
(97,i)
(98,cmptno)
(99,cmpt)
(100,n + i)
(101,cmpt)
(102,image)
(103,image)
(104,buf)
(105,n)
(106,buf[i])
(107,height = jas_image_cmptheight(image, cmptno)
(108,i = 0)
(109,height)
(110,for (i = 0; i < n; ++i)
(111,cmptno < image->numcmpts_)
(112," f(%d,%d)
(113,++i)
(114,out)
(115,cmpts_)
(116,i)
(117,prec_)
(118,)
(119,for (i = 0; i < n; ++i)
(120,)
(121,i)
(122,cmpt = image->cmpts_[cmptno])
(123,i)
(124,FILE *out)
(125,buf)
(126,image)
(127,buf[i])
(128,buf)
(129,width - n)
(130,cmptno = 0)
-----cfg-----
(32,31)
(34,32)
(36,26)
(38,36)
(39,38)
(7,13)
(40,39)
(41,50)
(42,47)
(44,42)
(13,18)
(45,41)
(47,45)
(48,40)
(18,25)
(50,48)
(53,55)
(21,34)
(21,53)
(23,21)
(25,23)
(26,25)
(29,44)
(31,29)
-----path-----
7,13,18,25,23,21,53,55
-----cfgNode-----
5,<global>
6,<empty>
7,uint_fast32_t jas_image_rawsize (jas_image_t *image)
8,jas_image_t *image
9,<empty>
10,uint_fast32_t rawsize
11,int cmptno
12,jas_image_cmpt_t* cmpt
13,rawsize = 0
14,rawsize
15,0
16,for (cmptno = 0;cmptno < image->numcmpts_;++cmptno)
17,<empty>
18,cmptno = 0
19,cmptno
20,0
21,cmptno < image->numcmpts_
22,cmptno
23,image->numcmpts_
24,image
25,numcmpts_
26,++cmptno
27,cmptno
28,<empty>
29,cmpt = image->cmpts_[cmptno]
30,cmpt
31,image->cmpts_[cmptno]
32,image->cmpts_
33,image
34,cmpts_
35,cmptno
36,rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ +
37,		  7) / 8
38,rawsize
39,(cmpt->width_ * cmpt->height_ * cmpt->prec_ +
40,		  7) / 8
41,cmpt->width_ * cmpt->height_ * cmpt->prec_ +
42,		  7
43,cmpt->width_ * cmpt->height_ * cmpt->prec_
44,cmpt->width_ * cmpt->height_
45,cmpt->width_
46,cmpt
47,width_
48,cmpt->height_
49,cmpt
50,height_
51,cmpt->prec_
52,cmpt
53,prec_
54,7
55,8
56,return rawsize;
57,rawsize
58,RET
59,jas_image_t *image
60,RET
61,uint_fast32_t jas_image_rawsize (jas_image_t *image)
62,jas_image_t *image
63,<empty>
64,uint_fast32_t rawsize
65,int cmptno
66,jas_image_cmpt_t* cmpt
67,rawsize = 0
68,rawsize
69,0
70,for (cmptno = 0;cmptno < image->numcmpts_;++cmptno)
71,<empty>
72,cmptno = 0
73,cmptno
74,0
75,cmptno < image->numcmpts_
76,cmptno
77,image->numcmpts_
78,image
79,numcmpts_
80,++cmptno
81,cmptno
82,<empty>
83,cmpt = image->cmpts_[cmptno]
84,cmpt
85,image->cmpts_[cmptno]
86,image->cmpts_
87,image
88,cmpts_
89,cmptno
90,rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ +
91,		  7) / 8
92,rawsize
93,(cmpt->width_ * cmpt->height_ * cmpt->prec_ +
94,		  7) / 8
95,cmpt->width_ * cmpt->height_ * cmpt->prec_ +
96,		  7
97,cmpt->width_ * cmpt->height_ * cmpt->prec_
98,cmpt->width_ * cmpt->height_
99,cmpt->width_
100,cmpt
101,width_
102,cmpt->height_
103,cmpt
104,height_
105,cmpt->prec_
106,cmpt
107,prec_
108,7
109,8
110,return rawsize;
111,rawsize
112,RET
113,jas_image_t *image
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
uint_fast32_t jas_image_rawsize(jas_image_t *image) {
uint_fast32_t rawsize;
int cmptno;
jas_image_cmpt_t *cmpt;
rawsize = 0;
for(cmptno = 0;cmptno < image->numcmpts_;++cmptno)
cmpt = image->cmpts_[cmptno];
rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ + 		  7) / 8;
for(cmptno = 0;cmptno < image->numcmpts_;++cmptno)
cmpt = image->cmpts_[cmptno];
rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ + 		  7) / 8;
for(cmptno = 0;cmptno < image->numcmpts_;++cmptno)
cmpt = image->cmpts_[cmptno];
rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ + 		  7) / 8;
return rawsize;
=======================
