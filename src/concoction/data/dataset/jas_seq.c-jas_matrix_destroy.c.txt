-----label-----
0
-----code-----
void jas_matrix_destroy(jas_matrix_t *matrix)
{
	if (matrix->data_) {
		assert(!(matrix->flags_ & JAS_MATRIX_REF));
		jas_free(matrix->data_);
		matrix->data_ = 0;
	}
	if (matrix->rows_) {
		jas_free(matrix->rows_);
		matrix->rows_ = 0;
	}
	jas_free(matrix);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
12,13
12,14
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
19,21
20,21
22,23
23,24
24,25
24,26
25,26
25,27
26,27
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
39,40
40,41
40,42
41,42
41,43
42,43
46,47
46,48
47,48
47,49
48,49
51,52
51,53
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
62,64
63,64
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,7,9,10,15,16,21,27,28,30,34,37,38,43,44,45,49,50,55,58,59,64,65,66,70,72
-----computeFrom-----
24,25
24,26
40,41
40,42
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void jas_matrix_destroy(jas_matrix_t *matrix){	if (matrix->data_) {		assert(!(matrix->flags_ & JAS_MATRIX_REF));		jas_free(matrix->data_);		matrix->data_ = 0;	}	if (matrix->rows_) {		jas_free(matrix->rows_);		matrix->rows_ = 0;	}	jas_free(matrix);}
void
jas_matrix_destroy(jas_matrix_t *matrix)
jas_matrix_destroy
jas_matrix_t *matrix
jas_matrix_t
jas_matrix_t
*matrix
*
matrix
{	if (matrix->data_) {		assert(!(matrix->flags_ & JAS_MATRIX_REF));		jas_free(matrix->data_);		matrix->data_ = 0;	}	if (matrix->rows_) {		jas_free(matrix->rows_);		matrix->rows_ = 0;	}	jas_free(matrix);}
if (matrix->data_) {		assert(!(matrix->flags_ & JAS_MATRIX_REF));		jas_free(matrix->data_);		matrix->data_ = 0;	}
matrix->data_
matrix
matrix
data_
{		assert(!(matrix->flags_ & JAS_MATRIX_REF));		jas_free(matrix->data_);		matrix->data_ = 0;	}
assert(!(matrix->flags_ & JAS_MATRIX_REF));
assert(!(matrix->flags_ & JAS_MATRIX_REF))
assert
assert
!(matrix->flags_ & JAS_MATRIX_REF)
(matrix->flags_ & JAS_MATRIX_REF)
matrix->flags_ & JAS_MATRIX_REF
matrix->flags_
matrix
matrix
flags_
JAS_MATRIX_REF
JAS_MATRIX_REF
jas_free(matrix->data_);
jas_free(matrix->data_)
jas_free
jas_free
matrix->data_
matrix
matrix
data_
matrix->data_ = 0;
matrix->data_ = 0
matrix->data_
matrix
matrix
data_
0
if (matrix->rows_) {		jas_free(matrix->rows_);		matrix->rows_ = 0;	}
matrix->rows_
matrix
matrix
rows_
{		jas_free(matrix->rows_);		matrix->rows_ = 0;	}
jas_free(matrix->rows_);
jas_free(matrix->rows_)
jas_free
jas_free
matrix->rows_
matrix
matrix
rows_
matrix->rows_ = 0;
matrix->rows_ = 0
matrix->rows_
matrix
matrix
rows_
0
jas_free(matrix);
jas_free(matrix)
jas_free
jas_free
matrix
matrix
-----joern-----
(101,40,0)
(30,66,0)
(147,4,0)
(40,64,0)
(111,139,0)
(10,17,0)
(45,56,0)
(154,96,0)
(64,91,0)
(108,102,0)
(133,73,0)
(15,96,0)
(134,66,0)
(144,38,0)
(114,145,0)
(2,61,0)
(100,61,0)
(41,125,0)
(46,77,0)
(99,125,0)
(69,138,0)
(128,88,0)
(13,86,0)
(45,154,0)
(65,57,0)
(138,110,0)
(74,40,0)
(38,17,0)
(19,75,0)
(2,77,0)
(44,45,0)
(40,56,0)
(82,32,0)
(79,81,0)
(106,153,0)
(20,120,0)
(115,26,0)
(27,154,0)
(89,127,0)
(60,67,0)
(94,87,0)
(134,27,0)
(7,63,0)
(148,92,0)
(153,106,0)
(92,104,0)
(113,26,0)
(3,7,0)
(116,127,0)
(60,91,0)
(77,125,0)
(148,41,0)
(102,27,0)
(118,99,0)
(112,91,0)
(7,66,0)
(118,26,0)
(120,81,0)
(84,111,0)
(47,148,0)
(102,66,0)
(85,30,0)
(27,125,0)
(32,125,0)
(132,89,0)
(151,71,0)
(21,119,0)
(29,134,0)
(22,30,0)
(50,111,0)
(4,66,0)
(156,86,0)
(16,125,0)
(59,134,0)
(131,142,0)
(48,105,0)
(86,66,0)
(109,106,0)
(25,15,0)
(75,6,0)
(68,153,0)
(63,7,0)
(130,66,0)
(139,83,0)
(127,41,0)
(52,102,0)
(78,24,0)
(31,4,0)
(33,82,0)
(130,87,0)
(105,66,0)
(130,32,0)
(150,95,0)
(132,125,0)
(149,6,0)
(127,66,0)
(142,66,0)
(50,75,0)
(111,66,0)
(70,130,0)
(55,17,0)
(82,33,0)
(46,66,0)
(51,142,0)
(50,125,0)
(0,83,0)
(87,5,0)
(153,77,0)
(54,61,0)
(90,53,0)
(120,66,0)
(103,88,0)
(41,148,0)
(135,77,0)
(127,89,0)
(34,155,0)
(76,125,0)
(73,66,0)
(119,66,0)
(152,75,0)
(98,135,0)
(24,130,0)
(119,76,0)
(64,40,0)
(146,155,0)
(145,88,0)
(62,139,0)
(46,76,0)
(123,120,0)
(37,73,0)
(155,99,0)
(43,153,0)
(15,88,0)
(121,50,0)
(117,46,0)
(107,119,0)
(2,140,0)
(49,79,0)
(81,151,0)
(135,66,0)
(18,127,0)
(71,151,0)
(153,66,0)
(105,132,0)
(130,24,0)
(106,88,0)
(89,120,0)
(134,118,0)
(81,125,0)
(36,79,0)
(33,150,0)
(72,92,0)
(154,27,0)
(42,151,0)
(76,46,0)
(142,32,0)
(155,66,0)
(39,15,0)
(64,15,0)
(137,138,0)
(91,104,0)
(73,50,0)
(157,71,0)
(110,5,0)
(26,66,0)
(71,56,0)
(136,154,0)
(9,130,0)
(99,118,0)
(50,53,0)
(75,66,0)
(53,87,0)
(53,66,0)
(93,135,0)
(143,2,0)
(138,66,0)
(80,46,0)
(91,60,0)
(95,150,0)
(61,2,0)
(23,92,0)
(17,38,0)
(58,53,0)
(77,2,0)
(17,55,0)
(26,118,0)
(110,138,0)
(32,82,0)
(92,148,0)
(154,45,0)
(126,125,0)
(141,38,0)
(24,60,0)
(38,66,0)
(30,76,0)
(150,33,0)
(118,134,0)
(11,57,0)
(91,64,0)
(97,111,0)
(33,119,0)
(120,89,0)
(151,81,0)
(148,14,0)
(151,104,0)
(57,66,0)
(89,132,0)
(1,125,0)
(24,88,0)
(79,66,0)
(57,41,0)
(26,77,0)
(119,33,0)
(124,71,0)
(61,96,0)
(35,45,0)
(63,12,0)
(8,7,0)
(15,64,0)
(6,83,0)
(129,105,0)
(122,125,0)
(50,75,1)
(89,127,1)
(93,50,1)
(46,117,1)
(127,116,1)
(52,108,1)
(130,9,1)
(25,39,1)
(112,64,1)
(138,69,1)
(150,95,1)
(40,56,1)
(113,134,1)
(35,44,1)
(92,104,1)
(120,66,1)
(26,66,1)
(107,21,1)
(50,111,1)
(59,29,1)
(34,132,1)
(29,155,1)
(102,66,1)
(24,130,1)
(109,145,1)
(73,66,1)
(115,113,1)
(9,70,1)
(39,40,1)
(50,53,1)
(4,147,1)
(148,92,1)
(141,4,1)
(133,87,1)
(79,49,1)
(60,91,1)
(44,102,1)
(116,18,1)
(142,51,1)
(119,107,1)
(46,66,1)
(129,48,1)
(7,3,1)
(72,23,1)
(61,96,1)
(79,66,1)
(74,24,1)
(87,94,1)
(153,77,1)
(47,57,1)
(156,13,1)
(135,66,1)
(119,66,1)
(53,66,1)
(32,82,1)
(11,65,1)
(40,101,1)
(26,77,1)
(124,79,1)
(69,137,1)
(19,55,1)
(151,104,1)
(33,119,1)
(120,81,1)
(139,62,1)
(30,22,1)
(71,157,1)
(91,112,1)
(121,73,1)
(138,66,1)
(70,106,1)
(46,77,1)
(19,63,1)
(17,38,1)
(106,153,1)
(114,60,1)
(45,35,1)
(51,131,1)
(4,66,1)
(81,151,1)
(24,78,1)
(50,121,1)
(88,128,1)
(152,19,1)
(145,114,1)
(22,85,1)
(132,89,1)
(111,97,1)
(134,27,1)
(153,66,1)
(106,88,1)
(120,123,1)
(64,15,1)
(71,56,1)
(18,120,1)
(84,6,1)
(127,41,1)
(38,66,1)
(101,74,1)
(24,88,1)
(134,59,1)
(65,77,1)
(61,100,1)
(134,66,1)
(86,66,1)
(30,66,1)
(151,71,1)
(131,76,1)
(48,27,1)
(75,66,1)
(150,119,1)
(119,76,1)
(75,152,1)
(57,11,1)
(38,144,1)
(123,20,1)
(98,93,1)
(76,46,1)
(15,88,1)
(58,110,1)
(109,88,1)
(80,30,1)
(130,87,1)
(135,98,1)
(147,31,1)
(151,42,1)
(154,45,1)
(10,38,1)
(78,130,1)
(21,142,1)
(57,66,1)
(55,17,1)
(8,55,1)
(118,26,1)
(42,71,1)
(91,64,1)
(117,80,1)
(2,140,1)
(108,81,1)
(154,136,1)
(142,66,1)
(133,86,1)
(49,36,1)
(3,8,1)
(94,53,1)
(73,37,1)
(63,7,1)
(2,61,1)
(136,45,1)
(103,32,1)
(15,96,1)
(130,32,1)
(26,115,1)
(13,4,1)
(7,66,1)
(27,154,1)
(157,124,1)
(110,138,1)
(15,25,1)
(28,99,1)
(97,84,1)
(99,118,1)
(155,66,1)
(118,134,1)
(23,47,1)
(89,120,1)
(143,135,1)
(43,68,1)
(100,54,1)
(54,143,1)
(36,106,1)
(102,52,1)
(62,111,1)
(33,150,1)
(128,103,1)
(20,105,1)
(17,10,1)
(64,40,1)
(13,139,1)
(6,149,1)
(45,56,1)
(82,33,1)
(91,104,1)
(90,58,1)
(137,86,1)
(146,34,1)
(111,66,1)
(68,109,1)
(155,146,1)
(53,90,1)
(153,43,1)
(86,156,1)
(85,41,1)
(92,72,1)
(77,2,1)
(130,66,1)
(144,141,1)
(148,14,1)
(37,133,1)
(105,66,1)
(127,66,1)
(105,129,1)
(149,75,1)
(154,96,1)
(145,88,1)
(41,148,1)
(154,45,2)
(130,106,2)
(130,66,2)
(70,106,2)
(111,66,2)
(127,41,2)
(148,92,2)
(64,106,2)
(17,38,2)
(75,66,2)
(40,56,2)
(138,86,2)
(63,55,2)
(141,4,2)
(102,66,2)
(27,154,2)
(32,82,2)
(135,66,2)
(73,66,2)
(154,96,2)
(24,106,2)
(43,106,2)
(106,88,2)
(130,87,2)
(142,66,2)
(2,61,2)
(84,4,2)
(26,77,2)
(134,27,2)
(137,86,2)
(151,104,2)
(110,86,2)
(91,104,2)
(119,76,2)
(61,96,2)
(145,88,2)
(62,4,2)
(86,66,2)
(63,7,2)
(79,66,2)
(87,86,2)
(17,4,2)
(38,4,2)
(78,106,2)
(15,106,2)
(39,106,2)
(90,86,2)
(33,119,2)
(45,56,2)
(41,148,2)
(25,106,2)
(53,86,2)
(30,66,2)
(64,40,2)
(82,33,2)
(55,4,2)
(120,66,2)
(50,75,2)
(105,66,2)
(2,140,2)
(76,46,2)
(150,95,2)
(68,106,2)
(144,4,2)
(81,151,2)
(118,134,2)
(101,106,2)
(110,138,2)
(91,106,2)
(153,77,2)
(89,120,2)
(15,88,2)
(24,88,2)
(64,15,2)
(111,4,2)
(130,32,2)
(33,150,2)
(57,66,2)
(7,66,2)
(50,111,2)
(99,118,2)
(74,106,2)
(46,77,2)
(151,71,2)
(40,106,2)
(118,26,2)
(106,106,2)
(106,153,2)
(119,66,2)
(109,106,2)
(92,104,2)
(46,66,2)
(120,81,2)
(145,106,2)
(15,96,2)
(155,66,2)
(89,127,2)
(91,64,2)
(38,66,2)
(60,91,2)
(8,55,2)
(153,66,2)
(53,66,2)
(114,106,2)
(112,106,2)
(3,55,2)
(9,106,2)
(10,4,2)
(4,66,2)
(134,66,2)
(19,4,2)
(152,4,2)
(153,106,2)
(24,130,2)
(69,86,2)
(149,4,2)
(138,66,2)
(50,53,2)
(55,17,2)
(94,86,2)
(97,4,2)
(71,56,2)
(60,106,2)
(6,4,2)
(132,89,2)
(58,86,2)
(139,4,2)
(75,4,2)
(127,66,2)
(77,2,2)
(7,55,2)
(26,66,2)
(148,14,2)
-----------------------------------
(0,if (!(mat0->flags_ & JAS_MATRIX_REF)
(1,if (mat0->data_)
(2,r1 - r0 + 1)
(3,data_)
(4,mat0->data_)
(5,)
(6,mat0->data_ = 0)
(7,mat0->data_)
(8,mat0)
(9,rows_)
(10,JAS_MATRIX_REF)
(11,numcols_)
(12,)
(13,mat0)
(14,int c1)
(15,r0 + i)
(16,i)
(17,mat0->flags_ & JAS_MATRIX_REF)
(18,mat0)
(19,mat0)
(20,mat0)
(21,mat0)
(22,maxrows_)
(23,c0)
(24,mat0->rows_[i])
(25,i)
(26,mat0->numrows_)
(27,mat0->ystart_ = mat1->ystart_ + r0)
(28,RET)
(29,mat0)
(30,mat0->maxrows_)
(31,mat0)
(32,mat0->rows_ = jas_malloc(mat0->maxrows_ * sizeof(jas_seqent_t *)
(33,mat0->maxrows_ * sizeof(jas_seqent_t *)
(34,mat0)
(35,ystart_)
(36,mat0)
(37,flags_)
(38,mat0->flags_)
(39,r0)
(40,mat1->rows_)
(41,mat0->numcols_ = c1 - c0 + 1)
(42,c0)
(43,numrows_)
(44,mat1)
(45,mat1->ystart_)
(46,mat0->numrows_)
(47,c1)
(48,mat0)
(49,xstart_)
(50,mat0->flags_ |= JAS_MATRIX_REF)
(51,rows_)
(52,ystart_)
(53,mat0->rows_)
(54,r0)
(55,!(mat0->flags_ & JAS_MATRIX_REF)
(56,jas_matrix_t *mat1)
(57,mat0->numcols_)
(58,mat0)
(59,ystart_)
(60,mat0->rows_[i] = mat1->rows_[r0 + i] + c0)
(61,r0 + 1)
(62,0)
(63,jas_free(mat0->data_)
(64,mat1->rows_[r0 + i])
(65,mat0)
(66,jas_matrix_t *mat0)
(67,)
(68,mat0)
(69,rows_)
(70,mat0)
(71,mat1->xstart_)
(72,1)
(73,mat0->flags_)
(74,mat1)
(75,mat0->data_)
(76,mat0->maxrows_ = mat0->numrows_)
(77,mat0->numrows_ = r1 - r0 + 1)
(78,i)
(79,mat0->xstart_)
(80,mat0)
(81,mat0->xstart_ = mat1->xstart_ + c0)
(82,jas_malloc(mat0->maxrows_ * sizeof(jas_seqent_t *)
(83,)
(84,mat0)
(85,mat0)
(86,mat0->rows_)
(87,mat0->rows_ = 0)
(88,i = 0)
(89,mat0->xstart_ + mat0->numcols_)
(90,rows_)
(91,mat1->rows_[r0 + i] + c0)
(92,c0 + 1)
(93,mat0)
(94,0)
(95,jas_seqent_t *)
(96,int r0)
(97,datasize_)
(98,numrows_)
(99,mat0->yend_ = mat0->ystart_ + mat0->numrows_)
(100,1)
(101,rows_)
(102,mat0->ystart_)
(103,i)
(104,int c0)
(105,mat0->xend_)
(106,i < mat0->numrows_)
(107,maxrows_)
(108,mat0)
(109,i)
(110,jas_free(mat0->rows_)
(111,mat0->datasize_)
(112,c0)
(113,mat0)
(114,i)
(115,numrows_)
(116,numcols_)
(117,numrows_)
(118,mat0->ystart_ + mat0->numrows_)
(119,mat0->maxrows_)
(120,mat0->xstart_)
(121,JAS_MATRIX_REF)
(122,if (mat0->rows_)
(123,xstart_)
(124,mat1)
(125,)
(126,for (i = 0; i < mat0->numrows_; ++i)
(127,mat0->numcols_)
(128,0)
(129,xend_)
(130,mat0->rows_)
(131,mat0)
(132,mat0->xend_ = mat0->xstart_ + mat0->numcols_)
(133,mat0)
(134,mat0->ystart_)
(135,mat0->numrows_)
(136,r0)
(137,mat0)
(138,mat0->rows_)
(139,mat0->datasize_ = 0)
(140,int r1)
(141,mat0)
(142,mat0->rows_)
(143,r1)
(144,flags_)
(145,++i)
(146,yend_)
(147,data_)
(148,c1 - c0 + 1)
(149,0)
(150,sizeof(jas_seqent_t *)
(151,mat1->xstart_ + c0)
(152,data_)
(153,mat0->numrows_)
(154,mat1->ystart_ + r0)
(155,mat0->yend_)
(156,rows_)
(157,xstart_)
-----cfg-----
(32,39)
(32,45)
(34,32)
(36,43)
(37,36)
(39,37)
(7,13)
(40,45)
(41,40)
(11,20)
(11,34)
(43,41)
(45,47)
(13,11)
(15,25)
(16,15)
(17,16)
(18,17)
(20,18)
(22,29)
(23,22)
(25,23)
(26,34)
(27,26)
(29,27)
-----path-----
7,13,11,20,18,17,16,15,25,23,22,29,27,26,34,32,39,37,36,43,41,40,45,47
7,13,11,20,18,17,16,15,25,23,22,29,27,26,34,32,45,47
7,13,11,34,32,39,37,36,43,41,40,45,47
7,13,11,34,32,45,47
-----cfgNode-----
5,<global>
6,<empty>
7,void jas_matrix_destroy (jas_matrix_t *matrix)
8,jas_matrix_t *matrix
9,<empty>
10,if (matrix->data_)
11,matrix->data_
12,matrix
13,data_
14,<empty>
15,assert(!(matrix->flags_ & JAS_MATRIX_REF))
16,!(matrix->flags_ & JAS_MATRIX_REF)
17,matrix->flags_ & JAS_MATRIX_REF
18,matrix->flags_
19,matrix
20,flags_
21,JAS_MATRIX_REF
22,jas_free(matrix->data_)
23,matrix->data_
24,matrix
25,data_
26,matrix->data_ = 0
27,matrix->data_
28,matrix
29,data_
30,0
31,if (matrix->rows_)
32,matrix->rows_
33,matrix
34,rows_
35,<empty>
36,jas_free(matrix->rows_)
37,matrix->rows_
38,matrix
39,rows_
40,matrix->rows_ = 0
41,matrix->rows_
42,matrix
43,rows_
44,0
45,jas_free(matrix)
46,matrix
47,RET
48,jas_matrix_t *matrix
49,RET
50,void jas_matrix_destroy (jas_matrix_t *matrix)
51,jas_matrix_t *matrix
52,<empty>
53,if (matrix->data_)
54,matrix->data_
55,matrix
56,data_
57,<empty>
58,assert(!(matrix->flags_ & JAS_MATRIX_REF))
59,!(matrix->flags_ & JAS_MATRIX_REF)
60,matrix->flags_ & JAS_MATRIX_REF
61,matrix->flags_
62,matrix
63,flags_
64,JAS_MATRIX_REF
65,jas_free(matrix->data_)
66,matrix->data_
67,matrix
68,data_
69,matrix->data_ = 0
70,matrix->data_
71,matrix
72,data_
73,0
74,if (matrix->rows_)
75,matrix->rows_
76,matrix
77,rows_
78,<empty>
79,jas_free(matrix->rows_)
80,matrix->rows_
81,matrix
82,rows_
83,matrix->rows_ = 0
84,matrix->rows_
85,matrix
86,rows_
87,0
88,jas_free(matrix)
89,matrix
90,RET
91,jas_matrix_t *matrix
=====================================
----------------dynamic----------------
=======testcase========
model_version:0x01000000
A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010
A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23
=========trace=========
void jas_matrix_destroy(jas_matrix_t *matrix) {
if(matrix->data_)
assert(!(matrix->flags_ & JAS_MATRIX_REF));
jas_free(matrix->data_);
matrix->data_ = 0;
if(matrix->rows_)
jas_free(matrix->rows_);
matrix->rows_ = 0;
jas_free(matrix);
=======================
