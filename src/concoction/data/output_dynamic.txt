model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_icccurv_input(jas_iccattrval_t *attrval, jas_stream_t *in,   int cnt) { jas_icccurv_t *curv = &attrval->data.curv; unsigned int i; curv->numents = 0; curv->ents = 0; for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) for(i = 0;i < curv->numents;++i) return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_cmpxformseq_resize(jas_cmpxformseq_t *pxformseq, int n) { jas_cmpxform_t **p; assert(n >= pxformseq->numpxforms); p = (!pxformseq->pxforms) ? jas_malloc(n * sizeof(jas_cmpxform_t *)) : 	  jas_realloc(pxformseq->pxforms, n * sizeof(jas_cmpxform_t *)); pxformseq->pxforms = p; pxformseq->maxpxforms = n; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jpc_enc_cp_t *cp_create(char *optstr, jas_image_t *image) { jpc_enc_cp_t *cp; jas_tvparser_t *tvp; int ret; int numilyrrates; double *ilyrrates; int i; int tagid; jpc_enc_tcp_t *tcp; jpc_enc_tccp_t *tccp; jpc_enc_ccp_t *ccp; int cmptno; uint_fast16_t rlvlno; uint_fast16_t prcwidthexpn; uint_fast16_t prcheightexpn; bool enablemct; uint_fast32_t jp2overhead; uint_fast16_t lyrno; uint_fast32_t hsteplcm; uint_fast32_t vsteplcm; bool mctvalid; tvp = 0; cp = 0; ilyrrates = 0; numilyrrates = 0; prcwidthexpn = 15; prcheightexpn = 15; enablemct = true; jp2overhead = 0; cp->ccps = 0; cp->debug = 0; cp->imgareatlx = UINT_FAST32_MAX; cp->imgareatly = UINT_FAST32_MAX; cp->refgrdwidth = 0; cp->refgrdheight = 0; cp->tilegrdoffx = UINT_FAST32_MAX; cp->tilegrdoffy = UINT_FAST32_MAX; cp->tilewidth = 0; cp->tileheight = 0; cp->numcmpts = jas_image_numcmpts(image); hsteplcm = 1; vsteplcm = 1; for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno) hsteplcm *= jas_image_cmpthstep(image, cmptno); vsteplcm *= jas_image_cmptvstep(image, cmptno); for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno) hsteplcm *= jas_image_cmpthstep(image, cmptno); vsteplcm *= jas_image_cmptvstep(image, cmptno); for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno) hsteplcm *= jas_image_cmpthstep(image, cmptno); vsteplcm *= jas_image_cmptvstep(image, cmptno); for(cmptno = 0, ccp = cp->ccps;cmptno < JAS_CAST(int, cp->numcmpts);++cmptno, 	  ++ccp) ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno); ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno); ccp->sampgrdsubstepx = 0; ccp->sampgrdsubstepx = 0; ccp->prec = jas_image_cmptprec(image, cmptno); ccp->sgnd = jas_image_cmptsgnd(image, cmptno); ccp->numstepsizes = 0; memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes)); for(cmptno = 0, ccp = cp->ccps;cmptno < JAS_CAST(int, cp->numcmpts);++cmptno, 	  ++ccp) ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno); ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno); ccp->sampgrdsubstepx = 0; ccp->sampgrdsubstepx = 0; ccp->prec = jas_image_cmptprec(image, cmptno); ccp->sgnd = jas_image_cmptsgnd(image, cmptno); ccp->numstepsizes = 0; memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes)); for(cmptno = 0, ccp = cp->ccps;cmptno < JAS_CAST(int, cp->numcmpts);++cmptno, 	  ++ccp) ccp->sampgrdstepx = jas_image_cmpthstep(image, cmptno); ccp->sampgrdstepy = jas_image_cmptvstep(image, cmptno); ccp->sampgrdsubstepx = 0; ccp->sampgrdsubstepx = 0; ccp->prec = jas_image_cmptprec(image, cmptno); ccp->sgnd = jas_image_cmptsgnd(image, cmptno); ccp->numstepsizes = 0; memset(ccp->stepsizes, 0, sizeof(ccp->stepsizes)); cp->rawsize = jas_image_rawsize(image); cp->totalsize = UINT_FAST32_MAX; tcp = &cp->tcp; tcp->csty = 0; tcp->intmode = true; tcp->prg = JPC_COD_LRCPPRG; tcp->numlyrs = 1; tcp->ilyrrates = 0; tccp = &cp->tccp; tccp->csty = 0; tccp->maxrlvls = 6; tccp->cblkwidthexpn = 6; tccp->cblkheightexpn = 6; tccp->cblksty = 0; tccp->numgbits = 2; while(!(ret = jas_tvparser_next(tvp))) switch(jas_taginfo_nonull(jas_taginfos_lookup(encopts, 		  jas_tvparser_gettag(tvp)))->id) jp2overhead = atoi(jas_tvparser_getval(tvp)); jas_tvparser_destroy(tvp); tvp = 0; if(cp->imgareatlx == UINT_FAST32_MAX) cp->imgareatlx = 0; if(cp->imgareatly == UINT_FAST32_MAX) cp->imgareatly = 0; cp->refgrdwidth = cp->imgareatlx + jas_image_width(image); cp->refgrdheight = cp->imgareatly + jas_image_height(image); if(cp->tilegrdoffx == UINT_FAST32_MAX) cp->tilegrdoffx = cp->imgareatlx; if(cp->tilegrdoffy == UINT_FAST32_MAX) cp->tilegrdoffy = cp->imgareatly; if(!cp->tilewidth) cp->tilewidth = cp->refgrdwidth - cp->tilegrdoffx; if(!cp->tileheight) cp->tileheight = cp->refgrdheight - cp->tilegrdoffy; if(cp->numcmpts == 3) mctvalid = true; for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno) for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno) for(cmptno = 0;cmptno < jas_image_numcmpts(image);++cmptno) if(mctvalid && enablemct && jas_clrspc_fam(jas_image_clrspc(image)) == JAS_CLRSPC_FAM_RGB) tcp->mctid = (tcp->intmode) ? (JPC_MCT_RCT) : (JPC_MCT_ICT); tccp->qmfbid = (tcp->intmode) ? (JPC_COX_RFT) : (JPC_COX_INS); for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno) tccp->prcwidthexpns[rlvlno] = prcwidthexpn; tccp->prcheightexpns[rlvlno] = prcheightexpn; for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno) tccp->prcwidthexpns[rlvlno] = prcwidthexpn; tccp->prcheightexpns[rlvlno] = prcheightexpn; for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno) tccp->prcwidthexpns[rlvlno] = prcwidthexpn; tccp->prcheightexpns[rlvlno] = prcheightexpn; for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno) tccp->prcwidthexpns[rlvlno] = prcwidthexpn; tccp->prcheightexpns[rlvlno] = prcheightexpn; for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno) tccp->prcwidthexpns[rlvlno] = prcwidthexpn; tccp->prcheightexpns[rlvlno] = prcheightexpn; for(rlvlno = 0;rlvlno < tccp->maxrlvls;++rlvlno) tccp->prcwidthexpns[rlvlno] = prcwidthexpn; tccp->prcheightexpns[rlvlno] = prcheightexpn; cp->numhtiles = JPC_CEILDIV(cp->refgrdwidth - cp->tilegrdoffx, 	  cp->tilewidth); cp->numvtiles = JPC_CEILDIV(cp->refgrdheight - cp->tilegrdoffy, 	  cp->tileheight); cp->numtiles = cp->numhtiles * cp->numvtiles; return cp;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_stream_initbuf(jas_stream_t *stream, int bufmode, char *buf,   int bufsize) { assert(!stream->bufbase_); if(bufmode != JAS_STREAM_UNBUF) if(!buf) if((stream->bufbase_ = jas_malloc(JAS_STREAM_BUFSIZE + 			  JAS_STREAM_MAXPUTBACK))) stream->bufmode_ |= JAS_STREAM_FREEBUF; stream->bufsize_ = JAS_STREAM_BUFSIZE; stream->bufstart_ = &stream->bufbase_[JAS_STREAM_MAXPUTBACK]; stream->ptr_ = stream->bufstart_; stream->cnt_ = 0; stream->bufmode_ |= bufmode & JAS_STREAM_BUFMODEMASK;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_icccurv_destroy(jas_iccattrval_t *attrval) { jas_icccurv_t *curv = &attrval->data.curv; if(curv->ents) jas_free(curv->ents);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccgettime(jas_stream_t *in, jas_icctime_t *time) { return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int file_close(jas_stream_obj_t *obj) { jas_stream_fileobj_t *fileobj = JAS_CAST(jas_stream_fileobj_t *, obj); int ret; ret = close(fileobj->fd); jas_free(fileobj); return ret;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_stream_gobble(jas_stream_t *stream, int n) { int m; m = n; for(m = n;m > 0;--m) for(m = n;m > 0;--m) for(m = n;m > 0;--m) for(m = n;m > 0;--m) return n;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void *jas_malloc(size_t size) { return malloc(size);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_stream_rewind(jas_stream_t *stream) { return jas_stream_seek(stream, 0, SEEK_SET);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_iccattrvalinfo_t *jas_iccattrvalinfo_lookup(jas_iccsig_t type) { jas_iccattrvalinfo_t *info; info = jas_iccattrvalinfos; for(info = jas_iccattrvalinfos;info->type;++info) if(info->type == type) return info;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int pnm_fmt(uint_fast16_t magic) { int fmt; switch(magic) fmt = PNM_FMT_TXT; return fmt;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_bitstream_close(jpc_bitstream_t *bitstream) { int ret = 0; jas_free(bitstream); return ret;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_iccattrval_t *jas_iccattrval_clone(jas_iccattrval_t *attrval) { ++attrval->refcnt; return attrval;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_iccattrtab_destroy(jas_iccattrtab_t *tab) { if(tab->attrs) while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); while(tab->numattrs > 0) jas_iccattrtab_delete(tab, 0); jas_free(tab->attrs); jas_free(tab);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_image_encode(jas_image_t *image, jas_stream_t *out, int fmt, char *optstr) { jas_image_fmtinfo_t *fmtinfo; return (fmtinfo->ops.encode) ? (*fmtinfo->ops.encode)(image, out, 	  optstr) : (-1);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_putuint16(jas_stream_t *out, uint_fast16_t val) { return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_free(void *ptr) { free(ptr);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_tmr_start(jas_tmr_t *tmr) {
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_tvparser_next(jas_tvparser_t *tvp) { char *p; char *tag; char *val; p = tvp->pos; if(*p == 'tvp->pos = p; return 1;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_icctagtabent_cmp(const void *src, const void *dst) { jas_icctagtabent_t *srctagtabent = JAS_CAST(jas_icctagtabent_t *, src); jas_icctagtabent_t *dsttagtabent = JAS_CAST(jas_icctagtabent_t *, dst); if(srctagtabent->off < dsttagtabent->off) return -1;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_pi_t *jpc_enc_pi_create(jpc_enc_cp_t *cp, jpc_enc_tile_t *tile) { jpc_pi_t *pi; int compno; jpc_picomp_t *picomp; jpc_pirlvl_t *pirlvl; jpc_enc_tcmpt_t *tcomp; int rlvlno; jpc_enc_rlvl_t *rlvl; int prcno; int *prclyrno; pi->pktno = -1; pi->numcomps = cp->numcmpts; for(compno = 0, picomp = pi->picomps;compno < pi->numcomps;++compno, 	  ++picomp) picomp->pirlvls = 0; for(compno = 0, picomp = pi->picomps;compno < pi->numcomps;++compno, 	  ++picomp) picomp->pirlvls = 0; for(compno = 0, picomp = pi->picomps;compno < pi->numcomps;++compno, 	  ++picomp) picomp->pirlvls = 0; for(compno = 0, tcomp = tile->tcmpts, picomp = pi->picomps;compno < pi->numcomps;++compno, ++tcomp, ++picomp) picomp->numrlvls = tcomp->numrlvls; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(compno = 0, tcomp = tile->tcmpts, picomp = pi->picomps;compno < pi->numcomps;++compno, ++tcomp, ++picomp) picomp->numrlvls = tcomp->numrlvls; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(compno = 0, tcomp = tile->tcmpts, picomp = pi->picomps;compno < pi->numcomps;++compno, ++tcomp, ++picomp) picomp->numrlvls = tcomp->numrlvls; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl->prclyrnos = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->numprcs = rlvl->numprcs; if(rlvl->numprcs) pi->maxrlvls = 0; for(compno = 0, tcomp = tile->tcmpts, picomp = pi->picomps;compno < pi->numcomps;++compno, ++tcomp, ++picomp) picomp->hsamp = cp->ccps[compno].sampgrdstepx; picomp->vsamp = cp->ccps[compno].sampgrdstepy; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; if(pi->maxrlvls < tcomp->numrlvls) pi->maxrlvls = tcomp->numrlvls; for(compno = 0, tcomp = tile->tcmpts, picomp = pi->picomps;compno < pi->numcomps;++compno, ++tcomp, ++picomp) picomp->hsamp = cp->ccps[compno].sampgrdstepx; picomp->vsamp = cp->ccps[compno].sampgrdstepy; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(compno = 0, tcomp = tile->tcmpts, picomp = pi->picomps;compno < pi->numcomps;++compno, ++tcomp, ++picomp) picomp->hsamp = cp->ccps[compno].sampgrdstepx; picomp->vsamp = cp->ccps[compno].sampgrdstepy; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; for(rlvlno = 0, pirlvl = picomp->pirlvls, rlvl = tcomp->rlvls;rlvlno < picomp->numrlvls;++rlvlno, ++pirlvl, ++rlvl) pirlvl->prcwidthexpn = rlvl->prcwidthexpn; pirlvl->prcheightexpn = rlvl->prcheightexpn; for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; pirlvl->numhprcs = rlvl->numhprcs; pi->numlyrs = tile->numlyrs; pi->xstart = tile->tlx; pi->ystart = tile->tly; pi->xend = tile->brx; pi->yend = tile->bry; pi->picomp = 0; pi->pirlvl = 0; pi->x = 0; pi->y = 0; pi->compno = 0; pi->rlvlno = 0; pi->prcno = 0; pi->lyrno = 0; pi->xstep = 0; pi->ystep = 0; pi->pchgno = -1; pi->defaultpchg.prgord = tile->prg; pi->defaultpchg.compnostart = 0; pi->defaultpchg.compnoend = pi->numcomps; pi->defaultpchg.rlvlnostart = 0; pi->defaultpchg.rlvlnoend = pi->maxrlvls; pi->defaultpchg.lyrnoend = pi->numlyrs; pi->pchg = 0; pi->valid = 0; return pi;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jpc_qcd_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out) { jpc_qcxcp_t *compparms = &ms->parms.qcd.compparms; return jpc_qcx_putcompparms(compparms, cstate, out);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_stream_flushbuf(jas_stream_t *stream, int c) { int len; int n; assert(!(stream->bufmode_ & JAS_STREAM_RDBUF)); len = stream->ptr_ - stream->bufstart_; stream->cnt_ = stream->bufsize_; stream->ptr_ = stream->bufstart_; stream->bufmode_ |= JAS_STREAM_WRBUF; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int pnm_getsintstr(jas_stream_t *in, int_fast32_t *val) { int c; int s; int_fast32_t v; s = 1; v = 0; while(isdigit(c)) v = 10 * v + c - '0'; while(isdigit(c)) v = 10 * v + c - '0'; while(isdigit(c)) v = 10 * v + c - '0'; if(val) *val = (s >= 0) ? v : (-v); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_tmr_stop(jas_tmr_t *tmr) {
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jpc_mqenc_setbits(jpc_mqenc_t *mqenc) { uint_fast32_t tmp = mqenc->creg + mqenc->areg; mqenc->creg |= 0xffff;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_icctxt_destroy(jas_iccattrval_t *attrval) { jas_icctxt_t *txt = &attrval->data.txt; if(txt->string) jas_free(txt->string);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_iccprof_t *jas_iccprof_create() { jas_iccprof_t *prof; prof = 0; memset(&prof->hdr, 0, sizeof(jas_icchdr_t)); prof->tagtab.numents = 0; prof->tagtab.ents = 0; return prof;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jpc_picomp_destroy(jpc_picomp_t *picomp) { int rlvlno; jpc_pirlvl_t *pirlvl; if(picomp->pirlvls) for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl_destroy(pirlvl); for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl_destroy(pirlvl); for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl_destroy(pirlvl); for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl_destroy(pirlvl); for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl_destroy(pirlvl); for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) pirlvl_destroy(pirlvl); jas_free(picomp->pirlvls);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_cstate_t *jpc_cstate_create() { jpc_cstate_t *cstate; cstate->numcomps = 0; return cstate;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_initmqctxs() { jpc_initctxs(jpc_mqctxs);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 char *jas_tvparser_gettag(jas_tvparser_t *tvp) { return tvp->tag;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jpc_pi_nextlrcp(register jpc_pi_t *pi) { jpc_pchg_t *pchg; int *prclyrno; pchg = pi->pchg; if(!pi->prgvolfirst) prclyrno = &pi->pirlvl->prclyrnos[pi->prcno]; goto skip; return 1;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_iccprof_destroy(jas_iccprof_t *prof) { if(prof->attrtab) jas_iccattrtab_destroy(prof->attrtab); jas_free(prof);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_tagtree_setvalue(jpc_tagtree_t *tree, jpc_tagtreenode_t *leaf,   int value) { jpc_tagtreenode_t *node; tree = 0; assert(value >= 0); node = leaf;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_tsfb_analyze2(jpc_tsfb_t *tsfb, int *a, int xstart, int ystart,   int width, int height, int stride, int numlvls) { if(width > 0 && height > 0) if(numlvls > 0) return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_mqenc_flush(jpc_mqenc_t *mqenc, int termmode) { int_fast16_t k; switch(termmode) jpc_mqenc_setbits(mqenc); mqenc->creg <<= mqenc->ctreg; jpc_mqenc_byteout(mqenc->areg, mqenc->creg, mqenc->ctreg, mqenc); mqenc->creg <<= mqenc->ctreg; jpc_mqenc_byteout(mqenc->areg, mqenc->creg, mqenc->ctreg, mqenc); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccxyz_input(jas_iccattrval_t *attrval, jas_stream_t *in,   int len) { return jas_iccgetxyz(in, &attrval->data.xyz);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_floorlog2(int x) { int y; assert(x > 0); y = 0; return y;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_getscctxno(int f) { int hc; int vc; int n; n = 0; hc = JAS_MIN(((f & (JPC_ESIG | JPC_ESGN)) == JPC_ESIG) + ((f & (JPC_WSIG | JPC_WSGN)) == JPC_WSIG), 	  1) - JAS_MIN(((f & (JPC_ESIG | JPC_ESGN)) == (JPC_ESIG | JPC_ESGN)) + 	  ((f & (JPC_WSIG | JPC_WSGN)) == (JPC_WSIG | JPC_WSGN)), 1); vc = JAS_MIN(((f & (JPC_NSIG | JPC_NSGN)) == JPC_NSIG) + ((f & (JPC_SSIG | JPC_SSGN)) == JPC_SSIG), 	  1) - JAS_MIN(((f & (JPC_NSIG | JPC_NSGN)) == (JPC_NSIG | JPC_NSGN)) + 	  ((f & (JPC_SSIG | JPC_SSGN)) == (JPC_SSIG | JPC_SSGN)), 1); assert(hc >= -1 && hc <= 1 && vc >= -1 && vc <= 1); if(hc < 0) hc = -hc; vc = -vc; if(hc == 1) n = 4; assert(n < JPC_NUMSCCTXS); return JPC_SCCTXNO + n;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int file_read(jas_stream_obj_t *obj, char *buf, int cnt) { jas_stream_fileobj_t *fileobj = JAS_CAST(jas_stream_fileobj_t *, obj); return read(fileobj->fd, buf, cnt);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jp2_ftyp_putdata(jp2_box_t *box, jas_stream_t *out) { jp2_ftyp_t *ftyp = &box->data.ftyp; unsigned int i; for(i = 0;i < ftyp->numcompatcodes;++i) return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jpc_enc_cblk_t *cblk_create(jpc_enc_cblk_t *cblk, jpc_enc_cp_t *cp, jpc_enc_prc_t *prc) { jpc_enc_band_t *band; uint_fast32_t cblktlx; uint_fast32_t cblktly; uint_fast32_t cblkbrx; uint_fast32_t cblkbry; jpc_enc_rlvl_t *rlvl; uint_fast32_t cblkxind; uint_fast32_t cblkyind; uint_fast32_t cblkno; uint_fast32_t tlcblktlx; uint_fast32_t tlcblktly; cblkno = cblk - prc->cblks; cblkxind = cblkno _ prc->numhcblks; cblkyind = cblkno / prc->numhcblks; rlvl = prc->band->rlvl; cblk->prc = prc; cblk->numpasses = 0; cblk->passes = 0; cblk->numencpasses = 0; cblk->numimsbs = 0; cblk->numlenbits = 0; cblk->stream = 0; cblk->mqenc = 0; cblk->flags = 0; cblk->numbps = 0; cblk->curpass = 0; cblk->data = 0; cblk->savedcurpass = 0; cblk->savednumlenbits = 0; cblk->savednumencpasses = 0; band = prc->band; tlcblktlx = JPC_FLOORTOMULTPOW2(prc->tlx, rlvl->cblkwidthexpn); tlcblktly = JPC_FLOORTOMULTPOW2(prc->tly, rlvl->cblkheightexpn); cblktlx = JAS_MAX(tlcblktlx + (cblkxind << rlvl->cblkwidthexpn), prc->tlx); cblktly = JAS_MAX(tlcblktly + (cblkyind << rlvl->cblkheightexpn), prc->tly); cblkbrx = JAS_MIN(tlcblktlx + ((cblkxind + 1) << rlvl->cblkwidthexpn), 	  prc->brx); cblkbry = JAS_MIN(tlcblktly + ((cblkyind + 1) << rlvl->cblkheightexpn), 	  prc->bry); assert(cblktlx < cblkbrx && cblktly < cblkbry); jas_seq2d_bindsub(cblk->data, band->data, cblktlx, cblktly, cblkbrx, cblkbry); return cblk;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void rlvl_destroy(jpc_enc_rlvl_t *rlvl) { jpc_enc_band_t *band; uint_fast16_t bandno; if(rlvl->bands) for(bandno = 0, band = rlvl->bands;bandno < rlvl->numbands;++bandno, ++band) band_destroy(band); for(bandno = 0, band = rlvl->bands;bandno < rlvl->numbands;++bandno, ++band) band_destroy(band); for(bandno = 0, band = rlvl->bands;bandno < rlvl->numbands;++bandno, ++band) band_destroy(band); jas_free(rlvl->bands);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_stream_t *jas_stream_create() { jas_stream_t *stream; stream->openmode_ = 0; stream->bufmode_ = 0; stream->flags_ = 0; stream->bufbase_ = 0; stream->bufstart_ = 0; stream->bufsize_ = 0; stream->ptr_ = 0; stream->cnt_ = 0; stream->ops_ = 0; stream->obj_ = 0; stream->rwcnt_ = 0; stream->rwlimit_ = -1; return stream;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void pirlvl_destroy(jpc_pirlvl_t *rlvl) { if(rlvl->prclyrnos) jas_free(rlvl->prclyrnos);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void calcrdslopes(jpc_enc_cblk_t *cblk) { jpc_enc_pass_t *endpasses; jpc_enc_pass_t *pass0; jpc_enc_pass_t *pass1; jpc_enc_pass_t *pass2; jpc_flt_t slope0; jpc_flt_t slope; jpc_flt_t dd; long dr; endpasses = &cblk->passes[cblk->numpasses]; pass2 = cblk->passes; slope0 = 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jpc_enc_prc_t *prc_create(jpc_enc_prc_t *prc, jpc_enc_cp_t *cp, jpc_enc_band_t *band) { uint_fast32_t prcno; uint_fast32_t prcxind; uint_fast32_t prcyind; uint_fast32_t cbgtlx; uint_fast32_t cbgtly; uint_fast32_t tlprctlx; uint_fast32_t tlprctly; uint_fast32_t tlcbgtlx; uint_fast32_t tlcbgtly; uint_fast16_t rlvlno; jpc_enc_rlvl_t *rlvl; uint_fast32_t tlcblktlx; uint_fast32_t tlcblktly; uint_fast32_t brcblkbrx; uint_fast32_t brcblkbry; uint_fast32_t cblkno; jpc_enc_cblk_t *cblk; jpc_enc_tcmpt_t *tcmpt; prc->cblks = 0; prc->incltree = 0; prc->savincltree = 0; prc->nlibtree = 0; prc->savnlibtree = 0; rlvl = band->rlvl; tcmpt = rlvl->tcmpt; rlvlno = rlvl - tcmpt->rlvls; prcno = prc - band->prcs; prcxind = prcno _ rlvl->numhprcs; prcyind = prcno / rlvl->numhprcs; prc->band = band; tlprctlx = JPC_FLOORTOMULTPOW2(rlvl->tlx, rlvl->prcwidthexpn); tlprctly = JPC_FLOORTOMULTPOW2(rlvl->tly, rlvl->prcheightexpn); tlcbgtlx = JPC_CEILDIVPOW2(tlprctlx, 1); tlcbgtly = JPC_CEILDIVPOW2(tlprctly, 1); cbgtlx = tlcbgtlx + (prcxind << rlvl->cbgwidthexpn); cbgtly = tlcbgtly + (prcyind << rlvl->cbgheightexpn); prc->tlx = JAS_MAX(jas_seq2d_xstart(band->data), cbgtlx); prc->tly = JAS_MAX(jas_seq2d_ystart(band->data), cbgtly); prc->brx = JAS_MIN(jas_seq2d_xend(band->data), cbgtlx + 	  (1 << rlvl->cbgwidthexpn)); prc->bry = JAS_MIN(jas_seq2d_yend(band->data), cbgtly + 	  (1 << rlvl->cbgheightexpn)); if(prc->tlx < prc->brx && prc->tly < prc->bry) tlcblktlx = JPC_FLOORTOMULTPOW2(prc->tlx, rlvl->cblkwidthexpn); tlcblktly = JPC_FLOORTOMULTPOW2(prc->tly, rlvl->cblkheightexpn); brcblkbrx = JPC_CEILTOMULTPOW2(prc->brx, rlvl->cblkwidthexpn); brcblkbry = JPC_CEILTOMULTPOW2(prc->bry, rlvl->cblkheightexpn); prc->numhcblks = JPC_FLOORDIVPOW2(brcblkbrx - tlcblktlx, 		  rlvl->cblkwidthexpn); prc->numvcblks = JPC_FLOORDIVPOW2(brcblkbry - tlcblktly, 		  rlvl->cblkheightexpn); prc->numcblks = prc->numhcblks * prc->numvcblks; for(cblkno = 0, cblk = prc->cblks;cblkno < prc->numcblks;++cblkno, ++cblk) cblk->passes = 0; cblk->stream = 0; cblk->mqenc = 0; cblk->data = 0; cblk->flags = 0; cblk->prc = prc; for(cblkno = 0, cblk = prc->cblks;cblkno < prc->numcblks;++cblkno, ++cblk) return prc;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_cmpxform_destroy(jas_cmpxform_t *pxform) { if(--pxform->refcnt <= 0) (*pxform->ops->destroy)(pxform); jas_free(pxform);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_iccattrval_t *jas_iccprof_getattr(jas_iccprof_t *prof,   jas_iccattrname_t name) { int i; jas_iccattrval_t *attrval; return attrval;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_getmagctxno(int f) { int n; n = 2; assert(n < JPC_NUMMAGCTXS); return JPC_MAGCTXNO + n;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_stream_fillbuf(jas_stream_t *stream, int getflag) { int c; assert((stream->bufmode_ & JAS_STREAM_WRBUF) == 0); assert(stream->ptr_ - stream->bufstart_ <= stream->bufsize_); stream->bufmode_ |= JAS_STREAM_RDBUF; stream->ptr_ = stream->bufstart_; if((stream->cnt_ = (*stream->ops_->read_)(stream->obj_, 	  (char *) stream->bufstart_, stream->bufsize_)) <= 0) stream->flags_ |= JAS_STREAM_EOF; stream->cnt_ = 0; return EOF;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_cstate_destroy(jpc_cstate_t *cstate) { jas_free(cstate);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_mqenc_destroy(jpc_mqenc_t *mqenc) { if(mqenc->ctxs) jas_free(mqenc->ctxs); jas_free(mqenc);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_image_destroy(jas_image_t *image) { int i; if(image->cmpts_) for(i = 0;i < image->numcmpts_;++i) jas_image_cmpt_destroy(image->cmpts_[i]); image->cmpts_[i] = 0; for(i = 0;i < image->numcmpts_;++i) jas_image_cmpt_destroy(image->cmpts_[i]); image->cmpts_[i] = 0; for(i = 0;i < image->numcmpts_;++i) jas_image_cmpt_destroy(image->cmpts_[i]); image->cmpts_[i] = 0; jas_free(image->cmpts_); if(image->cmprof_) jas_cmprof_destroy(image->cmprof_); jas_free(image);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void cmdopts_destroy(cmdopts_t *cmdopts) { free(cmdopts);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_initctxs(jpc_mqctx_t *ctxs) { jpc_mqctx_t *ctx; int i; ctx = ctxs; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 3; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 4; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 0; ++ctx; for(i = 0;i < JPC_NUMCTXS;++i) ctx->mps = 0; switch(i) ctx->ind = 46; ++ctx;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_ms_t *jpc_ms_create(int type) { jpc_ms_t *ms; jpc_mstabent_t *mstabent; ms->id = type; ms->len = 0; mstabent = jpc_mstab_lookup(ms->id); ms->ops = &mstabent->ops; memset(&ms->parms, 0, sizeof(jpc_msparms_t)); return ms;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int pnm_getdata(jas_stream_t *in, pnm_hdr_t *hdr, jas_image_t *image) { int ret; int cmptno; int fmt; jas_matrix_t *data[3]; int x; int y; int_fast64_t v; int depth; int type; int c; int n; ret = -1; fmt = pnm_fmt(hdr->magic); type = pnm_type(hdr->magic); depth = pnm_maxvaltodepth(hdr->maxval); data[0] = 0; data[1] = 0; data[2] = 0; for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(y = 0;y < hdr->height;++y) for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(x = 0;x < hdr->width;++x) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) uint_fast32_t uv; if(pnm_getuintstr(in, &uv)) uv = 0; v = uv; jas_matrix_set(data[cmptno], 0, x, v); for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) for(cmptno = 0;cmptno < hdr->numcmpts;++cmptno) ret = 0; if(data[cmptno]) jas_matrix_destroy(data[cmptno]); if(data[cmptno]) jas_matrix_destroy(data[cmptno]); if(data[cmptno]) jas_matrix_destroy(data[cmptno]); return ret;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jp2_box_put(jp2_box_t *box, jas_stream_t *out) { jas_stream_t *tmpstream; bool extlen; bool dataflag; tmpstream = 0; dataflag = !(box->info->flags & (JP2_BOX_SUPER | JP2_BOX_NODATA)); extlen = (box->len >= (((uint_fast64_t)1) << 32)) != 0; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_putdata(jas_stream_t *out, jas_stream_t *in, long len) { return jas_stream_copy(out, in, len);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jpc_enc_band_t *band_create(jpc_enc_band_t *band, jpc_enc_cp_t *cp,   jpc_enc_rlvl_t *rlvl, jpc_tsfb_band_t *bandinfos) { uint_fast16_t bandno; uint_fast16_t gblbandno; uint_fast16_t rlvlno; jpc_tsfb_band_t *bandinfo; jpc_enc_tcmpt_t *tcmpt; uint_fast32_t prcno; jpc_enc_prc_t *prc; tcmpt = rlvl->tcmpt; band->data = 0; band->prcs = 0; band->rlvl = rlvl; rlvlno = rlvl - rlvl->tcmpt->rlvls; bandno = band - rlvl->bands; gblbandno = (!rlvlno) ? 0 : (3 * (rlvlno - 1) + bandno + 1); bandinfo = &bandinfos[gblbandno]; if(bandinfo->xstart != bandinfo->xend && bandinfo->ystart != bandinfo->yend) jas_seq2d_bindsub(band->data, tcmpt->data, bandinfo->locxstart, 	  bandinfo->locystart, bandinfo->locxend, bandinfo->locyend); jas_seq2d_setshift(band->data, bandinfo->xstart, bandinfo->ystart); band->orient = bandinfo->orient; band->analgain = JPC_NOMINALGAIN(cp->tccp.qmfbid, tcmpt->numrlvls, rlvlno, 	  band->orient); band->numbps = 0; band->absstepsize = 0; band->stepsize = 0; band->synweight = bandinfo->synenergywt; if(band->data) for(prcno = 0, prc = band->prcs;prcno < rlvl->numprcs;++prcno, 	  ++prc) prc->cblks = 0; prc->incltree = 0; prc->nlibtree = 0; prc->savincltree = 0; prc->savnlibtree = 0; prc->band = band; for(prcno = 0, prc = band->prcs;prcno < rlvl->numprcs;++prcno, 	  ++prc) return band;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_image_fmtinfo_t *jas_image_lookupfmtbyid(int id) { int i; jas_image_fmtinfo_t *fmtinfo; for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) if(fmtinfo->id == id) return fmtinfo;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_tsfb_destroy(jpc_tsfb_t *tsfb) { free(tsfb);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jpc_bitstream_t *jpc_bitstream_alloc() { jpc_bitstream_t *bitstream; bitstream->stream_ = 0; bitstream->cnt_ = 0; bitstream->flags_ = 0; bitstream->openmode_ = 0; return bitstream;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_setdbglevel(int dbglevel) { int olddbglevel; olddbglevel = jas_dbglevel; jas_dbglevel = dbglevel; return olddbglevel;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_tagtree_encode(jpc_tagtree_t *tree, jpc_tagtreenode_t *leaf,   int threshold, jpc_bitstream_t *out) { jpc_tagtreenode_t *stk[JPC_TAGTREE_MAXDEPTH - 1]; jpc_tagtreenode_t **stkptr; jpc_tagtreenode_t *node; int low; tree = 0; assert(leaf); assert(threshold >= 0); stkptr = stk; node = leaf; low = 0; low = node->low_; while(low < threshold) ++low; node->low_ = low; if(stkptr == stk) return (leaf->low_ < threshold) ? 1 : 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_cmpxform_t *jas_cmpxform_create0() { jas_cmpxform_t *pxform; memset(pxform, 0, sizeof(jas_cmpxform_t)); pxform->refcnt = 0; pxform->ops = 0; return pxform;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jpc_sot_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out) { jpc_sot_t *sot = &ms->parms.sot; cstate = 0; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 cmdopts_t *cmdopts_parse(int argc, char **argv) { typedef enum { 		CMDOPT_HELP = 0, 		CMDOPT_VERBOSE, 		CMDOPT_INFILE, 		CMDOPT_INFMT, 		CMDOPT_INOPT, 		CMDOPT_OUTFILE, 		CMDOPT_OUTFMT, 		CMDOPT_OUTOPT, 		CMDOPT_VERSION, 		CMDOPT_DEBUG, 		CMDOPT_CMPTNO, 		CMDOPT_SRGB 	} cmdoptid_t; static jas_opt_t cmdoptions[] = { 		{CMDOPT_HELP, 'help', 0}, 		{CMDOPT_VERBOSE, 'verbose', 0}, 		{CMDOPT_INFILE, 'input', JAS_OPT_HASARG}, 		{CMDOPT_INFILE, 'f', JAS_OPT_HASARG}, 		{CMDOPT_INFMT, 'input-format', JAS_OPT_HASARG}, 		{CMDOPT_INFMT, 't', JAS_OPT_HASARG}, 		{CMDOPT_INOPT, 'input-option', JAS_OPT_HASARG}, 		{CMDOPT_INOPT, 'o', JAS_OPT_HASARG}, 		{CMDOPT_OUTFILE, 'output', JAS_OPT_HASARG}, 		{CMDOPT_OUTFILE, 'F', JAS_OPT_HASARG}, 		{CMDOPT_OUTFMT, 'output-format', JAS_OPT_HASARG}, 		{CMDOPT_OUTFMT, 'T', JAS_OPT_HASARG}, 		{CMDOPT_OUTOPT, 'output-option', JAS_OPT_HASARG}, 		{CMDOPT_OUTOPT, 'O', JAS_OPT_HASARG}, 		{CMDOPT_VERSION, 'version', 0}, 		{CMDOPT_DEBUG, 'debug-level', JAS_OPT_HASARG}, 		{CMDOPT_CMPTNO, 'cmptno', JAS_OPT_HASARG}, 		{CMDOPT_SRGB, 'force-srgb', 0}, 		{CMDOPT_SRGB, 'S', 0}, 		{-1, 0, 0} 	}; cmdopts_t *cmdopts; int c; cmdopts->infile = 0; cmdopts->infmt = -1; cmdopts->inopts = 0; cmdopts->inoptsbuf[0] = 'cmdopts->outfile = 0; cmdopts->outfmt = -1; cmdopts->outopts = 0; cmdopts->outoptsbuf[0] = 'cmdopts->verbose = 0; cmdopts->version = 0; cmdopts->cmptno = -1; cmdopts->debug = 0; cmdopts->srgb = 0; while((c = jas_getopt(argc, argv, cmdoptions)) != EOF) switch(c) cmdopts->infile = jas_optarg; while((c = jas_getopt(argc, argv, cmdoptions)) != EOF) switch(c) cmdopts->outfile = jas_optarg; while((c = jas_getopt(argc, argv, cmdoptions)) != EOF) switch(c)
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_stream_write(jas_stream_t *stream, const void *buf, int cnt) { int n; const char *bufptr; bufptr = buf; n = 0; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; while(n < cnt) ++bufptr; ++n; return n;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_getzcctxno(int f, int orient) { int h; int v; int d; int n; int t; int hv; n = 0; h = ((f & JPC_WSIG) != 0) + ((f & JPC_ESIG) != 0); v = ((f & JPC_NSIG) != 0) + ((f & JPC_SSIG) != 0); d = ((f & JPC_NWSIG) != 0) + ((f & JPC_NESIG) != 0) + ((f & JPC_SESIG) != 0) + ((f & JPC_SWSIG) != 0); switch(orient) hv = h + v; n = 8; assert(n < JPC_NUMZCCTXS); return JPC_ZCCTXNO + n;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_image_t *jas_image_decode(jas_stream_t *in, int fmt, char *optstr) { jas_image_fmtinfo_t *fmtinfo; jas_image_t *image; image = 0; if(!jas_clrspc_isunknown(image->clrspc_) && 	  !jas_clrspc_isgeneric(image->clrspc_) && !image->cmprof_) return image;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_tsfb_t *jpc_cod_gettsfb(int qmfbid, int numlvls) { jpc_tsfb_t *tsfb; if(numlvls > 0) switch(qmfbid) tsfb->qmfb = &jpc_ft_qmfb2d; tsfb->numlvls = numlvls; return tsfb;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jp2_box_t *jp2_box_create(int type) { jp2_box_t *box; jp2_boxinfo_t *boxinfo; memset(box, 0, sizeof(jp2_box_t)); box->type = type; box->len = 0; box->info = boxinfo; box->ops = &boxinfo->ops; return box;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_qmfb_split_row(jpc_fix_t *a, int numcols, int parity) { int bufsize = JPC_CEILDIVPOW2(numcols, 1); jpc_fix_t splitbuf[bufsize]; jpc_fix_t *buf = splitbuf; register jpc_fix_t *srcptr; register jpc_fix_t *dstptr; register int n; register int m; int hstartcol;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_icctxtdesc_destroy(jas_iccattrval_t *attrval) { jas_icctxtdesc_t *txtdesc = &attrval->data.txtdesc; if(txtdesc->ascdata) jas_free(txtdesc->ascdata); if(txtdesc->ucdata) jas_free(txtdesc->ucdata);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int pnm_maxvaltodepth(uint_fast32_t maxval) { int n; n = 0; while(maxval > 0) maxval >>= 1; ++n; return n;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void band_destroy(jpc_enc_band_t *band) { jpc_enc_prc_t *prc; jpc_enc_rlvl_t *rlvl; uint_fast32_t prcno; if(band->prcs) rlvl = band->rlvl; for(prcno = 0, prc = band->prcs;prcno < rlvl->numprcs;++prcno, ++prc) prc_destroy(prc); jas_free(band->prcs); if(band->data)
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_opt_t *jas_optlookup(jas_opt_t *opts, char *name) { jas_opt_t *opt; for(opt = opts;opt->id >= 0 && opt->name;++opt) for(opt = opts;opt->id >= 0 && opt->name;++opt) for(opt = opts;opt->id >= 0 && opt->name;++opt) for(opt = opts;opt->id >= 0 && opt->name;++opt) for(opt = opts;opt->id >= 0 && opt->name;++opt) for(opt = opts;opt->id >= 0 && opt->name;++opt) for(opt = opts;opt->id >= 0 && opt->name;++opt) for(opt = opts;opt->id >= 0 && opt->name;++opt) for(opt = opts;opt->id >= 0 && opt->name;++opt) for(opt = opts;opt->id >= 0 && opt->name;++opt) for(opt = opts;opt->id >= 0 && opt->name;++opt) for(opt = opts;opt->id >= 0 && opt->name;++opt) if(!strcmp(opt->name, name)) return opt;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_cmpxformseq_delete(jas_cmpxformseq_t *pxformseq, int i) { assert(i >= 0 && i < pxformseq->numpxforms); jas_cmpxform_destroy(pxformseq->pxforms[i]); pxformseq->pxforms[i] = 0; --pxformseq->numpxforms; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_tvparser_destroy(jas_tvparser_t *tvp) { if(tvp->buf) jas_free(tvp->buf); jas_free(tvp);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_iccattrtab_t *jas_iccattrtab_create() { jas_iccattrtab_t *tab; tab = 0; tab->maxattrs = 0; tab->numattrs = 0; tab->attrs = 0; return tab;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_qmfb_split_colres(jpc_fix_t *a, int numrows, int numcols,   int stride, int parity) { int bufsize = JPC_CEILDIVPOW2(numrows, 1); jpc_fix_t splitbuf[bufsize * numcols]; jpc_fix_t *buf = splitbuf; jpc_fix_t *srcptr; jpc_fix_t *dstptr; register jpc_fix_t *srcptr2; register jpc_fix_t *dstptr2; register int n; register int i; int m; int hstartcol; if(numrows >= 2) hstartcol = (numrows + 1 - parity) >> 1; m = (parity) ? hstartcol : (numrows - hstartcol); n = m; dstptr = buf; srcptr = &a[(1 - parity) * stride]; while(n-- > 0) dstptr2 = dstptr; srcptr2 = srcptr; for(i = 0;i < numcols;++i) *dstptr2 = *srcptr2; ++dstptr2; ++srcptr2; dstptr += numcols; srcptr += stride << 1; dstptr = &a[(1 - parity) * stride]; srcptr = &a[(2 - parity) * stride]; n = numrows - m - (!parity); dstptr = &a[hstartcol * stride]; srcptr = buf; n = m; while(n-- > 0) dstptr2 = dstptr; srcptr2 = srcptr; for(i = 0;i < numcols;++i) *dstptr2 = *srcptr2; ++dstptr2; ++srcptr2; dstptr += stride; srcptr += numcols;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_stream_close(jas_stream_t *stream) { jas_stream_flush(stream); (*stream->ops_->close_)(stream->obj_); jas_stream_destroy(stream); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_ms_destroy(jpc_ms_t *ms) { jas_free(ms);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_image_setbbox(jas_image_t *image) { jas_image_cmpt_t *cmpt; int cmptno; int_fast32_t x; int_fast32_t y; if(image->numcmpts_ > 0) cmpt = image->cmpts_[0]; image->tlx_ = cmpt->tlx_; image->tly_ = cmpt->tly_; image->brx_ = cmpt->tlx_ + cmpt->hstep_ * (cmpt->width_ - 1) + 1; image->bry_ = cmpt->tly_ + cmpt->vstep_ * (cmpt->height_ - 1) + 1; for(cmptno = 1;cmptno < image->numcmpts_;++cmptno) cmpt = image->cmpts_[cmptno]; x = cmpt->tlx_ + cmpt->hstep_ * (cmpt->width_ - 1) + 1; y = cmpt->tly_ + cmpt->vstep_ * (cmpt->height_ - 1) + 1; for(cmptno = 1;cmptno < image->numcmpts_;++cmptno) cmpt = image->cmpts_[cmptno]; x = cmpt->tlx_ + cmpt->hstep_ * (cmpt->width_ - 1) + 1; y = cmpt->tly_ + cmpt->vstep_ * (cmpt->height_ - 1) + 1;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_mqenc_init(jpc_mqenc_t *mqenc) { mqenc->areg = 0x8000; mqenc->outbuf = -1; mqenc->creg = 0; mqenc->ctreg = 12; mqenc->lastbyte = -1; mqenc->err = 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void prc_destroy(jpc_enc_prc_t *prc) { jpc_enc_cblk_t *cblk; uint_fast32_t cblkno; if(prc->cblks) for(cblkno = 0, cblk = prc->cblks;cblkno < prc->numcblks;++cblkno, ++cblk) cblk_destroy(cblk); jas_free(prc->cblks); if(prc->incltree) jpc_tagtree_destroy(prc->incltree); if(prc->nlibtree) jpc_tagtree_destroy(prc->nlibtree); if(prc->savincltree) jpc_tagtree_destroy(prc->savincltree); if(prc->savnlibtree) jpc_tagtree_destroy(prc->savnlibtree);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_iccprof_setattr(jas_iccprof_t *prof, jas_iccattrname_t name,   jas_iccattrval_t *val) { int i; if(val) return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_image_t *jas_image_create0() { jas_image_t *image; image->tlx_ = 0; image->tly_ = 0; image->brx_ = 0; image->bry_ = 0; image->clrspc_ = JAS_CLRSPC_UNKNOWN; image->numcmpts_ = 0; image->maxcmpts_ = 0; image->cmpts_ = 0; image->inmem_ = true; image->cmprof_ = 0; return image;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_image_fmtinfo_t *jas_image_lookupfmtbyname(const char *name) { int i; jas_image_fmtinfo_t *fmtinfo; for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, ++fmtinfo) if(!strcmp(fmtinfo->name, name)) return fmtinfo;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_enc_tile_destroy(jpc_enc_tile_t *tile) { jpc_enc_tcmpt_t *tcmpt; uint_fast16_t cmptno; if(tile->tcmpts) for(cmptno = 0, tcmpt = tile->tcmpts;cmptno < 		  tile->numtcmpts;++cmptno, ++tcmpt) tcmpt_destroy(tcmpt); for(cmptno = 0, tcmpt = tile->tcmpts;cmptno < 		  tile->numtcmpts;++cmptno, ++tcmpt) tcmpt_destroy(tcmpt); for(cmptno = 0, tcmpt = tile->tcmpts;cmptno < 		  tile->numtcmpts;++cmptno, ++tcmpt) tcmpt_destroy(tcmpt); jas_free(tile->tcmpts); if(tile->lyrsizes) jas_free(tile->lyrsizes); if(tile->pi) jpc_pi_destroy(tile->pi); jas_free(tile);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_tagtree_reset(jpc_tagtree_t *tree) { int n; jpc_tagtreenode_t *node; n = tree->numnodes_; node = tree->nodes_; while(--n >= 0) node->value_ = INT_MAX; node->low_ = 0; node->known_ = 0; ++node;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int clrspctojp2(jas_clrspc_t clrspc) { switch(clrspc) return JP2_COLR_SRGB;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jpc_mstabent_t *jpc_mstab_lookup(int id) { jpc_mstabent_t *mstabent; if(mstabent->id == id || mstabent->id < 0) return mstabent;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jpc_putcommacode(jpc_bitstream_t *out, int n) { assert(n >= 0); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_matrix_t *jas_matrix_create(int numrows, int numcols) { jas_matrix_t *matrix; int i; matrix->flags_ = 0; matrix->numrows_ = numrows; matrix->numcols_ = numcols; matrix->rows_ = 0; matrix->maxrows_ = numrows; matrix->data_ = 0; matrix->datasize_ = numrows * numcols; if(matrix->maxrows_ > 0) if(matrix->datasize_ > 0) for(i = 0;i < numrows;++i) matrix->rows_[i] = &matrix->data_[i * matrix->numcols_]; for(i = 0;i < numrows;++i) matrix->rows_[i] = &matrix->data_[i * matrix->numcols_]; for(i = 0;i < numrows;++i) matrix->rows_[i] = &matrix->data_[i * matrix->numcols_]; for(i = 0;i < numrows;++i) matrix->rows_[i] = &matrix->data_[i * matrix->numcols_]; for(i = 0;i < numrows;++i) matrix->rows_[i] = &matrix->data_[i * matrix->numcols_]; for(i = 0;i < numrows;++i) matrix->rows_[i] = &matrix->data_[i * matrix->numcols_]; for(i = 0;i < numrows;++i) matrix->rows_[i] = &matrix->data_[i * matrix->numcols_]; for(i = 0;i < numrows;++i) matrix->rows_[i] = &matrix->data_[i * matrix->numcols_]; for(i = 0;i < numrows;++i) matrix->rows_[i] = &matrix->data_[i * matrix->numcols_]; for(i = 0;i < numrows;++i) matrix->rows_[i] = &matrix->data_[i * matrix->numcols_]; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; for(i = 0;i < matrix->datasize_;++i) matrix->data_[i] = 0; matrix->xstart_ = 0; matrix->ystart_ = 0; matrix->xend_ = matrix->numcols_; matrix->yend_ = matrix->numrows_; return matrix;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_taginfo_t *jas_taginfo_nonull(jas_taginfo_t *taginfo) { static jas_taginfo_t invalidtaginfo = { 		-1, 0 	}; return taginfo ? taginfo : &invalidtaginfo;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jpc_encclnpass(jpc_mqenc_t *mqenc, int bitpos, int orient, int vcausalflag, int segsymflag, jas_matrix_t *flags,   jas_matrix_t *data, int term, long *nmsedec) { int i; int j; int k; int vscanlen; int v; int runlen; jpc_fix_t *fp; int width; int height; jpc_fix_t *dp; int one; int frowstep; int drowstep; int fstripestep; int dstripestep; jpc_fix_t *fstripestart; jpc_fix_t *dstripestart; jpc_fix_t *fvscanstart; jpc_fix_t *dvscanstart; *nmsedec = 0; width = jas_matrix_numcols(data); height = jas_matrix_numrows(data); frowstep = jas_matrix_rowstep(flags); drowstep = jas_matrix_rowstep(data); fstripestep = frowstep << 2; dstripestep = drowstep << 2; one = 1 << (bitpos + JPC_NUMEXTRABITS); fstripestart = jas_matrix_getref(flags, 1, 1); dstripestart = jas_matrix_getref(data, 0, 0); for(i = height;i > 0;i -= 4, fstripestart += fstripestep, 	  dstripestart += dstripestep) fvscanstart = fstripestart; dvscanstart = dstripestart; vscanlen = JAS_MIN(i, 4); for(j = width;j > 0;--j, ++fvscanstart, ++dvscanstart) fp = fvscanstart; runlen = 0; fp = fvscanstart; dp = dvscanstart; k = vscanlen; goto clnpass_full0; if(--k <= 0) if(term) jpc_mqenc_flush(mqenc, term - 1); return jpc_mqenc_error(mqenc) ? (-1) : 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_cmshapmatlut_set(jas_cmshapmatlut_t *lut, jas_icccurv_t *curv) { jas_cmreal_t gamma; int i; gamma = 0; jas_cmshapmatlut_cleanup(lut); lut->size = curv->numents; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; for(i = 0;i < lut->size;++i) lut->data[i] = curv->ents[i] / 65535.0; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_cmshapmatlut_init(jas_cmshapmatlut_t *lut) { lut->data = 0; lut->size = 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_iccattrval_t *jas_iccattrval_create(jas_iccuint32_t type) { jas_iccattrval_t *attrval; jas_iccattrvalinfo_t *info; attrval->ops = &info->ops; attrval->type = type; ++attrval->refcnt; memset(&attrval->data, 0, sizeof(attrval->data)); return attrval;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jpc_com_destroyparms(jpc_ms_t *ms) { jpc_com_t *com = &ms->parms.com; if(com->data) jas_free(com->data);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 char *jas_strdup(const char *s) { int n; char *p; n = strlen(s) + 1; strcpy(p, s); return p;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_firstone(int x) { int n; assert(x >= 0); n = -1; while(x > 0) x >>= 1; ++n; return n;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccattrtab_lookup(jas_iccattrtab_t *attrtab,   jas_iccuint32_t name) { int i; jas_iccattr_t *attr; for(i = 0;i < attrtab->numattrs;++i) attr = &attrtab->attrs[i]; for(i = 0;i < attrtab->numattrs;++i) attr = &attrtab->attrs[i]; for(i = 0;i < attrtab->numattrs;++i) attr = &attrtab->attrs[i]; for(i = 0;i < attrtab->numattrs;++i) attr = &attrtab->attrs[i]; for(i = 0;i < attrtab->numattrs;++i) attr = &attrtab->attrs[i]; for(i = 0;i < attrtab->numattrs;++i) attr = &attrtab->attrs[i]; for(i = 0;i < attrtab->numattrs;++i) attr = &attrtab->attrs[i]; if(attr->name == name) return i;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_image_t *pnm_decode(jas_stream_t *in, char *opts) { pnm_hdr_t hdr; jas_image_t *image; jas_image_cmptparm_t cmptparms[3]; jas_image_cmptparm_t *cmptparm; int i; for(i = 0, cmptparm = cmptparms;i < hdr.numcmpts;++i, ++cmptparm) cmptparm->tlx = 0; cmptparm->tly = 0; cmptparm->hstep = 1; cmptparm->vstep = 1; cmptparm->width = hdr.width; cmptparm->height = hdr.height; cmptparm->prec = pnm_maxvaltodepth(hdr.maxval); cmptparm->sgnd = hdr.sgnd; for(i = 0, cmptparm = cmptparms;i < hdr.numcmpts;++i, ++cmptparm) cmptparm->tlx = 0; cmptparm->tly = 0; cmptparm->hstep = 1; cmptparm->vstep = 1; cmptparm->width = hdr.width; cmptparm->height = hdr.height; cmptparm->prec = pnm_maxvaltodepth(hdr.maxval); cmptparm->sgnd = hdr.sgnd; for(i = 0, cmptparm = cmptparms;i < hdr.numcmpts;++i, ++cmptparm) cmptparm->tlx = 0; cmptparm->tly = 0; cmptparm->hstep = 1; cmptparm->vstep = 1; cmptparm->width = hdr.width; cmptparm->height = hdr.height; cmptparm->prec = pnm_maxvaltodepth(hdr.maxval); cmptparm->sgnd = hdr.sgnd; if(hdr.numcmpts == 3) jas_image_setclrspc(image, JAS_CLRSPC_SRGB); jas_image_setcmpttype(image, 0, 		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R)); jas_image_setcmpttype(image, 1, 		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G)); jas_image_setcmpttype(image, 2, 		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)); return image;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_cmpxform_t *jas_cmpxform_createshapmat() { int i; int j; jas_cmpxform_t *pxform; jas_cmshapmat_t *shapmat; pxform->ops = &shapmat_ops; shapmat = &pxform->data.shapmat; shapmat->mono = 0; shapmat->order = 0; shapmat->useluts = 0; shapmat->usemat = 0; for(i = 0;i < 3;++i) jas_cmshapmatlut_init(&shapmat->luts[i]); for(i = 0;i < 3;++i) jas_cmshapmatlut_init(&shapmat->luts[i]); for(i = 0;i < 3;++i) jas_cmshapmatlut_init(&shapmat->luts[i]); for(i = 0;i < 3;++i) for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; for(i = 0;i < 3;++i) for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; for(i = 0;i < 3;++i) for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; for(j = 0;j < 4;++j) shapmat->mat[i][j] = 0.0; ++pxform->refcnt; return pxform;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_encode(jas_image_t *image, jas_stream_t *out, char *optstr) { jpc_enc_t *enc; jpc_enc_cp_t *cp; enc = 0; cp = 0; jpc_initluts(); cp = 0; jpc_ms_destroy(enc->mrk); enc->mrk = 0; jpc_enc_destroy(enc); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_getdbglevel() { return jas_dbglevel;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccgetuint32(jas_stream_t *in, jas_iccuint32_t *val) { ulonglong tmp; *val = tmp; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_eprintf(const char *fmt, ...) { int ret; va_list ap; ret = vfprintf(stderr, fmt, ap); return ret;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_clrspc_numchans(int clrspc) { switch(jas_clrspc_fam(clrspc)) return 3;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jp2_ihdr_putdata(jp2_box_t *box, jas_stream_t *out) { jp2_ihdr_t *ihdr = &box->data.ihdr; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_image_strtofmt(char *name) { jas_image_fmtinfo_t *fmtinfo; return fmtinfo->id;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_ft_fwdlift_colres(jpc_fix_t *a, int numrows, int numcols, int stride,   int parity) { jpc_fix_t *lptr; jpc_fix_t *hptr; register jpc_fix_t *lptr2; register jpc_fix_t *hptr2; register int n; register int i; int llen; llen = (numrows + 1 - parity) >> 1; if(numrows > 1) lptr = &a[0]; hptr = &a[llen * stride]; n = numrows - llen - parity - (parity == (numrows & 1)); if(parity == (numrows & 1)) lptr2 = lptr; hptr2 = hptr; for(i = 0;i < numcols;++i) hptr2[0] -= lptr2[0]; ++lptr2; ++hptr2; lptr = &a[0]; hptr = &a[llen * stride]; if(!parity) lptr2 = lptr; hptr2 = hptr; for(i = 0;i < numcols;++i) lptr2[0] += (hptr2[0] + 1) >> 1; ++lptr2; ++hptr2; lptr += stride; n = llen - (!parity) - (parity != (numrows & 1));
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_iccprof_t *jas_iccprof_createfromclrspc(int clrspc) { jas_iccprof_t *prof; switch(clrspc) prof = jas_iccprof_createfrombuf(jas_iccprofdata_srgb, 		  jas_iccprofdata_srgblen); return prof;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_matrix_bindsub(jas_matrix_t *mat0, jas_matrix_t *mat1, int r0, int c0,   int r1, int c1) { int i; mat0->flags_ |= JAS_MATRIX_REF; mat0->numrows_ = r1 - r0 + 1; mat0->numcols_ = c1 - c0 + 1; mat0->maxrows_ = mat0->numrows_; mat0->rows_ = jas_malloc(mat0->maxrows_ * sizeof(jas_seqent_t *)); for(i = 0;i < mat0->numrows_;++i) mat0->rows_[i] = mat1->rows_[r0 + i] + c0; for(i = 0;i < mat0->numrows_;++i) mat0->rows_[i] = mat1->rows_[r0 + i] + c0; for(i = 0;i < mat0->numrows_;++i) mat0->rows_[i] = mat1->rows_[r0 + i] + c0; for(i = 0;i < mat0->numrows_;++i) mat0->rows_[i] = mat1->rows_[r0 + i] + c0; for(i = 0;i < mat0->numrows_;++i) mat0->rows_[i] = mat1->rows_[r0 + i] + c0; for(i = 0;i < mat0->numrows_;++i) mat0->rows_[i] = mat1->rows_[r0 + i] + c0; for(i = 0;i < mat0->numrows_;++i) mat0->rows_[i] = mat1->rows_[r0 + i] + c0; for(i = 0;i < mat0->numrows_;++i) mat0->rows_[i] = mat1->rows_[r0 + i] + c0; mat0->xstart_ = mat1->xstart_ + c0; mat0->ystart_ = mat1->ystart_ + r0; mat0->xend_ = mat0->xstart_ + mat0->numcols_; mat0->yend_ = mat0->ystart_ + mat0->numrows_;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jp2_colr_putdata(jp2_box_t *box, jas_stream_t *out) { jp2_colr_t *colr = &box->data.colr; switch(colr->method) return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jpc_com_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out) { jpc_com_t *com = &ms->parms.com; cstate = 0; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_image_addfmt(int id, char *name, char *ext, char *desc,   jas_image_fmtops_t *ops) { jas_image_fmtinfo_t *fmtinfo; assert(id >= 0 && name && ext && ops); fmtinfo = &jas_image_fmtinfos[jas_image_numfmts]; fmtinfo->id = id; fmtinfo->ops = *ops; ++jas_image_numfmts; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_cmprof_t *jas_cmprof_create() { int i; jas_cmprof_t *prof; memset(prof, 0, sizeof(jas_cmprof_t)); prof->iccprof = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) prof->pxformseqs[i] = 0; return prof;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_enc_t *jpc_enc_create(jpc_enc_cp_t *cp, jas_stream_t *out, jas_image_t *image) { jpc_enc_t *enc; enc = 0; enc->image = image; enc->out = out; enc->cp = cp; enc->cstate = 0; enc->tmpstream = 0; enc->mrk = 0; enc->curtile = 0; enc->len = 0; enc->mainbodysize = 0; return enc;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_enc_tile_t *jpc_enc_tile_create(jpc_enc_cp_t *cp, jas_image_t *image, int tileno) { jpc_enc_tile_t *tile; uint_fast32_t htileno; uint_fast32_t vtileno; uint_fast16_t lyrno; uint_fast16_t cmptno; jpc_enc_tcmpt_t *tcmpt; tile->tcmpts = 0; tile->lyrsizes = 0; tile->numtcmpts = cp->numcmpts; tile->pi = 0; tile->tileno = tileno; htileno = tileno _ cp->numhtiles; vtileno = tileno / cp->numhtiles; tile->tlx = JAS_MAX(cp->tilegrdoffx + htileno * cp->tilewidth, 	  cp->imgareatlx); tile->tly = JAS_MAX(cp->tilegrdoffy + vtileno * cp->tileheight, 	  cp->imgareatly); tile->brx = JAS_MIN(cp->tilegrdoffx + (htileno + 1) * cp->tilewidth, 	  cp->refgrdwidth); tile->bry = JAS_MIN(cp->tilegrdoffy + (vtileno + 1) * cp->tileheight, 	  cp->refgrdheight); tile->intmode = cp->tcp.intmode; tile->csty = cp->tcp.csty; tile->prg = cp->tcp.prg; tile->mctid = cp->tcp.mctid; tile->numlyrs = cp->tcp.numlyrs; for(lyrno = 0;lyrno < tile->numlyrs;++lyrno) tile->lyrsizes[lyrno] = 0; for(cmptno = 0, tcmpt = tile->tcmpts;cmptno < cp->numcmpts;++cmptno, ++tcmpt) tcmpt->rlvls = 0; tcmpt->tsfb = 0; tcmpt->data = 0; for(cmptno = 0, tcmpt = tile->tcmpts;cmptno < cp->numcmpts;++cmptno, ++tcmpt) tcmpt->rlvls = 0; tcmpt->tsfb = 0; tcmpt->data = 0; for(cmptno = 0, tcmpt = tile->tcmpts;cmptno < cp->numcmpts;++cmptno, ++tcmpt) tcmpt->rlvls = 0; tcmpt->tsfb = 0; tcmpt->data = 0; for(cmptno = 0, tcmpt = tile->tcmpts;cmptno < cp->numcmpts;++cmptno, ++tcmpt) for(cmptno = 0, tcmpt = tile->tcmpts;cmptno < cp->numcmpts;++cmptno, ++tcmpt) for(cmptno = 0, tcmpt = tile->tcmpts;cmptno < cp->numcmpts;++cmptno, ++tcmpt) switch(tile->mctid) tile->tcmpts[0].synweight = jpc_dbltofix(sqrt(3.0)); tile->tcmpts[1].synweight = jpc_dbltofix(sqrt(0.6875)); tile->tcmpts[2].synweight = jpc_dbltofix(sqrt(0.6875)); return tile;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_enc_destroy(jpc_enc_t *enc) { if(enc->cp) jpc_enc_cp_destroy(enc->cp); if(enc->cstate) jpc_cstate_destroy(enc->cstate); jas_free(enc);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jp2_jp_putdata(jp2_box_t *box, jas_stream_t *out) { jp2_jp_t *jp = &box->data.jp; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static long mem_seek(jas_stream_obj_t *obj, long offset, int origin) { jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj; long newpos; switch(origin) newpos = offset; m->pos_ = newpos; return m->pos_;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void tcmpt_destroy(jpc_enc_tcmpt_t *tcmpt) { jpc_enc_rlvl_t *rlvl; uint_fast16_t rlvlno; if(tcmpt->rlvls) for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl_destroy(rlvl); for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl_destroy(rlvl); for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl_destroy(rlvl); for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl_destroy(rlvl); for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl_destroy(rlvl); for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl_destroy(rlvl); jas_free(tcmpt->rlvls); if(tcmpt->data) if(tcmpt->tsfb) jpc_tsfb_destroy(tcmpt->tsfb);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_pchglist_destroy(jpc_pchglist_t *pchglist) { int pchgno; jas_free(pchglist);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccattrtab_add(jas_iccattrtab_t *attrtab, int i,   jas_iccuint32_t name, jas_iccattrval_t *val) { int n; jas_iccattr_t *attr; jas_iccattrval_t *tmpattrval; tmpattrval = 0; assert(i >= 0 && i <= attrtab->numattrs); n = attrtab->numattrs - i; attr = &attrtab->attrs[i]; attr->name = name; attr->val = tmpattrval; ++attrtab->numattrs; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int pnm_getc(jas_stream_t *in) { int c; if((c = jas_stream_getc(in)) == EOF) return -1;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_matrix_destroy(jas_matrix_t *matrix) { if(matrix->data_) assert(!(matrix->flags_ & JAS_MATRIX_REF)); jas_free(matrix->data_); matrix->data_ = 0; if(matrix->rows_) jas_free(matrix->rows_); matrix->rows_ = 0; jas_free(matrix);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_matrix_t *jas_seq2d_create(int xstart, int ystart, int xend, int yend) { jas_matrix_t *matrix; assert(xstart <= xend && ystart <= yend); matrix->xstart_ = xstart; matrix->ystart_ = ystart; matrix->xend_ = xend; matrix->yend_ = yend; return matrix;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_image_t *jas_image_create(int numcmpts, jas_image_cmptparm_t *cmptparms,   int clrspc) { jas_image_t *image; uint_fast32_t rawsize; uint_fast32_t inmem; int cmptno; jas_image_cmptparm_t *cmptparm; image->clrspc_ = clrspc; image->maxcmpts_ = numcmpts; image->inmem_ = true; for(cmptno = 0;cmptno < image->maxcmpts_;++cmptno) image->cmpts_[cmptno] = 0; for(cmptno = 0;cmptno < image->maxcmpts_;++cmptno) image->cmpts_[cmptno] = 0; for(cmptno = 0;cmptno < image->maxcmpts_;++cmptno) image->cmpts_[cmptno] = 0; rawsize = 0; for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm) rawsize += cmptparm->width * cmptparm->height * 		  (cmptparm->prec + 7) / 8; for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm) rawsize += cmptparm->width * cmptparm->height * 		  (cmptparm->prec + 7) / 8; for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm) rawsize += cmptparm->width * cmptparm->height * 		  (cmptparm->prec + 7) / 8; inmem = (rawsize < JAS_IMAGE_INMEMTHRESH); for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm) ++image->numcmpts_; for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm) ++image->numcmpts_; for(cmptno = 0, cmptparm = cmptparms;cmptno < numcmpts;++cmptno, 	  ++cmptparm) ++image->numcmpts_; jas_image_setbbox(image); return image;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int mem_read(jas_stream_obj_t *obj, char *buf, int cnt) { int n; jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj; n = m->len_ - m->pos_; cnt = JAS_MIN(n, cnt); memcpy(buf, &m->buf_[m->pos_], cnt); m->pos_ += cnt; return cnt;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int mem_write(jas_stream_obj_t *obj, char *buf, int cnt) { int n; int ret; jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj; long newbufsize; long newpos; newpos = m->pos_ + cnt; n = m->bufsize_ - m->pos_; ret = JAS_MIN(n, cnt); if(ret > 0) memcpy(&m->buf_[m->pos_], buf, ret); m->pos_ += ret; assert(ret == cnt); return ret;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jpc_cox_putcompparms(jpc_ms_t *ms, jpc_cstate_t *cstate,   jas_stream_t *out, int prtflag, jpc_coxcp_t *compparms) { int i; assert(compparms->numdlvls <= 32); ms = 0; cstate = 0; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_image_cmpt_t *jas_image_cmpt_create(uint_fast32_t tlx, uint_fast32_t tly,   uint_fast32_t hstep, uint_fast32_t vstep, uint_fast32_t width, uint_fast32_t   height, uint_fast16_t depth, bool sgnd, uint_fast32_t inmem) { jas_image_cmpt_t *cmpt; long size; cmpt->type_ = JAS_IMAGE_CT_UNKNOWN; cmpt->tlx_ = tlx; cmpt->tly_ = tly; cmpt->hstep_ = hstep; cmpt->vstep_ = vstep; cmpt->width_ = width; cmpt->height_ = height; cmpt->prec_ = depth; cmpt->sgnd_ = sgnd; cmpt->stream_ = 0; cmpt->cps_ = (depth + 7) / 8; size = cmpt->width_ * cmpt->height_ * cmpt->cps_; cmpt->stream_ = (inmem) ? jas_stream_memopen(0, size) : jas_stream_tmpfile(); return cmpt;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_iccprof_sorttagtab(jas_icctagtab_t *tagtab) { qsort(tagtab->ents, tagtab->numents, sizeof(jas_icctagtabent_t), 	  jas_icctagtabent_cmp);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_getopt(int argc, char **argv, jas_opt_t *opts) { char *cp; int id; int hasarg; jas_opt_t *opt; char *s; return JAS_GETOPT_EOF;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void cblk_destroy(jpc_enc_cblk_t *cblk) { uint_fast16_t passno; jpc_enc_pass_t *pass; if(cblk->stream) jas_stream_close(cblk->stream); if(cblk->mqenc) jpc_mqenc_destroy(cblk->mqenc); if(cblk->data) if(cblk->flags)
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int pnm_type(uint_fast16_t magic) { int type; switch(magic) type = PNM_TYPE_PPM; return type;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 double jas_tmr_get(jas_tmr_t *tmr) { double t0; double t1; t0 = ((double) tmr->start.tv_sec) + ((double) tmr->start.tv_usec) / 1e6; t1 = ((double) tmr->stop.tv_sec) + ((double) tmr->stop.tv_usec) / 1e6; return t1 - t0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jpc_enc_tcmpt_t *tcmpt_create(jpc_enc_tcmpt_t *tcmpt, jpc_enc_cp_t *cp,   jas_image_t *image, jpc_enc_tile_t *tile) { uint_fast16_t cmptno; uint_fast16_t rlvlno; jpc_enc_rlvl_t *rlvl; uint_fast32_t tlx; uint_fast32_t tly; uint_fast32_t brx; uint_fast32_t bry; uint_fast32_t cmpttlx; uint_fast32_t cmpttly; jpc_enc_ccp_t *ccp; jpc_tsfb_band_t bandinfos[JPC_MAXBANDS]; tcmpt->tile = tile; tcmpt->tsfb = 0; tcmpt->data = 0; tcmpt->rlvls = 0; cmptno = tcmpt - tile->tcmpts; ccp = &cp->ccps[cmptno]; tlx = JPC_CEILDIV(tile->tlx, ccp->sampgrdstepx); tly = JPC_CEILDIV(tile->tly, ccp->sampgrdstepy); brx = JPC_CEILDIV(tile->brx, ccp->sampgrdstepx); bry = JPC_CEILDIV(tile->bry, ccp->sampgrdstepy); cmpttlx = JPC_CEILDIV(cp->imgareatlx, ccp->sampgrdstepx); cmpttly = JPC_CEILDIV(cp->imgareatly, ccp->sampgrdstepy); tcmpt->synweight = 0; tcmpt->qmfbid = cp->tccp.qmfbid; tcmpt->numrlvls = cp->tccp.maxrlvls; tcmpt->numbands = 3 * tcmpt->numrlvls - 2; for(rlvlno = 0;rlvlno < tcmpt->numrlvls;++rlvlno) tcmpt->prcwidthexpns[rlvlno] = cp->tccp.prcwidthexpns[rlvlno]; tcmpt->prcheightexpns[rlvlno] = cp->tccp.prcheightexpns[rlvlno]; for(rlvlno = 0;rlvlno < tcmpt->numrlvls;++rlvlno) tcmpt->prcwidthexpns[rlvlno] = cp->tccp.prcwidthexpns[rlvlno]; tcmpt->prcheightexpns[rlvlno] = cp->tccp.prcheightexpns[rlvlno]; for(rlvlno = 0;rlvlno < tcmpt->numrlvls;++rlvlno) tcmpt->prcwidthexpns[rlvlno] = cp->tccp.prcwidthexpns[rlvlno]; tcmpt->prcheightexpns[rlvlno] = cp->tccp.prcheightexpns[rlvlno]; for(rlvlno = 0;rlvlno < tcmpt->numrlvls;++rlvlno) tcmpt->prcwidthexpns[rlvlno] = cp->tccp.prcwidthexpns[rlvlno]; tcmpt->prcheightexpns[rlvlno] = cp->tccp.prcheightexpns[rlvlno]; for(rlvlno = 0;rlvlno < tcmpt->numrlvls;++rlvlno) tcmpt->prcwidthexpns[rlvlno] = cp->tccp.prcwidthexpns[rlvlno]; tcmpt->prcheightexpns[rlvlno] = cp->tccp.prcheightexpns[rlvlno]; for(rlvlno = 0;rlvlno < tcmpt->numrlvls;++rlvlno) tcmpt->prcwidthexpns[rlvlno] = cp->tccp.prcwidthexpns[rlvlno]; tcmpt->prcheightexpns[rlvlno] = cp->tccp.prcheightexpns[rlvlno]; tcmpt->cblkwidthexpn = cp->tccp.cblkwidthexpn; tcmpt->cblkheightexpn = cp->tccp.cblkheightexpn; tcmpt->cblksty = cp->tccp.cblksty; tcmpt->csty = cp->tccp.csty; tcmpt->numstepsizes = tcmpt->numbands; assert(tcmpt->numstepsizes <= JPC_MAXBANDS); memset(tcmpt->stepsizes, 0, sizeof(tcmpt->numstepsizes * 	  sizeof(uint_fast16_t))); jpc_tsfb_getbands(tcmpt->tsfb, jas_seq2d_xstart(tcmpt->data), 	  jas_seq2d_ystart(tcmpt->data), jas_seq2d_xend(tcmpt->data), 	  jas_seq2d_yend(tcmpt->data), bandinfos); for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl->bands = 0; rlvl->tcmpt = tcmpt; for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl->bands = 0; rlvl->tcmpt = tcmpt; for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl->bands = 0; rlvl->tcmpt = tcmpt; for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl->bands = 0; rlvl->tcmpt = tcmpt; for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl->bands = 0; rlvl->tcmpt = tcmpt; for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) rlvl->bands = 0; rlvl->tcmpt = tcmpt; for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) for(rlvlno = 0, rlvl = tcmpt->rlvls;rlvlno < tcmpt->numrlvls;++rlvlno, ++rlvl) return tcmpt;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jpc_cox_destroycompparms(jpc_coxcp_t *compparms) { compparms = 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jpc_enc_rlvl_t *rlvl_create(jpc_enc_rlvl_t *rlvl, jpc_enc_cp_t *cp,   jpc_enc_tcmpt_t *tcmpt, jpc_tsfb_band_t *bandinfos) { uint_fast16_t rlvlno; uint_fast32_t tlprctlx; uint_fast32_t tlprctly; uint_fast32_t brprcbrx; uint_fast32_t brprcbry; uint_fast16_t bandno; jpc_enc_band_t *band; rlvlno = rlvl - tcmpt->rlvls; rlvl->bands = 0; rlvl->tcmpt = tcmpt; rlvl->tlx = JPC_CEILDIVPOW2(jas_seq2d_xstart(tcmpt->data), tcmpt->numrlvls - 	  1 - rlvlno); rlvl->tly = JPC_CEILDIVPOW2(jas_seq2d_ystart(tcmpt->data), tcmpt->numrlvls - 	  1 - rlvlno); rlvl->brx = JPC_CEILDIVPOW2(jas_seq2d_xend(tcmpt->data), tcmpt->numrlvls - 	  1 - rlvlno); rlvl->bry = JPC_CEILDIVPOW2(jas_seq2d_yend(tcmpt->data), tcmpt->numrlvls - 	  1 - rlvlno); rlvl->numbands = (!rlvlno) ? 1 : 3; rlvl->prcwidthexpn = cp->tccp.prcwidthexpns[rlvlno]; rlvl->prcheightexpn = cp->tccp.prcheightexpns[rlvlno]; rlvl->cbgwidthexpn = rlvl->prcwidthexpn - 1; rlvl->cbgheightexpn = rlvl->prcheightexpn - 1; rlvl->cblkwidthexpn = JAS_MIN(cp->tccp.cblkwidthexpn, rlvl->cbgwidthexpn); rlvl->cblkheightexpn = JAS_MIN(cp->tccp.cblkheightexpn, rlvl->cbgheightexpn); tlprctlx = JPC_FLOORTOMULTPOW2(rlvl->tlx, rlvl->prcwidthexpn); tlprctly = JPC_FLOORTOMULTPOW2(rlvl->tly, rlvl->prcheightexpn); brprcbrx = JPC_CEILTOMULTPOW2(rlvl->brx, rlvl->prcwidthexpn); brprcbry = JPC_CEILTOMULTPOW2(rlvl->bry, rlvl->prcheightexpn); rlvl->numhprcs = JPC_FLOORDIVPOW2(brprcbrx - tlprctlx, rlvl->prcwidthexpn); rlvl->numvprcs = JPC_FLOORDIVPOW2(brprcbry - tlprctly, rlvl->prcheightexpn); rlvl->numprcs = rlvl->numhprcs * rlvl->numvprcs; for(bandno = 0, band = rlvl->bands;bandno < rlvl->numbands;++bandno, ++band) band->prcs = 0; band->data = 0; band->rlvl = rlvl; for(bandno = 0, band = rlvl->bands;bandno < rlvl->numbands;++bandno, ++band) band->prcs = 0; band->data = 0; band->rlvl = rlvl; for(bandno = 0, band = rlvl->bands;bandno < rlvl->numbands;++bandno, ++band) band->prcs = 0; band->data = 0; band->rlvl = rlvl; for(bandno = 0, band = rlvl->bands;bandno < rlvl->numbands;++bandno, ++band) for(bandno = 0, band = rlvl->bands;bandno < rlvl->numbands;++bandno, ++band) for(bandno = 0, band = rlvl->bands;bandno < rlvl->numbands;++bandno, ++band) return rlvl;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_tagtree_destroy(jpc_tagtree_t *tree) { if(tree->nodes_) jas_free(tree->nodes_); jas_free(tree);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_pi_init(jpc_pi_t *pi) { int compno; int rlvlno; int prcno; jpc_picomp_t *picomp; jpc_pirlvl_t *pirlvl; int *prclyrno; pi->prgvolfirst = 0; pi->valid = 0; pi->pktno = -1; pi->pchgno = -1; pi->pchg = 0; for(compno = 0, picomp = pi->picomps;compno < pi->numcomps;++compno, ++picomp) for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(compno = 0, picomp = pi->picomps;compno < pi->numcomps;++compno, ++picomp) for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(compno = 0, picomp = pi->picomps;compno < pi->numcomps;++compno, ++picomp) for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; for(rlvlno = 0, pirlvl = picomp->pirlvls;rlvlno < 		  picomp->numrlvls;++rlvlno, ++pirlvl) for(prcno = 0, prclyrno = pirlvl->prclyrnos;prcno < pirlvl->numprcs;++prcno, ++prclyrno) *prclyrno = 0; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_image_clearfmts() { int i; jas_image_fmtinfo_t *fmtinfo; jas_image_numfmts = 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_cmpxformseq_insertpxform(jas_cmpxformseq_t *pxformseq,   int i, jas_cmpxform_t *pxform) { jas_cmpxform_t *tmppxform; int n; if(i < 0) i = pxformseq->numpxforms; assert(i >= 0 && i <= pxformseq->numpxforms); assert(pxformseq->numpxforms < pxformseq->maxpxforms); n = pxformseq->numpxforms - i; pxformseq->pxforms[i] = tmppxform; ++pxformseq->numpxforms; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_enc_encodetiledata(jpc_enc_t *enc) { assert(enc->tmpstream); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jpc_qcx_putcompparms(jpc_qcxcp_t *compparms, jpc_cstate_t *cstate,   jas_stream_t *out) { int i; cstate = 0; jpc_putuint8(out, ((compparms->numguard & 7) << 5) | compparms->qntsty); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); for(i = 0;i < compparms->numstepsizes;++i) if(compparms->qntsty == JPC_QCX_NOQNT) jpc_putuint8(out, JPC_QCX_GETEXPN( 			  compparms->stepsizes[i]) << 3); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jp2_putuint8(jas_stream_t *out, uint_fast8_t val) { return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jp2_putuint16(jas_stream_t *out, uint_fast16_t val) { return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int JPC_ISTERMINATED(int passno, int firstpassno, int numpasses, int termall,   int lazy) { int ret; int n; if(passno - firstpassno == numpasses - 1) ret = 1; return ret;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_save_t2state(jpc_enc_t *enc) { jpc_enc_tcmpt_t *comp; jpc_enc_tcmpt_t *endcomps; jpc_enc_rlvl_t *lvl; jpc_enc_rlvl_t *endlvls; jpc_enc_band_t *band; jpc_enc_band_t *endbands; jpc_enc_cblk_t *cblk; jpc_enc_cblk_t *endcblks; jpc_enc_tile_t *tile; int prcno; jpc_enc_prc_t *prc; tile = enc->curtile; endcomps = &tile->tcmpts[tile->numtcmpts]; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->savincltree, prc->incltree); jpc_tagtree_copy(prc->savnlibtree, prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->savedcurpass = cblk->curpass; cblk->savednumencpasses = cblk->numencpasses; cblk->savednumlenbits = cblk->numlenbits;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int file_write(jas_stream_obj_t *obj, char *buf, int cnt) { jas_stream_fileobj_t *fileobj = JAS_CAST(jas_stream_fileobj_t *, obj); return write(fileobj->fd, buf, cnt);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 double jpc_pow2i(int n) { double x; double a; x = 1.0; a = 2.0; while(--n >= 0) x *= a; while(--n >= 0) x *= a; while(--n >= 0) x *= a; while(--n >= 0) x *= a; while(--n >= 0) x *= a; while(--n >= 0) x *= a; return x;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_stream_ungetc(jas_stream_t *stream, int c) { stream->flags_ &= ~JAS_STREAM_EOF; --stream->rwcnt_; --stream->ptr_; ++stream->cnt_; *stream->ptr_ = c; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_enc_enccblk(jpc_enc_t *enc, jas_stream_t *out, jpc_enc_tcmpt_t *tcmpt, jpc_enc_band_t *band, jpc_enc_cblk_t *cblk) { jpc_enc_pass_t *pass; jpc_enc_pass_t *endpasses; int bitpos; int n; int adjust; int ret; int passtype; int t; jpc_bitstream_t *bout; jpc_enc_pass_t *termpass; jpc_enc_rlvl_t *rlvl; int vcausal; int segsym; int termmode; int c; bout = 0; rlvl = band->rlvl; cblk->stream = jas_stream_memopen(0, 0); assert(cblk->stream); cblk->mqenc = jpc_mqenc_create(JPC_NUMCTXS, cblk->stream); assert(cblk->mqenc); jpc_mqenc_setctxs(cblk->mqenc, JPC_NUMCTXS, jpc_mqctxs); cblk->numpasses = (cblk->numbps > 0) ? (3 * cblk->numbps - 2) : 0; cblk->passes = 0; endpasses = &cblk->passes[cblk->numpasses]; cblk->flags = jas_matrix_create(jas_matrix_numrows(cblk->data) + 2, 	  jas_matrix_numcols(cblk->data) + 2); assert(cblk->flags); bitpos = cblk->numbps - 1; pass = cblk->passes; n = cblk->numpasses; n = 0; endpasses = &cblk->passes[cblk->numpasses]; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_iccattrval_destroy(jas_iccattrval_t *attrval) { if(--attrval->refcnt <= 0) if(attrval->ops->destroy) (*attrval->ops->destroy)(attrval); jas_free(attrval);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_seqent_t bitstoint(uint_fast32_t v, int prec, bool sgnd) { jas_seqent_t ret; v &= JAS_ONES(prec); ret = (sgnd && (v & (1 << (prec - 1)))) ? (v - (1 << prec)) : v; return ret;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_taginfo_t *jas_taginfos_lookup(jas_taginfo_t *taginfos, const char *name) { jas_taginfo_t *taginfo; taginfo = taginfos; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) ++taginfo; while(taginfo->id >= 0) if(!strcmp(taginfo->name, name)) return taginfo;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_stream_t *jas_stream_memopen(char *buf, int bufsize) { jas_stream_t *stream; jas_stream_memobj_t *obj; stream->openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY; jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0); stream->ops_ = &jas_stream_memops; stream->obj_ = (void *) obj; obj->myalloc_ = 0; obj->buf_ = 0; if(bufsize <= 0) obj->bufsize_ = 1024; obj->growable_ = 1; obj->buf_ = jas_malloc(obj->bufsize_ * sizeof(char)); obj->myalloc_ = 1; obj->len_ = 0; obj->pos_ = 0; return stream;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_init_t2state(jpc_enc_t *enc, int raflag) { jpc_enc_tcmpt_t *comp; jpc_enc_tcmpt_t *endcomps; jpc_enc_rlvl_t *lvl; jpc_enc_rlvl_t *endlvls; jpc_enc_band_t *band; jpc_enc_band_t *endbands; jpc_enc_cblk_t *cblk; jpc_enc_cblk_t *endcblks; jpc_enc_pass_t *pass; jpc_enc_pass_t *endpasses; jpc_tagtreenode_t *leaf; jpc_enc_tile_t *tile; int prcno; jpc_enc_prc_t *prc; tile = enc->curtile; endcomps = &tile->tcmpts[tile->numtcmpts]; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_reset(prc->incltree); jpc_tagtree_reset(prc->nlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = (cblk->numpasses > 0) ? cblk->passes : 0; cblk->numencpasses = 0; cblk->numlenbits = 3; cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jp2_boxinfo_t *jp2_boxinfolookup(int type) { jp2_boxinfo_t *boxinfo; for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) for(boxinfo = jp2_boxinfos;boxinfo->name;++boxinfo) if(boxinfo->type == type) return boxinfo;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int pnm_getuintstr(jas_stream_t *in, uint_fast32_t *val) { uint_fast32_t v; int c; if((c = pnm_getc(in)) == EOF) return -1;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_rct(jas_matrix_t *c0, jas_matrix_t *c1, jas_matrix_t *c2) { int numrows; int numcols; int i; int j; jpc_fix_t *c0p; jpc_fix_t *c1p; jpc_fix_t *c2p; numrows = jas_matrix_numrows(c0); numcols = jas_matrix_numcols(c0); assert(jas_matrix_numrows(c1) == numrows && jas_matrix_numcols(c1) == numcols 	  && jas_matrix_numrows(c2) == numrows && jas_matrix_numcols(c2) == numcols); for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(i = 0;i < numrows;i++) c0p = jas_matrix_getref(c0, i, 0); c1p = jas_matrix_getref(c1, i, 0); c2p = jas_matrix_getref(c2, i, 0); for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v; for(j = numcols;j > 0;--j) int r; int g; int b; int y; int u; int v; r = *c0p; g = *c1p; b = *c2p; y = (r + (g << 1) + b) >> 2; u = b - g; v = r - g; *c0p++ = y; *c1p++ = u; *c2p++ = v;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_init() { jas_image_fmtops_t fmtops; int fmtid; fmtid = 0; fmtops.decode = mif_decode; fmtops.encode = mif_encode; fmtops.validate = mif_validate; jas_image_addfmt(fmtid, 'mif', 'mif', 'My Image Format (MIF)', &fmtops); ++fmtid; fmtops.decode = pnm_decode; fmtops.encode = pnm_encode; fmtops.validate = pnm_validate; jas_image_addfmt(fmtid, 'pnm', 'pnm', 'Portable Graymap/Pixmap (PNM)', 	  &fmtops); jas_image_addfmt(fmtid, 'pnm', 'pgm', 'Portable Graymap/Pixmap (PNM)', 	  &fmtops); jas_image_addfmt(fmtid, 'pnm', 'ppm', 'Portable Graymap/Pixmap (PNM)', 	  &fmtops); ++fmtid; fmtops.decode = bmp_decode; fmtops.encode = bmp_encode; fmtops.validate = bmp_validate; jas_image_addfmt(fmtid, 'bmp', 'bmp', 'Microsoft Bitmap (BMP)', &fmtops); ++fmtid; fmtops.decode = ras_decode; fmtops.encode = ras_encode; fmtops.validate = ras_validate; jas_image_addfmt(fmtid, 'ras', 'ras', 'Sun Rasterfile (RAS)', &fmtops); ++fmtid; fmtops.decode = jp2_decode; fmtops.encode = jp2_encode; fmtops.validate = jp2_validate; jas_image_addfmt(fmtid, 'jp2', 'jp2', 	  'JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)', &fmtops); ++fmtid; fmtops.decode = jpc_decode; fmtops.encode = jpc_encode; fmtops.validate = jpc_validate; jas_image_addfmt(fmtid, 'jpc', 'jpc', 	  'JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)', &fmtops); ++fmtid; fmtops.decode = jpg_decode; fmtops.encode = jpg_encode; fmtops.validate = jpg_validate; jas_image_addfmt(fmtid, 'jpg', 'jpg', 'JPEG (ISO/IEC 10918-1)', &fmtops); ++fmtid; fmtops.decode = pgx_decode; fmtops.encode = pgx_encode; fmtops.validate = pgx_validate; jas_image_addfmt(fmtid, 'pgx', 'pgx', 'JPEG-2000 VM Format (PGX)', &fmtops); ++fmtid; atexit(jas_cleanup); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_bitstream_putbits(jpc_bitstream_t *bitstream, int n, long v) { int m; assert(n >= 0 && n < 32); assert(!(v & (~JAS_ONES(n)))); m = n - 1; while(--n >= 0) v <<= 1; while(--n >= 0) v <<= 1; while(--n >= 0) v <<= 1; while(--n >= 0) v <<= 1; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_ft_fwdlift_row(jpc_fix_t *a, int numcols, int parity) { register jpc_fix_t *lptr; register jpc_fix_t *hptr; register int n; int llen; llen = (numcols + 1 - parity) >> 1;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static uint_fast32_t inttobits(jas_seqent_t v, int prec, bool sgnd) { uint_fast32_t ret; ret = ((sgnd && v < 0) ? ((1 << prec) + v) : v) & JAS_ONES(prec); return ret;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccgetuint(jas_stream_t *in, int n, ulonglong *val) { int i; int c; ulonglong v; v = 0; for(i = n;i > 0;--i) v = (v << 8) | c; for(i = n;i > 0;--i) v = (v << 8) | c; *val = v; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jpc_cod_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out) { jpc_cod_t *cod = &ms->parms.cod; assert(cod->numlyrs > 0 && cod->compparms.numdlvls <= 32); assert(cod->compparms.numdlvls == cod->compparms.numrlvls - 1); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_tsfb_getbands(jpc_tsfb_t *tsfb, uint_fast32_t xstart,   uint_fast32_t ystart, uint_fast32_t xend, uint_fast32_t yend,   jpc_tsfb_band_t *bands) { jpc_tsfb_band_t *band; band = bands; if(tsfb->numlvls > 0) jpc_tsfb_getbands2(tsfb, xstart, ystart, xstart, ystart, xend, yend, 		  &band, tsfb->numlvls); return band - bands;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_tagtree_t *jpc_tagtree_create(int numleafsh, int numleafsv) { int nplh[JPC_TAGTREE_MAXDEPTH]; int nplv[JPC_TAGTREE_MAXDEPTH]; jpc_tagtreenode_t *node; jpc_tagtreenode_t *parentnode; jpc_tagtreenode_t *parentnode0; jpc_tagtree_t *tree; int i; int j; int k; int numlvls; int n; assert(numleafsh > 0 && numleafsv > 0); tree->numleafsh_ = numleafsh; tree->numleafsv_ = numleafsv; numlvls = 0; nplh[0] = numleafsh; nplv[0] = numleafsv; n = nplh[numlvls] * nplv[numlvls]; nplh[numlvls + 1] = (nplh[numlvls] + 1) / 2; nplv[numlvls + 1] = (nplv[numlvls] + 1) / 2; tree->numnodes_ += n; ++numlvls; node = tree->nodes_; parentnode = &tree->nodes_[tree->numleafsh_ * tree->numleafsv_]; parentnode0 = parentnode; node->parent_ = 0; jpc_tagtree_reset(tree); return tree;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_iccprof_gethdr(jas_iccprof_t *prof, jas_icchdr_t *hdr) { *hdr = prof->hdr; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_ft_analyze(jpc_fix_t *a, int xstart, int ystart, int width, int height,   int stride) { int numrows = height; int numcols = width; int rowparity = ystart & 1; int colparity = xstart & 1; int i; jpc_fix_t *startptr; int maxcols; maxcols = (numcols / JPC_QMFB_COLGRPSIZE) * JPC_QMFB_COLGRPSIZE; startptr = &a[0]; if(maxcols < numcols) jpc_qmfb_split_colres(startptr, numrows, numcols - maxcols, stride, 		  rowparity); jpc_ft_fwdlift_colres(startptr, numrows, numcols - maxcols, stride, 		  rowparity); startptr = &a[0]; for(i = 0;i < numrows;++i) jpc_qmfb_split_row(startptr, numcols, colparity); jpc_ft_fwdlift_row(startptr, numcols, colparity); startptr += stride; for(i = 0;i < numrows;++i) jpc_qmfb_split_row(startptr, numcols, colparity); jpc_ft_fwdlift_row(startptr, numcols, colparity); startptr += stride; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_stream_copy(jas_stream_t *out, jas_stream_t *in, int n) { int all; int c; int m; all = (n < 0) ? 1 : 0; m = n; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) --m; while(all || m > 0) if((c = jas_stream_getc_macro(in)) == EOF) return (!all || jas_stream_error(in)) ? (-1) : 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_enc_encpkts(jpc_enc_t *enc, jas_stream_t *out) { jpc_enc_tile_t *tile; jpc_pi_t *pi; tile = enc->curtile; jpc_init_t2state(enc, 0); pi = tile->pi; jpc_pi_init(pi); if(!jpc_pi_next(pi)) if(jpc_pi_next(pi)) return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int JPC_NOMINALGAIN(int qmfbid, int numlvls, int lvlno, int orient) { numlvls = 0; assert(qmfbid == JPC_COX_RFT); switch(orient) return 2;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_tagtree_copy(jpc_tagtree_t *dsttree, jpc_tagtree_t *srctree) { int n; jpc_tagtreenode_t *srcnode; jpc_tagtreenode_t *dstnode; assert(srctree->numleafsh_ == dsttree->numleafsh_ && 	  srctree->numleafsv_ == dsttree->numleafsv_); n = srctree->numnodes_; srcnode = srctree->nodes_; dstnode = dsttree->nodes_; while(--n >= 0) dstnode->value_ = srcnode->value_; dstnode->low_ = srcnode->low_; dstnode->known_ = srcnode->known_; ++dstnode; ++srcnode;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_iccprof_t *jas_iccprof_createfrombuf(uchar *buf, int len) { jas_stream_t *in; jas_iccprof_t *prof; jas_stream_close(in); return prof;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_cmpxformseq_destroy(jas_cmpxformseq_t *pxformseq) { while(pxformseq->numpxforms > 0) jas_cmpxformseq_delete(pxformseq, pxformseq->numpxforms - 1); if(pxformseq->pxforms) jas_free(pxformseq->pxforms); jas_free(pxformseq);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_mqenc_setctxs(jpc_mqenc_t *mqenc, int numctxs, jpc_mqctx_t *ctxs) { jpc_mqstate_t **ctx; int n; ctx = mqenc->ctxs; n = JAS_MIN(mqenc->maxctxs, numctxs); while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; while(--n >= 0) *ctx = &jpc_mqstates[2 * ctxs->ind + ctxs->mps]; ++ctx; ++ctxs; n = mqenc->maxctxs - numctxs;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jp2_box_destroy(jp2_box_t *box) { jas_free(box);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccgetxyz(jas_stream_t *in, jas_iccxyz_t *xyz) { return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_enc_cp_destroy(jpc_enc_cp_t *cp) { if(cp->ccps) jas_free(cp->ccps); jas_free(cp);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_iccattrtab_t *jas_iccattrtab_copy(jas_iccattrtab_t *attrtab) { jas_iccattrtab_t *newattrtab; int i; for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) for(i = 0;i < attrtab->numattrs;++i) return newattrtab;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_image_readcmpt(jas_image_t *image, int cmptno, jas_image_coord_t x,   jas_image_coord_t y, jas_image_coord_t width, jas_image_coord_t height,   jas_matrix_t *data) { jas_image_cmpt_t *cmpt; jas_image_coord_t i; jas_image_coord_t j; int k; jas_seqent_t v; int c; jas_seqent_t *dr; jas_seqent_t *d; int drs; cmpt = image->cmpts_[cmptno]; dr = jas_matrix_getref(data, 0, 0); drs = jas_matrix_rowstep(data); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); for(j = width;j > 0;--j, ++d) v = 0; for(k = cmpt->cps_;k > 0;--k) v = (v << 8) | (c & 0xff); *d = bitstoint(v, cmpt->prec_, cmpt->sgnd_); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_icctxtdesc_input(jas_iccattrval_t *attrval, jas_stream_t *in,   int cnt) { int n; int c; jas_icctxtdesc_t *txtdesc = &attrval->data.txtdesc; txtdesc->ascdata = 0; txtdesc->ucdata = 0; txtdesc->ascdata[txtdesc->asclen - 1] = ' txtdesc->maclen = c; txtdesc->asclen = strlen(txtdesc->ascdata) + 1; n = txtdesc->asclen + txtdesc->uclen * 2 + 15 + 67; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_pi_t *jpc_pi_create0() { jpc_pi_t *pi; pi->picomps = 0; pi->pchgno = 0; return pi;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccattrtab_resize(jas_iccattrtab_t *tab, int maxents) { jas_iccattr_t *newattrs; assert(maxents >= tab->numattrs); newattrs = tab->attrs ? jas_realloc(tab->attrs, maxents * 	  sizeof(jas_iccattr_t)) : jas_malloc(maxents * sizeof(jas_iccattr_t)); tab->attrs = newattrs; tab->maxattrs = maxents; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static uint_fast32_t jpc_abstorelstepsize(jpc_fix_t absdelta, int scaleexpn) { int p; uint_fast32_t mant; uint_fast32_t expn; int n; p = jpc_firstone(absdelta) - JPC_FIX_FRACBITS; n = 11 - jpc_firstone(absdelta); mant = ((n < 0) ? (absdelta >> (-n)) : (absdelta << n)) & 0x7ff; expn = scaleexpn - p; return JPC_QCX_EXPN(expn) | JPC_QCX_MANT(mant);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_iccprof_t *jas_iccprof_load(jas_stream_t *in) { jas_iccprof_t *prof; int numtags; long curoff; long reloff; long prevoff; jas_iccsig_t type; jas_iccattrval_t *attrval; jas_iccattrval_t *prevattrval; jas_icctagtabent_t *tagtabent; jas_iccattrvalinfo_t *attrvalinfo; int i; int len; prof = 0; attrval = 0; jas_iccprof_sorttagtab(&prof->tagtab); numtags = prof->tagtab.numents; curoff = JAS_ICC_HDRLEN + 4 + 12 * numtags; prevoff = 0; prevattrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; if(reloff > 0) curoff += reloff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; if(reloff > 0) curoff += reloff; prevoff = curoff; curoff += 8; if(!(attrvalinfo = jas_iccattrvalinfo_lookup(type))) prevattrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; if(reloff > 0) curoff += reloff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; prevoff = curoff; curoff += 8; if(!(attrvalinfo = jas_iccattrvalinfo_lookup(type))) prevattrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; if(reloff > 0) curoff += reloff; prevoff = curoff; curoff += 8; if(!(attrvalinfo = jas_iccattrvalinfo_lookup(type))) prevattrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; reloff = tagtabent->off - curoff; if(reloff > 0) curoff += reloff; prevoff = curoff; curoff += 8; len = tagtabent->len - 8; curoff += len; prevattrval = attrval; jas_iccattrval_destroy(attrval); attrval = 0; for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; if(tagtabent->off == JAS_CAST(jas_iccuint32_t, prevoff)) if(prevattrval) jas_iccattrval_destroy(attrval); for(i = 0;i < numtags;++i) tagtabent = &prof->tagtab.ents[i]; if(tagtabent->off == JAS_CAST(jas_iccuint32_t, prevoff)) if(prevattrval) jas_iccattrval_destroy(attrval); return prof;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_icctxt_input(jas_iccattrval_t *attrval, jas_stream_t *in,   int cnt) { jas_icctxt_t *txt = &attrval->data.txt; txt->string = 0; txt->string[cnt - 1] = 'return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jpc_qcd_destroyparms(jpc_ms_t *ms) { jpc_qcd_t *qcd = &ms->parms.qcd; jpc_qcx_destroycompparms(&qcd->compparms);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_bitstream_align(jpc_bitstream_t *bitstream) { int ret; if(bitstream->openmode_ & JPC_BITSTREAM_WRITE) ret = jpc_bitstream_outalign(bitstream, 0); return ret;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_tsfb_getbands2(jpc_tsfb_t *tsfb, int locxstart, int locystart,   int xstart, int ystart, int xend, int yend, jpc_tsfb_band_t **bands,   int numlvls) { int newxstart; int newystart; int newxend; int newyend; jpc_tsfb_band_t *band; newxstart = JPC_CEILDIVPOW2(xstart, 1); newystart = JPC_CEILDIVPOW2(ystart, 1); newxend = JPC_CEILDIVPOW2(xend, 1); newyend = JPC_CEILDIVPOW2(yend, 1); if(numlvls > 0) jpc_tsfb_getbands2(tsfb, locxstart, locystart, newxstart, newystart, 		  newxend, newyend, bands, numlvls - 1); band = *bands; band->xstart = JPC_FLOORDIVPOW2(xstart, 1); band->ystart = newystart; band->xend = JPC_FLOORDIVPOW2(xend, 1); band->yend = newyend; band->locxstart = locxstart + newxend - newxstart; band->locystart = locystart; band->locxend = band->locxstart + band->xend - band->xstart; band->locyend = band->locystart + band->yend - band->ystart; band->orient = JPC_TSFB_HL; band->synenergywt = jpc_dbltofix(tsfb->qmfb->hpenergywts[ 		  tsfb->numlvls - numlvls] * tsfb->qmfb->lpenergywts[ 		  tsfb->numlvls - numlvls]); ++(*bands); band = *bands; band->xstart = newxstart; band->ystart = JPC_FLOORDIVPOW2(ystart, 1); band->xend = newxend; band->yend = JPC_FLOORDIVPOW2(yend, 1); band->locxstart = locxstart; band->locystart = locystart + newyend - newystart; band->locxend = band->locxstart + band->xend - band->xstart; band->locyend = band->locystart + band->yend - band->ystart; band->orient = JPC_TSFB_LH; band->synenergywt = jpc_dbltofix(tsfb->qmfb->lpenergywts[ 		  tsfb->numlvls - numlvls] * tsfb->qmfb->hpenergywts[ 		  tsfb->numlvls - numlvls]); ++(*bands); band = *bands; band->xstart = JPC_FLOORDIVPOW2(xstart, 1); band->ystart = JPC_FLOORDIVPOW2(ystart, 1); band->xend = JPC_FLOORDIVPOW2(xend, 1); band->yend = JPC_FLOORDIVPOW2(yend, 1); band->locxstart = locxstart + newxend - newxstart; band->locystart = locystart + newyend - newystart; band->locxend = band->locxstart + band->xend - band->xstart; band->locyend = band->locystart + band->yend - band->ystart; band->orient = JPC_TSFB_HH; band->synenergywt = jpc_dbltofix(tsfb->qmfb->hpenergywts[ 		  tsfb->numlvls - numlvls] * tsfb->qmfb->hpenergywts[ 		  tsfb->numlvls - numlvls]); ++(*bands);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int rateallocate(jpc_enc_t *enc, int numlyrs, uint_fast32_t *cumlens) { jpc_flt_t lo; jpc_flt_t hi; jas_stream_t *out; long cumlen; int lyrno; jpc_flt_t thresh; jpc_flt_t goodthresh; int success; long pos; long oldpos; int numiters; jpc_enc_tcmpt_t *comp; jpc_enc_tcmpt_t *endcomps; jpc_enc_rlvl_t *lvl; jpc_enc_rlvl_t *endlvls; jpc_enc_band_t *band; jpc_enc_band_t *endbands; jpc_enc_cblk_t *cblk; jpc_enc_cblk_t *endcblks; jpc_enc_pass_t *pass; jpc_enc_pass_t *endpasses; jpc_enc_pass_t *pass1; jpc_flt_t mxrdslope; jpc_flt_t mnrdslope; jpc_enc_tile_t *tile; jpc_enc_prc_t *prc; int prcno; tile = enc->curtile; mnrdslope = DBL_MAX; mxrdslope = 0; endcomps = &tile->tcmpts[tile->numtcmpts]; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(pass = cblk->passes;pass != endpasses;++pass) if(pass->rdslope > 0) if(pass->rdslope < mnrdslope) mnrdslope = pass->rdslope; if(pass->rdslope > mxrdslope) mxrdslope = pass->rdslope; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) calcrdslopes(cblk); endpasses = &cblk->passes[cblk->numpasses]; jpc_init_t2state(enc, 1); for(lyrno = 0;lyrno < numlyrs;++lyrno) lo = mnrdslope; hi = mxrdslope; success = 0; goodthresh = 0; numiters = 0; cumlen = cumlens[lyrno]; thresh = (lo + hi) / 2; jpc_save_t2state(enc); oldpos = jas_stream_tell(out); assert(oldpos >= 0); endcomps = &tile->tcmpts[tile->numtcmpts]; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) if(cblk->curpass) endpasses = &cblk->passes[cblk->numpasses]; pass1 = cblk->curpass; for(pass = cblk->curpass;pass != endpasses;++pass) if(pass->rdslope >= thresh) pass1 = &pass[1]; for(pass = cblk->curpass;pass != pass1;++pass) pass->lyrno = lyrno; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) endcomps = &tile->tcmpts[tile->numtcmpts]; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) pos = jas_stream_tell(out); assert(pos >= 0); if(pos > cumlen) lo = thresh; jpc_restore_t2state(enc); ++numiters; if(!success) jas_eprintf('warning: empty layer generated '); endcomps = &tile->tcmpts[tile->numtcmpts]; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) if(cblk->curpass) endpasses = &cblk->passes[cblk->numpasses]; pass1 = cblk->curpass; pass->lyrno = -1; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) endcomps = &tile->tcmpts[tile->numtcmpts]; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) for(lvl = comp->rlvls;lvl != endlvls;++lvl) for(prcno = 0;prcno < lvl->numprcs;++prcno) jas_stream_close(out); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_putms(jas_stream_t *out, jpc_cstate_t *cstate, jpc_ms_t *ms) { jas_stream_t *tmpstream; int len; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int pnm_getint16(jas_stream_t *in, int *val) { int v; int c; v = c & 0xff; v = (v << 8) | (c & 0xff); *val = v; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_putuint32(jas_stream_t *out, uint_fast32_t val) { return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int pnm_validate(jas_stream_t *in) { uchar buf[2]; int i; int n; assert(JAS_STREAM_MAXPUTBACK >= 2); for(i = n - 1;i >= 0;--i) for(i = n - 1;i >= 0;--i) if(buf[0] == 'P' && isdigit(buf[1])) return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_mqenc_getstate(jpc_mqenc_t *mqenc, jpc_mqencstate_t *state) { state->areg = mqenc->areg; state->creg = mqenc->creg; state->ctreg = mqenc->ctreg; state->lastbyte = mqenc->lastbyte;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_image_writecmpt(jas_image_t *image, int cmptno, jas_image_coord_t x, jas_image_coord_t y, jas_image_coord_t width,   jas_image_coord_t height, jas_matrix_t *data) { jas_image_cmpt_t *cmpt; jas_image_coord_t i; jas_image_coord_t j; jas_seqent_t *d; jas_seqent_t *dr; int drs; jas_seqent_t v; int k; int c; cmpt = image->cmpts_[cmptno]; dr = jas_matrix_getref(data, 0, 0); drs = jas_matrix_rowstep(data); for(i = 0;i < height;++i, dr += drs) d = dr; for(j = width;j > 0;--j, ++d) v = inttobits(*d, cmpt->prec_, cmpt->sgnd_); for(k = cmpt->cps_;k > 0;--k) c = (v >> (8 * (cmpt->cps_ - 1))) & 0xff; v <<= 8; for(j = width;j > 0;--j, ++d) v = inttobits(*d, cmpt->prec_, cmpt->sgnd_); for(k = cmpt->cps_;k > 0;--k) c = (v >> (8 * (cmpt->cps_ - 1))) & 0xff; v <<= 8; for(j = width;j > 0;--j, ++d) v = inttobits(*d, cmpt->prec_, cmpt->sgnd_); for(k = cmpt->cps_;k > 0;--k) c = (v >> (8 * (cmpt->cps_ - 1))) & 0xff; v <<= 8; for(j = width;j > 0;--j, ++d) v = inttobits(*d, cmpt->prec_, cmpt->sgnd_); for(k = cmpt->cps_;k > 0;--k) c = (v >> (8 * (cmpt->cps_ - 1))) & 0xff; v <<= 8; for(j = width;j > 0;--j, ++d) v = inttobits(*d, cmpt->prec_, cmpt->sgnd_); for(k = cmpt->cps_;k > 0;--k) c = (v >> (8 * (cmpt->cps_ - 1))) & 0xff; v <<= 8; for(j = width;j > 0;--j, ++d) v = inttobits(*d, cmpt->prec_, cmpt->sgnd_); for(k = cmpt->cps_;k > 0;--k) c = (v >> (8 * (cmpt->cps_ - 1))) & 0xff; v <<= 8; for(j = width;j > 0;--j, ++d) v = inttobits(*d, cmpt->prec_, cmpt->sgnd_); for(k = cmpt->cps_;k > 0;--k) c = (v >> (8 * (cmpt->cps_ - 1))) & 0xff; v <<= 8; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 long jas_stream_seek(jas_stream_t *stream, long offset, int origin) { long newpos; assert(!((stream->bufmode_ & JAS_STREAM_RDBUF) && (stream->bufmode_ & 	  JAS_STREAM_WRBUF))); stream->flags_ &= ~JAS_STREAM_EOF; if(stream->bufmode_ & JAS_STREAM_WRBUF) stream->cnt_ = 0; stream->ptr_ = stream->bufstart_; stream->bufmode_ &= ~(JAS_STREAM_RDBUF | JAS_STREAM_WRBUF); return newpos;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_iccattrval_t *jas_iccattrval_create0() { jas_iccattrval_t *attrval; memset(attrval, 0, sizeof(jas_iccattrval_t)); attrval->refcnt = 0; attrval->ops = 0; attrval->type = 0; return attrval;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_stream_read(jas_stream_t *stream, void *buf, int cnt) { int n; int c; char *bufptr; bufptr = buf; n = 0; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; while(n < cnt) *bufptr++ = c; ++n; return n;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_putuint8(jas_stream_t *out, uint_fast8_t val) { return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_cmprof_t *jas_cmprof_createfromclrspc(int clrspc) { jas_iccprof_t *iccprof; jas_cmprof_t *prof; iccprof = 0; prof = 0; switch(clrspc) jas_iccprof_destroy(iccprof); iccprof = 0; if(!jas_clrspc_isgeneric(clrspc)) prof->clrspc = clrspc; return prof;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_seq2d_bindsub(jas_matrix_t *s, jas_matrix_t *s1, int xstart, int ystart,   int xend, int yend) { jas_matrix_bindsub(s, s1, ystart - s1->ystart_, xstart - s1->xstart_, 	  yend - s1->ystart_ - 1, xend - s1->xstart_ - 1);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_tvparser_t *jas_tvparser_create(const char *s) { jas_tvparser_t *tvp; tvp->pos = tvp->buf; tvp->tag = 0; tvp->val = 0; return tvp;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_cleanup() { jas_image_clearfmts();
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_bitstream_t *jpc_bitstream_sopen(jas_stream_t *stream, char *mode) { jpc_bitstream_t *bitstream; assert(!strcmp(mode, 'r') || !strcmp(mode, 'w') || !strcmp(mode, 'r+') 	  || !strcmp(mode, 'w+')); bitstream->flags_ = JPC_BITSTREAM_NOCLOSE; bitstream->stream_ = stream; bitstream->openmode_ = (mode[0] == 'w') ? JPC_BITSTREAM_WRITE : 	  JPC_BITSTREAM_READ; bitstream->cnt_ = (bitstream->openmode_ == JPC_BITSTREAM_READ) ? 0 : 8; bitstream->buf_ = 0; return bitstream;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jpc_qcc_putparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *out) { jpc_qcc_t *qcc = &ms->parms.qcc; if(cstate->numcomps <= 256) jpc_putuint8(out, qcc->compno); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_pchglist_t *jpc_pchglist_create() { jpc_pchglist_t *pchglist; pchglist->numpchgs = 0; pchglist->maxpchgs = 0; pchglist->pchgs = 0; return pchglist;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jpc_cod_destroyparms(jpc_ms_t *ms) { jpc_cod_t *cod = &ms->parms.cod; jpc_cox_destroycompparms(&cod->compparms);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_image_getfmt(jas_stream_t *in) { jas_image_fmtinfo_t *fmtinfo; int found; int i; found = 0; for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo) if(fmtinfo->ops.validate) for(i = 0, fmtinfo = jas_image_fmtinfos;i < jas_image_numfmts;++i, 	  ++fmtinfo) if(fmtinfo->ops.validate) if(!(*fmtinfo->ops.validate)(in)) found = 1; return found ? fmtinfo->id : (-1);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_iccprof_t *jas_iccprof_copy(jas_iccprof_t *prof) { jas_iccprof_t *newprof; newprof = 0; newprof->hdr = prof->hdr; newprof->tagtab.numents = 0; newprof->tagtab.ents = 0; assert(newprof->attrtab); jas_iccattrtab_destroy(newprof->attrtab); return newprof;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int mif_validate(jas_stream_t *in) { uchar buf[MIF_MAGICLEN]; uint_fast32_t magic; int i; int n; assert(JAS_STREAM_MAXPUTBACK >= MIF_MAGICLEN); for(i = n - 1;i >= 0;--i) for(i = n - 1;i >= 0;--i) for(i = n - 1;i >= 0;--i) for(i = n - 1;i >= 0;--i) magic = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3]; if(magic != MIF_MAGIC) return -1;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_cmprof_destroy(jas_cmprof_t *prof) { int i; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) if(prof->pxformseqs[i]) jas_cmpxformseq_destroy(prof->pxformseqs[i]); prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) if(prof->pxformseqs[i]) jas_cmpxformseq_destroy(prof->pxformseqs[i]); prof->pxformseqs[i] = 0; for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) for(i = 0;i < JAS_CMPROF_NUMPXFORMSEQS;++i) if(prof->iccprof) jas_iccprof_destroy(prof->iccprof); jas_free(prof);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 long jas_stream_tell(jas_stream_t *stream) { int adjust; int offset; if(stream->bufmode_ & JAS_STREAM_WRBUF) adjust = stream->ptr_ - stream->bufstart_; return offset + adjust;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void pass_destroy(jpc_enc_pass_t *pass) {
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int JPC_SEGTYPE(int passno, int firstpassno, int bypass) { int passtype; return JPC_SEG_MQ;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jp2_colr_destroy(jp2_box_t *box) { jp2_colr_t *colr = &box->data.colr;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_mqenc_codelps(jpc_mqenc_t *mqenc) { jpc_mqenc_codelps2(mqenc->areg, mqenc->creg, mqenc->ctreg, mqenc->curctx, mqenc); ; return jpc_mqenc_error(mqenc) ? (-1) : 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccgetsint32(jas_stream_t *in, jas_iccsint32_t *val) { ulonglong tmp; *val = (tmp & 0x80000000) ? (-JAS_CAST(longlong, (((~tmp) & 	  0x7fffffff) + 1))) : JAS_CAST(longlong, tmp); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jpc_qcx_destroycompparms(jpc_qcxcp_t *compparms) {
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 char *jas_tvparser_getval(jas_tvparser_t *tvp) { return tvp->val;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 const char *jas_getversion() { return JAS_VERSION;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_cmshapmat_invmat(jas_cmreal_t out[3][4], jas_cmreal_t in[3][4]) { jas_cmreal_t d; d = in[0][0] * (in[1][1] * in[2][2] - in[1][2] * in[2][1]) 	  - in[0][1] * (in[1][0] * in[2][2] - in[1][2] * in[2][0]) 	  + in[0][2] * (in[1][0] * in[2][1] - in[1][1] * in[2][0]); out[0][0] = (in[1][1] * in[2][2] - in[1][2] * in[2][1]) / d; out[1][0] = -(in[1][0] * in[2][2] - in[1][2] * in[2][0]) / d; out[2][0] = (in[1][0] * in[2][1] - in[1][1] * in[2][0]) / d; out[0][1] = -(in[0][1] * in[2][2] - in[0][2] * in[2][1]) / d; out[1][1] = (in[0][0] * in[2][2] - in[0][2] * in[2][0]) / d; out[2][1] = -(in[0][0] * in[2][1] - in[0][1] * in[2][0]) / d; out[0][2] = (in[0][1] * in[1][2] - in[0][2] * in[1][1]) / d; out[1][2] = -(in[0][0] * in[1][2] - in[1][0] * in[0][2]) / d; out[2][2] = (in[0][0] * in[1][1] - in[0][1] * in[1][0]) / d; out[0][3] = -in[0][3]; out[1][3] = -in[1][3]; out[2][3] = -in[2][3]; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccgetuint64(jas_stream_t *in, jas_iccuint64_t *val) { ulonglong tmp; *val = tmp; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jas_stream_flush(jas_stream_t *stream) { if(stream->bufmode_ & JAS_STREAM_RDBUF) return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 uint_fast32_t jas_image_rawsize(jas_image_t *image) { uint_fast32_t rawsize; int cmptno; jas_image_cmpt_t *cmpt; rawsize = 0; for(cmptno = 0;cmptno < image->numcmpts_;++cmptno) cmpt = image->cmpts_[cmptno]; rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ + 		  7) / 8; for(cmptno = 0;cmptno < image->numcmpts_;++cmptno) cmpt = image->cmpts_[cmptno]; rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ + 		  7) / 8; for(cmptno = 0;cmptno < image->numcmpts_;++cmptno) cmpt = image->cmpts_[cmptno]; rawsize += (cmpt->width_ * cmpt->height_ * cmpt->prec_ + 		  7) / 8; return rawsize;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccprof_gettagtab(jas_stream_t *in, jas_icctagtab_t *tagtab) { int i; jas_icctagtabent_t *tagtabent; tagtabent = tagtab->ents; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; for(i = 0;i < JAS_CAST(long, tagtab->numents);++i) ++tagtabent; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_stream_t *jas_stream_fopen(const char *filename, const char *mode) { jas_stream_t *stream; jas_stream_fileobj_t *obj; int openflags; stream->openmode_ = jas_strtoopenmode(mode); if((stream->openmode_ & JAS_STREAM_READ) && 	  (stream->openmode_ & JAS_STREAM_WRITE)) openflags = O_RDWR; if(stream->openmode_ & JAS_STREAM_BINARY) openflags |= O_BINARY; if(stream->openmode_ & JAS_STREAM_CREATE) openflags |= O_CREAT | O_TRUNC; obj->fd = -1; obj->flags = 0; obj->pathname[0] = 'stream->obj_ = (void *) obj; stream->ops_ = &jas_stream_fileops; jas_stream_initbuf(stream, JAS_STREAM_FULLBUF, 0, 0); return stream;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_iccgetuint16(jas_stream_t *in, jas_iccuint16_t *val) { ulonglong tmp; *val = tmp; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_getspb(int f) { int hc; int vc; int n; hc = JAS_MIN(((f & (JPC_ESIG | JPC_ESGN)) == JPC_ESIG) + ((f & (JPC_WSIG | JPC_WSGN)) == JPC_WSIG), 1) - 	  JAS_MIN(((f & (JPC_ESIG | JPC_ESGN)) == (JPC_ESIG | JPC_ESGN)) + ((f & (JPC_WSIG | JPC_WSGN)) == (JPC_WSIG | JPC_WSGN)), 1); vc = JAS_MIN(((f & (JPC_NSIG | JPC_NSGN)) == JPC_NSIG) + ((f & (JPC_SSIG | JPC_SSGN)) == JPC_SSIG), 1) - 	  JAS_MIN(((f & (JPC_NSIG | JPC_NSGN)) == (JPC_NSIG | JPC_NSGN)) + ((f & (JPC_SSIG | JPC_SSGN)) == (JPC_SSIG | JPC_SSGN)), 1); n = (!(hc > 0 || (!hc && vc > 0))); return n;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_stream_destroy(jas_stream_t *stream) { if((stream->bufmode_ & JAS_STREAM_FREEBUF) && stream->bufbase_) jas_free(stream->bufbase_); stream->bufbase_ = 0; jas_free(stream);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_iccattrtab_delete(jas_iccattrtab_t *attrtab, int i) { int n; jas_iccattrval_destroy(attrtab->attrs[i].val); --attrtab->numattrs;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_cmpxform_t *jas_cmpxform_copy(jas_cmpxform_t *pxform) { ++pxform->refcnt; return pxform;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jpc_tagtree_t *jpc_tagtree_alloc() { jpc_tagtree_t *tree; tree->numleafsh_ = 0; tree->numleafsv_ = 0; tree->numnodes_ = 0; tree->nodes_ = 0; return tree;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_fix_t jpc_mct_getsynweight(int mctid, int cmptno) { jpc_fix_t synweight; synweight = JPC_FIX_ONE; switch(mctid) synweight = jpc_dbltofix(sqrt(0.6875)); return synweight;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jpc_siz_destroyparms(jpc_ms_t *ms) { jpc_siz_t *siz = &ms->parms.siz; if(siz->comps) jas_free(siz->comps);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_pi_destroy(jpc_pi_t *pi) { jpc_picomp_t *picomp; int compno; if(pi->picomps) for(compno = 0, picomp = pi->picomps;compno < pi->numcomps;++compno, ++picomp) jpc_picomp_destroy(picomp); for(compno = 0, picomp = pi->picomps;compno < pi->numcomps;++compno, ++picomp) jpc_picomp_destroy(picomp); for(compno = 0, picomp = pi->picomps;compno < pi->numcomps;++compno, ++picomp) jpc_picomp_destroy(picomp); jas_free(pi->picomps); if(pi->pchglist) jpc_pchglist_destroy(pi->pchglist); jas_free(pi);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_pchglist_numpchgs(jpc_pchglist_t *pchglist) { return pchglist->numpchgs;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_cmshapmat_destroy(jas_cmpxform_t *pxform) { jas_cmshapmat_t *shapmat = &pxform->data.shapmat; int i; for(i = 0;i < 3;++i) jas_cmshapmatlut_cleanup(&shapmat->luts[i]); for(i = 0;i < 3;++i) jas_cmshapmatlut_cleanup(&shapmat->luts[i]); for(i = 0;i < 3;++i) jas_cmshapmatlut_cleanup(&shapmat->luts[i]);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jp2_encode(jas_image_t *image, jas_stream_t *out, char *optstr) { jp2_box_t *box; jp2_ftyp_t *ftyp; jp2_ihdr_t *ihdr; jas_stream_t *tmpstream; int allcmptssame; jp2_bpcc_t *bpcc; long len; uint_fast16_t cmptno; jp2_colr_t *colr; char buf[4096]; uint_fast32_t overhead; jp2_cdefchan_t *cdefchanent; jp2_cdef_t *cdef; int i; uint_fast32_t typeasoc; jas_iccprof_t *iccprof; jas_stream_t *iccstream; int pos; int needcdef; int prec; int sgnd; box = 0; tmpstream = 0; allcmptssame = 1; sgnd = jas_image_cmptsgnd(image, 0); prec = jas_image_cmptprec(image, 0); for(i = 1;i < jas_image_numcmpts(image);++i) for(i = 1;i < jas_image_numcmpts(image);++i) box->data.jp.magic = JP2_JP_MAGIC; jp2_box_destroy(box); box = 0; ftyp = &box->data.ftyp; ftyp->majver = JP2_FTYP_MAJVER; ftyp->minver = JP2_FTYP_MINVER; ftyp->numcompatcodes = 1; ftyp->compatcodes[0] = JP2_FTYP_COMPATCODE; jp2_box_destroy(box); box = 0; ihdr = &box->data.ihdr; ihdr->width = jas_image_width(image); ihdr->height = jas_image_height(image); ihdr->numcmpts = jas_image_numcmpts(image); ihdr->bpc = allcmptssame ? JP2_SPTOBPC(jas_image_cmptsgnd(image, 0), 	  jas_image_cmptprec(image, 0)) : JP2_IHDR_BPCNULL; ihdr->comptype = JP2_IHDR_COMPTYPE; ihdr->csunk = 0; ihdr->ipr = 0; jp2_box_destroy(box); box = 0; colr = &box->data.colr; switch(jas_image_clrspc(image)) colr->method = JP2_COLR_ENUM; colr->csid = clrspctojp2(jas_image_clrspc(image)); colr->pri = JP2_COLR_PRI; colr->approx = 0; jp2_box_destroy(box); box = 0; needcdef = 1; switch(jas_clrspc_fam(jas_image_clrspc(image))) if(jas_image_cmpttype(image, 0) == 		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_R) && 		  jas_image_cmpttype(image, 1) == 		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_G) && 		  jas_image_cmpttype(image, 2) == 		  JAS_IMAGE_CT_COLOR(JAS_CLRSPC_CHANIND_RGB_B)) needcdef = 0; len = jas_stream_tell(tmpstream); jas_stream_rewind(tmpstream); box->len = len + JP2_BOX_HDRLEN(false); jp2_box_destroy(box); box = 0; jas_stream_close(tmpstream); tmpstream = 0; box->len = 0; jp2_box_destroy(box); box = 0; overhead = jas_stream_getrwcount(out); sprintf(buf, '_s _jp2overhead=_lu ', (optstr ? optstr : ''), 	  (unsigned long) overhead); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_cmshapmatlut_cleanup(jas_cmshapmatlut_t *lut) { if(lut->data) jas_free(lut->data); lut->data = 0; lut->size = 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jas_strtoopenmode(const char *s) { int openmode = 0; while(*s != 'switch(*s) openmode |= JAS_STREAM_WRITE | JAS_STREAM_CREATE; ++s; while(*s != 'switch(*s) openmode |= JAS_STREAM_READ | JAS_STREAM_WRITE; ++s; while(*s != 'switch(*s) openmode |= JAS_STREAM_BINARY; ++s; return openmode;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int mem_close(jas_stream_obj_t *obj) { jas_stream_memobj_t *m = (jas_stream_memobj_t *)obj; if(m->myalloc_ && m->buf_) jas_free(m->buf_); m->buf_ = 0; jas_free(obj); return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_tsfb_analyze(jpc_tsfb_t *tsfb, jas_seq2d_t *a) { return (tsfb->numlvls > 0) ? jpc_tsfb_analyze2(tsfb, jas_seq2d_getref(a, 	  jas_seq2d_xstart(a), jas_seq2d_ystart(a)), jas_seq2d_xstart(a), 	  jas_seq2d_ystart(a), jas_seq2d_width(a), 	  jas_seq2d_height(a), jas_seq2d_rowstep(a), tsfb->numlvls - 1) : 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_tagtreenode_t *jpc_tagtree_getleaf(jpc_tagtree_t *tree, int n) { return &tree->nodes_[n];
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jas_image_cmpt_destroy(jas_image_cmpt_t *cmpt) { if(cmpt->stream_) jas_stream_close(cmpt->stream_); jas_free(cmpt);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_enc_enccblks(jpc_enc_t *enc) { jpc_enc_tcmpt_t *tcmpt; jpc_enc_tcmpt_t *endcomps; jpc_enc_rlvl_t *lvl; jpc_enc_rlvl_t *endlvls; jpc_enc_band_t *band; jpc_enc_band_t *endbands; jpc_enc_cblk_t *cblk; jpc_enc_cblk_t *endcblks; int i; int j; int mx; int bmx; int v; jpc_enc_tile_t *tile; uint_fast32_t prcno; jpc_enc_prc_t *prc; tile = enc->curtile; endcomps = &tile->tcmpts[tile->numtcmpts]; for(tcmpt = tile->tcmpts;tcmpt != endcomps;++tcmpt) endlvls = &tcmpt->rlvls[tcmpt->numrlvls]; for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); if(v > mx) mx = v; if(mx > bmx) bmx = mx; cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(tcmpt = tile->tcmpts;tcmpt != endcomps;++tcmpt) endlvls = &tcmpt->rlvls[tcmpt->numrlvls]; for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(tcmpt = tile->tcmpts;tcmpt != endcomps;++tcmpt) endlvls = &tcmpt->rlvls[tcmpt->numrlvls]; for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(lvl = tcmpt->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) bmx = 0; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) mx = 0; for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(i = 0;i < jas_matrix_numrows(cblk->data);++i) for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); for(j = 0;j < jas_matrix_numcols(cblk->data);++j) v = abs(jas_matrix_get(cblk->data, i, j)); cblk->numbps = JAS_MAX(jpc_firstone(mx) + 1 - JPC_NUMEXTRABITS, 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->numimsbs = band->numbps - cblk->numbps; assert(cblk->numimsbs >= 0); for(cblk = prc->cblks;cblk != endcblks;++cblk) return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static jas_cmpxformseq_t *jas_cmpxformseq_create() { jas_cmpxformseq_t *pxformseq; pxformseq = 0; pxformseq->pxforms = 0; pxformseq->numpxforms = 0; pxformseq->maxpxforms = 0; return pxformseq;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jpc_restore_t2state(jpc_enc_t *enc) { jpc_enc_tcmpt_t *comp; jpc_enc_tcmpt_t *endcomps; jpc_enc_rlvl_t *lvl; jpc_enc_rlvl_t *endlvls; jpc_enc_band_t *band; jpc_enc_band_t *endbands; jpc_enc_cblk_t *cblk; jpc_enc_cblk_t *endcblks; jpc_enc_tile_t *tile; int prcno; jpc_enc_prc_t *prc; tile = enc->curtile; endcomps = &tile->tcmpts[tile->numtcmpts]; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(comp = tile->tcmpts;comp != endcomps;++comp) endlvls = &comp->rlvls[comp->numrlvls]; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) if(!band->data) for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(lvl = comp->rlvls;lvl != endlvls;++lvl) endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits; for(band = lvl->bands;band != endbands;++band) for(prcno = 0, prc = band->prcs;prcno < lvl->numprcs;++prcno, ++prc) jpc_tagtree_copy(prc->incltree, prc->savincltree); jpc_tagtree_copy(prc->nlibtree, prc->savnlibtree); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) cblk->curpass = cblk->savedcurpass; cblk->numencpasses = cblk->savednumencpasses; cblk->numlenbits = cblk->savednumlenbits;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jpc_mqenc_t *jpc_mqenc_create(int maxctxs, jas_stream_t *out) { jpc_mqenc_t *mqenc; mqenc->out = out; mqenc->maxctxs = maxctxs; mqenc->curctx = mqenc->ctxs; jpc_mqenc_init(mqenc); jpc_mqenc_setctxs(mqenc, 0, 0); return mqenc;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jpc_putnumnewpasses(jpc_bitstream_t *out, int n) { int ret; if(n == 1) ret = jpc_bitstream_putbit(out, 0); return (ret != EOF) ? 0 : (-1);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_bitstream_outalign(jpc_bitstream_t *bitstream, int filldata) { int n; int v; assert(bitstream->openmode_ & JPC_BITSTREAM_WRITE); assert(!(filldata & (~0x3f))); n = 0; v = 0; return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int icctoclrspc(int iccclrspc, int refflag) { if(refflag) switch(iccclrspc) return JAS_CLRSPC_CIEXYZ;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static void jpc_qcc_destroyparms(jpc_ms_t *ms) { jpc_qcc_t *qcc = &ms->parms.qcc; jpc_qcx_destroycompparms(&qcc->compparms);
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_pi_next(jpc_pi_t *pi) { jpc_pchg_t *pchg; int ret; pi->valid = false; pchg = pi->pchg; switch(pchg->prgord) ret = jpc_pi_nextlrcp(pi); pi->pchg = 0; pi->valid = false; if(!pi->pchg) ++pi->pchgno; pi->compno = 0; pi->rlvlno = 0; pi->prcno = 0; pi->lyrno = 0; pi->prgvolfirst = true; return 1;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 void jas_matrix_asl(jas_matrix_t *matrix, int n) { int i; int j; jas_seqent_t *rowstart; int rowstep; jas_seqent_t *data; rowstep = jas_matrix_rowstep(matrix); for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(i = matrix->numrows_, rowstart = matrix->rows_[0];i > 0;--i, 	  rowstart += rowstep) for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n; for(j = matrix->numcols_, data = rowstart;j > 0;--j, 		  ++data) *data <<= n;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 jas_cmprof_t *jas_cmprof_createfromiccprof(jas_iccprof_t *iccprof) { jas_cmprof_t *prof; jas_icchdr_t icchdr; jas_cmpxformseq_t *fwdpxformseq; jas_cmpxformseq_t *revpxformseq; prof = 0; fwdpxformseq = 0; revpxformseq = 0; jas_iccprof_gethdr(iccprof, &icchdr); prof->clrspc = icctoclrspc(icchdr.colorspc, 0); prof->refclrspc = icctoclrspc(icchdr.refcolorspc, 1); prof->numchans = jas_clrspc_numchans(prof->clrspc); prof->numrefchans = jas_clrspc_numchans(prof->refclrspc); if(prof->numchans == 3) prof->pxformseqs[SEQFWD(0)] = fwdpxformseq; prof->pxformseqs[SEQREV(0)] = revpxformseq; return prof;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 int jpc_enc_encpkt(jpc_enc_t *enc, jas_stream_t *out, int compno, int lvlno, int prcno, int lyrno) { jpc_enc_tcmpt_t *comp; jpc_enc_rlvl_t *lvl; jpc_enc_band_t *band; jpc_enc_band_t *endbands; jpc_enc_cblk_t *cblk; jpc_enc_cblk_t *endcblks; jpc_bitstream_t *outb; jpc_enc_pass_t *pass; jpc_enc_pass_t *startpass; jpc_enc_pass_t *lastpass; jpc_enc_pass_t *endpass; jpc_enc_pass_t *endpasses; int i; int included; int ret; jpc_tagtreenode_t *leaf; int n; int t1; int t2; int adjust; int maxadjust; int datalen; int numnewpasses; int passcount; jpc_enc_tile_t *tile; jpc_enc_prc_t *prc; jpc_enc_cp_t *cp; jpc_ms_t *ms; tile = enc->curtile; cp = enc->cp; outb = jpc_bitstream_sopen(out, 'w+'); assert(outb); comp = &tile->tcmpts[compno]; lvl = &comp->rlvls[lvlno]; endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) prc = &band->prcs[prcno]; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) if(!lyrno) leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); pass = cblk->curpass; included = (pass && pass->lyrno == lyrno); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) pass = cblk->curpass; included = (pass && pass->lyrno == lyrno); if(!cblk->numencpasses) leaf = jpc_tagtree_getleaf(prc->incltree, 				  cblk - prc->cblks); if(!included) for(band = lvl->bands;band != endbands;++band) prc = &band->prcs[prcno]; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) if(!lyrno) leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); pass = cblk->curpass; included = (pass && pass->lyrno == lyrno); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) pass = cblk->curpass; included = (pass && pass->lyrno == lyrno); if(!cblk->numencpasses) leaf = jpc_tagtree_getleaf(prc->incltree, 				  cblk - prc->cblks); if(!included) for(band = lvl->bands;band != endbands;++band) prc = &band->prcs[prcno]; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) if(!lyrno) leaf = jpc_tagtree_getleaf(prc->nlibtree, cblk - prc->cblks); jpc_tagtree_setvalue(prc->nlibtree, leaf, cblk->numimsbs); pass = cblk->curpass; included = (pass && pass->lyrno == lyrno); endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) pass = cblk->curpass; included = (pass && pass->lyrno == lyrno); if(!cblk->numencpasses) leaf = jpc_tagtree_getleaf(prc->incltree, 				  cblk - prc->cblks); if(!included) jpc_bitstream_outalign(outb, 0); jpc_bitstream_close(outb); comp = &tile->tcmpts[compno]; lvl = &comp->rlvls[lvlno]; endbands = &lvl->bands[lvl->numbands]; for(band = lvl->bands;band != endbands;++band) prc = &band->prcs[prcno]; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) pass = cblk->curpass; if(!pass) for(band = lvl->bands;band != endbands;++band) prc = &band->prcs[prcno]; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) pass = cblk->curpass; if(!pass) for(band = lvl->bands;band != endbands;++band) prc = &band->prcs[prcno]; endcblks = &prc->cblks[prc->numcblks]; for(cblk = prc->cblks;cblk != endcblks;++cblk) pass = cblk->curpass; if(!pass) return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int jp2_putuint32(jas_stream_t *out, uint_fast32_t val) { return 0;
model_version:0x01000000 A-data-stat:0xa20000000000000010101010101002100100000000000000a48100000000000000000000101010100000000000000000101010101010101000100000000000001010101010101010c5490a6500000000101010101010101099c4096500000000101010101010101099c40965000000001010101010101010101010101010101010101010101010101010101010101010 A-data:0x503337230a0930230000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a230a31370c0c30303123000a0c000c23 static int pnm_gethdr(jas_stream_t *in, pnm_hdr_t *hdr) { int_fast32_t maxval; int_fast32_t width; int_fast32_t height; hdr->width = width; hdr->height = height; if(pnm_type(hdr->magic) != PNM_TYPE_PBM) hdr->maxval = maxval; hdr->sgnd = false; switch(pnm_type(hdr->magic)) hdr->numcmpts = 3; return 0;
