-----label-----
0
-----code-----
int addopt(char *optstr, int maxlen, char *s)
{
	int n;
	int m;

	n = strlen(optstr);
	m = n + strlen(s) + 1;
	if (m > maxlen) {
		return 1;
	}
	if (n > 0) {
		strcat(optstr, "\n");
	}
	strcat(optstr, s);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
10,11
10,12
12,13
14,15
14,16
16,17
16,18
19,20
19,21
19,22
19,23
19,24
19,25
19,26
19,27
20,21
21,22
21,23
23,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
45,46
47,48
47,49
48,49
50,51
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
62,63
62,64
63,64
63,65
64,65
67,68
68,69
69,70
69,71
69,72
70,71
72,73
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
-----nextToken-----
2,4,6,8,9,11,13,15,17,18,22,24,27,29,33,36,38,42,46,49,51,52,56,58,61,65,66,71,73,74,78,80,82,84
-----computeFrom-----
31,32
31,33
40,41
40,42
43,44
43,45
44,45
44,46
54,55
54,56
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int addopt(char *optstr, int maxlen, char *s){	int n;	int m;	n = strlen(optstr);	m = n + strlen(s) + 1;	if (m > maxlen) {		return 1;	}	if (n > 0) {		strcat(optstr, "\n");	}	strcat(optstr, s);	return 0;}
int
addopt(char *optstr, int maxlen, char *s)
addopt
char *optstr
char
*optstr
*
optstr
int maxlen
int
maxlen
maxlen
char *s
char
*s
*
s
{	int n;	int m;	n = strlen(optstr);	m = n + strlen(s) + 1;	if (m > maxlen) {		return 1;	}	if (n > 0) {		strcat(optstr, "\n");	}	strcat(optstr, s);	return 0;}
int n;
int n;
int
n
n
int m;
int m;
int
m
m
n = strlen(optstr);
n = strlen(optstr)
n
n
strlen(optstr)
strlen
strlen
optstr
optstr
m = n + strlen(s) + 1;
m = n + strlen(s) + 1
m
m
n + strlen(s) + 1
n + strlen(s)
n
n
strlen(s)
strlen
strlen
s
s
1
if (m > maxlen) {		return 1;	}
m > maxlen
m
m
maxlen
maxlen
{		return 1;	}
return 1;
1
if (n > 0) {		strcat(optstr, "\n");	}
n > 0
n
n
0
{		strcat(optstr, "\n");	}
strcat(optstr, "\n");
strcat(optstr, "\n")
strcat
strcat
optstr
optstr
"\n"
strcat(optstr, s);
strcat(optstr, s)
strcat
strcat
optstr
optstr
s
s
return 0;
0
-----joern-----
(4,2,0)
(4,3,0)
(0,4,0)
(4,3,1)
(1,4,1)
(4,0,1)
(4,3,2)
-----------------------------------
(0,cmdopts)
(1,RET)
(2,)
(3,cmdopts_t *cmdopts)
(4,free(cmdopts)
-----cfg-----
(34,38)
(34,41)
(38,41)
(7,16)
(41,44)
(44,46)
(14,23)
(16,14)
(18,27)
(20,18)
(21,20)
(23,21)
(27,31)
(27,34)
(31,46)
-----path-----
7,16,14,23,21,20,18,27,31,46
7,16,14,23,21,20,18,27,34,38,41,44,46
7,16,14,23,21,20,18,27,34,41,44,46
-----cfgNode-----
5,<global>
6,<empty>
7,int addopt (char *optstr,int maxlen,char *s)
8,char *optstr
9,int maxlen
10,char *s
11,<empty>
12,int n
13,int m
14,n = strlen(optstr)
15,n
16,strlen(optstr)
17,optstr
18,m = n + strlen(s) + 1
19,m
20,n + strlen(s) + 1
21,n + strlen(s)
22,n
23,strlen(s)
24,s
25,1
26,if (m > maxlen)
27,m > maxlen
28,m
29,maxlen
30,<empty>
31,return 1;
32,1
33,if (n > 0)
34,n > 0
35,n
36,0
37,<empty>
38,strcat(optstr, "\n")
39,optstr
40,"\n"
41,strcat(optstr, s)
42,optstr
43,s
44,return 0;
45,0
46,RET
47,char *optstr
48,int maxlen
49,char *s
50,RET
51,int addopt (char *optstr,int maxlen,char *s)
52,char *optstr
53,int maxlen
54,char *s
55,<empty>
56,int n
57,int m
58,n = strlen(optstr)
59,n
60,strlen(optstr)
61,optstr
62,m = n + strlen(s) + 1
63,m
64,n + strlen(s) + 1
65,n + strlen(s)
66,n
67,strlen(s)
68,s
69,1
70,if (m > maxlen)
71,m > maxlen
72,m
73,maxlen
74,<empty>
75,return 1;
76,1
77,if (n > 0)
78,n > 0
79,n
80,0
81,<empty>
82,strcat(optstr, "\n")
83,optstr
84,"\n"
85,strcat(optstr, s)
86,optstr
87,s
88,return 0;
89,0
90,RET
91,char *optstr
92,int maxlen
93,char *s
=====================================
