<global>
<empty>
char* helperGood (char * aString)
char * aString
<empty>
size_t i
i = 0
i
0
size_t j
char* reversedString
* reversedString = NULL
reversedString
NULL
if (aString != NULL)
aString != NULL
aString
NULL
<empty>
i = strlen(aString)
i
strlen(aString)
aString
reversedString = (char *) malloc(i+1)
reversedString
(char *) malloc(i+1)
char *
malloc(i+1)
i+1
i
1
if (reversedString == NULL)
reversedString == NULL
reversedString
NULL
<empty>
exit(-1)
-1
1
for (j = 0;j < i;j++)
<empty>
j = 0
j
0
j < i
j
i
j++
j
<empty>
reversedString[j] = aString[i-j-1]
reversedString[j]
reversedString
j
aString[i-j-1]
aString
i-j-1
i-j
i
j
1
reversedString[i] = '\0'
reversedString[i]
reversedString
i
'\0'
return reversedString;
reversedString
else
<empty>
return NULL;
NULL
RET
char * aString
RET
char* helperGood (char * aString)
char * aString
<empty>
size_t i
i = 0
i
0
size_t j
char* reversedString
* reversedString = NULL
reversedString
NULL
if (aString != NULL)
aString != NULL
aString
NULL
<empty>
i = strlen(aString)
i
strlen(aString)
aString
reversedString = (char *) malloc(i+1)
reversedString
(char *) malloc(i+1)
char *
malloc(i+1)
i+1
i
1
if (reversedString == NULL)
reversedString == NULL
reversedString
NULL
<empty>
exit(-1)
-1
1
for (j = 0;j < i;j++)
<empty>
j = 0
j
0
j < i
j
i
j++
j
<empty>
reversedString[j] = aString[i-j-1]
reversedString[j]
reversedString
j
aString[i-j-1]
aString
i-j-1
i-j
i
j
1
reversedString[i] = '\0'
reversedString[i]
reversedString
i
'\0'
return reversedString;
reversedString
else
<empty>
return NULL;
NULL
RET
char * aString